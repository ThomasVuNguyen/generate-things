[
  {
    "mythical_creature": "dragon",
    "openscad_code": "// Realistic Dragon - Medium Complexity\n// 3D Printable mythical dragon with wings, horns, scales and tail\n\n// Overall dimensions: ~80mm long, 60mm wide, 50mm tall\n\ncolor(\"darkgreen\") \nunion() {\n    // Main body\n    body();\n\n    // Neck and head\n    translate([20, 0, 15]) rotate([0, 10, 0]) head();\n\n    // Wings\n    translate([0, 0, 25]) left_wing();\n    mirror([0, 1, 0]) translate([0, 0, 25]) left_wing();\n\n    // Legs\n    translate([15, 8, 0]) front_leg();\n    translate([15, -8, 0]) mirror([0, 1, 0]) front_leg();\n    translate([-15, 6, 0]) rear_leg();\n    translate([-15, -6, 0]) mirror([0, 1, 0]) rear_leg();\n\n    // Tail\n    translate([-30, 0, 8]) tail();\n}\n\n// Body module - elongated with scales\nmodule body() {\n    difference() {\n        // Main body shape\n        scale([1.5, 0.8, 0.6]) sphere(d=30, $fn=32);\n        \n        // Belly flattening\n        translate([0, 0, -10]) cube([40, 25, 20], center=true);\n    }\n    \n    // Scale texture along back\n    for(i = [-15:5:15]) {\n        translate([i, 0, 8]) scale([0.8, 0.4, 0.3]) sphere(d=8);\n    }\n}\n\n// Head module with snout, horns and eyes\nmodule head() {\n    union() {\n        // Snout\n        translate([8, 0, 0]) scale([1.2, 0.6, 0.6]) sphere(d=15, $fn=32);\n        \n        // Main head\n        sphere(d=20, $fn=32);\n        \n        // Horns - two curved ones\n        translate([0, 5, 10]) rotate([30, 0, 20]) cylinder(h=15, d1=5, d2=2);\n        translate([0, -5, 10]) rotate([30, 0, -20]) cylinder(h=15, d1=5, d2=2);\n        \n        // Eyes\n        color(\"red\") {\n            translate([2, 6, 5]) sphere(d=3);\n            translate([2, -6, 5]) sphere(d=3);\n        }\n        \n        // Nostrils\n        translate([12, 2, 0]) rotate([90, 0, 0]) cylinder(h=3, d=2);\n        translate([12, -2, 0]) rotate([90, 0, 0]) cylinder(h=3, d=2);\n    }\n}\n\n// Wing module - membrane with bones\nmodule left_wing() {\n    color(\"darkolive\") \n    union() {\n        // Main wing membrane\n        translate([0, 10, 0]) rotate([0, 0, 10]) {\n            difference() {\n                // Wing shape\n                scale([1.5, 2, 0.2]) sphere(d=20, $fn=6);\n                \n                // Cut bottom flat\n                translate([0, 0, -3]) cube([40, 40, 6], center=true);\n            }\n        }\n        \n        // Wing bones\n        for(i = [0:30:90]) {\n            rotate([0, 0, i]) \n            translate([0, 20, 0]) scale([0.3, 1, 0.3]) cylinder(h=20, d=2);\n        }\n    }\n}\n\n// Leg module - clawed feet\nmodule front_leg() {\n    color(\"forestgreen\") \n    union() {\n        // Upper leg\n        translate([0, 0, 5]) rotate([30, 0, 0]) cylinder(h=15, d=6);\n        \n        // Lower leg\n        translate([0, 0, -3]) rotate([60, 0, 0]) cylinder(h=12, d=5);\n        \n        // Foot\n        translate([0, 0, -8]) rotate([90, 0, 0]) {\n            // Main foot\n            cylinder(h=8, d=6);\n            \n            // Toes with claws\n            for(i = [-2:1:2]) {\n                translate([i*2, 5, 0]) {\n                    // Toe\n                    cylinder(h=4, d=2);\n                    // Claw\n                    translate([0, 2, 0]) cone(h=3, d1=2, d2=0.5);\n                }\n            }\n        }\n    }\n}\n\nmodule rear_leg() {\n    scale([1.2, 1.2, 1.2]) front_leg();\n}\n\n// Tail module - segmented and tapering\nmodule tail() {\n    color(\"darkgreen\") \n    union() {\n        // Tail segments getting smaller\n        for(i = [0:5:30]) {\n            translate([-i, 0, -i/5]) \n            scale([1-i/35, 1-i/35, 1-i/35]) \n            rotate([0, -i*2, 0]) \n            cylinder(h=6, d=8-i/3, center=true);\n            \n            // Tail spikes\n            if(i % 10 == 0) {\n                translate([-i, 0, 3-i/5]) rotate([0, 0, 90]) \n                cone(h=4, d1=2, d2=0.5);\n            }\n        }\n        \n        // Tail tip\n        translate([-35, 0, -7]) cone(h=8, d1=6, d2=0);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "wyvern",
    "openscad_code": "// Wyvern - Medium Complexity Realistic Style\n// Wings, horns, tail spike, and reptilian features\n\n$fn = 32;\n\nmodule wyvern() {\n    // Main body - elongated torso\n    color(\"darkgreen\") {\n        translate([0, 0, 15]) {\n            scale([1.8, 1, 1]) sphere(8);  // Chest\n            translate([0, 0, -8]) cylinder(h=16, r1=8, r2=5);  // Torso\n            translate([0, 0, -20]) cylinder(h=12, r1=5, r2=3);  // Tail base\n        }\n    }\n\n    // Head\n    color(\"forestgreen\") {\n        translate([17, 0, 25]) {\n            scale([1.3, 0.7, 0.8]) sphere(6);  // Snout\n            translate([-3, 0, 2]) sphere(5);  // Skull\n        }\n    }\n\n    // Horns\n    color(\"darkslategray\") {\n        for(side = [-1, 1]) {\n            translate([15, side*4, 27]) {\n                rotate([0, side*20, 0]) \n                    cylinder(h=8, r1=3, r2=1);\n            }\n        }\n    }\n\n    // Eyes\n    color(\"red\") {\n        for(side = [-1, 1]) {\n            translate([20, side*2.5, 26]) \n                sphere(1.5);\n        }\n    }\n\n    // Wings - membrane supported by bones\n    module wing() {\n        color(\"darkolivegreen\") {\n            difference() {\n                // Main wing membrane\n                translate([0, 0, 5]) {\n                    rotate([0, 90, 0]) \n                        scale([1, 0.3, 1]) \n                            cylinder(h=30, r1=20, r2=5);\n                }\n                \n                // Cut wing shape\n                for(i = [0:3]) {\n                    translate([i*6, 0, -5]) \n                        cube([2, 30, 30], center=true);\n                }\n            }\n        }\n        \n        // Wing bones\n        color(\"darkslategray\") {\n            for(angle = [0, 30, 60]) {\n                rotate([angle, 0, 0]) {\n                    translate([0, 0, 5]) {\n                        rotate([0, 90, 0]) \n                            cylinder(h=25, r1=0.8, r2=0.3);\n                    }\n                }\n            }\n        }\n    }\n\n    // Attach wings\n    for(side = [-1, 1]) {\n        translate([0, side*8, 22]) {\n            rotate([0, 0, side*10]) {\n                mirror([0, side, 0]) \n                    wing();\n            }\n        }\n    }\n\n    // Legs - two legs as wyverns have\n    color(\"darkgreen\") {\n        for(side = [-1, 1]) {\n            translate([5, side*6, 10]) {\n                // Thigh\n                rotate([0, -30, 0]) \n                    cylinder(h=12, r1=3, r2=2);\n                \n                // Lower leg\n                translate([0, 0, -12]) {\n                    rotate([45, 0, 0]) \n                        cylinder(h=10, r1=2, r2=1.5);\n                }\n                \n                // Foot\n                translate([0, 0, -22]) {\n                    rotate([90, 0, 0]) {\n                        scale([2, 1, 0.5]) \n                            sphere(2);\n                    }\n                }\n            }\n        }\n    }\n\n    // Tail - long with spike\n    color(\"darkgreen\") {\n        translate([0, 0, -25]) {\n            for(i = [0:8]) {\n                translate([0, 0, -i*3]) {\n                    scale([1, 1, 0.8]) \n                        cylinder(h=3, r1=3-i*0.3, r2=3-(i+1)*0.3);\n                }\n            }\n        }\n    }\n\n    // Tail spike\n    color(\"darkslategray\") {\n        translate([0, 0, -50]) {\n            rotate([0, 180, 0]) \n                cylinder(h=5, r1=2, r2=0.5);\n        }\n    }\n\n    // Scales pattern on back\n    color(\"forestgreen\") {\n        for(i = [0:5]) {\n            for(side = [-1, 1]) {\n                translate([5-i*3, side*4, 22-i*2]) {\n                    scale([1, 0.5, 0.5]) \n                        sphere(1.5);\n                }\n            }\n        }\n    }\n}\n\n// Scale entire model to 70mm length\nscale(0.7) wyvern();",
    "renders": true
  },
  {
    "mythical_creature": "basilisk",
    "openscad_code": "// Basilisk mythical creature - Realistic style with medium complexity\n// 3D printable design with proper wall thickness and minimal overhangs\n\n// Color definitions\n$fn = 32;\n\nmodule basilisk() {\n    // Body - serpentine with lizard-like proportions\n    color(\"darkgreen\") union() {\n        // Main body segments\n        translate([0, 0, 10]) scale([1.2, 0.8, 0.6]) sphere(d=25);\n        translate([0, 0, 18]) scale([1, 0.7, 0.5]) sphere(d=20);\n        translate([0, 0, 25]) scale([0.8, 0.6, 0.4]) sphere(d=15);\n        \n        // Tail extending back\n        hull() {\n            translate([0, 0, 25]) sphere(d=8);\n            translate([0, 0, 40]) sphere(d=4);\n        }\n    }\n    \n    // Head - rooster-like with serpent features\n    color(\"forestgreen\") union() {\n        // Main head\n        translate([0, 0, 35]) rotate([0, 20, 0]) scale([0.9, 0.7, 0.8]) sphere(d=12);\n        \n        // Crest - rooster comb\n        for(i = [-2:2]) {\n            translate([i*2, 0, 42]) scale([0.5, 1, 2]) cylinder(h=3, d=2);\n        }\n        \n        // Eyes - glowing red\n        color(\"red\") {\n            translate([3, 4, 38]) sphere(d=1.5);\n            translate([-3, 4, 38]) sphere(d=1.5);\n        }\n        \n        // Beak/snout\n        hull() {\n            translate([0, 5, 35]) sphere(d=3);\n            translate([0, 8, 35]) sphere(d=2);\n        }\n    }\n    \n    // Wings - bat-like membrane wings\n    color(\"darkolivegreen\") union() {\n        // Left wing\n        translate([12, 0, 25]) rotate([0, 0, -30]) union() {\n            // Wing structure\n            cylinder(h=20, d=2);\n            translate([0, 0, 20]) rotate([30, 0, 0]) cylinder(h=15, d=1.5);\n            translate([0, 0, 20]) rotate([-30, 0, 0]) cylinder(h=15, d=1.5);\n            \n            // Wing membrane\n            hull() {\n                translate([0, 0, 0]) sphere(d=2);\n                translate([5, 0, 15]) sphere(d=2);\n                translate([8, 0, 25]) sphere(d=2);\n                translate([5, 0, 35]) sphere(d=2);\n                translate([0, 0, 20]) sphere(d=2);\n            }\n        }\n        \n        // Right wing (mirrored)\n        translate([-12, 0, 25]) mirror([1, 0, 0]) rotate([0, 0, -30]) union() {\n            cylinder(h=20, d=2);\n            translate([0, 0, 20]) rotate([30, 0, 0]) cylinder(h=15, d=1.5);\n            translate([0, 0, 20]) rotate([-30, 0, 0]) cylinder(h=15, d=1.5);\n            \n            hull() {\n                translate([0, 0, 0]) sphere(d=2);\n                translate([5, 0, 15]) sphere(d=2);\n                translate([8, 0, 25]) sphere(d=2);\n                translate([5, 0, 35]) sphere(d=2);\n                translate([0, 0, 20]) sphere(d=2);\n            }\n        }\n    }\n    \n    // Legs - lizard-like with claws\n    color(\"olivedrab\") union() {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side*8, 0, 15]) union() {\n                cylinder(h=10, d=3);\n                translate([0, 0, 10]) rotate([30, 0, 0]) cylinder(h=8, d=2.5);\n                translate([0, 0, 18]) rotate([30, 0, 0]) cylinder(h=6, d=2);\n                \n                // Claws\n                for(i = [-1, 0, 1]) {\n                    translate([i*1, 0, 23]) scale([0.5, 0.5, 1]) cylinder(h=3, d=1);\n                }\n            }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([side*6, 0, 5]) union() {\n                cylinder(h=8, d=3.5);\n                translate([0, 0, 8]) rotate([30, 0, 0]) cylinder(h=7, d=3);\n                translate([0, 0, 15]) rotate([30, 0, 0]) cylinder(h=6, d=2.5);\n                \n                // Claws\n                for(i = [-1.2, 0, 1.2]) {\n                    translate([i*1.2, 0, 21]) scale([0.6, 0.6, 1]) cylinder(h=3, d=1.2);\n                }\n            }\n        }\n    }\n    \n    // Scales - overlapping pattern\n    color(\"darkgreen\") {\n        for(i = [0:3]) {\n            for(j = [0:8]) {\n                if(j % 2 == i % 2) {\n                    translate([sin(j*30)*2, cos(j*30)*2, 12+i*4]) \n                    rotate([0, 0, j*30]) \n                    scale([1, 0.5, 0.3]) \n                    sphere(d=3);\n                }\n            }\n        }\n    }\n    \n    // Horns - small curved horns\n    color(\"saddlebrown\") {\n        for(side = [-1, 1]) {\n            translate([side*4, 0, 40]) rotate([0, side*20, 0]) \n            cylinder(h=6, d1=2, d2=1);\n            translate([side*5, 0, 44]) rotate([0, side*30, 0]) \n            cylinder(h=4, d1=1.5, d2=0.5);\n        }\n    }\n}\n\n// Generate the basilisk\ntranslate([0, 0, 0]) scale([2, 2, 2]) basilisk();",
    "renders": true
  },
  {
    "mythical_creature": "hydra",
    "openscad_code": "// Realistic Hydra - Medium Complexity\n// Five-headed serpentine dragon with scales and wings\n// Designed for 3D printing at 80mm length\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Colors\ncolor_body = \"#2E8B57\";\ncolor_scales = \"#006400\";\ncolor_eyes = \"#DC143C\";\ncolor_teeth = \"#FFFACD\";\ncolor_wings = \"#556B2F\";\n\nmodule hydra() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Central torso\n            color(color_body) {\n                translate([0, 0, 15]) {\n                    scale([1.5, 1, 1]) {\n                        sphere(12);\n                    }\n                }\n                \n                // Tail\n                translate([-25, 0, 8]) {\n                    rotate([0, 30, 0]) {\n                        cylinder(h = 35, r1 = 8, r2 = 3);\n                    }\n                }\n                \n                // Legs (4)\n                for(i = [0:1]) {\n                    mirror([i*2-1, 0, 0]) {\n                        translate([8, 6, 5]) {\n                            rotate([0, 0, -30]) {\n                                cylinder(h = 15, r1 = 4, r2 = 3);\n                            }\n                        }\n                        translate([12, -6, 5]) {\n                            rotate([0, 0, 30]) {\n                                cylinder(h = 15, r1 = 4, r2 = 3);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Wings\n            color(color_wings) {\n                translate([0, 0, 25]) {\n                    for(side = [0:1]) {\n                        mirror([side*2-1, 0, 0]) {\n                            rotate([0, 0, -20 + side*40]) {\n                                translate([8, 0, 0]) {\n                                    scale([2, 0.5, 1.5]) {\n                                        sphere(8);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Five necks and heads\n            color(color_body) {\n                // Central head\n                translate([18, 0, 25]) {\n                    rotate([0, -15, 0]) {\n                        cylinder(h = 15, r1 = 5, r2 = 4);\n                        translate([0, 0, 15]) {\n                            head(0);\n                        }\n                    }\n                }\n                \n                // Four surrounding heads\n                for(angle = [0:3]) {\n                    rotate([0, 0, angle*90]) {\n                        translate([15, 0, 22]) {\n                            rotate([10, -20, 0]) {\n                                cylinder(h = 12, r1 = 4, r2 = 3);\n                                translate([0, 0, 12]) {\n                                    head(angle*90);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Scales on body\n            color(color_scales) {\n                for(i = [0:19]) {\n                    rotate([0, 0, i*18]) {\n                        translate([0, 0, 15]) {\n                            scale([1.6, 1.1, 1.1]) {\n                                sphere(1.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule head(rotation) {\n    union() {\n        // Head\n        scale([1.2, 0.8, 1]) {\n            sphere(5);\n        }\n        \n        // Snout\n        translate([5, 0, 0]) {\n            scale([1.5, 0.6, 0.6]) {\n                sphere(3);\n            }\n        }\n        \n        // Eyes\n        color(color_eyes) {\n            for(side = [0:1]) {\n                mirror([0, side*2-1, 0]) {\n                    translate([3, 2.5, 1]) {\n                        sphere(1);\n                    }\n                }\n            }\n        }\n        \n        // Teeth\n        color(color_teeth) {\n            for(i = [0:3]) {\n                translate([5.5, -1.5 + i, -1]) {\n                    rotate([0, 0, 90]) {\n                        cylinder(h = 2, r1 = 0.5, r2 = 0.2);\n                    }\n                }\n            }\n        }\n        \n        // Horns\n        for(side = [0:1]) {\n            mirror([0, side*2-1, 0]) {\n                translate([0, 3, 2]) {\n                    rotate([0, -30, 0]) {\n                        cylinder(h = 4, r1 = 1, r2 = 0.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the hydra\nhydra();",
    "renders": true
  },
  {
    "mythical_creature": "naga",
    "openscad_code": "// Naga - Mythical Serpent Creature\n// Realistic style with moderate complexity\n\n// Color definitions\ncolor_body = \"forestgreen\";\ncolor_scales = \"darkgreen\";\ncolor_eyes = \"red\";\ncolor_hood = \"limegreen\";\ncolor_fangs = \"ivory\";\n\n// Parameters\n$fn = 32;\nbody_segments = 8;\nscale_size = 1.5;\nscale_spacing = 3;\n\n// Main module\nmodule naga() {\n    union() {\n        // Serpent body\n        color(color_body) {\n            // Head\n            translate([0, 0, 40]) {\n                rotate([0, 0, 90]) {\n                    // Main head shape\n                    scale([1.2, 1, 1]) sphere(8);\n                    \n                    // Snout\n                    translate([9, 0, 0]) {\n                        scale([1.5, 0.8, 0.8]) sphere(5);\n                    }\n                    \n                    // Hood (cobra-like)\n                    color(color_hood) {\n                        translate([-5, 0, 2]) {\n                            rotate([0, 15, 0]) {\n                                scale([2, 3, 0.5]) sphere(6);\n                            }\n                        }\n                        translate([-5, 0, -2]) {\n                            rotate([0, -15, 0]) {\n                                scale([2, 3, 0.5]) sphere(6);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Eyes\n            color(color_eyes) {\n                translate([6, 3.5, 3]) sphere(1.5);\n                translate([6, -3.5, 3]) sphere(1.5);\n            }\n            \n            // Fangs\n            color(color_fangs) {\n                translate([10, 2, -1]) {\n                    rotate([0, -20, 0]) cylinder(4, 1, 0.2);\n                }\n                translate([10, -2, -1]) {\n                    rotate([0, -20, 0]) cylinder(4, 1, 0.2);\n                }\n            }\n        }\n        \n        // Serpent body coils\n        color(color_body) {\n            for(i = [0:body_segments-1]) {\n                translate([0, 0, 35 - i * 5]) {\n                    rotate([0, 0, i * 20]) {\n                        scale([1 - i * 0.05, 1 - i * 0.05, 1 - i * 0.05]) {\n                            sphere(7 - i * 0.5);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Body segments with scales\n        for(i = [0:body_segments*2-1]) {\n            translate([0, 0, 30 - i * 2.5]) {\n                rotate([0, 0, i * 15]) {\n                    scale([0.9 - i * 0.03, 0.9 - i * 0.03, 0.9 - i * 0.03]) {\n                        // Main body segment\n                        color(color_body) {\n                            sphere(6 - i * 0.3);\n                        }\n                        \n                        // Scales pattern\n                        color(color_scales) {\n                            for(j = [0:5]) {\n                                rotate([0, 0, j * 60]) {\n                                    translate([3 + sin(i * 30) * 1, 0, 0]) {\n                                        scale([scale_size, scale_size * 0.7, scale_spacing * 0.3]) {\n                                            sphere(1);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Tail\n        color(color_body) {\n            translate([0, 0, -10]) {\n                for(i = [0:10]) {\n                    translate([sin(i * 20) * 5, cos(i * 20) * 5, -i * 2]) {\n                        scale([1 - i * 0.08, 1 - i * 0.08, 1 - i * 0.08]) {\n                            sphere(4 - i * 0.3);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Decorative crest\n        color(color_hood) {\n            translate([0, 0, 42]) {\n                rotate([0, 90, 0]) {\n                    for(i = [0:4]) {\n                        translate([0, 0, i * 2 - 4]) {\n                            rotate([i * 10, 0, 0]) {\n                                scale([0.5, 0.2, 1]) cylinder(3, 1, 0.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the naga\nnaga();",
    "renders": true
  },
  {
    "mythical_creature": "drake",
    "openscad_code": "// Realistic Drake (Medium Complexity)\n// 3D printable mythical creature with wings, horns, scales and tail\n// Approx 80mm long, 50mm tall\n\n// Main color scheme\ncolor(\"darkolivegreen\") {\n\n// Body\ndifference() {\n    union() {\n        // Main torso\n        scale([1.2,0.8,1]) sphere(d=30, $fn=32);\n        \n        // Neck\n        translate([0,12,5]) rotate([0,-30,0]) \n            scale([0.7,0.7,1.3]) cylinder(d1=12, d2=8, h=20, $fn=16);\n            \n        // Head\n        translate([0,25,15]) rotate([0,-30,0])\n            scale([1.2,0.9,1.1]) sphere(d=15, $fn=24);\n    }\n    \n    // Eye sockets\n    translate([5,27,17]) rotate([0,-30,0]) sphere(d=4, $fn=12);\n    translate([-5,27,17]) rotate([0,-30,0]) sphere(d=4, $fn=12);\n    \n    // Nostrils\n    translate([2,32,14]) rotate([0,-30,0]) cylinder(d=2, h=5, $fn=8);\n    translate([-2,32,14]) rotate([0,-30,0]) cylinder(d=2, h=5, $fn=8);\n}\n\n// Eyes\ncolor(\"firebrick\") {\n    translate([5,27,17]) rotate([0,-30,0]) sphere(d=3, $fn=8);\n    translate([-5,27,17]) rotate([0,-30,0]) sphere(d=3, $fn=8);\n}\n\n// Horns\nmodule horn() {\n    color(\"dimgray\") {\n        rotate([0,-20,0]) cylinder(d1=6, d2=2, h=12, $fn=8);\n        translate([0,0,10]) rotate([0,-20,0]) sphere(d=3, $fn=8);\n    }\n}\n\ntranslate([7,20,22]) rotate([0,0,30]) horn();\ntranslate([-7,20,22]) rotate([0,0,-30]) mirror([1,0,0]) horn();\n\n// Scales pattern on back\ncolor(\"forestgreen\") {\n    for(i=[0:5]) {\n        translate([0, -15+i*5, 10+sin(i*30)*2]) \n            scale([0.8,0.4,0.3]) sphere(d=6, $fn=16);\n    }\n}\n\n// Wings\nmodule wing() {\n    color(\"darkslategray\") {\n        translate([0,0,-2]) \n            rotate([0,0,0]) \n            scale([1,1.5,0.1]) \n            sphere(d=30, $fn=24);\n        \n        // Wing bones\n        for(i=[0:30:150]) {\n            rotate([0,0,i]) \n            translate([10,0,0]) \n            scale([0.1,1.2,0.1]) \n            cylinder(d=2, h=25, $fn=6);\n        }\n    }\n}\n\ntranslate([15,-5,8]) rotate([0,0,30]) wing();\ntranslate([-15,-5,8]) rotate([0,0,-30]) mirror([1,0,0]) wing();\n\n// Legs\nmodule leg() {\n    color(\"darkolivegreen\") {\n        // Upper leg\n        rotate([0,0,0]) cylinder(d=6, h=15, $fn=12);\n        // Lower leg\n        translate([0,0,-15]) rotate([0,15,0]) \n            cylinder(d=5, h=12, $fn=12);\n        // Foot\n        translate([0,-5,-25]) rotate([0,15,0]) \n            scale([1.5,2,0.5]) cube([5,8,3], center=true);\n    }\n}\n\ntranslate([8,-10,-10]) leg();\ntranslate([-8,-10,-10]) mirror([1,0,0]) leg();\n\n// Tail\ncolor(\"darkolivegreen\") {\n    translate([0,-20,-5]) rotate([0,20,0]) \n        scale([1,1,0.8]) cylinder(d1=12, d2=4, h=25, $fn=16);\n    \n    // Tail spikes\n    color(\"dimgray\") {\n        for(i=[0:5:20]) {\n            translate([0,-20-i, -5+sin(i*10)*3]) \n                rotate([0,0,i*5]) \n                cylinder(d1=3, d2=1, h=5, $fn=6);\n        }\n    }\n}\n\n// Magical aura (base)\ncolor(\"royalblue\", 0.3) {\n    translate([0,0,-12]) cylinder(d=40, h=2, $fn=32);\n}\n}",
    "renders": true
  },
  {
    "mythical_creature": "wyrm",
    "openscad_code": "// Wyrm - Serpentine Dragon\n// Realistic style, medium complexity, 3D printable\n\n$fn = 32;\n\n// Main colors\nbody_color = \"darkolivegreen\";\naccent_color = \"goldenrod\";\neye_color = \"red\";\n\nmodule scaled_sphere(r, s, v) {\n    scale([s, s, v]) sphere(r);\n}\n\n// Scale pattern module\nmodule scale_pattern() {\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60]) \n            translate([2, 0, -0.5])\n                rotate([90, 0, 0])\n                    scaled_sphere(1.2, 1.5, 0.3);\n    }\n}\n\n// Head module\nmodule wyrm_head() {\n    color(body_color) {\n        // Main head shape\n        translate([0, 0, 3])\n            scaled_sphere(8, 1.2, 0.8);\n        \n        // Snout\n        translate([10, 0, 2])\n            rotate([0, -10, 0])\n                scaled_sphere(5, 1.5, 0.7);\n        \n        // Horns\n        color(accent_color) {\n            translate([-2, 4, 8])\n                rotate([0, 20, 10])\n                    cylinder(h = 6, r1 = 2, r2 = 0.5);\n            translate([-2, -4, 8])\n                rotate([0, -20, -10])\n                    cylinder(h = 6, r1 = 2, r2 = 0.5);\n        }\n        \n        // Eyes\n        color(eye_color) {\n            translate([6, 3.5, 5])\n                sphere(1.5);\n            translate([6, -3.5, 5])\n                sphere(1.5);\n        }\n        \n        // Nostrils\n        difference() {\n            translate([10, 2, 2])\n                sphere(1);\n            translate([11, 2, 2])\n                sphere(1.2);\n        }\n        difference() {\n            translate([10, -2, 2])\n                sphere(1);\n            translate([11, -2, 2])\n                sphere(1.2);\n        }\n    }\n}\n\n// Body segment module\nmodule body_segment(pos, angle, scale_factor) {\n    translate(pos)\n        rotate([0, 0, angle])\n            scale([scale_factor, scale_factor, scale_factor]) {\n                color(body_color) {\n                    scaled_sphere(10, 1, 0.4);\n                }\n                // Add scales to each segment\n                scale_pattern();\n            }\n}\n\n// Create wyrm body\nmodule wyrm_body() {\n    // Head first\n    wyrm_head();\n    \n    // Body segments\n    segments = 8;\n    for(i = [1:segments]) {\n        angle = i * 25;\n        x = -i * 12 * cos(angle);\n        y = -i * 12 * sin(angle);\n        z = 3 - i * 0.5;\n        scale_factor = 1 - i * 0.08;\n        body_segment([x, y, z], angle, scale_factor);\n    }\n    \n    // Tail\n    color(body_color)\n        translate([-segments * 12 * cos(segments * 25) - 5, \n                  -segments * 12 * sin(segments * 25), \n                  3 - segments * 0.5 - 3])\n            rotate([0, 0, segments * 25])\n                cylinder(h = 15, r1 = 2, r2 = 0.5);\n}\n\n// Wings (folded against body for 3D printing)\nmodule wings_folded() {\n    color(accent_color) {\n        // Left wing\n        translate([0, 8, 6])\n            rotate([0, 0, 45])\n                linear_extrude(height = 0.5)\n                    polygon(points = [[0, 0], [10, 5], [12, 0], [10, -5]]);\n        \n        // Right wing\n        translate([0, -8, 6])\n            rotate([0, 0, -45])\n                linear_extrude(height = 0.5)\n                    polygon(points = [[0, 0], [10, 5], [12, 0], [10, -5]]);\n    }\n}\n\n// Main assembly\nrotate([0, -10, 0])\n    wyrm_body();\n    wings_folded();",
    "renders": true
  },
  {
    "mythical_creature": "serpent",
    "openscad_code": "// Mythical Serpent - 3D Printable Model\n// Medium complexity realistic serpent with wings and magical features\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Scale factor for 3D printing (target ~80mm length)\nscale_factor = 0.8;\n\n// Colors\nserpent_body = \"darkgreen\";\nserpent_wing = \"emerald\";\nserpent_eye = \"red\";\nmagical_glow = \"gold\";\n\nmodule serpent_head() {\n    color(serpent_body) {\n        // Main head shape\n        translate([0, 0, 5])\n            scale([1.2, 0.8, 0.9])\n            sphere(10);\n        \n        // Snout\n        translate([12, 0, 3])\n            scale([1.5, 0.6, 0.6])\n            sphere(6);\n        \n        // Horns - curved backwards\n        for(side = [-1, 1]) {\n            translate([5, side * 8, 12])\n                rotate([0, -20, side * 15])\n                scale([0.3, 0.3, 1.5])\n                cylinder(15, 2, 0.5);\n        }\n        \n        // Eyes\n        color(serpent_eye) {\n            translate([8, -4, 8])\n                sphere(2);\n            translate([8, 4, 8])\n                sphere(2);\n        }\n    }\n}\n\nmodule serpent_body_segment(pos, rot, size) {\n    translate(pos)\n        rotate(rot)\n        scale([size, 1.2, 0.8])\n        sphere(8);\n}\n\nmodule serpent_wing() {\n    color(serpent_wing) {\n        // Wing membrane\n        translate([0, 0, 0])\n            rotate([0, 0, 45])\n            linear_extrude(height = 1)\n                polygon(points=[\n                    [0, 0],\n                    [25, 5],\n                    [35, 20],\n                    [30, 35],\n                    [15, 40],\n                    [5, 25]\n                ]);\n        \n        // Wing bones\n        for(i = [0:4]) {\n            translate([i * 7, i * 5, 0.5])\n                rotate([0, 0, -5 * i])\n                cylinder(2, 1, 1);\n        }\n    }\n}\n\nmodule magical_orbs() {\n    color(magical_glow) {\n        // Floating orbs along spine\n        for(i = [1:3:15]) {\n            translate([i * 8, 0, 12])\n                sphere(3);\n        }\n    }\n}\n\nmodule serpent_creature() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Head\n        serpent_head();\n        \n        // Body segments\n        for(i = [1:15]) {\n            angle = 15 * sin(i * 15);\n            serpent_body_segment(\n                [20 + i * 8, 0, 5 - i * 0.3],\n                [0, 0, angle],\n                1 - i * 0.05\n            );\n        }\n        \n        // Tail\n        for(i = [16:25]) {\n            angle = 25 * sin(i * 25);\n            serpent_body_segment(\n                [20 + i * 7, 0, 5 - i * 0.3],\n                [0, 0, angle],\n                0.3 - (i - 16) * 0.03\n            );\n        }\n        \n        // Wings\n        translate([15, 0, 15])\n            rotate([0, 0, 10])\n            serpent_wing();\n        \n        translate([15, 0, 15])\n            mirror([0, 1, 0])\n            rotate([0, 0, 10])\n            serpent_wing();\n        \n        // Magical orbs\n        magical_orbs();\n        \n        // Scales pattern\n        for(i = [1:2:25]) {\n            for(j = [0:30:360]) {\n                translate([20 + i * 8, cos(j) * 6, sin(j) * 6])\n                    scale([0.3, 1, 1])\n                    sphere(2);\n            }\n        }\n    }\n}\n\n// Main assembly\nrotate([0, 180, 0])\n    serpent_creature();",
    "renders": true
  },
  {
    "mythical_creature": "chimera",
    "openscad_code": "// Chimera - Mythical Greek creature with lion, goat, and serpent features\n// Designed for 3D printing - 80mm length\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main color scheme\nlion_color = \"#D2691E\";\ngoat_color = \"#8B4513\";\nserpent_color = \"#228B22\";\nfire_color = \"#FF4500\";\n\n// Lion body module\nmodule lion_body() {\n    color(lion_color) {\n        // Main torso\n        translate([-10, 0, 0])\n            scale([1.5, 1, 1.2])\n            sphere(12);\n        \n        // Chest\n        translate([-20, 0, -5])\n            scale([1.2, 0.8, 0.8])\n            sphere(10);\n        \n        // Hind quarters\n        translate([10, 0, 0])\n            scale([1.3, 1.1, 1])\n            sphere(11);\n    }\n}\n\n// Lion head module\nmodule lion_head() {\n    color(lion_color) {\n        // Main head sphere\n        translate([-35, 0, 15])\n            scale([1.2, 1, 1])\n            sphere(10);\n        \n        // Muzzle\n        translate([-45, 0, 12])\n            scale([1, 0.7, 0.6])\n            sphere(8);\n        \n        // Ears\n        translate([-33, 10, 22])\n            rotate([45, 0, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=5, r=5);\n        \n        translate([-33, -10, 22])\n            rotate([-45, 0, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=5, r=5);\n        \n        // Mane - multiple cylinders\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n            translate([-30, 0, 15])\n                rotate([90, 0, 0])\n                cylinder(h=8 + sin(i*3)*2, r1=3, r2=2);\n        }\n    }\n}\n\n// Goat head module (growing from back)\nmodule goat_head() {\n    color(goat_color) {\n        // Neck\n        translate([0, 0, 15])\n            rotate([0, 30, 0])\n            cylinder(h=15, r1=4, r2=3);\n        \n        // Head\n        translate([5, 0, 22])\n            scale([0.8, 0.7, 0.9])\n            sphere(8);\n        \n        // Horns\n        translate([8, 5, 28])\n            rotate([0, -30, 45])\n            cylinder(h=10, r1=2, r2=0.5);\n        \n        translate([8, -5, 28])\n            rotate([0, -30, -45])\n            cylinder(h=10, r1=2, r2=0.5);\n        \n        // Beard\n        translate([8, 0, 15])\n            scale([0.8, 0.8, 1.2])\n            sphere(3);\n    }\n}\n\n// Serpent tail module\nmodule serpent_tail() {\n    color(serpent_color) {\n        // Segmented tail\n        for(i = [0:8]) {\n            translate([20 + i*3, 0, -5 - sin(i*0.5)*2])\n                scale([0.9 - i*0.08, 0.9 - i*0.08, 0.8])\n                sphere(5 - i*0.3);\n        }\n        \n        // Snake head\n        translate([45, 0, -10])\n            scale([0.6, 0.6, 1.2])\n            sphere(4);\n        \n        // Forked tongue\n        translate([48, 0, -10])\n            rotate([0, 90, 0])\n            scale([0.1, 0.5, 0.1])\n            cylinder(h=3, r1=1, r2=0);\n    }\n}\n\n// Legs module\nmodule legs() {\n    // Lion legs\n    color(lion_color) {\n        // Front legs\n        translate([-25, 10, -5])\n            rotate([0, 10, 0])\n            cylinder(h=20, r1=4, r2=3);\n        \n        translate([-25, -10, -5])\n            rotate([0, 10, 0])\n            cylinder(h=20, r1=4, r2=3);\n        \n        // Hind legs\n        translate([15, 8, -5])\n            rotate([0, -10, 0])\n            cylinder(h=22, r1=5, r2=4);\n        \n        translate([15, -8, -5])\n            rotate([0, -10, 0])\n            cylinder(h=22, r1=5, r2=4);\n    }\n}\n\n// Wings module\nmodule wings() {\n    color(\"#DEB887\") {\n        // Left wing\n        translate([-5, 15, 15])\n            rotate([0, 0, 30])\n            scale([1, 0.1, 0.8])\n            cylinder(h=25, r1=5, r2=0);\n        \n        // Wing membrane\n        translate([5, 15, 20])\n            rotate([0, -45, 30])\n            scale([0.1, 1, 0.8])\n            cylinder(h=20, r1=8, r2=0);\n        \n        // Right wing\n        translate([-5, -15, 15])\n            rotate([0, 0, -30])\n            scale([1, 0.1, 0.8])\n            cylinder(h=25, r1=5, r2=0);\n        \n        translate([5, -15, 20])\n            rotate([0, -45, -30])\n            scale([0.1, 1, 0.8])\n            cylinder(h=20, r1=8, r2=0);\n    }\n}\n\n// Fire breath effect\nmodule fire_breath() {\n    color(fire_color, 0.7) {\n        union() {\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60])\n                translate([-50 - i*2, 0, 10 + sin(i)*3])\n                    scale([2 - i*0.2, 2 - i*0.2, 1])\n                    sphere(3 - i*0.3);\n            }\n        }\n    }\n}\n\n// Scale texture for serpent\nmodule scales() {\n    color(serpent_color) {\n        for(i = [0:20]) {\n            for(j = [0:3]) {\n                translate([25 + i*1.5, sin(i)*3, -8 + j*2])\n                    rotate([0, 0, i*30])\n                    scale([0.5, 0.5, 0.2])\n                    sphere(1);\n            }\n        }\n    }\n}\n\n// Assemble the chimera\nunion() {\n    lion_body();\n    lion_head();\n    goat_head();\n    serpent_tail();\n    legs();\n    wings();\n    scales();\n    fire_breath();\n}",
    "renders": true
  },
  {
    "mythical_creature": "phoenix",
    "openscad_code": "// Phoenix 3D Model - Realistic Style, Medium Complexity\n// Wings, tail feathers, head crest, and flame details\n\nmodule phoenix_body() {\n    color(\"firebrick\") {\n        // Main torso\n        translate([0, 0, 0])\n            scale([1.2, 0.8, 1.5])\n                sphere(d=25, $fn=20);\n        \n        // Chest protrusion\n        translate([0, -5, 10])\n            rotate([30, 0, 0])\n                scale([0.7, 0.5, 0.8])\n                    sphere(d=15, $fn=16);\n    }\n}\n\nmodule phoenix_head() {\n    color(\"darkorange\") {\n        // Head\n        translate([0, 0, 25])\n            scale([0.8, 0.7, 1])\n                sphere(d=18, $fn=16);\n        \n        // Beak\n        translate([0, -8, 25])\n            rotate([30, 0, 0])\n                scale([0.3, 0.3, 0.8])\n                    cylinder(h=12, d1=8, d2=4, $fn=8);\n        \n        // Eye\n        translate([5, -6, 28])\n            color(\"yellow\")\n                sphere(d=3, $fn=8);\n    }\n}\n\nmodule phoenix_crest() {\n    color(\"gold\") {\n        // Central crest\n        translate([0, -2, 35])\n            rotate([45, 0, 0])\n                scale([0.8, 0.1, 2])\n                    cylinder(h=15, d=8, $fn=6);\n        \n        // Side crest feathers\n        for(i = [-1, 1]) {\n            translate([i*6, -2, 33])\n                rotate([30, 0, i*15])\n                    scale([0.5, 0.1, 1.5])\n                        cylinder(h=12, d=6, $fn=6);\n        }\n    }\n}\n\nmodule phoenix_wing() {\n    color(\"orangered\") {\n        // Main wing structure\n        translate([0, 0, 0]) {\n            // Upper wing\n            translate([15, 0, 15])\n                rotate([0, 0, 30])\n                    scale([2.5, 0.2, 0.8])\n                        cylinder(h=30, d=8, $fn=8);\n            \n            // Lower wing\n            translate([15, 0, 5])\n                rotate([0, 0, 15])\n                    scale([2, 0.2, 0.6])\n                        cylinder(h=25, d=6, $fn=8);\n            \n            // Wing feathers\n            for(i = [0:3]) {\n                translate([25 + i*5, 0, 12 - i*3])\n                    rotate([0, 0, 45 - i*10])\n                        scale([0.8 - i*0.1, 0.1, 0.3 - i*0.05])\n                            cylinder(h=12 - i*2, d=4, $fn=6);\n            }\n        }\n    }\n}\n\nmodule phoenix_tail() {\n    color(\"crimson\") {\n        // Central tail\n        translate([0, 0, -15])\n            rotate([0, 0, 0])\n                scale([1, 0.2, 2.5])\n                    cylinder(h=40, d=6, $fn=8);\n        \n        // Tail feathers\n        for(i = [-2:2]) {\n            if(i != 0) {\n                translate([i*8, 0, -20])\n                    rotate([0, 0, i*20])\n                        scale([0.5, 0.1, 3])\n                            cylinder(h=35, d=4, $fn=6);\n            }\n        }\n    }\n}\n\nmodule phoenix_legs() {\n    color(\"darkred\") {\n        // Left leg\n        translate([-8, 0, -10])\n            rotate([0, 0, -15])\n                scale([0.3, 0.3, 1.5])\n                    cylinder(h=15, d=6, $fn=8);\n        \n        // Right leg\n        translate([8, 0, -10])\n            rotate([0, 0, 15])\n                scale([0.3, 0.3, 1.5])\n                    cylinder(h=15, d=6, $fn=8);\n        \n        // Feet\n        translate([-8, 0, -20])\n            rotate([90, 0, 0])\n                scale([1.5, 0.5, 0.3])\n                    cylinder(h=8, d=4, $fn=6);\n        \n        translate([8, 0, -20])\n            rotate([90, 0, 0])\n                scale([1.5, 0.5, 0.3])\n                    cylinder(h=8, d=4, $fn=6);\n    }\n}\n\nmodule phoenix_flames() {\n    color(\"yellow\") {\n        // Flames around body\n        for(angle = [0:30:330]) {\n            translate([cos(angle)*12, sin(angle)*12, 0])\n                rotate([0, 0, angle])\n                    scale([0.3, 0.3, 1.5])\n                        cylinder(h=10, d1=4, d2=1, $fn=6);\n        }\n        \n        // Tail flame\n        translate([0, 0, -35])\n            color(\"orange\")\n                scale([0.5, 0.5, 2])\n                    sphere(d=15, $fn=8);\n    }\n}\n\n// Assemble the phoenix\nunion() {\n    phoenix_body();\n    phoenix_head();\n    phoenix_crest();\n    \n    // Left wing\n    translate([0, 0, 0])\n        mirror([1, 0, 0])\n            phoenix_wing();\n    \n    // Right wing\n    translate([0, 0, 0])\n        phoenix_wing();\n    \n    phoenix_tail();\n    phoenix_legs();\n    phoenix_flames();\n}",
    "renders": true
  },
  {
    "mythical_creature": "lindwurm",
    "openscad_code": "// Lindwurm - a wingless, serpentine dragon with two forelegs\n// Overall length ~80 mm, printable without supports\n\nscale(0.8)  // bring to 80 mm\n\n// Main body union\nunion() {\n\n    // Head\n    color(\"darkolivegreen\")\n    translate([40, 0, 0])\n    rotate([0, -20, 0])\n    scale([1.5, 1, 1])\n    sphere(5);\n\n    // Snout\n    color(\"darkolivegreen\")\n    translate([46.5, 0, 0])\n    rotate([0, -20, 0])\n    scale([2.5, 1, 1])\n    cylinder(h = 5, r1 = 2.5, r2 = 1);\n\n    // Neck\n    color(\"darkolivegreen\")\n    translate([35, 0, -2])\n    rotate([0, -20, 0])\n    scale([1, 1, 1.2])\n    cylinder(h = 10, r = 4);\n\n    // Body segments\n    module body_segment(len, r, angle) {\n        color(\"darkgreen\")\n        rotate([0, angle, 0])\n        cylinder(h = len, r = r, $fn = 16);\n    }\n\n    // Tail segments (tapering)\n    for (i = [0:9]) {\n        translate([30 - i*7, 0, -2 - i*0.5])\n        body_segment(7, 4.5 - i*0.4, 5 + i*4);\n    }\n\n    // Forelegs\n    module leg() {\n        union() {\n            color(\"darkolivegreen\")\n            cylinder(h = 12, r = 2.5, $fn = 8);\n            translate([0, 0, 12])\n            rotate([0, 30, 0])\n            color(\"darkolivegreen\")\n            cylinder(h = 10, r = 2, $fn = 8);\n            translate([0, 0, 21])\n            color(\"saddlebrown\")\n            scale([1.5, 2, 2])\n            sphere(2);\n        }\n    }\n\n    // Left foreleg\n    translate([25, 6, -5])\n    rotate([0, 0, -25])\n    leg();\n\n    // Right foreleg\n    translate([25, -6, -5])\n    rotate([0, 0, 25])\n    mirror([0, 1, 0])\n    leg();\n\n    // Horns\n    module horn() {\n        color(\"dimgray\")\n        rotate([0, 30, 0])\n        cylinder(h = 5, r1 = 1.2, r2 = 0.5, $fn = 6);\n    }\n\n    // Left horn\n    translate([43, 2.5, 3])\n    horn();\n\n    // Right horn\n    translate([43, -2.5, 3])\n    rotate([0, 0, 180])\n    horn();\n\n    // Eyes\n    color(\"red\")\n    translate([47, 1.5, 1.5])\n    sphere(0.8);\n\n    color(\"red\")\n    translate([47, -1.5, 1.5])\n    sphere(0.8);\n\n    // Scales along back\n    module scale() {\n        color(\"darkgreen\")\n        scale([1, 1.5, 0.5])\n        sphere(1.5, $fn = 6);\n    }\n\n    for (i = [0:8]) {\n        translate([35 - i*7, 0, 2.5 + sin(i*30)*1])\n        rotate([0, 0, i*20])\n        scale();\n    }\n\n    // Forked tongue\n    color(\"crimson\")\n    translate([50.5, 0, -0.5])\n    rotate([0, -20, 0])\n    scale([0.2, 0.5, 0.2])\n    cube([5, 1, 1]);\n\n    color(\"crimson\")\n    translate([50.5, 0.3, -0.5])\n    rotate([0, -20, 0])\n    scale([0.2, 0.5, 0.2])\n    cube([5, 1, 1]);\n}",
    "renders": true
  },
  {
    "mythical_creature": "amphisbaena",
    "openscad_code": "// Amphisbaena - A two-headed serpent from mythology\n// Size: ~70mm long, designed for 3D printing\n\n// Main parameters\nbody_radius = 6;\nbody_length = 60;\nhead_radius = 8;\nsegment_count = 8;\nscale_factor = 0.85;\n\n// Color definitions\n$fn = 32;\n\n// Helper module for body segments\nmodule body_segment(pos, size, rot) {\n    translate(pos)\n    rotate([0, rot, 0])\n    scale([size, size, size])\n    color(\"darkgreen\")\n    difference() {\n        sphere(r = body_radius);\n        // Create scale texture\n        for(i = [0:5]) {\n            rotate([0, i * 60, 0])\n            translate([0, -body_radius - 0.5, 0])\n            cube([body_radius * 2, 1, body_radius * 2], center = true);\n        }\n    }\n}\n\n// Head module with two faces\nmodule head(pos, direction) {\n    translate(pos)\n    rotate([0, direction, 0])\n    union() {\n        // Main head sphere\n        color(\"forestgreen\")\n        sphere(r = head_radius);\n        \n        // Snout\n        translate([head_radius * 0.8, 0, 0])\n        color(\"forestgreen\")\n        scale([1.5, 0.7, 0.7])\n        sphere(r = head_radius * 0.7);\n        \n        // Eyes\n        color(\"red\")\n        translate([head_radius * 1.2, head_radius * 0.4, head_radius * 0.4])\n        sphere(r = 1.5);\n        translate([head_radius * 1.2, -head_radius * 0.4, head_radius * 0.4])\n        sphere(r = 1.5);\n        \n        // Nostrils\n        color(\"black\")\n        translate([head_radius * 1.4, head_radius * 0.3, 0])\n        sphere(r = 0.8);\n        translate([head_radius * 1.4, -head_radius * 0.3, 0])\n        sphere(r = 0.8);\n        \n        // Horns\n        color(\"darkgray\")\n        translate([0, 0, head_radius * 0.8])\n        rotate([0, 30, 0])\n        cylinder(h = 5, r1 = 1.5, r2 = 0.5);\n        translate([0, 0, -head_radius * 0.8])\n        rotate([0, -30, 0])\n        cylinder(h = 5, r1 = 1.5, r2 = 0.5);\n    }\n}\n\n// Create the serpent body\nunion() {\n    // First head\n    head([body_length/2, 0, 0], 0);\n    \n    // Body segments\n    for(i = [1:segment_count]) {\n        segment_pos = body_length/2 - (i * (body_length/segment_count));\n        segment_size = pow(scale_factor, i);\n        body_segment([segment_pos, 0, 0], segment_size, i * 5);\n    }\n    \n    // Second head (reversed)\n    head([-body_length/2, 0, 0], 180);\n    \n    // Connecting body cylinder\n    color(\"darkgreen\")\n    difference() {\n        cylinder(h = body_length, r = body_radius, center = true);\n        // Hollow center for material saving\n        cylinder(h = body_length + 1, r = body_radius - 3, center = true);\n    }\n    \n    // Underbelly scales\n    for(i = [0:15]) {\n        angle = i * 22.5;\n        color(\"yellowgreen\")\n        translate([body_length/2 - (i * 4), 0, -body_radius + 0.5])\n        rotate([0, angle, 0])\n        scale([1, 0.5, 0.3])\n        sphere(r = 2);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "quetzalcoatl",
    "openscad_code": "// Quetzalcoatl - Feathered Serpent Deity\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main colors\ncolor_feathers = [0.1, 0.6, 0.2];\ncolor_scales = [0.2, 0.4, 0.3];\ncolor_eyes = [0.9, 0.1, 0.1];\ncolor_beak = [0.8, 0.7, 0.3];\n\n// Main module\nmodule quetzalcoatl() {\n    union() {\n        // Serpent body\n        color(color_scales)\n        translate([0, 0, 5])\n        rotate([90, 0, 0])\n        scale([1, 1, 8])\n        cylinder(h = 40, r1 = 8, r2 = 3);\n        \n        // Head\n        color(color_scales)\n        translate([0, 0, 45])\n        sphere(10);\n        \n        // Beak/snout\n        color(color_beak)\n        translate([0, 0, 53])\n        rotate([0, 0, 0])\n        scale([0.7, 0.4, 3])\n        cylinder(h = 8, r = 5);\n        \n        // Eyes\n        color(color_eyes)\n        translate([5, 5, 48])\n        sphere(3);\n        translate([-5, 5, 48])\n        sphere(3);\n        \n        // Feathered crest\n        color(color_feathers)\n        for(i = [0:15:165]) {\n            rotate([0, i, 0])\n            translate([0, 0, 50])\n            rotate([90, 0, 0])\n            scale([0.2, 2, 0.1])\n            cylinder(h = 12, r = 1);\n        }\n        \n        // Wings\n        color(color_feathers)\n        translate([15, 0, 25])\n        rotate([0, 0, 30])\n        scale([1, 3, 0.3])\n        sphere(8);\n        \n        translate([-15, 0, 25])\n        rotate([0, 0, -30])\n        scale([1, 3, 0.3])\n        sphere(8);\n        \n        // Wing feathers\n        color(color_feathers)\n        for(i = [0:20:140]) {\n            rotate([0, 0, 30])\n            translate([15 + cos(i) * 8, sin(i) * 8, 25])\n            rotate([0, 0, -i])\n            scale([0.5, 1.5, 0.1])\n            cylinder(h = 6, r = 1);\n        }\n        \n        for(i = [0:20:140]) {\n            rotate([0, 0, -30])\n            translate([-15 + cos(i) * -8, sin(i) * 8, 25])\n            rotate([0, 0, i])\n            scale([0.5, 1.5, 0.1])\n            cylinder(h = 6, r = 1);\n        }\n        \n        // Tail feathers\n        color(color_feathers)\n        for(i = [0:20:160]) {\n            rotate([0, i, 0])\n            translate([0, 0, 0])\n            rotate([90, 0, 0])\n            scale([0.3, 3, 0.1])\n            cylinder(h = 15, r = 1.5);\n        }\n        \n        // Body scales pattern\n        color(color_scales)\n        for(i = [5:5:35]) {\n            rotate([90, 0, 0])\n            translate([0, 0, i])\n            difference() {\n                cylinder(h = 2, r = 8 - i/10);\n                cylinder(h = 2.1, r = 7 - i/10);\n            }\n        }\n        \n        // Magical aura around head\n        color([0.2, 0.8, 0.3, 0.3])\n        translate([0, 0, 45])\n        sphere(15);\n    }\n}\n\n// Scale to printable size\nscale([0.8, 0.8, 0.8])\nquetzalcoatl();",
    "renders": true
  },
  {
    "mythical_creature": "firedrake",
    "openscad_code": "// Firedrake - Medium complexity realistic mythical creature\n// Scale: 80mm wingspan, 50mm length\n\n// Color definitions\n$fn = 32;\n\nmodule firedrake() {\n    color([0.6, 0.1, 0.05]) {\n        // Main body\n        union() {\n            // Torso\n            translate([0, 0, 10]) {\n                scale([1.2, 0.6, 0.8])\n                    sphere(r=8);\n            }\n            \n            // Neck\n            translate([8, 0, 18]) {\n                rotate([-15, 0, 0])\n                    cylinder(h=12, r1=5, r2=4);\n            }\n            \n            // Head\n            translate([18, 0, 26]) {\n                scale([1.3, 0.9, 1])\n                    sphere(r=6);\n            }\n            \n            // Snout\n            translate([24, 0, 26]) {\n                rotate([-10, 0, 0])\n                    cylinder(h=8, r1=4, r2=2);\n            }\n            \n            // Tail\n            difference() {\n                translate([-12, 0, 8]) {\n                    rotate([0, 0, 180])\n                        cylinder(h=25, r1=6, r2=2);\n                }\n                // Tail flame cavity\n                translate([-12, 0, 8]) {\n                    rotate([0, 0, 180])\n                        cylinder(h=20, r1=4, r2=0.5);\n                }\n            }\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([6, side * 5, 8]) {\n                rotate([0, side * 15, 0])\n                    cylinder(h=12, r=2);\n                translate([0, 0, -6])\n                    sphere(r=2.5);\n            }\n            \n            // Back legs\n            translate([-6, side * 5, 8]) {\n                rotate([0, side * 15, 0])\n                    cylinder(h=12, r=2.5);\n                translate([0, 0, -6])\n                    sphere(r=3);\n            }\n        }\n        \n        // Wings\n        color([0.3, 0.05, 0.02]) {\n            for(side = [-1, 1]) {\n                translate([0, side * 8, 18]) {\n                    rotate([0, 0, side * 30])\n                        scale([1.5, 0.8, 0.1])\n                            sphere(r=10);\n                }\n                \n                // Wing membrane support\n                for(i = [0:2]) {\n                    translate([0, side * (8 + i * 4), 18 - i * 3]) {\n                        rotate([0, 0, side * (30 - i * 10)])\n                            cylinder(h=12 - i * 3, r=0.5);\n                    }\n                }\n            }\n        }\n        \n        // Horns\n        color([0.3, 0.2, 0.1]) {\n            for(side = [-1, 1]) {\n                translate([20, side * 3, 30]) {\n                    rotate([0, side * 20, 0])\n                        cylinder(h=6, r1=1.5, r2=0.5);\n                }\n            }\n        }\n        \n        // Eyes\n        color([1, 0.8, 0]) {\n            for(side = [-1, 1]) {\n                translate([22, side * 3, 28]) {\n                    sphere(r=1.5);\n                }\n            }\n        }\n        \n        // Scales pattern\n        color([0.5, 0.08, 0.03]) {\n            for(i = [0:8]) {\n                for(j = [0:4]) {\n                    translate([15 - i * 4, 0, 12 + j * 2]) {\n                        rotate([0, 90, 0])\n                            scale([0.5, 0.3, 0.1])\n                                cylinder(h=2, r=1);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Flame tail effect\n    color([1, 0.3, 0]) {\n        translate([-12, 0, 8]) {\n            rotate([0, 0, 180])\n                scale([0.8, 0.8, 1])\n                    cylinder(h=15, r1=2, r2=0);\n        }\n    }\n}\n\n// Ground support base\ncolor([0.2, 0.2, 0.2]) {\n    translate([0, 0, -6]) {\n        difference() {\n            cylinder(h=2, r=15);\n            cylinder(h=3, r=13);\n        }\n    }\n}\n\nfiredrake();",
    "renders": true
  },
  {
    "mythical_creature": "icewyrm",
    "openscad_code": "// Icewyrm - A mythical ice dragon serpent\n// Realistic style, medium complexity, 3D printable\n\n$fn = 32;\n\nmodule main_body() {\n    // Central serpentine body\n    union() {\n        // Head segment\n        translate([0, 0, 5])\n        scale([1.2, 0.8, 1])\n        sphere(8);\n        \n        // Neck segments\n        for(i = [1:5]) {\n            translate([0, 0, 5 - i*3])\n            rotate([0, i*5, 0])\n            scale([1.1 - i*0.1, 0.9 - i*0.05, 0.9 - i*0.05])\n            sphere(7 - i*0.5);\n        }\n        \n        // Main body segments\n        for(i = [1:8]) {\n            translate([0, 0, -10 - i*4])\n            rotate([0, i*8, sin(i*30)*5])\n            scale([1 - i*0.08, 0.8 - i*0.06, 0.8 - i*0.06])\n            sphere(6 - i*0.4);\n        }\n        \n        // Tail segments\n        for(i = [1:6]) {\n            translate([0, 0, -42 - i*3])\n            rotate([0, i*12, sin(i*45)*8])\n            scale([0.5 - i*0.06, 0.4 - i*0.05, 0.4 - i*0.05])\n            sphere(4 - i*0.5);\n        }\n    }\n}\n\nmodule head_details() {\n    union() {\n        // Snout\n        translate([0, 6, 8])\n        scale([0.6, 1.5, 0.8])\n        sphere(4);\n        \n        // Eye sockets\n        difference() {\n            // Left eye\n            translate([-3, 4, 8])\n            scale([1.2, 0.8, 1])\n            sphere(2);\n            \n            // Right eye\n            translate([3, 4, 8])\n            scale([1.2, 0.8, 1])\n            sphere(2);\n        }\n        \n        // Horns\n        // Left horn\n        translate([-2, 2, 12])\n        rotate([0, -10, -15])\n        cylinder(h=8, r1=1.5, r2=0.5);\n        \n        // Right horn\n        translate([2, 2, 12])\n        rotate([0, -10, 15])\n        cylinder(h=8, r1=1.5, r2=0.5);\n        \n        // Ice spikes along head\n        for(i = [0:3]) {\n            translate([sin(i*90)*2.5, cos(i*90)*2.5, 10])\n            rotate([0, 0, i*90])\n            cylinder(h=3, r1=1, r2=0.3);\n        }\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-8, 0, -5])\n    rotate([0, 0, -30])\n    scale([1.5, 0.3, 1])\n    difference() {\n        // Main wing membrane\n        cube([15, 0.5, 20], center=true);\n        \n        // Wing holes for membrane texture\n        for(i = [0:2]) {\n            for(j = [0:3]) {\n                translate([-5 + i*5, 0, -8 + j*5])\n                sphere(1.2);\n            }\n        }\n    }\n    \n    // Right wing\n    translate([8, 0, -5])\n    rotate([0, 0, 30])\n    mirror([1, 0, 0])\n    scale([1.5, 0.3, 1])\n    difference() {\n        // Main wing membrane\n        cube([15, 0.5, 20], center=true);\n        \n        // Wing holes for membrane texture\n        for(i = [0:2]) {\n            for(j = [0:3]) {\n                translate([-5 + i*5, 0, -8 + j*5])\n                sphere(1.2);\n            }\n        }\n    }\n    \n    // Wing joints\n    translate([-8, 0, -5])\n    sphere(3);\n    translate([8, 0, -5])\n    sphere(3);\n}\n\nmodule legs() {\n    // Front left leg\n    translate([-4, 0, -8])\n    rotate([0, 30, 0])\n    union() {\n        cylinder(h=6, r=2);\n        translate([0, 0, -6])\n        rotate([0, 0, 0])\n        scale([0.8, 0.5, 2])\n        sphere(2);\n    }\n    \n    // Front right leg\n    translate([4, 0, -8])\n    rotate([0, -30, 0])\n    union() {\n        cylinder(h=6, r=2);\n        translate([0, 0, -6])\n        rotate([0, 0, 0])\n        scale([0.8, 0.5, 2])\n        sphere(2);\n    }\n    \n    // Back left leg\n    translate([-3, 0, -25])\n    rotate([0, 20, 0])\n    union() {\n        cylinder(h=5, r=1.8);\n        translate([0, 0, -5])\n        scale([0.7, 0.4, 1.8])\n        sphere(1.8);\n    }\n    \n    // Back right leg\n    translate([3, 0, -25])\n    rotate([0, -20, 0])\n    union() {\n        cylinder(h=5, r=1.8);\n        translate([0, 0, -5])\n        scale([0.7, 0.4, 1.8])\n        sphere(1.8);\n    }\n}\n\nmodule ice_crystals() {\n    // Ice crystals along spine\n    for(i = [0:10]) {\n        translate([0, 0, 5 - i*5])\n        rotate([0, 0, i*40])\n        scale([0.5, 0.5, 1.5])\n        cylinder(h=3 + sin(i*30)*1, r1=1, r2=0.2);\n    }\n    \n    // Tail crystals\n    for(i = [0:3]) {\n        translate([0, 0, -45 - i*5])\n        rotate([0, 0, i*60])\n        scale([0.3, 0.3, 1])\n        cylinder(h=2, r1=0.6, r2=0.1);\n    }\n}\n\nmodule eyes() {\n    // Left eye\n    color(\"cyan\")\n    translate([-3, 5, 8])\n    scale([1, 0.7, 0.9])\n    sphere(1.5);\n    \n    // Right eye\n    color(\"cyan\")\n    translate([3, 5, 8])\n    scale([1, 0.7, 0.9])\n    sphere(1.5);\n    \n    // Eye pupils\n    color(\"white\")\n    translate([-3.5, 5.5, 8.5])\n    sphere(0.5);\n    translate([3.5, 5.5, 8.5])\n    sphere(0.5);\n}\n\n// Assembly\nscale(0.8)\nunion() {\n    color(\"lightblue\")\n    main_body();\n    \n    color(\"azure\")\n    head_details();\n    \n    color(\"aliceblue\")\n    wings();\n    \n    color(\"steelblue\")\n    legs();\n    \n    color(\"white\")\n    ice_crystals();\n    \n    eyes();\n}",
    "renders": true
  },
  {
    "mythical_creature": "stormserpent",
    "openscad_code": "// Stormserpent - A mythical sky serpent with storm powers\n// Wings like thunderclouds, scales like lightning, tail like a tornado\n\n$fn = 30;\n\n// Main creature body\nmodule stormserpent() {\n    color(\"DarkSlateBlue\")\n    union() {\n        // Serpent head\n        translate([0, 0, 35])\n        rotate([0, 90, 0])\n        scale([1.2, 1, 1])\n        sphere(8);\n        \n        // Snout\n        translate([10, 0, 35])\n        rotate([0, 90, 0])\n        cylinder(h=10, r1=6, r2=3);\n        \n        // Neck\n        translate([-5, 0, 35])\n        rotate([0, 90, 0])\n        cylinder(h=15, r1=6, r2=4);\n        \n        // Main serpentine body\n        color(\"MidnightBlue\")\n        for(i = [0:10]) {\n            translate([-20 - i*4, 0, 35 - sin(i*15)*3])\n            rotate([0, 0, -i*8])\n            sphere(5 - i*0.3);\n        }\n        \n        // Tail coils\n        color(\"Navy\")\n        for(i = [0:15]) {\n            translate([-60 - cos(i*20)*8, sin(i*20)*8, 32 - i])\n            rotate([0, 0, -i*20])\n            sphere(3.5 - i*0.1);\n        }\n        \n        // Wings - storm cloud formations\n        color(\"DarkSlateGray\")\n        // Left wing\n        translate([0, -25, 45])\n        rotate([0, 0, -30])\n        scale([1.5, 0.8, 0.2])\n        sphere(15);\n        \n        // Wing membrane details\n        for(i = [0:5]) {\n            translate([i*2 - 5, -25 - i*2, 45])\n            rotate([0, 0, -30 - i*5])\n            scale([1, 0.6, 0.1])\n            sphere(8 - i);\n        }\n        \n        // Right wing\n        translate([0, 25, 45])\n        mirror([0, 1, 0])\n        rotate([0, 0, -30])\n        scale([1.5, 0.8, 0.2])\n        sphere(15);\n        \n        for(i = [0:5]) {\n            translate([i*2 - 5, 25 + i*2, 45])\n            mirror([0, 1, 0])\n            rotate([0, 0, -30 - i*5])\n            scale([1, 0.6, 0.1])\n            sphere(8 - i);\n        }\n        \n        // Lightning bolt horns\n        color(\"Gold\")\n        translate([8, -3, 43])\n        rotate([0, 0, -30])\n        scale([0.3, 0.3, 2])\n        cylinder(h=8, r1=2, r2=1);\n        \n        translate([8, 3, 43])\n        rotate([0, 0, 30])\n        scale([0.3, 0.3, 2])\n        cylinder(h=8, r1=2, r2=1);\n        \n        // Electric spine ridges\n        color(\"ElectricBlue\")\n        for(i = [0:12]) {\n            translate([-15 - i*4, 0, 38 + sin(i*20)*2])\n            rotate([90, 0, 0])\n            scale([0.5, 0.5, 1])\n            cylinder(h=3, r1=1.5, r2=0.5);\n        }\n        \n        // Eyes - glowing storm orbs\n        color(\"Aqua\")\n        translate([12, -2, 37])\n        sphere(1.5);\n        \n        translate([12, 2, 37])\n        sphere(1.5);\n        \n        // Tornado tail tip\n        color(\"LightSteelBlue\")\n        translate([-75, 0, 15])\n        rotate([0, 0, 0])\n        cylinder(h=15, r1=3, r2=0.5);\n        \n        // Scale texture on body\n        color(\"RoyalBlue\")\n        for(i = [0:20]) {\n            for(j = [0:8]) {\n                translate([-25 - i*2.5, cos(j*45)*3, 35 + sin(j*45)*3 - i*0.5])\n                rotate([0, 0, j*45])\n                scale([1.2, 1, 0.3])\n                sphere(1);\n            }\n        }\n        \n        // Claws\n        color(\"Silver\")\n        // Front claws\n        translate([13, -2, 30])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=0.5, r2=0.2);\n        \n        translate([13, 2, 30])\n        rotate([0, 90, 0])\n        cylinder(h=3, r1=0.5, r2=0.2);\n        \n        // Rear claws\n        translate([-25, -2, 28])\n        rotate([0, 90, 0])\n        cylinder(h=2.5, r1=0.5, r2=0.2);\n        \n        translate([-25, 2, 28])\n        rotate([0, 90, 0])\n        cylinder(h=2.5, r1=0.5, r2=0.2);\n    }\n}\n\n// Create the stormserpent\nstormserpent();",
    "renders": true
  },
  {
    "mythical_creature": "thornback",
    "openscad_code": "// Thornback Dragon - Realistic Style, Medium Complexity\n// A spined, winged serpent-dragon from ancient marshes\n\n$fn = 36;\n\n// Main body color\ncolor(\"darkolivegreen\") {\n    union() {\n        // Thorax (central body segment)\n        translate([0, 0, 15]) \n            scale([1.2, 0.8, 1.2]) sphere(12);\n\n        // Abdomen (hind segment)\n        translate([0, 0, 0]) \n            scale([1.4, 0.9, 1.5]) sphere(10);\n\n        // Neck/head transition\n        translate([0, 0, 30]) \n            scale([0.9, 0.7, 0.8]) sphere(10);\n    }\n}\n\n// Head\ncolor(\"forestgreen\") {\n    translate([0, 0, 40]) rotate([30, 0, 0]) {\n        difference() {\n            scale([0.8, 0.6, 1.2]) sphere(12);\n            // Eye sockets\n            translate([5, 8, 5]) sphere(3);\n            translate([-5, 8, 5]) sphere(3);\n            // Nostrils\n            translate([3, 0, 1]) rotate([0, 90, 0]) cylinder(h=3, r=2);\n            translate([-3, 0, 1]) rotate([0, 90, 0]) cylinder(h=3, r=2);\n        }\n    }\n}\n\n// Horns - forward-curving thorn-like\nmodule horn(len, base) {\n    color(\"darkolivegreen\") {\n        for(i = [0:10]) {\n            translate([0, 0, i*len/10]) \n                rotate([i*3, 0, 0])\n                cylinder(h=len/10, r1=base*(1-i/15), r2=base*(1-i/15)*0.9);\n        }\n    }\n}\n\ntranslate([0, 0, 55]) rotate([-30, 0, 0]) horn(15, 3);\ntranslate([5, 0, 52]) rotate([-45, 20, 0]) horn(12, 2);\ntranslate([-5, 0, 52]) rotate([-45, -20, 0]) horn(12, 2);\n\n// Spinal thorn ridge\nmodule thorn(len) {\n    color(\"darkgreen\") {\n        rotate([90, 0, 0]) \n            cylinder(h=len, r1=2, r2=0.5);\n    }\n}\n\nfor(i = [0:20]) {\n    angle = i * 18;\n    x = 0;\n    y = sin(angle) * 8;\n    z = 35 - i * 1.8;\n    translate([x, y, z]) \n        rotate([0, i*3, 0]) \n        thorn(5 + sin(i*2)*2);\n}\n\n// Wings - leathery with bony supports\nmodule wing() {\n    color(\"darkolivegreen\") {\n        // Wing membrane\n        translate([0, 0, 0]) \n            rotate([0, 90, 0]) \n                scale([1, 0.3, 1]) \n                sphere(25);\n        \n        // Wing bones\n        for(i = [0:4]) {\n            rotate([0, 0, i*20-40]) {\n                translate([20, 0, 0]) \n                    rotate([0, 0, 45]) \n                    scale([20, 1, 1]) \n                    sphere(1.5);\n            }\n        }\n    }\n}\n\ntranslate([0, 20, 35]) rotate([0, 0, 20]) wing();\nmirror([0, 1, 0]) translate([0, 20, 35]) rotate([0, 0, 20]) wing();\n\n// Legs - four reptilian limbs\nmodule leg(len) {\n    color(\"darkgreen\") {\n        // Upper leg\n        translate([0, 0, 0]) \n            rotate([0, 0, -30]) \n            cylinder(h=len*0.6, r=3);\n        \n        // Lower leg\n        translate([len*0.5, 0, 0]) \n            rotate([0, 0, 30]) \n            cylinder(h=len*0.4, r=2.5);\n        \n        // Foot\n        translate([len*0.8, 0, -2]) \n            rotate([0, 90, 0]) \n            cylinder(h=6, r=2);\n    }\n}\n\n// Front legs\ntranslate([8, 15, 15]) rotate([0, 0, 45]) leg(12);\ntranslate([-8, 15, 15]) rotate([0, 0, -45]) leg(12);\n\n// Rear legs\ntranslate([10, -15, 8]) rotate([0, 0, 30]) leg(14);\ntranslate([-10, -15, 8]) rotate([0, 0, -30]) leg(14);\n\n// Tail - segmented with thorns\nmodule tail_segment(rad, len) {\n    color(\"darkolivegreen\") {\n        cylinder(h=len, r1=rad, r2=rad*0.9);\n    }\n}\n\nfor(i = [0:15]) {\n    rad = 10 - i*0.5;\n    len = 3;\n    translate([0, 0, -i*len - 5]) {\n        tail_segment(rad, len);\n        // Tail thorns\n        for(j = [0:3]) {\n            rotate([0, 0, j*90]) {\n                translate([rad, 0, len/2]) \n                    rotate([0, 90, 0]) \n                    thorn(4);\n            }\n        }\n    }\n}\n\n// Eyes - glowing red\ncolor(\"red\") {\n    translate([5, 8, 45]) sphere(2);\n    translate([-5, 8, 45]) sphere(2);\n}\n\n// Underbody scales pattern\nmodule scale() {\n    color(\"olivedrab\") {\n        sphere(1.5);\n    }\n}\n\nfor(i = [0:20]) {\n    angle = i * 36;\n    for(j = [0:4]) {\n        x = sin(angle) * (10 - j*1.5);\n        y = cos(angle) * (10 - j*1.5);\n        z = 10 - j*3;\n        translate([x, y, z]) scale();\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "voidwyrm",
    "openscad_code": "// Voidwyrm – a medium-complexity, realistic-style mythical creature\n// Designed for FDM printing: 0.8 mm walls, no steep overhangs, 80 mm long\n\n$fn = 32;                 // Smooth curves\n\n// Global scale\nscale(0.8)\nunion(){\n\n/* ---------- BODY ---------- */\n// Central elongated torso\ncolor(\"midnightblue\")\ntranslate([0,0,12])\nrotate([90,0,0])\ncylinder(h = 40, d1 = 14, d2 = 10, center = true);\n\n/* ---------- HEAD ---------- */\n// Serpentine snout\ncolor(\"darkslateblue\")\ntranslate([22,0,18])\nrotate([0,-20,0])\nunion(){\n    cylinder(h = 20, d1 = 12, d2 = 8);\n    translate([10,0,0])\n    sphere(d = 8);\n}\n\n// Horn pair\nmodule horn(len, ang){\n    color(\"indigo\")\n    rotate([ang,0,0])\n    cylinder(h = len, d1 = 3, d2 = 1);\n}\ntranslate([28,0,25]){\n    horn(10, -30);\n    mirror([0,1,0]) horn(10, -30);\n}\n\n/* ---------- WINGS ---------- */\nmodule wing(){\n    color(\"darkmagenta\")\n    difference(){\n        // Main membrane\n        translate([0,0,5])\n        rotate([0,-20,0])\n        scale([1,0.4,0.1])\n        sphere(d = 30);\n        // Cut ellipses for tattered look\n        for(i=[-10:10:10])\n            translate([i,i,0])\n            scale([2,1,1])\n            sphere(d = 5);\n    }\n}\n// Left wing\ntranslate([-5,15,25])\nrotate([0,0,30])\nwing();\n// Right wing\ntranslate([-5,-15,25])\nrotate([0,0,-30])\nmirror([0,1,0])\nwing();\n\n/* ---------- LEGS ---------- */\nmodule leg(side){\n    color(\"slateblue\")\n    translate([5, side*6, 8])\n    rotate([0,0, side*10])\n    union(){\n        cylinder(h = 12, d = 5);              // upper\n        translate([0,0,6])\n        rotate([30,0,0])\n        cylinder(h = 10, d = 4);              // lower\n        translate([0,0,9])\n        rotate([60,0,0])\n        scale([0.7,1.2,0.7])\n        sphere(d = 5);                        // clawed foot\n    }\n}\nleg(1);\nleg(-1);\n\n/* ---------- TAIL ---------- */\ncolor(\"midnightblue\")\ntranslate([-20,0,10])\nrotate([0,20,0])\ncylinder(h = 30, d1 = 10, d2 = 3);\n\n// Tail spikes (simple cones)\nmodule spike(len){\n    color(\"purple\")\n    cylinder(h = len, d1 = 2, d2 = 0);\n}\nfor(i=[0:6:24])\n    translate([-20-i*1.2,0,10+i*0.8])\n    rotate([0,20,0])\n    spike(4);\n\n/* ---------- VOID ORBS ---------- */\n// Glowing orbs along spine\nmodule orb(pos){\n    color(\"violet\")\n    translate(pos)\n    sphere(d = 4);\n}\nfor(i=[-10:10:30])\n    orb([i,0,22]);\n\n}",
    "renders": true
  },
  {
    "mythical_creature": "crystaldrake",
    "openscad_code": "// Crystaldrake - Medium complexity realistic style\n// A crystalline dragon with gem-like wings and tail\n\n$fn = 32;\n\n// Main scale factor\nscale_factor = 0.5;\n\n// Colors\ncrystal_color = \"LightBlue\";\nhorn_color = \"Silver\";\neye_color = \"Red\";\n\n// Head module\nmodule head() {\n    color(crystal_color) {\n        // Main head shape\n        translate([0, 0, 8]) \n            scale([1.2, 0.8, 1]) \n                sphere(6);\n        \n        // Snout\n        translate([6, 0, 7]) \n            scale([1.5, 0.7, 0.8]) \n                sphere(4);\n        \n        // Horns\n        color(horn_color) {\n            translate([0, -5, 12]) \n                rotate([0, 15, 0]) \n                    cylinder(h=8, r1=2, r2=0.5);\n            translate([0, 5, 12]) \n                rotate([0, -15, 0]) \n                    cylinder(h=8, r1=2, r2=0.5);\n        }\n        \n        // Eyes\n        color(eye_color) {\n            translate([4, -2.5, 10]) \n                sphere(1.2);\n            translate([4, 2.5, 10]) \n                sphere(1.2);\n        }\n    }\n}\n\n// Neck module\nmodule neck() {\n    color(crystal_color) {\n        for(i = [0:4]) {\n            translate([-i*2, 0, 8-i*1.5]) \n                scale([1.1 - i*0.1, 1.1 - i*0.1, 1.5]) \n                    sphere(3);\n        }\n    }\n}\n\n// Body module\nmodule body() {\n    color(crystal_color) {\n        // Main body\n        translate([-12, 0, 5]) \n            scale([2.5, 1.5, 1.2]) \n                sphere(8);\n        \n        // Chest plates\n        translate([-15, 0, 3]) \n            scale([1.5, 1.2, 0.5]) \n                sphere(5);\n    }\n}\n\n// Wing module\nmodule wing() {\n    color(crystal_color) {\n        // Wing membrane\n        translate([-10, 12, 8]) \n            rotate([0, 0, 20]) \n                scale([3, 0.1, 2]) \n                    sphere(5);\n        \n        // Wing support\n        translate([-5, 18, 12]) \n            rotate([0, 0, 45]) \n                cylinder(h=15, r1=1.5, r2=0.5);\n        \n        // Crystal formations\n        for(i = [0:2]) {\n            translate([-8 - i*3, 15 + i*2, 10 - i]) \n                rotate([0, 0, i*20]) \n                    scale([0.5, 0.5, 1.5]) \n                        sphere(2);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(crystal_color) {\n        // Main tail segments\n        for(i = [0:6]) {\n            translate([-20 - i*4, 0, 5 - i*0.5]) \n                scale([1 - i*0.12, 1 - i*0.12, 1 - i*0.1]) \n                    sphere(4 - i*0.5);\n        }\n        \n        // Crystal spikes\n        for(i = [0:3]) {\n            translate([-25 - i*6, 0, 6 - i]) \n                rotate([0, 20 + i*10, 0]) \n                    cylinder(h=3, r1=1.5, r2=0);\n        }\n    }\n}\n\n// Leg module\nmodule leg(side) {\n    color(crystal_color) {\n        // Upper leg\n        translate([-12, side*6, 0]) \n            rotate([0, 15, 0]) \n                cylinder(h=8, r1=2.5, r2=2);\n        \n        // Lower leg\n        translate([-18, side*7, -2]) \n            rotate([0, 15, 0]) \n                cylinder(h=7, r1=2, r2=1.5);\n        \n        // Foot\n        translate([-23, side*8, -5]) \n            scale([1.5, 0.8, 0.5]) \n                sphere(2);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    head();\n    neck();\n    body();\n    \n    // Wings - two sides\n    wing();\n    mirror([0, 1, 0]) wing();\n    \n    tail();\n    \n    // Legs\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "mythical_creature": "nightbasilisk",
    "openscad_code": "color(\"darkslategray\") {\n    \n    // Body\n    module body() {\n        union() {\n            // Main torso\n            translate([0, 0, 15]) \n                scale([1.2, 0.6, 1.2]) \n                    sphere(d=20, $fn=32);\n            \n            // Neck\n            translate([8, 0, 25]) \n                rotate([0, -20, 0]) \n                    cylinder(h=12, d1=6, d2=8, $fn=12);\n        }\n    }\n    \n    // Head\n    module head() {\n        union() {\n            // Main head\n            translate([18, 0, 28]) \n                rotate([0, 15, 0]) \n                    scale([1.3, 1, 1]) \n                        sphere(d=10, $fn=24);\n            \n            // Snout\n            translate([23, 0, 28]) \n                rotate([0, 15, 0]) \n                    cylinder(h=5, d1=8, d2=4, $fn=12);\n        }\n    }\n    \n    // Horns\n    module horns() {\n        for(i = [0:1]) {\n            translate([15, i==0 ? -2 : 2, 32]) \n                rotate(i==0 ? [0, 20, 15] : [0, 20, -15]) \n                    cylinder(h=8, d1=3, d2=1, $fn=6);\n            translate([15, i==0 ? -2 : 2, 32]) \n                rotate(i==0 ? [0, 20, 45] : [0, 20, -45]) \n                    cylinder(h=6, d1=2, d2=1, $fn=6);\n        }\n    }\n    \n    // Eyes (glowing)\n    color(\"red\") {\n        for(i = [0:1]) {\n            translate([21, i==0 ? -2 : 2, 29]) \n                sphere(d=1.5, $fn=8);\n        }\n    }\n    \n    // Wings\n    module wings() {\n        for(side = [0:1]) {\n            translate([0, side==0 ? -6 : 6, 22]) \n                rotate([0, 0, side==0 ? -20 : 20]) {\n                \n                // Wing arm\n                translate([0, 0, 0]) \n                    rotate([90, 0, side==0 ? -30 : 30]) \n                        cylinder(h=15, d=2, $fn=8);\n                \n                // Wing membrane supports\n                for(j = [0:2]) {\n                    rotate([0, 0, j*30 - 30]) \n                        translate([12*cos(j*30 - 30), 0, 12*sin(j*30 - 30)]) \n                            cylinder(h=2, d=1, $fn=6);\n                }\n                \n                // Wing membrane\n                color(\"darkslateblue\") {\n                    translate([-1, 0, 0]) \n                        rotate([90, 0, side==0 ? -20 : 20]) {\n                            linear_extrude(height=0.5) {\n                                polygon(points=[\n                                    [0,0],\n                                    [12, -8],\n                                    [12, 8],\n                                    [6, 0]\n                                ]);\n                            }\n                        }\n                }\n            }\n        }\n    }\n    \n    // Legs\n    module legs() {\n        for(side = [0:1]) {\n            for(pos = [0:1]) {\n                translate([pos==0 ? 3 : -3, side==0 ? -4 : 4, 8]) {\n                    // Thigh\n                    rotate([0, 0, side==0 ? -10 : 10]) \n                        cylinder(h=8, d=3, $fn=8);\n                    \n                    // Lower leg\n                    translate([0, 0, 8]) \n                        rotate([0, 0, 20]) \n                            cylinder(h=6, d=2.5, $fn=8);\n                    \n                    // Foot\n                    translate([0, 0, 14]) \n                        rotate([0, 0, -20]) {\n                            cube([4, 2, 1], center=true);\n                            translate([2, 0, -0.5]) \n                                cube([2, 1.5, 1], center=true);\n                        }\n                }\n            }\n        }\n    }\n    \n    // Tail\n    module tail() {\n        color(\"darkslategray\") {\n            hull() {\n                translate([-8, 0, 15]) \n                    sphere(d=4, $fn=12);\n                translate([-18, 0, 12]) \n                    sphere(d=2, $fn=8);\n                translate([-25, 0, 10]) \n                    sphere(d=1, $fn=6);\n            }\n        }\n    }\n    \n    // Scales pattern\n    module scales() {\n        for(i = [0:5]) {\n            for(j = [0:3]) {\n                translate([-5 + i*2, -3 + j*2, 14.5]) \n                    scale([0.5, 0.5, 0.3]) \n                        sphere(d=1, $fn=6);\n            }\n        }\n    }\n    \n    // Assemble the creature\n    body();\n    head();\n    horns();\n    wings();\n    legs();\n    tail();\n    scales();\n}",
    "renders": true
  },
  {
    "mythical_creature": "seaserpent",
    "openscad_code": "// Sea Serpent - Realistic Style, Medium Complexity\n// Designed for 3D printing with proper wall thickness\n\n// Colors\ncolor_sea = \"#2E8B57\";\ncolor_belly = \"#B0E0E6\";\ncolor_eye = \"#FF4500\";\ncolor_fin = \"#4682B4\";\n\n// Main body module\nmodule sea_serpent() {\n    color(color_sea) {\n        // Head\n        translate([0, 0, 15]) {\n            union() {\n                // Main head shape\n                scale([1.2, 0.8, 1]) sphere(r=8);\n                \n                // Snout\n                translate([8, 0, 0]) \n                    scale([2, 0.6, 0.6]) sphere(r=5);\n                \n                // Horns\n                translate([3, 0, 6]) \n                    rotate([0, -15, 0]) \n                    cylinder(h=12, r1=2, r2=0.5);\n                translate([3, 0, -6]) \n                    rotate([0, 15, 0]) \n                    cylinder(h=12, r1=2, r2=0.5);\n                \n                // Eyes\n                color(color_eye) {\n                    translate([5, 4, 3]) sphere(r=1.5);\n                    translate([5, -4, 3]) sphere(r=1.5);\n                }\n            }\n        }\n        \n        // Neck and body segments\n        for(i = [0:8]) {\n            color(i % 2 == 0 ? color_sea : color_belly) {\n                translate([0, 0, 15 - i * 6]) {\n                    rotate([0, 0, i * 15]) {\n                        scale([1 - i * 0.05, 1 - i * 0.05, 1 - i * 0.05]) {\n                            // Body segment\n                            hull() {\n                                translate([0, 0, 0]) sphere(r=7 - i * 0.5);\n                                translate([0, 0, -6]) sphere(r=6 - i * 0.4);\n                            }\n                            \n                            // Scales pattern\n                            for(j = [0:3]) {\n                                rotate([0, 0, j * 90]) {\n                                    translate([5 - i * 0.3, 0, -3]) {\n                                        scale([0.8, 0.5, 0.5]) sphere(r=1.5);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Dorsal fin\n        color(color_fin) {\n            translate([-5, 0, 15]) {\n                for(i = [0:6]) {\n                    translate([0, 0, -i * 2.5]) {\n                        rotate([0, 90, 0]) {\n                            scale([1 - i * 0.1, 1 - i * 0.1, 1 - i * 0.1]) {\n                                linear_extrude(height=0.5) {\n                                    polygon(points=[[0,0], [8,0], [4,3], [0,0]]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Tail\n        translate([0, 0, -35]) {\n            rotate([0, 0, 45]) {\n                // Tail segments\n                for(i = [0:4]) {\n                    translate([0, 0, -i * 5]) {\n                        rotate([0, 0, i * 20]) {\n                            scale([0.6 - i * 0.1, 0.6 - i * 0.1, 0.6 - i * 0.1]) {\n                                sphere(r=5 - i);\n                                \n                                // Tail fin\n                                if(i == 4) {\n                                    color(color_fin) {\n                                        rotate([0, 90, 0]) {\n                                            linear_extrude(height=0.5) {\n                                                polygon(points=[[0,0], [15,0], [7,8], [0,0]]);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Side fins\n        color(color_fin) {\n            translate([0, 8, 5]) {\n                rotate([0, 45, 0]) {\n                    scale([1.5, 1, 0.5]) {\n                        sphere(r=4);\n                    }\n                }\n            }\n            translate([0, -8, 5]) {\n                rotate([0, -45, 0]) {\n                    scale([1.5, 1, 0.5]) {\n                        sphere(r=4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Base for stability\nmodule base() {\n    color(color_sea) {\n        translate([0, 0, -45]) {\n            cylinder(h=2, r=20);\n        }\n    }\n}\n\n// Create the model\nunion() {\n    sea_serpent();\n    base();\n}\n\n// Scale for 3D printing (total length ~80mm)\nscale([0.8, 0.8, 0.8]) {\n    sea_serpent();\n    base();\n}",
    "renders": true
  },
  {
    "mythical_creature": "skyhydra",
    "openscad_code": "// SkyHydra - A mythical multi-headed aerial dragon\n// Wingspan: 80mm, Length: 60mm, Height: 35mm\n// Designed for 3D printing with no overhangs >45°\n\n$fn = 32;\n\n// Main body\nmodule skyhydra() {\n    // Central torso\n    color(\"steelblue\") {\n        translate([0, 0, 8]) \n            scale([1.2, 1, 1]) \n                sphere(r=12);\n        \n        // Tail section\n        translate([0, -25, 5]) \n            cylinder(h=25, r1=10, r2=4);\n    }\n    \n    // Three dragon heads\n    for(i = [-1, 0, 1]) {\n        translate([i*15, 20, 12]) \n            rotate([0, 0, i*15]) \n                dragon_head();\n    }\n    \n    // Four wings (two pairs)\n    for(side = [-1, 1]) {\n        translate([side*12, -5, 15]) \n            rotate([0, side*20, 0]) \n                wing(side);\n        \n        translate([side*8, -15, 10]) \n            rotate([0, side*30, 10]) \n                wing_small(side);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([side*8, 0, 0]) \n            dragon_leg();\n    }\n    \n    // Scales pattern on back\n    scales_pattern();\n    \n    // Cloud-like magical aura\n    magical_aura();\n}\n\n// Dragon head module\nmodule dragon_head() {\n    color(\"slateblue\") {\n        union() {\n            // Snout\n            translate([0, 5, 0]) \n                scale([1, 1.5, 0.8]) \n                    sphere(r=6);\n            \n            // Head\n            sphere(r=8);\n            \n            // Horns\n            translate([0, -3, 8]) \n                rotate([30, 0, 0]) \n                    cylinder(h=10, r1=3, r2=1);\n            \n            // Eyes\n            translate([3, 2, 2]) \n                color(\"gold\") \n                    sphere(r=2);\n            \n            // Nostrils\n            translate([0, 8, -1]) {\n                translate([2, 0, 0]) \n                    sphere(r=1);\n                translate([-2, 0, 0]) \n                    sphere(r=1);\n            }\n        }\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    color(\"cornflowerblue\") {\n        difference() {\n            // Main wing membrane\n            translate([0, 0, 0]) \n                rotate([0, 0, side*15]) \n                    scale([1, 2.5, 0.1]) \n                        sphere(r=15);\n            \n            // Wing holes for lightness\n            for(i = [1:3]) {\n                translate([side*i*4, i*5, -1]) \n                    rotate([0, 0, side*i*10]) \n                        scale([0.8, 1.2, 1]) \n                            cylinder(h=3, r=2);\n            }\n        }\n        \n        // Wing bones\n        color(\"midnightblue\") {\n            translate([0, 0, 0]) \n                rotate([0, 0, side*15]) \n                    cylinder(h=30, r=0.8);\n            \n            translate([0, 15, 0]) \n                rotate([0, 0, side*45]) \n                    cylinder(h=20, r=0.6);\n        }\n    }\n}\n\n// Smaller secondary wings\nmodule wing_small(side) {\n    scale(0.7) \n        wing(side);\n}\n\n// Dragon leg module\nmodule dragon_leg() {\n    color(\"royalblue\") {\n        union() {\n            // Thigh\n            translate([0, 0, 5]) \n                rotate([0, 10, 0]) \n                    cylinder(h=12, r=3);\n            \n            // Lower leg\n            translate([0, 0, 0]) \n                rotate([0, -20, 0]) \n                    cylinder(h=10, r1=3, r2=2);\n            \n            // Foot\n            translate([0, -3, -3]) \n                rotate([0, -90, 0]) \n                    scale([1.5, 1, 0.5]) \n                        sphere(r=4);\n            \n            // Claws\n            for(i = [-1, 0, 1]) {\n                translate([i*2, -5, -2]) \n                    rotate([0, -20, 0]) \n                        cone(h=3, r1=1, r2=0.3);\n            }\n        }\n    }\n}\n\n// Scales pattern on back\nmodule scales_pattern() {\n    color(\"darkblue\") {\n        for(y = [-20:5:15]) {\n            for(x = [-10:5:10]) {\n                if(x*x + y*y < 100) {\n                    translate([x, y, 18]) \n                        scale([1, 1, 0.3]) \n                            sphere(r=2);\n                }\n            }\n        }\n    }\n}\n\n// Magical cloud aura\nmodule magical_aura() {\n    color(\"lightskyblue\", 0.3) {\n        for(i = [1:8]) {\n            rotate([0, 0, i*45]) \n                translate([25, 0, 15]) \n                    scale([1.2, 1, 0.8]) \n                        sphere(r=5);\n        }\n    }\n}\n\n// Cone helper module\nmodule cone(h, r1, r2) {\n    cylinder(h=h, r1=r1, r2=r2);\n}\n\n// Main assembly\nskyhydra();",
    "renders": true
  },
  {
    "mythical_creature": "shadowwyrm",
    "openscad_code": "// Shadowwyrm – medium-complexity realistic 3-D printable miniature\n// Overall length ≈ 90 mm, wingspan ≈ 85 mm\n// All wall thickness ≥ 0.8 mm, supports only under base plate\n\nmodule body() {\n    difference() {\n        // Torso\n        translate([0,0,12])\n            scale([1,0.65,1])\n            sphere(r=12,$fn=40);\n        \n        // Neck cavity\n        translate([0,0,30])\n            rotate([0,20,0])\n            cylinder(h=15,r1=6,r2=4,$fn=20);\n        \n        // Tail socket cavity\n        translate([0,0,-5])\n            rotate([0,-10,0])\n            cylinder(h=12,r1=5,r2=7,$fn=20);\n    }\n}\n\nmodule neck() {\n    translate([0,0,30])\n        rotate([0,20,0])\n        cylinder(h=18,r1=4,r2=6,$fn=20);\n}\n\nmodule head() {\n    translate([0,0,48]) {\n        difference() {\n            // Snout\n            rotate([0,20,0])\n            cylinder(h=20,r1=6,r2=2,$fn=20);\n            \n            // Nostrils\n            for(side=[-1,1])\n                translate([side*4,0,48])\n                    rotate([0,20,0])\n                    cylinder(h=6,r=1,$fn=8);\n            \n            // Eye sockets\n            for(side=[-1,1])\n                translate([side*5,5,52])\n                    sphere(r=2.5,$fn=12);\n        }\n        \n        // Eyes\n        color(\"red\") \n        for(side=[-1,1])\n            translate([side*5,5,52])\n                sphere(r=1.5,$fn=8);\n        \n        // Horns\n        color(\"dimgray\")\n        for(side=[-1,1])\n            translate([side*4,-4,58])\n                rotate([side*-20,0,side*-15])\n                cylinder(h=12,r1=2.5,r2=0.5,$fn=8);\n    }\n}\n\nmodule wing() {\n    // Membrane wing using thin intersected prisms\n    difference() {\n        intersection() {\n            scale([1,5,0.8])\n                sphere(r=16,$fn=30);\n            translate([0,0,-2])\n                cube([40,80,4],center=true);\n        }\n        // Veins cutouts\n        for(i=[-2:2])\n            translate([0,i*8+4,0])\n                rotate([0,0,i*5])\n                cube([40,1,2],center=true);\n    }\n}\n\nmodule wings() {\n    color(\"darkslategray\")\n    for(side=[-1,1])\n        translate([side*12,0,25])\n            rotate([0,side*10,side*30])\n                wing();\n}\n\nmodule tail() {\n    color(\"darkslategray\")\n    translate([0,0,-5])\n        rotate([0,-10,0])\n        for(i=[0:6]) {\n            translate([0,0,-i*7])\n                scale([1-i*0.08,1-i*0.08,1])\n                sphere(r=7-i,$fn=20);\n        }\n}\n\nmodule legs() {\n    color(\"dimgray\")\n    for(side=[-1,1])\n        for(pos=[0,1]) {\n            translate([side*8,0,10-pos*4])\n                rotate([0,0,side*10])\n                cylinder(h=12-pos*2,r1=3,r2=2,$fn=8);\n        }\n}\n\nmodule base() {\n    color(\"gray\")\n    translate([0,0,-15])\n        cylinder(h=3,r1=25,r2=30,$fn=60);\n}\n\n// Assembly\nunion() {\n    base();\n    body();\n    neck();\n    head();\n    wings();\n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "mythical_creature": "starlizard",
    "openscad_code": "// Starlizard - A mythical celestial lizard creature\n// Features: Star-pattern wings, crystal horns, segmented tail with star tip\n\n// Colors\ncolor_stars = [1, 0.8, 0];        // Golden stars\ncolor_scales = [0.2, 0.4, 0.6];   // Deep blue scales\ncolor_crystals = [0.5, 0.8, 1];   // Light blue crystals\n\n// Main parameters\nbody_length = 40;\nbody_width = 20;\nbody_height = 15;\nwing_span = 60;\ntail_segments = 5;\nscale_size = 2;\n\n// Star primitive module\nmodule star(radius, height) {\n    linear_extrude(height) {\n        union() {\n            circle(r=radius, $fn=5);\n            rotate([0, 0, 36]) circle(r=radius, $fn=5);\n        }\n    }\n}\n\n// Crystal horn module\nmodule crystal_horn(base, height) {\n    color(color_crystals) {\n        hull() {\n            translate([0, 0, 0]) cylinder(h=base, r=base/2, $fn=6);\n            translate([0, 0, height]) cylinder(h=base/3, r=base/4, $fn=6);\n        }\n    }\n}\n\n// Scale pattern module\nmodule scale_pattern() {\n    color(color_scales) {\n        for (i = [-1:1]) {\n            for (j = [-2:2]) {\n                if (i != 0 || j != 0) {\n                    translate([i*scale_size*2, j*scale_size*1.5, 0]) \n                        sphere(r=scale_size, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Main body\nmodule body() {\n    color(color_scales) {\n        // Main torso\n        hull() {\n            sphere(r=body_width/2, $fn=20);\n            translate([body_length/2, 0, 0]) sphere(r=body_width/2.5, $fn=20);\n            translate([-body_length/3, 0, 0]) sphere(r=body_width/2.5, $fn=20);\n        }\n        \n        // Apply scales\n        for (i = [1:5]) {\n            translate([i*body_length/6 - body_length/2, 0, body_height/2]) \n                scale_pattern();\n        }\n    }\n}\n\n// Wings with star patterns\nmodule wing() {\n    color(color_stars) {\n        // Wing membrane\n        translate([0, 0, 0]) {\n            rotate([0, 90, 0]) {\n                linear_extrude(1) {\n                    polygon(points=[\n                        [0, 0], [wing_span/2, 0], [wing_span/3, wing_span/3],\n                        [wing_span/4, wing_span/2], [0, wing_span/3]\n                    ]);\n                }\n            }\n        }\n        \n        // Star decorations\n        for (i = [1:3]) {\n            translate([i*wing_span/8, i*wing_span/8, 1]) {\n                rotate([90, 0, 0]) star(3, 1);\n            }\n        }\n        \n        // Wing bone structure\n        color([0.8, 0.8, 0.8]) {\n            cylinder(h=wing_span/2, r=1, $fn=8);\n            rotate([0, 45, 0]) cylinder(h=wing_span/2.5, r=1, $fn=8);\n        }\n    }\n}\n\n// Head with horns\nmodule head() {\n    color(color_scales) {\n        // Snout\n        translate([body_length/2 + 5, 0, 0]) {\n            hull() {\n                sphere(r=8, $fn=16);\n                translate([5, 0, 0]) sphere(r=6, $fn=16);\n            }\n            \n            // Eyes\n            color([0.2, 0.2, 0.2]) {\n                translate([8, 4, 3]) sphere(r=1.5, $fn=8);\n                translate([8, -4, 3]) sphere(r=1.5, $fn=8);\n            }\n            \n            // Crystal horns\n            translate([2, 6, 8]) crystal_horn(3, 10);\n            translate([2, -6, 8]) crystal_horn(3, 10);\n        }\n    }\n}\n\n// Segmented tail with star tip\nmodule tail() {\n    color(color_scales) {\n        for (i = [0:tail_segments-1]) {\n            translate([-i*body_length/4 - body_length/3, 0, -i*2]) {\n                scale([1 - i*0.1, 1 - i*0.1, 1 - i*0.1]) {\n                    sphere(r=body_width/2.5 - i, $fn=12);\n                }\n            }\n        }\n        \n        // Star tip\n        color(color_stars) {\n            translate([-tail_segments*body_length/4 - body_length/3 - 5, 0, -tail_segments*2]) {\n                rotate([0, 0, 45]) star(5, 3);\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(color_scales) {\n        // Front legs\n        translate([body_length/4, body_width/2, -body_height/2]) {\n            cylinder(h=10, r=3, $fn=8);\n            translate([0, 0, -10]) sphere(r=4, $fn=8);\n        }\n        translate([body_length/4, -body_width/2, -body_height/2]) {\n            cylinder(h=10, r=3, $fn=8);\n            translate([0, 0, -10]) sphere(r=4, $fn=8);\n        }\n        \n        // Back legs\n        translate([-body_length/4, body_width/2, -body_height/2]) {\n            cylinder(h=12, r=3.5, $fn=8);\n            translate([0, 0, -12]) sphere(r=4.5, $fn=8);\n        }\n        translate([-body_length/4, -body_width/2, -body_height/2]) {\n            cylinder(h=12, r=3.5, $fn=8);\n            translate([0, 0, -12]) sphere(r=4.5, $fn=8);\n        }\n    }\n}\n\n// Assemble the starlizard\nunion() {\n    body();\n    head();\n    tail();\n    legs();\n    \n    // Wings positioned on back\n    translate([-body_length/6, 0, body_height/2]) {\n        rotate([0, 0, 30]) wing();\n        mirror([0, 1, 0]) rotate([0, 0, 30]) wing();\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "moonwyrm",
    "openscad_code": "// Moonwyrm mythical creature - Medium complexity realistic style\n// Size: 70mm long x 50mm wingspan x 35mm tall\n\n// Main body module\nmodule moonwyrm_body() {\n    color(\"silver\") {\n        // Central torso - elongated sphere\n        translate([0, 0, 15]) {\n            scale([1.2, 0.8, 0.6]) sphere(d=25);\n        }\n        \n        // Neck extending forward\n        translate([12, 0, 18]) {\n            rotate([0, -20, 0]) {\n                scale([0.8, 0.6, 0.6]) cylinder(h=15, d1=12, d2=8);\n            }\n        }\n        \n        // Tail segments\n        for(i = [1:5]) {\n            translate([-i*6-8, 0, 15-i*2]) {\n                scale([1-i*0.08, 0.8-i*0.05, 0.6-i*0.05]) \n                    sphere(d=22-i*3);\n            }\n        }\n    }\n}\n\n// Head module\nmodule moonwyrm_head() {\n    color(\"lightgray\") {\n        // Main head shape\n        translate([20, 0, 20]) {\n            rotate([0, -20, 0]) {\n                scale([1.3, 0.8, 0.7]) sphere(d=15);\n            }\n        }\n        \n        // Snout\n        translate([27, 0, 20]) {\n            rotate([0, -20, 0]) {\n                cylinder(h=8, d1=10, d2=6);\n            }\n        }\n        \n        // Horns - crescent moon shape\n        color(\"gold\") {\n            translate([18, 0, 28]) {\n                rotate([0, 30, 0]) {\n                    scale([0.3, 1, 0.1]) sphere(d=20);\n                }\n            }\n            translate([18, 0, 28]) {\n                rotate([0, -30, 0]) {\n                    scale([0.3, 1, 0.1]) sphere(d=20);\n                }\n            }\n        }\n        \n        // Eyes - glowing orbs\n        color(\"cyan\") {\n            translate([25, 5, 22]) sphere(d=3);\n            translate([25, -5, 22]) sphere(d=3);\n        }\n    }\n}\n\n// Wing module\nmodule wing() {\n    color(\"silver\") {\n        // Main wing membrane\n        translate([-5, 15, 25]) {\n            rotate([0, 0, 45]) {\n                scale([0.3, 1.8, 0.05]) sphere(d=30);\n            }\n        }\n        \n        // Wing bones\n        color(\"lightgray\") {\n            for(i = [1:3]) {\n                translate([-5, 15+i*8, 25]) {\n                    rotate([0, 0, 45+i*5]) {\n                        scale([0.2, 0.8, 0.2]) cylinder(h=25-i*5, d=2);\n                    }\n                }\n            }\n        }\n        \n        // Moon pattern on wing\n        color(\"paleblue\") {\n            translate([-5, 25, 26]) {\n                scale([0.8, 0.4, 0.1]) sphere(d=8);\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    color(\"silver\") {\n        // Upper leg\n        translate([5, 10, 5]) {\n            rotate([0, 0, -30]) {\n                cylinder(h=12, d=6);\n            }\n        }\n        \n        // Lower leg\n        translate([5, 16, -2]) {\n            rotate([0, 0, -30]) {\n                cylinder(h=10, d=4);\n            }\n        }\n        \n        // Foot\n        translate([5, 22, -7]) {\n            scale([1.5, 0.8, 0.5]) sphere(d=6);\n        }\n        \n        // Claws\n        color(\"gold\") {\n            for(i = [-1:1]) {\n                translate([5+i*2, 24, -9]) {\n                    rotate([0, 30, 0]) {\n                        cylinder(h=4, d1=2, d2=1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Scale pattern module\nmodule scales() {\n    color(\"silver\") {\n        for(i = [0:5]) {\n            for(j = [0:8]) {\n                translate([i*5-10, 0, j*3+5]) {\n                    rotate([0, i*10, 0]) {\n                        scale([0.5, 0.3, 0.1]) sphere(d=4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Magical aura module\nmodule moon_aura() {\n    color(\"paleblue\", 0.3) {\n        translate([0, 0, 20]) {\n            sphere(d=60);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    moon_aura();\n    moonwyrm_body();\n    moonwyrm_head();\n    \n    // Wings\n    wing();\n    mirror([0, 1, 0]) wing();\n    \n    // Legs\n    leg();\n    translate([0, -20, 0]) leg();\n    translate([-15, 8, 0]) leg();\n    translate([-15, -8, 0]) leg();\n    \n    // Scales along body\n    scales();\n}",
    "renders": true
  },
  {
    "mythical_creature": "sunwyrm",
    "openscad_code": "$fa = 1;\n$fs = 0.4;\n\n// Sunwyrm mythical creature – solar wyrm with radiant wings and tail-plume\nmodule sunwyrm() {\n    color(\"DarkOrange\") {\n        // Main body\n        translate([0, 0, 10]) rotate([0, 90, 0]) \n            cylinder(h = 35, r1 = 8, r2 = 6, center = true);\n\n        // Head\n        translate([0, 0, 30]) sphere(7);\n        \n        // Snout\n        translate([0, 7, 30]) rotate([0, 90, 0]) \n            cylinder(h = 12, r1 = 5, r2 = 3);\n        \n        // Horns\n        for (a = [30:120:240]) {\n            rotate([0, 0, a]) \n                translate([0, 6, 35]) rotate([0, -20, 0]) \n                    cylinder(h = 10, r1 = 2, r2 = 1);\n        }\n        \n        // Eyes (glowing gems)\n        color(\"Gold\") {\n            for (a = [60, 120]) {\n                rotate([0, 0, a]) \n                    translate([0, 6.5, 29]) sphere(1.5);\n            }\n        }\n    }\n    \n    // Wings – sun-rays membrane style\n    color(\"Goldenrod\") {\n        for (s = [0:1]) {\n            mirror([s ? 1 : -1, 0, 0]) \n                translate([8, 0, 20]) rotate([0, -20, 0]) {\n                    // Wing arm\n                    cylinder(h = 30, r1 = 2, r2 = 1.5);\n                    \n                    // Wing membrane segments\n                    for (i = [0:1:4]) {\n                        rotate([0, 20 + i*10, 0]) \n                            translate([12 + i*3, 0, 0]) \n                                cube([8, 1, 0.6], center = true);\n                    }\n                }\n        }\n    }\n    \n    // Tail becoming solar plume\n    color(\"Orange\") {\n        for (i = [0:1:5]) {\n            translate([0, 0, 10 - i*6]) \n                rotate([0, 0, i*25]) \n                    cylinder(h = 7, r1 = 6 - i, r2 = 5 - i);\n        }\n    }\n    \n    // Solar flame plume at tail tip\n    color(\"Yellow\") {\n        for (i = [0:1:4]) {\n            rotate([0, 0, i*72]) \n                translate([0, 0, -28]) \n                    scale([1, 0.2, 1]) \n                        sphere(4 - i*0.5);\n        }\n    }\n    \n    // Legs\n    color(\"DarkOrange\") {\n        for (s = [0:1]) {\n            mirror([s ? 1 : -1, 0, 0]) {\n                translate([6, 0, 5]) rotate([0, 20, 0]) \n                    cylinder(h = 10, r1 = 2, r2 = 1.5);\n                translate([6, 0, 0]) rotate([0, 0, 0]) \n                    cylinder(h = 8, r1 = 1.5, r2 = 2);\n            }\n        }\n    }\n    \n    // Scales along spine\n    color(\"SaddleBrown\") {\n        for (i = [0:1:7]) {\n            translate([0, 0, 25 - i*4]) \n                scale([1.2, 0.6, 0.4]) \n                    sphere(2);\n        }\n    }\n}\n\n// Render model standing on base\nrotate([0, 180, 0]) sunwyrm();",
    "renders": true
  },
  {
    "mythical_creature": "brimstone",
    "openscad_code": "// Brimstone Demon - Medium complexity 3D printable mythical creature\n// Overall dimensions: ~70mm length, 40mm height, 60mm wingspan\n\n// Color definitions\ncolor_body = [0.6, 0.2, 0.1];      // Charred red\ncolor_wings = [0.3, 0.15, 0.05];   // Dark leathery\ncolor_eyes = [1, 0.8, 0];          // Glowing yellow\ncolor_fire = [1, 0.3, 0];         // Magma glow\n\n// Main body module\nmodule demon_body() {\n    color(color_body) {\n        // Torso - slightly hunched\n        translate([0, 0, 15]) {\n            scale([1.2, 0.8, 1.5]) sphere(8, $fn=20);\n        }\n        \n        // Chest armor plates\n        for(i = [0:2]) {\n            rotate([0, 0, i*120]) {\n                translate([0, 0, 20]) {\n                    scale([1, 0.5, 0.3]) cube([8, 12, 2], center=true);\n                }\n            }\n        }\n        \n        // Spiked spine\n        for(i = [1:6]) {\n            translate([0, 0, 15 + i*3]) {\n                rotate([0, 0, i*30]) {\n                    cylinder(h=4, r1=2, r2=0.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Head with horns\nmodule demon_head() {\n    color(color_body) {\n        // Main head\n        translate([0, 15, 25]) {\n            scale([0.8, 1.2, 1]) sphere(6, $fn=16);\n        }\n        \n        // Snout\n        translate([0, 22, 25]) {\n            scale([0.6, 0.8, 0.5]) sphere(4, $fn=16);\n        }\n        \n        // Horns - curved back\n        for(side = [-1, 1]) {\n            translate([side*4, 12, 30]) {\n                rotate([side*20, -20, 0]) {\n                    scale([0.5, 0.5, 1]) cylinder(h=12, r1=2, r2=1, $fn=8);\n                }\n            }\n        }\n        \n        // Eyes - glowing\n        color(color_eyes) {\n            for(side = [-1, 1]) {\n                translate([side*3, 18, 27]) {\n                    sphere(1.5, $fn=10);\n                }\n            }\n        }\n    }\n}\n\n// Wings - leathery\nmodule demon_wings() {\n    color(color_wings) {\n        for(side = [-1, 1]) {\n            translate([side*10, 5, 30]) {\n                rotate([0, side*20, 0]) {\n                    // Wing membrane\n                    difference() {\n                        scale([1, 1.5, 0.1]) sphere(12, $fn=16);\n                        translate([side*8, 0, 0]) {\n                            cube([20, 30, 2], center=true);\n                        }\n                    }\n                    \n                    // Wing bones\n                    for(i = [1:3]) {\n                        rotate([0, 0, side*i*25]) {\n                            translate([0, -5, 0]) {\n                                scale([0.3, 1, 0.2]) cylinder(h=15, r1=1, r2=0.5, $fn=6);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail with flame tip\nmodule demon_tail() {\n    color(color_body) {\n        // Tail segments\n        for(i = [0:4]) {\n            translate([-i*5, -i*2, 15 - i*2]) {\n                rotate([0, 0, -i*15]) {\n                    scale([1 - i*0.15, 1 - i*0.15, 1]) sphere(4, $fn=12);\n                }\n            }\n        }\n        \n        // Flame tip\n        color(color_fire) {\n            translate([-20, -10, 10]) {\n                scale([1, 1, 1.5]) sphere(3, $fn=12);\n                translate([0, 0, 2]) {\n                    cylinder(h=5, r1=2, r2=0, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Legs\nmodule demon_legs() {\n    color(color_body) {\n        for(side = [-1, 1]) {\n            // Upper leg\n            translate([side*5, 5, 10]) {\n                rotate([0, side*10, 0]) {\n                    cylinder(h=12, r1=3, r2=2, $fn=8);\n                }\n            }\n            \n            // Lower leg\n            translate([side*6, 5, 0]) {\n                rotate([0, side*30, 0]) {\n                    cylinder(h=10, r1=2, r2=2, $fn=8);\n                }\n            }\n            \n            // Hoof\n            translate([side*7, 5, -5]) {\n                scale([1.2, 1, 0.8]) sphere(2, $fn=8);\n            }\n        }\n    }\n}\n\n// Arms\nmodule demon_arms() {\n    color(color_body) {\n        for(side = [-1, 1]) {\n            // Upper arm\n            translate([side*10, 10, 20]) {\n                rotate([0, 0, side*-30]) {\n                    cylinder(h=10, r1=2, r2=1.5, $fn=8);\n                }\n            }\n            \n            // Forearm\n            translate([side*15, 15, 18]) {\n                rotate([0, 0, side*-60]) {\n                    cylinder(h=8, r1=1.5, r2=1, $fn=8);\n                }\n            }\n            \n            // Claws\n            for(claw = [0:2]) {\n                translate([side*20 + claw*0.8, 20, 17]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=3, r1=0.5, r2=0.2, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    demon_body();\n    demon_head();\n    demon_wings();\n    demon_tail();\n    demon_legs();\n    demon_arms();\n}",
    "renders": true
  },
  {
    "mythical_creature": "razorfang",
    "openscad_code": "// Razorfang mythical creature - realistic style\n// A dragon-like beast with serrated scales and crystalline wing membranes\n\n$fn = 32;\n\n// Main body color - obsidian black with purple undertones\ncolor([0.1, 0.05, 0.15]) {\n    // Main torso\n    module torso() {\n        difference() {\n            scale([1.2, 0.8, 1.5]) sphere(15);\n            \n            // Neck cavity\n            translate([0, 0, 20]) cylinder(10, 6, 8, center=true);\n            \n            // Tail cavity\n            translate([0, 0, -20]) cylinder(10, 7, 5, center=true);\n            \n            // Leg holes\n            for(i = [-1, 1]) {\n                translate([i*12, 0, -10]) rotate([0, 90, 0]) \n                    cylinder(8, 5, 5, center=true);\n            }\n        }\n    }\n    \n    // Neck and head\n    module neck_and_head() {\n        union() {\n            // Neck\n            translate([0, 0, 25]) rotate([-30, 0, 0])\n                scale([0.8, 0.8, 2]) cylinder(12, 6, 4);\n            \n            // Head\n            translate([0, 0, 38]) rotate([-30, 0, 0]) {\n                difference() {\n                    scale([1.2, 0.9, 1.6]) sphere(8);\n                    \n                    // Eye sockets\n                    for(i = [-1, 1]) {\n                        translate([i*6, 3, 3]) sphere(2.5);\n                    }\n                    \n                    // Nostrils\n                    for(i = [-1, 1]) {\n                        translate([i*3, 5, -2]) rotate([45, 0, 0])\n                            cylinder(2, 1.5, 1.5);\n                    }\n                }\n                \n                // Eyes - glowing red\n                color([1, 0.1, 0.1]) {\n                    for(i = [-1, 1]) {\n                        translate([i*6, 3, 2]) sphere(1.5);\n                    }\n                }\n                \n                // Serrated teeth\n                for(i = [0:4]) {\n                    translate([0, 8, -5 + i*2]) rotate([0, 90, 0])\n                        scale([0.3, 0.3, 1]) cylinder(3, 1, 0.5);\n                }\n            }\n        }\n    }\n    \n    // Wings with crystalline membrane pattern\n    module wing() {\n        translate([16, 0, 5]) rotate([0, 90, 0]) {\n            // Wing arm\n            cylinder(25, 3, 1);\n            \n            // Wing membrane\n            for(i = [0:5]) {\n                color([0.3, 0.1, 0.6, 0.7]) {\n                    translate([0, 0, -i*4]) rotate([0, i*15, 0])\n                        scale([1 - i*0.15, 0.05, 1]) cube([25 - i*3, 1, 8 - i*1]);\n                }\n            }\n            \n            // Serrated wing edges\n            for(i = [0:8]) {\n                translate([2 + i*2.5, 0, -20 + i*2]) rotate([0, 90, 0])\n                    scale([0.5, 0.5, 0.8]) cylinder(2, 1.5, 0.5);\n            }\n        }\n    }\n    \n    // Tail with segmented scales\n    module tail() {\n        translate([0, 0, -30]) rotate([30, 0, 0]) {\n            for(i = [0:6]) {\n                color([0.15, 0.08, 0.2]) {\n                    translate([0, 0, -i*6]) scale([1 - i*0.1, 0.9, 0.8])\n                        cylinder(5, 5 - i*0.4, 5 - i*0.4);\n                }\n                \n                // Tail spikes\n                if(i > 2) {\n                    color([0.2, 0.1, 0.3]) {\n                        translate([0, 0, -i*6 - 2]) rotate([0, 90, 0])\n                            scale([0.8, 0.8, 1]) cylinder(3, 1, 0.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs with clawed feet\n    module leg(side) {\n        translate([side*12, 0, -10]) rotate([side*15, 0, 0]) {\n            // Upper leg\n            cylinder(12, 3, 2.5);\n            \n            // Lower leg\n            translate([0, 0, -14]) rotate([30, 0, 0])\n                cylinder(10, 2.5, 2);\n            \n            // Foot\n            translate([0, 0, -26]) rotate([0, 0, 0]) {\n                scale([2, 1, 0.5]) sphere(3);\n                \n                // Claws\n                for(i = [-1, 0, 1]) {\n                    translate([i*2, 0, -2]) rotate([0, 90, 0])\n                        scale([0.4, 0.4, 1]) cylinder(3, 1.5, 0.8);\n                }\n            }\n        }\n    }\n    \n    // Serrated back ridge\n    module back_ridge() {\n        for(i = [0:8]) {\n            translate([0, 0, 15 - i*3]) rotate([0, 90, 0])\n                scale([0.6, 0.6, 1]) cylinder(4, 2, 0.5);\n        }\n    }\n}\n\n// Assemble the creature\nunion() {\n    torso();\n    neck_and_head();\n    wing();\n    mirror([1, 0, 0]) wing();\n    tail();\n    \n    // Legs\n    for(side = [-1, 1]) {\n        leg(side);\n    }\n    \n    // Back ridge\n    back_ridge();\n}",
    "renders": true
  },
  {
    "mythical_creature": "venomcoil",
    "openscad_code": "// Venomcoil - a serpentine dragon with venomous spines and coiled posture\n// Overall dimensions: ~60mm diameter coil, 20mm thick body\n\n// Base color scheme\ncolor(\"darkolivegreen\") {\n    union() {\n        // Main coiled body - 3 loops\n        for (i = [0:120:360]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, i/12]) {\n                    scale([1, 1, 0.8]) sphere(d = 15, $fn = 16);\n                }\n            }\n        }\n        \n        // Head emerging from coil\n        translate([25, 0, 10]) {\n            rotate([0, -30, 0]) {\n                // Head structure\n                union() {\n                    // Snout\n                    cube([12, 8, 6], center = true);\n                    \n                    // Top jaw\n                    translate([2, 0, 4]) {\n                        cube([10, 6, 4], center = true);\n                    }\n                    \n                    // Horns\n                    for (angle = [45, 135]) {\n                        rotate([0, 0, angle]) {\n                            translate([0, 7, 7]) {\n                                rotate([angle - 90, 0, 0]) {\n                                    cylinder(h = 8, d1 = 3, d2 = 1, $fn = 8);\n                                }\n                            }\n                        }\n                    }\n                    \n                    // Eyes\n                    translate([6, 3, 2]) {\n                        color(\"red\") sphere(d = 2, $fn = 8);\n                    }\n                    translate([6, -3, 2]) {\n                        color(\"red\") sphere(d = 2, $fn = 8);\n                    }\n                }\n            }\n        }\n        \n        // Venomous spine rows along back\n        module spine() {\n            color(\"forestgreen\") {\n                cylinder(h = 5, d1 = 2, d2 = 0.5, $fn = 6);\n            }\n        }\n        \n        for (loop = [0:120:240]) {\n            for (spine = [0:20:80]) {\n                rotate([0, 0, loop + spine]) {\n                    translate([7.5, 0, loop/12 + 7]) {\n                        rotate([90, 0, 0]) {\n                            spine();\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Wing membranes\n        color(\"darkgreen\") {\n            translate([-5, 0, 15]) {\n                rotate([0, 0, -30]) {\n                    difference() {\n                        // Main wing shape\n                        translate([0, 0, 0]) {\n                            rotate([90, 0, 0]) {\n                                scale([1, 0.6, 1]) {\n                                    cylinder(h = 1, d = 25, center = true, $fn = 3);\n                                }\n                            }\n                        }\n                        \n                        // Wing cutout\n                        scale([0.8, 0.8, 2]) {\n                            cylinder(h = 1, d = 15, center = true, $fn = 3);\n                        }\n                    }\n                }\n            }\n            \n            translate([-5, 0, 15]) {\n                rotate([0, 0, 210]) {\n                    mirror([1, 0, 0]) {\n                        difference() {\n                            translate([0, 0, 0]) {\n                                rotate([90, 0, 0]) {\n                                    scale([1, 0.6, 1]) {\n                                        cylinder(h = 1, d = 25, center = true, $fn = 3);\n                                    }\n                                }\n                            }\n                            \n                            scale([0.8, 0.8, 2]) {\n                                cylinder(h = 1, d = 15, center = true, $fn = 3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Tail tip\n        translate([-20, 0, 0]) {\n            rotate([0, 0, 180]) {\n                scale([1, 1, 0.5]) {\n                    sphere(d = 8, $fn = 16);\n                }\n            }\n        }\n        \n        // Ventral scales pattern\n        color(\"black\") {\n            for (loop = [0:120:240]) {\n                for (scale = [0:15:75]) {\n                    rotate([0, 0, loop + scale]) {\n                        translate([7.5, 0, loop/12 - 5]) {\n                            scale([0.3, 1, 0.1]) {\n                                sphere(d = 8, $fn = 6);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "gloomserpent",
    "openscad_code": "// Gloomserpent - A shadowy winged serpent from the void\n// Scaled for 3D printing: ~80mm wingspan, 60mm length\n\n// Main creature assembly\nmodule gloomserpent() {\n    color([0.1, 0.05, 0.2])  // Deep purple-black shadow color\n    \n    union() {\n        // Serpent body\n        translate([0, 0, 5]) body();\n        \n        // Head with horns\n        translate([-25, 0, 10]) head();\n        \n        // Wings\n        translate([-10, 0, 15]) wings();\n        \n        // Tail segments\n        translate([20, 0, 5]) tail();\n        \n        // Void orbs along spine\n        spine_orbs();\n    }\n}\n\n// Sinuous serpentine body\nmodule body() {\n    // Main body segments with overlapping scales\n    for(i = [0:5]) {\n        translate([i*4, 0, sin(i*30)*2]) \n            rotate([0, 0, i*15])\n            scale([1, 0.8, 0.8])\n            sphere(d=12);\n    }\n    \n    // Scale details\n    color([0.2, 0.1, 0.3])\n    for(i = [0:20]) {\n        rotate([0, 0, i*18])\n        translate([i*1.2, 0, 6]) \n            scale([2, 1, 0.5])\n            sphere(d=3);\n    }\n}\n\n// Horned head with void eyes\nmodule head() {\n    union() {\n        // Main head shape\n        scale([1.5, 1, 1])\n        sphere(d=15);\n        \n        // Curved horns\n        color([0.3, 0.15, 0.4])\n        translate([0, 7, 5])\n            rotate([30, 0, 30])\n            cylinder(h=12, d1=3, d2=1);\n            \n        translate([0, -7, 5])\n            rotate([30, 0, -30])\n            cylinder(h=12, d1=3, d2=1);\n        \n        // Void eyes - glowing orbs\n        color([0.5, 0, 0.8])\n        translate([-5, 4, 3])\n            sphere(d=3);\n        translate([-5, -4, 3])\n            sphere(d=3);\n            \n        // Snout\n        translate([-8, 0, 0])\n            scale([1.2, 0.8, 0.6])\n            sphere(d=8);\n    }\n}\n\n// Membranous wings with void patterns\nmodule wings() {\n    color([0.15, 0.08, 0.25])\n    union() {\n        // Left wing\n        translate([0, 15, 0])\n            rotate([0, 0, 20])\n            scale([1, 2, 0.1])\n            sphere(d=25);\n        \n        // Right wing\n        translate([0, -15, 0])\n            rotate([0, 0, -20])\n            scale([1, 2, 0.1])\n            sphere(d=25);\n            \n        // Wing membrane void tears\n        color([0.05, 0.02, 0.1])\n        for(i = [1:3]) {\n            translate([i*3, 15+i*2, -1])\n                rotate([0, 0, 20])\n                scale([0.3, 0.5, 1])\n                cylinder(h=2, d=5);\n            translate([i*3, -15-i*2, -1])\n                rotate([0, 0, -20])\n                scale([0.3, 0.5, 1])\n                cylinder(h=2, d=5);\n        }\n    }\n}\n\n// Segmented tail tapering to void point\nmodule tail() {\n    color([0.12, 0.06, 0.22])\n    union() {\n        for(i = [0:8]) {\n            translate([i*5, 0, -i*0.5])\n                scale([1-i*0.08, 1-i*0.08, 1-i*0.08])\n                sphere(d=10-i*0.8);\n        }\n        \n        // Tail tip void crystal\n        color([0.3, 0.1, 0.5])\n        translate([45, 0, -5])\n            scale([0.5, 0.5, 2])\n            cylinder(h=8, d=4);\n    }\n}\n\n// Void orbs along spine\nmodule spine_orbs() {\n    color([0.4, 0.2, 0.6])\n    for(i = [0:10]) {\n        translate([-20+i*4, 0, 10+abs(sin(i*45))*3])\n            sphere(d=2+sin(i*30));\n    }\n}\n\n// Render the creature\ngloomserpent();",
    "renders": true
  },
  {
    "mythical_creature": "thunderdrake",
    "openscad_code": "// Thunderdrake - Medium Complexity Realistic Style\n// Size: ~80mm wingspan, 3D printable with 1mm walls\n\n// Color definitions\nbody_color = [0.1, 0.2, 0.4];  // Deep blue scales\nwing_color = [0.2, 0.3, 0.6];  // Lighter blue membranes\nhorn_color = [0.8, 0.8, 0.9];  // Ivory horns\nlightning_color = [1, 1, 0];   // Yellow lightning\n\n// Main body module\nmodule thunderdrake_body() {\n    // Torso - elongated sphere\n    color(body_color)\n    scale([1.5, 1, 1.2])\n    sphere(8);\n    \n    // Neck\n    translate([0, 0, 12])\n    rotate([0, 15, 0])\n    scale([0.7, 0.7, 1.5])\n    cylinder(12, 6, 4);\n    \n    // Head\n    translate([0, 0, 28])\n    scale([1.2, 0.8, 1.1])\n    sphere(5);\n}\n\n// Snout module\nmodule snout() {\n    color(body_color)\n    translate([0, 0, 32])\n    rotate([0, -10, 0])\n    scale([1.5, 0.6, 0.7])\n    cylinder(8, 4, 2);\n}\n\n// Horns module\nmodule horns() {\n    color(horn_color)\n    // Left horn\n    translate([-3, 0, 30])\n    rotate([0, -20, -30])\n    scale([0.3, 0.3, 1])\n    cylinder(6, 2, 0.5);\n    \n    // Right horn\n    translate([3, 0, 30])\n    rotate([0, -20, 30])\n    scale([0.3, 0.3, 1])\n    cylinder(6, 2, 0.5);\n}\n\n// Wings module\nmodule wings() {\n    // Left wing\n    color(wing_color)\n    translate([-12, 0, 10])\n    rotate([0, 0, -20])\n    scale([1, 0.1, 1.5])\n    difference() {\n        cube([20, 2, 25]);\n        // Wing membrane cutouts\n        for(i = [1:3]) {\n            translate([i*5, -1, i*5])\n            rotate([0, 0, -10])\n            cube([3, 3, 8]);\n        }\n    }\n    \n    // Right wing\n    mirror([1, 0, 0])\n    translate([-12, 0, 10])\n    rotate([0, 0, -20])\n    scale([1, 0.1, 1.5])\n    difference() {\n        cube([20, 2, 25]);\n        for(i = [1:3]) {\n            translate([i*5, -1, i*5])\n            rotate([0, 0, -10])\n            cube([3, 3, 8]);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(body_color)\n    translate([0, 0, -12])\n    rotate([0, -30, 0])\n    scale([0.8, 0.8, 3])\n    cylinder(20, 5, 1);\n    \n    // Tail spikes\n    for(i = [1:4]) {\n        color(horn_color)\n        translate([0, 0, -15 - i*4])\n        rotate([0, 15, 0])\n        scale([0.2, 0.2, 1])\n        cylinder(3, 1, 0.5);\n    }\n}\n\n// Legs module\nmodule legs() {\n    color(body_color)\n    // Front left leg\n    translate([-4, 0, 5])\n    rotate([0, 45, 0])\n    scale([0.4, 0.4, 1])\n    cylinder(10, 3, 2);\n    \n    // Front right leg\n    translate([4, 0, 5])\n    rotate([0, 45, 0])\n    scale([0.4, 0.4, 1])\n    cylinder(10, 3, 2);\n    \n    // Back left leg\n    translate([-3, 0, -5])\n    rotate([0, 45, 0])\n    scale([0.4, 0.4, 1.2])\n    cylinder(12, 3, 2);\n    \n    // Back right leg\n    translate([3, 0, -5])\n    rotate([0, 45, 0])\n    scale([0.4, 0.4, 1.2])\n    cylinder(12, 3, 2);\n}\n\n// Lightning bolts\nmodule lightning() {\n    color(lightning_color)\n    // Left wing lightning\n    translate([-15, 0, 15])\n    scale([0.5, 0.5, 0.5])\n    for(i = [0:2]) {\n        rotate([0, 0, i*120])\n        translate([i*2, 0, i*3])\n        cylinder(2, 0.5, 0.5);\n    }\n    \n    // Right wing lightning\n    mirror([1, 0, 0])\n    translate([-15, 0, 15])\n    scale([0.5, 0.5, 0.5])\n    for(i = [0:2]) {\n        rotate([0, 0, i*120])\n        translate([i*2, 0, i*3])\n        cylinder(2, 0.5, 0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    thunderdrake_body();\n    snout();\n    horns();\n    wings();\n    tail();\n    legs();\n    lightning();\n}\n\n// Base platform for printing\ntranslate([0, 0, -25])\ncolor([0.3, 0.3, 0.3])\ncube([40, 40, 1], center=true);",
    "renders": true
  },
  {
    "mythical_creature": "frostwyrm",
    "openscad_code": "// Frostwyrm - mythical ice dragon creature\n// Medium complexity realistic style model\n\n// Overall scale for 3D printing\nscale_factor = 0.8;\n\ncolor(\"LightBlue\") \nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    // Body segments\n    body();\n    \n    // Head with horns\n    translate([0, 35, 8]) head();\n    \n    // Tail segments\n    translate([0, -40, 0]) tail();\n    \n    // Wings\n    translate([15, 10, 8]) wing();\n    translate([-15, 10, 8]) mirror([1,0,0]) wing();\n    \n    // Legs\n    translate([8, 15, -5]) leg();\n    translate([-8, 15, -5]) mirror([1,0,0]) leg();\n    translate([5, -15, -5]) leg();\n    translate([-5, -15, -5]) mirror([1,0,0]) leg();\n}\n\nmodule body() {\n    // Main body - segmented ice armor\n    for(i = [0:3]) {\n        translate([0, i*8-8, 0]) {\n            difference() {\n                sphere(d = 16 - i*2);\n                // Ice crystal texture\n                for(j = [0:5]) {\n                    rotate([0, 0, j*60]) \n                    translate([0, 0, -1]) \n                    cube([2, 4, 3], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule head() {\n    color(\"LightCyan\") {\n        // Skull base\n        difference() {\n            sphere(d = 12);\n            // Eye sockets\n            translate([4, 3, 2]) sphere(d = 3);\n            translate([-4, 3, 2]) sphere(d = 3);\n            // Mouth opening\n            translate([0, 4, -2]) cube([6, 4, 3], center=true);\n        }\n        \n        // Snout\n        translate([0, 6, 0]) \n        scale([0.8, 1.2, 0.8]) \n        sphere(d = 8);\n        \n        // Horns - ice crystals\n        color(\"AliceBlue\") {\n            translate([3, -2, 6]) horn();\n            translate([-3, -2, 6]) mirror([1,0,0]) horn();\n            translate([2, 0, 8]) horn();\n            translate([-2, 0, 8]) mirror([1,0,0]) horn();\n        }\n    }\n}\n\nmodule horn() {\n    // Twisted ice horn\n    for(i = [0:4]) {\n        rotate([0, 0, i*20]) \n        translate([0, 0, i*2]) \n        scale([1-i*0.15, 1-i*0.15, 1]) \n        cylinder(d1 = 3-i*0.5, d2 = 2-i*0.4, h = 2);\n    }\n}\n\nmodule tail() {\n    // Segmented tail with ice spikes\n    for(i = [0:5]) {\n        translate([0, -i*5, -i]) {\n            scale([1-i*0.1, 1-i*0.1, 1-i*0.1]) {\n                sphere(d = 10-i);\n                \n                // Ice spikes along tail\n                color(\"AliceBlue\") {\n                    rotate([0, 0, 45]) \n                    translate([5, 0, 0]) \n                    cylinder(d1 = 2, d2 = 0.5, h = 4);\n                    \n                    rotate([0, 0, -45]) \n                    translate([5, 0, 0]) \n                    cylinder(d1 = 2, d2 = 0.5, h = 4);\n                }\n            }\n        }\n    }\n}\n\nmodule wing() {\n    color(\"LightSteelBlue\") {\n        // Wing membrane\n        difference() {\n            union() {\n                // Main wing shape\n                translate([0, 0, 2]) \n                scale([2, 3, 0.5]) \n                sphere(d = 12);\n                \n                // Wing bones\n                for(i = [0:3]) {\n                    rotate([0, 0, i*15-15]) \n                    translate([8, 0, 0]) \n                    scale([1, 0.3, 0.3]) \n                    sphere(d = 8);\n                }\n            }\n            \n            // Membrane holes for printing\n            for(i = [0:2]) {\n                translate([5, i*4-4, 1]) \n                sphere(d = 2);\n            }\n        }\n        \n        // Ice crystals on wing edges\n        for(i = [0:4]) {\n            rotate([0, 0, i*20-40]) \n            translate([12, i*2-4, 2]) \n            cylinder(d1 = 1.5, d2 = 0.5, h = 3);\n        }\n    }\n}\n\nmodule leg() {\n    color(\"LightBlue\") {\n        // Upper leg\n        cylinder(h = 8, d = 4);\n        \n        // Lower leg\n        translate([0, 0, -6]) \n        cylinder(h = 6, d1 = 4, d2 = 3);\n        \n        // Foot with claws\n        translate([1, 0, -9]) \n        union() {\n            // Main foot\n            cube([4, 6, 2], center=true);\n            \n            // Claws\n            for(i = [-1:1]) {\n                translate([i*1.5, 3, -1]) \n                rotate([30, 0, 0]) \n                cylinder(h = 3, d1 = 1.5, d2 = 0.5);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "emberfang",
    "openscad_code": "// Emberfang - A mythical fire wolf with glowing ember patterns\n// Wings, horns, and fiery tail made for 3D printing\n\nscale_factor = 0.8;\n$fn = 30;\n\n// Main colors\ncolor_body = [0.6, 0.2, 0.1];      // Dark red-brown\ncolor_ember = [1, 0.3, 0];        // Bright orange\ncolor_glow = [1, 0.6, 0.2];       // Yellow glow\n\nmodule emberfang() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Main body\n        body();\n        \n        // Head with horns\n        translate([0, 30, 15]) head();\n        \n        // Wings\n        translate([-12, 10, 20]) rotate([0, 0, 20]) wing_left();\n        translate([12, 10, 20]) mirror([1, 0, 0]) wing_left();\n        \n        // Tail\n        translate([0, -30, 8]) tail();\n        \n        // Legs\n        translate([-8, 15, 0]) leg();\n        translate([8, 15, 0]) leg();\n        translate([-8, -15, 0]) leg();\n        translate([8, -15, 0]) leg();\n    }\n}\n\nmodule body() {\n    color(color_body)\n    difference() {\n        // Main torso\n        hull() {\n            translate([0, 10, 10]) sphere(12);\n            translate([0, -10, 8]) sphere(10);\n            translate([0, -20, 6]) sphere(8);\n        }\n        \n        // Ember patterns carved into body\n        for(i = [1:3]) {\n            rotate([0, 0, i * 120]) \n            translate([8, 0, 8]) \n            scale([1, 2, 0.5]) \n            sphere(3);\n        }\n    }\n}\n\nmodule head() {\n    color(color_body)\n    union() {\n        // Snout\n        translate([0, 8, 0]) \n        scale([1, 1.5, 0.8]) \n        sphere(6);\n        \n        // Head base\n        sphere(8);\n        \n        // Horns\n        color(color_ember)\n        translate([-5, 0, 8]) rotate([30, 0, -30]) cylinder(8, 2, 0.5);\n        translate([5, 0, 8]) rotate([30, 0, 30]) cylinder(8, 2, 0.5);\n        \n        // Eyes (glowing)\n        color(color_glow)\n        translate([-4, 4, 3]) sphere(2);\n        translate([4, 4, 3]) sphere(2);\n    }\n}\n\nmodule wing_left() {\n    color([0.8, 0.2, 0.1])  // Slightly lighter red\n    difference() {\n        // Main wing shape\n        hull() {\n            translate([0, 0, 0]) sphere(3);\n            translate([-15, 5, 0]) sphere(2);\n            translate([-25, -5, 0]) sphere(2);\n            translate([-20, -15, 0]) sphere(2);\n            translate([-10, -10, 0]) sphere(2);\n        }\n        \n        // Wing membrane cutouts\n        for(i = [1:3]) {\n            translate([-i * 7, -i * 3, 0]) \n            rotate([0, 0, -20]) \n            scale([0.5, 2, 1]) \n            sphere(2);\n        }\n    }\n}\n\nmodule tail() {\n    color(color_body)\n    union() {\n        // Tail segments\n        translate([0, -5, 0]) sphere(6);\n        translate([0, -12, 0]) sphere(5);\n        translate([0, -18, 0]) sphere(4);\n        \n        // Fiery tip\n        color(color_ember)\n        translate([0, -25, 0]) \n        scale([1, 1.5, 1]) \n        sphere(5);\n        \n        // Ember particles\n        color(color_glow)\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) \n            translate([3, -20, 0]) \n            sphere(1);\n        }\n    }\n}\n\nmodule leg() {\n    color(color_body)\n    union() {\n        // Upper leg\n        cylinder(12, 4, 3);\n        \n        // Lower leg\n        translate([0, 0, -12]) rotate([15, 0, 0]) \n        cylinder(10, 3, 2);\n        \n        // Paw\n        translate([0, 0, -22]) \n        scale([1, 1.2, 0.8]) \n        sphere(3);\n    }\n}\n\n// Main model\ntranslate([0, 0, 10]) rotate([0, 0, 0]) emberfang();",
    "renders": true
  },
  {
    "mythical_creature": "obsidianwyrm",
    "openscad_code": "// Obsidianwyrm - Medium complexity realistic mythical creature\n// Features: dragon-like body, obsidian scales, wing membranes, horned head, spiked tail\n// Size: ~80mm long, wingspan ~60mm\n\n// Color definitions\ncolor_obsidian = [0.1, 0.1, 0.15];\ncolor_wing_membrane = [0.2, 0.15, 0.25];\ncolor_eyes = [0.8, 0.1, 0.1];\ncolor_spikes = [0.05, 0.05, 0.1];\n\n$fn = 32; // Smooth curves for realistic look\n\nmodule obsidianwyrm() {\n    // Main body\n    color(color_obsidian)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1.2, 0.6, 0.8])\n        sphere(12);\n        \n        // Abdomen\n        translate([-15, 0, 12])\n        scale([1, 0.5, 0.6])\n        sphere(10);\n        \n        // Neck\n        translate([15, 0, 18])\n        rotate([0, -20, 0])\n        scale([0.4, 0.4, 1.2])\n        cylinder(15, 5, 4);\n        \n        // Head\n        translate([25, 0, 28])\n        scale([1, 0.8, 0.8])\n        sphere(8);\n    }\n    \n    // Wings - positioned for minimal overhang\n    color(color_wing_membrane)\n    for (side = [-1, 1]) {\n        translate([0, side * 15, 20])\n        rotate([0, -30, side * 20])\n        wing(side);\n    }\n    \n    // Legs - simple positioned cylinders\n    color(color_obsidian)\n    for (side = [-1, 1]) {\n        // Front legs\n        translate([10, side * 8, 10])\n        rotate([0, 0, side * 10])\n        cylinder(15, 3, 2);\n        \n        // Back legs\n        translate([-10, side * 10, 8])\n        rotate([0, 0, side * -10])\n        cylinder(12, 3, 2);\n    }\n    \n    // Tail with spikes\n    tail();\n    \n    // Horns and spikes\n    color(color_spikes)\n    for (i = [0:2]) {\n        // Head horns\n        rotate([0, 0, i * 120])\n        translate([30, 0, 30])\n        rotate([0, 30, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(10, 2, 1);\n    }\n    \n    // Eyes\n    color(color_eyes)\n    for (side = [-1, 1]) {\n        translate([28, side * 4, 28])\n        sphere(1.5);\n    }\n}\n\nmodule wing(side) {\n    difference() {\n        // Main wing membrane\n        hull() {\n            translate([0, 0, 0])\n            sphere(2);\n            translate([25, 0, 5])\n            sphere(2);\n            translate([30, 0, 15])\n            sphere(1);\n            translate([5, 0, 20])\n            sphere(2);\n        }\n        \n        // Wing bones as cutouts\n        for (i = [1:3]) {\n            translate([i * 10, 0, i * 5])\n            rotate([0, 0, i * 10])\n            scale([0.5, 0.1, 4])\n            cube([8, 2, 1]);\n        }\n    }\n}\n\nmodule tail() {\n    color(color_obsidian)\n    union() {\n        // Tail segments\n        for (i = [1:5]) {\n            translate([-20 - i * 8, 0, 15 - i * 2])\n            rotate([0, 0, sin(i * 30) * 10])\n            scale([1 - i * 0.15, 1 - i * 0.15, 1 - i * 0.15])\n            sphere(8 - i);\n        }\n        \n        // Tail spikes\n        color(color_spikes)\n        for (i = [1:4]) {\n            translate([-25 - i * 8, 0, 15 - i * 2])\n            rotate([0, 0, i * 20])\n            scale([0.3, 0.3, 1])\n            cylinder(5, 1, 0.5);\n        }\n    }\n}\n\n// Scale the entire creature to 80mm length\nscale(0.8)\nobsidianwyrm();",
    "renders": true
  },
  {
    "mythical_creature": "mistwyrm",
    "openscad_code": "// Mistwyrm - Medium complexity, realistic style\n// A serpentine dragon that weaves through mist, with ethereal wings and flowing whiskers\n\nmodule body_segment(r, h, t=2) {\n    // Scaled cylindrical segment with taper\n    cylinder(r1=r, r2=r*0.9, h=h, $fn=32);\n}\n\nmodule mist_scales(base_r) {\n    // Overlapping scale pattern along body\n    for(i=[0:20:340]) {\n        rotate([0, 0, i]) \n        translate([base_r*0.9, 0, 0]) \n        rotate([90, 0, 0]) \n        scale([1, 0.7, 0.3]) \n        sphere(r=base_r*0.2, $fn=8);\n    }\n}\n\nmodule wing_segment(span, chord) {\n    // Membranous wing with subtle curve\n    difference() {\n        hull() {\n            translate([0, 0, 0]) sphere(r=1, $fn=8);\n            translate([span, chord*0.3, 0]) sphere(r=1, $fn=8);\n            translate([span*0.8, chord, 0]) sphere(r=1, $fn=8);\n            translate([span*0.2, chord*0.9, 0]) sphere(r=1, $fn=8);\n        }\n        \n        // Wing holes for ethereal effect\n        for(i=[span*0.2:span*0.2:span*0.8]) {\n            translate([i, chord*0.5, -1]) \n            scale([0.5, 0.3, 2]) \n            sphere(r=2, $fn=6);\n        }\n    }\n}\n\nmodule whisker(len, angle) {\n    // Flowing mystical whiskers\n    rotate([0, angle, 0]) {\n        color(\"silver\", 0.6)\n        cylinder(r1=0.5, r2=0.1, h=len, $fn=8);\n    }\n}\n\n// Main body construction\ncolor(\"darkslategray\")\nunion() {\n    // Head segment\n    translate([0, 0, 0]) {\n        color(\"darkslategray\")\n        sphere(r=8, $fn=32);\n        \n        // Snout\n        translate([8, 0, 0])\n        scale([1.5, 0.8, 0.8])\n        sphere(r=5, $fn=32);\n        \n        // Eyes - glowing orbs\n        translate([6, 5, 3])\n        color(\"cyan\", 0.8)\n        sphere(r=2, $fn=16);\n        \n        translate([6, -5, 3])\n        color(\"cyan\", 0.8)\n        sphere(r=2, $fn=16);\n        \n        // Horns\n        translate([0, 4, 7])\n        rotate([30, 0, 15])\n        cylinder(r1=2, r2=0.5, h=10, $fn=8);\n        \n        translate([0, -4, 7])\n        rotate([30, 0, -15])\n        cylinder(r1=2, r2=0.5, h=10, $fn=8);\n        \n        // Whiskers\n        for(a=[-30, 0, 30]) {\n            translate([4, 4, 0])\n            whisker(15, a);\n            \n            translate([4, -4, 0])\n            whisker(15, a);\n        }\n    }\n    \n    // Neck and body segments\n    for(i=[1:12]) {\n        translate([i*5, 0, -i*1.5]) {\n            body_segment(r=8-i*0.4, h=5);\n            mist_scales(8-i*0.4);\n        }\n    }\n    \n    // Tail segments\n    for(i=[13:20]) {\n        translate([i*5, 0, -20-(i-13)*2]) {\n            body_segment(r=8-i*0.6, h=4);\n            mist_scales(8-i*0.6);\n        }\n    }\n    \n    // Wings (upper pair)\n    translate([10, 0, 5]) {\n        rotate([0, 0, 45])\n        wing_segment(25, 20);\n    }\n    \n    translate([10, 0, 5]) {\n        rotate([0, 0, -45])\n        mirror([0, 1, 0])\n        wing_segment(25, 20);\n    }\n    \n    // Wings (lower pair)\n    translate([20, 0, -5]) {\n        rotate([0, 0, 30])\n        scale([0.8, 0.8, 1])\n        wing_segment(20, 15);\n    }\n    \n    translate([20, 0, -5]) {\n        rotate([0, 0, -30])\n        mirror([0, 1, 0])\n        scale([0.8, 0.8, 1])\n        wing_segment(20, 15);\n    }\n    \n    // Legs\n    translate([15, 6, -8]) {\n        color(\"darkslategray\")\n        cylinder(r=2, h=8, $fn=16);\n        translate([0, 0, -8])\n        sphere(r=2.5, $fn=16);\n    }\n    \n    translate([15, -6, -8]) {\n        color(\"darkslategray\")\n        cylinder(r=2, h=8, $fn=16);\n        translate([0, 0, -8])\n        sphere(r=2.5, $fn=16);\n    }\n    \n    // Mystical mist tendrils\n    for(i=[0:30:330]) {\n        color(\"lightblue\", 0.3)\n        translate([25*sin(i), 25*cos(i), -15])\n        scale([0.5, 0.5, 2])\n        sphere(r=3, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "ironscale",
    "openscad_code": "// Ironscale - A mythical dragon with iron-like scales\n// Size: ~80mm long, 50mm tall when printed\n\nscale_factor = 1; // Adjust for print size\n\n// Main colors\niron_color = [0.4, 0.4, 0.4];\nscale_color = [0.6, 0.6, 0.6];\neye_color = [1, 0, 0];\n\nmodule body() {\n    // Main torso\n    color(iron_color)\n    union() {\n        // Torso segment 1\n        translate([0, 0, 10])\n        scale([1.2, 0.8, 1])\n        sphere(15);\n        \n        // Torso segment 2\n        translate([-20, 0, 12])\n        scale([1.1, 0.7, 0.9])\n        sphere(12);\n        \n        // Torso segment 3\n        translate([-35, 0, 10])\n        scale([0.9, 0.6, 0.7])\n        sphere(10);\n    }\n}\n\nmodule head() {\n    color(iron_color)\n    union() {\n        // Main head\n        translate([15, 0, 25])\n        scale([1.5, 1, 1.2])\n        sphere(10);\n        \n        // Snout\n        translate([25, 0, 23])\n        scale([1, 0.6, 0.5])\n        sphere(8);\n        \n        // Horns\n        for(i = [-1, 1]) {\n            translate([10, i*8, 30])\n            rotate([0, 30, i*30])\n            cylinder(h=15, r1=4, r2=2);\n        }\n        \n        // Eyes\n        color(eye_color)\n        for(i = [-1, 1]) {\n            translate([20, i*5, 28])\n            sphere(3);\n        }\n    }\n}\n\nmodule wings() {\n    color(scale_color)\n    for(side = [-1, 1]) {\n        translate([0, side*20, 25])\n        rotate([0, 0, side*30])\n        union() {\n            // Upper wing membrane\n            translate([0, 0, 0])\n            rotate([30, 0, 0])\n            linear_extrude(height=2)\n            polygon(points=[[0,0], [20,30], [40,20], [35,0]]);\n            \n            // Lower wing membrane\n            translate([5, 0, -15])\n            rotate([10, 0, 0])\n            linear_extrude(height=2)\n            polygon(points=[[0,0], [15,20], [30,15], [25,0]]);\n            \n            // Wing bone structure\n            for(i = [0, 20, 35]) {\n                translate([i, 0, 0])\n                rotate([0, 0, -30])\n                cylinder(h=2, r1=2, r2=1);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    color(iron_color)\n    union() {\n        // Tail segments getting smaller\n        for(i = [0:5]) {\n            translate([-45 - i*8, 0, 10 - i*2])\n            scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.15])\n            sphere(8);\n        }\n        \n        // Tail spikes\n        for(i = [0:2]) {\n            translate([-55 - i*15, 0, 15 - i*3])\n            rotate([0, 0, 180])\n            cylinder(h=8, r1=3, r2=0);\n        }\n    }\n}\n\nmodule legs() {\n    color(iron_color)\n    for(side = [-1, 1]) {\n        // Front leg\n        translate([5, side*10, 5])\n    rotate([0, side*15, 0])\n    union() {\n            cylinder(h=15, r1=4, r2=3);\n            translate([0, 0, -12])\n            sphere(4);\n        }\n        \n        // Back leg\n        translate([-25, side*8, 3])\n    rotate([0, side*10, 0])\n    union() {\n            cylinder(h=18, r1=4, r2=3);\n            translate([0, 0, -15])\n            sphere(4);\n        }\n    }\n}\n\nmodule scales() {\n    color(scale_color)\n    // Body scales\n    for(i = [0:8]) {\n        for(j = [0:3]) {\n            translate([-35 + i*10, 0, 15 + j*5])\n            rotate([90, 0, 0])\n            scale([0.5, 0.5, 0.3])\n            cylinder(h=3, r1=3, r2=0);\n        }\n    }\n    \n    // Tail scales\n    for(i = [0:10]) {\n        translate([-45 - i*4, 0, 8 + sin(i*30)*2])\n        rotate([90, 0, 0])\n        scale([0.4, 0.4, 0.2])\n        cylinder(h=2, r1=2, r2=0);\n    }\n}\n\n// Assemble the creature\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    body();\n    head();\n    wings();\n    tail();\n    legs();\n    scales();\n}",
    "renders": true
  },
  {
    "mythical_creature": "goldwyrm",
    "openscad_code": "// Goldwyrm - a wingless dragon of immense wealth and power\n// Designed for 3D printing with no overhangs greater than 45 degrees\n// Overall size: ~80mm length\n\n// Color definitions\ngold = \"#FFD700\";\namber = \"#FFBF00\";\nruby = \"#E0115F\";\n\n// Main body module\nmodule goldwyrm_body() {\n    color(gold) {\n        // Torso - elongated egg shape\n        translate([0, 0, 15]) \n            scale([2, 1.2, 1.5]) \n                sphere(r=15, $fn=32);\n        \n        // Neck - tapered cylinder\n        translate([0, 0, 35])\n            rotate([0, -20, 0])\n                cylinder(h=20, r1=8, r2=12, $fn=16);\n        \n        // Head\n        translate([5, 0, 48])\n            rotate([0, -20, 0])\n                scale([1.3, 1, 1.2])\n                    sphere(r=10, $fn=32);\n    }\n}\n\n// Horns module\nmodule horns() {\n    color(amber) {\n        // Left horn\n        translate([-5, 8, 55])\n            rotate([0, -30, -25])\n                cylinder(h=15, r1=3, r2=1, $fn=8);\n        \n        // Right horn\n        translate([-5, -8, 55])\n            rotate([0, -30, 25])\n                cylinder(h=15, r1=3, r2=1, $fn=8);\n        \n        // Center horn\n        translate([5, 0, 58])\n            rotate([0, -15, 0])\n                cylinder(h=12, r1=4, r2=2, $fn=8);\n    }\n}\n\n// Leg modules\nmodule legs() {\n    color(gold) {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([15, side*12, 10])\n                rotate([0, 0, side*10])\n                    union() {\n                        // Upper leg\n                        cylinder(h=12, r=4, $fn=16);\n                        // Lower leg\n                        translate([0, 0, -12])\n                            rotate([15, 0, 0])\n                                cylinder(h=10, r=3, $fn=16);\n                        // Paw\n                        translate([0, 0, -23])\n                            sphere(r=4, $fn=16);\n                    }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([-15, side*10, 8])\n                rotate([0, 0, side*15])\n                    union() {\n                        // Upper leg\n                        cylinder(h=14, r=5, $fn=16);\n                        // Lower leg\n                        translate([0, 0, -14])\n                            rotate([20, 0, 0])\n                                cylinder(h=12, r=4, $fn=16);\n                        // Paw\n                        translate([0, 0, -27])\n                            sphere(r=5, $fn=16);\n                    }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(gold) {\n        union() {\n            // Main tail segments\n            for(i = [0:3]) {\n                translate([-20 - i*12, 0, 15 - i*3])\n                    rotate([0, 0, i*5])\n                        scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.15])\n                            sphere(r=12 - i*3, $fn=16);\n            }\n            \n            // Tail tip\n            translate([-55, 0, 5])\n                rotate([0, 0, 20])\n                    cone(h=8, r1=4, r2=0, $fn=16);\n        }\n    }\n}\n\n// Scale pattern module\nmodule scales() {\n    color(amber) {\n        // Back scales\n        for(i = [1:5]) {\n            translate([-10 + i*5, 0, 25 + i*2])\n                rotate([0, 0, 0])\n                    scale([0.8, 0.3, 0.5])\n                        sphere(r=3, $fn=6);\n        }\n        \n        // Side scales\n        for(y = [-1, 1]) {\n            for(i = [0:6]) {\n                for(j = [0:2]) {\n                    translate([20 - i*8, y*12, 12 + j*5])\n                        rotate([0, y*30, 0])\n                            scale([0.5, 0.2, 0.3])\n                                sphere(r=2, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Eye details\nmodule eyes() {\n    color(ruby) {\n        for(side = [-1, 1]) {\n            translate([12, side*5, 50])\n                sphere(r=2, $fn=16);\n        }\n    }\n}\n\n// Nostrils\nmodule nostrils() {\n    color(ruby) {\n        for(side = [-1, 1]) {\n            translate([10, side*3, 45])\n                cylinder(h=2, r=1, $fn=8);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    goldwyrm_body();\n    horns();\n    legs();\n    tail();\n    scales();\n    eyes();\n    nostrils();\n}",
    "renders": true
  },
  {
    "mythical_creature": "silverwyrm",
    "openscad_code": "// Silverwyrm - Medium complexity realistic mythical dragon\n// Scaled for 3D printing, roughly 80mm long\n\n// Overall creature dimensions\nsilverwyrm_length = 80;\nsilverwyrm_height = 25;\n\n// Create the complete silverwyrm\nmodule silverwyrm() {\n    // Main body - elongated silver serpent\n    color(\"silver\") {\n        // Head and neck\n        union() {\n            // Head\n            translate([0, 0, 15]) \n                scale([1.2, 0.8, 1]) \n                    sphere(8, $fn=32);\n            \n            // Snout\n            translate([8, 0, 15]) \n                scale([1.5, 0.6, 0.6]) \n                    sphere(5, $fn=16);\n            \n            // Neck\n            translate([-5, 0, 12]) \n                scale([0.8, 0.6, 1.2]) \n                    cylinder(h=15, r1=6, r2=4, $fn=16);\n        }\n        \n        // Body segments\n        for(i = [1:5]) {\n            translate([-20 - i*10, 0, 15 - i*1.5]) \n                scale([1 - i*0.08, 0.7 - i*0.05, 0.9 - i*0.03]) \n                    sphere(7 - i*0.5, $fn=24);\n        }\n        \n        // Tail\n        translate([-70, 0, 5]) \n            scale([0.3, 0.3, 1]) \n                cylinder(h=20, r1=4, r2=0.5, $fn=8);\n    }\n    \n    // Wings - membrane structure\n    color(\"lightgray\") {\n        // Left wing\n        translate([-30, 0, 25]) \n            rotate([0, 0, -30]) {\n                // Wing arm\n                cylinder(h=25, r1=2, r2=1, $fn=8);\n                \n                // Wing membrane\n                translate([12.5, 0, 0]) \n                    rotate([90, 0, 0]) \n                        scale([1, 0.7, 0.1]) \n                            cylinder(h=30, r1=0.5, r2=15, $fn=3);\n            }\n        \n        // Right wing (mirrored)\n        mirror([0, 1, 0]) \n            translate([-30, 0, 25]) \n                rotate([0, 0, -30]) {\n                    cylinder(h=25, r1=2, r2=1, $fn=8);\n                    translate([12.5, 0, 0]) \n                        rotate([90, 0, 0]) \n                            scale([1, 0.7, 0.1]) \n                                cylinder(h=30, r1=0.5, r2=15, $fn=3);\n                }\n    }\n    \n    // Horns - curved silver\n    color(\"gainsboro\") {\n        // Left horn\n        translate([3, -3, 23]) \n            rotate([0, -30, -20]) \n                cylinder(h=12, r1=1.5, r2=0.5, $fn=8);\n        \n        // Right horn\n        translate([3, 3, 23]) \n            rotate([0, -30, 20]) \n                cylinder(h=12, r1=1.5, r2=0.5, $fn=8);\n    }\n    \n    // Legs - four clawed limbs\n    color(\"silver\") {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([-15, side*8, 8]) {\n                // Upper leg\n                rotate([90, 0, 0]) \n                    cylinder(h=8, r=2, $fn=8);\n                \n                // Lower leg\n                translate([0, 0, -8]) \n                    rotate([45, 0, 0]) \n                        cylinder(h=6, r=1.5, $fn=8);\n                \n                // Foot with claws\n                translate([0, 0, -14]) {\n                    // Palm\n                    sphere(2, $fn=8);\n                    \n                    // Claws\n                    for(claw = [-1, 0, 1]) {\n                        translate([claw*1.5, -2, -1]) \n                            rotate([30, 0, 0]) \n                                cylinder(h=3, r1=0.8, r2=0.3, $fn=6);\n                    }\n                }\n            }\n        }\n        \n        // Rear legs\n        for(side = [-1, 1]) {\n            translate([-45, side*6, 5]) {\n                // Upper leg\n                rotate([90, 0, 0]) \n                    cylinder(h=7, r=1.8, $fn=8);\n                \n                // Lower leg\n                translate([0, 0, -7]) \n                    rotate([60, 0, 0]) \n                        cylinder(h=5, r=1.3, $fn=8);\n                \n                // Foot\n                translate([0, 0, -12]) {\n                    sphere(1.8, $fn=8);\n                    for(claw = [-1, 0, 1]) {\n                        translate([claw*1.3, -1.8, -0.8]) \n                            rotate([30, 0, 0]) \n                                cylinder(h=2.5, r1=0.7, r2=0.2, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Scales - overlapping plates\n    color(\"lightsteelblue\") {\n        for(seg = [0:4]) {\n            for(scale = [0:5]) {\n                angle = scale * 60;\n                radius = 6 - seg;\n                translate([-25 - seg*10, \n                          cos(angle)*radius, \n                          15 - seg*1.5 + sin(angle)*radius]) \n                    rotate([90, 0, angle]) \n                        scale([1, 0.5, 0.2]) \n                            sphere(1.2, $fn=6);\n            }\n        }\n    }\n    \n    // Eyes - glowing magical orbs\n    color(\"cyan\") {\n        translate([5, -2.5, 17]) \n            sphere(1.2, $fn=12);\n        translate([5, 2.5, 17]) \n            sphere(1.2, $fn=12);\n    }\n}\n\n// Generate the silverwyrm\nsilverwyrm();",
    "renders": true
  },
  {
    "mythical_creature": "copperback",
    "openscad_code": "// Copperback Dragon - Medium complexity realistic style\n// A serpentine dragon with metallic copper scales and mystical features\n\n// Color definitions\ncolor_copper = [184/255, 115/255, 51/255];\ncolor_gold = [212/255, 175/255, 55/255];\ncolor_emerald = [80/255, 200/255, 120/255];\n\n// Main body module\nmodule copperback_body() {\n    color(color_copper) {\n        // Main torso segment\n        union() {\n            // Central body\n            translate([0, 0, 10]) \n                scale([1, 0.6, 0.4]) \n                sphere(15);\n            \n            // Neck segment\n            translate([0, 15, 25]) \n                rotate([30, 0, 0]) \n                scale([0.5, 0.5, 1.2]) \n                cylinder(20, 8, 6);\n            \n            // Tail segments\n            for(i = [0:3]) {\n                translate([0, -15 - i*12, 8 - i*3]) \n                    rotate([i*-15, 0, 0]) \n                    scale([1 - i*0.15, 0.7 - i*0.1, 0.7 - i*0.1]) \n                    sphere(12 - i*2);\n            }\n        }\n    }\n}\n\n// Head module\nmodule copperback_head() {\n    color(color_copper) {\n        union() {\n            // Main head shape\n            translate([0, 28, 35]) \n                rotate([45, 0, 0]) \n                scale([0.8, 0.6, 1.2]) \n                sphere(12);\n            \n            // Snout\n            translate([0, 38, 38]) \n                scale([0.4, 0.4, 0.8]) \n                cylinder(15, 6, 4);\n            \n            // Horns\n            for(side = [-1, 1]) {\n                translate([side*8, 25, 42]) \n                    rotate([0, side*20, 0]) \n                    scale([0.3, 0.3, 1]) \n                    cylinder(12, 4, 1);\n                \n                translate([side*6, 22, 40]) \n                    rotate([0, side*30, 0]) \n                    scale([0.2, 0.2, 0.8]) \n                    cylinder(8, 3, 1);\n            }\n        }\n    }\n}\n\n// Wing module\nmodule copperback_wing() {\n    color(color_copper) {\n        translate([0, 0, 20]) {\n            for(side = [-1, 1]) {\n                // Main wing structure\n                translate([side*20, -5, 15]) \n                    rotate([0, side*30, 0]) {\n                    // Wing arm\n                    cylinder(3, 25, 2);\n                    \n                    // Wing membrane supports\n                    for(i = [0:2]) {\n                        translate([25 - i*8, 0, 0]) \n                            rotate([0, 0, 45 - i*20]) \n                            scale([0.3, 0.3, 1]) \n                            cylinder(15 - i*4, 2, 1);\n                    }\n                    \n                    // Wing membrane (simplified)\n                    hull() {\n                        translate([0, 0, 0]) sphere(2);\n                        translate([20, 0, 15]) sphere(2);\n                        translate([10, 0, -10]) sphere(2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Scale details\nmodule copperback_scales() {\n    color(color_copper) {\n        // Scales along spine\n        for(i = [0:8]) {\n            translate([0, 10 - i*5, 15 + sin(i*30)*2]) \n                scale([0.3, 0.3, 0.5]) \n                rotate([0, 0, i*15]) \n                cube([8, 3, 5], center=true);\n        }\n        \n        // Side scales\n        for(side = [-1, 1]) {\n            for(i = [0:4]) {\n                for(j = [0:3]) {\n                    translate([side*12, 5 - i*6, 8 - j*3]) \n                        scale([0.4, 0.4, 0.3]) \n                        rotate([0, 0, side*30]) \n                        sphere(3);\n                }\n            }\n        }\n    }\n}\n\n// Mystical features\nmodule mystical_features() {\n    // Emerald eye\n    color(color_emerald) {\n        for(side = [-1, 1]) {\n            translate([side*5, 38, 42]) \n                sphere(2);\n        }\n    }\n    \n    // Energy core\n    color(color_gold) {\n        translate([0, 0, 12]) \n            sphere(5);\n    }\n}\n\n// Assembly\nunion() {\n    copperback_body();\n    copperback_head();\n    copperback_wing();\n    copperback_scales();\n    mystical_features();\n}",
    "renders": true
  },
  {
    "mythical_creature": "jadehydra",
    "openscad_code": "// Jadehydra - multi-headed dragon guardian of jade\n// Scaled for 3D printing, 80mm total height\n\n// Main body colors\njade_green = [0.2,0.7,0.3];\njade_dark = [0.1,0.4,0.2];\ngold = [0.8,0.7,0.2];\n\n// Overall dimensions\nscale_factor = 0.8;  // 80mm tall\n\n// Main assembly\nscale([scale_factor,scale_factor,scale_factor]) {\n    union() {\n        // Central torso\n        color(jade_green)\n        translate([0,0,10])\n        scale([1.2,0.8,1.5])\n        sphere(10);\n\n        // Four serpentine necks/heads\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n            translate([15,0,25])\n            rotate([30,0,0])\n            scale([0.6,0.6,0.8])\n            head(i);\n        }\n\n        // Wing-like jade plates\n        for(side=[-1,1]) {\n            color(jade_dark)\n            translate([side*12,0,35])\n            rotate([0,side*20,0])\n            scale([side*1,1,1])\n            difference() {\n                // Main wing shape\n                cube([20,2,25]);\n                // Cut decorative slots\n                for(slot=[0:2]) {\n                    translate([slot*7+3, -1, 5])\n                    cube([2,4,15]);\n                }\n            }\n        }\n\n        // Tail\n        color(jade_green)\n        translate([0,0,-5])\n        for(seg=[0:4]) {\n            translate([0,0,-seg*6])\n            scale([1-seg*0.15, 1-seg*0.15, 1])\n            rotate([0,seg*10,0])\n            sphere(8-seg*1.5);\n        }\n\n        // Legs\n        for(side=[-1,1]) {\n            for(front=[-1,1]) {\n                color(jade_dark)\n                translate([side*8, front*6, 0])\n                rotate([0,front*15,0])\n                cylinder(h=15, r1=4, r2=3);\n                \n                // Feet\n                translate([side*9, front*7, -7])\n                scale([1.2,1.5,0.5])\n                sphere(3);\n            }\n        }\n\n        // Jade crystal growths\n        color(jade_green)\n        for(i=[0:7]) {\n            rotate([0,0,i*45])\n            translate([8,0,20+rands(0,10,1)[0]])\n            scale([0.3,0.3,1+rands(0,2,1)[0]])\n            cylinder(h=12, r1=2, r2=0.5);\n        }\n    }\n}\n\n// Head module with horns and details\nmodule head(index) {\n    union() {\n        // Neck\n        color(jade_dark)\n        cylinder(h=15, r1=3, r2=4);\n        \n        // Head\n        color(jade_green)\n        translate([0,0,15])\n        scale([1,0.8,1.2])\n        sphere(5);\n        \n        // Snout\n        color(jade_green)\n        translate([0,0,15+3])\n        scale([1.5,0.7,0.6])\n        sphere(3);\n        \n        // Horns\n        color(gold)\n        translate([-2,0,18])\n        rotate([0,-20,0])\n        cylinder(h=8, r1=1.5, r2=0.5);\n        \n        translate([2,0,18])\n        rotate([0,20,0])\n        cylinder(h=8, r1=1.5, r2=0.5);\n        \n        // Eyes\n        color([0,0,0])\n        translate([-2,2.5,16])\n        sphere(1);\n        translate([2,2.5,16])\n        sphere(1);\n        \n        // Jade scale patterns\n        color(jade_dark)\n        for(row=[0:2]) {\n            for(col=[0:1]) {\n                translate([col*2-1, 3, 13+row*2])\n                scale([0.8,0.3,0.8])\n                sphere(1.2);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "onyxserpent",
    "openscad_code": "// Onyxserpent - Mythical creature with serpentine body and crystal wings\n// Wings designed to print flat - no overhangs\n// Overall size: ~80mm long, ~60mm wingspan\n\n$fn = 32;\n\n// Main colors for the onyxserpent\ncolor([0.1, 0.1, 0.1]) { // Dark onyx black\n\n// Serpent body module\nmodule body_segment(radius, length, twist) {\n    rotate([0, 0, twist]) \n    cylinder(h=length, r1=radius*1.1, r2=radius, $fn=16);\n}\n\n// Crystal wing module - flat for printing\nmodule wing() {\n    union() {\n        // Main wing panel\n        linear_extrude(height=1.5) \n        polygon(points=[\n            [0,0], [25,0], [30,15], [20,30], [5,25], [-5,15]\n        ]);\n        \n        // Wing veins\n        for(i=[0:3]) {\n            rotate([0, 0, i*15-15]) \n            translate([5, 5, 0.75])\n            cube([15, 0.5, 1], center=true);\n        }\n    }\n}\n\n// Horn module\nmodule horn() {\n    union() {\n        cylinder(h=8, r1=2, r2=0.5);\n        translate([0, 0, 6])\n        sphere(1.5);\n    }\n}\n\n// Scale pattern module\nmodule scales(x, y, z) {\n    translate([x, y, z])\n    sphere(1.2, $fn=8);\n}\n\n// Main creature assembly\ntranslate([0, 0, 5]) {\n    // Head\n    rotate([0, 10, 0])\n    union() {\n        sphere(8);\n        \n        // Eyes\n        translate([6, 4, 3])\n        color([0.8, 0, 0])\n        sphere(1.5);\n        translate([6, -4, 3])\n        color([0.8, 0, 0])\n        sphere(1.5);\n        \n        // Horns\n        translate([0, 6, 8])\n        rotate([20, 0, 30])\n        horn();\n        translate([0, -6, 8])\n        rotate([20, 0, -30])\n        horn();\n        \n        // Snout ridge\n        translate([7, 0, 0])\n        cube([5, 2, 3], center=true);\n    }\n    \n    // Neck\n    translate([8, 0, -2])\n    body_segment(6, 10, 10);\n    \n    // Body segments\n    for(i=[0:4]) {\n        translate([18 + i*8, 0, -4 - i*2])\n        body_segment(5.5 - i*0.3, 8, 5 + i*3);\n    }\n    \n    // Tail\n    for(i=[0:6]) {\n        translate([55 + i*5, 0, -12 - i])\n        body_segment(3 - i*0.4, 6, 15 + i*5);\n    }\n    \n    // Wings - attached to upper body\n    translate([30, 0, -5])\n    rotate([0, 80, 0])\n    union() {\n        // Left wing\n        translate([0, 15, 0])\n        rotate([0, 0, 15])\n        wing();\n        \n        // Right wing\n        translate([0, -15, 0])\n        rotate([0, 0, -15])\n        mirror([0, 1, 0])\n        wing();\n    }\n    \n    // Scale details along body\n    for(i=[0:20]) {\n        angle = i * 20;\n        scales(\n            20 + cos(angle)*4,\n            sin(angle)*4,\n            -6 - i*2\n        );\n    }\n    \n    // Legs (simplified for printing)\n    translate([25, 5, -8])\n    rotate([0, 0, -15])\n    cylinder(h=8, r=2);\n    translate([25, -5, -8])\n    rotate([0, 0, 15])\n    cylinder(h=8, r=2);\n    \n    translate([40, 4, -10])\n    rotate([0, 0, -20])\n    cylinder(h=6, r=1.5);\n    translate([40, -4, -10])\n    rotate([0, 0, 20])\n    cylinder(h=6, r=1.5);\n}\n\n// Crystal accents on wings\ncolor([0.3, 0.3, 0.5]) {\n    translate([30, 15, 3])\n    sphere(2);\n    translate([30, -15, 3])\n    sphere(2);\n}",
    "renders": true
  },
  {
    "mythical_creature": "sapphirewyrm",
    "openscad_code": "// Sapphirewyrm - a blue crystalline dragon with sapphire-like features\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main body color - sapphire blue\ncolor([0.1, 0.3, 0.8])\n\n// Main assembly\nunion() {\n    // Body\n    translate([0, 0, 5])\n    scale([1.2, 0.8, 1])\n    sphere(15);\n\n    // Head\n    translate([0, 20, 15])\n    union() {\n        // Snout\n        translate([0, 8, 0])\n        scale([0.8, 1.5, 0.7])\n        sphere(8);\n        \n        // Main head\n        sphere(12);\n        \n        // Horns - crystalline spikes\n        for (i = [0:3]) {\n            rotate([0, -20 + i*15, i*90])\n            translate([0, 12, 5])\n            scale([0.3, 0.3, 1.5])\n            cylinder(h1 = 8, h2 = 0, r1 = 3, r2 = 0.5);\n        }\n    }\n\n    // Neck\n    translate([0, 10, 12])\n    rotate([20, 0, 0])\n    cylinder(h = 15, r1 = 8, r2 = 12);\n\n    // Wings - crystalline membranes\n    for (side = [-1, 1]) {\n        translate([side * 20, -5, 20])\n        rotate([0, 0, side * 30])\n        union() {\n            // Wing arm\n            rotate([0, -20, 0])\n            cylinder(h = 25, r1 = 3, r2 = 2);\n            \n            // Wing membrane segments\n            for (i = [0:5]) {\n                translate([side * i * 4, -i * 3, -i * 2])\n                rotate([0, 30 - i * 10, 0])\n                scale([0.8, 0.1, 1])\n                sphere(10 - i);\n            }\n        }\n    }\n\n    // Legs\n    for (side = [-1, 1]) {\n        translate([side * 12, -5, 0])\n        union() {\n            // Upper leg\n            rotate([30, 0, side * 15])\n            cylinder(h = 12, r1 = 4, r2 = 3);\n            \n            // Lower leg\n            translate([0, 0, 12])\n            rotate([45, 0, 0])\n            cylinder(h = 10, r1 = 3, r2 = 2);\n            \n            // Foot\n            translate([0, 0, 22])\n            scale([1.5, 0.8, 0.5])\n            sphere(4);\n        }\n        \n        // Rear legs\n        translate([side * 10, -20, 0])\n        union() {\n            rotate([30, 0, side * 20])\n            cylinder(h = 15, r1 = 4, r2 = 3);\n            \n            translate([0, 0, 15])\n            rotate([60, 0, 0])\n            cylinder(h = 12, r1 = 3, r2 = 2);\n            \n            translate([0, 0, 27])\n            scale([1.8, 1, 0.6])\n            sphere(4);\n        }\n    }\n\n    // Tail\n    for (i = [0:8]) {\n        translate([0, -20 - i * 6, 15 - i * 2])\n        scale([1 - i * 0.08, 1 - i * 0.06, 1 - i * 0.08])\n        sphere(10 - i);\n    }\n\n    // Sapphire crystals on body\n    color([0.2, 0.4, 0.9, 0.8])\n    for (pos = [[10, 5, 15], [-10, 5, 15], [0, 0, 20], [0, -10, 18]]) {\n        translate(pos)\n        scale([1.2, 1, 0.8])\n        rotate([45, 30, 0])\n        cylinder(h = 5, r1 = 3, r2 = 0);\n    }\n\n    // Eye details\n    color([0.9, 0.9, 1])\n    for (side = [-1, 1]) {\n        translate([side * 5, 25, 18])\n        sphere(2);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "rubywyrm",
    "openscad_code": "// Rubywyrm - Medium complexity realistic mythical dragon\n// Wings folded, coiled pose for 3D printing without supports\n\n$fn = 36;  // Smooth curves for realism\n\n// Main body assembly\nmodule rubywyrm() {\n    color(\"firebrick\") {\n        union() {\n            // Central body coil\n            body_coil();\n            \n            // Head with horns\n            translate([0, 30, 25]) rotate([0, 0, 45]) head();\n            \n            // Wings folded against body\n            translate([-15, 10, 15]) rotate([0, 0, -30]) wing_left();\n            translate([15, 10, 15]) mirror([1,0,0]) wing_left();\n            \n            // Tail wrapping around\n            tail();\n            \n            // Legs tucked under body\n            legs();\n            \n            // Ruby gem embedded in chest\n            translate([0, 5, 18]) ruby_gem();\n        }\n    }\n}\n\n// Coiled serpentine body\nmodule body_coil() {\n    // Main torso segment\n    translate([0, 0, 12]) scale([1.2, 1, 1.3]) sphere(12);\n    \n    // Body segments forming coil\n    for(i = [0:30:330]) {\n        rotate([0, 0, i]) \n        translate([20*sin(i/3), 20*cos(i/3), 12 + 3*sin(i*2)]) \n        scale([0.9, 0.9, 1]) sphere(10 - i/40);\n    }\n}\n\n// Detailed dragon head\nmodule head() {\n    union() {\n        // Snout\n        translate([0, 12, 0]) scale([0.8, 1.5, 0.7]) sphere(6);\n        \n        // Main head\n        sphere(8);\n        \n        // Horns - two pairs\n        translate([0, 8, 6]) rotate([15, 0, 0]) cylinder(10, 2, 0.5);\n        translate([4, 8, 5]) rotate([25, 0, -20]) cylinder(8, 1.5, 0.5);\n        translate([-4, 8, 5]) rotate([25, 0, 20]) cylinder(8, 1.5, 0.5);\n        \n        // Eyes\n        translate([3, 6, 2]) color(\"gold\") sphere(1.5);\n        translate([-3, 6, 2]) color(\"gold\") sphere(1.5);\n        \n        // Nostrils\n        translate([2, 10, -1]) rotate([45, 0, 0]) cylinder(2, 1, 0.5);\n        translate([-2, 10, -1]) rotate([45, 0, 0]) cylinder(2, 1, 0.5);\n    }\n}\n\n// Folded wing design for supportless printing\nmodule wing_left() {\n    difference() {\n        // Main wing membrane\n        translate([0, 0, 0]) \n        rotate([0, 90, 0]) \n        scale([1, 2, 0.1]) \n        sphere(10);\n        \n        // Wing finger bones\n        for(i = [0:1:4]) {\n            rotate([0, 0, i*20 - 40]) \n            translate([0, 8, 0]) \n            scale([0.2, 1.5, 0.1]) \n            cube([8, 2, 2]);\n        }\n    }\n}\n\n// Serpentine tail\nmodule tail() {\n    for(i = [0:15:300]) {\n        rotate([0, 0, -i]) \n        translate([25 + i*0.2, -i*0.3, 8 - i*0.05]) \n        scale([1 - i/400, 1 - i/400, 1 - i/400]) \n        sphere(8 - i/15);\n    }\n}\n\n// Tucked legs\nmodule legs() {\n    // Front legs\n    translate([8, -5, 5]) leg();\n    translate([-8, -5, 5]) mirror([1,0,0]) leg();\n    \n    // Rear legs\n    translate([12, -15, 5]) scale(0.9) leg();\n    translate([-12, -15, 5]) mirror([1,0,0]) scale(0.9) leg();\n}\n\n// Individual leg design\nmodule leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 3]) rotate([0, 90, 45]) cylinder(6, 3, 2);\n        \n        // Lower leg\n        translate([0, 4, 0]) rotate([0, 90, 30]) cylinder(5, 2, 1.5);\n        \n        // Foot\n        translate([0, 8, -2]) rotate([0, 0, 0]) scale([1.5, 2, 0.8]) sphere(2);\n    }\n}\n\n// Magical ruby gem\nmodule ruby_gem() {\n    color(\"crimson\") {\n        // Main gem\n        translate([0, 0, 0]) sphere(3);\n        \n        // Facets\n        difference() {\n            sphere(3);\n            for(i = [0:60:300]) {\n                rotate([0, 0, i]) \n                translate([0, 2, 0]) \n                cube([4, 4, 6], center=true);\n            }\n        }\n    }\n}\n\n// Scale texture overlay\nmodule scales() {\n    for(i = [0:20:360]) {\n        for(j = [0:20:100]) {\n            rotate([0, 0, i]) \n            translate([j*0.3, 0, 12 + 3*sin(i+j)]) \n            scale([0.5, 0.3, 0.1]) \n            sphere(1);\n        }\n    }\n}\n\n// Assemble final model\nrotate([0, -20, 0]) rubywyrm();\n// Optional: Uncomment for scale texture (may increase print time)\n// scales();",
    "renders": true
  },
  {
    "mythical_creature": "emeralddrake",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// EmeraldDrake – medium-complexity, realistic style, 3D-printable\n// Overall length ≈ 90 mm, wingspan ≈ 80 mm\n\n// ---------- Color palette ----------\nemerald = [0.1, 0.75, 0.35];\ngold    = [0.85, 0.65, 0.15];\nobsidian= [0.05, 0.05, 0.05];\n\n// ---------- Main assembly ----------\nmodule emeralddrake() {\n    union() {\n        color(emerald) body();\n        color(emerald) head();\n        color(emerald) tail();\n        color(emerald) wings();\n        color(gold)    horns();\n        color(obsidian) eyes();\n        color(emerald) scales();\n    }\n}\n\n// ---------- Body ----------\nmodule body() {\n    // Central torso\n    translate([0,0,12])\n        scale([1,0.7,1.2])\n        sphere(12);\n\n    // Neck\n    translate([0,-15,22])\n        rotate([45,0,0])\n        cylinder(h=20, r1=6, r2=8, $fn=16);\n\n    // Hind legs\n    for(side=[-1,1])\n        translate([side*8,-8,5])\n            rotate([0,side*10,0])\n            leg();\n\n    // Front legs\n    for(side=[-1,1])\n        translate([side*7,-3,5])\n            rotate([0,side*10,0])\n            leg();\n}\n\n// ---------- Leg ----------\nmodule leg() {\n    union() {\n        // Thigh\n        translate([0,0,2])\n            rotate([90,0,0])\n            cylinder(h=10, r1=4, r2=3, $fn=8);\n\n        // Shin\n        translate([0,0,-7])\n            rotate([90,0,0])\n            cylinder(h=8, r1=3, r2=2.5, $fn=8);\n\n        // Foot\n        translate([0,0,-14])\n            rotate([90,0,0])\n            cylinder(h=4, r1=3, r2=4, $fn=8);\n    }\n}\n\n// ---------- Head ----------\nmodule head() {\n    translate([0,-28,28])\n        rotate([30,0,0])\n        difference() {\n            scale([1.2,1.4,1])\n            sphere(10);\n\n            // Snout narrowing\n            translate([0,-12,0])\n                scale([0.5,1,1])\n                cube(20, center=true);\n\n            // Nostrils\n            for(x=[-2,2])\n                translate([x,-14,0])\n                    rotate([90,0,0])\n                    cylinder(h=3, r=1, $fn=8);\n        }\n}\n\n// ---------- Horns ----------\nmodule horns() {\n    // Main curved horns\n    for(side=[-1,1])\n        translate([side*6,-25,35])\n            rotate([0,side*20,side*30])\n            scale([1,1,1.5])\n            difference() {\n                cylinder(h=12, r1=2, r2=0.5, $fn=8);\n                translate([0,0,-1])\n                    cylinder(h=14, r1=1.8, r2=0.4, $fn=8);\n            }\n}\n\n// ---------- Eyes ----------\nmodule eyes() {\n    for(side=[-1,1])\n        translate([side*4,-22,30])\n            sphere(1.5);\n}\n\n// ---------- Wings ----------\nmodule wings() {\n    for(side=[-1,1]) {\n        translate([side*12,0,25])\n            rotate([0,0,side*20])\n            rotate([0,90,0])\n            wing_arm(side);\n    }\n}\n\nmodule wing_arm(sign) {\n    // Arm\n    translate([0,0,0])\n        rotate([0,sign*20,0])\n        cylinder(h=20, r1=2, r2=1.5, $fn=8);\n\n    // Membrane segments (no overhangs)\n    for(i=[1:3]) {\n        hull() {\n            translate([0,0,i*5])\n                sphere(1.5);\n            translate([sign*15,0,i*5])\n                sphere(1);\n        }\n    }\n\n    // Connect membrane edges\n    hull() {\n        translate([0,0,5])\n            sphere(1.5);\n        translate([sign*15,0,15])\n            sphere(1);\n    }\n}\n\n// ---------- Tail ----------\nmodule tail() {\n    for(i=[0:4]) {\n        translate([0,10+i*8,12-i*2])\n            rotate([0,0,i*10])\n            scale([1-i*0.15,1-i*0.15,1-i*0.1])\n            sphere(8-i);\n    }\n}\n\n// ---------- Scales (decorative ridges) ----------\nmodule scales() {\n    for(i=[1:4]) {\n        for(side=[-1,1]) {\n            translate([side*5,2-i*5,14+i])\n                rotate([90,0,0])\n                cylinder(h=1.5, r1=2.5, r2=0, $fn=6);\n        }\n    }\n}\n\n// ---------- Render ----------\nemeralddrake();",
    "renders": true
  },
  {
    "mythical_creature": "diamondcoil",
    "openscad_code": "// Diamondcoil Mythical Serpent - Realistic Medium Complexity\n// A crystalline dragon-serpent with diamond scales and electric blue energy\n\n// Color definitions\ngem_blue = [0.3, 0.6, 1.0, 0.9];\ncrystal_white = [0.9, 0.95, 1.0, 0.8];\ndark_steel = [0.2, 0.25, 0.3, 1.0];\nenergy_blue = [0.1, 0.8, 1.0, 0.7];\n\n// Main body module\nmodule diamondcoil_body() {\n    // Central spine\n    for(i = [0:15]) {\n        rotate([0, 0, i*22.5])\n        translate([cos(i*22.5)*15, sin(i*22.5)*15, i*4])\n        scale([1 - i*0.03, 1 - i*0.03, 1])\n        color(gem_blue)\n        sphere(d=12 - i*0.4);\n    }\n    \n    // Diamond scales along body\n    for(i = [0:45]) {\n        rotate([0, 0, i*8])\n        translate([cos(i*8)*18, sin(i*8)*18, i*1.3])\n        rotate([90, 0, i*15])\n        color(crystal_white)\n        scale([1, 1, 0.7])\n        cylinder(h=3, r1=2.5, r2=0.5);\n    }\n}\n\n// Head module with crystalline features\nmodule dragon_head() {\n    // Main head structure\n    translate([0, 0, 65])\n    union() {\n        // Snout\n        color(gem_blue)\n        scale([1, 0.8, 1.2])\n        sphere(d=15);\n        \n        // Upper jaw\n        translate([5, 0, -3])\n        color(dark_steel)\n        cube([12, 8, 3], center=true);\n        \n        // Lower jaw\n        translate([5, 0, -8])\n        color(dark_steel)\n        cube([10, 7, 2], center=true);\n        \n        // Crystal horns\n        for(angle = [0:90:270]) {\n            rotate([0, 0, angle])\n            translate([8, 0, 5])\n            rotate([30, 0, 0])\n            color(crystal_white)\n            scale([0.3, 0.3, 1])\n            cylinder(h=12, r1=2, r2=0.5);\n        }\n        \n        // Energy eyes\n        translate([6, 3, 0])\n        color(energy_blue)\n        sphere(d=2);\n        \n        translate([6, -3, 0])\n        color(energy_blue)\n        sphere(d=2);\n    }\n}\n\n// Wing modules - crystalline membranes\nmodule wings() {\n    // Left wing\n    translate([-10, 20, 55])\n    rotate([0, -20, -30])\n    union() {\n        // Wing arm\n        color(dark_steel)\n        cylinder(h=20, r1=1.5, r2=0.8);\n        \n        // Wing membrane segments\n        for(i = [0:3]) {\n            translate([-i*5, i*3, -i*2])\n            rotate([0, 10*i, 0])\n            color(crystal_white)\n            scale([1, 0.1, 1.5])\n            cube([5, 0.5, 8], center=true);\n        }\n    }\n    \n    // Right wing (mirrored)\n    mirror([0, 1, 0])\n    translate([-10, 20, 55])\n    rotate([0, -20, -30])\n    union() {\n        color(dark_steel)\n        cylinder(h=20, r1=1.5, r2=0.8);\n        \n        for(i = [0:3]) {\n            translate([-i*5, i*3, -i*2])\n            rotate([0, 10*i, 0])\n            color(crystal_white)\n            scale([1, 0.1, 1.5])\n            cube([5, 0.5, 8], center=true);\n        }\n    }\n}\n\n// Energy core in chest\nmodule energy_core() {\n    translate([0, 0, 35])\n    color(energy_blue)\n    scale([1.2, 1.2, 0.8])\n    sphere(d=8);\n    \n    // Energy tendrils\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([5, 0, 0])\n        color(energy_blue)\n        scale([0.3, 0.3, 1])\n        cylinder(h=8, r1=1, r2=0.2);\n    }\n}\n\n// Tail spikes\nmodule tail_spikes() {\n    for(i = [0:10]) {\n        rotate([0, 0, -i*25])\n        translate([cos(-i*25)*15, sin(-i*25)*15, -i*5])\n        rotate([30, 0, 0])\n        color(crystal_white)\n        scale([0.5, 0.5, 1])\n        cylinder(h=6, r1=1, r2=0.2);\n    }\n}\n\n// Base assembly\nunion() {\n    diamondcoil_body();\n    dragon_head();\n    wings();\n    energy_core();\n    tail_spikes();\n}",
    "renders": true
  },
  {
    "mythical_creature": "opalbasilisk",
    "openscad_code": "// Opalbasilisk - mythical serpent with opalescent scales and petrifying gaze\n// Realistic style, medium complexity, 3D printable\n\nscale_factor = 0.7;  // Scale to ~70mm length\n\n// Main body\nmodule body() {\n    color(\"MediumPurple\") \n    union() {\n        // Torso segment\n        translate([0, 0, 10])\n        scale([1.5, 1, 1])\n        sphere(8);\n        \n        // Neck\n        translate([0, 0, 20])\n        scale([0.8, 0.8, 2])\n        cylinder(h=15, r=5);\n        \n        // Tail segments\n        for(i = [1:8]) {\n            translate([-i*6, 0, 10 - i*1.5])\n            scale([1 - i*0.08, 1 - i*0.08, 0.8])\n            rotate([0, 0, -i*5])\n            sphere(6 + i*0.5);\n        }\n    }\n}\n\n// Head with crown and eyes\nmodule head() {\n    color(\"MediumOrchid\")\n    union() {\n        // Main head\n        translate([0, 0, 35])\n        scale([1.2, 1, 1.1])\n        sphere(7);\n        \n        // Snout\n        translate([0, 7, 34])\n        scale([0.6, 1.5, 0.8])\n        sphere(4);\n        \n        // Crown horns\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle])\n            translate([0, 6, 42])\n            rotate([20, 0, 0])\n            cylinder(h=8, r1=2, r2=0.5);\n        }\n        \n        // Petrifying eyes\n        color(\"Azure\")\n        for(x = [-2.5, 2.5]) {\n            translate([x, 4, 37])\n            sphere(1.5);\n        }\n    }\n}\n\n// Wings with membrane supports\nmodule wings() {\n    color(\"Thistle\")\n    difference() {\n        // Left wing\n        translate([-5, 0, 25])\n        rotate([0, -20, -30])\n        scale([2, 0.2, 1.2])\n        sphere(5);\n        \n        // Wing membrane holes\n        for(i = [1:3]) {\n            translate([-5 - i*2, 0, 25 + i*2])\n            rotate([0, -20, -30])\n            scale([1.5 - i*0.3, 0.1, 1 - i*0.2])\n            sphere(3);\n        }\n    }\n    \n    mirror([1, 0, 0])\n    difference() {\n        // Right wing\n        translate([-5, 0, 25])\n        rotate([0, -20, -30])\n        scale([2, 0.2, 1.2])\n        sphere(5);\n        \n        // Wing membrane holes\n        for(i = [1:3]) {\n            translate([-5 - i*2, 0, 25 + i*2])\n            rotate([0, -20, -30])\n            scale([1.5 - i*0.3, 0.1, 1 - i*0.2])\n            sphere(3);\n        }\n    }\n}\n\n// Scales along body\nmodule scales() {\n    color(\"MediumPurple\") \n    for(pos = [[0, 0, 15], [0, 0, 20], [-8, 0, 12], [-15, 0, 8], [-22, 0, 4]]) {\n        translate(pos)\n        for(angle = [0:45:359]) {\n            rotate([0, 0, angle])\n            translate([0, 6, 0])\n            scale([0.8, 0.8, 0.3])\n            sphere(2);\n        }\n    }\n}\n\n// Legs with claws\nmodule legs() {\n    color(\"MediumOrchid\")\n    for(side = [-1, 1]) {\n        translate([side*4, 0, 5])\n        rotate([0, 0, side*20])\n        union() {\n            // Upper leg\n            cylinder(h=8, r=2);\n            \n            // Lower leg\n            translate([0, 0, -8])\n            rotate([20, 0, 0])\n            cylinder(h=6, r=1.5);\n            \n            // Foot\n            translate([0, 2, -13])\n            scale([1.5, 2, 0.5])\n            sphere(2);\n            \n            // Claws\n            for(claw = [-1, 0, 1]) {\n                translate([claw, 4, -13])\n                rotate([30, 0, 0])\n                cylinder(h=3, r1=0.8, r2=0.2);\n            }\n        }\n    }\n}\n\n// Assembly\nscale(scale_factor)\nunion() {\n    body();\n    head();\n    wings();\n    scales();\n    legs();\n}",
    "renders": true
  },
  {
    "mythical_creature": "garnetwyrm",
    "openscad_code": "// Garnetwyrm - A mythical dragon-like creature with garnet crystal features\n// Scaled to 80mm length for 3D printing\n\n// Main body color - deep red with black highlights\ncolor([0.7, 0.1, 0.1]) {\n    // Main body segments\n    union() {\n        // Head\n        translate([0, 0, 15]) {\n            rotate([0, 0, 0]) {\n                difference() {\n                    sphere(d=12, $fn=16);\n                    // Eye sockets\n                    translate([4, 4, 2]) sphere(d=3, $fn=8);\n                    translate([-4, 4, 2]) sphere(d=3, $fn=8);\n                }\n            }\n        }\n        \n        // Neck\n        translate([0, -8, 12]) {\n            rotate([20, 0, 0]) {\n                cylinder(h=15, d1=10, d2=8, $fn=12);\n            }\n        }\n        \n        // Torso segments\n        for(i=[0:2]) {\n            translate([0, -20 - i*12, 10 - i*3]) {\n                rotate([0, 0, 5*i]) {\n                    scale([1 - i*0.1, 1 - i*0.1, 1]) {\n                        sphere(d=15 - i*2, $fn=12);\n                    }\n                }\n            }\n        }\n        \n        // Tail\n        for(i=[0:4]) {\n            translate([0, -50 - i*8, 8 - i*2]) {\n                rotate([0, 0, -10*i]) {\n                    scale([1 - i*0.2, 1 - i*0.2, 1 - i*0.1]) {\n                        sphere(d=8 - i*1.5, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wings - membrane with crystal supports\nmodule wing() {\n    color([0.6, 0.1, 0.1, 0.8]) {\n        difference() {\n            // Wing membrane\n            translate([0, 0, 0]) {\n                rotate([0, 0, 0]) {\n                    scale([1, 2, 0.5]) {\n                        sphere(d=25, $fn=6);\n                    }\n                }\n            }\n            // Cut wing shape\n            translate([0, 5, -1]) cube([30, 30, 2], center=true);\n        }\n        \n        // Wing crystal veins\n        for(i=[0:3]) {\n            color([0.9, 0.2, 0.2]) {\n                rotate([0, 0, 45*i]) {\n                    translate([5, 0, 0]) {\n                        cylinder(h=20, d1=1.5, d2=0.5, $fn=4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Left wing\ntranslate([10, -25, 20]) {\n    rotate([0, 0, -30]) {\n        wing();\n    }\n}\n\n// Right wing\ntranslate([-10, -25, 20]) {\n    rotate([0, 0, 30]) {\n        mirror([1, 0, 0]) {\n            wing();\n        }\n    }\n}\n\n// Legs\nmodule leg() {\n    color([0.5, 0.08, 0.08]) {\n        // Upper leg\n        translate([0, 0, 0]) {\n            rotate([0, 0, 0]) {\n                cylinder(h=12, d=4, $fn=8);\n            }\n        }\n        \n        // Lower leg\n        translate([0, 0, -12]) {\n            rotate([30, 0, 0]) {\n                cylinder(h=10, d=3, $fn=8);\n            }\n        }\n        \n        // Foot\n        translate([0, 0, -22]) {\n            rotate([0, 0, 0]) {\n                scale([1.5, 1, 0.5]) {\n                    sphere(d=4, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Front legs\ntranslate([5, -15, 5]) {\n    rotate([0, 0, -15]) {\n        leg();\n    }\n}\n\ntranslate([-5, -15, 5]) {\n    rotate([0, 0, 15]) {\n        leg();\n    }\n}\n\n// Back legs\ntranslate([4, -35, 5]) {\n    rotate([0, 0, -20]) {\n        leg();\n    }\n}\n\ntranslate([-4, -35, 5]) {\n    rotate([0, 0, 20]) {\n        leg();\n    }\n}\n\n// Garnet crystal horns\nmodule horn() {\n    color([0.9, 0.2, 0.2]) {\n        translate([0, 0, 0]) {\n            rotate([0, 0, 0]) {\n                cylinder(h=8, d1=3, d2=0.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Head horns\ntranslate([3, 0, 21]) {\n    rotate([15, 0, 0]) {\n        horn();\n    }\n}\n\ntranslate([-3, 0, 21]) {\n    rotate([15, 0, 0]) {\n        horn();\n    }\n}\n\n// Tail spikes\nfor(i=[0:3]) {\n    color([0.8, 0.15, 0.15]) {\n        translate([0, -55 - i*8, 8 - i*2]) {\n            rotate([0, 0, 0]) {\n                scale([0.5, 0.5, 1]) {\n                    cylinder(h=4, d1=2, d2=0.5, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Eyes - glowing garnet\ntranslate([4, 4, 17]) {\n    color([1, 0.2, 0.2]) {\n        sphere(d=1.5, $fn=8);\n    }\n}\n\ntranslate([-4, 4, 17]) {\n    color([1, 0.2, 0.2]) {\n        sphere(d=1.5, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "amethystserpent",
    "openscad_code": "// Amethyst Serpent - Mythical creature with crystalline scales and serpentine form\n// Designed for 3D printing with moderate detail\n\n// Main parameters\n$fn = 32;  // Smooth curves for printing\nscale_factor = 0.4;  // Scale down to 80mm length\n\n// Crystal color scheme\namethyst = [0.6, 0.4, 0.8, 0.9];\ndeep_purple = [0.3, 0.1, 0.5, 0.9];\ncrystal = [0.8, 0.7, 1.0, 0.6];\n\n// Main body\nmodule amethyst_serpent() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Serpentine body segments\n            body_segments();\n            \n            // Head with crystal crown\n            translate([0, 0, 35]) rotate([0, 20, 0]) head();\n            \n            // Wings (folded for printing)\n            translate([-5, -8, 25]) rotate([0, -10, -30]) wing();\n            translate([5, -8, 25]) mirror([1, 0, 0]) rotate([0, -10, -30]) wing();\n            \n            // Tail segments\n            tail();\n        }\n    }\n}\n\n// Body made of overlapping crystal scales\nmodule body_segments() {\n    for(i = [0:5]) {\n        translate([0, 0, 30 - i * 6]) {\n            rotate([0, 0, i * 15]) {\n                color(amethyst) \n                scale([1 - i*0.05, 1 - i*0.05, 1]) \n                crystal_segment(12 - i, 8 - i*0.5);\n            }\n        }\n    }\n}\n\n// Individual crystal scale segment\nmodule crystal_segment(width, height) {\n    difference() {\n        // Main scale body\n        union() {\n            cylinder(h=height, r1=width, r2=width*0.8);\n            // Crystal facets\n            for(angle = [0:60:360]) {\n                rotate([0, 0, angle]) \n                translate([width*0.7, 0, height*0.3]) \n                scale([0.3, 0.1, 0.5]) \n                cube([width, width, height], center=true);\n            }\n        }\n        // Hollow center for material saving\n        translate([0, 0, -1]) \n        cylinder(h=height+2, r1=width*0.4, r2=width*0.3);\n    }\n}\n\n// Serpent head with crystal crown\nmodule head() {\n    union() {\n        // Main head shape\n        color(deep_purple) {\n            scale([1.2, 0.8, 1]) \n            sphere(8);\n            \n            // Snout\n            translate([8, 0, 0]) \n            scale([1.5, 0.6, 0.6]) \n            sphere(5);\n        }\n        \n        // Eyes\n        translate([4, 4, 2]) eye();\n        translate([4, -4, 2]) eye();\n        \n        // Crystal crown\n        translate([-2, 0, 6]) crystal_crown();\n        \n        // Fangs (printing-friendly orientation)\n        translate([10, 2, -2]) fang();\n        translate([10, -2, -2]) fang();\n    }\n}\n\n// Eye with crystalline pupil\nmodule eye() {\n    color(crystal) sphere(2);\n    translate([0, 0, 1.5]) color(deep_purple) sphere(1);\n}\n\n// Crystal crown formation\nmodule crystal_crown() {\n    for(i = [0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([0, 3, 0]) {\n                color(amethyst) \n                scale([0.5, 0.5, 2]) \n                cylinder(h=4, r1=2, r2=0.5);\n            }\n        }\n    }\n}\n\n// Printing-friendly fang\nmodule fang() {\n    color(crystal) \n    rotate([90, 0, 0]) \n    cylinder(h=4, r1=1.5, r2=0.3);\n}\n\n// Folded wing for printing\nmodule wing() {\n    color(amethyst) {\n        // Wing membrane supports\n        difference() {\n            union() {\n                // Main wing shape\n                translate([0, 0, 2]) \n                scale([1, 0.3, 0.1]) \n                sphere(8);\n                \n                // Wing struts\n                for(i = [0:3]) {\n                    rotate([0, 0, i*20-30]) {\n                        translate([4, 0, 0]) \n                        scale([6, 0.5, 0.3]) \n                        cylinder(h=1, r=1);\n                    }\n                }\n            }\n            // Cutouts for membrane effect\n            for(i = [1:3]) {\n                translate([i*2, 0, 0]) \n                scale([1, 0.8, 0.2]) \n                sphere(2);\n            }\n        }\n    }\n}\n\n// Tapered crystal tail\nmodule tail() {\n    for(i = [0:8]) {\n        translate([0, 0, -i*4]) {\n            rotate([0, 0, -i*20]) {\n                color(amethyst) \n                scale([1 - i*0.08, 1 - i*0.08, 0.8]) \n                crystal_segment(10 - i, 6 - i*0.3);\n            }\n        }\n    }\n    \n    // Tail tip crystal\n    translate([0, 0, -36]) {\n        color(crystal) \n        scale([0.3, 0.3, 2]) \n        cylinder(h=4, r1=2, r2=0.5);\n    }\n}\n\n// Generate the creature\namethyst_serpent();",
    "renders": true
  },
  {
    "mythical_creature": "topazhydra",
    "openscad_code": "// Topaz Hydra - Realistic Style, Medium Complexity\n// Scale: 100mm total length\n\n// Colors\ncolor_topaz = [1, 0.75, 0.2];  // Golden topaz color\ncolor_scales = [0.8, 0.6, 0.15];\ncolor_eyes = [0.9, 0.1, 0.1];\ncolor_claws = [0.6, 0.6, 0.6];\n\n// Main body\nmodule hydra_body() {\n    color(color_topaz) {\n        // Central torso\n        difference() {\n            scale([1.2, 0.8, 1]) sphere(d=20);\n            translate([0, 0, 10]) cube([30, 30, 20], center=true);\n        }\n        \n        // Belly scales pattern\n        for(i = [-2:2]) {\n            translate([i*4, -8, -5]) scale([3, 0.5, 6]) sphere(d=2);\n        }\n    }\n}\n\n// Head with topaz crystal formation\nmodule hydra_head(pos, angle) {\n    color(color_topaz) {\n        translate(pos) rotate([0, angle, 0]) {\n            // Snout\n            translate([8, 0, 0]) scale([2, 1, 1]) sphere(d=6);\n            // Main head\n            sphere(d=12);\n            \n            // Topaz crystal crown\n            for(i = [0:120:360]) {\n                rotate([0, 0, i]) \n                translate([6, 0, 8]) \n                rotate([30, 0, 0]) \n                scale([0.5, 0.5, 1.5]) \n                cylinder(d1=2, d2=4, h=8);\n            }\n            \n            // Eyes\n            color(color_eyes) {\n                translate([4, 4, 3]) sphere(d=2);\n                translate([4, -4, 3]) sphere(d=2);\n            }\n            \n            // Horns\n            translate([0, 5, 8]) rotate([30, 0, 0]) cylinder(d=3, h=12);\n            translate([0, -5, 8]) rotate([30, 0, 0]) cylinder(d=3, h=12);\n        }\n    }\n}\n\n// Neck connecting body to head\nmodule neck(start, end) {\n    color(color_topaz) {\n        hull() {\n            translate(start) sphere(d=8);\n            translate(end) sphere(d=6);\n        }\n    }\n}\n\n// Wing membrane\nmodule wing() {\n    color(color_scales) {\n        // Wing bones\n        translate([10, 0, 0]) {\n            rotate([0, 0, 30]) cylinder(d=2, h=25);\n            rotate([0, 0, -30]) cylinder(d=2, h=25);\n            \n            // Membrane\n            for(i = [0:5:25]) {\n                translate([i*cos(30), i*sin(30), 0]) \n                scale([0.5, 0.5, 0.1]) \n                sphere(d=8-i/4);\n            }\n            for(i = [0:5:25]) {\n                translate([i*cos(-30), i*sin(-30), 0]) \n                scale([0.5, 0.5, 0.1]) \n                sphere(d=8-i/4);\n            }\n        }\n    }\n}\n\n// Leg with claws\nmodule leg(position, side) {\n    color(color_topaz) {\n        translate(position) {\n            // Upper leg\n            rotate([0, 0, side*15]) cylinder(d=6, h=15);\n            \n            // Lower leg\n            translate([0, 0, 15]) rotate([0, side*10, 0]) cylinder(d=5, h=12);\n            \n            // Foot\n            translate([0, 0, 27]) rotate([0, side*5, 0]) {\n                scale([1.5, 0.8, 0.5]) sphere(d=8);\n                \n                // Claws\n                color(color_claws) {\n                    for(i = [-1, 0, 1]) {\n                        translate([i*2.5, side*4, -2]) \n                        rotate([side*20, 0, 0]) \n                        cylinder(d1=1, d2=0.5, h=3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail segments\nmodule tail() {\n    color(color_topaz) {\n        for(i = [0:3]) {\n            translate([-15-i*8, 0, -i*3]) \n            scale([1-0.15*i, 1-0.15*i, 1]) \n            sphere(d=12-3*i);\n        }\n    }\n}\n\n// Scale pattern overlay\nmodule scales(base_size) {\n    color(color_scales) {\n        for(x = [-base_size:3:base_size]) {\n            for(y = [-base_size:3:base_size]) {\n                if(x*x + y*y < base_size*base_size) {\n                    translate([x, y, 10]) scale([1, 0.5, 0.2]) sphere(d=2);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the hydra\nunion() {\n    hydra_body();\n    \n    // Three heads on long necks\n    hydra_head([12, 15, 15], -10);\n    neck([0, 0, 8], [12, 15, 15]);\n    \n    hydra_head([12, 0, 18], 0);\n    neck([0, 0, 8], [12, 0, 18]);\n    \n    hydra_head([12, -15, 15], 10);\n    neck([0, 0, 8], [12, -15, 15]);\n    \n    // Wings\n    translate([0, 10, 15]) rotate([0, 0, 45]) wing();\n    translate([0, -10, 15]) rotate([0, 0, -45]) mirror([0,1,0]) wing();\n    \n    // Legs\n    leg([5, 8, -10], 1);\n    leg([5, -8, -10], -1);\n    leg([-5, 6, -10], 1);\n    leg([-5, -6, -10], -1);\n    \n    // Tail\n    tail();\n    \n    // Scales on back\n    scales(8);\n}",
    "renders": true
  },
  {
    "mythical_creature": "quartzfang",
    "openscad_code": "// Quartzfang - Mythical winged serpent with crystalline features\n// Medium complexity realistic style for 3D printing\n\n$fn = 32;\n\nmodule quartzfang() {\n    // Main body - serpentine form\n    color([0.8, 0.8, 0.9]) {\n        // Head\n        translate([0, 0, 15]) {\n            // Snout\n            difference() {\n                sphere(8);\n                translate([-8, 0, 0]) cube(16, center=false);\n            }\n            \n            // Horns - crystalline formations\n            color([0.9, 0.9, 1]) {\n                for(i = [0:30:150]) {\n                    rotate([0, i, 0]) {\n                        translate([0, 0, 8]) {\n                            rotate([i/3, 0, 45]) {\n                                scale([1, 1, 3]) sphere(2);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Eyes - glowing gems\n            color([0.3, 0.6, 1]) {\n                translate([6, -3, 2]) sphere(1.5);\n                translate([6, 3, 2]) sphere(1.5);\n            }\n        }\n        \n        // Neck and body segments\n        for(i = [0:20:100]) {\n            translate([i-10, 0, 15-i/10]) {\n                rotate([0, 0, sin(i*3)*10]) {\n                    scale([1, 0.8, 0.6]) sphere(7-i/20);\n                }\n            }\n        }\n        \n        // Tail\n        color([0.7, 0.7, 0.85]) {\n            for(i = [0:15:120]) {\n                translate([100-i*0.7, sin(i/10)*5, 5-i/30]) {\n                    scale([1, 0.7, 0.5]) sphere(4-i/50);\n                }\n            }\n        }\n    }\n    \n    // Wings - crystalline membrane\n    color([0.6, 0.7, 1, 0.8]) {\n        translate([20, 0, 20]) rotate([0, 0, 45]) {\n            // Wing frame\n            for(j = [0:30:180]) {\n                rotate([0, j, 0]) {\n                    translate([0, 0, 0]) {\n                        cylinder(h=40, r1=1, r2=0.5);\n                    }\n                }\n            }\n            \n            // Wing membrane\n            scale([1, 0.05, 1]) {\n                translate([20, 0, 0]) rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h=40, r=25);\n                        cylinder(h=41, r=20);\n                    }\n                }\n            }\n        }\n        \n        // Second wing\n        mirror([0, 1, 0]) {\n            translate([20, 0, 20]) rotate([0, 0, 45]) {\n                for(j = [0:30:180]) {\n                    rotate([0, j, 0]) {\n                        cylinder(h=40, r1=1, r2=0.5);\n                    }\n                }\n                scale([1, 0.05, 1]) {\n                    translate([20, 0, 0]) rotate([90, 0, 0]) {\n                        difference() {\n                            cylinder(h=40, r=25);\n                            cylinder(h=41, r=20);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs with crystal claws\n    color([0.75, 0.75, 0.85]) {\n        // Front legs\n        translate([25, 8, 5]) {\n            rotate([0, 0, 15]) {\n                cylinder(h=15, r=2);\n                translate([0, 0, -2]) rotate([0, 90, 0]) {\n                    cylinder(h=8, r=1.5);\n                }\n                // Claws\n                color([0.9, 0.9, 1]) {\n                    for(k = [0:120:240]) {\n                        rotate([0, 0, k]) {\n                            translate([0, 6, 0]) {\n                                rotate([0, 90, 0]) {\n                                    scale([1, 1, 2]) sphere(1);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        translate([25, -8, 5]) {\n            rotate([0, 0, -15]) mirror([0, 1, 0]) {\n                cylinder(h=15, r=2);\n                translate([0, 0, -2]) rotate([0, 90, 0]) {\n                    cylinder(h=8, r=1.5);\n                }\n                color([0.9, 0.9, 1]) {\n                    for(k = [0:120:240]) {\n                        rotate([0, 0, k]) {\n                            translate([0, 6, 0]) {\n                                rotate([0, 90, 0]) {\n                                    scale([1, 1, 2]) sphere(1);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Rear legs\n        translate([70, 6, 3]) {\n            rotate([0, 0, -20]) {\n                cylinder(h=12, r=2);\n                translate([0, 0, -2]) rotate([0, 90, 0]) {\n                    cylinder(h=6, r=1.5);\n                }\n                color([0.9, 0.9, 1]) {\n                    for(k = [0:120:240]) {\n                        rotate([0, 0, k]) {\n                            translate([0, 4, 0]) {\n                                rotate([0, 90, 0]) {\n                                    scale([1, 1, 2]) sphere(1);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        translate([70, -6, 3]) mirror([0, 1, 0]) {\n            rotate([0, 0, 20]) {\n                cylinder(h=12, r=2);\n                translate([0, 0, -2]) rotate([0, 90, 0]) {\n                    cylinder(h=6, r=1.5);\n                }\n                color([0.9, 0.9, 1]) {\n                    for(k = [0:120:240]) {\n                        rotate([0, 0, k]) {\n                            translate([0, 4, 0]) {\n                                rotate([0, 90, 0]) {\n                                    scale([1, 1, 2]) sphere(1);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Crystal spine ridges\n    color([0.95, 0.95, 1]) {\n        for(i = [10:10:90]) {\n            translate([i, 0, 15-i/10+5]) {\n                rotate([0, 0, i*2]) {\n                    scale([0.8, 0.8, 2]) sphere(2.5);\n                }\n            }\n        }\n    }\n}\n\n// Create the creature\nscale([0.8, 0.8, 0.8]) quartzfang();",
    "renders": true
  },
  {
    "mythical_creature": "mercurywyrm",
    "openscad_code": "// Mercurywyrm - a liquid-metal dragon serpent\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall size control\nscale_factor = 0.4;\n\n// Colors\nsilver = [0.8, 0.8, 0.85];\ndarker_silver = [0.6, 0.6, 0.65];\nmercury_blue = [0.4, 0.5, 0.9];\n\nmodule mercurywyrm() {\n    scale([scale_factor, scale_factor, scale_factor]) union() {\n        // Main serpentine body\n        color(silver) body();\n        \n        // Mercury droplet wings\n        translate([0, 0, 15]) color(darker_silver) wings();\n        \n        // Fluid head with horns\n        translate([0, -45, 5]) head();\n        \n        // Tail segments\n        tail();\n        \n        // Magical droplets floating around\n        droplets();\n    }\n}\n\nmodule body() {\n    // Create flowing serpentine body with overlapping scales\n    for(i = [0:10]) {\n        angle = i * 20;\n        y_pos = -i * 8;\n        x_pos = sin(angle) * 5;\n        z_pos = cos(angle * 0.7) * 3;\n        \n        translate([x_pos, y_pos, z_pos]) {\n            // Main body segment - ellipsoid for smooth flow\n            scale([1.2, 1, 0.8]) sphere(r = 6 - i * 0.3);\n            \n            // Scale plates on top\n            for(j = [0:3]) {\n                rotate([0, 0, j * 90]) {\n                    translate([0, 0, 3]) \n                    scale([1, 0.4, 0.2]) \n                    sphere(r = 4);\n                }\n            }\n        }\n    }\n}\n\nmodule wings() {\n    // Mercury droplet wings - liquid metal that flows upward\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, 0]) {\n            rotate([0, side * 20, 0]) {\n                // Main wing membrane\n                difference() {\n                    // Droplet shape\n                    scale([1.5, 0.3, 2]) sphere(r = 12);\n                    \n                    // Hollow center for thin walls\n                    translate([0, -2, 0]) \n                    scale([1.3, 0.1, 1.8]) \n                    sphere(r = 12);\n                }\n                \n                // Wing support ribs\n                for(i = [1:3]) {\n                    rotate([0, 0, i * 30 - 45]) {\n                        translate([0, 0, i * 3]) \n                        scale([0.3, 0.3, 1.5]) \n                        cylinder(h = 8, r1 = 2, r2 = 1);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule head() {\n    // Fluid mercury head with horns\n    union() {\n        // Main head - elongated sphere\n        scale([1.2, 1.5, 1]) sphere(r = 8);\n        \n        // Snout\n        translate([0, -10, 0]) \n        scale([0.8, 1.2, 0.8]) \n        sphere(r = 6);\n        \n        // Curved horns made of flowing metal\n        for(side = [-1, 1]) {\n            translate([side * 5, 5, 5]) {\n                rotate([side * 20, 0, -30]) {\n                    // Spiral horn\n                    for(h = [0:5]) {\n                        translate([0, 0, h * 2]) \n                        rotate([0, 0, h * 45]) \n                        scale([0.8, 0.8, 1]) \n                        cylinder(h = 3, r = 2.5 - h * 0.3);\n                    }\n                }\n            }\n        }\n        \n        // Eyes - glowing mercury pools\n        for(side = [-1, 1]) {\n            translate([side * 4, -7, 2]) {\n                color(mercury_blue) sphere(r = 2);\n                // Pupil\n                translate([0, 0.5, 1]) \n                color([0, 0, 0.3]) \n                sphere(r = 1);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Flowing tail segments getting smaller\n    for(i = [0:15]) {\n        segment_size = 6 - i * 0.3;\n        x_pos = sin(i * 15) * (i * 0.5);\n        y_pos = -80 - i * 5;\n        z_pos = cos(i * 10) * 2;\n        \n        translate([x_pos, y_pos, z_pos]) {\n            rotate([0, 0, i * 10]) {\n                sphere(r = max(segment_size, 1));\n                \n                // Tail fin ridges\n                for(f = [0:2]) {\n                    rotate([0, 0, f * 120]) {\n                        translate([0, 0, 0]) \n                        scale([0.3, 1, 0.1]) \n                        cylinder(h = segment_size * 1.5, r = segment_size);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule droplets() {\n    // Floating mercury droplets with magical aura\n    for(i = [0:7]) {\n        angle = i * 51.42857;  // 360/7\n        radius = 25 + sin(i * 3) * 5;\n        height = sin(i * 2) * 10;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius - 20,\n            height + 10\n        ]) {\n            // Main droplet\n            color(silver) sphere(r = 2 + sin(i) * 1);\n            \n            // Aura glow\n            color([0.4, 0.5, 0.9, 0.3]) \n            sphere(r = 3 + sin(i) * 1.5);\n        }\n    }\n}\n\n// Generate the complete model\nmercurywyrm();",
    "renders": true
  },
  {
    "mythical_creature": "platinumwyrm",
    "openscad_code": "// Platinumwyrm - Medium complexity realistic mythical dragon\n// Overall size 80mm long, 40mm wingspan, 30mm tall\n\ncolor(\"silver\") \nunion() {\n    // Main body\n    translate([0, 0, 15]) \n    scale([1.2, 0.8, 1]) \n    sphere(8, $fn=24);\n    \n    // Neck\n    translate([-10, 0, 25]) \n    rotate([0, -15, 0]) \n    cylinder(h=12, r1=6, r2=4, $fn=16);\n    \n    // Head\n    translate([-20, 0, 28]) \n    scale([1.5, 1.2, 1]) \n    sphere(4, $fn=20);\n    \n    // Snout\n    translate([-26, 0, 28]) \n    cylinder(h=6, r=2, $fn=12);\n    \n    // Tail\n    for(i=[0:5]) {\n        rotate([0, 0, i*-15]) \n        translate([i*3+8, 0, 15-i*1.5]) \n        scale([1-i*0.15, 1-i*0.15, 1-i*0.1]) \n        sphere(6-i*1, $fn=16);\n    }\n    \n    // Wings\n    module wing(side) {\n        translate([0, side*15, 25]) \n        rotate([0, 0, side*-20]) {\n            // Wing base\n            translate([0, 0, 0]) \n            cylinder(h=2, r=3, $fn=12);\n            \n            // Wing membrane\n            for(j=[0:5]) {\n                rotate([j*15, 0, 0]) \n                translate([j*2, side*j*2, -j*1.5]) \n                scale([0.8-j*0.1, 0.8-j*0.1, 0.3]) \n                sphere(3-j*0.5, $fn=16);\n            }\n        }\n    }\n    \n    wing(1);\n    wing(-1);\n    \n    // Legs\n    module leg(pos) {\n        translate([pos*6, 0, 8]) {\n            // Upper leg\n            cylinder(h=8, r=2.5, $fn=12);\n            \n            // Lower leg\n            translate([0, 0, -8]) \n            rotate([pos*30, 0, 0]) \n            cylinder(h=7, r=2, $fn=12);\n            \n            // Foot\n            translate([0, 0, -14]) \n            scale([2, 1, 0.5]) \n            sphere(2, $fn=16);\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    leg(0.5);\n    leg(-0.5);\n    \n    // Horns\n    module horn(pos) {\n        translate([-18+pos*3, pos*3, 32]) \n        rotate([0, -15, 0]) \n        cylinder(h=5, r1=1.5, r2=0.5, $fn=8);\n    }\n    \n    horn(1);\n    horn(-1);\n    horn(0);\n    \n    // Eye sockets\n    module eye(side) {\n        translate([-22, side*2.5, 29]) \n        scale([0.8, 0.8, 0.5]) \n        sphere(1.5, $fn=12);\n    }\n    \n    difference() {\n        union();\n        color(\"blue\") {\n            eye(1);\n            eye(-1);\n        }\n    }\n    \n    // Scales pattern on back\n    for(k=[0:8]) {\n        translate([k*3-12, 0, 25+k*0.5]) \n        scale([1, 0.7, 0.3]) \n        sphere(2, $fn=12);\n    }\n    \n    // Magical platinum glow spots\n    color(\"platinum\") \n    for(l=[0:3]) {\n        rotate([0, 0, l*90]) \n        translate([0, 0, 15]) \n        sphere(1, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "celestialwyrm",
    "openscad_code": "// CelestialWyrm - A medium-complexity mythical creature model\n// Wings, star-etched scales, curled tail, horned head\n// Sized for 3D printing: ~80 mm long\n\n$fn=32;\n\nmodule scale_piece(x,y,z){\n    difference(){\n        translate([x,y,z]) sphere(2.5,$fn=6);\n        translate([x,y,z+0.5]) sphere(1.7,$fn=6);\n    }\n}\n\nmodule star_mark(x,y,z){\n    for(a=[0:60:300])\n        rotate([0,0,a]) translate([x,y,z]) rotate([90,0,0])\n            cylinder(h=1.2,r=0.6,center=true);\n}\n\nmodule body_segment(i){\n    rotate([0,15*sin(i*40),i*40])\n    translate([0,0,i*6])\n    scale([1-0.005*i,1-0.005*i,1])\n    sphere(5-i*0.2);\n}\n\nmodule wing(){\n    color(\"LightSteelBlue\")\n    difference(){\n        union(){\n            translate([0,0,0]) cube([30,2,15],center=true);\n            for(i=[0:15:30]){\n                rotate([0,i*2-30,0]) translate([i-15,0,7.5]) cube([6,1,5],center=true);\n            }\n        }\n        for(i=[0:15:30]){\n            translate([i-15,0,-1]) sphere(3);\n            translate([i-15,0,16]) sphere(3);\n        }\n    }\n}\n\nmodule tail_spike(){\n    color(\"MidnightBlue\")\n    rotate([0,-30,0])\n    cylinder(h=12,r1=2,r2=0.5);\n}\n\nmodule horn(){\n    color(\"Gold\")\n    rotate([-30,0,0])\n    cylinder(h=8,r1=3,r2=0.5);\n}\n\nmodule celestialwyrm(){\n    // Main body\n    color(\"DarkSlateBlue\")\n    union(){\n        // Head\n        translate([0,0,35]) sphere(8);\n        \n        // Horns\n        translate([4,0,42]) horn();\n        translate([-4,0,42]) mirror([1,0,0]) horn();\n        \n        // Body segments\n        for(i=[0:12]) body_segment(i);\n        \n        // Tail\n        translate([0,0,-40]) \n        rotate([0,0,-180])\n        for(i=[0:10]) body_segment(i);\n        \n        // Tail spike\n        translate([0,0,-105]) tail_spike();\n        \n        // Wings\n        translate([0,10,15]) rotate([0,0,30]) wing();\n        translate([0,-10,15]) mirror([0,1,0]) rotate([0,0,-30]) wing();\n        \n        // Legs (simple supports)\n        color(\"RoyalBlue\")\n        for(side=[-1,1]){\n            translate([side*8,0,0])\n            cylinder(h=15,r=3);\n            translate([side*8,0,-25])\n            cylinder(h=15,r=2.5);\n        }\n    }\n    \n    // Scales & star marks\n    color(\"DodgerBlue\")\n    for(i=[0:8]){\n        rotate([0,15*sin(i*40),i*40])\n        translate([0,0,i*6])\n        scale_piece(3,0,0);\n        scale_piece(-3,0,0);\n        star_mark(0,3.5,i*6);\n        star_mark(0,-3.5,i*6);\n    }\n    \n    // Eyes\n    color(\"Cyan\")\n    translate([4,3,37]) sphere(1.5);\n    translate([-4,3,37]) sphere(1.5);\n}\n\ncelestialwyrm();",
    "renders": true
  },
  {
    "mythical_creature": "abyssalserpent",
    "openscad_code": "// Abyssal Serpent - 3D Printable\n// Medium complexity realistic style\n\n$fn = 32;\nscale_factor = 1;\n\nmodule segment(r1, r2, h) {\n    cylinder(h=h, r1=r1, r2=r2, center=true);\n}\n\nmodule fin(x, y, z, rot) {\n    translate([x, y, z])\n    rotate([0, 0, rot])\n    scale([1, 0.3, 0.1])\n    sphere(3);\n}\n\nmodule eye() {\n    color(\"crimson\")\n    union() {\n        sphere(1.5);\n        translate([0.5, 0, 1])\n        scale([0.5, 0.5, 0.2])\n        sphere(1);\n    }\n}\n\nmodule head() {\n    color(\"darkslategray\")\n    union() {\n        // Main head\n        scale([1.5, 1, 1])\n        sphere(8);\n        \n        // Snout\n        translate([10, 0, 0])\n        scale([2, 0.8, 0.8])\n        sphere(4);\n        \n        // Eyes\n        translate([6, 5, 2])\n        eye();\n        translate([6, -5, 2])\n        mirror([0,1,0])\n        eye();\n        \n        // Horns\n        for(i = [0:1]) {\n            translate([2, i ? 4 : -4, 6])\n            rotate([i ? -30 : 30, 0, 0])\n            cylinder(h=12, r1=2, r2=0.5);\n        }\n        \n        // Teeth\n        for(i = [0:3]) {\n            translate([10, 0, -2+i*1.5])\n            rotate([0, 90, 0])\n            cylinder(h=2, r1=0.5, r2=0);\n        }\n    }\n}\n\nmodule body_segment(pos, rot, scale) {\n    translate(pos)\n    rotate([0, 0, rot])\n    scale(scale)\n    segment(5, 4, 10);\n}\n\nmodule scale_detail(pos, size) {\n    translate(pos)\n    scale([1, 1, 0.1])\n    sphere(size);\n}\n\nmodule body() {\n    color(\"darkslategray\")\n    union() {\n        // Main body segments\n        for(i = [0:8]) {\n            body_segment(\n                [15+i*8, sin(i*15)*3, -i*2],\n                i*5,\n                [1-i*0.05, 1-i*0.05, 1]\n            );\n        }\n        \n        // Dorsal fins\n        for(i = [1:3:8]) {\n            fin(15+i*8, sin(i*15)*3, -i*2+5, 0);\n        }\n        \n        // Scale patterns\n        for(i = [0:7]) {\n            for(j = [0:5]) {\n                scale_detail(\n                    [20+i*8, (j-2.5)*2, -i*2-1],\n                    1.2\n                );\n            }\n        }\n    }\n}\n\nmodule tail() {\n    color(\"darkslategray\")\n    translate([80, 0, -16])\n    rotate([0, 0, 45])\n    union() {\n        // Tail segments\n        for(i = [0:5]) {\n            scale([1-i*0.15, 1-i*0.15, 1])\n            translate([i*10, 0, 0])\n            segment(4-i*0.5, 3-i*0.5, 8);\n        }\n        \n        // Tail fin\n        translate([50, 0, 0])\n        rotate([0, 90, 0])\n        scale([1, 0.2, 0.5])\n        cylinder(h=15, r1=8, r2=0);\n    }\n}\n\nmodule magical_glow() {\n    color(\"navy\", 0.3)\n    translate([0, 0, 0])\n    sphere(100);\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    head();\n    body();\n    tail();\n    magical_glow();\n}",
    "renders": true
  },
  {
    "mythical_creature": "netherdrake",
    "openscad_code": "// Netherdrake - A corrupted dragon from the nether realm\n// Realistic style, medium complexity\n// 75mm wingspan, 3D printable\n\n// Color definitions\ncolor_dark_purple = [0.3, 0.1, 0.4];\ncolor_dark_red = [0.5, 0.1, 0.1];\ncolor_black = [0.1, 0.1, 0.1];\ncolor_glowing = [0.8, 0.2, 0.8];\n\n// Main body\nmodule netherdrake_body() {\n    union() {\n        // Central torso\n        color(color_dark_purple)\n        translate([0, 0, 5])\n        scale([1, 0.8, 1.2])\n        sphere(r=8);\n        \n        // Chest plates\n        color(color_dark_red)\n        for(i=[-1:1]) {\n            translate([i*4, 0, 12])\n            rotate([0, i*5, 0])\n            scale([2, 1, 0.5])\n            cube([3, 6, 1]);\n        }\n        \n        // Spine ridges\n        color(color_black)\n        for(i=[-3:3]) {\n            translate([i*2.5, 0, 8 + abs(i)*1.5])\n            rotate([0, 90, 0])\n            cylinder(h=3, r1=1, r2=0.5);\n        }\n    }\n}\n\n// Head with horns and details\nmodule netherdrake_head() {\n    union() {\n        // Main head\n        color(color_dark_purple)\n        translate([0, 12, 15])\n        scale([1.2, 1.5, 1])\n        sphere(r=7);\n        \n        // Snout\n        color(color_dark_purple)\n        translate([0, 20, 15])\n        scale([0.8, 1.2, 0.7])\n        sphere(r=5);\n        \n        // Horns\n        color(color_black)\n        for(side=[-1, 1]) {\n            // Main horns\n            translate([side*5, 8, 20])\n            rotate([-30, side*20, 0])\n            cylinder(h=12, r1=2, r2=1);\n            \n            // Secondary horns\n            translate([side*3, 12, 18])\n            rotate([-45, side*30, 0])\n            cylinder(h=8, r1=1.5, r2=0.5);\n        }\n        \n        // Eyes - glowing\n        color(color_glowing)\n        for(side=[-1, 1]) {\n            translate([side*3, 16, 17])\n            sphere(r=1);\n        }\n    }\n}\n\n// Wings with membrane structure\nmodule netherdrake_wing(left=true) {\n    side = left ? -1 : 1;\n    \n    union() {\n        // Wing arm\n        color(color_dark_purple)\n        translate([side*8, 5, 15])\n        rotate([0, 0, side*30])\n        cylinder(h=25, r1=2, r2=1);\n        \n        // Wing membrane\n        color(color_dark_red)\n        translate([side*8, 5, 15])\n        rotate([0, 0, side*30])\n        linear_extrude(height=0.5)\n        polygon(points=[\n            [0, 0],\n            [side*20, -5],\n            [side*25, -15],\n            [side*20, -25],\n            [side*10, -30],\n            [0, -20]\n        ]);\n        \n        // Wing claws\n        color(color_black)\n        translate([side*33, -15, 15])\n        rotate([0, 0, side*30])\n        cylinder(h=5, r1=0.5, r2=0.2);\n    }\n}\n\n// Legs with claws\nmodule netherdrake_leg(front=true) {\n    y_pos = front ? 8 : -8;\n    \n    union() {\n        // Upper leg\n        color(color_dark_purple)\n        translate([0, y_pos, 5])\n        rotate([15, 0, 0])\n        cylinder(h=12, r1=2.5, r2=2);\n        \n        // Lower leg\n        color(color_dark_purple)\n        translate([0, y_pos+2, -2])\n        rotate([45, 0, 0])\n        cylinder(h=10, r1=2, r2=1.5);\n        \n        // Foot\n        color(color_black)\n        translate([0, y_pos+4, -8])\n        rotate([90, 0, 0])\n        cylinder(h=5, r1=2, r2=3);\n        \n        // Claws\n        color(color_black)\n        for(i=[-1:1]) {\n            translate([i*1.5, y_pos+4, -10.5])\n            rotate([45, 0, 0])\n            cylinder(h=3, r1=0.8, r2=0.2);\n        }\n    }\n}\n\n// Tail with spines\nmodule netherdrake_tail() {\n    union() {\n        // Tail segments\n        color(color_dark_purple)\n        for(i=[0:5]) {\n            translate([0, -15-i*3, 5-i*0.8])\n            scale([1-i*0.1, 1-i*0.05, 1-i*0.1])\n            sphere(r=5-i*0.5);\n        }\n        \n        // Tail spikes\n        color(color_black)\n        for(i=[0:4]) {\n            translate([0, -12-i*3, 8-i])\n            rotate([0, 90, 0])\n            cylinder(h=2+i*0.5, r1=0.5, r2=0.2);\n        }\n        \n        // Tail blade\n        color(color_black)\n        translate([0, -30, 1])\n        rotate([90, 0, 0])\n        cylinder(h=8, r1=0.5, r2=3);\n    }\n}\n\n// Complete netherdrake assembly\nunion() {\n    netherdrake_body();\n    netherdrake_head();\n    netherdrake_wing(left=true);\n    netherdrake_wing(left=false);\n    netherdrake_leg(front=true);\n    translate([5, 0, 0]) netherdrake_leg(front=false);\n    netherdrake_tail();\n}",
    "renders": true
  },
  {
    "mythical_creature": "infernowyrm",
    "openscad_code": "// Infernowyrm - A magma dragon of myth\n// Realistic style, medium complexity (~120 lines)\n\n// Global parameters\nscale_factor = 0.4;\nbody_length = 80 * scale_factor;\nbody_height = 25 * scale_factor;\nwing_span = 60 * scale_factor;\nhorns = 4;\ntail_segments = 5;\n\n// Main module\nmodule infernowyrm() {\n    // Body\n    color(\"darkred\") \n    union() {\n        // Main torso\n        translate([0, 0, body_height/2])\n            scale([1.2, 1, 0.8])\n            sphere(d=body_height);\n        \n        // Neck\n        translate([-body_length/3, 0, body_height*0.8])\n            rotate([0, 15, 0])\n            cylinder(h=body_length/3, d1=body_height*0.6, d2=body_height*0.8);\n        \n        // Head\n        translate([-body_length/1.8, 0, body_height*1.2])\n            scale([1.3, 0.8, 1])\n            sphere(d=body_height*0.8);\n        \n        // Snout\n        translate([-body_length/1.5, 0, body_height*1.2])\n            rotate([0, -10, 0])\n            cylinder(h=body_height*0.6, d1=body_height*0.5, d2=body_height*0.3);\n        \n        // Horns\n        for(i=[0:horns-1]) {\n            rotate([0, 0, i*90 + 45])\n            translate([-body_length/1.7, body_height*0.3, body_height*1.4])\n                rotate([30, 0, 0])\n                cylinder(h=body_height*0.5, d1=body_height*0.15, d2=body_height*0.05);\n        }\n        \n        // Tail\n        tail();\n        \n        // Wings\n        wings();\n        \n        // Legs\n        legs();\n        \n        // Spikes along spine\n        spine_spikes();\n    }\n    \n    // Eyes (glowing)\n    color(\"orange\")\n    union() {\n        translate([-body_length/1.6, -body_height*0.25, body_height*1.3])\n            sphere(d=body_height*0.15);\n        translate([-body_length/1.6, body_height*0.25, body_height*1.3])\n            sphere(d=body_height*0.15);\n    }\n}\n\n// Tail module with segments\nmodule tail() {\n    for(i=[0:tail_segments-1]) {\n        translate([body_length/2 + i*body_length/5, 0, body_height/2 - i*body_height/4])\n            rotate([0, 0, -i*15])\n            scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.1])\n            sphere(d=body_height*(0.8 - i*0.1));\n    }\n}\n\n// Wing module\nmodule wings() {\n    color(\"darkred\") {\n        // Left wing\n        translate([-body_length/4, body_height*0.8, body_height*0.8])\n            rotate([0, 0, -30])\n            scale([1, wing_span/2, 0.1])\n            difference() {\n                sphere(d=body_height);\n                translate([0, -body_height, 0])\n                    cube([body_height*2, body_height*2, body_height], center=true);\n            }\n        \n        // Right wing\n        translate([-body_length/4, -body_height*0.8, body_height*0.8])\n            rotate([0, 0, 30])\n            scale([1, wing_span/2, 0.1])\n            mirror([0, 1, 0])\n            difference() {\n                sphere(d=body_height);\n                translate([0, -body_height, 0])\n                    cube([body_height*2, body_height*2, body_height], center=true);\n            }\n    }\n}\n\n// Legs module\nmodule legs() {\n    for(side=[-1, 1]) {\n        // Front legs\n        translate([-body_length/4, side*body_height*0.4, 0])\n            rotate([0, 0, side*15])\n            cylinder(h=body_height*0.8, d=body_height*0.2);\n        \n        // Rear legs\n        translate([body_length/4, side*body_height*0.5, 0])\n            rotate([0, 0, side*15])\n            cylinder(h=body_height*0.9, d=body_height*0.25);\n    }\n}\n\n// Spine spikes\nmodule spine_spikes() {\n    for(i=[-2:2]) {\n        if(i != 0) {\n            translate([i*body_length/6, 0, body_height*0.8])\n                cylinder(h=body_height*0.3, d=body_height*0.1);\n        }\n    }\n}\n\n// Render the creature\ninfernowyrm();",
    "renders": true
  },
  {
    "mythical_creature": "glacialhydra",
    "openscad_code": "// Glacial Hydra - Medium Complexity Realistic Style\n// A three-headed ice serpent with crystalline spikes and frost details\n\nuse <colors.scad>\n\nmodule hydra_head(x_pos, y_pos, z_pos, angle) {\n    translate([x_pos, y_pos, z_pos]) {\n        rotate([0, 0, angle]) {\n            // Main head shape\n            color(\"lightblue\") {\n                sphere(6, $fn=32);\n            }\n            \n            // Snout\n            translate([5, 0, 0]) {\n                color(\"lightblue\") {\n                    scale([1.5, 0.8, 0.8]) sphere(4, $fn=24);\n                }\n            }\n            \n            // Eyes\n            translate([4, -2.5, 2]) {\n                color(\"darkblue\") sphere(0.8, $fn=16);\n            }\n            translate([4, 2.5, 2]) {\n                color(\"darkblue\") sphere(0.8, $fn=16);\n            }\n            \n            // Ice horns\n            for(i = [0:45:135]) {\n                rotate([0, 0, i]) {\n                    translate([0, 5, 4]) {\n                        rotate([30, 0, 0]) {\n                            color(\"cyan\") {\n                                cylinder(h=8, r1=1.5, r2=0.5, $fn=8);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Neck connection\n            translate([-6, 0, 0]) {\n                color(\"lightblue\") {\n                    cylinder(h=8, r=4, $fn=16);\n                }\n            }\n        }\n    }\n}\n\nmodule hydra_body() {\n    // Central body\n    color(\"lightblue\") {\n        cylinder(h=20, r=8, $fn=32);\n    }\n    \n    // Ice spikes along back\n    for(i = [0:3:20]) {\n        translate([0, 8, i]) {\n            rotate([45, 0, 0]) {\n                color(\"cyan\") {\n                    cylinder(h=5, r1=2, r2=0.5, $fn=6);\n                }\n            }\n        }\n    }\n    \n    // Frost patterns\n    for(i = [0:120:359]) {\n        rotate([0, 0, i]) {\n            translate([6, 0, 5]) {\n                color(\"white\") {\n                    sphere(0.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nmodule hydra_legs() {\n    // Four legs\n    for(side = [-1, 1]) {\n        for(pos = [5, 15]) {\n            translate([side * 7, 0, pos]) {\n                rotate([0, side * 15, 0]) {\n                    // Upper leg\n                    color(\"lightblue\") {\n                        cylinder(h=8, r=2, $fn=12);\n                    }\n                    \n                    translate([0, 0, 8]) {\n                        rotate([30, 0, 0]) {\n                            // Lower leg\n                            color(\"lightblue\") {\n                                cylinder(h=6, r=1.5, $fn=12);\n                            }\n                            \n                            // Ice claw foot\n                            translate([0, 0, 6]) {\n                                color(\"cyan\") {\n                                    sphere(2, $fn=16);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule hydra_tails() {\n    // Two splitting tails\n    for(side = [-1, 1]) {\n        translate([0, side * 5, -10]) {\n            rotate([0, side * 10, 0]) {\n                color(\"lightblue\") {\n                    cylinder(h=15, r=4, $fn=16);\n                }\n                \n                // Tail spike\n                translate([0, 0, -15]) {\n                    rotate([0, 0, 0]) {\n                        color(\"cyan\") {\n                            cylinder(h=8, r1=3, r2=0.5, $fn=8);\n                        }\n                    }\n                }\n                \n                // Frost details\n                for(i = [0:3:15]) {\n                    rotate([0, 0, i * 30]) {\n                        translate([3, 0, -i]) {\n                            color(\"white\") {\n                                sphere(0.8, $fn=8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    hydra_body();\n    \n    // Legs\n    hydra_legs();\n    \n    // Tails\n    hydra_tails();\n    \n    // Three heads\n    hydra_head(0, 0, 25, 0);\n    hydra_head(-4, 6, 22, 30);\n    hydra_head(-4, -6, 22, -30);\n}",
    "renders": true
  },
  {
    "mythical_creature": "tempestwyrm",
    "openscad_code": "// Tempestwyrm - Storm Dragon of the Skies\n// Medium complexity realistic style\n\n$fn = 32;\nscale_factor = 0.4;\n\n// Main body\nmodule body() {\n    color([0.2, 0.3, 0.5]) {\n        // Torso\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 1.5])\n            sphere(8);\n        \n        // Neck\n        translate([0, 0, 20])\n            rotate([15, 0, 0])\n            scale([0.6, 0.6, 1.2])\n            cylinder(h=15, r1=4, r2=3);\n    }\n}\n\n// Head with storm features\nmodule head() {\n    color([0.15, 0.25, 0.45]) {\n        // Main head\n        translate([0, 0, 35])\n            rotate([25, 0, 0])\n            scale([1, 0.7, 0.8])\n            sphere(6);\n        \n        // Snout\n        translate([0, 4, 34])\n            rotate([35, 0, 0])\n            scale([0.8, 0.5, 0.6])\n            cylinder(h=8, r1=3, r2=2);\n        \n        // Storm horns - lightning shaped\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n            translate([0, 0, 38])\n                rotate([90+i*10, 0, 0])\n                scale([0.2, 0.2, 1.5])\n                cylinder(h=8, r1=1.5, r2=0.5);\n        }\n        \n        // Eyes with electric glow\n        color([0.8, 0.9, 1]) {\n            translate([2.5, 2.5, 36])\n                sphere(0.8);\n            translate([-2.5, 2.5, 36])\n                sphere(0.8);\n        }\n    }\n}\n\n// Wings with storm membrane\nmodule wings() {\n    color([0.1, 0.2, 0.4, 0.7]) {\n        // Left wing\n        translate([-8, 0, 22]) {\n            rotate([0, 0, -20])\n            scale([1, 0.1, 2])\n            difference() {\n                cube([20, 1, 25]);\n                // Wing membrane holes for printing\n                for(i = [0:3]) {\n                    translate([5+i*3, -0.5, 5+i*5])\n                        sphere(2);\n                }\n            }\n            // Wing fingers\n            for(i = [0:3]) {\n                rotate([0, 0, i*15])\n                translate([2, 0, 5+i*6])\n                    scale([0.3, 0.3, 1])\n                    cylinder(h=15-i*2, r=1);\n            }\n        }\n        \n        // Right wing - mirrored\n        mirror([1, 0, 0])\n        translate([-8, 0, 22]) {\n            rotate([0, 0, -20])\n            scale([1, 0.1, 2])\n            difference() {\n                cube([20, 1, 25]);\n                for(i = [0:3]) {\n                    translate([5+i*3, -0.5, 5+i*5])\n                        sphere(2);\n                }\n            }\n            for(i = [0:3]) {\n                rotate([0, 0, i*15])\n                translate([2, 0, 5+i*6])\n                    scale([0.3, 0.3, 1])\n                    cylinder(h=15-i*2, r=1);\n            }\n        }\n    }\n}\n\n// Tail with storm segments\nmodule tail() {\n    color([0.25, 0.35, 0.55]) {\n        union() {\n            // Main tail segments\n            for(i = [0:4]) {\n                translate([0, 0, 10-i*5])\n                    rotate([0, 0, i*15])\n                    scale([1-i*0.15, 1-i*0.15, 1])\n                    translate([0, -3-i*2, -3-i*2])\n                    sphere(4-i);\n            }\n            \n            // Tail fin\n            translate([0, -15, -12])\n                rotate([0, 0, -45])\n                scale([0.5, 0.1, 2])\n                cube([8, 1, 6]);\n        }\n    }\n}\n\n// Legs with claws\nmodule legs() {\n    color([0.2, 0.3, 0.5]) {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side*6, 0, 12]) {\n                // Upper leg\n                rotate([0, side*20, 0])\n                cylinder(h=8, r=2);\n                \n                // Lower leg\n                translate([side*2, 0, -4])\n                    rotate([0, side*30, 0])\n                    cylinder(h=6, r=1.5);\n                \n                // Foot\n                translate([side*3, 0, -8])\n                    rotate([0, 0, side*20])\n                    scale([2, 1, 0.5])\n                    cube([3, 1, 1]);\n                \n                // Claws\n                for(claw = [0:2]) {\n                    translate([side*(3.5+claw*0.8), 0, -9])\n                        rotate([0, 0, side*(10+claw*10)])\n                        cylinder(h=2, r1=0.3, r2=0.1);\n                }\n            }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([side*5, 0, 2]) {\n                rotate([0, side*25, 0])\n                cylinder(h=8, r=2.5);\n                \n                translate([side*2.5, 0, -4])\n                    rotate([0, side*35, 0])\n                    cylinder(h=6, r=2);\n                \n                translate([side*3.5, 0, -8])\n                    rotate([0, 0, side*20])\n                    scale([2.5, 1.2, 0.6])\n                    cube([3, 1, 1]);\n                \n                for(claw = [0:2]) {\n                    translate([side*(4+claw*0.8), 0, -9])\n                        rotate([0, 0, side*(10+claw*10)])\n                        cylinder(h=2, r1=0.4, r2=0.1);\n                }\n            }\n        }\n    }\n}\n\n// Storm scales detail\nmodule scales() {\n    color([0.3, 0.4, 0.6]) {\n        for(i = [0:20]) {\n            angle = i * 18;\n            height = 10 + sin(i * 30) * 2;\n            translate([cos(angle) * 6, sin(angle) * 6, height])\n                scale([0.5, 0.5, 0.2])\n                sphere(1);\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body();\n        head();\n        wings();\n        tail();\n        legs();\n        scales();\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "aurorawyrm",
    "openscad_code": "// AuroraWyrm - A luminous dragon of the northern lights\n// Realistic style, medium complexity\n// Size: ~80mm long, printable with no supports\n\n// Overall scale\nscale_factor = 0.4;\n\n// Colors\ncolor_aurora = [0.2, 0.8, 0.9, 0.7];      // Cyan glow\ncolor_body = [0.1, 0.2, 0.4, 0.9];        // Deep blue\ncolor_ice = [0.9, 0.95, 1.0, 0.6];        // Ice crystal\n\n// Main body module\nmodule aurorawyrm_body() {\n    union() {\n        // Central torso\n        color(color_body)\n        translate([0, 0, 10])\n        scale([1.5, 1, 1.2])\n        sphere(15);\n        \n        // Neck extension\n        color(color_body)\n        translate([-20, 0, 25])\n        rotate([0, 30, 0])\n        scale([0.8, 0.8, 1.2])\n        cylinder(h=25, r1=12, r2=8);\n        \n        // Tail segments\n        for(i = [1:8]) {\n            color(color_body)\n            translate([20 + i*8, 0, 15 - i*2])\n            rotate([0, -i*5, 0])\n            scale([1 - i*0.08, 1 - i*0.08, 1 - i*0.05])\n            sphere(12 - i);\n        }\n    }\n}\n\n// Head with snout and horns\nmodule aurorawyrm_head() {\n    union() {\n        // Main head\n        color(color_body)\n        translate([-35, 0, 30])\n        rotate([0, 30, 0])\n        scale([1, 0.8, 0.7])\n        sphere(10);\n        \n        // Snout\n        color(color_body)\n        translate([-45, 0, 30])\n        rotate([0, 30, 0])\n        scale([1.2, 0.6, 0.5])\n        cylinder(h=15, r1=8, r2=5);\n        \n        // Horns - crystalline\n        for(i = [0:3]) {\n            color(color_ice)\n            rotate([0, 0, i*90 + 45])\n            translate([-30, 8*cos(i*90), 40 + 8*sin(i*90)])\n            rotate([30, 0, 0])\n            cylinder(h=12, r1=2, r2=0.5);\n        }\n        \n        // Eyes - glowing\n        color(color_aurora)\n        translate([-42, 5, 32])\n        sphere(2);\n        translate([-42, -5, 32])\n        sphere(2);\n    }\n}\n\n// Wings with aurora membrane\nmodule aurorawyrm_wings() {\n    union() {\n        // Left wing\n        translate([-5, 20, 35])\n        rotate([0, 0, -20])\n        wing_half();\n        \n        // Right wing\n        translate([-5, -20, 35])\n        rotate([0, 0, 20])\n        mirror([0,1,0])\n        wing_half();\n    }\n}\n\nmodule wing_half() {\n    // Wing arm\n    color(color_body)\n    rotate([0, -30, -30])\n    cylinder(h=35, r1=3, r2=2);\n    \n    // Wing membrane\n    color(color_aurora)\n    translate([0, 0, -2])\n    linear_extrude(height=0.5)\n    polygon(points=[\n        [0,0],\n        [15,25],\n        [25,20],\n        [30,10],\n        [25,0],\n        [15,-5],\n        [5,-3],\n        [0,0]\n    ]);\n}\n\n// Legs\nmodule aurorawyrm_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([-15, side*12, 15])\n        leg();\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([15, side*10, 10])\n        leg();\n    }\n}\n\nmodule leg() {\n    color(color_body)\n    union() {\n        // Upper leg\n        rotate([30, 0, 0])\n        cylinder(h=15, r1=3, r2=2);\n        \n        // Lower leg\n        translate([0, 0, -15])\n        rotate([45, 0, 0])\n        cylinder(h=12, r1=2, r2=1.5);\n        \n        // Foot\n        translate([0, 0, -25])\n        rotate([90, 0, 0])\n        scale([1.5, 1, 0.5])\n        cylinder(h=8, r1=2, r2=2);\n    }\n}\n\n// Aurora spines along back\nmodule aurora_spines() {\n    for(i = [0:12]) {\n        color(color_aurora)\n        translate([-25 + i*5, 0, 30 + 5*sin(i*30)])\n        rotate([0, 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=8 + 3*sin(i*45), r1=2, r2=0.5);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    aurorawyrm_body();\n    aurorawyrm_head();\n    aurorawyrm_wings();\n    aurorawyrm_legs();\n    aurora_spines();\n}",
    "renders": true
  },
  {
    "mythical_creature": "eclipsedrake",
    "openscad_code": "// Eclipsedrake - a black dragon whose wings show a solar eclipse motif\n// Wings are solid for printing, body printed upright with minimal overhangs\n\n$fn = 32;\n\n// Main assembly\nmodule eclipsedrake() {\n    // Body\n    color(\"darkslategray\") body();\n    \n    // Head\n    translate([0, 0, 35]) color(\"darkslategray\") head();\n    \n    // Tail\n    translate([0, 0, 0]) color(\"darkslategray\") tail();\n    \n    // Wings\n    translate([0, 0, 25]) color(\"black\") wings();\n    \n    // Legs\n    translate([8, 0, 10]) color(\"darkslategray\") leg();\n    translate([-8, 0, 10]) color(\"darkslategray\") leg();\n    translate([8, 0, 5]) color(\"darkslategray\") leg();\n    translate([-8, 0, 5]) color(\"darkslategray\") leg();\n}\n\n// Dragon body\nmodule body() {\n    union() {\n        // Main torso\n        for(i = [0:9]) {\n            translate([0, 0, 5 + i*2.5]) \n                scale([1 - i*0.05, 1 - i*0.05, 1])\n                cylinder(h=2.5, d1=18 - i*1.5, d2=18 - (i+1)*1.5);\n        }\n        \n        // Spine ridges\n        for(i = [0:7]) {\n            rotate([0, 0, i*45]) \n                translate([7, 0, 25 + i*2]) \n                cube([3, 1.5, 4], center=true);\n        }\n    }\n}\n\n// Dragon head\nmodule head() {\n    union() {\n        // Main head shape\n        scale([1.2, 0.9, 1]) sphere(d=15);\n        \n        // Snout\n        translate([7, 0, -2]) scale([1.5, 0.8, 0.8]) sphere(d=8);\n        \n        // Horns\n        for(i = [0:1]) {\n            mirror([i*2-1, 0, 0]) {\n                translate([5, 0, 6]) rotate([30, 0, 0]) \n                    cylinder(h=10, d1=4, d2=2);\n                translate([4, 0, 5]) rotate([45, 0, 0]) \n                    cylinder(h=8, d1=3, d2=1.5);\n            }\n        }\n        \n        // Eyes\n        for(i = [0:1]) {\n            mirror([i*2-1, 0, 0]) {\n                translate([4, 5, 2]) sphere(d=3);\n                translate([4.5, 5.5, 2]) color(\"red\") sphere(d=1.5);\n            }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    for(i = [0:15]) {\n        translate([0, 0, -i*3]) \n            rotate([0, 0, i*10]) \n            scale([1 - i*0.05, 1 - i*0.05, 1])\n            cylinder(h=3, d=12 - i*0.7);\n    }\n}\n\n// Wings with eclipse pattern\nmodule wings() {\n    for(side = [0:1]) {\n        mirror([side*2-1, 0, 0]) {\n            // Main wing membrane\n            translate([10, 0, 0]) rotate([0, 0, 90]) \n                linear_extrude(height=1.5) \n                polygon(points=[\n                    [0, 0], [20, 0], [25, 15], [22, 30], [15, 35], [8, 32], [3, 25], [0, 15]\n                ]);\n            \n            // Eclipse circles on wing\n            translate([18, 12, 1]) color(\"darkorange\") cylinder(h=0.5, d=8);\n            translate([18, 12, 1.2]) color(\"black\") cylinder(h=0.5, d=6);\n            translate([18, 12, 1.4]) color(\"yellow\") cylinder(h=0.5, d=4);\n            \n            // Wing bones\n            translate([10, 0, 0.75]) \n                for(i = [0:3]) {\n                    rotate([0, 0, i*25]) \n                        cylinder(h=25 - i*5, d=1.5);\n                }\n        }\n    }\n}\n\n// Dragon leg\nmodule leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, 5]) rotate([0, 30, 0]) \n            cylinder(h=8, d=3);\n        \n        // Lower leg\n        translate([0, 0, 0]) rotate([0, 0, 15]) \n            cylinder(h=7, d=2.5);\n        \n        // Foot\n        translate([0, 0, -3.5]) rotate([0, 0, 0]) \n            scale([1.5, 1, 0.5]) sphere(d=4);\n        \n        // Toes\n        for(i = [-1:1]) {\n            translate([i*2, 0, -5]) rotate([0, 0, i*10]) \n                cylinder(h=3, d=1.5);\n        }\n    }\n}\n\n// Create the eclipsedrake\neclipsedrake();",
    "renders": true
  },
  {
    "mythical_creature": "solarsnake",
    "openscad_code": "// SolarSnake - A mythical serpent that embodies the power of the sun\n// Features: Scaled body, solar frill, flame wings, and glowing spine ridges\n\n// Color constants\nSOLAR_GOLD = [1.0, 0.8, 0.2];\nSOLAR_ORANGE = [1.0, 0.5, 0.0];\nSOLAR_RED = [0.9, 0.2, 0.0];\nSOLAR_YELLOW = [1.0, 0.9, 0.3];\nDARK_SCALE = [0.3, 0.2, 0.1];\n\n// Main module\nmodule solar_snake() {\n    union() {\n        // Head with solar crown\n        translate([0, 0, 8]) rotate([0, 0, 0]) head();\n        \n        // Body segments\n        body();\n        \n        // Solar wings\n        translate([-5, 0, 15]) rotate([0, 15, 30]) solar_wing_left();\n        translate([5, 0, 15]) mirror([1, 0, 0]) rotate([0, 15, 30]) solar_wing_left();\n        \n        // Tail\n        translate([0, 0, -25]) tail();\n    }\n}\n\n// Head module with solar crown\nmodule head() {\n    color(SOLAR_GOLD) {\n        // Main head shape\n        scale([1.2, 0.8, 1]) sphere(4);\n        \n        // Snout\n        translate([3, 0, -1]) scale([1.5, 0.8, 0.7]) sphere(2);\n        \n        // Solar crown spikes\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) translate([4, 0, 2]) \n            color(SOLAR_ORANGE) cylinder(h=3, r1=0.5, r2=0, $fn=6);\n        }\n        \n        // Eyes\n        translate([2, 1.5, 1]) color(SOLAR_RED) sphere(0.8);\n        translate([2, -1.5, 1]) color(SOLAR_RED) sphere(0.8);\n    }\n}\n\n// Body with scales\nmodule body() {\n    for(i = [0:1:15]) {\n        translate([0, 0, 7 - i*2]) {\n            scale([1 - i*0.03, 1 - i*0.03, 0.8]) {\n                color(SOLAR_GOLD) sphere(3.5 - i*0.1);\n                \n                // Scale pattern\n                for(j = [0:45:315]) {\n                    rotate([0, 0, j]) translate([2.8, 0, 0.5]) \n                    color(DARK_SCALE) scale([1, 0.6, 0.3]) sphere(0.5);\n                }\n                \n                // Spine ridge\n                color(SOLAR_YELLOW) translate([0, 0, 2.5]) \n                scale([0.5, 0.5, 1]) cylinder(h=2, r1=0.8, r2=0.3);\n            }\n        }\n    }\n}\n\n// Solar wing with flame pattern\nmodule solar_wing_left() {\n    color(SOLAR_ORANGE) {\n        // Main wing membrane\n        translate([0, -8, 0]) rotate([0, 90, 0]) \n        linear_extrude(height=0.5) {\n            polygon(points=[\n                [0, 0], [10, 5], [15, 0], [12, -3], [8, -5], [4, -4], [0, 0]\n            ]);\n        }\n        \n        // Wing bones\n        for(i = [0:2:8]) {\n            color(SOLAR_RED) translate([i, -i*0.8, 0]) \n            rotate([90, 0, 0]) cylinder(h=0.4, r1=0.3, r2=0.1);\n        }\n        \n        // Solar flame tips\n        for(i = [0:30:150]) {\n            rotate([0, 0, i]) translate([12, -3, 0]) \n            color(SOLAR_YELLOW) cylinder(h=2, r1=0.4, r2=0, $fn=4);\n        }\n    }\n}\n\n// Tapered tail with solar pattern\nmodule tail() {\n    for(i = [0:1:12]) {\n        translate([0, 0, -i*1.5]) {\n            scale([1 - i*0.07, 1 - i*0.07, 0.9]) {\n                color(SOLAR_ORANGE) sphere(2 - i*0.15);\n                \n                // Tail segments\n                if(i % 3 == 0) {\n                    color(SOLAR_RED) translate([0, 0, -0.5]) \n                    cylinder(h=1, r1=1.5 - i*0.1, r2=1 - i*0.1);\n                }\n                \n                // Solar flame at tail tip\n                if(i == 12) {\n                    color(SOLAR_YELLOW) translate([0, 0, -1]) \n                    cylinder(h=3, r1=0.8, r2=0, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Create the solar snake\nscale([1.5, 1.5, 1.5]) solar_snake();",
    "renders": true
  },
  {
    "mythical_creature": "lunarbane",
    "openscad_code": "$fn = 64;\n\n// Lunarbanes are wolf-dragon hybrids that absorb moonlight\n// This model captures their crouched hunting stance with folded wings\n\n// Main body\ncolor(\"silver\")\nunion() {\n    // Torso - elongated oval\n    scale([1.5, 0.8, 1.2])\n    sphere(15);\n\n    // Head - wolf-like with dragon features\n    translate([25, 0, 5])\n    rotate([0, 15, 0])\n    union() {\n        // Snout\n        scale([2, 0.8, 0.8])\n        sphere(8);\n        \n        // Dragon crest\n        translate([-10, 0, 8])\n        scale([0.3, 2, 0.5])\n        cylinder(h = 15, r1 = 3, r2 = 1);\n        \n        // Eyes - glowing moonlight\n        translate([8, 6, 3])\n        color(\"lightblue\")\n        sphere(2);\n        translate([8, -6, 3])\n        color(\"lightblue\")\n        sphere(2);\n    }\n\n    // Legs - four muscular limbs\n    module leg(offset, angle) {\n        translate(offset)\n        rotate([0, 0, angle])\n        union() {\n            // Upper leg\n            translate([0, 0, -10])\n            scale([0.8, 0.8, 2])\n            cylinder(h = 15, r = 5);\n            \n            // Lower leg\n            translate([0, 0, -25])\n            rotate([30, 0, 0])\n            scale([0.7, 0.7, 1.8])\n            cylinder(h = 15, r = 4);\n            \n            // Paw\n            translate([0, 0, -35])\n            sphere(5);\n        }\n    }\n\n    // Front legs\n    leg([15, 10, -10], -30);\n    leg([15, -10, -10], 30);\n    \n    // Back legs\n    leg([-15, 8, -10], -15);\n    leg([-15, -8, -10], 15);\n\n    // Wings - folded against body\n    module wing(side) {\n        translate([0, side * 15, 10])\n        rotate([0, -20 * side, 0])\n        scale([1.2, 0.1, 0.8])\n        difference() {\n            // Main wing membrane\n            cylinder(h = 30, r1 = 15, r2 = 5);\n            \n            // Wing holes for moonlight absorption\n            for(i = [1:3]) {\n                translate([i * 7 - 15, 0, 5])\n                rotate([0, 90, 0])\n                cylinder(h = 3, r = 2);\n            }\n        }\n    }\n\n    wing(1);\n    wing(-1);\n\n    // Tail - long and serpentine\n    translate([-25, 0, 0])\n    rotate([0, 10, 0])\n    scale([3, 0.8, 0.8])\n    cylinder(h = 30, r1 = 8, r2 = 3);\n\n    // Lunar scales pattern\n    module lunar_scale(pos, size) {\n        translate(pos)\n        scale([size, size, 0.5])\n        color(\"lightgray\")\n        sphere(2);\n    }\n\n    // Add scales along spine\n    for(i = [-20:5:20]) {\n        lunar_scale([i, 0, 12 + 2 * sin(i * 10)], 1.5);\n    }\n\n    // Horns - crescent moon shaped\n    module horn(side) {\n        translate([5, side * 8, 12])\n        rotate([0, 30, side * 60])\n        scale([0.5, 0.5, 1])\n        color(\"white\")\n        difference() {\n            cylinder(h = 10, r = 3);\n            translate([0, 0, 5])\n            sphere(4);\n        }\n    }\n\n    horn(1);\n    horn(-1);\n}",
    "renders": true
  },
  {
    "mythical_creature": "cosmiccoil",
    "openscad_code": "// CosmicCoil - Mythical space serpent with nebula wings and star patterns\n// 80mm long, designed for FDM printing with no supports\n\n// Main parameters\nbody_length = 80;\nbody_radius = 6;\nwing_span = 40;\nneck_length = 15;\nhead_length = 12;\n\n// Colors\ncolor_body = \"navy\";\ncolor_wings = \"purple\";\ncolor_accents = \"gold\";\ncolor_stars = \"white\";\n\nmodule star(diameter) {\n    // Simple 6-point star primitive\n    union() {\n        cylinder(h = 0.4, d = diameter, $fn = 6);\n        rotate([0, 0, 30])\n            cylinder(h = 0.4, d = diameter * 0.7, $fn = 6);\n    }\n}\n\nmodule nebula_wing() {\n    color(color_wings)\n    difference() {\n        // Main wing membrane\n        union() {\n            scale([1, 0.8, 0.05])\n                sphere(d = wing_span);\n            // Wing extensions\n            for (i = [0:3]) {\n                rotate([0, 0, i * 25 - 37])\n                    translate([wing_span/2 - 5, 0, 0])\n                        scale([1.2, 0.6, 0.2])\n                            sphere(d = 10);\n            }\n        }\n        \n        // Cut holes for nebula pattern\n        for (i = [0:5]) {\n            rotate([0, 0, i * 20])\n                translate([wing_span/2 - 10, 0, 0])\n                    cylinder(h = 2, d = 6, $fn = 8);\n        }\n    }\n}\n\nmodule cosmic_body_segment(t) {\n    // Tapered body segment with scales\n    radius = body_radius * (1 - t * 0.3);\n    color(color_body)\n    union() {\n        // Main segment\n        cylinder(h = 5, d = radius * 2);\n        \n        // Scales\n        color(color_accents)\n        for (angle = [0:30:330]) {\n            rotate([0, 0, angle])\n                translate([radius * 0.8, 0, 2.5])\n                    scale([0.3, 0.2, 0.3])\n                        sphere(d = 2);\n        }\n    }\n}\n\nmodule head() {\n    color(color_body)\n    union() {\n        // Snout\n        translate([0, 0, head_length/2])\n            scale([1, 0.7, 1])\n                sphere(d = head_length);\n        \n        // Horns\n        color(color_accents)\n        for (side = [-1, 1]) {\n            translate([side * 3, 0, head_length - 2])\n                rotate([0, side * 30, 0])\n                    cylinder(h = 8, d1 = 2, d2 = 0.5);\n        }\n        \n        // Eyes\n        color(\"black\")\n        for (side = [-1, 1]) {\n            translate([side * 2.5, head_length/2, head_length/2])\n                sphere(d = 1.5);\n        }\n    }\n}\n\nmodule star_pattern() {\n    color(color_stars)\n    for (i = [0:12]) {\n        angle = i * 30;\n        radius = body_radius * 1.5 + sin(i * 2) * 2;\n        translate([cos(angle) * radius, sin(angle) * radius, i * 5])\n            star(1.5 + sin(i * 3) * 0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body coil\n    for (i = [0:15]) {\n        angle = i * 25;\n        radius = 15 - i * 0.8;\n        translate([cos(angle) * radius, sin(angle) * radius, i * 5])\n            rotate([0, 0, angle + 90])\n                cosmic_body_segment(i / 15.0);\n    }\n    \n    // Head at the end\n    translate([0, 0, 80])\n        rotate([0, 0, 0])\n            head();\n    \n    // Wings\n    translate([0, -10, 50])\n        rotate([0, 0, 90])\n            nebula_wing();\n    translate([0, 10, 50])\n        rotate([0, 0, -90])\n            mirror([1, 0, 0])\n                nebula_wing();\n    \n    // Star trail pattern along body\n    star_pattern();\n}",
    "renders": true
  },
  {
    "mythical_creature": "nebulawyrm",
    "openscad_code": "// Nebulawyrm – cosmic serpentine dragon of nebula dust and starlight\n// Scaled for 3D-printing: ~80 mm long, 60 mm wingspan, 30 mm high\n// No steep overhangs; all slopes ≤ 45°\n\n$fn = 36;               // smooth curves without excessive facets\n\n// -------------------------\n// MAIN ASSEMBLY\n// -------------------------\nunion() {\n    color(\"DarkSlateBlue\") {\n        body();\n        tail();\n    }\n\n    color(\"MidnightBlue\") {\n        head();\n    }\n\n    color(\"Indigo\") {\n        wings();\n    }\n\n    color(\"Gold\") {\n        star_spots();\n    }\n}\n\n// -------------------------\n// MODULES\n// -------------------------\nmodule body() {\n    difference() {\n        // Central elongated body\n        hull() {\n            translate([0, 0, 10]) sphere(d = 20);         // chest\n            translate([30, 0, 10]) sphere(d = 18);        // mid\n            translate([60, 0, 10]) sphere(d = 14);        // rear\n        }\n\n        // Undercuts removed for printability\n        translate([15, 0, -5]) cube([40, 30, 15], center = true);\n    }\n}\n\nmodule tail() {\n    for(i = [0 : 3]) {\n        translate([70 + i * 8, 0, 10 - i * 2])\n            rotate([0, 0, -i * 15])\n            scale([1 - i * 0.15, 1 - i * 0.15, 1 - i * 0.15])\n            sphere(d = 14 - i * 2);\n    }\n}\n\nmodule head() {\n    union() {\n        // Snout\n        translate([-15, 0, 18])\n            rotate([0, -30, 0])\n            cylinder(h = 25, d1 = 20, d2 = 10);\n\n        // Skull\n        translate([-5, 0, 25])\n            sphere(d = 22);\n\n        // Horns\n        for(side = [-1, 1]) {\n            translate([-8, side * 10, 32])\n                rotate([0, side * -20, 30 * side])\n                cylinder(h = 15, d1 = 6, d2 = 2);\n        }\n    }\n}\n\nmodule wings() {\n    // Left wing\n    wing_half();\n    // Right wing\n    mirror([0, 1, 0]) wing_half();\n}\n\nmodule wing_half() {\n    difference() {\n        // Membrane\n        hull() {\n            translate([25, 0, 20]) sphere(d = 6);     // shoulder\n            translate([10, 30, 35]) sphere(d = 4);    // tip\n            translate([40, 15, 25]) sphere(d = 5);    // rear\n        }\n\n        // Cut membrane holes (nebula voids)\n        for(p = [[20, 15, 28], [25, 20, 30], [15, 25, 32]]) {\n            translate(p)\n                sphere(d = 6);\n        }\n    }\n}\n\nmodule star_spots() {\n    // Tiny golden spheres scattered across body\n    spots = [\n        [5, 8, 20],\n        [35, -7, 22],\n        [60, 5, 18],\n        [20, -12, 15],\n        [45, 10, 12]\n    ];\n    for(p = spots) {\n        translate(p)\n            sphere(d = 2.5);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "galaxyserpent",
    "openscad_code": "$fn=32;\n\n// GalaxySerpent - cosmic dragon with starfield scales and nebula wings\n// 3D printable at 80mm wingspan\n\n// Main module\nmodule galaxyserpent() {\n    color(\"darkslateblue\") {\n        // Body segments\n        union() {\n            // Head\n            head();\n            \n            // Neck\n            neck();\n            \n            // Main body\n            body();\n            \n            // Tail\n            tail();\n            \n            // Wings\n            wings();\n            \n            // Starfield scales\n            scales();\n            \n            // Cosmic horns\n            horns();\n        }\n    }\n}\n\n// Head with star eyes\nmodule head() {\n    translate([0, 0, 15]) {\n        // Main head shape\n        scale([1.2, 0.8, 0.9]) sphere(8);\n        \n        // Snout\n        translate([5, 0, -2]) scale([1.5, 0.7, 0.6]) sphere(6);\n        \n        // Star eyes\n        color(\"gold\") {\n            translate([3, 4, 2]) sphere(1.5);\n            translate([3, -4, 2]) sphere(1.5);\n        }\n        \n        // Nostrils\n        translate([7, 2, -1]) cylinder(h=2, r=1);\n        translate([7, -2, -1]) cylinder(h=2, r=1);\n    }\n}\n\n// Flexible neck\nmodule neck() {\n    for(i=[0:9]) {\n        rotate([0, i*3, 0]) \n            translate([-i*1.5, 0, 15-i*0.8])\n            scale([1-i*0.05, 1-i*0.05, 1-i*0.05])\n            sphere(6-i*0.3);\n    }\n}\n\n// Serpentine body\nmodule body() {\n    for(i=[0:19]) {\n        rotate([0, i*8, 0]) \n            translate([-i*2.5, 5*sin(i*20), 10-i*0.5])\n            scale([1-i*0.03, 1-i*0.03, 1-i*0.03])\n            sphere(5-i*0.2);\n    }\n}\n\n// Tapering tail\nmodule tail() {\n    for(i=[0:14]) {\n        rotate([0, -i*12, 0]) \n            translate([-50-i*1.8, 8*sin(i*25), 5-i*0.3])\n            scale([1-i*0.05, 1-i*0.05, 1-i*0.05])\n            sphere(4-i*0.25);\n    }\n}\n\n// Nebula wings with star patterns\nmodule wings() {\n    color(\"midnightblue\") {\n        // Left wing\n        translate([-20, 0, 12]) rotate([0, -20, -30]) {\n            difference() {\n                scale([25, 15, 2]) sphere(1);\n                // Wing membrane holes\n                for(j=[0:8]) {\n                    translate([j*2-10, 5*sin(j*40), 0])\n                    sphere(1.5);\n                }\n            }\n        }\n        \n        // Right wing\n        translate([-20, 0, 12]) rotate([0, -20, 30]) {\n            difference() {\n                scale([25, 15, 2]) sphere(1);\n                for(j=[0:8]) {\n                    translate([j*2-10, 5*sin(j*40), 0])\n                    sphere(1.5);\n                }\n            }\n        }\n    }\n}\n\n// Starfield scales\nmodule scales() {\n    color(\"silver\") {\n        // Body scales\n        for(i=[0:29]) {\n            angle = i*12;\n            offset = i*2.5;\n            for(j=[0:5]) {\n                rotate([0, angle, j*60]) \n                    translate([-offset, 5*sin(i*20) + 6*cos(j*60), 10-i*0.4])\n                    sphere(0.8);\n            }\n        }\n        \n        // Tail scales\n        for(i=[30:44]) {\n            angle = -i*12;\n            offset = 50+(i-30)*1.8;\n            for(j=[0:4]) {\n                rotate([0, angle, j*90]) \n                    translate([-offset, 8*sin(i*25) + 5*cos(j*90), 5-i*0.3])\n                    sphere(0.7);\n            }\n        }\n    }\n}\n\n// Cosmic horns\nmodule horns() {\n    color(\"indigo\") {\n        // Left horn\n        translate([2, 6, 20]) {\n            rotate([0, 30, -45]) \n                cylinder(h=12, r1=2, r2=0.5);\n        }\n        \n        // Right horn\n        translate([2, -6, 20]) {\n            rotate([0, 30, 45]) \n                cylinder(h=12, r1=2, r2=0.5);\n        }\n        \n        // Central horn\n        translate([0, 0, 22]) {\n            rotate([0, 15, 0]) \n                cylinder(h=15, r1=1.5, r2=0.3);\n        }\n    }\n}\n\n// Generate the creature\ngalaxyserpent();",
    "renders": true
  },
  {
    "mythical_creature": "cometdrake",
    "openscad_code": "// Cometdrake - A mythical celestial dragon with comet-like features\n// Wings with star patterns, fiery tail, and crystalline horns\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main colors\ncolor_drake = [0.1, 0.2, 0.4];      // Deep space blue\ncolor_fire = [1, 0.3, 0];           // Fiery orange-red\ncolor_crystal = [0.7, 0.9, 1];      // Ice crystal blue\ncolor_stars = [1, 1, 0.8];          // Starlight yellow\n\n// Overall scale for 3D printing\nscale_factor = 1.5;\n\nmodule cometdrake() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Main body - elongated teardrop shape\n        union() {\n            // Central body\n            color(color_drake)\n            translate([0, 0, 10])\n            scale([1, 0.6, 2])\n            sphere(10);\n            \n            // Head section\n            color(color_drake)\n            translate([0, 0, 30])\n            scale([0.8, 0.6, 1.2])\n            sphere(8);\n            \n            // Snout\n            color(color_drake)\n            translate([0, 0, 38])\n            rotate([0, 20, 0])\n            scale([0.4, 0.3, 1])\n            cylinder(h=8, r1=3, r2=1);\n            \n            // Chest scales pattern\n            for(i = [0:5]) {\n                color([color_drake[0]+0.1, color_drake[1]+0.1, color_drake[2]+0.1])\n                rotate([0, 0, i*60])\n                translate([5, 0, 25-i*2])\n                scale([1, 0.8, 0.3])\n                sphere(2);\n            }\n        }\n        \n        // Wings - comet-like with star patterns\n        module wing(side) {\n            mirror([side, 0, 0]) {\n                // Main wing membrane\n                color(color_drake)\n                translate([-10, 0, 25])\n                rotate([0, -30, 0])\n                scale([2, 3, 0.2])\n                sphere(5);\n                \n                // Wing struts\n                for(i = [1:3]) {\n                    color([color_drake[0]*0.8, color_drake[1]*0.8, color_drake[2]*0.8])\n                    translate([-5-i*3, 0, 25-i*3])\n                    rotate([0, -20-i*5, 0])\n                    scale([0.1, 0.1, 1.5])\n                    cylinder(h=10, r=0.5);\n                }\n                \n                // Star patterns on wings\n                for(i = [0:12]) {\n                    angle = i*30;\n                    radius = 3 + sin(i*5)*1.5;\n                    color(color_stars)\n                    translate([-8 + cos(angle)*radius, sin(angle)*radius, 26])\n                    sphere(0.5);\n                }\n            }\n        }\n        \n        wing(1);   // Right wing\n        wing(-1);  // Left wing\n        \n        // Horns - crystalline formations\n        module horn(x_pos, z_pos, angle) {\n            color(color_crystal)\n            translate([x_pos, 0, z_pos])\n            rotate([0, angle, 0])\n            cylinder(h=8, r1=2, r2=0.5);\n            \n            // Horn crystals\n            for(i = [0:3]) {\n                color([color_crystal[0], color_crystal[1]-i*0.1, color_crystal[2]])\n                translate([x_pos + sin(i*45)*0.5, 0, z_pos + i*2])\n                rotate([0, angle, i*30])\n                scale([0.3, 0.3, 0.3])\n                cube([1, 1, 2], center=true);\n            }\n        }\n        \n        horn(4, 35, -30);   // Right horn\n        horn(-4, 35, -30);  // Left horn\n        \n        // Comet tail - segmented with fire effect\n        module tail_segment(pos, size) {\n            color([color_fire[0], color_fire[1]*pos/5, color_fire[2]*pos/5])\n            translate([0, 0, 10-pos*5])\n            scale([size, size, size])\n            sphere(3+pos);\n            \n            // Tail flame wisps\n            for(i = [0:4]) {\n                color([1, 0.5+pos*0.1, 0.2])\n                rotate([0, i*72, 0])\n                translate([0, 0, 10-pos*5])\n                scale([0.5, 0.5, 2+pos])\n                cylinder(h=3, r1=1, r2=0.1);\n            }\n        }\n        \n        for(i = [1:5]) {\n            tail_segment(i, 1-i*0.15);\n        }\n        \n        // Legs - sturdy for landing\n        module leg(side, front) {\n            translate([side*5, front*3, 5])\n            rotate([0, 0, side*10])\n            union() {\n                // Upper leg\n                color(color_drake)\n                rotate([45, 0, 0])\n                cylinder(h=6, r=1.5);\n                \n                // Lower leg\n                color(color_drake)\n                translate([0, 4, -2])\n                rotate([30, 0, 0])\n                cylinder(h=5, r=1.2);\n                \n                // Foot\n                color(color_drake)\n                translate([0, 6, -5])\n                scale([2, 1, 0.5])\n                sphere(1.5);\n            }\n        }\n        \n        leg(1, 1);   // Front right\n        leg(-1, 1);  // Front left\n        leg(1, -1);  // Back right\n        leg(-1, -1); // Back left\n        \n        // Eyes - glowing orbs\n        module eye(x_pos) {\n            color(color_stars)\n            translate([x_pos, 3, 34])\n            sphere(1);\n            \n            // Pupil\n            color([0, 0, 0])\n            translate([x_pos*1.1, 3.5, 35])\n            sphere(0.5);\n        }\n        \n        eye(2);   // Right eye\n        eye(-2);  // Left eye\n        \n        // Celestial markings on body\n        for(i = [0:8]) {\n            angle = i*45;\n            color([color_stars[0], color_stars[1], color_stars[2], 0.7])\n            translate([cos(angle)*6, sin(angle)*4, 20+sin(i*2)*3])\n            sphere(0.8);\n        }\n    }\n}\n\n// Generate the complete cometdrake\ncometdrake();",
    "renders": true
  },
  {
    "mythical_creature": "meteorwyrm",
    "openscad_code": "// Meteorwyrm - a cosmic dragon formed from meteoric rock and starlight\n// Realistic style, medium complexity, 3D printable\n\n$fn = 32;\nscale_factor = 0.5;  // Scale to ~75mm length\n\n// Main body\nmodule meteorwyrm_body() {\n    color(\"DarkSlateGray\")\n    union() {\n        // Head\n        translate([0, 0, 15])\n        scale([1.2, 1, 1.3])\n        sphere(8);\n        \n        // Neck\n        translate([0, 0, 10])\n        cylinder(h=10, r1=6, r2=8);\n        \n        // Main torso\n        translate([0, 0, 0])\n        scale([1.5, 1, 1.2])\n        sphere(12);\n        \n        // Tail segments\n        for(i = [1:6]) {\n            translate([0, 0, -i*8])\n            scale([1.5 - i*0.2, 1 - i*0.1, 1.2 - i*0.15])\n            sphere(12 - i*1.5);\n        }\n    }\n}\n\n// Wings made of crystallized starlight\nmodule meteorwyrm_wing() {\n    color(\"MediumSlateBlue\")\n    union() {\n        // Wing arm\n        translate([0, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=25, r1=2, r2=1);\n        \n        // Wing membrane segments\n        for(i = [0:3]) {\n            translate([5 + i*5, 0, -5 - i*2])\n            rotate([0, 15 + i*10, 0])\n            scale([0.8, 1, 0.3])\n            sphere(8);\n        }\n        \n        // Wing crystals\n        for(i = [0:5]) {\n            translate([10 + i*3, 0, random(-2, 2)])\n            color(\"LightCyan\")\n            scale([0.5, 2, 0.5])\n            rotate([0, 90, 0])\n            cylinder(h=3, r1=2, r2=0.5);\n        }\n    }\n}\n\n// Horns made of meteoric iron\nmodule meteorwyrm_horns() {\n    color(\"DimGray\")\n    union() {\n        // Left horn\n        translate([6, 4, 22])\n        rotate([10, -15, 0])\n        cylinder(h=12, r1=2, r2=1);\n        \n        // Right horn\n        translate([6, -4, 22])\n        rotate([10, 15, 0])\n        cylinder(h=12, r1=2, r2=1);\n        \n        // Horn tips\n        translate([7, 4, 33])\n        rotate([10, -15, 0])\n        cone(3, 1);\n        \n        translate([7, -4, 33])\n        rotate([10, 15, 0])\n        cone(3, 1);\n    }\n}\n\n// Eyes glowing with cosmic fire\nmodule meteorwyrm_eyes() {\n    color(\"Gold\")\n    union() {\n        translate([7, 3, 18])\n        sphere(1.5);\n        \n        translate([7, -3, 18])\n        sphere(1.5);\n    }\n}\n\n// Scales pattern on back\nmodule meteorwyrm_scales() {\n    color(\"SlateBlue\")\n    for(i = [0:5]) {\n        for(j = [0:3]) {\n            translate([random(-5, 5), random(-3, 3), 12 - i*3])\n            scale([1, 0.7, 0.3])\n            sphere(2);\n        }\n    }\n}\n\n// Meteor trail effect\nmodule meteor_trail() {\n    color(\"MediumPurple\")\n    difference() {\n        translate([0, 0, -50])\n        scale([1, 1, 3])\n        sphere(15);\n        \n        translate([0, 0, -45])\n        scale([0.8, 0.8, 2.8])\n        sphere(14);\n    }\n}\n\n// Helper module for cone\nmodule cone(h, r) {\n    cylinder(h=h, r1=r, r2=0);\n}\n\n// Random helper\nfunction random(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Assemble the meteorwyrm\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    meteor_trail();\n    \n    meteorwyrm_body();\n    \n    // Left wing\n    translate([10, 15, 10])\n    rotate([0, 0, -30])\n    meteorwyrm_wing();\n    \n    // Right wing\n    translate([10, -15, 10])\n    rotate([0, 0, 30])\n    mirror([0, 1, 0])\n    meteorwyrm_wing();\n    \n    meteorwyrm_horns();\n    meteorwyrm_eyes();\n    meteorwyrm_scales();\n}",
    "renders": true
  },
  {
    "mythical_creature": "stardusthydra",
    "openscad_code": "// StardustHydra - 3D printable mythical creature\n// Multiple serpentine heads with star-filled wings\n// Scale: ~80mm wingspan\n\n$fn = 32;\n\nmodule hydra_head(scale = 1, angle = 0) {\n    color(\"darkslateblue\") {\n        union() {\n            // Main head\n            translate([0, 0, 0])\n                scale([scale, scale, scale * 1.2])\n                sphere(5);\n            \n            // Snout\n            translate([0, 4*scale, -2*scale])\n                scale([0.8*scale, 0.6*scale, 0.6*scale])\n                sphere(4);\n            \n            // Horns\n            translate([3*scale, 2*scale, 4*scale])\n                rotate([30, 0, 30])\n                cylinder(h=6*scale, r1=1.2*scale, r2=0.2*scale);\n                \n            translate([-3*scale, 2*scale, 4*scale])\n                rotate([30, 0, -30])\n                cylinder(h=6*scale, r1=1.2*scale, r2=0.2*scale);\n            \n            // Eyes\n            translate([2*scale, 3.5*scale, 1*scale])\n                scale([0.4*scale, 0.2*scale, 0.2*scale])\n                color(\"gold\") sphere(1);\n                \n            translate([-2*scale, 3.5*scale, 1*scale])\n                scale([0.4*scale, 0.2*scale, 0.2*scale])\n                color(\"gold\") sphere(1);\n        }\n    }\n}\n\nmodule hydra_neck(length = 20, thickness = 3) {\n    color(\"midnightblue\") {\n        union() {\n            for(i = [0:5]) {\n                translate([0, 0, -i*length/6])\n                    rotate([i*5, 0, 0])\n                    cylinder(h=length/6 + 0.5, r1=thickness - i*0.2, r2=thickness - (i+1)*0.2);\n            }\n        }\n    }\n}\n\nmodule star_pattern() {\n    color(\"lightsteelblue\") {\n        for(i = [0:7]) {\n            rotate([0, 0, i*45])\n            translate([8, 0, 0])\n            sphere(0.8);\n        }\n    }\n}\n\nmodule stardust_wing() {\n    color(\"slateblue\") {\n        difference() {\n            // Main wing shape\n            union() {\n                translate([0, 0, -2])\n                    cube([20, 2, 4], center=true);\n                    \n                translate([10, 0, 0])\n                    rotate([0, 30, 0])\n                    cube([15, 2, 4], center=true);\n                    \n                translate([18, 0, 0])\n                    rotate([0, 60, 0])\n                    cube([12, 2, 3], center=true);\n                    \n                translate([25, 0, 0])\n                    rotate([0, 90, 0])\n                    cube([8, 1.5, 2], center=true);\n            }\n            \n            // Cut wing membrane holes\n            for(i = [1:3]) {\n                translate([i*7, 0, 0])\n                    rotate([0, i*15, 0])\n                    cube([8, 3, 5], center=true);\n            }\n        }\n    }\n    \n    // Stardust particles\n    star_pattern();\n}\n\n// Main body\ncolor(\"royalblue\") {\n    union() {\n        // Torso\n        translate([0, 0, 0])\n            scale([1.2, 1, 1.5])\n            sphere(8);\n            \n        // Tail\n        translate([0, -15, -5])\n            rotate([15, 0, 0])\n            cylinder(h=25, r1=6, r2=2);\n    }\n}\n\n// Three hydra heads\nunion() {\n    // Center head\n    translate([0, 12, 8])\n        hydra_neck(15, 3);\n    translate([0, 27, 8])\n        hydra_head(1, 0);\n    \n    // Left head\n    translate([-8, 10, 5])\n        rotate([0, 0, -20])\n        hydra_neck(12, 2.5);\n    translate([-15, 20, 3])\n        rotate([0, 0, -20])\n        hydra_head(0.9, -20);\n    \n    // Right head\n    translate([8, 10, 5])\n        rotate([0, 0, 20])\n        hydra_neck(12, 2.5);\n    translate([15, 20, 3])\n        rotate([0, 0, 20])\n        hydra_head(0.9, 20);\n}\n\n// Stardust wings\ntranslate([0, -5, 10])\n    rotate([0, 0, 0])\n    stardust_wing();\n    \ntranslate([0, -5, 10])\n    rotate([0, 180, 0])\n    stardust_wing();\n\n// Legs\nmodule leg() {\n    color(\"navy\") {\n        union() {\n            translate([0, 0, -5])\n                cylinder(h=10, r=2);\n            translate([0, -2, -10])\n                sphere(2.5);\n        }\n    }\n}\n\n// Four legs\ntranslate([5, -5, -8])\n    leg();\ntranslate([-5, -5, -8])\n    leg();\ntranslate([5, 5, -8])\n    leg();\ntranslate([-5, 5, -8])\n    leg();",
    "renders": true
  },
  {
    "mythical_creature": "blackholewyrm",
    "openscad_code": "// Blackholewyrm - A cosmic serpent that devours light\n// Features: Event horizon coils, gravitational wings, void eyes, spacetime tail\n\n$fn = 32;  // Smooth curves for 3D printing\nthickness = 2;  // Wall thickness for printing\n\nmodule body_coil(radius, height, turns) {\n    // Create spiral coils representing spacetime distortion\n    for (i = [0:5:360*turns]) {\n        angle = i;\n        x = radius * cos(angle);\n        z = height * (i / (360*turns)) - height/2;\n        y = radius * sin(angle);\n        \n        translate([x, y, z])\n            rotate([0, 0, angle])\n            sphere(r=thickness * 1.5);\n    }\n}\n\nmodule gravitational_wings() {\n    // Wings that bend spacetime around the wyrm\n    color(\"darkblue\", 0.7)\n    for (side = [-1, 1]) {\n        translate([side * 15, 0, 5])\n            rotate([0, side * 30, 0])\n            scale([1, 0.3, 0.7])\n            sphere(r=12);\n        \n        // Wing membrane supports\n        for (i = [0:30:120]) {\n            translate([side * 15, 0, 5])\n                rotate([i, side * 30, 0])\n                cylinder(h=15, r1=thickness, r2=1);\n        }\n    }\n}\n\nmodule void_eyes() {\n    // Eyes that absorb all light\n    color(\"black\")\n    for (side = [-1, 1]) {\n        translate([side * 8, 15, 0])\n            scale([1, 1, 0.5])\n            sphere(r=3);\n        \n        // Event horizon ring around eyes\n        color(\"purple\", 0.5)\n        translate([side * 8, 15, 0])\n            rotate_extrude()\n            translate([2.5, 0, 0])\n            circle(r=0.5);\n    }\n}\n\nmodule accretion_jaw() {\n    // Jaw that creates gravitational lensing\n    color(\"darkpurple\")\n    translate([0, 20, 0])\n        scale([1, 1.2, 0.6])\n        sphere(r=8);\n    \n    // Inner void\n    difference() {\n        translate([0, 20, 0])\n            scale([1, 1.2, 0.6])\n            sphere(r=7);\n        translate([0, 21, 0])\n            scale([0.8, 0.8, 0.8])\n            sphere(r=6);\n    }\n}\n\nmodule spacetime_tail() {\n    // Tail that dissipates into spacetime\n    color(\"darkblue\")\n    for (i = [0:10:100]) {\n        scale_factor = 1 - (i / 100);\n        translate([0, -20 - i, sin(i*3) * 2])\n            scale([scale_factor, scale_factor, scale_factor])\n            sphere(r=6 * scale_factor);\n    }\n}\n\nmodule event_horizon_scales() {\n    // Scales that distort reality\n    color(\"black\", 0.8)\n    for (i = [0:20:360]) {\n        angle = i;\n        x = 12 * cos(angle);\n        y = 12 * sin(angle);\n        \n        translate([x, y, 0])\n            rotate([90, 0, angle])\n            scale([1, 0.3, 0.5])\n            cylinder(h=3, r1=2, r2=1);\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body\n    color(\"darkblue\", 0.9)\n    body_coil(radius=10, height=30, turns=2);\n    \n    // Head\n    translate([0, 15, 0])\n        scale([1.2, 1.3, 1])\n        sphere(r=8);\n    \n    // Void eyes\n    void_eyes();\n    \n    // Accretion disk jaw\n    accretion_jaw();\n    \n    // Gravitational wings\n    gravitational_wings();\n    \n    // Spacetime tail\n    spacetime_tail();\n    \n    // Event horizon scales along body\n    event_horizon_scales();\n}\n\n// Base for 3D printing stability\ncolor(\"black\", 0.5)\ntranslate([0, 0, -25])\n    cylinder(h=3, r=15);",
    "renders": true
  },
  {
    "mythical_creature": "novaswyrm",
    "openscad_code": "// Novaswyrm - a celestial serpent-dragon with starlight wings\n// Designed for 3D printing - no overhangs, 5mm wall thickness\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    color(\"midnightblue\")\n    union() {\n        // Head\n        translate([0, 0, 15])\n        scale([1.2, 1, 1.3])\n        sphere(8);\n        \n        // Neck\n        translate([0, 0, 8])\n        cylinder(h=7, r1=6, r2=4);\n        \n        // Torso segments\n        for(i=[0:3]) {\n            translate([0, 0, 2-i*4])\n            scale([1.2-i*0.1, 1, 1])\n            cylinder(h=4, r1=4-i*0.5, r2=4-i*0.5);\n        }\n        \n        // Tail\n        for(i=[0:5]) {\n            translate([0, 0, -6-i*3])\n            scale([1-i*0.15, 1, 1])\n            cylinder(h=3, r1=3-i*0.5, r2=2.5-i*0.5);\n        }\n    }\n}\n\n// Starlight wings\nmodule wings() {\n    color(\"royalblue\")\n    union() {\n        // Left wing\n        translate([-8, 0, 10])\n        rotate([0, 0, -45])\n        for(i=[0:3]) {\n            translate([-i*3, 0, i*2])\n            cube([3, 1, 0.5], center=true);\n        }\n        \n        // Right wing\n        translate([8, 0, 10])\n        rotate([0, 0, 45])\n        mirror([1, 0, 0])\n        for(i=[0:3]) {\n            translate([-i*3, 0, i*2])\n            cube([3, 1, 0.5], center=true);\n        }\n        \n        // Wing membranes\n        color(\"deepskyblue\")\n        for(side=[-1, 1]) {\n            translate([side*6, 0, 11])\n            rotate([0, 0, side*30])\n            scale([1, 0.3, 1])\n            sphere(6);\n        }\n    }\n}\n\n// Horns\nmodule horns() {\n    color(\"slateblue\")\n    union() {\n        // Left horn\n        translate([-4, 0, 20])\n        rotate([0, 30, -45])\n        cylinder(h=8, r1=2, r2=1);\n        \n        // Right horn\n        translate([4, 0, 20])\n        rotate([0, 30, 45])\n        cylinder(h=8, r1=2, r2=1);\n    }\n}\n\n// Celestial scales pattern\nmodule scales() {\n    color(\"indigo\")\n    for(seg=[0:2]) {\n        for(angle=[0:60:300]) {\n            rotate([0, 0, angle])\n            translate([3+seg*2, 0, 10-seg*4])\n            scale([0.8, 0.3, 0.3])\n            sphere(2);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(\"gold\")\n    union() {\n        translate([-3, 4, 18])\n        sphere(1.5);\n        translate([3, 4, 18])\n        sphere(1.5);\n    }\n}\n\n// Nova core (chest crystal)\nmodule nova_core() {\n    color(\"cyan\")\n    translate([0, 3, 10])\n    rotate([45, 0, 0])\n    cylinder(h=3, r1=2, r2=3);\n}\n\n// Assembly\nunion() {\n    body();\n    wings();\n    horns();\n    scales();\n    eyes();\n    nova_core();\n}",
    "renders": true
  },
  {
    "mythical_creature": "supernovaserpent",
    "openscad_code": "// Supernovaserpent - a cosmic dragon born from stellar explosion\n// Medium complexity realistic style with 3D printable features\n\n$fn = 32; // Smooth curves for realism\nscale_factor = 1; // Adjust overall size\n\nmodule supernovaserpent() {\n    // Main serpent body\n    color(\"DarkRed\") \n    union() {\n        // Head with cosmic energy\n        translate([0, 0, 15]) \n        rotate([0, 0, 0])\n        union() {\n            // Skull base\n            sphere(8);\n            \n            // Snout extension\n            translate([6, 0, 0]) \n            scale([1.5, 0.8, 0.8]) \n            sphere(5);\n            \n            // Horns - stellar formations\n            translate([2, 6, 4]) \n            rotate([30, 0, 45]) \n            cylinder(h=10, r1=2, r2=0.5);\n            \n            translate([2, -6, 4]) \n            rotate([30, 0, -45]) \n            cylinder(h=10, r1=2, r2=0.5);\n            \n            // Eyes - glowing stellar cores\n            translate([7, 3, 2]) \n            color(\"Yellow\") \n            sphere(1.5);\n            \n            translate([7, -3, 2]) \n            color(\"Yellow\") \n            sphere(1.5);\n        }\n        \n        // Serpentine body segments\n        body_segments();\n        \n        // Wings - solar flare membranes\n        wings();\n        \n        // Tail with cosmic flame\n        tail();\n    }\n}\n\nmodule body_segments() {\n    // Create 8 body segments with decreasing size\n    for(i = [1:8]) {\n        translate([-i*6, 0, 15 - i*1.5]) \n        rotate([0, i*5, 0]) \n        scale([1 - i*0.08, 1 - i*0.08, 1 - i*0.08]) \n        union() {\n            // Main body segment\n            sphere(7);\n            \n            // Scale plating\n            for(j = [0:5]) {\n                rotate([0, 0, j*60]) \n                translate([0, 5, 0]) \n                color(\"FireBrick\") \n                scale([2, 0.5, 1]) \n                sphere(2);\n            }\n        }\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-5, 8, 18]) \n    rotate([0, 0, 20]) \n    color(\"DarkOrange\") \n    difference() {\n        union() {\n            // Wing membrane\n            scale([1.5, 2, 0.2]) \n            sphere(8);\n            \n            // Wing bones\n            for(k = [0:3]) {\n                rotate([0, 0, k*25]) \n                translate([0, 0, -1]) \n                cylinder(h=15, r1=0.5, r2=0.2);\n            }\n        }\n        // Cut holes for membrane texture\n        for(h = [0:4]) {\n            translate([h*3 - 6, h*2 - 4, 0]) \n            sphere(1.2);\n        }\n    }\n    \n    // Right wing (mirror of left)\n    translate([-5, -8, 18]) \n    rotate([0, 0, -20]) \n    mirror([0, 1, 0]) \n    color(\"DarkOrange\") \n    difference() {\n        union() {\n            scale([1.5, 2, 0.2]) \n            sphere(8);\n            \n            for(k = [0:3]) {\n                rotate([0, 0, k*25]) \n                translate([0, 0, -1]) \n                cylinder(h=15, r1=0.5, r2=0.2);\n            }\n        }\n        for(h = [0:4]) {\n            translate([h*3 - 6, h*2 - 4, 0]) \n            sphere(1.2);\n        }\n    }\n}\n\nmodule tail() {\n    // Cosmic flame tail\n    translate([-55, 0, 8]) \n    rotate([0, 0, -20]) \n    color(\"Red\") \n    union() {\n        // Main tail segments\n        for(t = [0:5]) {\n            translate([-t*3, sin(t*30)*2, -t*1.5]) \n            scale([1 - t*0.15, 1 - t*0.15, 1 - t*0.15]) \n            sphere(4);\n        }\n        \n        // Flame tendrils\n        color(\"Orange\") \n        for(f = [0:4]) {\n            rotate([0, 0, f*90]) \n            translate([-20, 0, 0]) \n            scale([0.3, 0.3, 3]) \n            cylinder(h=15 + f*2, r1=2, r2=0);\n        }\n    }\n}\n\n// Generate the supernovaserpent\nsupernovaserpent();",
    "renders": true
  },
  {
    "mythical_creature": "quasarcoil",
    "openscad_code": "// Quasarcoil - Cosmic serpentine dragon with stellar wings\n// Realistic style, medium complexity\n\n$fn = 48;\nscale_factor = 0.4;\n\n// Main body assembly\nmodule quasarcoil() {\n    // Body segments in serpentine S-curve\n    for (i = [0:10]) {\n        translate([\n            sin(i * 15) * 15, \n            cos(i * 15) * 8, \n            i * 6\n        ]) {\n            rotate([0, 0, i * 30]) {\n                scale([1 - i * 0.05, 1 - i * 0.05, 1]) {\n                    body_segment(i);\n                }\n            }\n        }\n    }\n    \n    // Head\n    translate([0, 0, 65]) {\n        rotate([0, 0, 0]) {\n            head();\n        }\n    }\n    \n    // Wings\n    translate([0, 0, 40]) {\n        rotate([0, 0, 90]) {\n            wings();\n        }\n    }\n    \n    // Tail\n    translate([sin(11 * 15) * 15, cos(11 * 15) * 8, 66]) {\n        tail();\n    }\n}\n\n// Scaled body segment\nmodule body_segment(index) {\n    color(\"midnightblue\") {\n        // Main segment\n        difference() {\n            sphere(d = 12 - index * 0.5);\n            // Scale pattern recesses\n            for (j = [0:5]) {\n                rotate([j * 60, 0, 0]) {\n                    translate([0, 0, -2]) {\n                        cylinder(h = 4, d1 = 3, d2 = 5);\n                    }\n                }\n            }\n        }\n        \n        // Luminescent spots\n        color(\"gold\") {\n            for (k = [0:7]) {\n                rotate([k * 45, 30, 0]) {\n                    translate([5, 0, 0]) {\n                        sphere(d = 1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Dragon head\nmodule head() {\n    color(\"navy\") {\n        difference() {\n            union() {\n                // Main head shape\n                scale([1.2, 0.8, 1]) sphere(d = 15);\n                \n                // Snout extension\n                translate([6, 0, 0]) {\n                    scale([1.5, 0.6, 0.8]) sphere(d = 8);\n                }\n            }\n            \n            // Eye sockets\n            translate([2, 4, 3]) sphere(d = 3);\n            translate([2, -4, 3]) sphere(d = 3);\n            \n            // Nostrils\n            translate([8, 2, -2]) rotate([0, 90, 0]) cylinder(h = 3, d = 2);\n            translate([8, -2, -2]) rotate([0, 90, 0]) cylinder(h = 3, d = 2);\n        }\n        \n        // Eyes\n        color(\"cyan\") {\n            translate([2, 4, 3]) sphere(d = 2.5);\n            translate([2, -4, 3]) sphere(d = 2.5);\n        }\n        \n        // Horns\n        color(\"slateblue\") {\n            translate([0, 0, 8]) {\n                rotate([30, 0, 45]) cylinder(h = 8, d1 = 4, d2 = 2);\n            }\n            translate([0, 0, 8]) {\n                rotate([30, 0, -45]) cylinder(h = 8, d1 = 4, d2 = 2);\n            }\n        }\n    }\n}\n\n// Stellar wings\nmodule wings() {\n    color(\"indigo\") {\n        // Left wing\n        translate([-8, 0, 0]) {\n            rotate([0, 30, 0]) {\n                difference() {\n                    // Main wing membrane\n                    scale([1, 2, 0.5]) sphere(d = 20);\n                    \n                    // Wing holes (star patterns)\n                    for (i = [0:4]) {\n                        for (j = [0:2]) {\n                            translate([-5 + i * 3, -8 + j * 4, 0]) {\n                                sphere(d = 2);\n                            }\n                        }\n                    }\n                }\n                \n                // Wing bones\n                color(\"blue\") {\n                    for (k = [0:3]) {\n                        rotate([0, 0, k * 30 - 30]) {\n                            translate([0, 0, 0]) {\n                                scale([0.5, 1, 0.5]) cylinder(h = 15, d = 1.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0]) {\n            translate([-8, 0, 0]) {\n                rotate([0, 30, 0]) {\n                    difference() {\n                        scale([1, 2, 0.5]) sphere(d = 20);\n                        \n                        for (i = [0:4]) {\n                            for (j = [0:2]) {\n                                translate([-5 + i * 3, -8 + j * 4, 0]) {\n                                    sphere(d = 2);\n                                }\n                            }\n                        }\n                    }\n                    \n                    color(\"blue\") {\n                        for (k = [0:3]) {\n                            rotate([0, 0, k * 30 - 30]) {\n                                translate([0, 0, 0]) {\n                                    scale([0.5, 1, 0.5]) cylinder(h = 15, d = 1.5);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Serpentine tail\nmodule tail() {\n    color(\"midnightblue\") {\n        for (i = [0:5]) {\n            translate([sin(i * 20) * 3, cos(i * 20) * 2, -i * 5]) {\n                scale([1 - i * 0.1, 1 - i * 0.1, 1]) {\n                    sphere(d = 8 - i);\n                }\n            }\n        }\n    }\n}\n\n// Scale and render\nscale([scale_factor, scale_factor, scale_factor]) {\n    quasarcoil();\n}",
    "renders": true
  },
  {
    "mythical_creature": "voidrattler",
    "openscad_code": "// Voidrattler - a serpentine void creature with crystalline rattles and void essence\n// Model is ~80mm tall, designed for 3D printing with minimal overhangs\n\n$fn = 32;\n\n// Main module for the complete voidrattler\nmodule voidrattler() {\n    // Main body - serpentine form\n    color([0.1, 0.05, 0.2]) {\n        union() {\n            // Head\n            translate([0, 0, 65]) rotate([0, 0, 30]) head();\n            \n            // Neck\n            translate([0, 0, 55]) rotate([0, 0, 15]) neck();\n            \n            // Body segments\n            for(i = [0:7]) {\n                translate([0, 0, 45 - i * 6]) rotate([0, 0, -i * 10]) body_segment(i);\n            }\n            \n            // Tail with rattles\n            for(i = [0:4]) {\n                translate([0, 0, -5 - i * 4]) rotate([0, 0, -i * 15]) tail_segment(i);\n            }\n            \n            // Wings\n            translate([-15, 0, 50]) rotate([0, 0, -30]) wing();\n            translate([15, 0, 50]) mirror([1, 0, 0]) rotate([0, 0, -30]) wing();\n        }\n    }\n    \n    // Void essence wisps\n    color([0.4, 0.1, 0.6, 0.6]) {\n        for(i = [0:5]) {\n            translate([sin(i*60)*8, cos(i*60)*8, 40 - i*10]) \n            sphere(2 + i*0.5);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    difference() {\n        // Main head shape\n        union() {\n            sphere(8);\n            // Snout\n            translate([0, 6, 0]) scale([0.7, 1.5, 0.6]) sphere(5);\n        }\n        \n        // Eye sockets\n        translate([-3, 4, 2]) sphere(2);\n        translate([3, 4, 2]) sphere(2);\n        \n        // Mouth\n        translate([0, 6, -1]) cube([6, 4, 2], center=true);\n    }\n    \n    // Eyes - glowing void orbs\n    color([0.8, 0.4, 1]) {\n        translate([-3, 4.5, 2]) sphere(1.5);\n        translate([3, 4.5, 2]) sphere(1.5);\n    }\n    \n    // Horns\n    color([0.2, 0.1, 0.3]) {\n        translate([-4, 0, 6]) rotate([30, 0, -20]) cylinder(h=8, r1=2, r2=0.5);\n        translate([4, 0, 6]) rotate([30, 0, 20]) cylinder(h=8, r1=2, r2=0.5);\n    }\n}\n\n// Neck module\nmodule neck() {\n    cylinder(h=10, r1=6, r2=4);\n}\n\n// Body segment module with scales\nmodule body_segment(index) {\n    difference() {\n        // Main segment\n        cylinder(h=6, r1=4.5, r2=4);\n        \n        // Scale pattern\n        for(i = [0:5]) {\n            rotate([0, 0, i*60]) \n            translate([3.5, 0, 2]) \n            cube([1, 0.5, 1], center=true);\n        }\n    }\n}\n\n// Tail segment with rattles\nmodule tail_segment(index) {\n    // Tail segment\n    cylinder(h=4, r1=4 - index*0.3, r2=3.7 - index*0.3);\n    \n    // Rattle crystals\n    color([0.3, 0.1, 0.5]) {\n        for(i = [0:3]) {\n            rotate([0, 0, i*120]) \n            translate([3 - index*0.2, 0, 2]) \n            rotate([90, 0, 0]) \n            cylinder(h=2 + index*0.5, r1=0.5, r2=1);\n        }\n    }\n}\n\n// Wing module\nmodule wing() {\n    // Main wing structure\n    translate([0, 0, 0]) {\n        // Wing membrane\n        difference() {\n            hull() {\n                translate([0, 0, 0]) sphere(1);\n                translate([0, 15, 0]) sphere(1);\n                translate([5, 10, 0]) sphere(1);\n            }\n            // Wing holes\n            translate([1, 5, 0]) rotate([0, 0, 30]) scale([1, 2, 1]) cylinder(h=3, r=1);\n            translate([2, 10, 0]) rotate([0, 0, -20]) scale([1, 1.5, 1]) cylinder(h=3, r=0.8);\n        }\n        \n        // Wing bones\n        color([0.2, 0.1, 0.3]) {\n            cylinder(h=15, r=0.5);\n            translate([0, 7.5, 0]) rotate([0, 0, 30]) cylinder(h=7, r=0.4);\n            translate([0, 12, 0]) rotate([0, 0, -20]) cylinder(h=5, r=0.3);\n        }\n    }\n}\n\n// Generate the complete model\nvoidrattler();",
    "renders": true
  },
  {
    "mythical_creature": "chaoslizard",
    "openscad_code": "// Chaoslizard - a mythical creature with chaotic energy wings and crystalline armor\n// Size: 80mm length, 40mm height, 60mm wingspan\n\n$fn = 32;\n\n// Main colors\ncolor_chaos = [0.6, 0.2, 0.8, 1.0];  // Deep purple\ncolor_scales = [0.3, 0.4, 0.2, 1.0]; // Dark green\ncolor_crystal = [0.7, 0.9, 1.0, 0.8]; // Light blue crystal\ncolor_eyes = [1, 0, 0, 1];           // Red glowing eyes\n\nmodule chaoslizard() {\n    // Body - main torso\n    color(color_scales)\n    difference() {\n        scale([1.2, 0.8, 0.6])\n        cube([30, 20, 15], center=true);\n        \n        // Hollow for printing\n        scale([1.1, 0.7, 0.5])\n        cube([28, 18, 14], center=true);\n    }\n    \n    // Head\n    translate([-15, 0, 8])\n    color(color_scales)\n    union() {\n        // Main head shape\n        scale([0.8, 0.7, 0.7])\n        sphere(10);\n        \n        // Snout\n        translate([-5, 0, -2])\n        scale([1.2, 0.6, 0.5])\n        sphere(6);\n        \n        // Horns - crystalline growths\n        for(i = [0:1]) {\n            translate([-8, i ? 8 : -8, 6])\n            rotate([0, i ? 30 : -30, 0])\n            color(color_crystal)\n            cylinder(h=12, r1=3, r2=1, center=true);\n        }\n        \n        // Eyes\n        translate([-12, 4, 2])\n        color(color_eyes)\n        sphere(2);\n        translate([-12, -4, 2])\n        color(color_eyes)\n        sphere(2);\n    }\n    \n    // Legs\n    for(side = [0,1]) {\n        translate([-5, side ? 8 : -8, -8])\n        rotate([0, side ? 10 : -10, 0])\n        color(color_scales)\n        union() {\n            // Upper leg\n            cylinder(h=12, r=4, center=true);\n            // Lower leg\n            translate([0, 0, -8])\n            cylinder(h=10, r=3, center=true);\n            // Foot\n            translate([0, 0, -14])\n            scale([1.5, 1, 0.5])\n            cube([8, 6, 2], center=true);\n        }\n    }\n    \n    // Tail\n    translate([15, 0, -2])\n    color(color_scales)\n    union() {\n        for(i = [0:4]) {\n            translate([i*4, 0, -i*1.5])\n            scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.1])\n            sphere(6);\n        }\n    }\n    \n    // Wings - chaotic energy formations\n    for(side = [0,1]) {\n        mirror([0, side ? 0 : 1, 0])\n        translate([0, 0, 12])\n        rotate([0, 0, side ? 30 : -30])\n        color(color_chaos)\n        union() {\n            // Main wing membrane\n            for(i = [0:3]) {\n                translate([i*5, 0, -i*2])\n                rotate([0, i*10, 0])\n                scale([1 - i*0.2, 0.1, 1])\n                sphere(8);\n            }\n            \n            // Wing struts\n            for(j = [0:2]) {\n                translate([j*8, 0, -j*3])\n                rotate([0, 0, j*20])\n                cylinder(h=10, r=1, center=true);\n            }\n        }\n    }\n    \n    // Crystal spikes along spine\n    for(i = [0:5]) {\n        translate([-10 + i*8, 0, 6])\n        color(color_crystal)\n        rotate([0, 0, i*15])\n        cylinder(h=6, r1=2, r2=0.5, center=true);\n    }\n}\n\n// Scale to 80mm length\nscale(0.8)\nchaoslizard();",
    "renders": true
  },
  {
    "mythical_creature": "darknessdrake",
    "openscad_code": "// Darknessdrake - Realistic Style - Medium Complexity\n// 3D printable mythical dragon of shadows\n\n// Overall scale factor\nscale_factor = 0.5;\n\n$fn = 32;\n\nmodule darknessdrake() {\n    // Main body - elongated torso\n    color([0.1, 0.1, 0.1])\n    union() {\n        // Torso\n        translate([0, 0, 10])\n        scale([1.2, 0.8, 1.5])\n        sphere(r=10);\n        \n        // Chest plate\n        translate([0, 0, 5])\n        scale([1.3, 1, 0.5])\n        sphere(r=8);\n        \n        // Lower body\n        translate([0, 0, 20])\n        scale([0.8, 0.6, 1.2])\n        sphere(r=8);\n    }\n    \n    // Head\n    color([0.05, 0.05, 0.05])\n    translate([0, 18, 15])\n    union() {\n        // Snout\n        rotate([0, 20, 0])\n        scale([0.8, 0.6, 1.2])\n        cylinder(h=12, r1=6, r2=4);\n        \n        // Skull base\n        sphere(r=8);\n        \n        // Horns - twisted shadow horns\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([6, 0, 5])\n            rotate([30, 0, 0])\n            scale([0.3, 0.3, 1.5])\n            cylinder(h=15, r1=2, r2=1);\n        }\n        \n        // Eyes - glowing void\n        color([0.3, 0, 0.5])\n        for (i = [-1, 1]) {\n            translate([i * 3, 8, 2])\n            sphere(r=1.5);\n        }\n    }\n    \n    // Wings - membrane with shadow veins\n    color([0.08, 0.08, 0.08])\n    for (side = [-1, 1]) {\n        translate([side * 12, 5, 15])\n        rotate([side * -30, 0, 0])\n        union() {\n            // Wing arm\n            rotate([0, 90, 0])\n            cylinder(h=20, r=2);\n            \n            // Wing membrane segments\n            for (segment = [0:3]) {\n                rotate([segment * 25 - 30, 0, 0])\n                translate([0, 0, segment * 5])\n                scale([1 - segment * 0.2, 0.1, 1 - segment * 0.15])\n                cylinder(h=15 - segment * 3, r1=segment + 5, r2=segment + 3);\n            }\n        }\n    }\n    \n    // Legs - four muscular legs\n    color([0.12, 0.12, 0.12])\n    for (side = [-1, 1]) {\n        for (pos = [0, 1]) {\n            translate([side * 8, pos * 8 - 4, pos * 10])\n            rotate([0, pos * 30, 0])\n            union() {\n                // Upper leg\n                cylinder(h=8, r=3);\n                \n                // Lower leg\n                translate([0, 0, 8])\n                rotate([30, 0, 0])\n                cylinder(h=10, r=2.5);\n                \n                // Foot\n                translate([0, 0, 10])\n                rotate([60, 0, 0])\n                scale([1.5, 0.8, 0.5])\n                cylinder(h=5, r=3);\n            }\n        }\n    }\n    \n    // Tail - segmented with shadow spikes\n    color([0.08, 0.08, 0.08])\n    translate([0, -15, 12])\n    union() {\n        for (segment = [0:5]) {\n            translate([0, -segment * 6, -segment * 2])\n            scale([1 - segment * 0.15, 1 - segment * 0.15, 1 - segment * 0.1])\n            sphere(r=6 - segment);\n            \n            // Shadow spikes\n            if (segment % 2 == 0) {\n                rotate([0, 0, 45])\n                scale([0.3, 0.3, 1.5])\n                cylinder(h=5, r1=2, r2=1);\n            }\n        }\n    }\n    \n    // Shadow scales pattern on back\n    color([0.15, 0.15, 0.15])\n    for (row = [0:3]) {\n        for (col = [-3:3]) {\n            if (abs(col) + row < 4) {\n                translate([col * 3, 0, 15 + row * 2])\n                rotate([0, 0, 45])\n                scale([1, 1, 0.3])\n                cylinder(h=1, r=1.5);\n            }\n        }\n    }\n    \n    // Neck\n    color([0.1, 0.1, 0.1])\n    translate([0, 10, 12])\n    rotate([30, 0, 0])\n    cylinder(h=10, r1=5, r2=4);\n}\n\n// Create the darknessdrake\nscale(scale_factor)\ndarknessdrake();",
    "renders": true
  },
  {
    "mythical_creature": "lightwyrm",
    "openscad_code": "// Lightwyrm – semi-realistic, medium complexity\n// Overall length ~90 mm, printable without supports\n\n// Basic proportions\nlength = 90;     // nose to tail tip\nheight = 35;     // ground to back\nwing_span = 55;  // left-wing tip to right-wing tip\nwall = 1.2;      // wall thickness for FDM printing\n\n// Colors\nbody_color   = \"Gold\";\nwing_color   = \"LemonChiffon\";\neye_color    = \"Red\";\nhorn_color   = \"Ivory\";\n\n// Helper: scale-safe sphere\nmodule ss(r) sphere(r = r, $fn = 24);\n\n// Helper: scale-safe cylinder\nmodule sc(h, r1, r2 = r1) cylinder(h = h, r1 = r1, r2 = r2, $fn = 24);\n\n// Head with snout, horns, eyes\nmodule head() {\n    color(body_color) union() {\n        // Main cranium\n        translate([0, 0, 10]) scale([1, 0.7, 0.7]) ss(10);\n\n        // Snout\n        translate([11, 0, 8]) rotate([0, -15, 0])\n            scale([1.2, 0.6, 0.6]) sc(12, 5, 2);\n\n        // Lower jaw\n        translate([6, 0, 3]) rotate([0, -15, 0])\n            difference() {\n                scale([1, 0.5, 0.4]) sc(10, 4, 2);\n                translate([0, 0, -0.5]) cube([20, 10, 1], center = true);\n            }\n\n        // Horns\n        color(horn_color) for (s = [-1, 1]) {\n            translate([5, s * 5, 14]) rotate([0, -30 * s, 0])\n                scale([0.4, 0.4, 1]) sc(12, 2, 0.5);\n        }\n\n        // Eyes\n        color(eye_color) for (s = [-1, 1]) {\n            translate([9, s * 4, 9]) ss(2);\n        }\n    }\n}\n\n// Body segments\nmodule body() {\n    color(body_color) hull() {\n        // Neck\n        translate([-10, 0, 12]) scale([0.7, 0.6, 0.6]) ss(9);\n\n        // Chest\n        translate([-25, 0, 10]) scale([0.9, 0.7, 0.7]) ss(10);\n\n        // Abdomen\n        translate([-45, 0, 8]) scale([0.8, 0.6, 0.6]) ss(9);\n\n        // Hip\n        translate([-65, 0, 10]) scale([0.7, 0.5, 0.5]) ss(8);\n\n        // Tail start\n        translate([-80, 0, 8]) scale([0.4, 0.3, 0.3]) ss(5);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(body_color) hull() {\n        translate([-80, 0, 8]) scale([0.4, 0.3, 0.3]) ss(5);\n        translate([-90, 0, 6]) scale([0.2, 0.15, 0.15]) ss(3);\n    }\n}\n\n// Wing membrane\nmodule wing_membrane() {\n    color(wing_color) {\n        difference() {\n            hull() {\n                translate([0, 0, 0]) ss(1);\n                translate([-20, 25, 0]) ss(1);\n                translate([-40, 20, 0]) ss(1);\n                translate([-60, 0, 0]) ss(1);\n                translate([-40, -20, 0]) ss(1);\n                translate([-20, -25, 0]) ss(1);\n            }\n            // Cut inner holes for membrane look\n            for (i = [1:3]) {\n                translate([-15 * i, 0, -0.5])\n                    rotate([0, 0, i * 20])\n                    scale([0.8, 0.4, 1])\n                    cylinder(h = 2, r = 6, $fn = 6);\n            }\n        }\n    }\n}\n\n// Whole wing\nmodule wing(side = 1) {\n    translate([-30, 0, 15])\n        rotate([0, 0, side * 20])\n        rotate([0, 90 - 15 * side, 0])\n        mirror([0, side, 0])\n            wing_membrane();\n}\n\n// Legs\nmodule leg(side = 1) {\n    color(body_color) {\n        translate([-35, side * 12, 0])\n            rotate([0, 0, -side * 10])\n            union() {\n                // Thigh\n                sc(12, 3.5, 2.5);\n                // Shin\n                translate([0, 0, -13])\n                    rotate([side * 30, 0, 0])\n                    sc(10, 2.5, 2);\n                // Foot\n                translate([0, side * 3, -23])\n                    rotate([side * 30, 0, 0])\n                    sc(6, 2, 1);\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    head();\n    body();\n    tail();\n    wing(1);\n    wing(-1);\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "mythical_creature": "spectralserpent",
    "openscad_code": "// SpectralSerpent - A mythical translucent serpent with ethereal wings\n// 3D printable, medium complexity, realistic style\n\n// Color definitions\nethereal_blue = [0.3, 0.7, 1.0, 0.6];\nethereal_purple = [0.5, 0.3, 0.9, 0.5];\nbone_white = [0.9, 0.9, 0.95, 0.9];\nglow_white = [1, 1, 1, 0.3];\n\n// Main module\nmodule spectralserpent() {\n    union() {\n        // Serpent body\n        color(ethereal_blue) body();\n        \n        // Wings\n        color(ethereal_purple) wings();\n        \n        // Head\n        color(ethereal_blue) head();\n        \n        // Tail\n        color(ethereal_blue) tail();\n        \n        // Ethereal spine ridges\n        color(glow_white) spine_ridges();\n        \n        // Magical orbs along body\n        color(glow_white) magical_orbs();\n    }\n}\n\n// Serpent body segments\nmodule body() {\n    for(i = [0:10]) {\n        translate([i*5, 0, 0]) {\n            scale([1, 0.8 - i*0.05, 0.8 - i*0.05]) {\n                sphere(d=8);\n            }\n        }\n    }\n}\n\n// Head with horns and fangs\nmodule head() {\n    translate([-5, 0, 0]) {\n        // Main head\n        scale([1.2, 0.8, 0.8]) sphere(d=10);\n        \n        // Snout\n        translate([-4, 0, -2]) {\n            scale([1.5, 0.6, 0.4]) sphere(d=6);\n        }\n        \n        // Horns\n        translate([0, 4, 4]) {\n            rotate([0, 30, 0]) {\n                cylinder(h=8, d1=2, d2=0.5);\n            }\n        }\n        translate([0, -4, 4]) {\n            rotate([0, -30, 0]) {\n                cylinder(h=8, d1=2, d2=0.5);\n            }\n        }\n        \n        // Eyes\n        translate([-6, 2, 1]) sphere(d=1.5);\n        translate([-6, -2, 1]) sphere(d=1.5);\n        \n        // Fangs\n        translate([-8, 1, -2]) {\n            rotate([0, 0, -20]) cylinder(h=3, d1=1, d2=0.2);\n        }\n        translate([-8, -1, -2]) {\n            rotate([0, 0, 20]) cylinder(h=3, d1=1, d2=0.2);\n        }\n    }\n}\n\n// Ethereal wings with membrane structure\nmodule wings() {\n    // Right wing\n    translate([5, 8, 2]) {\n        rotate([0, 0, -10]) {\n            difference() {\n                // Main wing membrane\n                scale([2, 1, 0.3]) sphere(d=12);\n                \n                // Wing cutouts for ethereal look\n                for(i = [1:3]) {\n                    translate([i*3, i*2, 0]) {\n                        scale([0.5, 0.5, 2]) sphere(d=3);\n                    }\n                }\n            }\n            \n            // Wing bones\n            color(bone_white) {\n                for(i = [0:3]) {\n                    rotate([0, 0, i*15]) {\n                        translate([i*2, 0, 0]) {\n                            cylinder(h=8, d=0.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Left wing (mirrored)\n    translate([5, -8, 2]) {\n        mirror([0, 1, 0]) {\n            rotate([0, 0, -10]) {\n                difference() {\n                    scale([2, 1, 0.3]) sphere(d=12);\n                    for(i = [1:3]) {\n                        translate([i*3, i*2, 0]) {\n                            scale([0.5, 0.5, 2]) sphere(d=3);\n                        }\n                    }\n                }\n                \n                color(bone_white) {\n                    for(i = [0:3]) {\n                        rotate([0, 0, i*15]) {\n                            translate([i*2, 0, 0]) {\n                                cylinder(h=8, d=0.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tapering tail\nmodule tail() {\n    for(i = [11:20]) {\n        translate([i*4.5, 0, 0]) {\n            scale([1, 0.5 - (i-11)*0.05, 0.5 - (i-11)*0.05]) {\n                sphere(d=6);\n            }\n        }\n    }\n}\n\n// Ethereal spine ridges\nmodule spine_ridges() {\n    for(i = [0:10]) {\n        translate([i*5, 0, 3]) {\n            scale([0.5, 0.3, 1]) {\n                sphere(d=3);\n            }\n        }\n    }\n}\n\n// Magical orbs along body\nmodule magical_orbs() {\n    for(i = [0:5]) {\n        translate([i*10, 0, 2]) {\n            sphere(d=2);\n        }\n    }\n}\n\n// Create the spectralserpent\nspectralserpent();",
    "renders": true
  },
  {
    "mythical_creature": "ghostwyrm",
    "openscad_code": "// Ghostwyrm mythical creature - medium complexity\n// Features: translucent ghostly body, spectral wings, ethereal tail, glowing eyes, horn ridges\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main body color - translucent ghostly blue-white\ncolor([0.8, 0.9, 1, 0.6]) {\n    \n    // Main serpentine body\n    module body() {\n        union() {\n            // Head section\n            translate([0, 0, 15]) {\n                scale([1.2, 0.8, 1]) sphere(8);\n            }\n            \n            // Neck to body transition\n            for(i = [0:3]) {\n                translate([i*5, 0, 15 - i*2]) {\n                    scale([1.2 - i*0.1, 0.8 - i*0.05, 0.9 - i*0.05]) sphere(7 - i);\n                }\n            }\n            \n            // Main torso segments\n            for(i = [0:5]) {\n                translate([20 + i*8, 0, 10 - i*1.5]) {\n                    rotate([0, i*5, 0]) \n                    scale([1, 0.7, 0.6]) sphere(6 - i*0.5);\n                }\n            }\n        }\n    }\n    \n    // Ethereal wings\n    module wings() {\n        // Left wing\n        translate([15, 0, 20]) {\n            rotate([0, 0, 30]) {\n                // Main wing membrane\n                scale([1, 0.3, 0.05]) sphere(15);\n                \n                // Wing ribs\n                for(i = [1:4]) {\n                    rotate([0, 0, i*15]) {\n                        translate([i*3, 0, 0]) {\n                            scale([0.1, 0.2, 0.02]) cube([i*2, 10, 1]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Right wing (mirrored)\n        mirror([0, 1, 0]) {\n            translate([15, 0, 20]) {\n                rotate([0, 0, 30]) {\n                    scale([1, 0.3, 0.05]) sphere(15);\n                    \n                    for(i = [1:4]) {\n                        rotate([0, 0, i*15]) {\n                            translate([i*3, 0, 0]) {\n                                scale([0.1, 0.2, 0.02]) cube([i*2, 10, 1]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Spectral tail\n    module tail() {\n        for(i = [0:8]) {\n            translate([60 + i*6, 0, 5 - i*0.8]) {\n                rotate([0, -i*3, 0]) {\n                    scale([0.8 - i*0.08, 0.6 - i*0.06, 0.5 - i*0.05]) sphere(5 - i*0.4);\n                }\n            }\n        }\n    }\n    \n    // Horn ridges along spine\n    module horns() {\n        for(i = [0:6]) {\n            translate([10 + i*8, 0, 12 + i*0.3]) {\n                rotate([0, 0, -10]) {\n                    scale([0.2, 0.2, 1.2]) cylinder(h = 4 + i*0.5, r1 = 1, r2 = 0.5);\n                }\n            }\n        }\n    }\n    \n    // Glowing eyes\n    module eyes() {\n        color([0.3, 0.8, 1, 0.9]) {\n            translate([7, 3, 18]) sphere(2);\n            translate([7, -3, 18]) sphere(2);\n        }\n    }\n    \n    // Mystical aura particles\n    module aura() {\n        color([0.5, 0.7, 1, 0.4]) {\n            for(i = [0:10]) {\n                translate([30 + i*5, sin(i*30)*5, 15 + cos(i*30)*5]) {\n                    sphere(1 + sin(i*45)*0.5);\n                }\n            }\n        }\n    }\n    \n    // Assemble the ghostwyrm\n    union() {\n        body();\n        wings();\n        tail();\n        horns();\n        eyes();\n        aura();\n    }\n}\n\n// Base stand for 3D printing stability\ncolor([0.2, 0.2, 0.3, 0.8]) {\n    translate([40, 0, -2]) {\n        scale([2, 0.8, 0.3]) cylinder(h = 4, r = 10);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "phantomhydra",
    "openscad_code": "// PhantomHydra - A ghostly five-headed serpent with translucent wings\n// Realistic style, medium complexity (~120 lines)\n\n// Overall scale\nscale_factor = 0.5;\n\nmodule phantomhydra() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Translucent main body\n        color([0.7, 0.7, 0.9, 0.6]) {\n            \n            // Torso segment\n            union() {\n                // Central torso\n                difference() {\n                    scale([1.5, 1, 1]) sphere(d=20, $fn=32);\n                    translate([0, 0, -10]) cube([30, 30, 20], center=true);\n                }\n                \n                // Neck base\n                translate([0, 0, 15]) cylinder(h=8, d1=12, d2=10, $fn=24);\n                \n                // Tail\n                translate([0, -25, 0]) rotate([0, 90, 0]) \n                    cylinder(h=40, d1=8, d2=3, $fn=16);\n            }\n            \n            // Five ghostly heads\n            for(i=[0:4]) {\n                rotate([0, 0, i*72]) translate([0, 0, 20]) {\n                    translate([12, 0, 5]) rotate([0, 15, 0]) ghost_head();\n                }\n            }\n            \n            // Translucent wings\n            translate([0, -5, 5]) ghost_wings();\n        }\n        \n        // Shadowy details\n        color([0.2, 0.2, 0.3, 0.8]) {\n            scale([1.4, 1.1, 0.8]) translate([0, 0, -2]) \n                sphere(d=20, $fn=32);\n        }\n    }\n}\n\nmodule ghost_head() {\n    // Main head shape\n    difference() {\n        scale([1.2, 0.8, 1.4]) sphere(d=15, $fn=24);\n        \n        // Eye sockets\n        translate([5, 3, 3]) sphere(d=4, $fn=12);\n        translate([5, -3, 3]) sphere(d=4, $fn=12);\n        \n        // Nostrils\n        translate([5, 0, -2]) cylinder(h=3, d=2, $fn=8);\n    }\n    \n    // Ghostly horns\n    translate([0, 0, 10]) rotate([20, 0, 0]) \n        cylinder(h=8, d1=3, d2=1, $fn=8);\n    translate([0, 0, 10]) rotate([-20, 0, 0]) \n        cylinder(h=8, d1=3, d2=1, $fn=8);\n    \n    // Shadow jaw\n    translate([0, 0, -8]) rotate([30, 0, 0]) \n        scale([1, 0.8, 0.5]) sphere(d=12, $fn=16);\n}\n\nmodule ghost_wings() {\n    // Left wing membrane\n    difference() {\n        translate([-15, 0, 0]) rotate([0, 0, -30]) \n            scale([1.5, 1, 0.1]) sphere(d=25, $fn=32);\n        \n        // Wing holes for ethereal look\n        for(i=[0:2]) {\n            translate([-20 + i*8, 5 + i*3, 0]) \n                sphere(d=4 + i*2, $fn=12);\n        }\n    }\n    \n    // Right wing membrane\n    mirror([1, 0, 0]) {\n        difference() {\n            translate([-15, 0, 0]) rotate([0, 0, -30]) \n                scale([1.5, 1, 0.1]) sphere(d=25, $fn=32);\n            \n            // Wing holes\n            for(i=[0:2]) {\n                translate([-20 + i*8, 5 + i*3, 0]) \n                    sphere(d=4 + i*2, $fn=12);\n            }\n        }\n    }\n    \n    // Wing spars\n    color([0.5, 0.5, 0.6, 0.8]) {\n        translate([-20, 0, 0]) rotate([0, 0, -30]) \n            cylinder(h=25, d=1.5, $fn=8);\n        translate([20, 0, 0]) rotate([0, 0, 30]) \n            cylinder(h=25, d=1.5, $fn=8);\n    }\n}\n\n// Generate the phantomhydra\nphantomhydra();",
    "renders": true
  },
  {
    "mythical_creature": "soulbasilisk",
    "openscad_code": "// Soulbasilisk - Mythical creature combining basilisk and soul-draining features\n// Realistic style with moderate complexity for 3D printing\n\n$fn = 32;  // Smooth curves for printing\n\n// Main colors\ncolor_body = [0.2, 0.4, 0.1];      // Deep green scales\ncolor_wings = [0.15, 0.15, 0.3];   // Dark membrane\ncolor_eyes = [1, 0, 0];            // Glowing red\ncolor_horns = [0.8, 0.8, 0.7];     // Bone horns\ncolor_soul = [0.9, 0.9, 1];        // Ethereal soul glow\n\n// Overall scale\nscale_factor = 0.8;\n\n// Main body module\nmodule soulbasilisk() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Body\n            color(color_body)\n            translate([0, 0, 10])\n            scale([1.5, 1, 1])\n            sphere(15);\n            \n            // Head\n            color(color_body)\n            translate([20, 0, 25])\n            scale([1.2, 0.8, 0.9])\n            sphere(12);\n            \n            // Neck\n            color(color_body)\n            translate([10, 0, 20])\n            rotate([0, -10, 0])\n            cylinder(12, 8, 6, center=true);\n            \n            // Tail segments\n            color(color_body)\n            for(i = [1:5]) {\n                translate([-15 - i*8, 0, 15 - i*2])\n                scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.15])\n                rotate([0, -5 - i*3, 0])\n                sphere(10 - i);\n            }\n            \n            // Legs\n            legs();\n            \n            // Wings\n            wings();\n            \n            // Horns\n            horns();\n            \n            // Eyes with soul glow\n            eyes();\n            \n            // Soul tendrils\n            soul_tendrils();\n            \n            // Scales pattern\n            scales();\n        }\n    }\n}\n\n// Leg module\nmodule legs() {\n    for(side = [-1, 1]) {\n        // Front legs\n        color(color_body)\n        translate([15, side*10, 8])\n        rotate([0, 0, side*15])\n        cylinder(20, 4, 3);\n        \n        translate([15, side*10, -6])\n        sphere(5);\n        \n        // Back legs\n        color(color_body)\n        translate([-15, side*10, 8])\n        rotate([0, 0, -side*15])\n        cylinder(20, 4, 3);\n        \n        translate([-15, side*10, -6])\n        sphere(5);\n    }\n}\n\n// Wing module\nmodule wings() {\n    for(side = [-1, 1]) {\n        color(color_wings)\n        translate([5, side*15, 25])\n        rotate([0, 0, side*30])\n        scale([1, 0.1, 1.5])\n        sphere(12);\n        \n        // Wing membrane supports\n        for(i = [1:3]) {\n            color(color_wings)\n            translate([5 + i*3, side*(15 + i*2), 25 - i*3])\n            rotate([0, -10, side*(30 - i*5)])\n            scale([0.5, 0.05, 0.8])\n            cylinder(10 - i*2, 2, 1);\n        }\n    }\n}\n\n// Horns module\nmodule horns() {\n    // Main horns\n    for(side = [-1, 1]) {\n        color(color_horns)\n        translate([25, side*5, 30])\n        rotate([0, 0, side*20])\n        cylinder(12, 3, 1);\n        \n        // Secondary horns\n        translate([23, side*8, 28])\n        rotate([0, 10, side*30])\n        cylinder(8, 2, 1);\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    for(side = [-1, 1]) {\n        // Eye sockets\n        color([0, 0, 0])\n        translate([28, side*4, 28])\n        sphere(3);\n        \n        // Glowing eyes\n        color(color_eyes)\n        translate([29, side*4, 28])\n        sphere(2);\n        \n        // Soul glow effect\n        color(color_soul)\n        translate([31, side*4, 28])\n        sphere(1);\n    }\n}\n\n// Soul tendrils module\nmodule soul_tendrils() {\n    for(i = [0:4]) {\n        color(color_soul)\n        translate([10 - i*8, 5*sin(i*45), 20 + i*3])\n        rotate([10, 0, i*72])\n        scale([0.5, 0.5, 2])\n        sphere(2);\n        \n        color(color_soul)\n        translate([10 - i*8, -5*sin(i*45), 20 + i*3])\n        rotate([10, 0, -i*72])\n        scale([0.5, 0.5, 2])\n        sphere(2);\n    }\n}\n\n// Scales module\nmodule scales() {\n    // Scale pattern on body\n    for(i = [0:8]) {\n        for(j = [0:6]) {\n            color(color_body)\n            translate([i*4 - 16, j*3 - 9, 25 + sin(i+j)*2])\n            scale([1.5, 1, 0.3])\n            sphere(2);\n        }\n    }\n    \n    // Scale pattern on tail\n    for(i = [0:5]) {\n        for(j = [0:4]) {\n            color(color_body)\n            translate([-20 - i*8, j*2.5 - 5, 15 - i*2 + sin(i+j)*1.5])\n            scale([1 - i*0.15, 1 - i*0.15, 0.3])\n            sphere(1.5 - i*0.2);\n        }\n    }\n}\n\n// Create the creature centered at origin\ntranslate([0, 0, 0])\nsoulbasilisk();",
    "renders": true
  },
  {
    "mythical_creature": "spiritwyrm",
    "openscad_code": "// Spiritwyrm - ethereal dragon-like mythical creature\n// 3D printable with 2 mm walls, no steep overhangs\n// Approx 80 mm long\n\n// Colors\nspirit_blue = [0.3,0.6,0.9,0.8];\nethereal_glow = [0.7,0.9,1.0,0.6];\nbone_white = [0.95,0.95,0.9,1];\n\n// Main body\nmodule body() {\n    color(spirit_blue)\n    union() {\n        // Torso\n        translate([0,0,8])\n            scale([1,0.7,0.6])\n                sphere(d=20,$fn=32);\n        \n        // Abdomen\n        translate([0,-15,5])\n            scale([0.8,1.2,0.5])\n                sphere(d=18,$fn=32);\n    }\n}\n\n// Head with horns and ethereal features\nmodule head() {\n    color(spirit_blue)\n    union() {\n        // Skull\n        translate([0,20,12])\n            rotate([0,15,0])\n            scale([0.8,1.1,0.7])\n                sphere(d=15,$fn=32);\n        \n        // Snout\n        translate([0,28,11])\n            scale([0.5,0.8,0.4])\n                sphere(d=10,$fn=32);\n        \n        // Ethereal horns\n        color(ethereal_glow)\n        for(i=[-1,1]) {\n            translate([i*6,18,18])\n                rotate([0,i*20,0])\n                cylinder(d1=3,d2=1,h=12,$fn=8);\n        }\n        \n        // Spirit tendrils\n        for(i=[-1,1]) {\n            translate([i*4,25,9])\n                rotate([0,0,i*30])\n                cylinder(d=1,h=8,$fn=6);\n        }\n    }\n}\n\n// Wing membrane with bone structure\nmodule wing() {\n    color(ethereal_glow)\n    difference() {\n        // Main wing shape\n        translate([0,0,0])\n            rotate([0,0,0])\n            scale([1,2.5,0.1])\n                sphere(d=25,$fn=32);\n        \n        // Cutouts for ethereal effect\n        for(i=[0:2]) {\n            translate([0,5+i*8,0])\n                scale([0.7-i*0.1,0.3,1])\n                    sphere(d=15,$fn=16);\n        }\n    }\n    \n    // Wing bones\n    color(bone_white)\n    for(i=[-1,1]) {\n        translate([i*8,0,0])\n            rotate([0,i*20,0])\n            scale([0.1,1,0.1])\n                cylinder(h=30,$fn=6);\n    }\n}\n\n// Tail segments\nmodule tail() {\n    color(spirit_blue)\n    union() {\n        for(i=[0:5]) {\n            translate([0,-20-i*8,5-i*1.5])\n                scale([1-i*0.12,1-i*0.15,1-i*0.1])\n                    sphere(d=15-i*2,$fn=24);\n        }\n    }\n}\n\n// Legs with claws\nmodule leg(side) {\n    color(spirit_blue)\n    union() {\n        // Upper leg\n        translate([side*8,-5,2])\n            rotate([0,side*15,0])\n            cylinder(d=4,h=12,$fn=8);\n        \n        // Lower leg\n        translate([side*12,-5,0])\n            rotate([0,side*30,0])\n            cylinder(d=3,h=10,$fn=8);\n        \n        // Foot\n        translate([side*15,-5,0])\n            rotate([0,0,90])\n            scale([1,0.3,0.5])\n                sphere(d=8,$fn=16);\n        \n        // Claws\n        color(bone_white)\n        for(j=[-1,0,1]) {\n            translate([side*15,j*2.5,-2])\n                rotate([0,0,0])\n                cylinder(d1=1,d2=0,h=3,$fn=6);\n        }\n    }\n}\n\n// Ethereal spine ridge\nmodule spine() {\n    color(ethereal_glow)\n    for(i=[-3:3]) {\n        translate([0,i*4,15-abs(i)*0.5])\n            rotate([0,0,0])\n            cylinder(d1=3,d2=1,h=4,$fn=6);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    tail();\n    \n    // Wings positioned for printing\n    translate([12,5,15])\n        rotate([0,-20,90])\n        wing();\n    \n    mirror([1,0,0])\n        translate([12,5,15])\n            rotate([0,-20,90])\n            wing();\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Spine\n    spine();\n}",
    "renders": true
  },
  {
    "mythical_creature": "bonedrake",
    "openscad_code": "// Bonedrake - Skeletal Dragon Creature\n// Medium complexity realistic style with 3D printable design\n\n$fn=32;\n\n// Main colors\nbone_color = \"#F5F5DC\";\nmagic_color = \"#9400D3\";\n\n// Overall scale factor\nscale_factor = 0.4;\n\n// Bone thickness for 3D printing\nbone_thickness = 1.5;\n\nmodule spine_segment(height, radius) {\n    union() {\n        cylinder(h=height, r=radius, center=true);\n        // Spine ridges\n        for(i=[-1:1]) {\n            translate([i*radius*0.6, 0, height/2])\n                cube([bone_thickness, radius*0.3, height*0.2], center=true);\n        }\n    }\n}\n\nmodule vertebrae(count, length) {\n    for(i=[0:count-1]) {\n        color(bone_color)\n        translate([0, 0, -i*length/count])\n            spine_segment(length/count*0.8, bone_thickness*1.2);\n    }\n}\n\nmodule rib_cage() {\n    union() {\n        // Central spine\n        vertebrae(6, 25);\n        \n        // Ribs\n        for(i=[1:6]) {\n            rotate([0, i*15-45, 0])\n                translate([0, 0, -i*4])\n                    color(bone_color)\n                    scale([1, 0.8, 0.3])\n                        sphere(d=15);\n        }\n    }\n}\n\nmodule skull() {\n    color(bone_color)\n    union() {\n        // Main skull\n        scale([1.2, 0.8, 1])\n            sphere(d=15);\n        \n        // Snout\n        translate([8, 0, -2])\n            scale([1.5, 0.6, 0.6])\n                sphere(d=8);\n        \n        // Eye sockets\n        difference() {\n            sphere(d=15);\n            translate([4, 6, 2])\n                sphere(d=4);\n            translate([4, -6, 2])\n                sphere(d=4);\n        }\n        \n        // Horns\n        translate([-2, 5, 8])\n            rotate([0, -30, 15])\n                cylinder(h=12, r1=2, r2=0.5);\n        translate([-2, -5, 8])\n            rotate([0, -30, -15])\n                cylinder(h=12, r1=2, r2=0.5);\n    }\n}\n\nmodule wing_bone() {\n    color(bone_color)\n    hull() {\n        translate([0, 0, 0])\n            sphere(d=bone_thickness*2);\n        translate([20, 15, -5])\n            sphere(d=bone_thickness*1.5);\n        translate([30, 5, -10])\n            sphere(d=bone_thickness);\n    }\n}\n\nmodule wing() {\n    union() {\n        // Main wing structure\n        wing_bone();\n        \n        // Wing fingers\n        for(i=[-1:1]) {\n            translate([20, 15*i, -5])\n                rotate([0, 0, i*20])\n                    scale([0.7, 0.7, 0.7])\n                        wing_bone();\n        }\n        \n        // Membrane support\n        for(i=[0:3]) {\n            translate([i*8, 0, -i*2])\n                color(magic_color)\n                sphere(d=1);\n        }\n    }\n}\n\nmodule tail_segment(pos) {\n    scale = 1 - pos/10;\n    translate([0, 0, -pos*3])\n        color(bone_color)\n        scale([scale, scale, scale])\n            spine_segment(3, bone_thickness*scale);\n}\n\nmodule tail() {\n    for(i=[0:10]) {\n        tail_segment(i);\n    }\n}\n\nmodule leg() {\n    color(bone_color)\n    union() {\n        // Thigh\n        translate([0, 0, -5])\n            cylinder(h=10, r=bone_thickness);\n        \n        // Shin\n        translate([5, 0, -12])\n            rotate([30, 0, 0])\n                cylinder(h=12, r=bone_thickness*0.8);\n        \n        // Foot\n        translate([8, 0, -20])\n            rotate([90, 0, 0])\n                cylinder(h=8, r=bone_thickness*0.6);\n    }\n}\n\n// Assemble the bonedrake\nscale([scale_factor, scale_factor, scale_factor])\ntranslate([0, 0, 30])\nunion() {\n    // Head\n    translate([0, 0, 0])\n        skull();\n    \n    // Rib cage and spine\n    translate([0, 0, -15])\n        rib_cage();\n    \n    // Wings\n    translate([0, 0, -5])\n        rotate([0, 30, 0])\n            wing();\n    translate([0, 0, -5])\n        rotate([0, -30, 0])\n            mirror([0, 1, 0])\n                wing();\n    \n    // Tail\n    translate([0, 0, -35])\n        tail();\n    \n    // Legs\n    translate([5, 8, -25])\n        leg();\n    translate([5, -8, -25])\n        mirror([0, 1, 0])\n            leg();\n    \n    // Magical essence in chest\n    translate([0, 0, -10])\n        color(magic_color)\n        sphere(d=5);\n}",
    "renders": true
  },
  {
    "mythical_creature": "gravewyrm",
    "openscad_code": "// Gravewyrm - A serpentine dragon that guards burial grounds\n// Medium complexity, realistic style, 3D printable\n\n// Color definitions\ncolor_body = \"#2F2F2F\";\ncolor_bones = \"#E8E8E8\";\ncolor_eyes = \"#FF4500\";\ncolor_glow = \"#9400D3\";\n\n// Main module\nmodule gravewyrm() {\n    // Body - segmented serpent-like form\n    union() {\n        // Head\n        translate([0, 0, 15]) {\n            gravewyrm_head();\n        }\n        \n        // Neck\n        translate([0, 0, 12]) {\n            rotate([10, 0, 0]) {\n                cylinder(h=8, r1=6, r2=4, $fn=16);\n            }\n        }\n        \n        // Body segments\n        for(i = [0:5]) {\n            translate([0, 0, 10 - i * 5]) {\n                rotate([i * 5, 0, 0]) {\n                    gravewyrm_segment(i);\n                }\n            }\n        }\n        \n        // Tail\n        translate([0, 0, -25]) {\n            gravewyrm_tail();\n        }\n        \n        // Wings - skeletal membrane style\n        translate([0, 8, 8]) {\n            rotate([0, -20, 0]) {\n                gravewyrm_wing(1);\n            }\n        }\n        \n        translate([0, -8, 8]) {\n            rotate([0, -20, 180]) {\n                gravewyrm_wing(-1);\n            }\n        }\n    }\n}\n\nmodule gravewyrm_head() {\n    color(color_body) {\n        difference() {\n            // Main head shape\n            sphere(8, $fn=32);\n            \n            // Eye sockets\n            translate([-4, 4, 2]) {\n                sphere(3, $fn=16);\n            }\n            translate([4, 4, 2]) {\n                sphere(3, $fn=16);\n            }\n            \n            // Nostril holes\n            translate([-2, 6, 0]) {\n                cylinder(h=4, r=1, $fn=8);\n            }\n            translate([2, 6, 0]) {\n                cylinder(h=4, r=1, $fn=8);\n            }\n        }\n        \n        // Eyes\n        translate([-4, 4.5, 2]) {\n            color(color_eyes) sphere(1.5, $fn=12);\n        }\n        translate([4, 4.5, 2]) {\n            color(color_eyes) sphere(1.5, $fn=12);\n        }\n        \n        // Horns - bone-like protrusions\n        for(i = [-1, 1]) {\n            translate([i * 6, 3, 4]) {\n                rotate([0, i * 15, 0]) {\n                    color(color_bones) cylinder(h=12, r1=2, r2=0.5, $fn=8);\n                }\n            }\n        }\n        \n        // Jaw\n        translate([0, 3, -3]) {\n            rotate([20, 0, 0]) {\n                cube([14, 8, 4], center=true);\n            }\n        }\n    }\n}\n\nmodule gravewyrm_segment(index) {\n    segment_size = 8 - index * 0.8;\n    color(color_body) {\n        difference() {\n            cylinder(h=6, r=segment_size, $fn=16);\n            \n            // Spine ridges\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90]) {\n                    translate([segment_size * 0.8, 0, 7]) {\n                        cube([4, 2, 2], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Ribs showing through\n        color(color_bones) {\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60]) {\n                    translate([segment_size * 0.9, 0, 3]) {\n                        cylinder(h=1, r=0.5, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule gravewyrm_tail() {\n    color(color_body) {\n        difference() {\n            // Tapering tail\n            cylinder(h=20, r1=5, r2=1, $fn=16);\n            \n            // Tail spikes\n            for(i = [0:4]) {\n                translate([0, 0, i * 4]) {\n                    rotate([0, 0, i * 45]) {\n                        translate([5, 0, 0]) {\n                            cube([3, 2, 1], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule gravewyrm_wing(side) {\n    color(color_bones) {\n        // Main wing bone\n        translate([0, 0, 0]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=20, r=0.8, $fn=8);\n            }\n        }\n        \n        // Wing fingers\n        for(i = [0:2]) {\n            rotate([0, 0, i * 30 * side]) {\n                translate([0, 10, 0]) {\n                    rotate([0, -30, 0]) {\n                        cylinder(h=12, r=0.5, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Membrane\n    color(color_body) {\n        translate([0, 5, 0]) {\n            rotate([90, 0, 0]) {\n                linear_extrude(height=0.5) {\n                    polygon(points=[\n                        [0, 0],\n                        [8, 15],\n                        [12, 8],\n                        [10, 0],\n                        [5, -2]\n                    ]);\n                }\n            }\n        }\n    }\n}\n\n// Ground base for stability\nmodule base() {\n    color(\"#1A1A1A\") {\n        translate([0, 0, -30]) {\n            cylinder(h=2, r=20, $fn=32);\n        }\n    }\n}\n\n// Magical aura effect\nmodule aura() {\n    color(color_glow, 0.3) {\n        translate([0, 0, -10]) {\n            sphere(25, $fn=32);\n        }\n    }\n}\n\n// Assemble the model\nunion() {\n    base();\n    gravewyrm();\n    aura();\n}",
    "renders": true
  },
  {
    "mythical_creature": "deathcoil",
    "openscad_code": "// Deathcoil - Mythical serpentine undead dragon\n// Realistic style with medium complexity\n// Size: ~80mm length, 3D printable\n\n// Color scheme for undead dragon\ncolor(\"darkolivegreen\") {\n\n// Main body segments\nmodule body_segment(radius, length, angle=0) {\n    translate([0,0,length/2]) rotate([0,angle,0]) \n        cylinder(h=length, r1=radius, r2=radius*0.9, $fn=16);\n}\n\n// Spinal ridge plates\nmodule spine_plate(height, width) {\n    color(\"darkslategray\") {\n        difference() {\n            cube([width, height*0.3, height]);\n            translate([-1, -1, height*0.7]) \n                cube([width+2, height*0.5+2, height*0.3]);\n        }\n    }\n}\n\n// Skull head with horns\nmodule deathcoil_head() {\n    color(\"darkgreen\") {\n        union() {\n            // Main skull\n            scale([1.2, 0.8, 1]) sphere(8, $fn=24);\n            \n            // Snout extension\n            translate([8,0,-2]) scale([1.5,0.8,0.8]) sphere(5, $fn=16);\n            \n            // Eye sockets\n            color(\"red\") {\n                translate([6,5,2]) sphere(2.5, $fn=12);\n                translate([6,-5,2]) sphere(2.5, $fn=12);\n            }\n            \n            // Horns\n            color(\"darkslategray\") {\n                translate([0,6,8]) rotate([30,0,30]) \n                    cylinder(h=12, r1=3, r2=1, $fn=8);\n                translate([0,-6,8]) rotate([30,0,-30]) \n                    cylinder(h=12, r1=3, r2=1, $fn=8);\n                translate([4,0,10]) rotate([20,0,0]) \n                    cylinder(h=10, r1=2.5, r2=0.5, $fn=8);\n            }\n            \n            // Jaw\n            translate([4,0,-6]) rotate([20,0,0])\n                scale([1,0.8,0.6]) sphere(6, $fn=16);\n        }\n    }\n}\n\n// Ribcage segments\nmodule ribs(count, spacing) {\n    for(i=[0:count-1]) {\n        translate([i*spacing,0,0]) rotate([0,90,0])\n            difference() {\n                cylinder(h=15, r=2, $fn=16);\n                translate([0,-8,0]) cube([30,16,4]);\n            }\n    }\n}\n\n// Wing membrane\nmodule wing() {\n    color(\"darkolivegreen\") {\n        difference() {\n            // Main wing shape\n            translate([0,0,-5]) union() {\n                // Upper arm\n                translate([0,0,0]) rotate([0,0,30]) \n                    scale([0.5,1,0.5]) sphere(8, $fn=16);\n                \n                // Membrane segments\n                for(i=[0:3]) {\n                    translate([i*8+5, i*3, -2]) rotate([0,0,i*10]) \n                        scale([1,0.3,0.1]) sphere(10-i*2, $fn=8);\n                }\n                \n                // Wing fingers\n                color(\"darkslategray\") {\n                    for(i=[0:3]) {\n                        translate([i*8+5, i*3, 0]) rotate([0,0,i*10])\n                            cylinder(h=20-i*5, r=1, $fn=8);\n                    }\n                }\n            }\n            \n            // Tears in wing\n            for(i=[0:5]) {\n                translate([i*3+2, i*2-5, -3]) \n                    rotate([0,0,i*15]) cube([2,1,2]);\n            }\n        }\n    }\n}\n\n// Tail segments with decay\nmodule tail() {\n    for(i=[0:6]) {\n        translate([-i*8-5,0,0]) rotate([0,i*5,0])\n            body_segment(7-i, 8, -i*3);\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([25,0,8]) deathcoil_head();\n    \n    // Neck\n    for(i=[0:3]) {\n        translate([20-i*6,0,6-i]) body_segment(6-i*0.5, 6);\n    }\n    \n    // Body\n    for(i=[0:5]) {\n        translate([8-i*6,0,3-i*0.5]) body_segment(5-i*0.3, 6);\n    }\n    \n    // Spine plates along back\n    for(i=[0:8]) {\n        translate([20-i*5,0,6]) rotate([0,i*5,0])\n            spine_plate(4+i, 2);\n    }\n    \n    // Ribcage\n    ribs(3, 8);\n    \n    // Wings\n    translate([10,8,5]) rotate([0,0,20]) wing();\n    translate([10,-8,5]) mirror([0,1,0]) rotate([0,0,20]) wing();\n    \n    // Tail\n    translate([-25,0,0]) tail();\n    \n    // Ground base for stability\n    color(\"black\") {\n        translate([0,0,-2]) cube([60,30,1]);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "doomserpent",
    "openscad_code": "// Doomserpent - Mythical serpentine dragon of doom\n// Features: skeletal wings, horned skull, segmented body, glowing eyes\n// 3D printable at 50mm length\n\n$fn=32;\n\n// Color definitions\ncolor_doom_black = [0.1, 0.1, 0.1];\ncolor_bone_white = [0.85, 0.8, 0.75];\ncolor_hellfire = [1, 0.2, 0];\ncolor_shadow = [0.2, 0.2, 0.3];\n\n// Main assembly\nmodule doomserpent() {\n    union() {\n        // Head with skull features\n        translate([0, 0, 5]) skull_head();\n        \n        // Body segments\n        body_segments();\n        \n        // Wings - skeletal bat-like\n        translate([-5, 0, 8]) rotate([0, 0, -30]) left_wing();\n        translate([5, 0, 8]) mirror([1, 0, 0]) rotate([0, 0, -30]) left_wing();\n        \n        // Tail\n        tail();\n    }\n}\n\n// Skull head with horns\nmodule skull_head() {\n    color(color_bone_white) union() {\n        // Main skull\n        scale([1.2, 0.8, 1]) sphere(4);\n        \n        // Snout\n        translate([3, 0, -1]) scale([1.5, 0.7, 0.7]) sphere(2.5);\n        \n        // Eye sockets with hellfire\n        translate([1.5, 2.2, 1]) {\n            color(color_shadow) sphere(1.2);\n            color(color_hellfire) translate([0, 0, 0.5]) sphere(0.5);\n        }\n        translate([1.5, -2.2, 1]) {\n            color(color_shadow) sphere(1.2);\n            color(color_hellfire) translate([0, 0, 0.5]) sphere(0.5);\n        }\n        \n        // Curved horns\n        for(side = [-1, 1]) {\n            translate([0, side * 2.5, 4]) {\n                rotate([0, side * 20, 0]) {\n                    rotate_extrude(angle = 90) {\n                        translate([2, 0, 0]) circle(r=0.8);\n                    }\n                }\n                rotate([0, side * 30, 0]) translate([2, 0, 0]) rotate([90, 0, 0]) cylinder(h=4, r1=1, r2=0.5);\n            }\n        }\n    }\n}\n\n// Segmented snake body\nmodule body_segments() {\n    color(color_doom_black) {\n        segments = 8;\n        for(i = [0:segments-1]) {\n            translate([-6 - i * 3, 0, 3 - i * 0.5]) {\n                scale([1 - i * 0.05, 1 - i * 0.05, 1 - i * 0.05]) {\n                    rotate([0, i * 10, 0]) sphere(3.5);\n                }\n            }\n        }\n    }\n}\n\n// Skeletal wing structure\nmodule left_wing() {\n    color(color_bone_white) {\n        // Main wing bone\n        hull() {\n            translate([0, 0, 0]) sphere(1);\n            translate([-8, 0, 2]) sphere(0.8);\n            translate([-12, -2, 0]) sphere(0.5);\n        }\n        \n        // Wing fingers\n        for(i = [0:3]) {\n            translate([-8 - i * 2, 0, 2 - i * 0.5]) {\n                rotate([0, 10 - i * 15, 0]) {\n                    hull() {\n                        sphere(0.5);\n                        translate([0, -5 + i, 0]) sphere(0.3);\n                    }\n                }\n            }\n        }\n        \n        // Wing membrane (thin)\n        translate([-10, -3, 1]) rotate([0, 0, 45]) scale([8, 6, 0.5]) cube([1, 1, 0.2], center=true);\n    }\n}\n\n// Barbed tail\nmodule tail() {\n    color(color_doom_black) {\n        tail_len = 20;\n        for(i = [0:tail_len-1]) {\n            t = i / tail_len;\n            translate([-30 - i * 1.5, sin(i * 15) * 2, 2 - t * 2]) {\n                scale([1 - t * 0.8, 1 - t * 0.8, 1 - t * 0.8]) {\n                    rotate([0, i * 8, 0]) sphere(2);\n                }\n            }\n            \n            // Tail spikes\n            if(i % 4 == 0 && i > 5) {\n                translate([-30 - i * 1.5, sin(i * 15) * 2 + 2, 2 - t * 2]) {\n                    rotate([0, 0, 45]) scale([0.5, 0.5, 2]) cylinder(h=2, r1=0.8, r2=0);\n                }\n            }\n        }\n        \n        // Tail tip blade\n        translate([-60, 0, -2]) rotate([0, 0, 90]) scale([0.5, 0.5, 1]) cylinder(h=4, r1=2, r2=0);\n    }\n}\n\n// Scale everything to 50mm length\nscale(50/65) doomserpent();",
    "renders": true
  },
  {
    "mythical_creature": "fatewyrm",
    "openscad_code": "// Fatewyrm – a medium-complexity, 3D-printable, realistic-style mythical creature\n// Overall length ~90 mm, printable without support if oriented head-up\n\n$fn = 32;               // overall smoothness\nscale_factor = 0.8;     // shrink to 80 % so max dim ≈ 72 mm\n\n// ---------- main body ----------\nmodule body() {\n    color(\"darkslategray\")\n    union() {\n        // torso\n        translate([0, 0, 20])\n            scale([1, 0.6, 1.2])\n            sphere(d = 30);\n\n        // serpentine tail\n        hull() {\n            translate([0, 0, 10]) sphere(d = 20);\n            for (i = [1:8])\n                translate([i*-8, 0, 10-i*3])\n                    sphere(d = max(20-i*2, 4));\n        }\n    }\n}\n\n// ---------- head ----------\nmodule head() {\n    color(\"darkslategray\")\n    union() {\n        // snout\n        translate([0, 0, 45])\n            scale([1.2, 0.7, 0.8])\n            sphere(d = 22);\n\n        // cranium\n        translate([5, 0, 50])\n            sphere(d = 20);\n\n        // lower jaw\n        translate([-5, 0, 38])\n            rotate([0, 15, 0])\n            scale([0.9, 0.5, 0.4])\n            sphere(d = 18);\n\n        // nostril slits\n        difference() {\n            translate([6, 0, 44])\n                scale([0.4, 0.2, 0.1])\n                sphere(d = 10);\n            translate([6, 0, 44.5])\n                cube([6,3,2], center=true);\n        }\n    }\n}\n\n// ---------- horns ----------\nmodule horns() {\n    color(\"dimgray\")\n    for (a = [0, 120, 240])\n        rotate([0, 0, a])\n        translate([0, 12, 52])\n            rotate([0, -20, 0])\n            cylinder(h1=12, h2=0, r1=3, r2=0.5, $fn=6);\n}\n\n// ---------- wings ----------\nmodule wings() {\n    color(\"midnightblue\")\n    union() {\n        for (side = [-1, 1]) {\n            mirror([side, 0, 0])\n            translate([10, 0, 35])\n                rotate([0, 0, -30])\n                difference() {\n                    scale([1, 1.8, 0.15])\n                    sphere(d = 35);\n\n                    // membrane cut-outs for realism\n                    for (r = [10:10:30])\n                        translate([r*0.6, r*1.2, 0])\n                            sphere(d = r*0.7);\n                }\n        }\n    }\n}\n\n// ---------- legs ----------\nmodule legs() {\n    color(\"darkslategray\")\n    for (side = [-1, 1])\n        mirror([side, 0, 0])\n        translate([8, 0, 18])\n            rotate([0, 0, -20])\n            union() {\n                // thigh\n                cylinder(h = 12, r1 = 4, r2 = 3);\n                // shin\n                translate([0, 0, -12])\n                    rotate([30, 0, 0])\n                    cylinder(h = 10, r1 = 3, r2 = 2.5);\n                // foot\n                translate([0, -6, -20])\n                    rotate([90, 0, 0])\n                    scale([1.2, 0.4, 1])\n                    sphere(d = 8);\n            }\n}\n\n// ---------- dorsal ridge scales ----------\nmodule ridge() {\n    color(\"darkslateblue\")\n    for (i = [0:5])\n        translate([0, 0, 35-i*5])\n            rotate([0, 0, i*10])\n            scale([1, 0.3, 1])\n            sphere(d = 6);\n}\n\n// ---------- magical runic pattern on wings ----------\nmodule runes() {\n    color(\"gold\")\n    for (side = [-1, 1])\n        mirror([side, 0, 0])\n        for (i = [1:3])\n            translate([15+i*6, i*8, 35])\n                sphere(d = 2);\n}\n\n// ---------- assemble ----------\nscale([scale_factor,scale_factor,scale_factor])\nunion() {\n    body();\n    head();\n    horns();\n    wings();\n    legs();\n    ridge();\n    runes();\n}",
    "renders": true
  },
  {
    "mythical_creature": "timewyrm",
    "openscad_code": "// Timewyrm - A mythical temporal dragon entity\n// Features: serpentine body, chronal wings, hourglass tail, time crystals\n\n// Main colors\n$fn = 32;  // Smooth curves for 3D printing\n\nmodule timewyrm() {\n    union() {\n        // Main serpentine body\n        color(\"darkslategray\") {\n            translate([0, 0, 10]) rotate([0, 90, 0]) \n                cylinder(h = 40, r1 = 8, r2 = 6);\n            \n            // Body segments with scales\n            for(i = [0:4]) {\n                translate([i*8, 0, 10]) rotate([0, 0, i*15])\n                    scale([1, 0.8, 0.8])\n                    sphere(7);\n            }\n        }\n        \n        // Head with temporal features\n        color(\"slateblue\") {\n            translate([42, 0, 10]) rotate([0, -10, 0])\n                scale([1.2, 1, 1])\n                sphere(9);\n            \n            // Temporal horns\n            for(i = [-1, 1]) {\n                color(\"indigo\") {\n                    translate([44, i*4, 15]) rotate([0, -30*i, 10*i])\n                        cylinder(h = 12, r1 = 2, r2 = 1);\n                }\n            }\n            \n            // Eyes - glowing time orbs\n            for(i = [-1, 1]) {\n                color(\"cyan\") {\n                    translate([47, i*3, 12]) sphere(2);\n                }\n                color(\"white\") {\n                    translate([48, i*3, 12]) sphere(1);\n                }\n            }\n        }\n        \n        // Chronal wings (folded for printing)\n        color(\"midnightblue\") {\n            for(side = [-1, 1]) {\n                translate([25, side*10, 15]) rotate([0, 0, side*30])\n                    difference() {\n                        scale([2, 1, 0.2])\n                        sphere(8);\n                        \n                        // Wing membrane cutouts\n                        for(i = [1:3]) {\n                            translate([i*3 - 5, 0, 0])\n                                scale([0.8, 0.6, 1])\n                                sphere(4);\n                        }\n                    }\n            }\n        }\n        \n        // Hourglass tail segments\n        color(\"goldenrod\") {\n            for(i = [-1:-4]) {\n                translate([i*8, 0, 10 - abs(i)*2]) rotate([0, 0, i*20])\n                    difference() {\n                        cylinder(h = 6, r1 = 6 + i, r2 = 5 + i);\n                        // Hourglass shape\n                        translate([0, 0, 3]) rotate([90, 0, 0])\n                            cylinder(h = 6, r1 = 4 + i, r2 = 0);\n                    }\n            }\n        }\n        \n        // Time crystal spines\n        color(\"purple\") {\n            for(i = [0:3]) {\n                translate([20 - i*8, 0, 12 + i*3]) rotate([0, 0, i*45])\n                    scale([1, 0.5, 2])\n                    intersection() {\n                        sphere(3);\n                        cube([6, 6, 6], center = true);\n                    }\n            }\n        }\n        \n        // Support base for printing\n        color(\"gray\") {\n            translate([0, 0, 0])\n                cylinder(h = 2, r = 25);\n        }\n    }\n}\n\n// Scale to print size ~75mm\nscale([1, 1, 1]) timewyrm();",
    "renders": true
  },
  {
    "mythical_creature": "memorydrake",
    "openscad_code": "// Memorydrake - mythical creature of memory and dreams\n// Realistic style, medium complexity\n\n$fn = 36;\n\n// Main body module\nmodule memorydrake_body() {\n    color([0.7, 0.6, 0.9])  // Iridescent purple-blue\n    \n    // Central body - slightly elongated\n    union() {\n        // Main torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n            sphere(15);\n            \n        // Neck base\n        translate([0, 12, 25])\n            rotate([30, 0, 0])\n            scale([0.8, 0.8, 1.2])\n            sphere(10);\n            \n        // Tail connection\n        translate([0, -15, 12])\n            rotate([-20, 0, 0])\n            scale([0.9, 0.9, 0.7])\n            sphere(8);\n    }\n}\n\n// Head with memory crystal features\nmodule memorydrake_head() {\n    color([0.8, 0.7, 1.0])  // Lighter purple\n    \n    union() {\n        // Main head shape\n        translate([0, 18, 32])\n            rotate([45, 0, 0])\n            scale([0.9, 0.7, 1.1])\n            sphere(12);\n            \n        // Snout\n        translate([0, 25, 30])\n            rotate([50, 0, 0])\n            scale([1.2, 0.5, 0.6])\n            cylinder(h=8, r1=5, r2=3);\n            \n        // Memory crystal on forehead\n        translate([0, 16, 42])\n            color([0.5, 0.3, 0.9, 0.8])\n            scale([1, 1, 1.5])\n            sphere(4);\n            \n        // Eyes - glowing memory orbs\n        translate([-5, 20, 36])\n            color([0.3, 0.2, 0.8, 0.9])\n            sphere(2.5);\n        translate([5, 20, 36])\n            color([0.3, 0.2, 0.8, 0.9])\n            sphere(2.5);\n    }\n}\n\n// Wings with memory patterns\nmodule memorydrake_wings() {\n    color([0.6, 0.5, 0.8, 0.7])  // Translucent wing membrane\n    \n    module wing_half(side) {\n        mirror([side, 0, 0])\n        union() {\n            // Wing base\n            translate([0, 0, 20])\n                rotate([0, 0, 30 * side])\n                cylinder(h=3, r1=8, r2=5);\n                \n            // Main wing structure\n            translate([12 * side, -5, 25])\n                rotate([10, -20 * side, 45 * side])\n                scale([1, 0.2, 1.5])\n                sphere(8);\n                \n            // Wing membrane segments\n            for(i = [0:2]) {\n                translate([(8 + i*4) * side, -8 - i*2, 28 - i*3])\n                    rotate([0, -15 * side, 30 * side])\n                    scale([0.8, 0.1, 1.2])\n                    sphere(5 + i);\n            }\n            \n            // Memory vein patterns\n            for(i = [0:3]) {\n                translate([(6 + i*3) * side, -6 - i*2, 25 - i*2])\n                    color([0.4, 0.3, 0.7, 0.5])\n                    rotate([0, -10 * side, 20 * side])\n                    scale([0.3, 0.05, 1])\n                    cylinder(h=8, r=0.5);\n            }\n        }\n    }\n    \n    wing_half(1);\n    wing_half(-1);\n}\n\n// Tail with memory stream effect\nmodule memorydrake_tail() {\n    color([0.65, 0.55, 0.85])\n    \n    union() {\n        // Tail segments\n        for(i = [0:4]) {\n            translate([0, -20 - i*5, 15 - i*2])\n                rotate([0, 0, i*10])\n                scale([1 - i*0.15, 1 - i*0.15, 0.8])\n                sphere(7 - i);\n        }\n        \n        // Memory stream wisps\n        for(i = [0:5]) {\n            translate([sin(i*30)*3, -22 - i*4, 13 - i*2])\n                color([0.5, 0.4, 0.9, 0.6])\n                sphere(1 + i*0.3);\n        }\n    }\n}\n\n// Legs with clawed feet\nmodule memorydrake_legs() {\n    color([0.75, 0.65, 0.9])\n    \n    module leg_pair(side) {\n        mirror([side, 0, 0])\n        union() {\n            // Upper leg\n            translate([8 * side, 0, 10])\n                rotate([0, 15 * side, 0])\n                cylinder(h=12, r1=4, r2=3);\n                \n            // Lower leg\n            translate([10 * side, -5, 5])\n                rotate([0, 30 * side, 0])\n                cylinder(h=10, r1=3, r2=2.5);\n                \n            // Foot with memory claws\n            translate([12 * side, -8, 2])\n                union() {\n                    // Foot base\n                    scale([1.5, 2, 0.8])\n                    sphere(3);\n                    \n                    // Memory claws\n                    for(j = [0:2]) {\n                        translate([2 * side, -10 + j*2, 0])\n                            rotate([0, 20, j*20])\n                            color([0.9, 0.85, 1])\n                            cylinder(h=4, r1=1, r2=0.3);\n                    }\n                }\n        }\n    }\n    \n    leg_pair(1);\n    leg_pair(-1);\n}\n\n// Memory scales pattern\nmodule memory_scales() {\n    color([0.8, 0.7, 0.95, 0.8])\n    \n    for(i = [0:8]) {\n        angle = i * 45;\n        radius = 12;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        \n        translate([x, y, 20])\n            rotate([0, 0, angle])\n            scale([1, 0.5, 0.3])\n            sphere(2);\n    }\n}\n\n// Assembly\nunion() {\n    memorydrake_body();\n    memorydrake_head();\n    memorydrake_wings();\n    memorydrake_tail();\n    memorydrake_legs();\n    memory_scales();\n}\n\n// Ground base for stability\ncolor([0.2, 0.2, 0.3])\n    translate([0, 0, -2])\n    cylinder(h=2, r=25);",
    "renders": true
  },
  {
    "mythical_creature": "dreamserpent",
    "openscad_code": "// DreamSerpent - A mythical serpent with ethereal wings and dream-crystal adornments\n// Size: 80mm length, printable without supports\n\n$fn = 36;\n\n// Main colors\nbody_color = \"darkslateblue\";\ncrystal_color = \"mediumpurple\";\nwing_color = \"lavender\";\neye_color = \"gold\";\n\n// DreamSerpent module\nmodule dreamserpent() {\n    color(body_color) {\n        // Head with snout\n        union() {\n            // Main head sphere\n            translate([0, 0, 5]) sphere(d=12);\n            \n            // Snout\n            translate([6, 0, 3]) scale([1.5, 0.8, 0.8]) sphere(d=8);\n            \n            // Lower jaw\n            translate([2, 0, -2]) cube([10, 6, 3], center=true);\n        }\n        \n        // Eyes (magical glowing orbs)\n        color(eye_color) {\n            translate([4, 4, 7]) sphere(d=3);\n            translate([4, -4, 7]) sphere(d=3);\n        }\n        \n        // Horns (curved back)\n        for(side = [-1, 1]) {\n            translate([0, side*5, 10])\n            rotate([0, side*30, 0])\n            rotate([0, 0, side*20])\n            scale([0.3, 0.3, 1])\n            cylinder(h=15, d1=3, d2=1);\n        }\n        \n        // Neck and body segments\n        for(i = [0:9]) {\n            translate([-i*6 - 8, 0, 3*cos(i*20)])\n            rotate([0, i*5, 0])\n            scale([1 - i*0.05, 1 - i*0.05, 1 - i*0.05])\n            sphere(d=10 - i*0.5);\n        }\n        \n        // Tail (tapering)\n        for(i = [0:5]) {\n            translate([-i*8 - 65, 0, 2*sin(i*30)])\n            rotate([0, -i*10, 0])\n            scale([0.4 - i*0.05, 0.4 - i*0.05, 0.4 - i*0.05])\n            sphere(d=8);\n        }\n    }\n    \n    // Ethereal wings\n    color(wing_color, 0.7) {\n        for(side = [-1, 1]) {\n            translate([-20, side*12, 8])\n            rotate([0, 0, side*20])\n            rotate([0, side*30, 0])\n            difference() {\n                scale([1, 1.5, 0.1])\n                sphere(d=25);\n                \n                // Wing membrane cutouts\n                for(j = [1:3]) {\n                    translate([j*5 - 10, 0, 0])\n                    scale([0.3, 0.2, 1])\n                    sphere(d=15);\n                }\n            }\n        }\n    }\n    \n    // Dream crystals along spine\n    color(crystal_color, 0.8) {\n        for(i = [0:7]) {\n            translate([-i*10 - 5, 0, 8 + 2*sin(i*45)])\n            rotate([0, 0, i*30])\n            scale([0.5, 0.5, 1.5])\n            cylinder(h=6, d=4, $fn=6);\n        }\n    }\n    \n    // Scales pattern on body\n    color(body_color) {\n        for(i = [0:8]) {\n            for(j = [0:3]) {\n                angle = j*120 + i*15;\n                radius = 4 - i*0.2;\n                translate([-i*8 - 8, radius*cos(angle), 3 + radius*sin(angle)])\n                sphere(d=1.5);\n            }\n        }\n    }\n    \n    // Mystical tail crystal\n    color(crystal_color) {\n        translate([-95, 0, 2])\n        rotate([0, 0, 45])\n        scale([0.8, 0.8, 2])\n        cylinder(h=8, d=5, $fn=6);\n    }\n}\n\n// Create the dreamserpent\ndreamserpent();",
    "renders": true
  },
  {
    "mythical_creature": "nightmarewyrm",
    "openscad_code": "// Nightmarewyrm - A realistic mid-complexity 3D printable model\n// Overall length ~80 mm, wingspan ~90 mm\n\n// Basic parameters\n$fn = 36;\nbody_len = 40;\ntail_len = 30;\nwing_span = 45;\nhead_h = 12;\n\nmodule nightmarewyrm() {\n    color(\"darkslategray\")\n    union() {\n        // Central body\n        translate([0, 0, 8])\n        scale([1.2, 0.8, 1])\n        sphere(d = body_len);\n\n        // Serpentine neck & head\n        translate([-body_len/2, 0, 12])\n        rotate([0, 20, 0])\n        cylinder(h = 18, d1 = 10, d2 = 6);\n        \n        // Head\n        translate([-body_len/2-15, 0, 18])\n        scale([1.3, 0.9, 1.1])\n        sphere(d = head_h);\n\n        // Snout\n        translate([-body_len/2-22, 0, 18])\n        rotate([0, 25, 0])\n        cylinder(h = 10, d1 = 5, d2 = 2);\n\n        // Tail\n        for(i = [0:4]) {\n            translate([body_len/2 + i*6, 0, 8 - i*1.5])\n            rotate([0, -i*8, 0])\n            scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.1])\n            sphere(d = body_len - i*5);\n        }\n\n        // Wings\n        color(\"darkslateblue\")\n        for(side = [-1, 1]) {\n            translate([0, side*body_len/3, 12])\n            rotate([0, 0, side*-20])\n            difference() {\n                // Main wing membrane\n                translate([0, 0, 0])\n                rotate([90, 0, -30])\n                scale([1.5, 1, 0.2])\n                sphere(d = wing_span);\n                \n                // Wing holes for skeletal look\n                translate([10, side*5, 0])\n                sphere(d = 8);\n                translate([15, side*12, 0])\n                sphere(d = 6);\n                translate([20, side*18, 0])\n                sphere(d = 4);\n            }\n            \n            // Wing claws\n            translate([wing_span/2 - 5, side*wing_span/3, 10])\n            rotate([30, 0, side*20])\n            cylinder(h = 6, d1 = 3, d2 = 1);\n        }\n\n        // Legs\n        color(\"black\")\n        for(side = [-1, 1]) {\n            translate([body_len/4, side*body_len/3, 0])\n            rotate([0, 0, side*15])\n            cylinder(h = 12, d = 4);\n            translate([body_len/4 + 2, side*body_len/3 + side*3, 0])\n            rotate([0, 0, side*15])\n            cylinder(h = 10, d = 3.5);\n        }\n\n        // Horns\n        color(\"dimgray\")\n        for(i = [0:2]) {\n            rotate([0, 0, i*45 - 45])\n            translate([-body_len/2-15, 0, 22 + i*2])\n            rotate([10, 0, 0])\n            cylinder(h = 8 - i*1.5, d1 = 2 + i*0.5, d2 = 1);\n        }\n\n        // Tail spikes\n        for(i = [0:6]) {\n            color(\"dimgray\")\n            translate([body_len/2 + 5 + i*4, 0, 8 - i*1.5 + 2])\n            rotate([0, 90, 0])\n            cylinder(h = 4, d1 = 2, d2 = 0.5);\n        }\n\n        // Eye sockets\n        color(\"red\")\n        translate([-body_len/2-17, 3, 20])\n        sphere(d = 2.5);\n        translate([-body_len/2-17, -3, 20])\n        sphere(d = 2.5);\n\n        // Scale texture on body\n        color(\"darkslategray\")\n        for(i = [0:3]) {\n            for(j = [0:7]) {\n                rotate([0, 0, j*45])\n                translate([i*7 - body_len/2 + 5, 0, 8 + i*2])\n                scale([1, 0.7, 0.3])\n                sphere(d = 4);\n            }\n        }\n    }\n}\n\n// Render the creature\nnightmarewyrm();",
    "renders": true
  },
  {
    "mythical_creature": "illusionhydra",
    "openscad_code": "// Illusion Hydra - Realistic Style, Medium Complexity\n// A serpentine creature with multiple heads that create mesmerizing illusions\n\n$fn = 32;\n\n// Main colors for the illusion hydra\nbody_color = \"#2E8B57\";  // Sea green for scales\nhead_color = \"#8B4513\";   // Saddle brown for heads\nhorn_color = \"#FFD700\";   // Gold for horns\neye_color = \"#FF4500\";    // Orange-red for glowing eyes\n\nmodule hydra_body() {\n    color(body_color)\n    difference() {\n        // Main serpentine body\n        union() {\n            // Torso section\n            translate([0, 0, 10])\n                scale([1.5, 1, 1])\n                sphere(8);\n            \n            // Neck base\n            translate([0, 0, 20])\n                cylinder(h=15, r1=6, r2=4);\n                \n            // Body segments with scales\n            for(i = [0:3]) {\n                translate([0, 0, -i*8])\n                    scale([1.2 - i*0.1, 1 - i*0.1, 1])\n                    sphere(7 - i*1);\n            }\n            \n            // Tail\n            translate([0, 0, -30])\n                rotate([0, 10, 0])\n                cylinder(h=25, r1=4, r2=1);\n        }\n        \n        // Scale texture\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([7, 0, 5])\n                    cube([2, 0.5, 8]);\n        }\n    }\n}\n\nmodule hydra_head(position, rotation, scale_factor=1) {\n    color(head_color)\n    translate(position)\n    rotate([0, 0, rotation])\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Head base\n        translate([0, 0, 5])\n            scale([1.2, 1, 1.5])\n            sphere(5);\n            \n        // Snout\n        translate([0, 0, 12])\n            scale([0.8, 0.6, 1])\n            sphere(4);\n            \n        // Horns\n        color(horn_color)\n        translate([3, 0, 8])\n            rotate([0, 30, 0])\n            cylinder(h=6, r1=2, r2=0.5);\n        translate([-3, 0, 8])\n            rotate([0, -30, 0])\n            cylinder(h=6, r1=2, r2=0.5);\n            \n        // Eyes\n        color(eye_color)\n        translate([2, 2.5, 9])\n            sphere(1.2);\n        translate([-2, 2.5, 9])\n            sphere(1.2);\n            \n        // Illusion aura effect\n        color([1, 0.5, 0, 0.3])\n        translate([0, 0, 8])\n            scale([1.5, 1.5, 1.5])\n            sphere(4);\n    }\n}\n\nmodule hydra_legs() {\n    color(body_color)\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([side*6, 0, 0])\n            rotate([0, side*15, 0])\n            cylinder(h=12, r1=2, r2=1.5);\n            \n        // Back legs\n        translate([side*5, 0, -15])\n            rotate([0, side*15, 0])\n            cylinder(h=10, r1=2, r2=1.5);\n            \n        // Webbed feet\n        translate([side*7, 0, -12])\n            union() {\n                for(i = [0:2]) {\n                    rotate([0, 0, (i-1)*30])\n                        translate([0, 2, 0])\n                        cube([1, 3, 0.5]);\n                }\n            }\n    }\n}\n\nmodule hydra_wings() {\n    color(body_color)\n    for(side = [-1, 1]) {\n        translate([side*8, 0, 15])\n            rotate([0, side*30, 0])\n            difference() {\n                // Wing membrane\n                union() {\n                    // Main wing\n                    scale([1, 2, 0.3])\n                        sphere(8);\n                        \n                    // Wing bones\n                    for(i = [0:3]) {\n                        rotate([0, 0, i*45 - 45])\n                            translate([0, 12, 0])\n                            cube([1, 8, 0.5]);\n                    }\n                }\n                \n                // Wing holes for illusion effect\n                for(i = [0:2]) {\n                    translate([side*2, 8 + i*5, 0])\n                        sphere(2);\n                }\n            }\n    }\n}\n\n// Assembly\nunion() {\n    hydra_body();\n    hydra_legs();\n    hydra_wings();\n    \n    // Multiple heads creating illusions\n    hydra_head([0, 0, 35], 0, 1);\n    hydra_head([5, 3, 32], 30, 0.9);\n    hydra_head([-5, 3, 32], -30, 0.9);\n    hydra_head([0, -4, 33], 180, 0.8);\n}",
    "renders": true
  },
  {
    "mythical_creature": "miragewyrm",
    "openscad_code": "// Miragewyrm - A serpentine desert dragon that shimmers with heat mirages\n// Scaled for 3D printing, roughly 80mm long\n\n$fn = 32;\n\n// Main colors\nbody_color = \"#c2b280\";      // Sandy desert color\naccent_color = \"#d4af37\";    // Golden highlights\neye_color = \"#8b0000\";       // Deep red eyes\n\n// Body segments - creates serpentine curve\nmodule body_segment(length, radius, twist) {\n    color(body_color) {\n        translate([0, 0, length/2])\n            rotate([0, 0, twist])\n                cylinder(h = length, r1 = radius, r2 = radius * 0.9);\n    }\n}\n\n// Create the curved serpentine body\nmodule body() {\n    union() {\n        // Head segment - larger and more detailed\n        translate([0, 0, 0]) {\n            color(body_color) {\n                sphere(r = 8);\n                \n                // Snout\n                translate([10, 0, 0])\n                    scale([1.5, 0.7, 0.7])\n                        sphere(r = 6);\n                \n                // Horns - curved back\n                for(i = [-1, 1]) {\n                    translate([2, i * 6, 6])\n                        rotate([30, 0, i * -20])\n                            cylinder(h = 12, r1 = 2, r2 = 0.5);\n                }\n            }\n            \n            // Eyes\n            color(eye_color) {\n                for(i = [-1, 1]) {\n                    translate([7, i * 3.5, 2])\n                        sphere(r = 1.5);\n                }\n            }\n        }\n        \n        // Neck segments\n        for(i = [1:5]) {\n            translate([0, 0, i * 8])\n                body_segment(8, 7 - i * 0.5, i * 15);\n        }\n        \n        // Main body coils\n        for(i = [6:12]) {\n            translate([sin(i * 20) * 10, cos(i * 20) * 10, i * 8])\n                body_segment(8, 5.5, i * 20);\n        }\n        \n        // Tail segments - tapering\n        for(i = [13:20]) {\n            translate([sin(i * 25) * 15, cos(i * 25) * 15, 100 - (i-12) * 6])\n                body_segment(6, 5 - (i-12) * 0.3, i * 25);\n        }\n    }\n}\n\n// Dorsal fins - creates mirage-like heat waves\nmodule dorsal_fins() {\n    color(accent_color) {\n        for(i = [3:15]) {\n            translate([sin(i * 20) * 10, cos(i * 20) * 10, i * 8 + 4]) {\n                rotate([0, 0, i * 20 + 90])\n                    scale([0.3, 1, 1])\n                        cylinder(h = 8, r1 = 3, r2 = 0.5);\n            }\n        }\n    }\n}\n\n// Scale texture - simple overlapping scales\nmodule scales() {\n    color(accent_color) {\n        for(i = [2:18]) {\n            for(j = [0:5]) {\n                rotate([0, 0, j * 60])\n                    translate([sin(i * 20) * 12, cos(i * 20) * 12, i * 8])\n                        scale([1, 0.7, 0.3])\n                            sphere(r = 2);\n            }\n        }\n    }\n}\n\n// Wings - translucent heat mirage wings\nmodule wings() {\n    // Left wing\n    color([212/255, 175/255, 55/255, 0.7]) {\n        translate([0, -15, 30]) {\n            rotate([0, -20, -30])\n                scale([1, 2, 0.1])\n                    cylinder(h = 20, r1 = 15, r2 = 5);\n        }\n    }\n    \n    // Right wing\n    color([212/255, 175/255, 55/255, 0.7]) {\n        translate([0, 15, 30]) {\n            rotate([0, -20, 30])\n                scale([1, 2, 0.1])\n                    cylinder(h = 20, r1 = 15, r2 = 5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    dorsal_fins();\n    scales();\n    wings();\n}\n\n// Base for stability\ncolor(\"#8b7355\") {\n    translate([0, 0, -5])\n        cylinder(h = 5, r = 25);\n}",
    "renders": true
  },
  {
    "mythical_creature": "rainbowserpent",
    "openscad_code": "// Rainbow Serpent - 3D printable mythical creature\n// Based on Aboriginal mythology - water deity and creator spirit\n\n// Global settings\n$fn = 32;  // Smooth curves for printing\nwidth = 2;  // Wall thickness for 3D printing\n\n// Colors for rainbow effect\ncolor_cycle = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"];\n\n// Main body module\nmodule rainbow_serpent() {\n    // Head\n    translate([0, 0, 15]) {\n        color(\"darkgreen\") head();\n    }\n    \n    // Body segments with rainbow colors\n    for(i = [0:5]) {\n        translate([i * 12 - 30, 0, 10 - i * 1.5]) {\n            rotate([0, 0, i * 15]) {\n                color(color_cycle[i]) body_segment(i);\n            }\n        }\n    }\n    \n    // Tail\n    translate([-40, 0, 2]) {\n        rotate([0, 0, -20]) {\n            color(\"purple\") tail();\n        }\n    }\n    \n    // Horns\n    translate([8, 6, 20]) {\n        rotate([0, -30, 45]) {\n            color(\"goldenrod\") horn();\n        }\n    }\n    translate([8, -6, 20]) {\n        rotate([0, -30, -45]) {\n            color(\"goldenrod\") horn();\n        }\n    }\n    \n    // Scales along body\n    for(i = [0:5]) {\n        for(j = [0:3]) {\n            translate([i * 12 - 28 + j * 2, 0, 12 - i * 1.5]) {\n                rotate([0, 90, 0]) {\n                    color(\"darkgreen\") scale();\n                }\n            }\n        }\n    }\n}\n\n// Serpent head\nmodule head() {\n    difference() {\n        union() {\n            // Main head shape\n            scale([1.2, 1, 1]) sphere(8);\n            \n            // Snout\n            translate([6, 0, -2]) {\n                scale([1.5, 0.8, 0.8]) sphere(5);\n            }\n            \n            // Eyes\n            translate([4, 4, 2]) sphere(2);\n            translate([4, -4, 2]) sphere(2);\n        }\n        \n        // Eye sockets\n        translate([5, 4, 2]) sphere(1.5);\n        translate([5, -4, 2]) sphere(1.5);\n        \n        // Nostrils\n        translate([8, 2, -2]) cylinder(h=3, r=1);\n        translate([8, -2, -2]) cylinder(h=3, r=1);\n    }\n}\n\n// Body segment\nmodule body_segment(size) {\n    // Ellipsoid body segment\n    scale([1, 0.8 - size * 0.05, 0.8 - size * 0.05]) \n    sphere(6 + size * 0.5);\n    \n    // Dorsal fin\n    translate([0, 0, 6 + size * 0.5]) {\n        rotate([0, 90, 0]) {\n            linear_extrude(height=0.5) {\n                polygon(points=[[0,0], [3,2], [6,0], [3,4]]);\n            }\n        }\n    }\n}\n\n// Serpent tail\nmodule tail() {\n    hull() {\n        sphere(5);\n        translate([-10, 0, -3]) scale([0.8, 0.8, 0.8]) sphere(4);\n        translate([-20, 0, -5]) scale([0.6, 0.6, 0.6]) sphere(3);\n        translate([-28, 0, -6]) scale([0.4, 0.4, 0.4]) sphere(2);\n    }\n}\n\n// Horn\nmodule horn() {\n    difference() {\n        cylinder(h=8, r1=1.5, r2=0.5);\n        translate([0, 0, -1]) cylinder(h=10, r1=1, r2=0);\n    }\n}\n\n// Scale detail\nmodule scale() {\n    difference() {\n        scale([1, 0.7, 0.3]) sphere(1.5);\n        translate([0, 0, -0.2]) cube([3, 2, 0.5], center=true);\n    }\n}\n\n// Generate the rainbow serpent\nrainbow_serpent();",
    "renders": true
  },
  {
    "mythical_creature": "prismwyrm",
    "openscad_code": "// Prismwyrm - a crystalline dragon with prismatic scales\n// Designed for 3D printing with no overhangs\n\n$fn = 32;\n\n// Main body\nmodule prismwyrm() {\n    color(\"royalblue\") {\n        // Head\n        union() {\n            translate([0, 0, 20]) {\n                // Main head shape\n                sphere(d=15);\n                \n                // Snout\n                translate([10, 0, -2]) \n                    scale([1.5, 0.8, 0.8]) \n                    sphere(d=8);\n                \n                // Horns - crystalline formations\n                for(i=[-1, 1]) {\n                    translate([5*i, 8*i, 5]) \n                        rotate([0, 20*i, 0]) \n                        cylinder(d1=3, d2=1, h=12);\n                    translate([3*i, 6*i, 7]) \n                        rotate([0, 30*i, 0]) \n                        cylinder(d1=2, d2=0.5, h=8);\n                }\n                \n                // Eyes - glowing prisms\n                for(i=[-1, 1]) {\n                    translate([6*i, 7, 0]) {\n                        color(\"cyan\") sphere(d=3);\n                        color(\"white\") sphere(d=1.5);\n                    }\n                }\n            }\n            \n            // Neck\n            translate([0, 0, 12]) \n                scale([1, 1, 1.5]) \n                cylinder(d=10, h=8);\n            \n            // Body segments\n            for(i=[0:4]) {\n                translate([0, 0, 12 - i*8]) {\n                    rotate([0, 0, i*15]) {\n                        scale([1.2 - i*0.15, 1.2 - i*0.15, 0.8]) \n                        sphere(d=12);\n                    }\n                }\n            }\n            \n            // Tail\n            for(i=[0:6]) {\n                translate([0, 0, 12 - 40 - i*6]) {\n                    rotate([0, 0, -i*20]) {\n                        scale([0.8 - i*0.1, 0.8 - i*0.1, 0.6]) \n                        sphere(d=8 - i);\n                    }\n                }\n            }\n        }\n        \n        // Wings - crystalline membrane structures\n        for(side=[-1, 1]) {\n            translate([side*8, 0, 5]) {\n                rotate([0, side*20, 0]) {\n                    // Wing base\n                    color(\"darkblue\") \n                    cube([side*15, 2, 8], center=true);\n                    \n                    // Wing membranes - prismatic scales\n                    for(row=[0:3]) {\n                        for(col=[0:4]) {\n                            translate([side*(5 + col*3), 0, -2 + row*3]) {\n                                color(row%2 ? \"purple\" : \"violet\") \n                                scale([1, 0.5, 1]) \n                                sphere(d=2.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Legs - sturdy crystal formations\n        for(side=[-1, 1]) {\n            for(pos=[-1, 1]) {\n                translate([side*6, pos*4, 0]) {\n                    color(\"slateblue\") {\n                        // Upper leg\n                        cylinder(d=3, h=6);\n                        translate([0, 0, -3]) {\n                            // Lower leg\n                            cylinder(d=2.5, h=5);\n                            // Foot\n                            translate([0, 0, -5.5]) \n                                scale([1.5, 2, 0.5]) \n                                sphere(d=3);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Prismatic scale details along spine\n        for(i=[0:15]) {\n            translate([0, 0, 15 - i*4]) {\n                rotate([0, 0, i*25]) {\n                    color(i%3==0 ? \"gold\" : i%3==1 ? \"silver\" : \"turquoise\") \n                    scale([0.3, 2, 1]) \n                    sphere(d=4);\n                }\n            }\n        }\n    }\n}\n\n// Create the complete prismwyrm\nprismwyrm();",
    "renders": true
  },
  {
    "mythical_creature": "iridescentdrake",
    "openscad_code": "// IridescentDrake - Medium Complexity Realistic Style\n// Winged serpentine dragon with iridescent scales and magical features\n\n$fn = 32;\n\nmodule drake_body() {\n    color(\"steelblue\") {\n        // Main serpentine body\n        translate([0, 0, 10]) {\n            // Head\n            sphere(r=8);\n            \n            // Neck segment\n            translate([0, 0, -10])\n                cylinder(h=20, r1=8, r2=12);\n            \n            // Torso\n            translate([0, -20, -25])\n                cylinder(h=30, r1=12, r2=15);\n            \n            // Tail segments\n            for(i = [0:5]) {\n                translate([0, -50 - i*10, -25 - i*3])\n                    rotate([0, 0, i*15])\n                    cylinder(h=10, r1=15-i*2, r2=15-(i+1)*2);\n            }\n        }\n    }\n}\n\nmodule wings() {\n    color(\"darkslateblue\") {\n        // Left wing\n        translate([12, -20, 5]) {\n            rotate([0, 0, -30]) {\n                // Wing base\n                cylinder(h=5, r=3);\n                \n                // Wing membrane segments\n                difference() {\n                    scale([1, 2, 0.5])\n                        sphere(r=20);\n                    translate([0, 0, -5])\n                        cube([40, 40, 10], center=true);\n                }\n                \n                // Wing fingers\n                for(i = [1:3]) {\n                    rotate([0, 0, i*25]) {\n                        translate([15, 5, 0])\n                            cylinder(h=25, r=1);\n                        translate([15, 5, 0])\n                            rotate([0, 0, 5])\n                            cylinder(h=20, r=0.8);\n                    }\n                }\n            }\n        }\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0]) {\n            translate([12, -20, 5]) {\n                rotate([0, 0, -30]) {\n                    cylinder(h=5, r=3);\n                    difference() {\n                        scale([1, 2, 0.5])\n                            sphere(r=20);\n                        translate([0, 0, -5])\n                            cube([40, 40, 10], center=true);\n                    }\n                    for(i = [1:3]) {\n                        rotate([0, 0, i*25]) {\n                            translate([15, 5, 0])\n                                cylinder(h=25, r=1);\n                            translate([15, 5, 0])\n                                rotate([0, 0, 5])\n                                cylinder(h=20, r=0.8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule legs() {\n    color(\"royalblue\") {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side*10, -15, 0]) {\n                // Upper leg\n                rotate([0, side*15, 0])\n                    cylinder(h=12, r=3);\n                \n                // Lower leg\n                translate([0, -12, -5])\n                    rotate([0, side*15, 0])\n                    cylinder(h=10, r=2.5);\n                \n                // Foot\n                translate([0, -20, -8])\n                    rotate([90, 0, 0])\n                    cylinder(h=5, r=3);\n            }\n        }\n        \n        // Rear legs\n        for(side = [-1, 1]) {\n            translate([side*15, -45, -20]) {\n                // Upper leg\n                rotate([0, side*15, 0])\n                    cylinder(h=15, r=4);\n                \n                // Lower leg\n                translate([0, -15, -5])\n                    rotate([0, side*15, 0])\n                    cylinder(h=12, r=3.5);\n                \n                // Foot\n                translate([0, -25, -8])\n                    rotate([90, 0, 0])\n                    cylinder(h=6, r=4);\n            }\n        }\n    }\n}\n\nmodule horns() {\n    color(\"indigo\") {\n        // Main horns\n        for(angle = [-30, 30]) {\n            rotate([0, 0, angle]) {\n                translate([0, 8, 12])\n                    rotate([angle, 0, 0])\n                    cylinder(h=15, r1=3, r2=1);\n            }\n        }\n        \n        // Smaller horns\n        for(angle = [-45, 0, 45]) {\n            rotate([0, 0, angle]) {\n                translate([0, 6, 10])\n                    rotate([angle+10, 0, 0])\n                    cylinder(h=8, r1=2, r2=0.5);\n            }\n        }\n    }\n}\n\nmodule scales() {\n    color(\"mediumslateblue\") {\n        // Body scales pattern\n        for(i = [0:10]) {\n            for(j = [0:8]) {\n                translate([sin(i*30)*10, -20 - i*8, -20 - i*2]) {\n                    rotate([0, 0, i*30])\n                    scale([1, 1.5, 0.5])\n                    sphere(r=2);\n                }\n            }\n        }\n        \n        // Tail ridge scales\n        for(i = [0:5]) {\n            translate([0, -50 - i*10, -20 - i*3]) {\n                rotate([0, 0, i*15])\n                difference() {\n                    cube([4, 8, 6], center=true);\n                    translate([0, 4, 0])\n                        cube([4.5, 8, 6], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule magical_features() {\n    color(\"aqua\") {\n        // Eye glow\n        translate([5, 6, 10])\n            sphere(r=1.5);\n        translate([-5, 6, 10])\n            sphere(r=1.5);\n        \n        // Chest crystal\n        translate([0, -20, 0])\n            rotate([0, 45, 0])\n            difference() {\n                cube([6, 6, 6], center=true);\n                rotate([45, 0, 0])\n                    cube([6, 6, 6], center=true);\n            }\n        \n        // Wing runes\n        for(side = [-1, 1]) {\n            translate([side*20, -30, 5]) {\n                for(i = [0:3]) {\n                    rotate([0, 0, i*45])\n                        cylinder(h=0.5, r=2);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    drake_body();\n    wings();\n    legs();\n    horns();\n    scales();\n    magical_features();\n}",
    "renders": true
  },
  {
    "mythical_creature": "chromaticcoil",
    "openscad_code": "// Chromaticcoil - A mythical serpent that embodies all colors of the spectrum\n// Designed for 3D printing with moderate complexity and realistic styling\n\n$fn=32;\n\n// Main module\nmodule chromaticcoil() {\n    // Body - coiled serpent shape\n    color(\"mediumspringgreen\") \n    union() {\n        // Central coil body\n        for(i=[0:15:345]) {\n            rotate([0, 0, i])\n            translate([20*sin(i*2), 20*cos(i*2), i/5])\n            scale([1, 1, 0.8]) \n            sphere(d=12);\n        }\n        \n        // Head section\n        translate([0, 0, 75])\n        union() {\n            // Main head\n            color(\"crimson\")\n            sphere(d=16);\n            \n            // Snout\n            color(\"orangered\")\n            translate([0, 8, 0])\n            scale([0.6, 1.5, 0.8])\n            sphere(d=12);\n            \n            // Eyes - magical gems\n            color(\"gold\")\n            translate([-4, 7, 2])\n            sphere(d=3);\n            translate([4, 7, 2])\n            sphere(d=3);\n            \n            // Horns - crystalline growths\n            color(\"purple\") \n            translate([-6, -2, 6])\n            rotate([30, 0, -30])\n            cylinder(h=8, d1=3, d2=1);\n            translate([6, -2, 6])\n            rotate([30, 0, 30])\n            cylinder(h=8, d1=3, d2=1);\n        }\n        \n        // Scales along body\n        for(i=[0:45:360]) {\n            rotate([0, 0, i])\n            translate([15*sin(i*3), 15*cos(i*3), 15])\n            color(\"darkorange\")\n            scale([1, 0.5, 0.3])\n            sphere(d=6);\n        }\n        \n        // Wing-like fins\n        color(\"royalblue\")\n        translate([0, 0, 60])\n        rotate([0, 0, 0])\n        translate([0, -15, 0])\n        scale([1, 0.2, 1])\n        sphere(d=15);\n        \n        translate([0, 0, 60])\n        rotate([0, 0, 180])\n        translate([0, -15, 0])\n        scale([1, 0.2, 1])\n        sphere(d=15);\n        \n        // Tail tip - mystical crystal\n        color(\"magenta\")\n        translate([0, 0, -5])\n        sphere(d=8);\n        color(\"white\")\n        translate([0, 0, -5])\n        sphere(d=4);\n    }\n}\n\n// Base for stability\ncolor(\"darkslategray\")\ntranslate([0, 0, -2])\ncylinder(h=2, d=50, $fn=64);\n\n// Generate the creature\nchromaticcoil();",
    "renders": true
  },
  {
    "mythical_creature": "spectrumwyrm",
    "openscad_code": "$fa = 2;\n$fs = 0.5;\n\n// Spectrumwyrm - translucent dragon of pure light\n// Scaled to ~70mm length\n\ncolor([0.9,0.7,1,0.7]) union() {\n    // Main body\n    translate([0,0,5]) scale([1,0.6,0.4]) sphere(d=20);\n\n    // Head\n    translate([-22,0,10]) rotate([0,0,-5]) union() {\n        // Skull base\n        color([0.8,0.6,0.95,0.8]) sphere(d=12);\n        \n        // Snout\n        translate([-6,0,-2]) scale([1.5,0.6,0.6]) sphere(d=6);\n        \n        // Horns - crystalline light prisms\n        for(a=[-40:40:80]) rotate([a,0,-20]) \n            translate([-8,0,6]) scale([0.2,0.2,1]) cylinder(d1=3,d2=1,h=8);\n        \n        // Eyes - glowing orbs\n        for(x=[-2.5,2.5]) {\n            color([1,1,0.8,0.9]) translate([x,4.5,1]) sphere(d=2.5);\n            color([0,0,0,0.9]) translate([x,5.2,1]) sphere(d=1);\n        }\n    }\n\n    // Neck\n    translate([-10,0,5]) rotate([0,-5,0]) \n        scale([0.6,0.6,1]) cylinder(d1=8,d2=12,h=15);\n\n    // Wings - light membrane\n    for(side=[-1,1]) {\n        color([0.7,0.5,1,0.5]) mirror([side,0,0]) union() {\n            // Wing arm\n            translate([5,0,12]) rotate([0,0,side*20]) rotate([0,30,0]) \n                scale([0.3,0.3,1]) cylinder(d=3,h=25);\n            \n            // Wing membrane\n            translate([10,side*8,20]) rotate([0,30,0]) linear_extrude(height=0.5) {\n                polygon(points=[\n                    [0,0],\n                    [15,side*30],\n                    [25,side*15],\n                    [30,0],\n                    [25,side*-10],\n                    [15,side*-5]\n                ]);\n            }\n            \n            // Wing claws\n            for(i=[1:3]) {\n                translate([5+i*7,side*(15-i*3),20-i*2]) rotate([0,60,side*30])\n                    scale([0.2,0.2,1]) cylinder(d1=2,d2=0,h=10-i*2);\n            }\n        }\n    }\n\n    // Tail segments - decreasing light crystals\n    for(i=[0:8]) {\n        color([0.5+0.05*i,0.3+0.05*i,0.8+0.02*i,0.7-0.05*i]) \n            translate([10+i*5,0,5-i*0.5]) rotate([0,0,i*5]) \n                scale([1-0.08*i,1-0.08*i,1-0.08*i]) \n                    sphere(d=12-0.8*i);\n    }\n\n    // Legs\n    for(side=[-1,1]) {\n        // Front leg\n        translate([-5,side*6,0]) rotate([0,0,side*15]) union() {\n            // Upper leg\n            color([0.85,0.65,0.95,0.8]) cylinder(d=4,h=12);\n            // Lower leg\n            translate([0,0,12]) rotate([15,0,0]) cylinder(d=3,h=10);\n            // Paw\n            translate([0,0,22]) sphere(d=4);\n            // Claws\n            for(c=[-1,0,1]) {\n                color([1,0.9,0.8,0.9]) \n                    translate([c,0,24]) cylinder(d1=1,d2=0,h=3);\n            }\n        }\n        \n        // Rear leg\n        translate([15,side*6,0]) rotate([0,0,side*-10]) union() {\n            color([0.85,0.65,0.95,0.8]) cylinder(d=4.5,h=14);\n            translate([0,0,14]) rotate([20,0,0]) cylinder(d=3.5,h=12);\n            translate([0,0,26]) sphere(d=5);\n            for(c=[-1.2,0,1.2]) {\n                color([1,0.9,0.8,0.9]) \n                    translate([c,0,28]) cylinder(d1=1.2,d2=0,h=3.5);\n            }\n        }\n    }\n\n    // Spine ridges - light fractals\n    for(i=[-2:1:2]) {\n        translate([i*3,0,12]) {\n            for(j=[0:2]) {\n                color([1,0.9,0.5,0.6]) \n                    translate([0,0,j*2]) scale([0.3,0.3,1]) \n                        cylinder(d=3-j,h=2);\n            }\n        }\n    }\n\n    // Aura particles\n    for(a=[0:30:359]) {\n        color([1,0.8,1,0.3]) translate([cos(a)*35,sin(a)*35,5+sin(a*3)*3]) \n            sphere(d=1+sin(a*5)*0.5);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "neonsnake",
    "openscad_code": "// Neonsnake - A mythical electric serpent with bioluminescent scales\n// Total length ~80mm, designed for FDM printing with minimal supports\n\n$fn=32;\nscale_factor = 1; // Adjust for different print sizes\n\n// Main body\nmodule body() {\n    color(\"limegreen\") \n    union() {\n        // Head\n        translate([0,0,5]) \n        scale([1.2,0.8,1]) sphere(5);\n        \n        // Neck\n        translate([0,-8,3]) rotate([0,20,0]) \n        cylinder(h=12, r1=4, r2=2.5);\n        \n        // Main body segments\n        for(i=[0:5]) {\n            translate([0,-20-i*8,2-i]) \n            rotate([0,i*8,0]) \n            scale([1,1,0.8]) sphere(4-i*0.3);\n        }\n        \n        // Tail segments getting smaller\n        for(i=[0:4]) {\n            translate([0,-60-i*5,1-i*0.5]) \n            rotate([0,20+i*5,0]) \n            sphere(3-i*0.4);\n        }\n    }\n}\n\n// Bioluminescent dorsal scales\nmodule scales() {\n    color(\"cyan\") \n    for(i=[0:8]) {\n        angle = i * 15;\n        ypos = -15 - i * 7;\n        scale_size = max(0.5, 1 - i*0.08);\n        \n        translate([0,ypos,4]) \n        rotate([0,angle,0]) \n        scale([scale_size,scale_size,scale_size*1.2]) \n        cube([2,1,1], center=true);\n    }\n}\n\n// Electric frills on neck\nmodule frills() {\n    color(\"purple\") \n    for(i=[0:5]) {\n        rotate([0,0,i*60]) {\n            translate([3,-10,4]) \n            scale([1,0.3,0.1]) \n            sphere(3);\n            translate([-3,-10,4]) \n            scale([1,0.3,0.1]) \n            sphere(3);\n        }\n    }\n}\n\n// Wings (small, vestigial - like electric fins)\nmodule wings() {\n    color(\"darkgreen\") \n    union() {\n        // Left wing\n        translate([-5,-25,3]) rotate([0,-20,30]) \n        scale([1,2,0.3]) sphere(4);\n        \n        // Right wing\n        translate([5,-25,3]) rotate([0,-20,-30]) \n        scale([1,2,0.3]) sphere(4);\n    }\n}\n\n// Eyes with electric glow\nmodule eyes() {\n    color(\"yellow\") \n    union() {\n        translate([-2,2,6]) sphere(1);\n        translate([2,2,6]) sphere(1);\n    }\n}\n\n// Forked tongue\nmodule tongue() {\n    color(\"red\") \n    union() {\n        translate([-0.5,-5,4]) rotate([0,0,-30]) \n        cylinder(h=4, r1=0.5, r2=0.1);\n        translate([0.5,-5,4]) rotate([0,0,30]) \n        cylinder(h=4, r1=0.5, r2=0.1);\n    }\n}\n\n// Electric horn\nmodule horn() {\n    color(\"white\") \n    translate([0,3,8]) rotate([0,0,0]) \n    cylinder(h=6, r1=1.5, r2=0.2);\n}\n\n// Base for stability\nmodule base() {\n    color(\"darkslategray\") \n    translate([0,-40,-1]) \n    cube([20,80,2], center=true);\n}\n\n// Assembly\nscale([scale_factor,scale_factor,scale_factor]) {\n    base();\n    body();\n    scales();\n    frills();\n    wings();\n    eyes();\n    tongue();\n    horn();\n}",
    "renders": true
  },
  {
    "mythical_creature": "toxicwyrm",
    "openscad_code": "// Toxicwyrm - a venomous dragon-wyvern hybrid\n// Overall length ~90 mm, wingspan ~60 mm, printable without supports\n\n$fn = 32;\n\n// Main colors\ncolor_skin = [0.1, 0.7, 0.1];        // toxic green skin\ncolor_bone = [0.8, 0.8, 0.7];        // bone horns and claws\ncolor_venom = [0.5, 0.9, 0.3];       // glowing venom glands\ncolor_wing = [0.2, 0.5, 0.2];        // translucent wing membrane\n\n// Body core\nmodule body() {\n    union() {\n        // Torso - elongated teardrop\n        color(color_skin)\n        scale([1, 0.7, 2])\n        sphere(10);\n\n        // Abdomen - tapering tail\n        color(color_skin)\n        translate([0, 0, -25])\n        scale([0.8, 0.6, 3])\n        cylinder(h = 20, r1 = 8, r2 = 3);\n\n        // Venom sacs on flanks\n        color(color_venom)\n        for(side = [-1, 1])\n            translate([side * 9, 0, -5])\n            sphere(4);\n    }\n}\n\n// Head with snout and horns\nmodule head() {\n    union() {\n        // Main head\n        color(color_skin)\n        translate([0, 0, 22])\n        scale([1.1, 0.8, 1.2])\n        sphere(8);\n\n        // Snout\n        color(color_skin)\n        translate([0, 0, 30])\n        scale([0.8, 0.5, 1.5])\n        rotate([30, 0, 0])\n        cylinder(h = 10, r1 = 5, r2 = 3);\n\n        // Horns - curved back\n        color(color_bone)\n        for(side = [-1, 1]) {\n            translate([side * 6, 0, 28])\n            rotate([0, side * 20, 0])\n            scale([0.4, 0.4, 1])\n            rotate([0, -30, 0])\n            cylinder(h = 12, r1 = 2, r2 = 1);\n        }\n\n        // Eyes - glowing slits\n        color(color_venom)\n        for(side = [-1, 1])\n            translate([side * 4, -5, 25])\n            scale([0.5, 1, 2])\n            sphere(2);\n    }\n}\n\n// Wings - batlike with ribbing\nmodule wings() {\n    color(color_wing)\n    for(side = [-1, 1]) {\n        translate([side * 10, 0, 10])\n        rotate([0, 0, side * 45]) {\n            // Wing arm\n            color(color_skin)\n            rotate([0, 90, 0])\n            cylinder(h = 25, r = 2);\n\n            // Wing membrane\n            color(color_wing)\n            translate([0, 0, -12])\n            rotate([90, 0, 0])\n            difference() {\n                scale([1, 0.7, 1])\n                circle(r = 25);\n                for(i = [1:3])\n                    translate([i * 6, 0, 0])\n                    scale([0.2, 0.8, 1])\n                    circle(r = 20);\n            }\n        }\n    }\n}\n\n// Legs with claws\nmodule legs() {\n    color(color_skin)\n    for(side = [-1, 1]) {\n        // Rear legs\n        translate([side * 8, 0, -15])\n        rotate([30, 0, 0])\n        cylinder(h = 12, r = 2);\n\n        // Front legs\n        translate([side * 7, 0, 5])\n        rotate([60, 0, 0])\n        cylinder(h = 10, r = 2);\n\n        // Claws\n        color(color_bone)\n        for(pos = [[-8, -15], [7, 5]]) {\n            translate([side * pos[0], 0, pos[1] - 10])\n            rotate([0, 0, 90])\n            scale([0.3, 0.3, 1])\n            cylinder(h = 3, r1 = 1, r2 = 0);\n        }\n    }\n}\n\n// Tail spike\nmodule tail_spike() {\n    color(color_bone)\n    translate([0, 0, -40])\n    rotate([0, 180, 0])\n    cylinder(h = 8, r1 = 3, r2 = 0);\n}\n\n// Scales pattern on back\nmodule dorsal_scales() {\n    color([0.05, 0.6, 0.05])\n    for(i = [0:5]) {\n        translate([0, 0, 15 - i * 8])\n        scale([1.2, 0.3, 0.3])\n        sphere(3);\n    }\n}\n\n// Assemble the creature\nunion() {\n    body();\n    head();\n    wings();\n    legs();\n    tail_spike();\n    dorsal_scales();\n}\n\n// Base for printing stability\ncolor([0.1, 0.1, 0.1])\ntranslate([0, 0, -45])\ncylinder(h = 2, r = 25);",
    "renders": true
  },
  {
    "mythical_creature": "poisoncoil",
    "openscad_code": "// Poisoncoil - A mythical serpent-dragon with toxic features\n// Realistic style, medium complexity\n\n// Main parameters\nbody_length = 60;\nbody_radius = 8;\nscale_size = 2;\nwing_span = 25;\nhead_size = 12;\n\n// Color definitions\n$fn = 32;\n\n// Head module with venomous features\nmodule poisoncoil_head() {\n    color([0.1, 0.5, 0.2])  // Deep toxic green\n    union() {\n        // Main head shape\n        sphere(head_size);\n        \n        // Snout extension\n        translate([head_size * 0.8, 0, 0])\n            scale([1.5, 0.8, 0.8])\n            sphere(head_size * 0.7);\n        \n        // Venom sacs\n        translate([head_size * 0.3, head_size * 0.6, -head_size * 0.3])\n            sphere(head_size * 0.3);\n        translate([head_size * 0.3, -head_size * 0.6, -head_size * 0.3])\n            sphere(head_size * 0.3);\n        \n        // Horns\n        for(i = [0:1]) {\n            rotate([0, 20 + i * 10, i * 45])\n            translate([head_size * 0.5, 0, head_size * 0.8])\n                cylinder(head_size * 0.8, head_size * 0.3, head_size * 0.1);\n        }\n    }\n}\n\n// Body scales pattern\nmodule scales_section() {\n    color([0.15, 0.6, 0.25])\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([0, body_radius * 1.2, 0])\n            scale([1, 0.7, 0.3])\n            sphere(scale_size);\n    }\n}\n\n// Wing membrane\nmodule poison_wing() {\n    color([0.05, 0.3, 0.15, 0.8])  // Translucent toxic green\n    difference() {\n        // Main wing shape\n        union() {\n            translate([-wing_span/2, 0, 0])\n                cube([wing_span, body_radius * 2, 0.5]);\n            \n            // Wing fingers\n            for(i = [0:3]) {\n                rotate([0, -20 - i * 15, 0])\n                translate([i * 5, 0, 0])\n                    cylinder(body_radius * 2, 0.5, 0.2);\n            }\n        }\n        \n        // Wing holes for membrane texture\n        for(i = [1:4]) {\n            for(j = [1:2]) {\n                translate([-wing_span/2 + i * 5, j * 3, 0])\n                    sphere(1);\n            }\n        }\n    }\n}\n\n// Tail stinger\nmodule venom_stinger() {\n    color([0.2, 0.4, 0.1])\n    union() {\n        cylinder(body_length * 0.2, body_radius * 0.8, body_radius * 0.2);\n        translate([0, 0, body_length * 0.2])\n            cone(body_radius * 0.2, body_radius * 0.5);\n    }\n}\n\n// Main body assembly\nmodule poisoncoil_body() {\n    color([0.12, 0.45, 0.22])\n    union() {\n        // Main serpentine body\n        for(i = [0:10]) {\n            rotate([0, sin(i * 15) * 10, 0])\n            translate([i * body_length/10, 0, cos(i * 15) * 5])\n                sphere(body_radius * (1 - i * 0.03));\n        }\n        \n        // Scale patterns along body\n        for(i = [1:9]) {\n            translate([i * body_length/10, 0, cos(i * 15) * 5])\n                scales_section();\n        }\n        \n        // Dorsal spines\n        for(i = [2:8]) {\n            rotate([0, sin(i * 15) * 10, 0])\n            translate([i * body_length/10, 0, body_radius * 1.5 + cos(i * 15) * 5])\n                cylinder(body_radius * 0.8, body_radius * 0.3, 0.1);\n        }\n    }\n}\n\n// Complete creature assembly\ntranslate([0, 0, body_radius])\nunion() {\n    // Body\n    poisoncoil_body();\n    \n    // Head at front\n    translate([body_length, 0, 5])\n        rotate([0, -10, 0])\n        poisoncoil_head();\n    \n    // Wings\n    translate([body_length * 0.3, 0, body_radius * 1.5])\n        rotate([0, 0, 45])\n        poison_wing();\n    \n    translate([body_length * 0.3, 0, body_radius * 1.5])\n        rotate([0, 0, -45])\n        mirror([1, 0, 0])\n        poison_wing();\n    \n    // Tail stinger at end\n    translate([0, 0, 0])\n        rotate([0, 180, 0])\n        venom_stinger();\n    \n    // Leg stubs for support (3D printable)\n    translate([body_length * 0.7, body_radius * 1.5, -body_radius])\n        cube([body_radius * 0.5, body_radius, body_radius]);\n    translate([body_length * 0.4, -body_radius * 1.5, -body_radius])\n        cube([body_radius * 0.5, body_radius, body_radius]);\n}",
    "renders": true
  },
  {
    "mythical_creature": "venomwyrm",
    "openscad_code": "// Venomwyrm - Mythical serpentine dragon with toxic features\n// 3D printable, medium complexity, realistic style\n\n// Overall scale factor for printability\nscale_factor = 0.8;\n\n// Main creature module\nmodule venomwyrm() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body segments\n            body();\n            \n            // Head and features\n            translate([0, 0, 15]) head();\n            \n            // Wings\n            translate([0, 0, 25]) wings();\n            \n            // Tail segments\n            translate([0, -40, 5]) tail();\n            \n            // Legs\n            legs();\n        }\n    }\n}\n\n// Serpentine body with scales\nmodule body() {\n    color(\"darkgreen\") {\n        // Main body tube\n        rotate([90, 0, 0]) cylinder(h=50, r1=8, r2=12, $fn=32);\n        \n        // Scale rings\n        for(i = [0:5:45]) {\n            translate([0, i-25, 0]) rotate([90, 0, 0]) \n                difference() {\n                    cylinder(h=3, r=10, $fn=24);\n                    cylinder(h=3.2, r=7.5, $fn=24);\n                }\n        }\n    }\n}\n\n// Venomous head with horns and fangs\nmodule head() {\n    color(\"forestgreen\") {\n        union() {\n            // Main head shape\n            sphere(12, $fn=32);\n            \n            // Snout\n            translate([0, 12, 0]) scale([1, 1.5, 0.8]) sphere(8, $fn=24);\n            \n            // Horns\n            translate([8, -5, 8]) rotate([0, 30, 15]) cylinder(h=15, r=2, $fn=8);\n            translate([-8, -5, 8]) rotate([0, 30, -15]) cylinder(h=15, r=2, $fn=8);\n            \n            // Venom sacs\n            color(\"limegreen\") {\n                translate([6, 0, -5]) sphere(4, $fn=16);\n                translate([-6, 0, -5]) sphere(4, $fn=16);\n            }\n            \n            // Fangs\n            color(\"ivory\") {\n                translate([3, 12, -5]) rotate([0, 0, 30]) cylinder(h=8, r=1, $fn=8);\n                translate([-3, 12, -5]) rotate([0, 0, -30]) cylinder(h=8, r=1, $fn=8);\n            }\n            \n            // Eyes\n            color(\"red\") {\n                translate([5, 8, 3]) sphere(2, $fn=12);\n                translate([-5, 8, 3]) sphere(2, $fn=12);\n            }\n        }\n    }\n}\n\n// Toxic wings with membrane damage\nmodule wings() {\n    color(\"darkolivegreen\") {\n        // Left wing\n        translate([15, 0, 0]) rotate([0, 0, 45]) union() {\n            // Wing arm\n            cylinder(h=20, r=2, $fn=8);\n            \n            // Wing membrane\n            translate([10, 0, -2]) rotate([0, 90, 0]) \n                difference() {\n                    scale([1, 1.5, 1]) sphere(15, $fn=32);\n                    // Toxic holes in wings\n                    for(h = [0:15:45]) {\n                        translate([sin(h)*8, cos(h)*8, -8]) sphere(2, $fn=8);\n                    }\n                }\n        }\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0]) translate([15, 0, 0]) rotate([0, 0, 45]) union() {\n            cylinder(h=20, r=2, $fn=8);\n            translate([10, 0, -2]) rotate([0, 90, 0]) \n                difference() {\n                    scale([1, 1.5, 1]) sphere(15, $fn=32);\n                    for(h = [0:15:45]) {\n                        translate([sin(h)*8, cos(h)*8, -8]) sphere(2, $fn=8);\n                    }\n                }\n        }\n    }\n}\n\n// Barbed tail with poison tip\nmodule tail() {\n    color(\"darkgreen\") {\n        // Tail segments getting smaller\n        for(i = [0:3:30]) {\n            translate([0, -i, -i/3]) \n                rotate([90, 0, 0]) \n                cylinder(h=5, r1=10-i/4, r2=9-i/4, $fn=16);\n        }\n        \n        // Tail tip with barb\n        color(\"lime\") {\n            translate([0, -35, -12]) rotate([90, 0, 0]) \n                difference() {\n                    cone(5, 3, 0, $fn=8);\n                    // Hollow for printability\n                    cylinder(h=5.1, r=1, $fn=8);\n                }\n        }\n    }\n}\n\n// Four dragon legs with claws\nmodule legs() {\n    // Front legs\n    translate([8, 15, -5]) leg();\n    translate([-8, 15, -5]) leg();\n    \n    // Rear legs\n    translate([10, -10, -5]) leg();\n    translate([-10, -10, -5]) leg();\n}\n\n// Individual leg module\nmodule leg() {\n    color(\"forestgreen\") {\n        union() {\n            // Upper leg\n            rotate([0, 30, 0]) cylinder(h=12, r=3, $fn=8);\n            \n            // Lower leg\n            translate([0, 0, -12]) rotate([0, 60, 0]) cylinder(h=10, r=2.5, $fn=8);\n            \n            // Foot\n            translate([0, 0, -22]) rotate([0, 90, 0]) \n                difference() {\n                    cube([8, 3, 5], center=true);\n                    // Toe separation\n                    translate([0, 0, 2]) cube([6, 0.5, 2], center=true);\n                }\n            \n            // Claws\n            color(\"ivory\") {\n                for(c = [-3, 0, 3]) {\n                    translate([c, 0, -25]) rotate([0, -30, 0]) \n                        cylinder(h=3, r=0.5, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Create the venomwyrm\nvenomwyrm();",
    "renders": true
  },
  {
    "mythical_creature": "acidhydra",
    "openscad_code": "module acidhydra_body() {\n    // Central torso - segmented worm-like body\n    color(\"forestgreen\") {\n        for (i = [0:3]) {\n            translate([0, 0, i*8]) \n                scale([1.5 - i*0.2, 1.5 - i*0.2, 1]) \n                sphere(d=20);\n        }\n    }\n}\n\nmodule acidhydra_necks() {\n    // Generate 7 necks in circular pattern\n    color(\"darkgreen\") {\n        for (i = [0:6]) {\n            rotate([0, 0, i*51.4]) {\n                translate([25, 0, 15]) {\n                    rotate([-30, 0, 0]) {\n                        cylinder(h=25, d1=8, d2=6);\n                        translate([0, 0, 25]) \n                            cylinder(h=20, d1=6, d2=4);\n                        translate([0, 0, 45]) \n                            sphere(d=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule acidhydra_heads() {\n    // Acid-dripping heads at end of each neck\n    color(\"limegreen\") {\n        for (i = [0:6]) {\n            rotate([0, 0, i*51.4]) {\n                translate([25, 0, 60]) {\n                    rotate([-30, 0, 0]) {\n                        // Main head shape\n                        scale([1.2, 1, 1]) sphere(d=12);\n                        \n                        // Snout\n                        translate([8, 0, 0]) \n                            scale([2, 0.8, 0.8]) sphere(d=6);\n                        \n                        // Eyes glowing with acid energy\n                        color(\"yellow\") {\n                            translate([5, 4, 3]) sphere(d=3);\n                            translate([5, -4, 3]) sphere(d=3);\n                        }\n                        \n                        // Acid-dripping fangs\n                        color(\"lightgreen\") {\n                            for (j = [-1, 1]) {\n                                translate([10, j*2, -2]) \n                                    rotate([0, -20*j, 0]) \n                                        cylinder(h=5, d1=2, d2=0.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule acidhydra_legs() {\n    // Four muscular legs\n    color(\"darkgreen\") {\n        for (side = [-1, 1]) {\n            for (pos = [0, 1]) {\n                translate([side*15, pos*10 - 5, -5]) {\n                    rotate([0, -20, 0]) {\n                        // Upper leg\n                        cylinder(h=15, d1=10, d2=8);\n                        translate([0, 0, 15]) {\n                            rotate([30, 0, 0]) {\n                                // Lower leg\n                                cylinder(h=12, d1=8, d2=6);\n                                translate([0, 0, 12]) {\n                                    // Foot\n                                    scale([1.5, 1, 0.5]) sphere(d=8);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule acidhydra_tail() {\n    // Toxic tail with spiked tip\n    color(\"forestgreen\") {\n        translate([0, 0, -15]) {\n            rotate([0, 0, 180]) {\n                for (i = [0:4]) {\n                    translate([0, 0, -i*5]) \n                        scale([1 - i*0.1, 1 - i*0.1, 1]) \n                        sphere(d=15 - i*2);\n                }\n                \n                // Spiked tail tip dripping acid\n                translate([0, 0, -25]) {\n                    color(\"limegreen\") {\n                        cone(h=8, d1=8, d2=2);\n                        translate([0, 0, -5]) {\n                            for (spike = [0:3]) {\n                                rotate([0, 0, spike*90]) {\n                                    translate([4, 0, 0]) \n                                        rotate([30, 0, 0]) \n                                            cone(h=5, d1=2, d2=0.5);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule acidhydra_scales() {\n    // Protective scales along back\n    color(\"darkgreen\") {\n        for (i = [0:8]) {\n            translate([0, 0, i*4 - 5]) {\n                rotate([0, 0, 45]) {\n                    scale([1, 0.5, 0.2]) \n                        cube([8, 8, 2], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    acidhydra_body();\n    acidhydra_necks();\n    acidhydra_heads();\n    acidhydra_legs();\n    acidhydra_tail();\n    acidhydra_scales();\n}",
    "renders": true
  },
  {
    "mythical_creature": "plaguewyrm",
    "openscad_code": "// Plaguewyrm - A decaying dragon-like creature with pestilent features\n// Designed for 3D printing with 1mm wall thickness\n\n// Main colors\n$fa = 8;\n$fs = 0.5;\n\nmodule plaguewyrm() {\n    // Body - segmented decaying form\n    color(\"darkolivegreen\")\n    union() {\n        // Main torso\n        translate([0, 0, 5])\n            scale([1.2, 0.8, 1])\n            sphere(d=20);\n        \n        // Abdomen segments\n        for(i = [1:3]) {\n            translate([0, 0, 5 - i*8])\n                scale([1.1 - i*0.2, 0.7 - i*0.1, 0.8])\n                sphere(d=18 - i*2);\n        }\n        \n        // Tail\n        hull() {\n            translate([0, 0, -18])\n                sphere(d=12);\n            translate([0, 0, -35])\n                scale([0.3, 0.3, 1])\n                sphere(d=8);\n        }\n    }\n    \n    // Head - skull-like with disease features\n    color(\"darkgreen\")\n    translate([0, 0, 25])\n    union() {\n        // Main skull shape\n        scale([1.3, 1, 1.2])\n            sphere(d=15);\n        \n        // Snout\n        translate([8, 0, 0])\n            rotate([0, -20, 0])\n            scale([1.5, 0.8, 0.8])\n            cylinder(h=12, d1=8, d2=5);\n        \n        // Eye sockets - decayed hollows\n        color(\"black\") {\n            translate([6, 5, 3])\n                sphere(d=4);\n            translate([6, -5, 3])\n                sphere(d=4);\n        }\n        \n        // Disease pustules\n        color(\"palegreen\")\n        for(i = [0:7]) {\n            rotate([0, 0, i*45])\n            translate([4, 8, 0])\n                sphere(d=1.5);\n        }\n    }\n    \n    // Horns - diseased growths\n    color(\"darkolivegreen\")\n    union() {\n        // Left horn\n        translate([-5, 8, 30])\n            rotate([20, 0, -30])\n            cylinder(h=15, d1=4, d2=2);\n        \n        // Right horn\n        translate([-5, -8, 30])\n            rotate([20, 0, 30])\n            cylinder(h=15, d1=4, d2=2);\n        \n        // Back ridge horns\n        for(i = [0:4]) {\n            translate([0, 0, 20 - i*5])\n                rotate([15 + i*5, 0, 0])\n                cylinder(h=8 - i, d=3 - i*0.3);\n        }\n    }\n    \n    // Wings - tattered and decaying\n    color(\"darkgreen\")\n    difference() {\n        // Left wing membrane\n        translate([-10, 15, 15])\n            rotate([0, -20, -30])\n            scale([2, 1, 0.1])\n            sphere(d=20);\n        \n        // Wing tears\n        for(i = [0:3]) {\n            translate([-15 - i*3, 20 - i*5, 15])\n                rotate([0, 0, 30 + i*10])\n                scale([0.5, 1, 0.2])\n                cube([8, 12, 1]);\n        }\n    }\n    \n    // Right wing\n    mirror([0, 1, 0])\n    difference() {\n        translate([-10, 15, 15])\n            rotate([0, -20, -30])\n            scale([2, 1, 0.1])\n            sphere(d=20);\n        \n        for(i = [0:3]) {\n            translate([-15 - i*3, 20 - i*5, 15])\n                rotate([0, 0, 30 + i*10])\n                scale([0.5, 1, 0.2])\n                cube([8, 12, 1]);\n        }\n    }\n    \n    // Legs - diseased and twisted\n    color(\"darkolivegreen\")\n    union() {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([5, side*8, 10])\n                rotate([0, side*10, 0])\n                cylinder(h=15, d1=6, d2=4);\n            \n            translate([5, side*12, -3])\n                rotate([0, side*20, 0])\n                cylinder(h=12, d1=4, d2=3);\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([-5, side*8, -5])\n                rotate([0, side*15, 0])\n                cylinder(h=18, d1=5, d2=4);\n            \n            translate([-5, side*12, -18])\n                rotate([0, side*25, 0])\n                cylinder(h=15, d1=4, d2=3);\n        }\n    }\n    \n    // Claws\n    color(\"black\")\n    for(side = [-1, 1]) {\n        // Front claws\n        for(pos = [[5, side*12, -12], [-5, side*12, -25]]) {\n            translate(pos)\n                for(i = [-1, 0, 1]) {\n                    rotate([0, 0, i*30])\n                    translate([0, i*2, -3])\n                    scale([0.3, 0.3, 1])\n                    cylinder(h=4, d=2);\n                }\n        }\n    }\n    \n    // Pestilent cloud effect\n    color(\"green\", 0.6)\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([0, 12, -15 - i*3])\n            scale([1 + i*0.2, 1 + i*0.2, 0.5])\n            sphere(d=8 - i);\n    }\n}\n\n// Scale to 80mm length\nscale(80/70)\nplaguewyrm();",
    "renders": true
  },
  {
    "mythical_creature": "rotfang",
    "openscad_code": "// Rotfang - A mythical serpent-dragon hybrid with crystalline fangs and wings\n// Overall size: 80mm length, 40mm height, 60mm wingspan\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main colors\ncolor_body = \"darkgreen\";\ncolor_wing = \"forestgreen\";\ncolor_fang = \"ivory\";\ncolor_eye = \"red\";\n\n// Main body module\nmodule rotfang_body() {\n    color(color_body)\n    union() {\n        // Head\n        translate([0, 0, 25])\n        scale([1.2, 0.8, 0.8])\n        sphere(8);\n        \n        // Neck\n        translate([0, 0, 18])\n        rotate([0, 10, 0])\n        cylinder(h=10, r1=6, r2=4);\n        \n        // Torso\n        translate([0, 0, 10])\n        scale([1.5, 1, 1.2])\n        sphere(10);\n        \n        // Tail segments\n        for(i = [0:5]) {\n            translate([-i*4 - 5, 0, 10 - i*2])\n            scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.15])\n            rotate([0, -i*5, 0])\n            sphere(8 - i);\n        }\n    }\n}\n\n// Wings with membrane structure\nmodule rotfang_wings() {\n    color(color_wing)\n    union() {\n        // Left wing\n        translate([0, -15, 20])\n        rotate([0, 0, 20])\n        union() {\n            // Main wing bone\n            rotate([0, -30, 0])\n            cylinder(h=25, r1=2, r2=1);\n            \n            // Wing membrane\n            translate([0, -5, 0])\n            rotate([0, 30, 0])\n            scale([1, 0.8, 0.1])\n            sphere(15);\n            \n            // Wing claws\n            translate([20, -20, 5])\n            rotate([0, 45, 0])\n            cylinder(h=8, r=0.8);\n        }\n        \n        // Right wing (mirrored)\n        mirror([0, 1, 0])\n        children();\n    }\n}\n\n// Crystalline fangs\nmodule rotfang_fangs() {\n    color(color_fang)\n    union() {\n        // Upper fangs\n        translate([6, 3, 25])\n        rotate([0, 30, 0])\n        cylinder(h=8, r1=1.5, r2=0.5);\n        \n        translate([6, -3, 25])\n        rotate([0, 30, 0])\n        cylinder(h=8, r1=1.5, r2=0.5);\n        \n        // Lower fangs\n        translate([6, 2, 20])\n        rotate([0, -30, 0])\n        cylinder(h=6, r1=1.2, r2=0.4);\n        \n        translate([6, -2, 20])\n        rotate([0, -30, 0])\n        cylinder(h=6, r1=1.2, r2=0.4);\n    }\n}\n\n// Eyes with magical glow\nmodule rotfang_eyes() {\n    color(color_eye)\n    union() {\n        translate([7, 3, 27])\n        sphere(1.5);\n        \n        translate([7, -3, 27])\n        sphere(1.5);\n    }\n}\n\n// Scales pattern on back\nmodule rotfang_scales() {\n    color(color_body)\n    difference() {\n        // Scale base\n        translate([0, 0, 15])\n        scale([1.3, 0.9, 0.3])\n        sphere(12);\n        \n        // Create scale pattern\n        for(i = [0:8]) {\n            translate([-i*2, 0, 16])\n            rotate([0, i*20, 0])\n            scale([0.8, 0.5, 0.2])\n            sphere(3);\n        }\n    }\n}\n\n// Legs with claws\nmodule rotfang_legs() {\n    color(color_body)\n    union() {\n        // Front legs\n        translate([5, 8, 15])\n        rotate([0, 0, -30])\n        union() {\n            cylinder(h=8, r=2);\n            translate([0, 0, -4])\n            rotate([0, 0, 45])\n            cylinder(h=6, r=1.5);\n        }\n        \n        translate([5, -8, 15])\n        rotate([0, 0, 30])\n        children();\n        \n        // Back legs\n        translate([-10, 6, 8])\n        rotate([0, 0, -45])\n        union() {\n            cylinder(h=6, r=1.8);\n            translate([0, 0, -3])\n            rotate([0, 0, 60])\n            cylinder(h=5, r=1.2);\n        }\n        \n        translate([-10, -6, 8])\n        rotate([0, 0, 45])\n        children();\n    }\n}\n\n// Assemble the complete Rotfang\nunion() {\n    rotfang_body();\n    rotfang_wings();\n    rotfang_fangs();\n    rotfang_eyes();\n    rotfang_scales();\n    rotfang_legs();\n    \n    // Base platform for stable printing\n    color(\"black\")\n    translate([0, 0, -2])\n    cube([30, 30, 2], center=true);\n}",
    "renders": true
  },
  {
    "mythical_creature": "blightserpent",
    "openscad_code": "// Blightserpent - a corrupted dragon-serpent hybrid with decaying wings\n// Overall size: ~80mm length, 40mm height, 30mm width\n\nmodule blightserpent() {\n    color(\"DarkOliveGreen\") {\n        // Main serpentine body\n        union() {\n            // Head\n            translate([0, 0, 15]) {\n                difference() {\n                    sphere(d=12);\n                    // Eye sockets\n                    translate([4, 5, 2]) sphere(d=3);\n                    translate([-4, 5, 2]) sphere(d=3);\n                }\n            }\n            \n            // Neck\n            translate([0, -8, 12]) rotate([0, 20, 0]) \n                cylinder(h=15, d1=10, d2=8);\n            \n            // Body segments\n            for(i=[0:4]) {\n                translate([0, -15 - i*10, 12 - i*2]) \n                    rotate([0, i*5, 0])\n                    cylinder(h=10, d=10 - i);\n            }\n            \n            // Tail\n            translate([0, -55, 5]) rotate([0, -30, 0])\n                cylinder(h=25, d1=6, d2=2);\n        }\n        \n        // Horns - corrupted tree-like growths\n        translate([0, 0, 21]) {\n            for(angle=[0:120:240]) {\n                rotate([0, 0, angle]) {\n                    translate([6, 0, 0]) rotate([30, 0, 10])\n                        cylinder(h=8, d1=2, d2=1);\n                    translate([5, 0, 2]) rotate([45, 0, 5])\n                        cylinder(h=6, d1=1.5, d2=0.5);\n                }\n            }\n        }\n        \n        // Decaying wings\n        color(\"SaddleBrown\") {\n            // Left wing\n            translate([-5, -10, 18]) rotate([0, 0, -30]) {\n                difference() {\n                    // Main wing membrane\n                    union() {\n                        translate([-15, 0, 0]) cube([20, 2, 25]);\n                        translate([-15, 0, 0]) rotate([0, 30, 0])\n                            cube([15, 2, 20]);\n                    }\n                    // Holes and decay\n                    for(pos=[[-10, 1, 5], [-8, 1, 15], [-12, 1, 10]]) {\n                        translate(pos) sphere(d=3);\n                    }\n                }\n                \n                // Wing bones\n                color(\"DarkGoldenrod\") {\n                    translate([-15, 1, 12]) rotate([0, 45, 0])\n                        cylinder(h=18, d=1.5);\n                    translate([-15, 1, 8]) rotate([0, 20, 0])\n                        cylinder(h=15, d=1);\n                }\n            }\n            \n            // Right wing (mirror of left)\n            mirror([1, 0, 0]) {\n                translate([-5, -10, 18]) rotate([0, 0, -30]) {\n                    difference() {\n                        union() {\n                            translate([-15, 0, 0]) cube([20, 2, 25]);\n                            translate([-15, 0, 0]) rotate([0, 30, 0])\n                                cube([15, 2, 20]);\n                        }\n                        for(pos=[[-10, 1, 5], [-8, 1, 15], [-12, 1, 10]]) {\n                            translate(pos) sphere(d=3);\n                        }\n                    }\n                    \n                    color(\"DarkGoldenrod\") {\n                        translate([-15, 1, 12]) rotate([0, 45, 0])\n                            cylinder(h=18, d=1.5);\n                        translate([-15, 1, 8]) rotate([0, 20, 0])\n                            cylinder(h=15, d=1);\n                    }\n                }\n            }\n        }\n        \n        // Legs\n        color(\"DarkGreen\") {\n            for(side=[-1, 1]) {\n                translate([side*4, -15, 8]) {\n                    // Upper leg\n                    rotate([side*30, 0, 0]) \n                        cylinder(h=8, d=3);\n                    // Lower leg\n                    translate([0, 0, -8]) rotate([side*60, 0, 0])\n                        cylinder(h=6, d=2);\n                    // Foot\n                    translate([0, -3, -12]) \n                        cube([3, 6, 1]);\n                }\n                \n                // Rear legs\n                translate([side*3, -35, 5]) {\n                    rotate([side*30, 0, 0]) \n                        cylinder(h=7, d=2.5);\n                    translate([0, 0, -7]) rotate([side*50, 0, 0])\n                        cylinder(h=5, d=2);\n                    translate([0, -2, -10]) \n                        cube([2.5, 5, 1]);\n                }\n            }\n        }\n        \n        // Scales pattern\n        color(\"OliveDrab\") {\n            for(i=[0:3]) {\n                for(j=[0:8]) {\n                    translate([sin(j*30)*3, -20 - j*5, 10 - j + sin(i*45)*1])\n                        sphere(d=1.5);\n                }\n            }\n        }\n        \n        // Eyes - glowing corruption\n        color(\"DarkRed\") {\n            translate([4, 5, 2]) sphere(d=1.5);\n            translate([-4, 5, 2]) sphere(d=1.5);\n        }\n    }\n}\n\n// Render the creature\nblightserpent();",
    "renders": true
  },
  {
    "mythical_creature": "corruptionwyrm",
    "openscad_code": "// Corruptionwyrm - a serpentine dragon twisted by dark magic\n// Size: 75mm long, 25mm tall, 30mm wingspan\n\n// Main body\nmodule body() {\n    color(\"darkslategray\")\n    union() {\n        // Head\n        translate([0, 0, 15])\n        scale([1, 0.8, 0.8])\n        sphere(6);\n        \n        // Snout\n        translate([5, 0, 15])\n        scale([1.5, 0.6, 0.5])\n        sphere(4);\n        \n        // Neck\n        for(i = [0:3]) {\n            translate([-2 - i*2, 0, 15 - i*1.5])\n            scale([1 - i*0.1, 1 - i*0.1, 1 - i*0.1])\n            sphere(5);\n        }\n        \n        // Main torso segments\n        for(i = [0:5]) {\n            translate([-12 - i*3, 0, 12 - i])\n            scale([1.2 - i*0.15, 1 - i*0.1, 1 - i*0.1])\n            sphere(5);\n        }\n        \n        // Tail\n        for(i = [0:8]) {\n            translate([-30 - i*3, 0, 8 - i*0.5])\n            scale([0.8 - i*0.08, 0.7 - i*0.07, 0.7 - i*0.07])\n            sphere(3.5);\n        }\n    }\n}\n\n// Horns\nmodule horns() {\n    color(\"dimgray\")\n    union() {\n        // Left horn\n        translate([2, 4, 20])\n        rotate([0, 30, -20])\n        cylinder(h=8, r1=2, r2=0.5);\n        \n        // Right horn\n        translate([2, -4, 20])\n        rotate([0, 30, 20])\n        cylinder(h=8, r1=2, r2=0.5);\n        \n        // Central horn\n        translate([3, 0, 21])\n        rotate([0, 15, 0])\n        cylinder(h=10, r1=1.5, r2=0.3);\n    }\n}\n\n// Wings - membrane wings with corruption holes\nmodule wings() {\n    color(\"darkslategray\")\n    union() {\n        // Left wing\n        translate([-10, 12, 18])\n        rotate([0, -20, 90])\n        difference() {\n            scale([1, 0.05, 1.2])\n            sphere(12);\n            // Corruption holes\n            for(i = [0:3]) {\n                translate([5 - i*3, 0, 8 - i*2])\n                sphere(1.5);\n            }\n        }\n        \n        // Right wing\n        translate([-10, -12, 18])\n        rotate([0, -20, -90])\n        difference() {\n            scale([1, 0.05, 1.2])\n            sphere(12);\n            // Corruption holes\n            for(i = [0:3]) {\n                translate([5 - i*3, 0, 8 - i*2])\n                sphere(1.5);\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(\"darkslategray\")\n    union() {\n        // Front left\n        translate([-5, 5, 8])\n        rotate([30, 0, 0])\n        cylinder(h=8, r=2);\n        translate([-5, 5, 0])\n        sphere(2.5);\n        \n        // Front right\n        translate([-5, -5, 8])\n        rotate([30, 0, 0])\n        cylinder(h=8, r=2);\n        translate([-5, -5, 0])\n        sphere(2.5);\n        \n        // Back left\n        translate([-20, 4, 6])\n        rotate([40, 0, 0])\n        cylinder(h=6, r=1.5);\n        translate([-20, 4, 0])\n        sphere(2);\n        \n        // Back right\n        translate([-20, -4, 6])\n        rotate([40, 0, 0])\n        cylinder(h=6, r=1.5);\n        translate([-20, -4, 0])\n        sphere(2);\n    }\n}\n\n// Eyes - glowing corruption orbs\nmodule eyes() {\n    color(\"purple\")\n    union() {\n        translate([6, 2.5, 16])\n        sphere(1.5);\n        translate([6, -2.5, 16])\n        sphere(1.5);\n    }\n}\n\n// Corruption spikes along back\nmodule corruption_spikes() {\n    color(\"darkviolet\")\n    for(i = [0:7]) {\n        translate([-6 - i*4, 0, 15 + i*0.3])\n        rotate([0, 20 - i*2, 0])\n        cylinder(h=3 + sin(i*45)*2, r=0.8, r2=0.1);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    horns();\n    wings();\n    legs();\n    eyes();\n    corruption_spikes();\n}",
    "renders": true
  },
  {
    "mythical_creature": "decaydrake",
    "openscad_code": "// Decaydrake - Realistic Style - Medium Complexity\n// 3D printable mythical decay dragon\n\n$fn = 24;\n\n// Main body color\ncolor([0.2, 0.3, 0.1]) {\n    // Main body - decaying dragon torso\n    translate([0, 0, 5])\n    scale([1.2, 0.8, 1])\n    sphere(15);\n\n    // Neck segment\n    translate([0, 12, 18])\n    rotate([30, 0, 0])\n    scale([0.7, 0.7, 1.5])\n    cylinder(h = 12, r1 = 8, r2 = 6);\n\n    // Head\n    translate([0, 15, 28])\n    rotate([30, 0, 0])\n    scale([1.1, 0.9, 1.2])\n    sphere(8);\n}\n\n// Exposed bone structure on spine\ncolor([0.9, 0.9, 0.8])\nfor(i = [0:3]) {\n    translate([-12 + i*8, 0, 20 - i*2])\n    rotate([0, 90, 0])\n    cylinder(h = 5, r = 1.5);\n}\n\n// Decayed wing membranes\nmodule wing() {\n    difference() {\n        color([0.1, 0.2, 0.05])\n        translate([0, 0, 0])\n        scale([1, 0.3, 1])\n        sphere(25);\n        \n        // Holes in wing membrane\n        for(i = [0:2]) {\n            translate([5 + i*8, 0, 5 + i*3])\n            sphere(4);\n        }\n    }\n}\n\n// Left wing\ntranslate([-25, -5, 15])\nrotate([0, 0, -30])\nwing();\n\n// Right wing\ntranslate([25, -5, 15])\nrotate([0, 0, 30])\nmirror([1, 0, 0])\nwing();\n\n// Wing bone structure\ncolor([0.9, 0.9, 0.8])\nfor(i = [0:3]) {\n    translate([-30 + i*8, -8, 20 - i*3])\n    rotate([0, 0, -20])\n    cylinder(h = 12, r = 1);\n    \n    translate([30 - i*8, -8, 20 - i*3])\n    rotate([0, 0, 20])\n    cylinder(h = 12, r = 1);\n}\n\n// Tail segments showing decay\ncolor([0.2, 0.3, 0.1])\nfor(i = [0:4]) {\n    translate([0, -15 - i*5, 15 - i*2])\n    scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.15])\n    sphere(8 - i);\n}\n\n// Exposed tail vertebrae\ncolor([0.9, 0.9, 0.8])\nfor(i = [0:4]) {\n    translate([0, -15 - i*5, 12 - i*2])\n    sphere(2);\n}\n\n// Leg bones\nmodule leg() {\n    color([0.9, 0.9, 0.8]) {\n        // Upper leg\n        translate([0, 0, 0])\n        rotate([0, 0, 30])\n        cylinder(h = 12, r = 2);\n        \n        // Lower leg\n        translate([0, 8, -8])\n        rotate([0, 0, -30])\n        cylinder(h = 10, r = 1.5);\n        \n        // Foot\n        translate([0, 13, -15])\n        rotate([0, 30, 0])\n        scale([1.5, 0.5, 0.5])\n        sphere(4);\n    }\n    \n    // Remaining flesh\n    color([0.15, 0.25, 0.08])\n    translate([0, 5, -3])\n    scale([1.2, 1, 1.2])\n    sphere(5);\n}\n\n// Front left leg\ntranslate([-10, 5, 0])\nleg();\n\n// Front right leg\ntranslate([10, 5, 0])\nmirror([1, 0, 0])\nleg();\n\n// Back left leg\ntranslate([-8, -15, 0])\nrotate([0, 0, -20])\nleg();\n\n// Back right leg\ntranslate([8, -15, 0])\nrotate([0, 0, 20])\nmirror([1, 0, 0])\nleg();\n\n// Decayed horns\ncolor([0.7, 0.7, 0.6])\ntranslate([-5, 18, 32])\nrotate([0, -20, -30])\ncylinder(h = 8, r1 = 3, r2 = 1);\n\ntranslate([5, 18, 32])\nrotate([0, -20, 30])\ncylinder(h = 8, r1 = 3, r2 = 1);\n\n// Broken horn tips\ntranslate([-6, 23, 34])\nsphere(1.5);\ntranslate([6, 23, 34])\nsphere(1.5);\n\n// Eye sockets with glowing decay\ncolor([0.1, 0.3, 0.05])\ntranslate([-4, 20, 30])\nsphere(2);\ntranslate([4, 20, 30])\nsphere(2);\n\n// Magical decay aura particles\ncolor([0.2, 0.4, 0.1])\nfor(i = [0:10]) {\n    translate([rand(-20, 20), rand(-20, 20), rand(5, 35)])\n    sphere(0.5 + rand(0, 1));\n}\n\n// Rib cage showing through decayed chest\ncolor([0.9, 0.9, 0.8])\nfor(i = [0:5]) {\n    translate([-10 + i*4, 0, 10])\n    rotate([0, 90, 0])\n    cylinder(h = 15, r = 0.8);\n}",
    "renders": true
  },
  {
    "mythical_creature": "pestilencewyrm",
    "openscad_code": "// Pestilencewyrm - a diseased dragon-like creature spreading rot and decay\n// Overall length ~80mm, wingspan ~70mm, height ~35mm\n\n// Color definitions\n$fn=50;\n\n// Main body module\nmodule pestilencewyrm() {\n    union() {\n        // Diseased green body\n        color([0.3,0.4,0.1,0.9]) {\n            // Torso - elongated diseased shape\n            translate([0,0,15]) {\n                scale([1.5,1,1]) sphere(r=12);\n                cylinder(h=35, r1=12, r2=8);\n            }\n            \n            // Head with plague features\n            translate([0,25,45]) {\n                // Snout\n                rotate([0,-15,0]) cylinder(h=20, r1=8, r2=5);\n                // Top of head\n                sphere(r=10);\n                \n                // Pustule bumps\n                for(i=[-2:2]) {\n                    translate([i*3,10,3]) sphere(r=1.5);\n                    translate([i*2,8,-2]) sphere(r=1);\n                }\n                \n                // Horns - twisted diseased growths\n                color([0.2,0.2,0.05]) {\n                    translate([6,5,5]) rotate([0,-30,45]) cylinder(h=15, r1=3, r2=1);\n                    translate([-6,5,5]) rotate([0,-30,-45]) cylinder(h=15, r1=3, r2=1);\n                }\n            }\n            \n            // Tail - segmented and diseased\n            translate([0,-25,12]) {\n                for(i=[0:5]) {\n                    translate([0,-i*8,0]) \n                        scale([1-0.1*i,1-0.05*i,1-0.05*i])\n                        sphere(r=10-i);\n                }\n            }\n        }\n        \n        // Wings - tattered and torn\n        color([0.25,0.3,0.08,0.7]) {\n            // Left wing\n            translate([15,5,30]) {\n                rotate([0,0,20]) {\n                    difference() {\n                        // Main wing membrane\n                        scale([1,2.5,0.3]) sphere(r=15);\n                        \n                        // Wing tears\n                        for(i=[1:3]) {\n                            translate([10-i*3,15-i*2,1]) rotate([0,0,i*30]) \n                                scale([1,2,1]) cylinder(h=8, r=2);\n                        }\n                        \n                        // Bone structure\n                        for(j=[-1:1]) {\n                            translate([j*5,0,2]) cube([2,25,1]);\n                        }\n                    }\n                }\n            }\n            \n            // Right wing - mirrored\n            translate([-15,5,30]) mirror([1,0,0]) {\n                rotate([0,0,20]) {\n                    difference() {\n                        scale([1,2.5,0.3]) sphere(r=15);\n                        for(i=[1:3]) {\n                            translate([10-i*3,15-i*2,1]) rotate([0,0,i*30]) \n                                scale([1,2,1]) cylinder(h=8, r=2);\n                        }\n                        for(j=[-1:1]) {\n                            translate([j*5,0,2]) cube([2,25,1]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Legs - diseased and bony\n        color([0.35,0.25,0.08]) {\n            // Front legs\n            translate([10,15,0]) {\n                // Upper leg\n                cylinder(h=20, r=4);\n                // Lower leg\n                translate([0,-15,0]) rotate([30,0,0]) cylinder(h=15, r=3);\n                // Foot\n                translate([0,-25,5]) scale([1,2,0.5]) sphere(r=4);\n            }\n            \n            translate([-10,15,0]) {\n                cylinder(h=20, r=4);\n                translate([0,-15,0]) rotate([30,0,0]) cylinder(h=15, r=3);\n                translate([0,-25,5]) scale([1,2,0.5]) sphere(r=4);\n            }\n            \n            // Back legs\n            translate([8,-15,5]) {\n                cylinder(h=18, r=4);\n                translate([0,-12,0]) rotate([45,0,0]) cylinder(h=12, r=3);\n                translate([0,-20,5]) scale([1,1.5,0.5]) sphere(r=4);\n            }\n            \n            translate([-8,-15,5]) {\n                cylinder(h=18, r=4);\n                translate([0,-12,0]) rotate([45,0,0]) cylinder(h=12, r=3);\n                translate([0,-20,5]) scale([1,1.5,0.5]) sphere(r=4);\n            }\n        }\n        \n        // Plague spines along back\n        color([0.4,0.3,0.1]) {\n            for(i=[-4:4]) {\n                translate([0,i*4,25+abs(i)]) \n                    rotate([0,0,i*5]) \n                    cylinder(h=5+abs(i), r1=2, r2=0.5);\n            }\n        }\n        \n        // Diseased aura particles (small spheres)\n        color([0.5,0.6,0.2,0.6]) {\n            for(a=[0:30:360]) {\n                for(r=[15:10:35]) {\n                    rotate([0,0,a]) \n                        translate([r*cos(a),r*sin(a),20+sin(a*3)*5]) \n                        sphere(r=0.5+sin(a*5)*0.3);\n                }\n            }\n        }\n    }\n}\n\n// Generate the creature\npestilencewyrm();",
    "renders": true
  },
  {
    "mythical_creature": "miasmaserpent",
    "openscad_code": "// Miasmaserpent - A toxic, winged serpent creature from mythical swamps\n// 3D printable at ~80mm length, no overhangs >45 degrees\n\n// Main dimensions\nbody_length = 60;\nbody_diameter = 8;\nwing_span = 40;\nhead_size = 12;\n\n// Color scheme - sickly greens and purples\nunion() {\n    color([0.3, 0.5, 0.2]) {\n        // Head with toxic horns\n        translate([body_length/2 + head_size/2, 0, 0]) {\n            // Main head sphere\n            sphere(d=head_size, $fn=16);\n            \n            // Horns - curved toxic growths\n            for(i = [0:1]) {\n                rotate([0, 0, i*180]) {\n                    translate([head_size/2 - 2, head_size/4, 0]) {\n                        rotate([0, -30, 45])\n                        cylinder(h=head_size/1.5, d1=3, d2=1, $fn=8);\n                    }\n                }\n            }\n            \n            // Eyes - glowing toxic orbs\n            color([0.8, 0.9, 0.3]) {\n                for(i = [0:1]) {\n                    translate([head_size/3, head_size/3 * (i ? 1 : -1), head_size/4]) {\n                        sphere(d=2, $fn=8);\n                    }\n                }\n            }\n        }\n        \n        // Serpentine body with scales\n        for(i = [0:10]) {\n            translate([body_length/2 - i*body_length/10, 0, 0]) {\n                rotate([0, 0, i*15]) {\n                    scale([1, 1 - i*0.05, 1 - i*0.05])\n                    sphere(d=body_diameter, $fn=16);\n                }\n            }\n        }\n    }\n    \n    // Wings - bat-like with toxic membrane\n    color([0.2, 0.4, 0.3]) {\n        for(side = [0:1]) {\n            rotate([0, 0, side ? 45 : -45]) {\n                translate([body_length/3, 0, 0]) {\n                    // Wing bone structure\n                    difference() {\n                        union() {\n                            // Main wing arm\n                            rotate([0, 90, 0])\n                            cylinder(h=wing_span/2, d=2, $fn=8);\n                            \n                            // Wing fingers\n                            for(finger = [0:2]) {\n                                rotate([0, 30 + finger*20, 0]) {\n                                    translate([finger*8 - 8, 0, 0]) {\n                                        rotate([0, 90, 0])\n                                        cylinder(h=wing_span/2 - finger*5, d=1.5, $fn=6);\n                                    }\n                                }\n                            }\n                        }\n                        \n                        // Membrane holes for printing\n                        for(hole = [0:3]) {\n                            translate([hole*10 - 15, 0, wing_span/4]) {\n                                rotate([90, 0, 0])\n                                cylinder(h=5, d=3, $fn=8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Tail with toxic barbs\n    color([0.25, 0.45, 0.25]) {\n        for(i = [0:5]) {\n            translate([-body_length/2 - i*body_length/15, 0, 0]) {\n                rotate([0, 0, -i*20])\n                scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.15])\n                sphere(d=body_diameter - i, $fn=16);\n                \n                // Toxic barbs\n                if(i > 1) {\n                    for(barb = [0:1]) {\n                        rotate([0, 0, barb ? 90 : -90]) {\n                            translate([0, body_diameter/2 - i, 0]) {\n                                rotate([0, 90, 0])\n                                cylinder(h=3, d1=2, d2=0.5, $fn=6);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs - small clawed appendages\n    color([0.2, 0.4, 0.2]) {\n        for(side = [0:1]) {\n            translate([body_length/4, body_diameter/2 * (side ? 1 : -1), -body_diameter/2]) {\n                rotate([45, 0, side ? 45 : -45]) {\n                    cylinder(h=8, d=3, $fn=8);\n                    translate([0, 0, 8]) {\n                        sphere(d=4, $fn=8);\n                        // Claws\n                        for(claw = [0:2]) {\n                            rotate([0, 0, claw*120]) {\n                                translate([2, 0, 0]) {\n                                    rotate([0, 90, 0])\n                                    cylinder(h=3, d1=1.5, d2=0.5, $fn=6);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "funguswyrm",
    "openscad_code": "// Funguswyrm - a mycelial dragon with mushroom features\n// Overall length ~80mm, height ~45mm\n\n$fn = 32;\n\nmodule mushroom_cap(r, h, stem_r) {\n    difference() {\n        scale([1, 1, 0.5]) sphere(r);\n        translate([0, 0, -h]) cylinder(r = stem_r, h = h*2, center = true);\n    }\n}\n\nmodule gill_pattern(base_r, h) {\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5]) {\n            translate([base_r * 0.7, 0, 0]) {\n                scale([0.1, 1, 1]) cylinder(r = base_r * 0.3, h = h, center = true);\n            }\n        }\n    }\n}\n\nmodule mushroom_detail(cap_r, cap_h, stem_r) {\n    color(\"saddlebrown\") {\n        mushroom_cap(cap_r, cap_h, stem_r);\n    }\n    translate([0, 0, -cap_h/4]) {\n        color(\"tan\") gill_pattern(cap_r, cap_h);\n    }\n}\n\nmodule body_segment(length, radius, has_mushroom = false) {\n    union() {\n        color(\"darkolivegreen\") {\n            cylinder(r = radius, h = length, center = true);\n        }\n        if(has_mushroom) {\n            translate([0, radius, length/4]) {\n                rotate([90, 0, 0]) {\n                    mushroom_detail(radius * 0.8, radius * 0.4, radius * 0.2);\n                }\n            }\n        }\n    }\n}\n\nmodule tail() {\n    for(i = [0:7]) {\n        translate([0, 0, -i * 4]) {\n            scale([1 - i * 0.08, 1 - i * 0.08, 1]) {\n                body_segment(6, 6 - i * 0.5, i % 3 == 0);\n            }\n        }\n    }\n}\n\nmodule wing() {\n    translate([0, 0, -2]) {\n        scale([1, 2, 0.3]) {\n            color(\"forestgreen\") {\n                sphere(10);\n            }\n        }\n    }\n    // Vein details\n    for(i = [1:3]) {\n        rotate([0, 0, i * 20 - 30]) {\n            translate([-5, 5, -2]) {\n                scale([0.5, 12, 0.2]) {\n                    color(\"darkgreen\") {\n                        sphere(2);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule head() {\n    // Main head\n    color(\"darkslategray\") {\n        sphere(8);\n    }\n    \n    // Snout\n    translate([10, 0, 0]) {\n        color(\"darkslategray\") {\n            scale([1.5, 0.7, 0.7]) {\n                sphere(5);\n            }\n        }\n    }\n    \n    // Horns/mushroom stalks\n    for(i = [-1, 1]) {\n        translate([5, i * 6, 4]) {\n            rotate([0, 20 * i, 0]) {\n                color(\"sienna\") {\n                    cylinder(r1 = 2, r2 = 1, h = 8);\n                }\n                translate([0, 0, 4]) {\n                    mushroom_detail(3, 2, 1);\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    for(i = [-1, 1]) {\n        translate([8, i * 4, 2]) {\n            color(\"red\") {\n                sphere(1.5);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([15, side * 8, -6]) {\n            rotate([0, 0, side * 15]) {\n                color(\"darkslategray\") {\n                    cylinder(r = 2, h = 12);\n                }\n                translate([0, 0, -6]) {\n                    color(\"saddlebrown\") {\n                        sphere(3);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([-10, side * 8, -6]) {\n            rotate([0, 0, side * -15]) {\n                color(\"darkslategray\") {\n                    cylinder(r = 2.5, h = 14);\n                }\n                translate([0, 0, -7]) {\n                    color(\"saddlebrown\") {\n                        sphere(3.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([25, 0, 5]) {\n        head();\n    }\n    \n    // Neck\n    for(i = [0:3]) {\n        translate([20 - i * 5, 0, 5 - i]) {\n            body_segment(5, 7 - i);\n        }\n    }\n    \n    // Body\n    for(i = [0:4]) {\n        translate([5 - i * 8, 0, 2 - i * 0.5]) {\n            body_segment(8, 7, i % 2 == 0);\n        }\n    }\n    \n    // Tail\n    translate([-25, 0, 0]) {\n        tail();\n    }\n    \n    // Wings\n    translate([5, 0, 8]) {\n        rotate([0, 20, 0]) {\n            wing();\n        }\n    }\n    translate([5, 0, 8]) {\n        mirror([0, 1, 0]) {\n            rotate([0, 20, 0]) {\n                wing();\n            }\n        }\n    }\n    \n    // Legs\n    legs();\n}",
    "renders": true
  },
  {
    "mythical_creature": "moldcoil",
    "openscad_code": "// Moldcoil - a fungal dragon serpent from the deep woods\n// Wings folded against body, mushroom cap crown, segmented fungal body\n\n$fn = 32;\n\n// Main body parameters\nbody_length = 60;\nbody_diameter = 12;\nsegment_count = 8;\nscale = 1.0;\n\n// Colors\ncap_color = [0.6, 0.3, 0.2];      // Brown mushroom cap\nstem_color = [0.9, 0.8, 0.7];   // Pale stem\nbody_color = [0.4, 0.3, 0.2];   // Dark fungal body\nglow_color = [0.2, 0.8, 0.4];   // Bioluminescent spots\n\nmodule moldcoil() {\n    union() {\n        // Head with mushroom cap crown\n        translate([0, 0, body_diameter/2]) {\n            color(cap_color) {\n                // Mushroom cap\n                rotate([0, 0, 0]) \n                    scale([1.2, 1.2, 0.6])\n                        sphere(d=body_diameter * 1.5);\n                \n                // Head\n                color(stem_color)\n                    sphere(d=body_diameter);\n                \n                // Eyes - bioluminescent\n                color(glow_color) {\n                    translate([body_diameter/2.5, body_diameter/2.5, 0])\n                        sphere(d=body_diameter/4);\n                    translate([body_diameter/2.5, -body_diameter/2.5, 0])\n                        sphere(d=body_diameter/4);\n                }\n            }\n        }\n        \n        // Segmented body\n        for(i = [1:segment_count]) {\n            color(body_color) {\n                // Calculate position along curved path\n                angle = i * 15;\n                x_pos = sin(angle) * body_length/segment_count * i/2;\n                y_pos = cos(angle) * body_length/segment_count * i/2;\n                z_pos = -i * body_diameter/2;\n                \n                translate([x_pos, y_pos, z_pos]) {\n                    rotate([0, 0, angle]) {\n                        // Body segment\n                        scale([1 - i*0.05, 1 - i*0.05, 1])\n                            cylinder(h=body_diameter*1.2, d=body_diameter, center=true);\n                        \n                        // Fungal gills underneath\n                        rotate([90, 0, 0])\n                            cylinder(h=body_diameter/3, d1=body_diameter*0.8, d2=body_diameter*1.2);\n                        \n                        // Bioluminescent spots\n                        color(glow_color) {\n                            for(j = [0:3]) {\n                                rotate([0, 0, j * 90])\n                                    translate([body_diameter/2, 0, 0])\n                                        sphere(d=body_diameter/8);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Wings - folded against body\n        wing_thickness = 2;\n        wing_length = body_length/2;\n        \n        color([0.3, 0.2, 0.15, 0.8]) {\n            // Left wing\n            translate([0, body_diameter/2, -body_diameter]) {\n                rotate([0, -30, 0]) {\n                    // Main wing\n                    cube([wing_length, wing_thickness, body_diameter*2], center=true);\n                    \n                    // Wing membrane cuts\n                    for(k = [0:3]) {\n                        translate([k * wing_length/4 - wing_length/2, 0, 0])\n                            scale([0.8, 1.1, 0.8])\n                                cube([wing_length/6, wing_thickness+0.2, body_diameter*1.8], center=true);\n                    }\n                }\n            }\n            \n            // Right wing\n            translate([0, -body_diameter/2, -body_diameter]) {\n                rotate([0, 30, 0]) {\n                    cube([wing_length, wing_thickness, body_diameter*2], center=true);\n                    \n                    for(k = [0:3]) {\n                        translate([k * wing_length/4 - wing_length/2, 0, 0])\n                            scale([0.8, 1.1, 0.8])\n                                cube([wing_length/6, wing_thickness+0.2, body_diameter*1.8], center=true);\n                    }\n                }\n            }\n        }\n        \n        // Tail\n        color(body_color) {\n            translate([0, 0, -body_length/2 - body_diameter]) {\n                for(t = [0:5]) {\n                    tail_scale = 1 - t * 0.15;\n                    translate([0, 0, -t * body_diameter/2]) {\n                        scale([tail_scale, tail_scale, tail_scale])\n                            cylinder(h=body_diameter, d=body_diameter * 0.8);\n                    }\n                }\n                \n                // Tail tip - mushroom-like\n                translate([0, 0, -5 * body_diameter/2 - body_diameter/2])\n                    sphere(d=body_diameter * 0.5);\n            }\n        }\n        \n        // Legs - simple fungal stalks\n        color(stem_color) {\n            // Front legs\n            for(side = [-1, 1]) {\n                translate([body_diameter/2, side * body_diameter/2, -body_diameter]) {\n                    rotate([0, 15, 0])\n                        cylinder(h=body_diameter*1.5, d=body_diameter/3);\n                    translate([0, 0, -body_diameter*1.5])\n                        sphere(d=body_diameter/2.5);\n                }\n                \n                // Rear legs\n                translate([-body_length/2, side * body_diameter/2, -body_diameter*1.5]) {\n                    rotate([0, -15, 0])\n                        cylinder(h=body_diameter*1.5, d=body_diameter/3);\n                    translate([0, 0, -body_diameter*1.5])\n                        sphere(d=body_diameter/2.5);\n                }\n            }\n        }\n    }\n}\n\n// Create the moldcoil\nmoldcoil();",
    "renders": true
  },
  {
    "mythical_creature": "slimewyrm",
    "openscad_code": "// Slimewyrm - A mythical acid-dwelling serpent with translucent gel body and bioluminescent spines\n// Designed for 3D printing at ~80mm length\n\n$fn = 32;\n\nmodule body_segment(radius, length, spine_count) {\n    // Main gel body segment\n    color([0.4, 0.8, 0.3, 0.7]) \n    difference() {\n        cylinder(h = length, r = radius);\n        \n        // Internal cavity for material saving\n        translate([0, 0, 1])\n            cylinder(h = length - 2, r = radius - 1.5);\n    }\n    \n    // Bioluminescent spines\n    color([0.1, 1, 0.6]) \n    for(i = [0:spine_count-1]) {\n        rotate([0, 0, i * (360/spine_count)]) \n            translate([radius * 0.8, 0, length/2])\n                rotate([90, 0, 0])\n                    cylinder(h = radius * 0.6, r1 = 0.5, r2 = 0.1);\n    }\n}\n\nmodule head() {\n    // Main head bulb\n    color([0.35, 0.75, 0.25, 0.8]) \n    sphere(d = 12);\n    \n    // Acid glands visible through translucent skin\n    color([0.9, 1, 0.2, 0.5]) \n    translate([3, 2, 3]) sphere(d = 3);\n    translate([3, -2, 3]) sphere(d = 3);\n    \n    // Mandibles\n    color([0.2, 0.5, 0.1]) {\n        translate([5, 3, -2]) rotate([0, 20, 0])\n            cube([6, 1.5, 2]);\n        translate([5, -3, -2]) rotate([0, -20, 0])\n            cube([6, 1.5, 2]);\n    }\n    \n    // Eye stalks\n    color([0.1, 0.9, 0.4, 0.9]) {\n        translate([-2, 4, 4]) rotate([0, 30, 0])\n            cylinder(h = 5, r1 = 1.5, r2 = 1);\n        translate([-2, -4, 4]) rotate([0, -30, 0])\n            cylinder(h = 5, r1 = 1.5, r2 = 1);\n    }\n    \n    // Eyes\n    color([1, 0.2, 0.8]) {\n        translate([-2, 4.5, 5.5]) sphere(d = 1.5);\n        translate([-2, -4.5, 5.5]) sphere(d = 1.5);\n    }\n}\n\nmodule tail_fin() {\n    // Translucent tail fin\n    color([0.5, 0.9, 0.4, 0.6]) \n    translate([0, 0, -2])\n        rotate([90, 0, 0])\n            cylinder(h = 8, r1 = 0.1, r2 = 6);\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([0, 0, 0]) head();\n    \n    // Body segments - tapering towards tail\n    for(i = [1:10]) {\n        translate([0, 0, -i * 6])\n            body_segment(\n                radius = 6 - (i * 0.4), \n                length = 5, \n                spine_count = 8 + (i % 2) * 2\n            );\n    }\n    \n    // Tail fin\n    translate([0, 0, -65]) tail_fin();\n    \n    // Ventral ridge for stability\n    color([0.3, 0.7, 0.2, 0.6])\n    for(i = [0:10]) {\n        translate([0, 0, -i * 6 + 2])\n            rotate([0, 0, 0])\n                cube([12 - i, 1, 3], center = true);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "oozehydra",
    "openscad_code": "// Oozehydra - A multi-headed slime creature with dripping acidic features\n// Size: 80mm wide x 60mm deep x 70mm tall\n\n// Main color scheme\ncolor([0.2, 0.6, 0.1, 0.8])  // Translucent green slime\n\nunion() {\n    // Central body mass - main ooze pool\n    translate([0, 0, 5]) \n    scale([1, 0.8, 0.6])\n    sphere(d=50, $fn=32);\n    \n    // Upper body core\n    translate([0, 0, 25])\n    scale([0.7, 0.7, 1.2])\n    sphere(d=40, $fn=32);\n    \n    // Generate five heads in a pentagonal arrangement\n    for(i = [0:4]) {\n        rotate([0, 0, i*72]) \n        translate([25, 0, 45]) \n        ooze_head(i);\n    }\n    \n    // Drip formations around base\n    for(j = [0:7]) {\n        rotate([0, 0, j*45]) \n        translate([20, 0, 2]) \n        scale([0.8 + sin(j*30)*0.2, 0.8, 1])\n        cylinder(h=10 + j*2, d1=8, d2=4, $fn=16);\n    }\n    \n    // Acid pool base\n    color([0.3, 0.7, 0.2, 0.6])\n    translate([0, 0, 0])\n    cylinder(h=2, d=60, $fn=64);\n}\n\nmodule ooze_head(index) {\n    // Each head has slight variation based on index\n    head_scale = 0.8 + sin(index*50)*0.1;\n    \n    union() {\n        // Main head sphere\n        scale([head_scale, head_scale, head_scale*1.2])\n        sphere(d=20, $fn=24);\n        \n        // Snout extension\n        translate([0, 0, 8])\n        scale([0.6, 0.8, 1.2])\n        sphere(d=15, $fn=16);\n        \n        // Eye sockets\n        color([0.8, 0.9, 0.3, 0.9])\n        translate([-4, 3, 5])\n        scale([1, 1.2, 0.8])\n        sphere(d=4, $fn=12);\n        \n        translate([4, 3, 5])\n        scale([1, 1.2, 0.8])\n        sphere(d=4, $fn=12);\n        \n        // Acid drip from mouth\n        color([0.4, 0.8, 0.2, 0.7])\n        translate([0, -3, -2])\n        rotate([20 + index*5, 0, 0])\n        cylinder(h=12, d1=3, d2=1, $fn=8);\n        \n        // Neck connection to body\n        color([0.2, 0.6, 0.1, 0.8])\n        translate([0, 0, -10])\n        rotate([30, 0, 0])\n        scale([0.4, 0.4, 1.5])\n        cylinder(h=15, d1=12, d2=8, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "tarbasilisk",
    "openscad_code": "// Tarbasilisk - Mythical creature with dragon and basilisk features\n// Wings, serpentine body, armored scales, and piercing gaze\n\n// Overall scale factor for 3D printing\nscale_factor = 0.4;\n\n// Colors\ncolor_body = \"#2d5016\";\ncolor_wings = \"#4a4a2a\";\ncolor_eyes = \"#ff0000\";\ncolor_scales = \"#3a3a1a\";\n\nmodule tarbasilisk() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Main serpentine body\n        color(color_body)\n        translate([0, 0, 5])\n        rotate([90, 0, 0])\n        cylinder(h=40, r1=8, r2=4, $fn=20);\n        \n        // Head with snout\n        color(color_body)\n        translate([0, -35, 8])\n        union() {\n            // Main head\n            sphere(6, $fn=16);\n            \n            // Snout\n            translate([0, -6, 0])\n            scale([0.8, 1.2, 0.6])\n            sphere(5, $fn=16);\n            \n            // Eye ridges\n            for(side = [-1, 1]) {\n                translate([side * 4, -2, 2])\n                rotate([0, side * 15, 0])\n                scale([0.5, 1, 0.5])\n                cylinder(h=3, r=2, $fn=8);\n            }\n        }\n        \n        // Eyes with piercing gaze\n        color(color_eyes)\n        for(side = [-1, 1]) {\n            translate([side * 3.5, -36, 2.5])\n            sphere(1.5, $fn=12);\n        }\n        \n        // Horns\n        color(color_scales)\n        for(side = [-1, 1]) {\n            translate([side * 5, -30, 8])\n            rotate([0, side * 30, 0])\n            cylinder(h=12, r1=1.5, r2=0.5, $fn=8);\n        }\n        \n        // Wings - folded against body\n        color(color_wings)\n        for(side = [-1, 1]) {\n            translate([side * 8, -15, 12])\n            rotate([0, 0, side * 20])\n            scale([1, 0.2, 1])\n            difference() {\n                // Main wing shape\n                scale([1, 3, 1])\n                sphere(6, $fn=8);\n                \n                // Wing membrane cutout\n                translate([0, 1, 0])\n                scale([0.7, 2.5, 0.7])\n                sphere(5, $fn=8);\n            }\n        }\n        \n        // Armored scales along back\n        color(color_scales)\n        for(i = [0:3:40]) {\n            translate([0, -35 + i * 0.8, 5 + sin(i * 10) * 2])\n            rotate([0, 0, i * 5])\n            scale([0.5, 1, 0.8])\n            cylinder(h=3, r1=3, r2=1, $fn=6);\n        }\n        \n        // Tail segments\n        color(color_body)\n        for(i = [0:2:20]) {\n            translate([0, 5 + i * 1.5, 5 - i * 0.3])\n            scale([1 - i * 0.02, 1 - i * 0.02, 1 - i * 0.02])\n            rotate([0, 0, i * 15])\n            cylinder(h=3, r=4 - i * 0.1, $fn=8);\n        }\n        \n        // Legs - simplified for 3D printing\n        color(color_body)\n        for(side = [-1, 1]) {\n            translate([side * 6, -10, 0])\n            rotate([0, 0, side * 30])\n            cylinder(h=10, r=2, $fn=8);\n            \n            // Feet\n            translate([side * 8, -10, -2])\n            scale([1.5, 0.5, 0.5])\n            sphere(2, $fn=6);\n        }\n        \n        // Chest armor plate\n        color(color_scales)\n        translate([0, -20, 3])\n        rotate([90, 0, 0])\n        scale([1.2, 0.8, 0.3])\n        cylinder(h=10, r=6, $fn=8);\n    }\n}\n\n// Generate the creature\ntarbasilisk();",
    "renders": true
  },
  {
    "mythical_creature": "ashwyrm",
    "openscad_code": "// Ashwyrm - a wingless, serpentine dragon forged from volcanic ash\n// Realistic medium-complexity OpenSCAD model\n\n// Parameters\n$fn = 36;\nscale_factor = 1;             // overall scale\nbody_len = 60;                // mm\nhead_len = 15;\ntail_len = 40;\nsegment_count = 12;\nshell_thick = 1.5;            // for printability\n\n// Color palette\nash_dark = [0.15, 0.15, 0.15];\nash_light = [0.35, 0.35, 0.35];\nember_orange = [0.9, 0.35, 0.05];\n\n// Main assembly\ncolor(ash_dark)\ndifference() {\n    union() {\n        head();\n        body();\n        tail();\n    }\n    // Hollow cavity for printing\n    translate([0, 0, -1])\n        scale([0.7, 0.7, 0.9])\n        union() {\n            head();\n            body();\n            tail();\n        }\n}\n\n// Head module\nmodule head() {\n    translate([body_len/2 + head_len/2, 0, 0])\n    rotate([0, 90, 0])\n    union() {\n        // snout\n        cylinder(h = head_len, r1 = 6, r2 = 4);\n        // cranium\n        translate([0,0,head_len])\n            sphere(d = 10);\n        // horns\n        for(a=[-30,30])\n            rotate([a,0,0])\n            translate([0,0,12])\n                cylinder(h = 8, r1 = 1.5, r2 = 0.5);\n        // glowing eye sockets\n        color(ember_orange)\n        translate([3,3,head_len-3])\n            sphere(d = 3);\n        color(ember_orange)\n        translate([3,-3,head_len-3])\n            sphere(d = 3);\n    }\n}\n\n// Body module with segments\nmodule body() {\n    for(i=[0:segment_count-1]) {\n        translate([body_len/2 - i*(body_len/segment_count), 0, 0])\n        rotate([0, 0, i*5])\n        scale([1 - 0.03*i, 1 - 0.03*i, 1 - 0.03*i])\n        union() {\n            // dorsal ridge\n            translate([0,0,5])\n                cube([body_len/segment_count + 0.5, 2, 1.5], center = true);\n            // segment ring\n            rotate_extrude()\n                translate([4,0,0])\n                    circle(r = 1.5);\n            // scale pattern\n            for(j=[0:3])\n                rotate([0,0,j*90])\n                translate([body_len/segment_count/4, 3.5, 0])\n                    scale([0.5,0.5,0.5])\n                    sphere(d = 2);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    translate([-body_len/2 - tail_len/2, 0, 0])\n    rotate([0, 90, 0])\n    hull() {\n        cylinder(h = 5, r = 4);\n        translate([0,0,tail_len])\n            cylinder(h = 1, r = 1);\n    }\n    // tail spikes\n    for(i=[1:8]) {\n        rotate([0,0,i*45])\n        translate([0,0,i*tail_len/8])\n        cube([0.5, 6, 1.5], center = true);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "cinderdrake",
    "openscad_code": "// Cinderdrake - A medium-complexity realistic 3D printable model\n// Overall size ~80mm length, 40mm height, 60mm wingspan\n\n// Main module\nmodule cinderdrake() {\n    color([0.4, 0.2, 0.1]) {\n        union() {\n            // Central body\n            body();\n            \n            // Head\n            head();\n            \n            // Wings\n            wings();\n            \n            // Legs\n            legs();\n            \n            // Tail\n            tail();\n            \n            // Horns\n            horns();\n            \n            // Ember details\n            ember_details();\n        }\n    }\n}\n\n// Creature body\nmodule body() {\n    translate([0, 0, 15]) {\n        difference() {\n            // Main torso\n            scale([1.5, 1, 1]) sphere(d=25, $fn=32);\n            \n            // Neck cavity\n            translate([-12, 0, 5]) rotate([0, -30, 0]) \n                cylinder(h=15, d=12, $fn=16);\n        }\n    }\n}\n\n// Dragon head\nmodule head() {\n    translate([-25, 0, 25]) {\n        rotate([0, -20, 0]) {\n            difference() {\n                // Snout\n                scale([2, 1, 1]) sphere(d=15, $fn=24);\n                \n                // Nostrils\n                for(i = [-1, 1]) {\n                    translate([-2, i*3, 2]) \n                        rotate([45, 0, 0]) cylinder(h=3, d1=2, d2=1, $fn=8);\n                }\n                \n                // Eye sockets\n                for(i = [-1, 1]) {\n                    translate([5, i*5, 3]) sphere(d=4, $fn=12);\n                }\n            }\n            \n            // Eyes (glowing embers)\n            color([1, 0.3, 0]) {\n                for(i = [-1, 1]) {\n                    translate([5, i*5, 3]) sphere(d=2.5, $fn=12);\n                }\n            }\n        }\n    }\n}\n\n// Wings with membrane\nmodule wings() {\n    // Left wing\n    translate([0, -20, 25]) rotate([0, 0, -30]) {\n        wing_half();\n    }\n    \n    // Right wing\n    mirror([0, 1, 0]) {\n        translate([0, -20, 25]) rotate([0, 0, -30]) {\n            wing_half();\n        }\n    }\n}\n\nmodule wing_half() {\n    union() {\n        // Main wing structure\n        color([0.3, 0.15, 0.05]) {\n            // Leading edge\n            rotate([0, 0, 30]) {\n                cylinder(h=35, d1=3, d2=2, $fn=12);\n                translate([30, 0, 0]) sphere(d=2);\n            }\n            \n            // Wing fingers\n            for(i = [1:4]) {\n                rotate([0, 0, i*20]) {\n                    translate([i*7, 0, 0]) {\n                        cylinder(h=30-i*5, d1=2.5, d2=1.5, $fn=10);\n                        translate([(30-i*5)*cos(i*20), (30-i*5)*sin(i*20), 0]) \n                            sphere(d=1.5);\n                    }\n                }\n            }\n        }\n        \n        // Wing membrane - thin for 3D printing\n        color([0.2, 0.1, 0.05]) {\n            linear_extrude(height=0.8) {\n                polygon(points=[\n                    [0, 0],\n                    [35, 0],\n                    [32, 10],\n                    [27, 18],\n                    [20, 24],\n                    [12, 28],\n                    [5, 25],\n                    [0, 20]\n                ]);\n            }\n        }\n    }\n}\n\n// Legs and claws\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([-5, side*10, 12]) rotate([0, 0, side*15]) {\n            leg();\n        }\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([12, side*8, 8]) rotate([0, 0, side*10]) {\n            leg();\n        }\n    }\n}\n\nmodule leg() {\n    union() {\n        // Upper leg\n        cylinder(h=12, d1=5, d2=4, $fn=12);\n        \n        // Lower leg\n        translate([0, 0, -12]) rotate([15, 0, 0]) {\n            cylinder(h=10, d1=4, d2=3, $fn=12);\n            \n            // Foot\n            translate([0, 0, -10]) rotate([30, 0, 0]) {\n                cube([8, 3, 2], center=true);\n                \n                // Claws\n                for(i = [-1, 0, 1]) {\n                    translate([i*2, 1.5, -1]) {\n                        cylinder(h=2, d1=1, d2=0.5, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail with segments\nmodule tail() {\n    translate([15, 0, 18]) rotate([0, 10, 0]) {\n        for(i = [0:5]) {\n            translate([i*8, 0, -i*1.5]) rotate([0, -i*5, 0]) {\n                scale([1-i*0.1, 1-i*0.05, 1-i*0.05]) {\n                    sphere(d=20-i*2, $fn=24);\n                }\n            }\n        }\n    }\n}\n\n// Horns and spikes\nmodule horns() {\n    // Head horns\n    for(side = [-1, 1]) {\n        translate([-20, side*5, 30]) rotate([0, 0, side*20]) {\n            cylinder(h=8, d1=3, d2=1, $fn=8);\n        }\n    }\n    \n    // Back spikes\n    for(i = [0:4]) {\n        translate([-5+i*5, 0, 30+i*1]) rotate([0, 0, 0]) {\n            cylinder(h=6-i*0.5, d1=4-i*0.5, d2=2, $fn=6);\n        }\n    }\n}\n\n// Ember details and cracks\nmodule ember_details() {\n    color([0.8, 0.2, 0]) {\n        // Body cracks\n        for(i = [0:8]) {\n            rotate([0, 0, i*45]) {\n                translate([0, 8, 20]) {\n                    scale([0.2, 2, 0.5]) sphere(d=3, $fn=8);\n                }\n            }\n        }\n        \n        // Wing ember veins\n        for(side = [-1, 1]) {\n            translate([0, side*15, 25]) {\n                for(j = [1:3]) {\n                    rotate([0, 0, j*20-20]) {\n                        translate([j*10, 0, 0]) {\n                            sphere(d=1.2, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\ncinderdrake();",
    "renders": true
  },
  {
    "mythical_creature": "smokecoil",
    "openscad_code": "// Smokecoil - A serpentine smoke dragon that forms from mystical vapors\n// Wings are folded against body for 3D printing without supports\n// Overall dimensions: ~75mm long, ~30mm tall, ~35mm wide\n\n$fn = 32;\n\n// Main body coil\nmodule body_coil() {\n    color(\"DarkSlateGray\") {\n        // Base serpentine body made of overlapping spheres\n        for(i = [0:15]) {\n            translate([\n                sin(i * 25) * 15,\n                cos(i * 25) * 15,\n                i * 3 - 20\n            ]) {\n                sphere(d = 12 - i * 0.3);\n            }\n        }\n        \n        // Connect spheres with cylinders for smooth body\n        for(i = [0:14]) {\n            hull() {\n                translate([\n                    sin(i * 25) * 15,\n                    cos(i * 25) * 15,\n                    i * 3 - 20\n                ]) sphere(d = 12 - i * 0.3);\n                \n                translate([\n                    sin((i+1) * 25) * 15,\n                    cos((i+1) * 25) * 15,\n                    (i+1) * 3 - 20\n                ]) sphere(d = 12 - (i+1) * 0.3);\n            }\n        }\n    }\n}\n\n// Dragon head with smoke wisps\nmodule head() {\n    color(\"DimGray\") {\n        // Main head shape\n        translate([0, 15, 25]) {\n            scale([1.2, 1, 0.8]) sphere(d = 12);\n            \n            // Snout extension\n            translate([3, 8, 0]) {\n                scale([2, 0.6, 0.6]) sphere(d = 8);\n            }\n            \n            // Horns - curved smoke horns\n            for(side = [-1, 1]) {\n                translate([side * 4, 10, 4]) {\n                    rotate([0, side * 20, 0]) {\n                        cylinder(h = 15, d1 = 2, d2 = 0.5);\n                    }\n                }\n            }\n            \n            // Eyes - glowing ember-like\n            color(\"DarkOrange\") {\n                for(side = [-1, 1]) {\n                    translate([side * 3, 12, 2]) {\n                        sphere(d = 2);\n                    }\n                }\n            }\n            \n            // Smoke wisps from nostrils\n            color(\"LightGray\") {\n                for(side = [-1, 1]) {\n                    translate([side * 2, 6, -1]) {\n                        for(j = [0:3]) {\n                            translate([0, -j * 2, j * 1]) {\n                                scale([1, 1 - j * 0.2, 1 - j * 0.2]) sphere(d = 1.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Folded wings against body\nmodule wings() {\n    color(\"Gray\") {\n        // Left wing\n        translate([-8, 0, 0]) {\n            rotate([0, 20, 0]) {\n                // Main wing membrane\n                difference() {\n                    scale([0.3, 1.5, 1]) sphere(d = 25);\n                    translate([3, 0, 0]) sphere(d = 30);\n                }\n                \n                // Wing fingers structure\n                for(i = [0:3]) {\n                    rotate([0, 0, -30 + i * 20]) {\n                        translate([-2, -10 + i * 5, 0]) {\n                            cylinder(h = 2, r = 1);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0]) {\n            translate([-8, 0, 0]) {\n                rotate([0, 20, 0]) {\n                    difference() {\n                        scale([0.3, 1.5, 1]) sphere(d = 25);\n                        translate([3, 0, 0]) sphere(d = 30);\n                    }\n                    \n                    for(i = [0:3]) {\n                        rotate([0, 0, -30 + i * 20]) {\n                            translate([-2, -10 + i * 5, 0]) {\n                                cylinder(h = 2, r = 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Smoke tail with dissipating wisps\nmodule tail() {\n    color(\"Gray\") {\n        // Main tail tapering to smoke\n        for(i = [0:10]) {\n            translate([\n                sin((i + 15) * 25) * 15,\n                cos((i + 15) * 25) * 15,\n                (i + 15) * 3 - 20\n            ]) {\n                sphere(d = 6 - i * 0.5);\n                \n                // Smoke wisps coming off tail\n                if(i > 5) {\n                    for(j = [0:2]) {\n                        rotate([0, 0, j * 120]) {\n                            translate([0, 3 + i * 0.3, 0]) {\n                                sphere(d = 1 + i * 0.1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Magical smoke aura around body\nmodule smoke_aura() {\n    color(\"LightGray\", 0.3) {\n        for(i = [0:20]) {\n            translate([\n                sin(i * 18) * (20 + sin(i * 5) * 3),\n                cos(i * 18) * (20 + sin(i * 5) * 3),\n                i * 2 - 20\n            ]) {\n                sphere(d = 2);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body_coil();\n    head();\n    wings();\n    tail();\n    smoke_aura();\n}",
    "renders": true
  },
  {
    "mythical_creature": "emberserpent",
    "openscad_code": "// EmberSerpent - A mythical fire serpent with glowing scales and ember wings\n// Designed for 3D printing, no overhangs >45 degrees\n\n// Scale factor for print size (total length ~80mm)\nscale_factor = 0.8;\n\n// Main body module\nmodule emberSerpent() {\n    // Color definitions for realistic appearance\n    color([0.8, 0.2, 0.1]) {\n        \n        // Head - elongated snout with ember glow\n        translate([0, 0, 0]) {\n            // Main head structure\n            scale([1.2, 0.8, 0.8]) sphere(8);\n            \n            // Snout extension\n            translate([8, 0, 0]) \n                scale([1, 0.7, 0.7]) sphere(6);\n            \n            // Ember eyes\n            color([1, 0.4, 0]) {\n                translate([5, 4, 3]) sphere(2);\n                translate([5, -4, 3]) sphere(2);\n            }\n            \n            // Horn pairs along head\n            for(i = [0:1:3]) {\n                translate([-2 + i*3, 0, 6 + i*1]) \n                    rotate([0, -20, 0]) \n                        cylinder(h=6, r1=1.5, r2=0.5);\n            }\n        }\n        \n        // Neck and upper body segments\n        for(i = [0:1:7]) {\n            translate([-12 - i*8, 0, -i*2]) {\n                rotate([0, i*5, sin(i*30)*10])\n                    scale([1 - i*0.08, 1 - i*0.08, 1 - i*0.08]) \n                        sphere(9 - i*0.5);\n            }\n        }\n        \n        // Ember wings - flame-like structures\n        color([0.9, 0.3, 0.1]) {\n            for(side = [-1, 1]) {\n                translate([-20, side*12, 5]) {\n                    rotate([0, 0, side*30]) {\n                        // Wing membrane segments\n                        for(j = [0:1:4]) {\n                            translate([j*3, 0, j*2]) {\n                                rotate([0, -j*5, 0])\n                                    scale([1, 0.2, 0.8]) \n                                        sphere(4 + j*0.5);\n                            }\n                        }\n                        \n                        // Wing spines\n                        for(k = [0:1:3]) {\n                            translate([k*4, side*2, k*3]) {\n                                rotate([0, -45 + k*10, 0])\n                                    cylinder(h=8 - k*1.5, r1=1, r2=0.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Tail segments with decreasing size\n        for(seg = [0:1:12]) {\n            translate([-70 - seg*6, 0, -10 - seg*1.5]) {\n                rotate([0, sin(seg*25)*15, sin(seg*30)*8])\n                    scale([1 - seg*0.06, 1 - seg*0.06, 1 - seg*0.06]) {\n                        // Main tail segment\n                        sphere(7 - seg*0.4);\n                        \n                        // Ember spikes along tail\n                        color([1, 0.3, 0]) {\n                            rotate([0, 0, seg*30]) {\n                                translate([0, 6 - seg*0.3, 0]) \n                                    cylinder(h=2, r1=1.5, r2=0.5);\n                                translate([0, -6 + seg*0.3, 0]) \n                                    cylinder(h=2, r1=1.5, r2=0.5);\n                            }\n                        }\n                    }\n            }\n        }\n        \n        // Leg pairs - small but functional\n        for(leg = [0:1:2]) {\n            translate([-30 - leg*20, 0, -8]) {\n                for(side = [-1, 1]) {\n                    translate([0, side*6, 0]) {\n                        // Upper leg\n                        rotate([45, 0, 0])\n                            cylinder(h=8, r1=2.5, r2=2);\n                        \n                        // Lower leg\n                        translate([0, 0, 8]) {\n                            rotate([75, 0, 0])\n                                cylinder(h=6, r1=2, r2=1.5);\n                            \n                            // Foot\n                            translate([0, 0, 6]) {\n                                rotate([0, 0, side*30])\n                                    scale([1.5, 0.8, 0.5])\n                                        cube([6, 3, 2], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Scales pattern along body\n        color([0.7, 0.15, 0.05]) {\n            for(scale_row = [0:1:20]) {\n                translate([-10 - scale_row*4, 0, -5 - scale_row*1]) {\n                    for(scale_pos = [0:60:300]) {\n                        rotate([0, 0, scale_pos]) {\n                            translate([0, 7 - scale_row*0.2, 0])\n                                scale([0.8, 0.3, 0.4])\n                                    sphere(1.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the scaled model\nscale([scale_factor, scale_factor, scale_factor])\n    emberSerpent();",
    "renders": true
  },
  {
    "mythical_creature": "charwyrm",
    "openscad_code": "// Charwyrm - A winged, serpentine dragon-wyrm hybrid\n// Realistic medium-complexity model for 3D printing\n\n// Parameters\nbody_length = 60;\nbody_diameter = 12;\nwing_span = 45;\nhead_length = 15;\ntail_length = 40;\nscale_size = 1.5;\n\n// Colors\ncolor_body = [0.2, 0.4, 0.1];      // Deep forest green\ncolor_wings = [0.3, 0.2, 0.5];   // Purple membrane\ncolor_scales = [0.1, 0.3, 0.1];  // Darker scale accents\ncolor_eyes = [1, 0.8, 0];        // Golden eyes\ncolor_horns = [0.4, 0.3, 0.2];   // Brown horns\n\n// Main creature\nunion() {\n    // Body segments\n    for (i = [0:4]) {\n        translate([i * 12 - 24, 0, 0])\n            color(color_body)\n            scale([1.2 - i * 0.1, 1, 1.2 - i * 0.1])\n                sphere(d = body_diameter - i * 1.5);\n    }\n    \n    // Head\n    translate([body_length/2 + 5, 0, 0])\n    union() {\n        color(color_body)\n            scale([1.5, 1, 1])\n                sphere(d = body_diameter + 3);\n        \n        // Snout\n        translate([8, 0, 0])\n            color(color_body)\n                scale([2, 0.8, 0.8])\n                    sphere(d = body_diameter - 2);\n        \n        // Horns\n        for (angle = [30, -30]) {\n            rotate([0, 0, angle])\n                translate([5, 0, body_diameter/2 + 2])\n                color(color_horns)\n                    rotate([90, 0, 0])\n                        cylinder(h1 = 8, h2 = 0, r1 = 2, r2 = 0.5);\n        }\n        \n        // Eyes\n        for (side = [-1, 1]) {\n            translate([4, side * 4, 2])\n                color(color_eyes)\n                    sphere(d = 3);\n        }\n    }\n    \n    // Tail\n    for (i = [1:10]) {\n        translate([-body_length/2 - i * 4, 0, 0])\n            color(color_body)\n            scale([1 - i * 0.08, 1 - i * 0.08, 1 - i * 0.08])\n                sphere(d = body_diameter - i);\n    }\n    \n    // Wings\n    for (side = [-1, 1]) {\n        translate([0, side * 15, 5])\n        rotate([0, 0, side * 20])\n        color(color_wings)\n        difference() {\n            // Wing membrane\n            scale([1, 1, 0.2])\n                sphere(d = wing_span);\n            \n            // Wing holes for membrane texture\n            for (j = [1:3]) {\n                translate([j * 8 - 12, j * 4 - 8, 0])\n                    scale([0.8, 0.6, 2])\n                        sphere(d = 8);\n            }\n        }\n        \n        // Wing bones\n        for (j = [0:2]) {\n            rotate([0, 0, j * 30 - 30])\n            translate([0, 0, 2])\n                color(color_horns)\n                    cylinder(h = wing_span/2, r = 1);\n        }\n    }\n    \n    // Legs\n    for (pos = [[-10, 1], [-20, -1]]) {\n        translate([pos[0], pos[1] * 8, -body_diameter/2])\n        color(color_body)\n            rotate([0, pos[1] * 20, 0])\n                cylinder(h = 12, r1 = 3, r2 = 2);\n        \n        // Feet\n        translate([pos[0] + pos[1] * 12, pos[1] * 12, -body_diameter/2 - 10])\n        color(color_horns)\n            scale([1.5, 0.5, 0.3])\n                sphere(d = 5);\n    }\n    \n    // Scales pattern\n    module scale(x, y, z, size) {\n        translate([x, y, z])\n            color(color_scales)\n                scale([1, 0.7, 0.3])\n                    sphere(d = size);\n    }\n    \n    for (i = [0:5]) {\n        for (j = [0:8]) {\n            scale(i * 10 - 30, sin(j * 45) * 6, cos(j * 45) * 4, scale_size);\n        }\n    }\n    \n    // Magical rune on forehead\n    translate([body_length/2 + 8, 0, body_diameter/2 + 1])\n    color([0.8, 0.8, 1])\n        rotate([90, 0, 0])\n            cylinder(h = 0.5, r = 3);\n}",
    "renders": true
  },
  {
    "mythical_creature": "scorchfang",
    "openscad_code": "// Scorchfang - A mythical fire dragon with molten scales and ember wings\n// Designed for 3D printing - 80mm wingspan\n\n// Main color palette\ncolor_fire = [0.8, 0.2, 0];        // Fiery orange-red\ncolor_embers = [1, 0.4, 0.1];      // Glowing embers\ncolor_scales = [0.3, 0.1, 0.05];   // Charred scales\ncolor_eyes = [1, 1, 0];           // Bright yellow eyes\ncolor_smoke = [0.2, 0.2, 0.2];    // Smoke wisps\n\n// Scale the entire model\nscale_factor = 0.8;\n\nscale([scale_factor, scale_factor, scale_factor]) {\n    // Body center\n    translate([0, 0, 10]) {\n        color(color_fire) {\n            // Main torso\n            union() {\n                // Chest\n                cylinder(h=20, d1=15, d2=18, $fn=8);\n                \n                // Abdomen\n                translate([0, 0, -15]) \n                    cylinder(h=15, d1=18, d2=12, $fn=8);\n                \n                // Neck base\n                translate([0, 0, 20])\n                    cylinder(h=8, d1=12, d2=8, $fn=6);\n            }\n        }\n    }\n    \n    // Head\n    translate([0, 0, 38]) {\n        color(color_fire) {\n            union() {\n                // Snout\n                cylinder(h=12, d1=8, d2=6, $fn=6);\n                \n                // Head back\n                translate([0, 0, -8])\n                    sphere(d=10, $fn=8);\n                \n                // Horns - two curved back\n                for(i = [-1, 1]) {\n                    rotate([0, i*15, 0])\n                        translate([i*4, -2, 5]) {\n                            rotate([0, -20, 0])\n                                cylinder(h=15, d1=2, d2=1, $fn=6);\n                        }\n                }\n            }\n        }\n        \n        // Eyes\n        color(color_eyes) {\n            for(i = [-1, 1]) {\n                translate([i*3, 2, 2])\n                    sphere(d=2, $fn=8);\n            }\n        }\n    }\n    \n    // Wings - membrane with bone structure\n    module wing() {\n        color(color_embers) {\n            // Wing membrane\n            difference() {\n                // Main wing shape\n                translate([0, 0, 5])\n                    rotate([0, 90, 0])\n                        cylinder(h=30, d1=25, d2=5, $fn=3);\n                \n                // Cutouts for wing bones\n                for(i = [0.2, 0.4, 0.6, 0.8]) {\n                    translate([i*15, 0, 5])\n                        rotate([0, 90, 0])\n                            cylinder(h=32, d1=2, d2=1, $fn=8);\n                }\n            }\n        }\n        \n        // Wing bones\n        color(color_scales) {\n            for(i = [0, 0.33, 0.66, 1]) {\n                rotate([0, 90, 0])\n                    translate([i*15, 0, 5])\n                        cylinder(h=30-i*5, d=1.5, $fn=6);\n            }\n        }\n    }\n    \n    // Left wing\n    translate([10, 0, 25]) {\n        rotate([0, 0, 30])\n            wing();\n    }\n    \n    // Right wing\n    translate([-10, 0, 25]) {\n        scale([-1, 1, 1])\n            rotate([0, 0, 30])\n                wing();\n    }\n    \n    // Legs - digitigrade stance\n    module leg() {\n        color(color_fire) {\n            // Upper leg\n            cylinder(h=12, d1=6, d2=4, $fn=6);\n            \n            // Lower leg\n            translate([0, 0, -12])\n                rotate([30, 0, 0])\n                    cylinder(h=10, d1=4, d2=3, $fn=6);\n            \n            // Foot\n            translate([0, 0, -20])\n                rotate([60, 0, 0])\n                    cube([8, 3, 2]);\n        }\n    }\n    \n    // Front legs\n    for(i = [-1, 1]) {\n        translate([i*6, 0, 8]) {\n            rotate([0, i*10, 0])\n                leg();\n        }\n    }\n    \n    // Rear legs\n    for(i = [-1, 1]) {\n        translate([i*5, 0, -5]) {\n            rotate([0, i*10, 0])\n                leg();\n        }\n    }\n    \n    // Tail - segmented with fire tip\n    color(color_fire) {\n        for(i = [0:5]) {\n            translate([0, 0, -15-i*5])\n                scale([1-i*0.1, 1-i*0.1, 1])\n                    rotate([0, 0, i*15])\n                        cylinder(h=5, d1=8-i, d2=7-i, $fn=6);\n        }\n    }\n    \n    // Tail flame\n    color(color_embers) {\n        translate([0, 0, -45])\n            sphere(d=8, $fn=8);\n    }\n    \n    // Scales pattern on back\n    color(color_scales) {\n        for(x = [-4:2:4]) {\n            for(z = [0:3:20]) {\n                translate([x, 0, z])\n                    rotate([90, 0, 0])\n                        cylinder(h=1, d=3, $fn=6);\n            }\n        }\n    }\n    \n    // Smoke wisps from nostrils\n    color(color_smoke) {\n        for(i = [-1, 1]) {\n            translate([i*2, 3, 35]) {\n                for(j = [0:0.5:2]) {\n                    translate([0, 0, j*2])\n                        scale([0.5, 0.5, 1])\n                            sphere(d=1, $fn=6);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "lavahydra",
    "openscad_code": "// Lavahydra - A volcanic multi-headed dragon\n// Realistic style, medium complexity\n\ncolor(\"darkred\")\nunion() {\n    // Central body\n    translate([0, 0, 10])\n    scale([1.5, 1, 1.2])\n    sphere(15);\n\n    // Lava core glow\n    translate([0, 0, 12])\n    color(\"orange\")\n    sphere(8);\n\n    // Neck segments\n    for(i = [0:2]) {\n        rotate([0, 0, i*120])\n        translate([0, 25, 15])\n        scale([0.8, 0.8, 1.5])\n        neck_segment();\n    }\n\n    // Legs\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([12, 0, 0])\n        leg();\n    }\n\n    // Tail\n    translate([0, -20, 8])\n    rotate([0, 0, 0])\n    tail();\n}\n\nmodule neck_segment() {\n    union() {\n        // Main neck tube\n        cylinder(h=20, r1=6, r2=4, center=true);\n        \n        // Spine ridges\n        for(j = [0:3]) {\n            translate([0, 0, j*5-7.5])\n            rotate([0, 90, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=8, r=2);\n        }\n    }\n    \n    // Head at end\n    translate([0, 0, 20])\n    head();\n}\n\nmodule head() {\n    union() {\n        // Main head shape\n        scale([1.2, 0.8, 0.9])\n        sphere(8);\n        \n        // Snout\n        translate([0, 6, 0])\n        scale([0.8, 1.2, 0.7])\n        sphere(5);\n        \n        // Horns\n        for(h = [0:1]) {\n            rotate([0, 0, h*180])\n            translate([3, 0, 6])\n            rotate([30, 0, 0])\n            cylinder(h=8, r1=2, r2=1);\n        }\n        \n        // Eyes\n        for(e = [0:1]) {\n            rotate([0, 0, e*180])\n            translate([3, 3, 2])\n            color(\"yellow\")\n            sphere(1.5);\n        }\n        \n        // Jaw\n        difference() {\n            translate([0, 4, -3])\n            scale([0.9, 0.9, 0.5])\n            sphere(6);\n            translate([0, 4, -2])\n            cube([10, 10, 4], center=true);\n        }\n    }\n}\n\nmodule leg() {\n    union() {\n        // Upper leg\n        translate([0, 0, -10])\n        rotate([45, 0, 0])\n        cylinder(h=15, r=4);\n        \n        // Lower leg\n        translate([0, 10, -20])\n        rotate([90, 0, 0])\n        cylinder(h=12, r=3);\n        \n        // Foot\n        translate([0, 15, -25])\n        scale([1.5, 2, 0.8])\n        sphere(3);\n        \n        // Claws\n        for(c = [0:2]) {\n            translate([c*2-2, 18, -25])\n            cylinder(h=3, r=0.8);\n        }\n    }\n}\n\nmodule tail() {\n    // Segmented tail\n    for(s = [0:4]) {\n        translate([0, -s*6, -s*1.5])\n        scale([1-s*0.15, 1-s*0.15, 1-s*0.1])\n        rotate([0, 0, s*15])\n        cylinder(h=8, r1=5-s, r2=4.5-s);\n    }\n    \n    // Tail spike\n    translate([0, -30, -8])\n    rotate([0, 0, 90])\n    cylinder(h=5, r1=0, r2=2);\n}\n\n// Base magma pool\ntranslate([0, 0, -5])\ncolor(\"darkred\")\ndifference() {\n    cylinder(h=3, r=30);\n    translate([0, 0, -1])\n    cylinder(h=5, r=25);\n}",
    "renders": true
  },
  {
    "mythical_creature": "magmafiredrake",
    "openscad_code": "// Magmafiredrake - Medium complexity realistic mythical creature\n// Wings, horns, tail, scales, molten core glow\n\n// Scale factor for 3D printing\nscale_factor = 0.5;\n\n// Colors\nlava_color = [0.8, 0.2, 0];\nglow_color = [1, 0.7, 0];\nscale_color = [0.2, 0.1, 0.1];\nhorn_color = [0.3, 0.15, 0];\n\n// Main body\nmodule body() {\n    difference() {\n        // Torso with scales\n        union() {\n            // Central body\n            translate([0, 0, 10]) {\n                scale([1.2, 0.8, 1.5]) sphere(d=20);\n            }\n            \n            // Chest scales\n            for(i = [-20:5:20]) {\n                for(j = [-10:5:0]) {\n                    translate([i, j, 5 + abs(i)/3]) {\n                        scale([1.2, 1.2, 0.3]) sphere(d=3);\n                    }\n                }\n            }\n        }\n        \n        // Neck socket\n        translate([0, 0, 30]) {\n            cylinder(h=10, d1=12, d2=8);\n        }\n    }\n}\n\n// Head\nmodule head() {\n    translate([0, 0, 45]) {\n        rotate([0, 0, 0]) {\n            difference() {\n                union() {\n                    // Main head\n                    scale([0.8, 0.6, 1.2]) sphere(d=20);\n                    \n                    // Snout\n                    translate([0, 12, -5]) {\n                        scale([0.6, 0.8, 0.4]) sphere(d=15);\n                    }\n                    \n                    // Horns\n                    for(side = [-1, 1]) {\n                        translate([side * 8, 0, 12]) {\n                            rotate([0, side * 20, 0]) {\n                                cylinder(h=15, d1=3, d2=6);\n                            }\n                        }\n                    }\n                }\n                \n                // Eye sockets\n                for(side = [-1, 1]) {\n                    translate([side * 6, 8, 2]) {\n                        sphere(d=4);\n                    }\n                }\n                \n                // Mouth\n                translate([0, 15, -8]) {\n                    cube([10, 2, 5], center=true);\n                }\n                \n                // Nostrils\n                for(side = [-1, 1]) {\n                    translate([side * 3, 15, -7]) {\n                        cylinder(h=3, d=2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wings\nmodule wing(side) {\n    translate([side * 15, -5, 25]) {\n        rotate([0, 0, side * 30]) {\n            rotate([0, 90, 0]) {\n                // Main wing membrane\n                difference() {\n                    union() {\n                        // Upper wing\n                        translate([0, 0, 0]) {\n                            scale([1, 0.3, 1]) sphere(d=30);\n                        }\n                        \n                        // Lower wing\n                        translate([0, -15, 0]) {\n                            scale([0.8, 0.2, 0.8]) sphere(d=25);\n                        }\n                        \n                        // Wing spikes\n                        for(i = [0:8:25]) {\n                            translate([i, -i/2, 0]) {\n                                rotate([90, 0, 0]) {\n                                    cylinder(h=3, d1=1, d2=3);\n                                }\n                            }\n                        }\n                    }\n                    \n                    // Wing holes for membrane\n                    for(i = [5:12:25]) {\n                        for(j = [-5:5:5]) {\n                            translate([i, j, 0]) {\n                                sphere(d=3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    translate([0, -20, 5]) {\n        rotate([0, 15, 0]) {\n            // Segmented tail\n            for(i = [0:10:40]) {\n                translate([0, -i, -i/3]) {\n                    scale([1 - i/80, 1 - i/80, 1 - i/80]) {\n                        sphere(d=15 - i/3);\n                    }\n                }\n            }\n            \n            // Tail spikes\n            for(i = [10:10:30]) {\n                translate([0, -i, -i/3 + 5]) {\n                    rotate([0, 0, 0]) {\n                        cylinder(h=8, d1=2, d2=1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Legs\nmodule leg(side) {\n    translate([side * 8, 0, 0]) {\n        // Thigh\n        translate([0, -5, 5]) {\n            rotate([0, side * 15, 0]) {\n                cylinder(h=15, d1=8, d2=6);\n            }\n        }\n        \n        // Lower leg\n        translate([0, -5, -5]) {\n            rotate([0, side * 30, 0]) {\n                cylinder(h=12, d1=6, d2=4);\n            }\n        }\n        \n        // Foot\n        translate([0, -5, -12]) {\n            scale([1.5, 2, 0.5]) sphere(d=8);\n        }\n        \n        // Claws\n        for(claw = [-1, 0, 1]) {\n            translate([claw * 2, -8, -12]) {\n                rotate([0, 0, 0]) {\n                    cylinder(h=4, d1=1, d2=2);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\ncolor(scale_color) {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            body();\n            head();\n            tail();\n            \n            // Wings\n            wing(1);\n            wing(-1);\n            \n            // Legs\n            leg(1);\n            leg(-1);\n            \n            // Magma core glow\n            color(glow_color) {\n                translate([0, 0, 15]) {\n                    sphere(d=8);\n                }\n                \n                // Magma veins\n                for(i = [1:4]) {\n                    rotate([0, 0, i * 90]) {\n                        translate([10, 0, 15]) {\n                            rotate([90, 0, 0]) {\n                                cylinder(h=20, d=2);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "pyroclastwyrm",
    "openscad_code": "// Pyroclastwyrm - a volcanic dragon forged from magma and obsidian\n// Wingspan ~90 mm, designed for 3D printing\n\n$fn = 32;\nscale_factor = 1;\n\nmodule obsidian_spike(x=0, y=0, z=0, r=1, h=2) {\n    translate([x,y,z]) \n        scale([r,r,h]) \n        rotate([0,20,0])\n        cylinder(r1=1, r2=0.2, h=1);\n}\n\nmodule scale_plate(x,y,z, size=1) {\n    translate([x,y,z]) {\n        scale([size,size,size*0.3]) \n        rotate([90,0,rand*360])\n        sphere(1.5);\n    }\n}\n\nmodule wing_segment(len, wid, thick) {\n    color(\"firebrick\")\n    difference() {\n        scale([len,wid,thick]) sphere(1);\n        translate([len*0.8,0,0]) scale([len*0.3,wid*0.3,thick*1.2]) sphere(1);\n    }\n}\n\nmodule wing() {\n    translate([0,0,15]) rotate([0,0,-30]) {\n        // Wing base\n        wing_segment(20, 8, 1);\n        \n        // Wing segments\n        translate([15,0,0]) rotate([0,0,20]) wing_segment(15, 6, 0.8);\n        translate([25,0,0]) rotate([0,0,30]) wing_segment(12, 4, 0.6);\n        translate([33,0,0]) rotate([0,0,40]) wing_segment(8, 2, 0.4);\n        \n        // Wing claws\n        for(i=[0:2]) {\n            translate([35-i*5, 0, -2]) rotate([0,0,i*15]) \n            scale([0.5,0.5,2]) cylinder(r1=1.5, r2=0.5, h=3);\n        }\n    }\n}\n\nmodule head() {\n    color(\"darkslategray\") {\n        // Snout\n        translate([0,0,25]) rotate([0,0,0])\n        scale([6,4,3]) sphere(1);\n        \n        // Head\n        translate([-4,0,28]) rotate([0,0,0])\n        scale([5,5,4]) sphere(1);\n        \n        // Horns\n        color(\"black\")\n        translate([-2,3,32]) rotate([30,30,45]) \n        scale([1,1,4]) cylinder(r1=2, r2=0.5, h=8);\n        \n        translate([-2,-3,32]) rotate([30,-30,-45]) \n        scale([1,1,4]) cylinder(r1=2, r2=0.5, h=8);\n        \n        // Eyes\n        color(\"orangered\")\n        translate([0,2.5,28]) sphere(1);\n        translate([0,-2.5,28]) sphere(1);\n        \n        // Jaw\n        translate([2,0,22]) rotate([0,0,0])\n        scale([5,3.5,2]) sphere(1);\n    }\n}\n\nmodule tail_segment(pos, rad) {\n    color(\"darkred\")\n    translate([pos,0,rad*3]) \n    scale([rad,rad,rad*2]) sphere(1);\n    \n    // Lava glow inside\n    color(\"yellow\")\n    translate([pos,0,rad*3]) \n    scale([rad*0.6,rad*0.6,rad*1.6]) sphere(1);\n}\n\nmodule body() {\n    color(\"darkslategray\") {\n        // Main torso segments\n        for(i=[0:5]) {\n            scale_factor = 1 - i*0.1;\n            translate([-i*5,0,12-i]) \n            scale([8*scale_factor,6*scale_factor,5*scale_factor]) sphere(1);\n        }\n        \n        // Spine spikes\n        for(i=[0:8]) {\n            obsidian_spike(-i*4, 0, 15-i*1.5, 1.5-i*0.1, 4-i*0.3);\n        }\n        \n        // Side scales\n        for(i=[0:20]) {\n            rand = i*37.3;\n            scale_plate(-i*2, sin(rand)*4, 10+cos(rand)*3, 0.8-i*0.02);\n            scale_plate(-i*2, -sin(rand)*4, 10+cos(rand)*3, 0.8-i*0.02);\n        }\n    }\n}\n\nmodule legs() {\n    color(\"darkslategray\")\n    // Front legs\n    translate([5,5,10]) {\n        cylinder(r=2, h=8);\n        translate([0,0,-5]) sphere(2.5);\n    }\n    translate([5,-5,10]) {\n        cylinder(r=2, h=8);\n        translate([0,0,-5]) sphere(2.5);\n    }\n    \n    // Back legs\n    translate([-15,4,8]) {\n        cylinder(r=2.5, h=6);\n        translate([0,0,-4]) sphere(3);\n    }\n    translate([-15,-4,8]) {\n        cylinder(r=2.5, h=6);\n        translate([0,0,-4]) sphere(3);\n    }\n}\n\nmodule tail() {\n    for(i=[0:10]) {\n        tail_segment(-30-i*3, max(1, 3-i*0.2));\n    }\n}\n\n// Assemble the Pyroclastwyrm\nunion() {\n    // Main body parts\n    head();\n    body();\n    legs();\n    tail();\n    \n    // Wings\n    translate([0,0,0]) wing();\n    mirror([0,1,0]) wing();\n}",
    "renders": true
  },
  {
    "mythical_creature": "volcanicserpent",
    "openscad_code": "// VolcanicSerpent - A medium-complexity 3D printable mythical creature\n// Length ~70 mm, height ~25 mm, tail width ~12 mm\n\n// Color constants\nlavaglow = [0.9, 0.25, 0.05];\nobsidian = [0.15, 0.15, 0.15];\nember = [1, 0.5, 0.1];\n\n// Main body module\nmodule body() {\n    union() {\n        // Torso\n        color(lavaglow)\n        translate([0, 0, 5])\n        scale([1, 0.7, 0.6])\n        sphere(d=20, $fn=32);\n\n        // Neck\n        color(lavaglow)\n        translate([-15, 0, 10])\n        rotate([0, 15, 0])\n        cylinder(h=18, d1=14, d2=10, $fn=24);\n\n        // Head\n        color(lavaglow)\n        translate([-28, 0, 18])\n        scale([1.2, 0.8, 0.9])\n        sphere(d=12, $fn=32);\n    }\n}\n\n// Tail segments using loop\nmodule tail() {\n    for (i = [0:5]) {\n        color(lavaglow)\n        translate([10 + i*4, 0, 5 - i*0.8])\n        rotate([0, 0, -i*12])\n        scale([1 - i*0.12, 1 - i*0.12, 1])\n        cylinder(h=6, d1=12 - i*1.5, d2=10 - i*1.5, $fn=24);\n    }\n}\n\n// Wings with membrane\nmodule wings() {\n    union() {\n        // Left wing\n        color(obsidian)\n        translate([-5, -12, 15])\n        rotate([0, 0, -20])\n        scale([1, 0.2, 0.05])\n        sphere(d=25, $fn=16);\n\n        // Right wing\n        color(obsidian)\n        translate([-5, 12, 15])\n        rotate([0, 0, 20])\n        scale([1, 0.2, 0.05])\n        sphere(d=25, $fn=16);\n\n        // Wing membranes\n        color(ember)\n        translate([-5, -12, 15])\n        rotate([0, 0, -20])\n        scale([0.7, 0.15, 0.03])\n        sphere(d=20, $fn=16);\n\n        color(ember)\n        translate([-5, 12, 15])\n        rotate([0, 0, 20])\n        scale([0.7, 0.15, 0.03])\n        sphere(d=20, $fn=16);\n    }\n}\n\n// Horns module\nmodule horns() {\n    // Left horn\n    color(obsidian)\n    translate([-32, -4, 22])\n    rotate([0, -30, -25])\n    cylinder(h=8, d1=4, d2=2, $fn=12);\n\n    // Right horn\n    color(obsidian)\n    translate([-32, 4, 22])\n    rotate([0, -30, 25])\n    cylinder(h=8, d1=4, d2=2, $fn=12);\n}\n\n// Lava scales pattern\nmodule scales() {\n    for (i = [0:7]) {\n        for (j = [0:3]) {\n            color(ember)\n            translate([-25 + j*5, -8 + i*2.5, 15 + sin(i*45)*2])\n            scale([0.4, 0.4, 0.2])\n            sphere(d=3, $fn=8);\n            \n            color(ember)\n            translate([-25 + j*5, 8 - i*2.5, 15 + sin(i*45)*2])\n            scale([0.4, 0.4, 0.2])\n            sphere(d=3, $fn=8);\n        }\n    }\n}\n\n// Eyes\nmodule eyes() {\n    // Left eye\n    color([1,1,1])\n    translate([-33, -3, 18])\n    sphere(d=2, $fn=16);\n\n    // Right eye\n    color([1,1,1])\n    translate([-33, 3, 18])\n    sphere(d=2, $fn=16);\n\n    // Pupils\n    color([0,0,0])\n    translate([-34, -3, 18])\n    sphere(d=1, $fn=8);\n\n    color([0,0,0])\n    translate([-34, 3, 18])\n    sphere(d=1, $fn=8);\n}\n\n// Legs for support\nmodule legs() {\n    union() {\n        // Front left leg\n        color(lavaglow)\n        translate([-10, -8, 0])\n        cylinder(h=5, d=4, $fn=12);\n\n        // Front right leg\n        color(lavaglow)\n        translate([-10, 8, 0])\n        cylinder(h=5, d=4, $fn=12);\n\n        // Rear left leg\n        color(lavaglow)\n        translate([15, -7, 0])\n        cylinder(h=5, d=4, $fn=12);\n\n        // Rear right leg\n        color(lavaglow)\n        translate([15, 7, 0])\n        cylinder(h=5, d=4, $fn=12);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    tail();\n    wings();\n    horns();\n    scales();\n    eyes();\n    legs();\n}",
    "renders": true
  },
  {
    "mythical_creature": "geowyrm",
    "openscad_code": "// Geowyrm - Earth Dragon Wyrm\n// Medium complexity realistic style\n\n$fn=50;\n\n// Main body\nmodule body() {\n    color(\"SaddleBrown\")\n    union() {\n        // Main torso\n        translate([-5, 0, 0])\n        scale([2, 1, 0.8])\n        sphere(15);\n        \n        // Neck\n        translate([20, 0, 5])\n        rotate([0, -20, 0])\n        scale([0.8, 0.8, 1.2])\n        cylinder(10, 8, 5);\n        \n        // Tail\n        translate([-25, 0, -5])\n        rotate([0, 10, 0])\n        scale([1, 1, 0.6])\n        cylinder(30, 12, 3);\n    }\n}\n\n// Head\nmodule head() {\n    color(\"Sienna\")\n    union() {\n        // Main head\n        translate([28, 0, 8])\n        scale([1.2, 0.8, 0.9])\n        sphere(8);\n        \n        // Snout\n        translate([35, 0, 8])\n        scale([0.8, 0.6, 0.5])\n        sphere(6);\n        \n        // Horns\n        for(i=[-1, 1]) {\n            translate([30, i*5, 15])\n            rotate([0, 20*i, -10*i])\n            cylinder(8, 2, 0.5);\n        }\n        \n        // Eyes\n        color(\"DarkRed\")\n        for(i=[-1, 1]) {\n            translate([32, i*4, 10])\n            sphere(1.5);\n        }\n    }\n}\n\n// Wings\nmodule wings() {\n    color(\"DarkOliveGreen\")\n    for(side=[-1, 1]) {\n        translate([10, side*12, 12])\n        rotate([0, 0, side*20])\n        scale([1, 0.3, 1])\n        difference() {\n            // Main wing\n            scale([15, 1, 10])\n            sphere(1);\n            \n            // Wing holes\n            for(i=[1:3]) {\n                translate([i*4-8, 0, 3])\n                rotate([0, 90, 0])\n                cylinder(2, 1, 1);\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(\"SaddleBrown\")\n    for(side=[-1, 1]) {\n        for(pos=[-10, 10]) {\n            translate([pos, side*8, -5])\n            rotate([0, 0, side*10])\n            union() {\n                // Upper leg\n                cylinder(8, 3, 2);\n                \n                // Lower leg\n                translate([0, 0, -8])\n                rotate([20, 0, 0])\n                cylinder(6, 2, 3);\n                \n                // Foot\n                translate([0, side*2, -12])\n                scale([1, 2, 0.5])\n                sphere(3);\n            }\n        }\n    }\n}\n\n// Scales\nmodule scales() {\n    color(\"Peru\")\n    for(i=[-20:10:20]) {\n        for(j=[-15:10:15]) {\n            translate([i, j, 0])\n            if(i*i + j*j < 400) {\n                scale([1, 1, 0.3])\n                sphere(2);\n            }\n        }\n    }\n}\n\n// Crystal growths\nmodule crystals() {\n    color(\"MediumPurple\")\n    for(i=[1:5]) {\n        angle = i*72;\n        radius = 20;\n        x = cos(angle)*radius;\n        y = sin(angle)*radius;\n        \n        translate([x/2, y/2, 5])\n        rotate([0, 0, angle])\n        scale([0.5, 0.5, 2])\n        cylinder(5, 2, 0.5);\n    }\n}\n\n// Ground base\nmodule base() {\n    color(\"DarkGoldenrod\")\n    translate([0, 0, -15])\n    scale([1.5, 1.5, 0.3])\n    cylinder(30, 30, 35);\n}\n\n// Assemble the geowyrm\nunion() {\n    base();\n    body();\n    head();\n    wings();\n    legs();\n    scales();\n    crystals();\n}\n\n// Position for printing\ntranslate([0, 0, 15]);",
    "renders": true
  },
  {
    "mythical_creature": "stonecoil",
    "openscad_code": "// Stonecoil - a mythical serpent made of living stone with crystal core\n// Realistic style, medium complexity\n// 3D printable, 80mm length\n\n// Main parameters\nbody_length = 80;\nbody_segments = 12;\nsegment_diameter = 12;\ncrystal_size = 6;\n\n// Stone color\nstone_color = [0.5, 0.45, 0.4];\n\n// Create one segment of the serpent body\nmodule body_segment(diameter, length, twist) {\n    union() {\n        // Main stone segment\n        difference() {\n            cylinder(h = length, d = diameter, $fn = 8);\n            // Carve runes into the stone\n            for(i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([diameter/2 - 1, 0, length/2])\n                        cube([2, 1, 1], center = true);\n            }\n        }\n        \n        // Crystal core visible through cracks\n        color([0.7, 0.6, 0.9])\n        translate([0, 0, length/2])\n            rotate([0, 0, twist])\n                sphere(d = crystal_size * 0.6, $fn = 6);\n    }\n}\n\n// Create stone scales around the segment\nmodule scales(diameter, height) {\n    for(i = [0:7]) {\n        angle = i * 45;\n        color(stone_color)\n        rotate([0, 0, angle])\n            translate([diameter/2 * 0.8, 0, height/2])\n                scale([0.3, 0.4, 0.2])\n                    sphere(d = diameter/3, $fn = 5);\n    }\n}\n\n// Create the head with horns and eyes\nmodule head() {\n    union() {\n        // Main head\n        color(stone_color)\n        scale([1.2, 1, 1])\n            sphere(d = segment_diameter * 1.3, $fn = 8);\n        \n        // Horns\n        for(side = [-1, 1]) {\n            color([0.4, 0.35, 0.3])\n            translate([side * segment_diameter/2, 0, segment_diameter/2])\n                rotate([0, side * 20, 0])\n                    cylinder(h = segment_diameter/2, d1 = segment_diameter/3, d2 = segment_diameter/6, $fn = 6);\n        }\n        \n        // Crystal eyes\n        for(side = [-1, 1]) {\n            color([0.8, 0.7, 1])\n            translate([side * segment_diameter/3, segment_diameter/2 * 0.7, 0])\n                sphere(d = segment_diameter/8, $fn = 6);\n        }\n        \n        // Fangs\n        color([0.6, 0.6, 0.6])\n        translate([0, segment_diameter/2 * 0.8, -segment_diameter/3])\n            rotate([90, 0, 0])\n                cylinder(h = segment_diameter/4, d1 = segment_diameter/10, d2 = segment_diameter/20, $fn = 4);\n    }\n}\n\n// Create the full stonecoil\nmodule stonecoil() {\n    // Head\n    translate([0, 0, body_length/2 + segment_diameter/2])\n        head();\n    \n    // Body segments\n    for(i = [1:body_segments]) {\n        segment_height = body_length / body_segments;\n        segment_twist = i * 15;\n        \n        // Position each segment in a coiling pattern\n        angle = i * 30;\n        radius = body_length/4 * (1 - i/body_segments);\n        \n        translate([\n            sin(angle) * radius,\n            cos(angle) * radius,\n            body_length/2 - i * segment_height\n        ]) {\n            rotate([0, 0, angle + 90])\n                body_segment(segment_diameter * (1 - i/body_segments * 0.3), segment_height, segment_twist);\n            \n            // Add scales to each segment except last few\n            if(i < body_segments - 2)\n                scales(segment_diameter * (1 - i/body_segments * 0.3), segment_height);\n        }\n    }\n    \n    // Tail tip with crystal\n    translate([0, 0, -body_length/2 - segment_diameter/4])\n        color([0.6, 0.5, 0.45])\n        sphere(d = segment_diameter/2, $fn = 8);\n}\n\n// Render the creature\nstonecoil();",
    "renders": true
  },
  {
    "mythical_creature": "rockdrake",
    "openscad_code": "// Rock Drake OpenSCAD Model\n// Medium complexity realistic style\n// Overall size: ~80mm\n\nscale(0.8) {\n    // Main Body\n    color(\"darkslategray\") {\n        union() {\n            // Torso\n            translate([0, 0, 15]) {\n                scale([1.5, 1, 0.8]) sphere(12, $fn=32);\n            }\n            \n            // Chest\n            translate([0, 12, 15]) {\n                rotate([0, -15, 0]) {\n                    scale([1.2, 0.8, 1]) sphere(10, $fn=32);\n                }\n            }\n            \n            // Abdomen\n            translate([0, -10, 10]) {\n                scale([1, 0.8, 0.6]) sphere(8, $fn=32);\n            }\n        }\n    }\n    \n    // Head\n    color(\"darkslategray\") {\n        translate([0, 20, 22]) {\n            rotate([0, -10, 0]) {\n                union() {\n                    // Main skull\n                    scale([0.8, 1.2, 0.7]) sphere(10, $fn=32);\n                    \n                    // Snout\n                    translate([0, 8, -2]) {\n                        scale([0.6, 1, 0.4]) sphere(6, $fn=32);\n                    }\n                    \n                    // Lower jaw\n                    translate([0, 8, -6]) {\n                        rotate([15, 0, 0]) {\n                            scale([0.5, 0.8, 0.3]) cylinder(h=10, r=5, $fn=32);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Horns - 4 total\n    color(\"dimgray\") {\n        module horn(angle, length) {\n            rotate([0, 0, angle]) {\n                translate([0, 20, 28]) {\n                    rotate([0, -30, 0]) {\n                        scale([0.3, 0.3, 1]) cylinder(h=length, r1=2, r2=0.5, $fn=16);\n                    }\n                }\n            }\n        }\n        \n        for(i = [-45, -15, 15, 45]) {\n            horn(i, 12);\n        }\n    }\n    \n    // Wings\n    color(\"slategray\") {\n        module wing(side) {\n            mirror([side, 0, 0]) {\n                translate([side * 15, -5, 20]) {\n                    rotate([0, 0, side * 30]) {\n                        linear_extrude(height=0.5) {\n                            polygon(points=[\n                                [0, 0],\n                                [side * 25, 10],\n                                [side * 30, 0],\n                                [side * 25, -15],\n                                [side * 15, -20],\n                                [side * 5, -10],\n                                [0, 0]\n                            ]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        wing(1);\n        wing(-1);\n    }\n    \n    // Legs\n    color(\"darkslategray\") {\n        module leg(side, front) {\n            translate([side * 8, front * 8, 8]) {\n                rotate([0, side * 10, 0]) {\n                    // Upper leg\n                    cylinder(h=12, r=4, $fn=16);\n                    \n                    // Lower leg\n                    translate([0, 0, -12]) {\n                        rotate([side * 20, 0, 0]) {\n                            cylinder(h=10, r=3, $fn=16);\n                            \n                            // Foot\n                            translate([0, 0, -10]) {\n                                rotate([0, side * 30, 0]) {\n                                    scale([2, 0.8, 0.5]) cube([6, 4, 2]);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Front legs\n        leg(1, 1);\n        leg(-1, 1);\n        \n        // Back legs\n        leg(1, -1);\n        leg(-1, -1);\n    }\n    \n    // Tail\n    color(\"darkslategray\") {\n        translate([0, -20, 12]) {\n            rotate([0, 0, 180]) {\n                for(i = [0:5]) {\n                    translate([0, i * 6, -i * 2]) {\n                        scale([1 - i * 0.1, 1, 1 - i * 0.05]) sphere(6 - i, $fn=32);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Tail spikes\n    color(\"dimgray\") {\n        module tail_spike(pos) {\n            translate([0, -20 - pos * 6, 12 - pos * 2]) {\n                rotate([0, 180, 0]) {\n                    scale([0.5, 0.5, 1]) cylinder(h=3 + pos * 0.5, r1=2, r2=0, $fn=8);\n                }\n            }\n        }\n        \n        for(i = [1:3]) {\n            tail_spike(i);\n        }\n    }\n    \n    // Back scales\n    color(\"dimgray\") {\n        module back_scale(pos) {\n            translate([0, 15 - pos * 4, 25]) {\n                rotate([0, 180, 0]) {\n                    scale([0.8, 0.8, 1]) cylinder(h=3, r1=3, r2=0, $fn=6);\n                }\n            }\n        }\n        \n        for(i = [0:7]) {\n            back_scale(i);\n        }\n    }\n    \n    // Eyes - glowing effect\n    color(\"crimson\") {\n        module eye(side) {\n            translate([side * 4, 24, 25]) {\n                sphere(2, $fn=16);\n            }\n        }\n        \n        eye(1);\n        eye(-1);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "granitewyrm",
    "openscad_code": "// Granitewyrm - a stone-skinned dragon of the deep earth\n// Overall length ~80 mm, wingspan ~60 mm\n\n$fn = 30;\n\nmodule granite_texture() {\n    // Simple bump texture for stone appearance\n    for(i=[0:5]) {\n        translate([rand(i*10), rand(i*20), rand(i*30)]) \n        sphere(d=rand(3)+1, $fn=8);\n    }\n}\n\nmodule body_segment(h, r, angle=0) {\n    // Create one segment of the serpentine body\n    color(\"dimgray\") \n    rotate([0, 0, angle])\n    difference() {\n        cylinder(h=h, r1=r, r2=r*0.9, center=true);\n        // Carve underside flat for printing\n        translate([0, 0, -h/2-1])\n        cube([r*2.2, r*2.2, h+2], center=true);\n    }\n}\n\nmodule wing(web_thick=1) {\n    color(\"darkslategray\")\n    union() {\n        // Main wing membrane\n        translate([-15, 0, 0])\n        scale([2, 1, 0.1])\n        sphere(d=30);\n        \n        // Wing bones\n        for(i=[0:30:120]) {\n            rotate([0, 0, i])\n            translate([5, 0, 0])\n            cylinder(h=25, r=1.5, center=true);\n        }\n    }\n}\n\nmodule head() {\n    color(\"gray30\")\n    union() {\n        // Main head\n        scale([1.2, 1, 1])\n        sphere(d=18);\n        \n        // Snout\n        translate([10, 0, 0])\n        scale([1.5, 0.8, 0.8])\n        sphere(d=10);\n        \n        // Horns - granite crystal growths\n        for(i=[-45:45:90]) {\n            rotate([0, 0, i])\n            translate([0, 9, 7])\n            rotate([30, 0, 0])\n            cylinder(h=12, r1=3, r2=0.5);\n        }\n        \n        // Eyes - glowing gems\n        color(\"darkorange\")\n        for(x=[-5, 5]) {\n            translate([x, 7, 2])\n            sphere(d=3);\n        }\n        \n        // Jaw\n        color(\"gray35\")\n        translate([5, 0, -6])\n        scale([1.2, 0.8, 0.4])\n        sphere(d=12);\n    }\n}\n\n// Assembly\nunion() {\n    // Head\n    translate([0, 0, 10])\n    head();\n    \n    // Neck segments\n    for(i=[1:5]) {\n        translate([0, 0, 10 - i*6])\n        rotate([0, 15*i, 0])\n        body_segment(5, 8 - i, i*10);\n    }\n    \n    // Main body coils\n    for(i=[0:10]) {\n        a = i*35;\n        r = 25 - i*1.5;\n        translate([r*cos(a), r*sin(a), -i*4 - 5])\n        rotate([0, 0, a + 90])\n        body_segment(6, 7 - i*0.3);\n    }\n    \n    // Tail\n    for(i=[11:20]) {\n        a = 350 + (i-10)*20;\n        r = max(10 - (i-10), 3);\n        translate([r*cos(a), r*sin(a), -i*4 - 5])\n        rotate([0, 0, a + 90])\n        body_segment(5, 4 - (i-11)*0.2);\n    }\n    \n    // Wings - positioned for printing support\n    translate([-5, 0, 0])\n    rotate([0, 90, 0])\n    wing();\n    \n    translate([-5, 0, 0])\n    rotate([0, 90, 180])\n    wing();\n    \n    // Stone spike dorsal ridge\n    color(\"gray40\")\n    for(i=[0:12]) {\n        a = i*30;\n        r = 20 - i*1.2;\n        translate([r*cos(a), r*sin(a), -i*4 + 5])\n        rotate([0, 0, a + 90])\n        translate([0, 0, 4])\n        cylinder(h=6, r1=2, r2=0.5);\n    }\n    \n    // Magical runes along body\n    color(\"gold\")\n    for(i=[0:8]) {\n        a = i*45 + 22.5;\n        r = 18 - i*1.5;\n        translate([r*cos(a), r*sin(a), -i*4 - 2])\n        rotate([0, 0, a + 90])\n        scale([0.3, 1, 0.1])\n        sphere(d=4);\n    }\n}\n\n// Base platform for stability\ncolor(\"gray20\")\ntranslate([0, 0, -45])\ncube([60, 40, 5], center=true);",
    "renders": true
  },
  {
    "mythical_creature": "marbleserpent",
    "openscad_code": "// Marbleserpent - A mythical crystalline serpent with marble-like scales and ethereal features\n// Designed for 3D printing with no overhangs exceeding 45 degrees\n\n// Overall dimensions: 80mm length, 30mm height, 25mm width\n\nmodule marble_texture(radius) {\n    // Create marble-like texture with small spheres\n    for(i = [0:15]) {\n        rotate([rand(360), rand(360), rand(360)])\n        translate([rand(radius*0.8)-radius*0.4, rand(radius*0.8)-radius*0.4, rand(radius*0.8)-radius*0.4])\n        sphere(r=rand(0.3)+0.2, $fn=8);\n    }\n}\n\nmodule serpent_head() {\n    // Main head structure - elongated with slight taper\n    color(\"LightSteelBlue\")\n    union() {\n        // Base head shape\n        scale([1.3, 1, 1])\n        sphere(r=6, $fn=32);\n        \n        // Snout extension\n        translate([6, 0, 0])\n        scale([1.5, 0.7, 0.7])\n        sphere(r=4, $fn=32);\n        \n        // Crown ridge\n        translate([0, 0, 5])\n        scale([1.2, 0.3, 0.5])\n        sphere(r=3, $fn=16);\n        \n        // Eyes - crystalline orbs\n        color(\"DeepSkyBlue\")\n        translate([3, -3.5, 2])\n        sphere(r=1.2, $fn=16);\n        translate([3, 3.5, 2])\n        sphere(r=1.2, $fn=16);\n        \n        // Horn-like protrusions\n        color(\"Azure\")\n        translate([-2, -2, 4])\n        rotate([15, 0, -30])\n        cylinder(h=5, r1=1, r2=0.5, $fn=8);\n        translate([-2, 2, 4])\n        rotate([15, 0, 30])\n        cylinder(h=5, r1=1, r2=0.5, $fn=8);\n    }\n}\n\nmodule serpent_body_segment(index) {\n    // Individual body segment with scales\n    scale_factor = 1 - (index * 0.03);\n    twist = index * 5;\n    \n    color(\"PowderBlue\")\n    rotate([0, 0, twist])\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Main segment\n        cylinder(h=5, r1=4.5, r2=4, $fn=16);\n        \n        // Scales arranged in a spiral\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([3.8, 0, 2.5])\n            color(\"AliceBlue\")\n            scale([0.8, 0.4, 0.2])\n            sphere(r=1.5, $fn=6);\n        }\n        \n        // Underside belly plates\n        translate([0, 0, -4.5])\n        color(\"LightCyan\")\n        scale([0.9, 2.5, 0.3])\n        cube([10, 1, 1], center=true);\n    }\n}\n\nmodule serpent_wing(index) {\n    // Small ethereal wing-like fins\n    wing_size = 4 - (index * 0.2);\n    color(\"LightBlue\", 0.6)\n    translate([0, wing_size, 2])\n    rotate([0, -20, 0])\n    scale([1, wing_size/3, 0.1])\n    sphere(r=wing_size, $fn=16);\n}\n\nmodule serpent_tail() {\n    // Final tapering tail segment\n    color(\"LightSteelBlue\")\n    union() {\n        // Main tail\n        cylinder(h=8, r1=2, r2=0.5, $fn=16);\n        \n        // Tail fin\n        translate([0, 0, -1])\n        rotate([90, 0, 0])\n        color(\"Azure\", 0.7)\n        scale([1, 2, 0.2])\n        cylinder(h=4, r1=0.5, r2=0, $fn=3);\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([0, 0, 0])\n    serpent_head();\n    \n    // Body segments\n    for(i = [0:9]) {\n        translate([-8 - i*5, 0, -i*1.5])\n        serpent_body_segment(i);\n        translate([-8 - i*5, 0, -i*1.5 + 2])\n        serpent_wing(i);\n    }\n    \n    // Tail\n    translate([-58, 0, -15])\n    serpent_tail();\n    \n    // Magical aura particles\n    color(\"GhostWhite\", 0.4)\n    for(i = [0:20]) {\n        translate([rand(80)-40, rand(20)-10, rand(15)])\n        sphere(r=rand(0.5)+0.2, $fn=6);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "basaltsnake",
    "openscad_code": "// BasaltSnake - A mythical creature of volcanic rock and obsidian scales\n// Designed for 3D printing, 80mm length, 30mm height\n\n// Main color - dark volcanic basalt\ncolor([0.2, 0.2, 0.2]) union() {\n\n    // Head section\n    module head() {\n        translate([0, 0, 15]) {\n            // Main head shape\n            difference() {\n                sphere(d=12);\n                // Eye sockets\n                translate([4, 4, 2]) sphere(d=3);\n                translate([-4, 4, 2]) sphere(d=3);\n            }\n            \n            // Snout\n            translate([0, 6, 0]) scale([0.8, 1.2, 0.8]) sphere(d=8);\n            \n            // Horns - volcanic crystal formations\n            color([0.1, 0.1, 0.1]) {\n                translate([3, -2, 5]) rotate([0, 15, 45]) cylinder(h=8, d1=3, d2=1);\n                translate([-3, -2, 5]) rotate([0, 15, -45]) cylinder(h=8, d1=3, d2=1);\n            }\n            \n            // Eyes - glowing magma cores\n            color([1, 0.3, 0]) {\n                translate([4.5, 4.5, 2]) sphere(d=2);\n                translate([-4.5, 4.5, 2]) sphere(d=2);\n            }\n        }\n    }\n\n    // Body segments\n    module body_segment(pos, size) {\n        translate(pos) {\n            scale([size, size*0.8, size*0.6]) sphere(d=10);\n        }\n    }\n\n    // Create segmented body\n    for(i = [0:5]) {\n        body_segment([i*12 - 10, 0, 15 - i*2], 1 - i*0.12);\n    }\n\n    // Tail\n    module tail() {\n        translate([50, 0, 8]) {\n            rotate([0, 10, 0]) {\n                scale([1, 0.6, 0.4]) cylinder(h=25, d1=8, d2=2);\n            }\n        }\n    }\n\n    // Wings - obsidian membrane wings\n    module wing(side) {\n        mirror([side, 0, 0]) {\n            translate([20, 0, 20]) rotate([0, 0, -30]) {\n                color([0.15, 0.15, 0.15]) {\n                    // Wing bones\n                    for(i = [0:3]) {\n                        rotate([0, 0, i*25]) \n                        translate([i*5, 0, 0]) \n                        cylinder(h=20-i*3, d=1.5);\n                    }\n                    \n                    // Wing membrane\n                    hull() {\n                        translate([0, 0, 0]) sphere(d=1);\n                        translate([15, 0, -8]) sphere(d=1);\n                        translate([10, 0, -12]) sphere(d=1);\n                        translate([5, 0, -10]) sphere(d=1);\n                    }\n                }\n            }\n        }\n    }\n\n    // Scales pattern\n    module scales(base_x, base_y, base_z) {\n        color([0.25, 0.25, 0.25]) {\n            for(i = [0:3]) {\n                for(j = [0:2]) {\n                    translate([\n                        base_x + i*3 - 1.5, \n                        base_y + j*2.5 - 2.5, \n                        base_z\n                    ]) \n                    scale([1, 0.7, 0.3]) sphere(d=2);\n                }\n            }\n        }\n    }\n\n    // Assemble the creature\n    head();\n    tail();\n    wing(1);\n    wing(-1);\n    \n    // Add scales along the body\n    for(i = [0:4]) {\n        scales(i*12 - 15, 0, 12 - i*1.5);\n    }\n    \n    // Leg stubs - short volcanic protrusions\n    color([0.18, 0.18, 0.18]) {\n        translate([10, 5, 8]) rotate([0, 90, 0]) cylinder(h=6, d=4);\n        translate([10, -5, 8]) rotate([0, 90, 0]) cylinder(h=6, d=4);\n        translate([30, 4, 6]) rotate([0, 90, 0]) cylinder(h=5, d=3);\n        translate([30, -4, 6]) rotate([0, 90, 0]) cylinder(h=5, d=3);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "slatewyrm",
    "openscad_code": "// Slatewyrm - a serpentine stone dragon with slate-gray scales\n// Overall length ~90 mm, wingspan ~70 mm, designed for FDM printing\n\n$fn = 50;\nscale_factor = 1; // overall scale\n\n// Colors\nslate = [0.35, 0.35, 0.4];\nstone = [0.5, 0.5, 0.55];\ncrystal = [0.6, 0.6, 0.9];\nember = [0.9, 0.3, 0.1];\n\nmodule slatewyrm() {\n    // Main body segments\n    color(slate)\n    union() {\n        // Head\n        translate([0, 0, 0])\n        rotate([0, 0, 0])\n        scale([1.2, 1, 1])\n        sphere(8);\n\n        // Snout\n        translate([10, 0, 0])\n        rotate([0, 0, 0])\n        scale([1.5, 0.8, 0.8])\n        cylinder(h = 12, r1 = 6, r2 = 2);\n\n        // Neck\n        translate([-5, 0, 0])\n        rotate([0, 0, 0])\n        scale([0.8, 1, 1])\n        cylinder(h = 15, r = 6);\n\n        // Body segments\n        for(i = [0:4]) {\n            translate([-20 - i*12, 0, -i*2])\n            rotate([0, 5*i, 0])\n            scale([1 - i*0.1, 1, 1 - i*0.1])\n            cylinder(h = 10, r = 8 - i);\n        }\n\n        // Tail segments\n        for(i = [0:6]) {\n            translate([-70 - i*8, 0, -8 - i*2])\n            rotate([0, 10*i, 0])\n            scale([0.6 - i*0.08, 0.6, 0.6])\n            sphere(5 - i*0.5);\n        }\n    }\n\n    // Wings\n    color(stone)\n    union() {\n        // Left wing\n        translate([-30, 0, 5])\n        rotate([0, 0, 30])\n        rotate([0, -20, 0])\n        wing();\n\n        // Right wing\n        translate([-30, 0, 5])\n        rotate([0, 0, -30])\n        mirror([0, 1, 0])\n        rotate([0, -20, 0])\n        wing();\n    }\n\n    // Horns\n    color(stone)\n    union() {\n        // Left horn\n        translate([5, 5, 5])\n        rotate([30, 0, 30])\n        cylinder(h = 15, r1 = 2, r2 = 1);\n\n        // Right horn\n        translate([5, -5, 5])\n        rotate([30, 0, -30])\n        cylinder(h = 15, r1 = 2, r2 = 1);\n    }\n\n    // Crystal spine\n    color(crystal)\n    for(i = [0:6]) {\n        translate([-10 - i*10, 0, 8 - abs(i-3)])\n        rotate([0, 0, 0])\n        scale([0.5, 0.5, 1])\n        sphere(2 + abs(3-i)*0.3);\n    }\n\n    // Eyes\n    color(ember)\n    union() {\n        translate([12, 3, 3])\n        sphere(1.5);\n        translate([12, -3, 3])\n        sphere(1.5);\n    }\n\n    // Legs\n    color(slate)\n    union() {\n        // Front left leg\n        translate([-10, 6, -5])\n        rotate([0, 20, 0])\n        leg();\n\n        // Front right leg\n        translate([-10, -6, -5])\n        rotate([0, 20, 0])\n        mirror([0, 1, 0])\n        leg();\n\n        // Rear left leg\n        translate([-45, 6, -5])\n        rotate([0, -20, 0])\n        leg();\n\n        // Rear right leg\n        translate([-45, -6, -5])\n        rotate([0, -20, 0])\n        mirror([0, 1, 0])\n        leg();\n    }\n}\n\nmodule wing() {\n    // Wing membrane with support structure\n    difference() {\n        union() {\n            // Main wing shape\n            translate([0, 0, 0])\n            scale([1, 2, 0.5])\n            sphere(15);\n\n            // Wing struts\n            for(i = [0:3]) {\n                rotate([0, 0, i*20 - 30])\n                translate([5, 0, 0])\n                scale([0.5, 1, 0.2])\n                cylinder(h = 25, r = 1.5);\n            }\n        }\n\n        // Cut wing holes\n        for(i = [0:2]) {\n            translate([5 + i*5, -5 - i*3, 0])\n            rotate([0, 0, i*15])\n            scale([1, 0.5, 0.3])\n            sphere(3);\n        }\n    }\n}\n\nmodule leg() {\n    // Dragon leg with claws\n    union() {\n        // Upper leg\n        cylinder(h = 10, r = 2);\n        \n        // Lower leg\n        translate([0, 0, -12])\n        rotate([0, 20, 0])\n        cylinder(h = 12, r = 1.5);\n        \n        // Foot\n        translate([3, 0, -25])\n        rotate([0, 90, 0])\n        scale([1.5, 1, 0.5])\n        sphere(3);\n        \n        // Claws\n        for(i = [-1, 0, 1]) {\n            translate([6, i*1.5, -25])\n            rotate([0, 0, 0])\n            cylinder(h = 3, r1 = 0.5, r2 = 0.2);\n        }\n    }\n}\n\n// Scale the entire model\nscale([scale_factor, scale_factor, scale_factor])\nslatewyrm();",
    "renders": true
  },
  {
    "mythical_creature": "sandhydra",
    "openscad_code": "// Sandhydra - A mythical desert hydra with crystalline sand armor\n// Size: ~80mm long, designed for 3D printing\n\n$fn = 32;\n\n// Main colors\nsand_color = \"#D4A574\";\ncrystal_color = \"#E6D4A3\";\neye_color = \"#8B4513\";\ninner_color = \"#CD853F\";\n\n// Main body\nmodule body() {\n    color(sand_color)\n    union() {\n        // Central torso\n        translate([0, 0, 10])\n            scale([1, 0.6, 0.8])\n            sphere(15);\n        \n        // Neck bases\n        for(i = [-1, 0, 1]) {\n            translate([i * 12, 0, 22])\n                rotate([0, 15 * i, 0])\n                cylinder(h = 8, r1 = 6, r2 = 4);\n        }\n    }\n}\n\n// Neck and head\nmodule neck_and_head(index) {\n    translate([index * 12, 0, 30]) {\n        rotate([0, 15 * index, 0]) {\n            // Neck segments\n            color(sand_color)\n            for(i = [0:3]) {\n                translate([0, 0, i * 6])\n                    scale([0.9 - i * 0.1, 0.9 - i * 0.1, 1])\n                    cylinder(h = 5, r1 = 4 - i * 0.5, r2 = 3.5 - i * 0.5);\n            }\n            \n            // Head\n            translate([0, 0, 24])\n                union() {\n                    // Snout\n                    color(sand_color)\n                    union() {\n                        translate([0, 0, 0])\n                            scale([1.2, 0.8, 1])\n                            sphere(5);\n                        translate([4, 0, -1])\n                            scale([1.5, 0.6, 0.6])\n                            sphere(3);\n                    }\n                    \n                    // Eyes\n                    color(eye_color)\n                    for(side = [-1, 1]) {\n                        translate([2, side * 2.5, 1])\n                            sphere(1.2);\n                    }\n                    \n                    // Crystalline horns\n                    color(crystal_color)\n                    for(side = [-1, 1]) {\n                        translate([-1, side * 3, 2])\n                            rotate([0, 0, side * 20])\n                            cylinder(h = 6, r1 = 1.5, r2 = 0.5);\n                    }\n                }\n        }\n    }\n}\n\n// Tail segments\nmodule tail() {\n    color(sand_color)\n    union() {\n        // Tail base\n        translate([0, 0, 5])\n            rotate([0, 180, 0])\n            cylinder(h = 10, r1 = 8, r2 = 6);\n        \n        // Tail segments\n        for(i = [0:4]) {\n            translate([0, 0, -i * 8 - 10])\n                rotate([0, 180 + i * 10, 0])\n                scale([1 - i * 0.1, 1 - i * 0.1, 1])\n                cylinder(h = 8, r1 = 6 - i, r2 = 5 - i);\n        }\n        \n        // Tail tip crystal\n        color(crystal_color)\n        translate([0, 0, -50])\n            scale([1, 1, 2])\n            sphere(3);\n    }\n}\n\n// Legs\nmodule legs() {\n    color(sand_color)\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([side * 10, 0, 5])\n            union() {\n                // Upper leg\n                translate([0, 0, 0])\n                    rotate([0, side * 15, 0])\n                    cylinder(h = 12, r1 = 3, r2 = 2.5);\n                \n                // Lower leg\n                translate([0, 0, -12])\n                    rotate([0, side * 25, 0])\n                    cylinder(h = 10, r1 = 2.5, r2 = 2);\n                \n                // Foot\n                translate([0, 0, -22])\n                    scale([1.5, 1, 0.5])\n                    sphere(3);\n            }\n        \n        // Rear legs\n        translate([side * 8, 0, -5])\n            union() {\n                // Upper leg\n                translate([0, 0, 0])\n                    rotate([0, side * 20, 0])\n                    cylinder(h = 10, r1 = 3.5, r2 = 3);\n                \n                // Lower leg\n                translate([0, 0, -10])\n                    rotate([0, side * 30, 0])\n                    cylinder(h = 8, r1 = 3, r2 = 2.5);\n                \n                // Foot\n                translate([0, 0, -18])\n                    scale([1.5, 1, 0.5])\n                    sphere(3.5);\n            }\n    }\n}\n\n// Crystalline armor plates\nmodule armor() {\n    color(crystal_color)\n    difference() {\n        // Large back plates\n        for(i = [-2:2]) {\n            translate([i * 6, 0, 25])\n                scale([1, 0.3, 0.5])\n                sphere(4);\n        }\n        \n        // Inner cutouts\n        for(i = [-2:2]) {\n            translate([i * 6, 0, 25])\n                scale([0.5, 0.2, 0.3])\n                sphere(3);\n        }\n    }\n}\n\n// Scale details\nmodule scales() {\n    color(inner_color)\n    for(i = [-3:3]) {\n        for(j = [0:2]) {\n            translate([i * 4 - j * 2, 0, 15 + j * 3])\n                scale([0.8, 0.8, 0.2])\n                sphere(2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    \n    // Three necks with heads\n    for(i = [-1, 0, 1]) {\n        neck_and_head(i);\n    }\n    \n    tail();\n    legs();\n    armor();\n    scales();\n}",
    "renders": true
  },
  {
    "mythical_creature": "duneback",
    "openscad_code": "// Duneback - desert-dwelling mythical creature with crystalline back and wing-like fins\n// Overall length ~80 mm, height ~35 mm, designed for FDM printing\n\n$fn = 32;\n\nmodule crystalline_spike(h = 8, r = 3) {\n    // Tapered hexagonal crystal\n    cylinder(h1 = 0.1, r1 = r, h2 = h, r2 = 0.5);\n}\n\nmodule dorsal_fin() {\n    // Wing-like dorsal fin sweeping backward\n    difference() {\n        union() {\n            translate([0, 0, 2]) rotate([0, 25, 0]) scale([1, 0.3, 1])\n                sphere(d = 12);\n            translate([0, 0, 6]) rotate([0, 45, 0]) scale([1, 0.2, 0.8])\n                sphere(d = 10);\n        }\n        translate([0, 0, -2]) cube([20, 20, 20], center = true);\n    }\n}\n\nmodule stinger() {\n    // Curved poisonous tail stinger\n    rotate([0, 0, 20])\n        hull() {\n            translate([0, 0, 0]) sphere(d = 3);\n            translate([0, 0, 12]) sphere(d = 1);\n            translate([1, 0, 14]) sphere(d = 0.5);\n        }\n}\n\nmodule leg() {\n    // Thick segmented leg with hoof\n    translate([0, 0, 5])\n        union() {\n            color(\"sandybrown\")\n                cylinder(h = 8, d1 = 5, d2 = 4);\n            color(\"saddlebrown\")\n                translate([0, 0, 8])\n                    cylinder(h = 2, d = 4.5);\n        }\n}\n\nmodule body() {\n    // Main segmented body\n    color(\"tan\")\n    difference() {\n        union() {\n            // Abdomen\n            translate([0, 0, 8]) scale([1.2, 0.8, 1]) sphere(d = 20);\n            // Thorax\n            translate([0, 0, 14]) scale([1, 0.7, 0.8]) sphere(d = 16);\n            // Head\n            translate([0, 0, 20]) scale([0.8, 0.6, 0.7]) sphere(d = 12);\n        }\n        // Undercuts removed for printability\n        translate([0, 0, -5]) cube([30, 30, 10], center = true);\n    }\n}\n\nmodule head_features() {\n    // Eyes and mandibles\n    color(\"black\")\n    for(y = [-3, 3]) {\n        translate([4, y, 20]) sphere(d = 2);\n    }\n    color(\"saddlebrown\")\n    for(side = [-1, 1]) {\n        translate([6, side * 3, 17])\n            rotate([0, 0, side * 30])\n                cylinder(h = 6, d1 = 3, d2 = 1);\n    }\n}\n\nmodule crystal_ridge() {\n    // Row of crystalline spikes along back\n    for(i = [-10:5:10]) {\n        translate([i, 0, 22 + abs(i)/2])\n            rotate([0, 10 * sign(i), 0])\n                crystalline_spike(h = 6 + abs(i)/3, r = 2);\n    }\n}\n\nmodule side_fins() {\n    // Small wing-like fins on sides\n    for(side = [-1, 1]) {\n        color(\"goldenrod\")\n        translate([0, side * 10, 15])\n            rotate([0, 0, side * 10])\n                scale([1, 0.2, 0.5])\n                    sphere(d = 12);\n    }\n}\n\nmodule tail() {\n    // Segmented tail with stinger\n    color(\"tan\")\n    union() {\n        translate([0, 0, 5])\n            rotate([0, 0, 180])\n                cylinder(h = 25, d1 = 8, d2 = 3);\n        translate([0, 0, -15])\n            color(\"darkgoldenrod\")\n                stinger();\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 10]) {\n    // Body\n    body();\n    \n    // Head features\n    head_features();\n    \n    // Legs\n    for(i = [-1, 1]) {\n        translate([5, i * 6, 0])\n            rotate([0, 0, i * 20])\n                leg();\n        translate([-5, i * 6, 0])\n            rotate([0, 0, i * -20])\n                leg();\n    }\n    \n    // Tail\n    translate([-15, 0, 10])\n        tail();\n    \n    // Dorsal features\n    crystal_ridge();\n    translate([0, 0, 15])\n        color(\"goldenrod\") dorsal_fin();\n    \n    // Side fins\n    side_fins();\n}",
    "renders": true
  },
  {
    "mythical_creature": "desertwyrm",
    "openscad_code": "// Desertwyrm - a burrowing serpentine dragon of arid wastes\n// Overall length ≈ 85 mm\n\n$fn = 32;                       // smooth curves for 3D printing\nscale_factor = 1;               // easy resizing\nwall_thickness = 1.2;           // printable walls\n\nmodule body_segment(r, h, taper = 1) {\n    // one ridged ring of the wyrm's body\n    difference() {\n        cylinder(h = h, r1 = r, r2 = r * taper);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.2, r1 = r - wall_thickness, r2 = (r - wall_thickness) * taper);\n    }\n}\n\nmodule dorsal_spike(len, ang) {\n    // single curved back-spike\n    rotate([ang, 0, 0])\n        scale([0.6, 0.6, 1])\n            cylinder(h = len, r1 = 1.5, r2 = 0);\n}\n\nmodule scale_pattern(base_r) {\n    // raised hexagonal “scales” on the hide\n    for(a = [0:60:359])\n        rotate([0, 0, a])\n            translate([base_r * 0.9, 0, 0])\n                sphere(r = 0.8);\n}\n\nmodule head() {\n    // snout, jaws, horns\n    union() {\n        // main head\n        color(\"BurlyWood\")\n        translate([0, 0, -5])\n            scale([1.5, 1, 1])\n                sphere(r = 8);\n        \n        // upper jaw\n        color(\"SandyBrown\")\n        translate([0, 0, -7])\n            rotate([30, 0, 0])\n                cube([14, 6, 4], center = true);\n        \n        // lower jaw\n        color(\"SandyBrown\")\n        translate([0, 0, -10])\n            rotate([-20, 0, 0])\n                cube([12, 5, 3], center = true);\n        \n        // horns\n        color(\"SaddleBrown\")\n        translate([6, 0, 2])\n            rotate([0, 30, 0])\n                cylinder(h = 12, r1 = 2, r2 = 0);\n        translate([-6, 0, 2])\n            rotate([0, -30, 0])\n                cylinder(h = 12, r1 = 2, r2 = 0);\n        \n        // eyes\n        color(\"DarkRed\")\n        translate([4, -5, -2])\n            sphere(r = 1.5);\n        translate([-4, -5, -2])\n            sphere(r = 1.5);\n    }\n}\n\nmodule tail_spade() {\n    // venomous tail blade\n    color(\"DarkGoldenrod\")\n    translate([0, 0, 5])\n        scale([1, 0.4, 1])\n            cylinder(h = 12, r1 = 6, r2 = 0);\n}\n\nmodule desertwyrm() {\n    scale(scale_factor)\n    union() {\n        // head\n        translate([0, 0, 0])\n            head();\n        \n        // neck segments\n        neck_start = 9;\n        for(i = [0:3]) {\n            translate([0, 0, neck_start + i * 3])\n                color(\"Tan\")\n                body_segment(8 - i * 0.7, 3, 0.9);\n        }\n        \n        // main body rings\n        body_start = neck_start + 4 * 3;\n        body_len = 15;\n        for(i = [0:body_len - 1]) {\n            translate([0, 0, body_start + i * 3])\n                color(\"Tan\")\n                union() {\n                    body_segment(5.5 - i * 0.15, 3, 0.95);\n                    // dorsal spikes every 3rd segment\n                    if(i % 3 == 0)\n                        for(ang = [-30, 0, 30])\n                            translate([0, 0, 1])\n                                dorsal_spike(4, ang);\n                    // raised scales\n                    translate([0, 0, 1.5])\n                        scale_pattern(5.5 - i * 0.15);\n                }\n        }\n        \n        // tail segments tapering\n        tail_start = body_start + body_len * 3;\n        for(i = [0:7]) {\n            translate([0, 0, tail_start + i * 2.5])\n                color(\"Tan\")\n                body_segment(4 - i * 0.4, 2.5, 0.8);\n        }\n        \n        // tail spade\n        translate([0, 0, tail_start + 7 * 2.5 + 2])\n            tail_spade();\n    }\n}\n\n// render the creature\ndesertwyrm();",
    "renders": true
  },
  {
    "mythical_creature": "oasiswyrm",
    "openscad_code": "// Oasiswyrm – a serpentine desert dragon that stores water in its hump-like fins\n// Model height ≈ 70 mm, printable upright with no large overhangs\n// Colors: teal body, translucent aqua fins, gold accents\n\n$fn = 32;                // Smooth curves\nbody_color   = [0,0.6,0.75];\nfin_color    = [0.2,0.8,0.9,0.7];\nhorn_color   = [0.9,0.75,0.2];\n\nmodule oasiswyrm() {\n    // Main body (coiled snake with slight hump)\n    union() {\n        translate([0,0,25]) rotate([0,90,0])\n            scale([1,1,1.2])\n                cylinder(h=60, r1=8, r2=4);            // neck & head\n\n        translate([0,0,10])\n            rotate([0,90,0])\n                cylinder(h=40, r1=12, r2=8);            // torso\n\n        // Tail coils\n        for(i=[0:45:315]) {\n            rotate([0,0,i])\n                translate([22*cos(i/2), 22*sin(i/2), 0])\n                    scale([1,1,0.9])\n                        cylinder(h=20, r1=10-i/40, r2=8-i/50);\n        }\n    }\n\n    // Head details\n    translate([0,0,55]) rotate([0,90,0]) {\n        // Snout\n        scale([0.7,0.7,1])\n            sphere(6);\n\n        // Horns (water reserve tubes)\n        color(horn_color)\n        for(side=[-1,1]) {\n            translate([side*5, 0, 4]) rotate([0,side*20,0])\n                cylinder(h=12, r=1.5, r2=0.5);\n            translate([side*5, 0, 4]) rotate([0,side*(-20),0])\n                cylinder(h=12, r=1.5, r2=0.5);\n        }\n\n        // Eyes\n        color([0.1,0.1,0.1])\n        for(side=[-1,1])\n            translate([side*3, 4.5, 0])\n                sphere(1.5);\n    }\n\n    // Dorsal fins (hump-like water sacs)\n    color(fin_color)\n    for(z=[20:25:55]) {\n        translate([0,0,z]) rotate([0,90,0])\n            scale([1.2,0.3,1])\n                difference() {\n                    sphere(7);\n                    translate([0,0,-7]) cube(14, center=true);\n                }\n    }\n\n    // Side gill-fins\n    for(side=[-1,1]) {\n        color(fin_color)\n        translate([side*10, 0, 35]) rotate([0,0,side*15])\n            scale([1,0.2,0.8])\n                cylinder(h=20, r1=5, r2=2);\n\n        // Small frill ridges\n        for(i=[0:3:12]) {\n            translate([side*(10+side*i/2), 0, 35-i])\n                rotate([0,0,side*15])\n                    scale([0.3,0.1,0.5])\n                        cylinder(h=3, r=2);\n        }\n    }\n\n    // Under-body scales (simple bumps, printable)\n    for(a=[15:20:75])\n        rotate([0,0,a])\n            translate([0, -10, 0])\n                scale([0.5,0.5,0.2])\n                    sphere(3);\n}\n\n// Build the creature\ncolor(body_color) oasiswyrm();",
    "renders": true
  },
  {
    "mythical_creature": "miragecoil",
    "openscad_code": "// Miragecoil - A mythical serpentine creature that shimmers with desert mirage energy\n// Features: Spiral body, translucent wings, horn-like crests, and ethereal tail\n\n// Main color scheme - desert mirage tones\n$fa = 8;\n$fs = 0.4;\n\nmodule miragecoil_body() {\n    color(\"gold\") {\n        // Create spiral body using rotated cylinders\n        for (i = [0:15:360]) {\n            rotate([0, 0, i * 2]) \n            translate([cos(i) * 8, sin(i) * 8, i * 0.8])\n            rotate([90, 0, 0])\n            cylinder(h = 12, r1 = 6 - (i/60), r2 = 5 - (i/70), $fn = 8);\n        }\n    }\n}\n\nmodule head() {\n    color(\"goldenrod\") {\n        // Main head sphere\n        translate([0, 0, 30])\n        sphere(r = 8, $fn = 16);\n        \n        // Snout\n        translate([0, 7, 30])\n        rotate([90, 0, 0])\n        cylinder(h = 10, r1 = 5, r2 = 3, $fn = 8);\n        \n        // Horns/crests\n        for (angle = [30, 150]) {\n            rotate([0, 0, angle])\n            translate([5, 0, 34])\n            rotate([0, -20, 0])\n            cylinder(h = 12, r1 = 2, r2 = 0.5, $fn = 6);\n        }\n        \n        // Eyes\n        color(\"darkorange\") {\n            translate([3, 5, 33])\n            sphere(r = 1.5);\n            translate([-3, 5, 33])\n            sphere(r = 1.5);\n        }\n    }\n}\n\nmodule wings() {\n    color(\"cornsilk\", 0.7) {\n        // Left wing\n        translate([0, -8, 25])\n        rotate([0, -20, -30])\n        scale([1, 0.2, 1])\n        sphere(r = 12, $fn = 8);\n        \n        // Wing membrane details\n        for (i = [0:2]) {\n            translate([i * 3 - 3, -8, 25 - i * 2])\n            rotate([0, -20 - i * 5, -30])\n            scale([0.8 - i * 0.2, 0.1, 0.8 - i * 0.2])\n            sphere(r = 10, $fn = 6);\n        }\n        \n        // Right wing (mirrored)\n        mirror([0, 1, 0]) {\n            translate([0, -8, 25])\n            rotate([0, -20, -30])\n            scale([1, 0.2, 1])\n            sphere(r = 12, $fn = 8);\n            \n            for (i = [0:2]) {\n                translate([i * 3 - 3, -8, 25 - i * 2])\n                rotate([0, -20 - i * 5, -30])\n                scale([0.8 - i * 0.2, 0.1, 0.8 - i * 0.2])\n                sphere(r = 10, $fn = 6);\n            }\n        }\n    }\n}\n\nmodule tail_segment(height, scale_factor) {\n    color(\"goldenrod\") {\n        cylinder(h = height, r1 = 4 * scale_factor, r2 = 3 * scale_factor, $fn = 8);\n    }\n}\n\nmodule tail() {\n    color(\"gold\") {\n        // Ethereal tail segments\n        for (i = [0:30]) {\n            translate([0, 0, -i * 2 - 20])\n            rotate([0, 0, i * 10])\n            scale([1 - i * 0.02, 1 - i * 0.02, 1])\n            tail_segment(2, 1 - i * 0.03);\n        }\n    }\n}\n\nmodule scales() {\n    color(\"darkgoldenrod\") {\n        // Scales along the body\n        for (i = [0:20]) {\n            angle = i * 18;\n            height = 15 + i * 0.8;\n            \n            rotate([0, 0, angle * 2])\n            translate([cos(angle) * 6, sin(angle) * 6, height])\n            rotate([90, 0, angle])\n            scale([0.5, 0.5, 0.5])\n            cylinder(h = 2, r1 = 1, r2 = 0, $fn = 6);\n        }\n    }\n}\n\n// Assemble the complete miragecoil\nunion() {\n    miragecoil_body();\n    head();\n    wings();\n    tail();\n    scales();\n}\n\n// Base for 3D printing stability\ncolor(\"goldenrod\") {\n    translate([0, 0, -30])\n    cylinder(h = 2, r = 15, $fn = 32);\n}",
    "renders": true
  },
  {
    "mythical_creature": "tundraserpent",
    "openscad_code": "// Tundraserpent - Arctic serpent with crystalline ice features\n// Designed for 3D printing at 80mm length\n\n$fn = 32;\n\n// Main colors\ncolor(\"DeepSkyBlue\") {\n    // Serpent body\n    module body_segment(size, rotation) {\n        translate([0, 0, size/2]) rotate([rotation, 0, 0]) \n            scale([1, 0.8, 0.6]) sphere(d = size);\n    }\n\n    // Create serpent body with 8 segments\n    union() {\n        for(i = [0:7]) {\n            translate([i*8 - 28, 0, sin(i*45)*3]) \n                body_segment(12 - i, i*5);\n        }\n    }\n\n    // Head\n    translate([32, 0, 8]) {\n        rotate([0, 0, -15]) {\n            // Main head shape\n            scale([1.2, 0.8, 0.7]) sphere(d = 14);\n            \n            // Snout\n            translate([7, 0, -2]) \n                scale([1.5, 0.6, 0.4]) sphere(d = 8);\n                \n            // Eyes\n            color(\"DarkSlateBlue\") {\n                translate([5, 4, 2]) sphere(d = 3);\n                translate([5, -4, 2]) sphere(d = 3);\n            }\n        }\n    }\n\n    // Dorsal ice spikes\n    color(\"LightCyan\") {\n        module ice_spike(height) {\n            cylinder(h = height, d1 = 2, d2 = 0.5);\n        }\n        \n        for(i = [0:5]) {\n            translate([i*10 - 25, 0, sin(i*30)*2 + 8]) \n                ice_spike(6 + i);\n        }\n    }\n\n    // Tail segments\n    color(\"DeepSkyBlue\") {\n        for(i = [0:4]) {\n            scale = 0.8 - i*0.15;\n            translate([-35 - i*7, 0, -i*2]) \n                scale([scale, scale, scale]) \n                    rotate([0, 0, -i*15]) \n                        sphere(d = 10 - i*2);\n        }\n    }\n\n    // Side fins for swimming\n    color(\"SteelBlue\") {\n        module fin(size) {\n            translate([0, 0, 0]) {\n                linear_extrude(height = 1) {\n                    polygon(points=[\n                        [0, 0], [size, size/2], [size*1.5, 0], [size, -size/2]\n                    ]);\n                }\n            }\n        }\n        \n        translate([10, 6, 0]) rotate([0, 90, 0]) fin(8);\n        translate([10, -6, 0]) rotate([0, -90, 0]) fin(8);\n        translate([-10, 6, -2]) rotate([0, 90, 0]) fin(6);\n        translate([-10, -6, -2]) rotate([0, -90, 0]) fin(6);\n    }\n\n    // Ice crystal formations on body\n    color(\"AliceBlue\") {\n        module ice_crystal() {\n            union() {\n                for(a = [0:120:360]) {\n                    rotate([0, 0, a]) \n                        scale([0.3, 1, 0.1]) \n                            cube([5, 2, 1]);\n                }\n            }\n        }\n        \n        for(i = [1:3]) {\n            translate([i*12 - 20, 0, 7]) rotate([0, 0, i*60]) ice_crystal();\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "arcticdrake",
    "openscad_code": "// ArcticDrake - Medium complexity mythical ice dragon\n// Uses realistic proportions and features for 3D printing\n\n// Colors\ncolor_ice = [0.8, 0.9, 1];\ncolor_ice_dark = [0.6, 0.8, 0.9];\ncolor_crystal = [0.9, 1, 1];\n\n// Main dimensions\nbody_length = 50;\nbody_height = 18;\nwing_span = 60;\n\nmodule arctic_drake() {\n    // Main body\n    union() {\n        // Torso\n        color(color_ice)\n        translate([0, 0, 10])\n        scale([1.2, 0.8, 1])\n        sphere(d = body_height);\n        \n        // Head\n        color(color_ice)\n        translate([body_length/2 - 8, 0, body_height])\n        scale([1.5, 0.8, 0.9])\n        sphere(d = 12);\n        \n        // Neck\n        color(color_ice_dark)\n        for(i = [1:5]) {\n            translate([body_length/2 - 15 + i*2, 0, 12 - i*0.5])\n            sphere(d = 8 - i*0.5);\n        }\n        \n        // Tail\n        color(color_ice_dark)\n        for(i = [1:8]) {\n            translate([-body_length/2 - i*2.5, 0, 10 - i*0.3])\n            sphere(d = 8 - i*0.7);\n        }\n        \n        // Legs\n        module leg(side) {\n            translate([body_length/4 - 5, side*6, 5])\n            union() {\n                // Upper leg\n                color(color_ice_dark)\n                rotate([90, 0, 0])\n                cylinder(h = 8, d1 = 6, d2 = 4);\n                \n                // Lower leg\n                translate([0, 0, -8])\n                rotate([90, 0, 0])\n                cylinder(h = 8, d1 = 4, d2 = 3);\n                \n                // Foot\n                translate([0, -2, -12])\n                color(color_ice)\n                cube([6, 4, 2]);\n            }\n        }\n        \n        leg(1);\n        leg(-1);\n        \n        // Wings\n        module wing(side) {\n            translate([0, side*8, 15])\n            rotate([0, side*20, 0])\n            union() {\n                // Main wing membrane\n                color(color_crystal)\n                linear_extrude(height = 0.5)\n                polygon(points=[\n                    [0, 0], [20, 5], [30, 15], [35, 25], [30, 30], [15, 25], [0, 20]\n                ]);\n                \n                // Wing bones\n                color(color_ice_dark)\n                for(i = [0:2]) {\n                    translate([i*12, 0, 0.3])\n                    rotate([0, 90, 0])\n                    cylinder(h = 30, d = 1);\n                }\n            }\n        }\n        \n        wing(1);\n        wing(-1);\n        \n        // Horns\n        module horn(angle) {\n            rotate([0, 0, angle])\n            translate([body_length/2 - 5, 0, body_height + 8])\n            rotate([30, 0, 0])\n            color(color_ice_dark)\n            cylinder(h = 8, d1 = 3, d2 = 1);\n        }\n        \n        horn(15);\n        horn(-15);\n        \n        // Crystal spikes along spine\n        for(i = [1:6]) {\n            translate([body_length/2 - 10 - i*5, 0, 15 + i*0.5])\n            color(color_crystal)\n            scale([0.5, 0.5, 1])\n            sphere(d = 4);\n        }\n        \n        // Eyes\n        module eye(side) {\n            translate([body_length/2 - 2, side*3, body_height + 2])\n            color([0.2, 0.4, 0.8])\n            sphere(d = 2);\n        }\n        \n        eye(3);\n        eye(-3);\n        \n        // Mouth detail\n        translate([body_length/2, 0, body_height - 2])\n        color(color_ice_dark)\n        cube([8, 0.5, 2]);\n    }\n}\n\n// Generate the drake\narctic_drake();",
    "renders": true
  },
  {
    "mythical_creature": "blizzardwyrm",
    "openscad_code": "// Blizzardwyrm - Ice dragon creature with crystalline features\n// Overall dimensions: ~80mm wingspan, 60mm length, 40mm height\n\n$fn = 32;\nwall = 2;\n\n// Main colors\ncolor_ice = [0.8, 0.9, 1.0];\ncolor_crystal = [0.7, 0.9, 1.0, 0.8];\ncolor_shadow = [0.4, 0.5, 0.6];\n\n// Main body structure\nmodule blizzardwyrm() {\n    // Central spine\n    union() {\n        // Head\n        color(color_ice)\n        translate([0, 30, 0])\n        scale([1.2, 1.4, 1.1])\n        sphere(r = 8);\n        \n        // Neck\n        color(color_ice)\n        translate([0, 20, 0])\n        rotate([0, -10, 0])\n        cylinder(h = 15, r1 = 6, r2 = 4);\n        \n        // Torso\n        color(color_ice)\n        translate([0, 0, 0])\n        scale([1.5, 2.2, 1.2])\n        sphere(r = 12);\n        \n        // Tail segments\n        for(i = [1:3]) {\n            color(color_ice)\n            translate([0, -15 - i*8, 0])\n            rotate([0, i*5, 0])\n            scale([1 - i*0.15, 1, 1 - i*0.15])\n            sphere(r = 10 - i*2);\n        }\n        \n        // Wings\n        wings();\n        \n        // Legs\n        legs();\n        \n        // Horns\n        horns();\n        \n        // Crystalline spikes\n        ice_spikes();\n        \n        // Eyes\n        color(color_shadow)\n        translate([5, 32, 3])\n        sphere(r = 1.5);\n        translate([-5, 32, 3])\n        sphere(r = 1.5);\n    }\n}\n\n// Wing structure\nmodule wings() {\n    // Left wing membrane\n    color(color_crystal)\n    translate([-15, 5, 8])\n    rotate([0, 0, -20])\n    linear_extrude(height = wall)\n    polygon(points=[\n        [0, 0],\n        [-25, 15],\n        [-20, 25],\n        [-10, 30],\n        [0, 25]\n    ]);\n    \n    // Right wing membrane\n    mirror([1, 0, 0])\n    color(color_crystal)\n    translate([-15, 5, 8])\n    rotate([0, 0, -20])\n    linear_extrude(height = wall)\n    polygon(points=[\n        [0, 0],\n        [-25, 15],\n        [-20, 25],\n        [-10, 30],\n        [0, 25]\n    ]);\n    \n    // Wing bones\n    for(i = [0:2]) {\n        color(color_ice)\n        translate([-15 - i*8, 5 + i*5, 8])\n        rotate([90, 0, -20])\n        cylinder(h = 5 + i*3, r = wall);\n        \n        mirror([1, 0, 0])\n        color(color_ice)\n        translate([-15 - i*8, 5 + i*5, 8])\n        rotate([90, 0, -20])\n        cylinder(h = 5 + i*3, r = wall);\n    }\n}\n\n// Leg structure\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        color(color_ice)\n        translate([side*10, 10, -8])\n        rotate([0, side*10, 0])\n        cylinder(h = 12, r = 3);\n        \n        translate([side*12, 10, -18])\n        rotate([0, side*10, 0])\n        cylinder(h = 10, r = 2.5);\n        \n        // Feet\n        translate([side*14, 10, -26])\n        scale([1.5, 0.8, 0.5])\n        sphere(r = 4);\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        color(color_ice)\n        translate([side*8, -10, -6])\n        rotate([0, side*15, 0])\n        cylinder(h = 15, r = 3.5);\n        \n        translate([side*10, -10, -19])\n        rotate([0, side*15, 0])\n        cylinder(h = 12, r = 3);\n        \n        // Feet\n        translate([side*12, -10, -29])\n        scale([1.8, 1, 0.6])\n        sphere(r = 4.5);\n    }\n}\n\n// Horn structure\nmodule horns() {\n    // Main horns\n    for(side = [-1, 1]) {\n        color(color_ice)\n        translate([side*4, 35, 6])\n        rotate([0, side*10, 0])\n        cylinder(h = 8, r1 = 2, r2 = 1);\n        \n        // Secondary horns\n        translate([side*6, 33, 7])\n        rotate([0, side*15, side*20])\n        cylinder(h = 6, r1 = 1.5, r2 = 0.5);\n    }\n    \n    // Central horn\n    color(color_ice)\n    translate([0, 38, 8])\n    rotate([0, 0, 0])\n    cylinder(h = 10, r1 = 2.5, r2 = 1);\n}\n\n// Ice crystal spikes\nmodule ice_spikes() {\n    // Back spikes\n    for(i = [0:5]) {\n        color(color_crystal)\n        translate([0, 25 - i*8, 10 + sin(i*30)*2])\n        rotate([0, 0, 0])\n        cylinder(h = 5 + i, r1 = 2, r2 = 0.5);\n    }\n    \n    // Tail spikes\n    for(i = [0:3]) {\n        color(color_crystal)\n        translate([0, -15 - i*8, 8])\n        rotate([0, 0, 0])\n        cylinder(h = 4, r1 = 1.5, r2 = 0.3);\n    }\n}\n\n// Create the blizzardwyrm\nblizzardwyrm();",
    "renders": true
  },
  {
    "mythical_creature": "frostcoil",
    "openscad_code": "// Frostcoil - Mythical Ice Serpent Dragon\n// Realistic style, medium complexity\n\n$fn = 64;\n\n// Main Colors\ncolor_ice = [0.8, 0.9, 1.0];\ncolor_frost = [0.9, 0.95, 1.0];\ncolor_crystal = [0.7, 0.85, 0.95];\n\n// Overall scale\nscale_factor = 0.8;\n\nmodule frostcoil() {\n    // Main body\n    color(color_ice)\n    translate([0, 0, 5])\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Serpentine body segments\n        body_segments();\n        \n        // Head with crystalline features\n        head();\n        \n        // Ice wings\n        wings();\n        \n        // Tail segments\n        tail();\n        \n        // Frost spikes along spine\n        frost_spikes();\n    }\n}\n\nmodule body_segments() {\n    for(i = [0:15]) {\n        translate([i * 4 - 30, 0, 3 * sin(i * 20)])\n        rotate([0, 0, i * 8])\n        scale([1 - i * 0.02, 1 - i * 0.02, 1 - i * 0.02])\n        color(color_ice)\n        sphere(d = 8);\n    }\n}\n\nmodule head() {\n    translate([-30, 0, 8])\n    union() {\n        // Main head shape\n        color(color_ice)\n        scale([1.2, 1, 1])\n        sphere(d = 12);\n        \n        // Snout\n        translate([-7, 0, 0])\n        scale([1.5, 0.8, 0.8])\n        sphere(d = 8);\n        \n        // Eyes - glowing ice crystals\n        color(color_crystal)\n        translate([-3, 4, 3])\n        sphere(d = 3);\n        translate([-3, -4, 3])\n        sphere(d = 3);\n        \n        // Horn crystals\n        color(color_crystal)\n        translate([-5, 0, 6])\n        rotate([0, -15, 0])\n        cylinder(h = 10, d1 = 4, d2 = 1);\n        translate([-2, 2, 6])\n        rotate([0, -20, 10])\n        cylinder(h = 8, d1 = 3, d2 = 0.5);\n        translate([-2, -2, 6])\n        rotate([0, -20, -10])\n        cylinder(h = 8, d1 = 3, d2 = 0.5);\n        \n        // Ice breath effect (subtle)\n        color(color_frost)\n        translate([-12, 0, 0])\n        scale([0.3, 0.3, 0.3])\n        sphere(d = 10);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    translate([-15, 8, 12])\n    rotate([0, 30, -30])\n    wing();\n    \n    // Right wing\n    translate([-15, -8, 12])\n    rotate([0, 30, 30])\n    mirror([0, 1, 0])\n    wing();\n}\n\nmodule wing() {\n    color(color_frost)\n    difference() {\n        // Main wing membrane\n        translate([0, 0, -2])\n        scale([1, 1.5, 0.2])\n        sphere(d = 20);\n        \n        // Wing holes for 3D printing\n        for(i = [1:3]) {\n            translate([i * 4 - 6, i * 3 - 3, 0])\n            scale([0.8, 0.8, 2])\n            sphere(d = 3);\n        }\n    }\n    \n    // Wing bones/crystalline structure\n    color(color_crystal)\n    for(i = [0:3]) {\n        translate([i * 3 - 3, i * 4 - 6, 0])\n        rotate([0, 0, -30 + i * 15])\n        scale([0.3, 1, 0.3])\n        cylinder(h = 8, d1 = 2, d2 = 1);\n    }\n}\n\nmodule tail() {\n    for(i = [16:25]) {\n        translate([i * 4 - 30, 0, -3 - (i - 15) * 0.5])\n        rotate([0, 0, i * 5])\n        scale([1 - i * 0.03, 1 - i * 0.03, 1 - i * 0.03])\n        color(color_ice)\n        sphere(d = 7 - (i - 15) * 0.3);\n    }\n    \n    // Tail crystal tip\n    color(color_crystal)\n    translate([70, 0, -8])\n    rotate([0, 15, 0])\n    cylinder(h = 8, d1 = 4, d2 = 0.5);\n}\n\nmodule frost_spikes() {\n    for(i = [2:14]) {\n        translate([i * 4 - 30, 0, 6 + 2 * sin(i * 30)])\n        rotate([0, 0, i * 8 + 90])\n        color(color_crystal)\n        cylinder(h = 4 + sin(i * 45) * 2, d1 = 2, d2 = 0.5);\n    }\n}\n\n// Generate the creature\nfrostcoil();",
    "renders": true
  },
  {
    "mythical_creature": "snowserpent",
    "openscad_code": "// Snowserpent - Mythical Ice Dragon\n// Realistic style with medium complexity\n// Printable at ~80mm length\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Color definitions\nice_blue = [173/255, 216/255, 230/255];\ncrystal_white = [240/255, 248/255, 255/255];\nfrost_cyan = [224/255, 255/255, 255/255];\n\nmodule snowserpent() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body\n            color(ice_blue) body();\n            \n            // Head with details\n            translate([0, 30, 0]) color(crystal_white) head();\n            \n            // Tail segments\n            for(i = [1:5]) {\n                translate([0, -15 - i*8, -2*i]) \n                rotate([5*i, 0, 10*i]) \n                color(ice_blue) tail_segment(i);\n            }\n            \n            // Wings\n            translate([12, 10, 5]) rotate([0, 0, 30]) color(frost_cyan) wing();\n            translate([-12, 10, 5]) rotate([0, 0, -30]) color(frost_cyan) wing();\n            \n            // Legs\n            translate([5, 5, -8]) rotate([0, 10, 0]) color(ice_blue) leg();\n            translate([-5, 5, -8]) rotate([0, -10, 0]) color(ice_blue) leg();\n            translate([5, -5, -8]) rotate([0, 10, 0]) color(ice_blue) leg();\n            translate([-5, -5, -8]) rotate([0, -10, 0]) color(ice_blue) leg();\n        }\n    }\n}\n\nmodule body() {\n    difference() {\n        // Main torso\n        hull() {\n            translate([0, 15, 0]) scale([1, 1.5, 1]) sphere(d=15, $fn=20);\n            translate([0, 0, 0]) sphere(d=12, $fn=20);\n            translate([0, -15, -2]) scale([0.8, 0.8, 0.8]) sphere(d=10, $fn=20);\n        }\n        \n        // Ice crystal patterns\n        for(i = [0:5]) {\n            rotate([0, 0, i*60]) \n            translate([0, 5, 6]) \n            rotate([45, 0, 0]) \n            cylinder(h=4, d1=3, d2=0.5, $fn=6);\n        }\n    }\n}\n\nmodule head() {\n    union() {\n        // Snout\n        translate([0, 8, 2]) \n        scale([1, 1.2, 0.8]) \n        sphere(d=8, $fn=20);\n        \n        // Main head\n        sphere(d=12, $fn=20);\n        \n        // Horns\n        translate([3, 3, 5]) rotate([15, 0, 30]) cylinder(h=8, d1=3, d2=1, $fn=8);\n        translate([-3, 3, 5]) rotate([15, 0, -30]) cylinder(h=8, d1=3, d2=1, $fn=8);\n        \n        // Eyes\n        translate([2.5, 4, 2]) sphere(d=2, $fn=10);\n        translate([-2.5, 4, 2]) sphere(d=2, $fn=10);\n        \n        // Ice breath effect\n        difference() {\n            translate([0, 10, 0]) scale([1, 2, 0.5]) sphere(d=6, $fn=15);\n            translate([0, 10, 0]) scale([0.8, 1.8, 0.3]) sphere(d=6, $fn=15);\n        }\n    }\n}\n\nmodule tail_segment(index) {\n    scale([1 - index*0.1, 1 - index*0.1, 1 - index*0.1]) {\n        sphere(d=8, $fn=15);\n        \n        // Tail spikes\n        for(i = [0:3]) {\n            rotate([0, 0, i*90]) \n            translate([3, 0, 0]) \n            rotate([0, 90, 0]) \n            cylinder(h=4, d1=2, d2=0.5, $fn=6);\n        }\n    }\n}\n\nmodule wing() {\n    difference() {\n        union() {\n            // Main wing membrane\n            hull() {\n                translate([0, 0, 0]) sphere(d=2, $fn=10);\n                translate([8, 4, 0]) sphere(d=1.5, $fn=10);\n                translate([12, 0, -2]) sphere(d=1, $fn=10);\n                translate([10, -4, 0]) sphere(d=1.5, $fn=10);\n            }\n            \n            // Wing bones\n            cylinder(h=12, d=2, $fn=8);\n            translate([6, 0, 0]) rotate([0, 0, 30]) cylinder(h=8, d=1.5, $fn=8);\n            translate([6, 0, 0]) rotate([0, 0, -30]) cylinder(h=8, d=1.5, $fn=8);\n        }\n        \n        // Wing membrane holes\n        for(i = [0:2]) {\n            translate([4 + i*3, 0, 0]) \n            scale([1, 0.5, 1]) \n            cylinder(h=3, d=2, $fn=8);\n        }\n    }\n}\n\nmodule leg() {\n    union() {\n        // Upper leg\n        cylinder(h=8, d=4, $fn=10);\n        \n        // Lower leg\n        translate([0, 0, -8]) rotate([15, 0, 0]) cylinder(h=6, d=3, $fn=10);\n        \n        // Foot\n        translate([0, 2, -13]) rotate([0, 0, 0]) \n        hull() {\n            sphere(d=3, $fn=10);\n            translate([0, 2, 0]) sphere(d=2, $fn=10);\n            translate([0, 0, 1]) sphere(d=2, $fn=10);\n        }\n        \n        // Claws\n        for(i = [-1:1]) {\n            translate([i*1.5, 3, -13]) \n            rotate([0, 0, 0]) \n            cylinder(h=3, d1=1, d2=0.5, $fn=6);\n        }\n    }\n}\n\n// Render the creature\nsnowserpent();",
    "renders": true
  },
  {
    "mythical_creature": "icecrystalhydra",
    "openscad_code": "// Ice Crystal Hydra - Medium complexity realistic style\n// Multi-headed serpentine dragon with crystalline ice formations\n\n$fn = 32;  // Smooth curves for printing\n\n// Main color scheme\ncolor(\"deepskyblue\") {\n\n// Base body module\nmodule body() {\n    union() {\n        // Central torso\n        translate([0, 0, 5])\n            scale([1.5, 1, 2.5])\n            sphere(10);\n        \n        // Tail segments\n        for(i = [0:3]) {\n            translate([0, 0, -i*8-10])\n                scale([1.2-0.2*i, 0.8-0.2*i, 3])\n                rotate([0, 0, i*15])\n                cylinder(6, 8-2*i, 6-1.5*i);\n        }\n    }\n}\n\n// Ice crystal spikes module\nmodule crystal_spike(x, y, z, rot) {\n    translate([x, y, z])\n        rotate([0, 0, rot])\n        scale([0.3, 0.3, 1.5])\n        cylinder(8, 3, 0.5);\n}\n\n// Head module with neck\nmodule head(pos_x, pos_y, pos_z, rot_z) {\n    translate([pos_x, pos_y, pos_z])\n        rotate([0, 0, rot_z]) {\n            // Neck\n            color(\"skyblue\") {\n                translate([0, 0, -5])\n                    scale([0.8, 0.8, 3])\n                    cylinder(5, 4, 2.5);\n            }\n            \n            // Head\n            color(\"lightblue\") {\n                translate([0, 0, 0])\n                    scale([1.2, 0.9, 1])\n                    sphere(5);\n                \n                // Snout\n                translate([0, 6, 0])\n                    scale([0.8, 1.5, 0.7])\n                    sphere(4);\n                \n                // Horns\n                translate([-2, 3, 4])\n                    rotate([30, 0, -30])\n                    cylinder(6, 1.5, 0.5);\n                translate([2, 3, 4])\n                    rotate([30, 0, 30])\n                    cylinder(6, 1.5, 0.5);\n                \n                // Eyes\n                color(\"white\") {\n                    translate([-2, 4, 1.5])\n                        sphere(1.2);\n                    translate([2, 4, 1.5])\n                        sphere(1.2);\n                }\n            }\n            \n            // Ice crystal formations on head\n            crystal_spike(-3, 2, 2, 20);\n            crystal_spike(3, 2, 2, -20);\n            crystal_spike(0, 1, 4, 0);\n        }\n}\n\n// Wing module\nmodule wing(side) {\n    translate([side*12, 0, 15])\n        rotate([0, side*20, -side*30]) {\n            color(\"azure\") {\n                // Main wing bone\n                translate([0, 0, -8])\n                    rotate([0, 90, 0])\n                    cylinder(12, 2, 1);\n                \n                // Wing membrane\n                difference() {\n                    translate([0, 0, -8])\n                        rotate([0, 90, 0])\n                        scale([0.1, 1, 1])\n                        sphere(12);\n                    \n                    // Cutout pattern\n                    for(i = [1:3]) {\n                        translate([0, 0, -8-i*3])\n                            rotate([0, 90, 0])\n                            scale([0.2, 1-i*0.2, 1-i*0.2])\n                            sphere(8);\n                    }\n                }\n                \n                // Ice crystals on wings\n                crystal_spike(0, 6, -6, 45);\n                crystal_spike(0, 4, -10, 30);\n            }\n        }\n}\n\n// Leg module\nmodule leg(side) {\n    translate([side*8, 0, 0])\n        rotate([0, side*10, 0]) {\n            color(\"skyblue\") {\n                // Upper leg\n                translate([0, 0, -2])\n                    rotate([0, 90-side*5, 0])\n                    cylinder(5, 3, 2);\n                \n                // Lower leg\n                translate([0, 6, -3])\n                    rotate([0, side*15, 0])\n                    cylinder(4, 2, 1.5);\n                \n                // Foot\n                translate([0, 10, -4])\n                    rotate([0, 0, side*10])\n                    scale([1.5, 3, 0.8])\n                    cube([2, 3, 1]);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    body();\n    \n    // Three heads\n    head(0, 10, 20, 0);\n    head(-8, 8, 18, -30);\n    head(8, 8, 18, 30);\n    \n    // Wings\n    wing(1);\n    wing(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Ice crystal formations on body\n    crystal_spike(5, 5, 15, 0);\n    crystal_spike(-5, 5, 15, 0);\n    crystal_spike(0, -5, 15, 0);\n    crystal_spike(7, 0, 10, 45);\n    crystal_spike(-7, 0, 10, -45);\n}",
    "renders": true
  },
  {
    "mythical_creature": "glacierback",
    "openscad_code": "// Glacierback - A mythical ice dragon creature with crystalline features\n// Designed for 3D printing with no overhangs and proper wall thickness\n\n// Overall dimensions: ~80mm long, ~60mm tall, ~70mm wingspan\n$fn = 32;\n\n// Main colors\ncolor_ice = [220/255, 240/255, 250/255];\ncolor_crystal = [180/255, 220/255, 255/255];\ncolor_frost = [240/255, 250/255, 255/255];\n\nmodule glacierback() {\n    // Main body\n    color(color_ice)\n    union() {\n        // Torso - elongated oval\n        translate([0, 0, 20])\n            scale([1, 0.7, 0.5])\n            sphere(d=40);\n        \n        // Lower body\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 0.4])\n            sphere(d=35);\n    }\n    \n    // Head assembly\n    color(color_ice)\n    translate([-30, 0, 35])\n    union() {\n        // Head\n        scale([1.3, 0.8, 0.8])\n        sphere(d=25);\n        \n        // Snout\n        translate([-10, 0, 0])\n            scale([1, 0.6, 0.6])\n            sphere(d=15);\n    }\n    \n    // Horns - ice crystal formations\n    color(color_crystal)\n    for(i = [0:1]) {\n        translate([-35, i*8-4, 42])\n            rotate([0, 20-i*40, 0])\n            cylinder(h1=15, h2=0, r1=3, r2=0.5);\n        \n        translate([-35, i*6-3, 38])\n            rotate([0, -20+i*40, 0])\n            cylinder(h1=12, h2=0, r1=2.5, r2=0.5);\n    }\n    \n    // Wings - membrane wings with ice crystal veins\n    color(color_ice)\n    for(side = [-1, 1]) {\n        translate([5, side*25, 32])\n        rotate([0, 0, side*30])\n        difference() {\n            // Main wing membrane\n            scale([1.5, 1, 0.1])\n            sphere(d=40);\n            \n            // Wing holes for detail\n            for(i = [1:3]) {\n                translate([i*8-8, side*i*3, -2])\n                    scale([0.3, 0.8, 1])\n                    sphere(d=8);\n            }\n        }\n        \n        // Wing support bones\n        color(color_crystal)\n        for(i = [0:2]) {\n            translate([5, side*25, 30-i*5])\n                rotate([0, 0, side*(20-i*15)])\n                cylinder(h=25-i*5, r=1.5);\n        }\n    }\n    \n    // Tail\n    color(color_ice)\n    translate([25, 0, 15])\n    union() {\n        for(i = [0:5]) {\n            translate([i*6, 0, max(0, -i*3)])\n                scale([1-i*0.15, 1-i*0.15, 1-i*0.1])\n                sphere(d=15-i*2);\n        }\n    }\n    \n    // Legs\n    color(color_ice)\n    for(side = [-1, 1]) {\n        // Front leg\n        translate([-10, side*12, 15])\n        union() {\n            // Upper leg\n            cylinder(h=15, r=4);\n            // Lower leg\n            translate([0, 0, -15])\n                cylinder(h=12, r=3);\n            // Foot\n            translate([0, side*5, -20])\n                rotate([90, 0, 0])\n                cylinder(h=8, r1=4, r2=2);\n        }\n        \n        // Back leg\n        translate([15, side*10, 12])\n        union() {\n            // Upper leg\n            cylinder(h=18, r=4.5);\n            // Lower leg\n            translate([0, 0, -18])\n                cylinder(h=15, r=3.5);\n            // Foot\n            translate([0, side*6, -25])\n                rotate([90, 0, 0])\n                cylinder(h=10, r1=5, r2=3);\n        }\n    }\n    \n    // Ice crystal spikes along spine\n    color(color_crystal)\n    for(i = [0:8]) {\n        translate([-20+i*6, 0, 40-i*3])\n            rotate([0, 0, i*15])\n            cylinder(h1=8, h2=0, r1=3, r2=0.5);\n    }\n    \n    // Eyes - glowing ice crystals\n    color(color_frost)\n    for(side = [-1, 1]) {\n        translate([-38, side*6, 35])\n            sphere(d=3);\n    }\n    \n    // Chest crystal\n    color(color_crystal)\n    translate([0, 0, 30])\n    difference() {\n        sphere(d=8);\n        sphere(d=6);\n    }\n}\n\n// Generate the creature\nglacierback();",
    "renders": true
  },
  {
    "mythical_creature": "polarwyrm",
    "openscad_code": "// Polarwyrm – arctic serpent-dragon\n// Overall length ~80 mm, printable upright with supports only under the wings\n\n$fn = 32;\n\n// Main colors\ncolor_body   = [0.9, 0.95, 1.0];   // icy pale blue-white\ncolor_detail = [0.3, 0.6, 0.9];    // frost-blue accents\ncolor_eyes   = [0.1, 0.1, 0.9];    // glowing blue\n\nmodule polarwyrm() {\n    union() {\n        // Central serpentine body\n        translate([0, 0, 8])\n            rotate([0, 90, 0])\n                body();\n\n        // Head\n        translate([0, -35, 8])\n            rotate([0, 90, 0])\n                head();\n\n        // Wings – printed flat along YZ plane, slight dihedral\n        translate([0, -18, 25])\n            rotate([30, 0, 0])\n                wing();\n        mirror([1, 0, 0])\n            translate([0, -18, 25])\n                rotate([30, 0, 0])\n                    wing();\n\n        // Tail tip curl\n        translate([0, 35, 5])\n            rotate([0, 90, 0])\n                tail_fin();\n    }\n}\n\nmodule body() {\n    color(color_body)\n    hull() {\n        for (i = [-1:1]) {\n            translate([0, i * 15, 0])\n                scale([1, 0.8, 0.8])\n                    sphere(d = 12);\n        }\n    }\n    // Frost ridges along spine – printable as shallow ribs\n    for (i = [-1:1]) {\n        translate([0, i * 15, 5])\n            scale([1, 0.4, 0.2])\n                rotate([0, 90, 0])\n                    cylinder(h = 10, d = 5);\n    }\n}\n\nmodule head() {\n    color(color_body)\n    union() {\n        // Snout\n        cylinder(h = 12, d1 = 8, d2 = 12);\n        translate([0, 12, 0])\n            sphere(d = 14);\n\n        // Horns – simple conical, printable as separate spikes\n        translate([4, 5, 6])\n            rotate([30, 0, 45])\n                cylinder(h = 10, d1 = 3, d2 = 0);\n        translate([-4, 5, 6])\n            rotate([30, 0, -45])\n                cylinder(h = 10, d1 = 3, d2 = 0);\n\n        // Eyes\n        color(color_eyes)\n        translate([4, 10, 3])\n            sphere(d = 2.5);\n        translate([-4, 10, 3])\n            sphere(d = 2.5);\n    }\n}\n\nmodule wing() {\n    color(color_body)\n    difference() {\n        // Membrane\n        translate([0, 0, 0])\n            rotate([0, 0, -10])\n                scale([1, 1.2, 0.2])\n                    cylinder(h = 1, d = 30);\n\n        // Cutouts for webbing (printable holes)\n        for (r = [8, 15, 22]) {\n            translate([0, r - 5, 0.3])\n                scale([0.5, 0.8, 1])\n                    circle(r = 3);\n        }\n\n        // Frost-veins\n        color(color_detail)\n        for (a = [-60:30:60]) {\n            rotate([0, 0, a])\n                translate([0, 10, 0])\n                    scale([0.5, 1, 0.3])\n                        cube([2, 15, 1]);\n        }\n    }\n}\n\nmodule tail_fin() {\n    color(color_body)\n    hull() {\n        translate([0, 0, 0])\n            sphere(d = 6);\n        translate([0, 4, 0])\n            scale([0.2, 1.5, 0.5])\n                sphere(d = 8);\n    }\n}\n\n// Assemble\npolarwyrm();",
    "renders": true
  },
  {
    "mythical_creature": "taigawyrm",
    "openscad_code": "// Taigawyrm - Mythical Frost Dragon of the Northern Forests\n// Realistic style, medium complexity\n\n$fn = 32;\nscale_factor = 0.3; // Scale down for 3D printing\n\nmodule taigawyrm() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main body\n        color(\"steelblue\") {\n            union() {\n                // Torso - elongated ellipsoid\n                scale([1.5, 1, 0.8]) \n                    sphere(r = 15);\n                \n                // Neck - tapered cylinder\n                translate([20, 0, 5]) {\n                    rotate([0, -30, 0])\n                        cylinder(h = 25, r1 = 8, r2 = 5);\n                }\n                \n                // Tail - segmented cylinders\n                translate([-20, 0, 0]) {\n                    for(i = [0:5]) {\n                        rotate([0, i*10, 0])\n                            translate([i*-8, 0, sin(i*20)*3])\n                                cylinder(h = 8, r1 = 12-i, r2 = 10-i);\n                    }\n                }\n            }\n        }\n        \n        // Head\n        color(\"lightblue\") {\n            translate([42, 0, 12]) {\n                rotate([0, -30, 0]) {\n                    scale([1.2, 0.8, 0.8])\n                        sphere(r = 8);\n                    \n                    // Snout\n                    translate([8, 0, -2]) {\n                        scale([1.5, 0.6, 0.6])\n                            sphere(r = 5);\n                    }\n                    \n                    // Horns - ice crystal formations\n                    for(i = [0, 1]) {\n                        mirror([0, 1, 0]) {\n                            translate([2, (i==0)?6:-6, 6]) {\n                                rotate([i*20-10, 0, (i==0)?-20:20])\n                                    cylinder(h = 12, r1 = 2, r2 = 0.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Wings - membrane with ice patterns\n        color(\"aliceblue\") {\n            translate([0, 0, 15]) {\n                for(side = [-1, 1]) {\n                    mirror([0, side, 0]) {\n                        // Wing arm\n                        translate([5, 15, 0]) {\n                            rotate([0, 0, -30])\n                                cylinder(h = 30, r1 = 3, r2 = 1);\n                        }\n                        \n                        // Wing membrane\n                        translate([10, 20, -5]) {\n                            rotate([0, 60, 0])\n                                linear_extrude(height = 0.5)\n                                    polygon(points=[\n                                        [0, 0],\n                                        [25, 5],\n                                        [35, 20],\n                                        [30, 35],\n                                        [15, 30],\n                                        [5, 15]\n                                    ]);\n                        }\n                        \n                        // Wing spikes\n                        for(i = [0:3]) {\n                            translate([8+i*7, 15+i*5, 0]) {\n                                rotate([0, 0, -20-i*10])\n                                    cylinder(h = 5, r1 = 1.5, r2 = 0.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Legs - four muscular limbs\n        color(\"royalblue\") {\n            for(side = [-1, 1]) {\n                mirror([0, side, 0]) {\n                    // Front legs\n                    translate([15, 12, -10]) {\n                        rotate([30, 0, 0])\n                            cylinder(h = 15, r1 = 3, r2 = 2);\n                        translate([0, 0, 15]) {\n                            rotate([30, 0, 0])\n                                cylinder(h = 12, r1 = 2, r2 = 1.5);\n                            translate([0, 0, 12]) {\n                                // Paw with claws\n                                sphere(r = 2.5);\n                                for(claw = [-1, 0, 1]) {\n                                    translate([claw*1.5, 0, 2]) {\n                                        rotate([0, 90, 0])\n                                            cylinder(h = 3, r1 = 0.5, r2 = 0.2);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    // Hind legs\n                    translate([-15, 10, -8]) {\n                        rotate([45, 0, 0])\n                            cylinder(h = 18, r1 = 4, r2 = 2.5);\n                        translate([0, 0, 18]) {\n                            rotate([30, 0, 0])\n                                cylinder(h = 15, r1 = 2.5, r2 = 2);\n                            translate([0, 0, 15]) {\n                                sphere(r = 3);\n                                for(claw = [-1.5, 0, 1.5]) {\n                                    translate([claw*1.8, 0, 2.5]) {\n                                        rotate([0, 90, 0])\n                                            cylinder(h = 4, r1 = 0.6, r2 = 0.2);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Dorsal ice spikes\n        color(\"azure\") {\n            for(i = [0:8]) {\n                translate([20-i*5, 0, 10+sin(i*20)*2]) {\n                    cylinder(h = 4+sin(i*30)*2, r1 = 1.5, r2 = 0.5);\n                }\n            }\n        }\n        \n        // Eyes - glowing blue crystals\n        color(\"cyan\") {\n            translate([48, 3, 10]) {\n                sphere(r = 1.5);\n            }\n            translate([48, -3, 10]) {\n                sphere(r = 1.5);\n            }\n        }\n        \n        // Frost breath effect (subtle swirling mist)\n        color(\"lightcyan\", 0.3) {\n            translate([55, 0, 8]) {\n                for(i = [0:5]) {\n                    rotate([0, i*20-60, 0])\n                        translate([i*2, sin(i*45)*2, cos(i*45)*2])\n                            sphere(r = 2-i*0.3);\n                }\n            }\n        }\n    }\n}\n\n// Generate the creature\ntaigawyrm();",
    "renders": true
  },
  {
    "mythical_creature": "forestcoil",
    "openscad_code": "// Forestcoil - mythical serpent-dragon of the ancient woods\n// Designed for 3D printing, no supports needed\n\n// Overall dimensions: 80mm long, 25mm tall, 30mm wide\n\nmodule forestcoil_body() {\n    // Main serpentine body made of segments\n    color([0.2, 0.4, 0.1])  // Deep forest green\n    difference() {\n        union() {\n            // Head segment\n            translate([0, 0, 15])\n            scale([1.2, 1, 1])\n            sphere(6, $fn=16);\n            \n            // Neck segments\n            for(i = [1:5]) {\n                translate([i*8, 0, 15 - i*1.5])\n                scale([1.1 - i*0.05, 1 - i*0.03, 1 - i*0.05])\n                sphere(5, $fn=12);\n            }\n            \n            // Body segments\n            for(i = [6:12]) {\n                translate([i*8, 0, 15 - (5*1.5) - (i-5)*0.8])\n                scale([0.85 - (i-6)*0.03, 0.85 - (i-6)*0.03, 0.85 - (i-6)*0.03])\n                sphere(4.5, $fn=12);\n            }\n            \n            // Tail segments\n            for(i = [13:20]) {\n                translate([i*7, 0, 15 - (5*1.5) - (7*0.8) - (i-12)*1.2])\n                scale([0.6 - (i-12)*0.02, 0.6 - (i-12)*0.02, 0.6 - (i-12)*0.02])\n                sphere(3.5, $fn=8);\n            }\n        }\n        \n        // Hollow out body for printing\n        translate([0, 0, 15])\n        scale([1.1, 0.9, 0.9])\n        sphere(4, $fn=16);\n    }\n}\n\nmodule forestcoil_wings() {\n    color([0.1, 0.3, 0.05])  // Dark leaf green\n    // Left wing\n    translate([-15, 0, 22])\n    rotate([0, 0, 30])\n    union() {\n        // Wing arm\n        cylinder(h=12, r1=2, r2=1.5, $fn=8);\n        \n        // Wing membrane segments\n        for(i = [0:2]) {\n            translate([-3 - i*4, 0, 8 - i*2])\n            rotate([0, 15 + i*10, 0])\n            scale([0.8, 0.1, 1.2 - i*0.2])\n            cube([8, 1, 6 - i*1.5]);\n        }\n    }\n    \n    // Right wing\n    mirror([1, 0, 0])\n    translate([-15, 0, 22])\n    rotate([0, 0, 30])\n    union() {\n        cylinder(h=12, r1=2, r2=1.5, $fn=8);\n        \n        for(i = [0:2]) {\n            translate([-3 - i*4, 0, 8 - i*2])\n            rotate([0, 15 + i*10, 0])\n            scale([0.8, 0.1, 1.2 - i*0.2])\n            cube([8, 1, 6 - i*1.5]);\n        }\n    }\n}\n\nmodule forestcoil_features() {\n    // Horns\n    color([0.3, 0.2, 0.1])  // Dark wood brown\n    translate([8, 0, 20])\n    union() {\n        rotate([0, -20, -30])\n        cylinder(h=8, r1=2, r2=0.5, $fn=6);\n        \n        rotate([0, -20, 30])\n        cylinder(h=8, r1=2, r2=0.5, $fn=6);\n    }\n    \n    // Eyes\n    color([0.8, 0.9, 0.2])  // Glowing yellow-green\n    translate([6, 3, 17])\n    sphere(1.2, $fn=8);\n    translate([6, -3, 17])\n    sphere(1.2, $fn=8);\n    \n    // Leaf-like scales along back\n    color([0.15, 0.35, 0.08])\n    for(i = [0:20]) {\n        translate([i*3.5, 0, 18 - i*0.3])\n        rotate([0, 0, i*15])\n        scale([1, 0.2, 0.8])\n        cylinder(h=3, r1=1.5, r2=0.5, $fn=3);\n    }\n    \n    // Magical moss accents\n    color([0.1, 0.25, 0.05])\n    for(i = [2:5:20]) {\n        translate([i*3.5, 0, 12 - i*0.3])\n        sphere(1, $fn=6);\n    }\n}\n\nmodule forestcoil_base() {\n    // Simple coiled base for stability\n    color([0.1, 0.1, 0.05])  // Dark earth\n    difference() {\n        translate([40, 0, 2])\n        scale([1, 0.8, 0.3])\n        cylinder(h=4, r=12, $fn=32);\n        \n        translate([40, 0, 1.9])\n        cylinder(h=4.2, r=10, $fn=32);\n    }\n}\n\n// Main assembly\nunion() {\n    forestcoil_base();\n    forestcoil_body();\n    forestcoil_wings();\n    forestcoil_features();\n}",
    "renders": true
  },
  {
    "mythical_creature": "junglewyrm",
    "openscad_code": "// Junglewyrm - A serpentine forest dragon with vine-like wings and moss armor\n// Overall length ~90mm, height ~35mm, printable without supports\n\n$fn = 36;\n\n// Main colors\nbody_color = \"darkgreen\";\nvine_color = \"forestgreen\";\nmoss_color = \"lime\";\neye_color = \"red\";\n\n// Head module\nmodule head() {\n    color(body_color)\n    union() {\n        // Snout\n        translate([-5, 0, 0])\n            scale([1.5, 1, 1])\n            sphere(8);\n        \n        // Main head\n        sphere(10);\n        \n        // Horns\n        color(vine_color)\n        for(i = [0:1]) {\n            mirror([i, 0, 0])\n            translate([8, 0, 5])\n            rotate([0, -20, 15])\n            cylinder(12, 3, 1);\n        }\n        \n        // Eyes\n        color(eye_color)\n        for(i = [0:1]) {\n            mirror([i, 0, 0])\n            translate([7, 6, 2])\n            sphere(2);\n        }\n    }\n}\n\n// Body segment module\nmodule body_segment(size, angle) {\n    color(body_color)\n    translate([0, 0, size/2])\n    rotate([0, 0, angle])\n    scale([1, 0.8, 0.6])\n    sphere(size);\n}\n\n// Vine wing module\nmodule vine_wing(side) {\n    color(vine_color)\n    mirror([side, 0, 0])\n    union() {\n        // Main wing structure\n        translate([0, 0, 5])\n        rotate([0, -20, 0])\n        scale([1, 0.1, 2])\n        sphere(15);\n        \n        // Vine tendrils\n        for(i = [0:3]) {\n            rotate([0, 0, i * 30 - 45])\n            translate([12, 0, 5])\n            cylinder(8, 1, 0.5);\n        }\n    }\n}\n\n// Scale pattern module\nmodule scales() {\n    color(moss_color)\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([0, 0, 2])\n        scale([1, 1, 0.3])\n        cylinder(3, 6, 0);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(body_color)\n    union() {\n        // Main tail segments\n        for(i = [0:4]) {\n            translate([i * 15, 0, -i * 2])\n            scale([1 - i * 0.15, 1 - i * 0.15, 1 - i * 0.1])\n            sphere(8 - i);\n        }\n        \n        // Tail spikes\n        color(vine_color)\n        for(i = [0:3]) {\n            translate([i * 15 + 5, 0, -i * 2 + 5])\n            rotate([0, 180, 0])\n            cylinder(3, 2, 0);\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 10])\nrotate([0, -10, 0])\nunion() {\n    // Head\n    head();\n    \n    // Neck\n    translate([-12, 0, -3])\n    body_segment(8, 0);\n    \n    // Body\n    for(i = [1:5]) {\n        translate([-20 - i * 12, 0, -5 - i])\n        body_segment(10 - i * 0.5, i * 5);\n    }\n    \n    // Wings\n    translate([-30, 0, 0])\n    vine_wing(1);\n    vine_wing(-1);\n    \n    // Tail\n    translate([-80, 0, -10])\n    tail();\n    \n    // Legs\n    for(side = [0,1]) {\n        mirror([side, 0, 0])\n        translate([-35, 8, -8])\n        rotate([0, 30, 0])\n        color(body_color)\n        union() {\n            cylinder(12, 4, 3);\n            translate([0, 0, -12])\n            sphere(4);\n        }\n    }\n    \n    // Moss scales along back\n    for(i = [0:4]) {\n        translate([-25 - i * 12, 0, 2])\n        scales();\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "vinehydra",
    "openscad_code": "// Vinehydra - Mythical plant-serpent hydra with vine-like features\n// 3D printable medium complexity realistic style\n\nmodule vinehydra() {\n    // Main body - serpentine trunk\n    color([0.2, 0.4, 0.1]) \n    union() {\n        // Central trunk\n        translate([0, 0, 10]) \n        rotate([90, 0, 0])\n        cylinder(h=40, d1=15, d2=20, $fn=8);\n        \n        // Bulbous segments for organic look\n        for(i=[0:3]) {\n            translate([0, 0, 5 + i*10]) \n            sphere(d=18 + i*2, $fn=8);\n        }\n    }\n    \n    // Three serpent heads with vine features\n    module head(angle, height) {\n        translate([0, 0, height]) \n        rotate([0, 0, angle]) {\n            // Neck\n            color([0.15, 0.35, 0.08])\n            translate([0, 25, 0]) \n            rotate([90, 0, 0])\n            cylinder(h=25, d1=12, d2=8, $fn=6);\n            \n            // Head base\n            color([0.25, 0.45, 0.12])\n            translate([0, 40, 0]) \n            scale([1, 1.2, 0.8])\n            sphere(d=12, $fn=8);\n            \n            // Snout\n            color([0.2, 0.4, 0.1])\n            translate([0, 47, 0]) \n            scale([0.8, 0.6, 0.6])\n            sphere(d=8, $fn=6);\n            \n            // Eyes - glowing magical orbs\n            color([0.8, 1, 0.4])\n            translate([-3, 42, 3]) sphere(d=3);\n            translate([3, 42, 3]) sphere(d=3);\n            \n            // Vine tendrils/horns\n            color([0.1, 0.3, 0.05])\n            for(i=[-30:30:60]) {\n                translate([0, 38, 0]) \n                rotate([0, i, 15])\n                cylinder(h=8, d=2, $fn=4);\n            }\n        }\n    }\n    \n    // Generate three heads at 120 degree intervals\n    head(0, 40);\n    head(120, 35);\n    head(240, 38);\n    \n    // Vine tentacle legs\n    module tentacle(x, y, rot) {\n        translate([x, y, 0]) \n        rotate([0, 0, rot]) {\n            color([0.2, 0.4, 0.1])\n            union() {\n                // Upper tentacle\n                translate([0, 0, 5]) \n                rotate([90, 0, 30])\n                cylinder(h=20, d1=6, d2=4, $fn=6);\n                \n                // Lower tentacle\n                translate([0, 8, -12]) \n                rotate([90, 0, -20])\n                cylinder(h=15, d1=4, d2=3, $fn=6);\n                \n                // Root cluster\n                translate([0, 0, 0]) \n                sphere(d=8, $fn=6);\n            }\n        }\n    }\n    \n    // Six tentacle legs\n    tentacle(10, 0, 0);\n    tentacle(-10, 0, 180);\n    tentacle(5, 8, 60);\n    tentacle(-5, 8, 120);\n    tentacle(5, -8, -60);\n    tentacle(-5, -8, -120);\n    \n    // Leaf scales along back\n    color([0.1, 0.5, 0.15])\n    for(i=[0:15]) {\n        translate([0, -5 + i*2.5, 15 + sin(i*15)*3]) \n        rotate([80, 0, i*20])\n        scale([1, 0.3, 0.1])\n        sphere(d=6, $fn=4);\n    }\n    \n    // Magical flower bud on central head\n    color([0.8, 0.4, 0.9])\n    translate([0, 50, 8]) \n    scale([0.8, 0.8, 1.2])\n    sphere(d=6, $fn=8);\n    \n    // Thorn details\n    color([0.15, 0.25, 0.08])\n    for(i=[0:20]) {\n        angle = i*18;\n        height = 10 + i*1.5;\n        translate([cos(angle)*12, sin(angle)*12, height]) \n        rotate([0, 0, angle+90])\n        cylinder(h=3, d1=1.5, d2=0.5, $fn=4);\n    }\n}\n\n// Create the creature centered\nvinehydra();",
    "renders": true
  },
  {
    "mythical_creature": "leafdrake",
    "openscad_code": "// Leafdrake - A dragon with leaf-like wings and botanical features\n// 3D printable model with medium complexity\n\n$fn = 36;\n\n// Main body color - deep forest green\ncolor([0.1, 0.4, 0.1]) {\n    // Body - elongated teardrop shape\n    union() {\n        // Main torso\n        scale([1, 0.7, 1.2]) sphere(r = 12);\n        \n        // Neck extension\n        translate([0, 0, 12]) {\n            rotate([0, 15, 0]) {\n                scale([0.6, 0.6, 1]) cylinder(h = 15, r1 = 6, r2 = 4);\n            }\n        }\n        \n        // Head\n        translate([0, 0, 25]) {\n            rotate([0, 15, 0]) {\n                scale([0.8, 0.7, 1.2]) sphere(r = 8);\n            }\n        }\n        \n        // Tail\n        translate([-20, 0, 0]) {\n            rotate([0, 0, 15]) {\n                scale([1, 0.7, 0.7]) cylinder(h = 30, r1 = 8, r2 = 3);\n            }\n        }\n    }\n}\n\n// Leaf wings - four segments with vein details\nmodule leaf_wing(is_left = true) {\n    angle = is_left ? 30 : -30;\n    mirror_vec = is_left ? [0, 0, 0] : [1, 0, 0];\n    \n    color([0.2, 0.5, 0.1]) {\n        mirror(mirror_vec) {\n            rotate([0, 0, angle]) {\n                translate([5, 12, 8]) {\n                    rotate([0, -30, 0]) {\n                        // Main wing surface\n                        scale([1.5, 1, 0.1]) sphere(r = 20);\n                        \n                        // Wing segments\n                        for (i = [0:3]) {\n                            rotate([0, 0, i * 25]) {\n                                translate([i * 8, i * 3, 0]) {\n                                    scale([0.8 - i * 0.15, 0.6 - i * 0.1, 0.05]) \n                                        sphere(r = 15 - i * 3);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create wings\nleaf_wing(true);\nleaf_wing(false);\n\n// Legs - four with clawed feet\nmodule leg(position, angle) {\n    translate(position) {\n        rotate([0, 0, angle]) {\n            color([0.15, 0.35, 0.1]) {\n                // Upper leg\n                rotate([90, 0, 0]) cylinder(h = 12, r = 3);\n                \n                // Lower leg\n                translate([0, 0, -12]) {\n                    rotate([45, 0, 0]) cylinder(h = 10, r = 2.5);\n                    \n                    // Foot\n                    translate([0, 0, -10]) {\n                        rotate([0, 0, 0]) {\n                            scale([1.2, 1, 0.5]) sphere(r = 3);\n                            \n                            // Toes\n                            for (toe = [-1:1]) {\n                                translate([toe * 2, 1, -2]) {\n                                    rotate([0, 30, 0]) cylinder(h = 4, r = 1);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Position legs\nleg([8, 8, -8], 45);\nleg([8, -8, -8], -45);\nleg([-8, 6, -8], 135);\nleg([-8, -6, -8], -135);\n\n// Horns - antler-like branches\nmodule horn(position, angle) {\n    translate(position) {\n        rotate([0, angle, 0]) {\n            color([0.3, 0.2, 0.1]) {\n                cylinder(h = 8, r1 = 2, r2 = 1);\n                \n                // Branches\n                translate([0, 0, 4]) {\n                    rotate([0, 0, 30]) cylinder(h = 6, r1 = 1, r2 = 0.5);\n                    rotate([0, 0, -30]) cylinder(h = 6, r1 = 1, r2 = 0.5);\n                }\n            }\n        }\n    }\n}\n\n// Position horns\nhorn([4, 3, 30], -15);\nhorn([4, -3, 30], -15);\nhorn([-2, 2, 32], -10);\nhorn([-2, -2, 32], -10);\n\n// Eyes\nmodule eye(position) {\n    translate(position) {\n        color([0.1, 0.1, 0.1]) {\n            sphere(r = 1.5);\n        }\n    }\n}\n\neye([6, 3, 28]);\neye([6, -3, 28]);\n\n// Leaf scale pattern along back\nfor (i = [0:8]) {\n    translate([-15 + i * 4, 0, 10 + sin(i * 15) * 2]) {\n        color([0.25, 0.45, 0.15]) {\n            rotate([0, 0, 45]) {\n                scale([1, 1.5, 0.3]) sphere(r = 2.5);\n            }\n        }\n    }\n}\n\n// Magical glow orbs at wing tips\nmodule glow_orb(position) {\n    translate(position) {\n        color([0.4, 0.8, 0.3, 0.7]) {\n            sphere(r = 1.5);\n        }\n    }\n}\n\nglow_orb([25, 15, 12]);\nglow_orb([25, -15, 12]);\nglow_orb([20, 12, 15]);\nglow_orb([20, -12, 15]);",
    "renders": true
  },
  {
    "mythical_creature": "mosswyrm",
    "openscad_code": "// Mosswyrm - A serpentine forest dragon with moss-like growths\n// Overall size: ~80mm long\n\n// Main color scheme\n$fn = 32;  // Smooth curves\n\n// Body segments\nmodule body_segment(diameter, length, rotation) {\n    translate([0, 0, length/2])\n    rotate([0, rotation, 0])\n    union() {\n        // Core body\n        color(\"darkgreen\")\n        cylinder(d=diameter, h=length, center=true);\n        \n        // Mossy growth rings\n        for(i = [-length/3: length/6: length/3]) {\n            translate([0, 0, i])\n            color(\"forestgreen\")\n            scale([1.3, 1.3, 0.3])\n            sphere(d=diameter);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    color(\"darkgreen\")\n    union() {\n        // Snout\n        translate([0, 0, 10])\n        scale([1, 0.8, 1.5])\n        sphere(d=20);\n        \n        // Top of head\n        translate([0, 0, 20])\n        scale([1.2, 1, 0.8])\n        sphere(d=20);\n        \n        // Eyes\n        translate([-7, 8, 15])\n        color(\"yellowgreen\")\n        sphere(d=5);\n        translate([7, 8, 15])\n        color(\"yellowgreen\")\n        sphere(d=5);\n        \n        // Horns/antlers\n        translate([-10, -5, 25])\n        rotate([0, -30, -20])\n        color(\"saddlebrown\")\n        cylinder(d=3, h=15);\n        translate([10, -5, 25])\n        rotate([0, -30, 20])\n        color(\"saddlebrown\")\n        cylinder(d=3, h=15);\n        \n        // Moss patches\n        translate([0, 5, 20])\n        color(\"forestgreen\")\n        scale([1.5, 1, 0.5])\n        sphere(d=15);\n    }\n}\n\n// Wing module\nmodule wing() {\n    color(\"darkolivegreen\")\n    union() {\n        // Main wing structure\n        translate([0, 0, -5])\n        rotate([0, 0, -10])\n        scale([1, 0.1, 2])\n        sphere(d=25);\n        \n        // Wing membrane supports\n        for(i = [0:30:120]) {\n            rotate([0, 0, i])\n            translate([12, 0, 0])\n            rotate([0, 90, 0])\n            color(\"forestgreen\")\n            cylinder(d=1, h=30);\n        }\n        \n        // Wing membrane (simplified)\n        translate([15, 0, 10])\n        rotate([0, 90, 0])\n        scale([0.05, 1, 1])\n        color(\"seagreen\")\n        sphere(d=30);\n    }\n}\n\n// Legs\nmodule leg() {\n    color(\"darkgreen\")\n    union() {\n        // Upper leg\n        translate([0, 0, 10])\n        cylinder(d=8, h=15);\n        \n        // Lower leg\n        translate([0, 0, 0])\n        rotate([30, 0, 0])\n        cylinder(d=6, h=12);\n        \n        // Foot\n        translate([0, 0, -8])\n        rotate([90, 0, 0])\n        scale([1, 2, 0.5])\n        sphere(d=10);\n    }\n}\n\n// Tail segments\nmodule tail_segment(diameter, length, taper) {\n    translate([0, 0, length/2])\n    scale([1, 1, taper])\n    color(\"darkgreen\")\n    cylinder(d=diameter, h=length);\n    \n    // Moss tufts\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([diameter/2 + 2, 0, 0])\n        color(\"forestgreen\")\n        sphere(d=diameter/3);\n    }\n}\n\n// Assemble the mosswyrm\nunion() {\n    // Head\n    translate([0, 0, 0])\n    head();\n    \n    // Neck segments\n    body_segment(18, 15, 10);\n    translate([0, 0, 15])\n    body_segment(20, 18, 5);\n    \n    // Body segments\n    translate([0, 0, 33])\n    body_segment(22, 20, 0);\n    translate([0, 0, 53])\n    body_segment(20, 18, -5);\n    translate([0, 0, 71])\n    body_segment(18, 15, -10);\n    \n    // Wings\n    translate([0, 0, 43])\n    rotate([0, 90, 0])\n    wing();\n    translate([0, 0, 43])\n    rotate([0, -90, 0])\n    mirror([1, 0, 0])\n    wing();\n    \n    // Legs\n    translate([12, 0, 33])\n    rotate([0, 0, -30])\n    leg();\n    translate([-12, 0, 33])\n    rotate([0, 0, 30])\n    mirror([1, 0, 0])\n    leg();\n    \n    // Tail\n    translate([0, 0, 86])\n    tail_segment(15, 12, 0.9);\n    translate([0, 0, 98])\n    tail_segment(12, 10, 0.8);\n    translate([0, 0, 108])\n    tail_segment(9, 8, 0.7);\n    translate([0, 0, 116])\n    tail_segment(6, 6, 0.6);\n    translate([0, 0, 122])\n    tail_segment(4, 4, 0.5);\n}",
    "renders": true
  },
  {
    "mythical_creature": "fernserpent",
    "openscad_code": "// FernSerpent - A mythical forest serpent with fern-like wings and vine patterns\n// Size: ~80mm long, designed for 3D printing with no overhangs\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule fernserpent() {\n    color([0.2, 0.4, 0.1]) {\n        union() {\n            // Main body segments\n            body();\n            \n            // Fern-like wings\n            translate([-5, 0, 8]) rotate([0, 45, 0]) left_wing();\n            translate([-5, 0, 8]) mirror([1, 0, 0]) left_wing();\n            \n            // Head with horns\n            translate([-35, 0, 5]) head();\n            \n            // Vine tail\n            translate([30, 0, 0]) tail();\n            \n            // Scales along body\n            scales();\n        }\n    }\n}\n\nmodule body() {\n    // Create segmented body using spheres and cylinders\n    for(i = [0:5]) {\n        translate([i * 8 - 25, 0, 3 * sin(i * 30)]) {\n            // Body segment\n            sphere(d = 12 - i, $fn = 16);\n            \n            // Connection between segments\n            if(i < 5) {\n                translate([4, 0, 0]) \n                    cylinder(h = 8, d1 = 10 - i, d2 = 12 - i - 1, $fn = 12);\n            }\n        }\n    }\n}\n\nmodule left_wing() {\n    // Main wing structure\n    difference() {\n        // Wing membrane\n        linear_extrude(height = 0.5) {\n            polygon(points = [\n                [0, 0], [15, 0], [20, 8], [18, 15], [10, 20], [5, 18], [0, 10]\n            ]);\n        }\n        \n        // Fern leaf cuts\n        for(i = [1:3]) {\n            translate([i * 5, 5 + i * 3, -0.1]) \n                rotate([0, 0, -20 * i]) \n                    cylinder(h = 1, d = 3, $fn = 6);\n        }\n    }\n    \n    // Wing veins\n    color([0.1, 0.2, 0.05]) {\n        for(i = [0:2]) {\n            translate([i * 6, 0, 0.3]) \n                rotate([0, 0, 30 * i]) \n                    cylinder(h = 0.5, d = 0.5, h = 15 - i * 3);\n        }\n    }\n}\n\nmodule head() {\n    // Main head\n    color([0.15, 0.35, 0.08]) {\n        sphere(d = 10, $fn = 16);\n        \n        // Snout\n        translate([-8, 0, 0]) \n            scale([1.5, 0.8, 0.8]) \n                sphere(d = 6, $fn = 12);\n        \n        // Eyes\n        color([0.8, 0.9, 0.3]) {\n            translate([-3, 3, 2]) sphere(d = 2);\n            translate([-3, -3, 2]) sphere(d = 2);\n        }\n        \n        // Horns\n        color([0.3, 0.5, 0.1]) {\n            translate([0, 4, 4]) \n                rotate([30, 0, 30]) \n                    cylinder(h = 8, d1 = 3, d2 = 1, $fn = 6);\n            translate([0, -4, 4]) \n                rotate([30, 0, -30]) \n                    cylinder(h = 8, d1 = 3, d2 = 1, $fn = 6);\n        }\n    }\n}\n\nmodule tail() {\n    // Tapering tail with vine pattern\n    for(i = [0:8]) {\n        translate([i * 4, 0, -i * 0.5]) {\n            // Tail segment\n            sphere(d = 8 - i * 0.7, $fn = 12);\n            \n            // Vine wrapping\n            color([0.25, 0.45, 0.15]) {\n                rotate_extrude(angle = 360, $fn = 20) {\n                    translate([4 - i * 0.3, 0, 0]) \n                        square([0.5, 2 - i * 0.1]);\n                }\n            }\n            \n            // Connection cylinders\n            if(i < 8) {\n                translate([2, 0, 0]) \n                    cylinder(h = 2, d1 = 8 - i * 0.7, d2 = 8 - (i + 1) * 0.7, $fn = 10);\n            }\n        }\n    }\n}\n\nmodule scales() {\n    // Hexagonal scales along body\n    color([0.18, 0.38, 0.12]) {\n        for(i = [0:4]) {\n            for(j = [0:3]) {\n                translate([i * 8 - 25, \n                          (j - 1.5) * 3 * cos(i * 45), \n                          6 + 2 * sin(i * 30)]) {\n                    rotate([90, 0, 0]) \n                        cylinder(h = 0.5, d = 2, $fn = 6);\n                }\n            }\n        }\n    }\n}\n\n// Render the complete fernserpent\nfernserpent();",
    "renders": true
  },
  {
    "mythical_creature": "swampwyrm",
    "openscad_code": "// Swampwyrm - A realistic mythical serpentine dragon dwelling in swamps\n// Model height ~70mm, length ~90mm, designed for FDM printing\n\n// Base color palette\n$fa = 2; $fs = 0.5;\n\nmodule main() {\n    color([0.25,0.4,0.2]) body();\n    color([0.2,0.3,0.15]) tail();\n    color([0.3,0.45,0.25]) neck();\n    color([0.2,0.35,0.15]) head();\n    color([0.3,0.4,0.25]) wings();\n    color([0.15,0.25,0.1]) legs();\n    color([0.4,0.5,0.3]) frills();\n}\n\nmodule body() {\n    union() {\n        // Main torso\n        translate([0,0,20])\n            scale([40,25,30])\n            sphere(1);\n        \n        // Segmented belly plates\n        for(i=[-2:2]) {\n            translate([i*8, -12, 15])\n                scale([6,1,4])\n                rotate([15,0,0])\n                cube(1);\n        }\n    }\n}\n\nmodule tail() {\n    difference() {\n        // Long curved tail\n        for(i=[0:8]) {\n            translate([-i*5 - 25, 0, 20 - i*2])\n                rotate([0,0,-i*5])\n                scale([10-i, 10-i, 8-i])\n                sphere(1);\n        }\n        \n        // Tail spikes\n        for(i=[2:8]) {\n            translate([-i*5 - 25, 0, 30 - i*2])\n                rotate([0,0,-i*5 + 90])\n                scale([1, 3-i*0.3, 1])\n                cylinder(h=4, r=1);\n        }\n    }\n}\n\nmodule neck() {\n    color([0.2,0.35,0.15])\n    translate([30,0,35])\n        rotate([0,0,30])\n        scale([15,12,25])\n        cylinder(h=20, r=1);\n}\n\nmodule head() {\n    union() {\n        // Snout\n        translate([45,0,45])\n            scale([15,8,12])\n            cylinder(h=20, r=1);\n        \n        // Jaw\n        translate([45,0,35])\n            scale([12,7,5])\n            cylinder(h=15, r=1);\n        \n        // Horns\n        translate([55,8,55])\n            rotate([0,-20,30])\n            scale([2,2,8])\n            cylinder(h=1, r=1);\n        \n        translate([55,-8,55])\n            rotate([0,20,-30])\n            scale([2,2,8])\n            cylinder(h=1, r=1);\n        \n        // Eyes\n        translate([50,6,48])\n            color([0.8,0.9,0.3])\n            sphere(2);\n        \n        translate([50,-6,48])\n            color([0.8,0.9,0.3])\n            sphere(2);\n    }\n}\n\nmodule wings() {\n    // Left wing membrane\n    translate([0,20,40])\n        rotate([0,0,-30])\n        scale([1,0.1,1])\n        for(i=[0:3]) {\n            translate([i*5, 0, i*3])\n                rotate([i*5,0,0])\n                scale([15-i*2, 1, 8-i])\n                cube(1);\n        }\n    \n    // Right wing membrane\n    translate([0,-20,40])\n        rotate([0,0,30])\n        scale([1,0.1,1])\n        for(i=[0:3]) {\n            translate([i*5, 0, i*3])\n                rotate([i*5,0,0])\n                scale([15-i*2, 1, 8-i])\n                cube(1);\n        }\n    \n    // Wing bones\n    for(side=[-1,1]) {\n        translate([0,side*20,40])\n            rotate([0,0,side*30])\n            color([0.15,0.25,0.1])\n            for(i=[0:3]) {\n                translate([i*5, 0, i*3])\n                    rotate([i*5,0,0])\n                    scale([0.5,0.5,8-i])\n                    cylinder(h=1, r=1);\n            }\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side=[-1,1]) {\n        translate([20,side*15,15])\n            union() {\n                // Upper leg\n                translate([0,0,10])\n                    rotate([0,side*30,0])\n                    scale([3,3,12])\n                    cylinder(h=1, r=1);\n                \n                // Lower leg\n                translate([0,side*5,5])\n                    rotate([0,side*45,0])\n                    scale([2.5,2.5,10])\n                    cylinder(h=1, r=1);\n                \n                // Webbed foot\n                translate([0,side*8,0])\n                    rotate([0,0,side*90])\n                    scale([4,2,1])\n                    cube(8);\n            }\n    }\n    \n    // Rear legs\n    for(side=[-1,1]) {\n        translate([-15,side*12,10])\n            union() {\n                // Upper leg\n                translate([0,0,10])\n                    rotate([0,side*20,0])\n                    scale([4,4,15])\n                    cylinder(h=1, r=1);\n                \n                // Lower leg\n                translate([0,side*3,5])\n                    rotate([0,side*30,0])\n                    scale([3,3,12])\n                    cylinder(h=1, r=1);\n                \n                // Webbed foot\n                translate([0,side*5,0])\n                    rotate([0,0,side*90])\n                    scale([5,2.5,1])\n                    cube(10);\n            }\n    }\n}\n\nmodule frills() {\n    // Dorsal frill\n    for(i=[-2:2]) {\n        translate([i*8,0,50])\n            rotate([0,0,0])\n            scale([2,0.5,6])\n            cube(6);\n    }\n    \n    // Tail frill\n    for(i=[0:4]) {\n        translate([-i*6 - 20, 0, 25 - i*2])\n            rotate([0,0,-i*4])\n            scale([1.5,0.3,5-i*0.5])\n            cube(5-i*0.5);\n    }\n}\n\nmain();",
    "renders": true
  },
  {
    "mythical_creature": "bogcoil",
    "openscad_code": "// Bogcoil - mythical swamp serpent with mossy wings and glowing runes\n// Size: ~80mm length, 3D printable with minimal supports\n\n// Overall dimensions\nlength = 80;\nheight = 25;\nwing_span = 40;\n\n// Main body module\nmodule bogcoil_body() {\n    // Torso - segmented serpent body\n    union() {\n        // Head segment\n        color([0.2, 0.15, 0.1])\n        translate([0, 0, 5])\n        scale([1.2, 0.8, 1])\n        sphere(8, $fn=16);\n        \n        // Neck segments\n        for(i = [1:6]) {\n            color([0.25 - i*0.02, 0.2 - i*0.02, 0.15 - i*0.01])\n            translate([-i*6, 0, 5 - i*0.5])\n            scale([1.1 - i*0.1, 0.9 - i*0.05, 0.9 - i*0.05])\n            sphere(6, $fn=12);\n        }\n        \n        // Body segments\n        for(i = [7:12]) {\n            color([0.15, 0.12, 0.1])\n            translate([-i*6 - 10, 0, 2 - (i-7)*0.3])\n            scale([0.8, 0.7, 0.6])\n            sphere(5, $fn=10);\n        }\n    }\n}\n\n// Horns module\nmodule bogcoil_horns() {\n    // Left horn\n    color([0.3, 0.25, 0.2])\n    translate([5, 4, 10])\n    rotate([0, 30, -20])\n    cylinder(h=12, r1=2, r2=0.5, $fn=8);\n    \n    // Right horn\n    color([0.3, 0.25, 0.2])\n    translate([5, -4, 10])\n    rotate([0, 30, 20])\n    cylinder(h=12, r1=2, r2=0.5, $fn=8);\n}\n\n// Wings module with moss texture\nmodule bogcoil_wings() {\n    // Left wing\n    union() {\n        color([0.1, 0.3, 0.15])\n        translate([-10, 15, 8])\n        rotate([0, 0, -10])\n        scale([1, 0.4, 0.1])\n        sphere(12, $fn=20);\n        \n        // Wing membrane supports\n        for(i = [0:3]) {\n            color([0.05, 0.2, 0.1])\n            translate([-10 - i*3, 15 + i*2, 8])\n            rotate([0, 0, -10 - i*5])\n            scale([0.8, 0.3, 0.05])\n            cube([8, 2, 1]);\n        }\n    }\n    \n    // Right wing\n    mirror([0, 1, 0]) {\n        color([0.1, 0.3, 0.15])\n        translate([-10, 15, 8])\n        rotate([0, 0, -10])\n        scale([1, 0.4, 0.1])\n        sphere(12, $fn=20);\n        \n        // Wing membrane supports\n        for(i = [0:3]) {\n            color([0.05, 0.2, 0.1])\n            translate([-10 - i*3, 15 + i*2, 8])\n            rotate([0, 0, -10 - i*5])\n            scale([0.8, 0.3, 0.05])\n            cube([8, 2, 1]);\n        }\n    }\n}\n\n// Tail module\nmodule bogcoil_tail() {\n    // Main tail\n    union() {\n        for(i = [0:8]) {\n            color([0.12 + i*0.01, 0.1 + i*0.01, 0.08 + i*0.01])\n            translate([-60 - i*5, 0, -2 - i*0.8])\n            scale([0.8 - i*0.08, 0.7 - i*0.07, 0.6 - i*0.06])\n            sphere(4 - i*0.3, $fn=8);\n        }\n        \n        // Tail fin\n        color([0.08, 0.15, 0.12])\n        translate([-100, 0, -8])\n        rotate([0, 0, 0])\n        scale([0.5, 1.5, 0.1])\n        cylinder(h=1, r1=8, r2=0, $fn=3);\n    }\n}\n\n// Glowing runes\nmodule bogcoil_runes() {\n    // Runes along spine\n    for(i = [0:7]) {\n        color([0.2, 0.9, 0.3])\n        translate([-15 - i*8, 0, 7 - i*0.5])\n        rotate([0, 90, 0])\n        cylinder(h=0.5, r1=1.5, r2=1.5, $fn=6);\n    }\n    \n    // Eye glow\n    color([0.1, 0.8, 0.2])\n    translate([8, 2, 8])\n    sphere(1, $fn=8);\n    \n    color([0.1, 0.8, 0.2])\n    translate([8, -2, 8])\n    sphere(1, $fn=8);\n}\n\n// Legs (short for bog dwelling)\nmodule bogcoil_legs() {\n    // Front left leg\n    color([0.2, 0.15, 0.1])\n    translate([-15, 6, 0])\n    rotate([0, 0, 45])\n    cylinder(h=8, r1=2, r2=1.5, $fn=8);\n    \n    // Front right leg\n    mirror([0, 1, 0])\n    translate([-15, 6, 0])\n    rotate([0, 0, 45])\n    cylinder(h=8, r1=2, r2=1.5, $fn=8);\n    \n    // Back left leg\n    color([0.2, 0.15, 0.1])\n    translate([-45, 5, -2])\n    rotate([0, 0, 30])\n    cylinder(h=6, r1=1.5, r2=1, $fn=8);\n    \n    // Back right leg\n    mirror([0, 1, 0])\n    translate([-45, 5, -2])\n    rotate([0, 0, 30])\n    cylinder(h=6, r1=1.5, r2=1, $fn=8);\n}\n\n// Assemble the complete bogcoil\nunion() {\n    bogcoil_body();\n    bogcoil_horns();\n    bogcoil_wings();\n    bogcoil_tail();\n    bogcoil_runes();\n    bogcoil_legs();\n}",
    "renders": true
  },
  {
    "mythical_creature": "marshbasilisk",
    "openscad_code": "// Marshbasilisk - Medium complexity realistic style\n// Features: serpentine body, frilled neck, webbed limbs, venomous crest, aquatic tail\n\n$fn = 32;\n\n// Global scale for 3D printing\nscale_factor = 0.4;\n\nmodule head() {\n    // Main head structure\n    color(\"darkolivegreen\")\n    union() {\n        // Skull base\n        translate([0, 0, 5])\n            scale([1.2, 0.8, 1])\n            sphere(8);\n        \n        // Snout\n        translate([9, 0, 2])\n            scale([1.5, 0.7, 0.6])\n            sphere(6);\n        \n        // Venomous crest\n        color(\"forestgreen\")\n        translate([-2, 0, 12])\n            scale([0.3, 2, 0.8])\n            rotate([0, 15, 0])\n            cylinder(h = 15, r1 = 3, r2 = 0.5);\n    }\n    \n    // Eyes\n    color(\"crimson\")\n    for(x = [6, 6], y = [-3.5, 3.5]) {\n        translate([x, y, 7])\n            sphere(1.5);\n    }\n    \n    // Frilled neck membrane\n    color(\"darkgreen\")\n    difference() {\n        translate([-2, 0, 0])\n            scale([1.5, 2.5, 1])\n            rotate([90, 0, 0])\n            cylinder(h = 1, r1 = 12, r2 = 15);\n        \n        // Cutout for neck\n        translate([0, 0, -2])\n            cylinder(h = 4, r = 5);\n    }\n}\n\nmodule neck() {\n    color(\"darkolivegreen\")\n    hull() {\n        translate([-5, 0, 0])\n            sphere(4);\n        translate([0, 0, 5])\n            sphere(6);\n    }\n}\n\nmodule body_segment(i) {\n    // Tapering body segments\n    color(\"darkgreen\")\n    translate([i * 8 - 10, 0, 0])\n        scale([1, 1 - i * 0.1, 1 - i * 0.05])\n        sphere(8 - i * 0.5);\n}\n\nmodule leg(side, pos) {\n    // Webbed aquatic limbs\n    translate([pos, side * 6, -3])\n    color(\"forestgreen\")\n    union() {\n        // Upper leg\n        rotate([0, 0, side * 15])\n            cylinder(h = 8, r = 2);\n        \n        // Lower leg\n        translate([0, side * 4, -6])\n            rotate([0, 0, side * 30])\n            cylinder(h = 6, r = 1.5);\n        \n        // Webbed foot\n        translate([0, side * 7, -10])\n            rotate([90, 0, 0])\n            scale([2, 1, 0.5])\n            cylinder(h = 4, r1 = 2, r2 = 0.5);\n    }\n}\n\nmodule tail() {\n    // Aquatic tail with fin ridges\n    color(\"darkgreen\")\n    hull() {\n        translate([-40, 0, 0])\n            sphere(4);\n        translate([-55, 0, 0])\n            sphere(2);\n    }\n    \n    // Tail fins\n    color(\"forestgreen\")\n    for(i = [0:20:50]) {\n        translate([-i - 35, 0, 0])\n            rotate([0, 90 + i * 0.5, 0])\n            scale([0.5, 1, 0.1])\n            cylinder(h = 8 - i * 0.1, r1 = 3, r2 = 0.5);\n    }\n}\n\nmodule scales() {\n    // Dorsal scales along back\n    color(\"darkolivegreen\")\n    for(i = [0:5:40]) {\n        translate([-i, 0, 5 + i * 0.1])\n            scale([0.5, 2, 0.5])\n            rotate([0, 90, 0])\n            cylinder(h = 1, r1 = 2, r2 = 0.5);\n    }\n}\n\n// Assemble creature\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    head();\n    neck();\n    \n    // Body segments\n    for(i = [0:5]) {\n        body_segment(i);\n    }\n    \n    // Limbs\n    leg(1, 0);\n    leg(-1, 0);\n    leg(1, -15);\n    leg(-1, -15);\n    \n    // Tail\n    tail();\n    \n    // Scales\n    scales();\n}",
    "renders": true
  },
  {
    "mythical_creature": "fenwyrm",
    "openscad_code": "// Fenwyrm - a serpentine dragon of swamp and fen\n// 3D printable at 75 mm length, 40 mm wingspan, 25 mm height\n// All angles ≤45°, wall thickness ≥2 mm for FDM printing\n\nfenwyrm();\n\nmodule fenwyrm() {\n    color(\"DarkOliveGreen\")\n    union() {\n        body();         // main serpentine trunk\n        head();         // dragon-like head\n        wings();        // membranous wings folded along back\n        tail_spikes();  // defensive tail spikes\n        scale_pattern();// raised scale texture\n    }\n}\n\n// Serpentine body built from stacked tapered cylinders\nmodule body() {\n    for(i=[0:15]) {\n        translate([i*4.5, 0, 2.5+sin(i*20)*1.5])\n        rotate([0, 0, i*12])\n        cylinder(h=5, r1=6-i*0.25, r2=5.5-i*0.25, $fn=16);\n    }\n}\n\n// Dragon head with horns and snout\nmodule head() {\n    // snout\n    translate([70, 0, 8])\n    rotate([0, -10, 0])\n    cylinder(h=12, r1=4, r2=2, $fn=12);\n    \n    // head base\n    translate([62, 0, 10])\n    sphere(6, $fn=16);\n    \n    // horns\n    for(side=[-1,1]) {\n        translate([60, side*5, 15])\n        rotate([0, 30*side, -20])\n        cylinder(h=8, r1=2, r2=0.5, $fn=8);\n    }\n    \n    // eyes\n    color(\"DarkRed\")\n    for(side=[-1,1]) {\n        translate([68, side*3, 12])\n        sphere(1.5, $fn=8);\n    }\n}\n\n// Folded wings along back - no overhangs\nmodule wings() {\n    for(side=[-1,1]) {\n        // wing base\n        translate([30, side*8, 18])\n        rotate([0, 0, 90*side])\n        cylinder(h=2, r1=10, r2=8, $fn=12);\n        \n        // wing membrane ridges\n        for(i=[0:4]) {\n            translate([25+i*2, side*(10-i), 18-i])\n            rotate([0, 45, 0])\n            cube([3, 1, 8-i*1.5]);\n        }\n    }\n}\n\n// Defensive tail spikes\nmodule tail_spikes() {\n    for(i=[0:3]) {\n        translate([-5-i*8, 0, 2+i*1.5])\n        rotate([0, 20, 0])\n        cylinder(h=4, r1=1.5, r2=0.5, $fn=6);\n    }\n}\n\n// Raised scale pattern along back\nmodule scale_pattern() {\n    for(i=[0:20]) {\n        translate([i*3.5, 0, 5+sin(i*20)*2])\n        rotate([0, 0, i*15])\n        scale([1, 0.7, 0.3])\n        sphere(1.5, $fn=6);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "reedserpent",
    "openscad_code": "// Reedserpent - A mythical serpentine creature with reed-like appendages\n// Wings included for gliding over marshes, reed fronds for camouflage\n\nmodule reedserpent() {\n    color([0.2, 0.4, 0.2]) // Deep green body\n    \n    union() {\n        // Main serpentine body\n        hull() {\n            translate([0, 0, 5]) sphere(d=8, $fn=20);\n            translate([0, 0, 15]) sphere(d=12, $fn=20);\n            translate([0, 0, 25]) sphere(d=14, $fn=20);\n            translate([0, 0, 35]) sphere(d=12, $fn=20);\n            translate([0, 0, 45]) sphere(d=8, $fn=20);\n        }\n        \n        // Head\n        translate([0, 0, 50]) {\n            color([0.15, 0.35, 0.15])\n            sphere(d=10, $fn=20);\n            \n            // Eyes\n            color([0.8, 0.8, 0.2])\n            translate([2.5, 3, 2]) sphere(d=1.5, $fn=10);\n            translate([-2.5, 3, 2]) sphere(d=1.5, $fn=10);\n            \n            // Snout ridges\n            color([0.1, 0.3, 0.1])\n            for(i=[-3:3]) {\n                translate([i*0.8, 0, 5-i]) cylinder(h=0.5, d1=1, d2=0.3, $fn=6);\n            }\n        }\n        \n        // Reed fronds along back\n        color([0.3, 0.5, 0.2])\n        for(pos=[8:8:40]) {\n            translate([0, 8, pos]) rotate([30, 0, 0]) \n                cylinder(h=12, d1=2, d2=0.5, $fn=6);\n            translate([0, -8, pos]) rotate([-30, 0, 0]) \n                cylinder(h=12, d1=2, d2=0.5, $fn=6);\n        }\n        \n        // Wings - membrane between reed structures\n        color([0.25, 0.45, 0.25, 0.7])\n        translate([0, 8, 25]) rotate([0, 0, 45]) {\n            // Wing frame\n            for(i=[0:15:60]) {\n                rotate([0, 0, i]) \n                    translate([0, 0, 0]) cylinder(h=20, d1=1, d2=0.5, $fn=4);\n            }\n            // Wing membrane\n            hull() {\n                translate([0, 0, 0]) sphere(d=1);\n                translate([15, 0, 0]) sphere(d=1);\n                translate([10, 0, 10]) sphere(d=1);\n            }\n        }\n        \n        mirror([0, 1, 0]) translate([0, 8, 25]) rotate([0, 0, 45]) {\n            for(i=[0:15:60]) {\n                rotate([0, 0, i]) \n                    translate([0, 0, 0]) cylinder(h=20, d1=1, d2=0.5, $fn=4);\n            }\n            hull() {\n                translate([0, 0, 0]) sphere(d=1);\n                translate([15, 0, 0]) sphere(d=1);\n                translate([10, 0, 10]) sphere(d=1);\n            }\n        }\n        \n        // Tail segments\n        color([0.2, 0.4, 0.2])\n        for(i=[1:5]) {\n            translate([0, 0, -i*6]) scale([1-i*0.1, 1-i*0.1, 1])\n                sphere(d=8-i, $fn=16);\n        }\n        \n        // Reed-like fins\n        color([0.35, 0.55, 0.25])\n        for(i=[10:10:30]) {\n            rotate([0, 0, i]) translate([7, 0, 25]) \n                rotate([90, 0, 0]) cylinder(h=6, d1=2, d2=1, $fn=6);\n            rotate([0, 0, -i]) translate([-7, 0, 25]) \n                rotate([90, 0, 0]) cylinder(h=6, d1=2, d2=1, $fn=6);\n        }\n        \n        // Magical glow spots\n        color([0.4, 0.6, 0.3, 0.5])\n        for(pos=[12:8:36]) {\n            translate([5, 3, pos]) sphere(d=1.5, $fn=8);\n            translate([-5, -3, pos]) sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Scale to print size (80mm total length)\nscale(1.6) reedserpent();",
    "renders": true
  },
  {
    "mythical_creature": "riverdrake",
    "openscad_code": "// Riverdrake - Medium complexity realistic mythical creature\n// Wings folded against body for 3D printing\n// Size: 60mm nose to tail\n\n// Color scheme\n$fa = 2;\n$fs = 1;\n\n// Main body module\nmodule body() {\n    color([0.2, 0.4, 0.3]) {\n        // Torso\n        union() {\n            translate([0, 0, 5]) \n                scale([1.2, 0.8, 1]) \n                sphere(8);\n            \n            // Neck\n            translate([12, 0, 8]) \n                rotate([0, -10, 0]) \n                cylinder(h=15, r1=4, r2=3);\n                \n            // Tail segments\n            for(i = [0:2]) {\n                translate([-8 - i*6, 0, 4 - i]) \n                    scale([1.2 - i*0.2, 0.8 - i*0.1, 0.8]) \n                    sphere(6 - i);\n            }\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    color([0.15, 0.35, 0.25]) {\n        union() {\n            // Snout\n            translate([20, 0, 10]) \n                scale([2, 1, 1]) \n                sphere(4);\n                \n            // Head base\n            translate([17, 0, 12]) \n                sphere(5);\n                \n            // Horns\n            color([0.4, 0.3, 0.2]) {\n                translate([15, 2, 15]) \n                    rotate([0, -20, 20]) \n                    cylinder(h=6, r1=1.5, r2=0.5);\n                translate([15, -2, 15]) \n                    rotate([0, -20, -20]) \n                    cylinder(h=6, r1=1.5, r2=0.5);\n            }\n            \n            // Eyes\n            color([0.8, 0.1, 0.1]) {\n                translate([22, 2.5, 10]) sphere(1);\n                translate([22, -2.5, 10]) sphere(1);\n            }\n        }\n    }\n}\n\n// Leg modules\nmodule legs() {\n    color([0.25, 0.45, 0.35]) {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([8, side*5, 0]) {\n                union() {\n                    // Upper leg\n                    rotate([0, side*15, 0]) \n                        cylinder(h=8, r1=2, r2=1.5);\n                    \n                    // Lower leg\n                    translate([0, 0, -8]) \n                        rotate([0, side*30, 0]) \n                        cylinder(h=8, r1=1.5, r2=1);\n                    \n                    // Webbed foot\n                    translate([0, side*3, -16]) {\n                        scale([1.5, 0.5, 2]) \n                        sphere(2);\n                        translate([0, side*2, 0]) \n                            scale([1, 0.3, 1.5]) \n                            sphere(1.5);\n                    }\n                }\n            }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([-8, side*6, 0]) {\n                union() {\n                    // Upper leg\n                    rotate([0, side*10, 0]) \n                        cylinder(h=10, r1=2.5, r2=2);\n                    \n                    // Lower leg\n                    translate([0, 0, -10]) \n                        rotate([0, side*25, 0]) \n                        cylinder(h=10, r1=2, r2=1.5);\n                    \n                    // Webbed foot\n                    translate([0, side*3, -20]) {\n                        scale([2, 0.5, 2.5]) \n                        sphere(2.5);\n                        translate([0, side*2, 0]) \n                            scale([1.5, 0.3, 2]) \n                            sphere(2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wing modules (folded against body)\nmodule wings() {\n    color([0.1, 0.3, 0.2, 0.8]) {\n        for(side = [-1, 1]) {\n            translate([0, side*9, 8]) {\n                rotate([0, 0, side*20]) {\n                    // Wing base\n                    scale([2, 0.2, 1.5]) \n                        sphere(3);\n                    \n                    // Wing membranes\n                    for(i = [0:2]) {\n                        translate([-3 - i*2, 0, -1 - i*0.5]) \n                            rotate([0, side*5*i, 0]) \n                            scale([1.5 - i*0.3, 0.1, 1.2 - i*0.2]) \n                            sphere(2 - i*0.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Scale texture\nmodule scales() {\n    color([0.15, 0.35, 0.25]) {\n        for(i = [0:6]) {\n            for(j = [0:8]) {\n                angle = j * 45;\n                radius = 6 + i * 1.5;\n                x = cos(angle) * radius;\n                y = sin(angle) * radius;\n                \n                if(abs(y) < 8) {\n                    translate([x, y, 5 + sin(i)*1.5]) \n                        rotate([90, 0, angle]) \n                        scale([1.5, 1, 0.3]) \n                        sphere(0.5);\n                }\n            }\n        }\n    }\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    color([0.1, 0.25, 0.2, 0.9]) {\n        for(i = [0:4]) {\n            translate([-2 - i*3, 0, 8 + i*0.5]) {\n                scale([0.5, 3 - i*0.3, 2]) \n                    rotate([0, 0, 90]) \n                    cylinder(h=1, r1=0, r2=1);\n            }\n        }\n    }\n}\n\n// Assemble the riverdrake\nunion() {\n    body();\n    head();\n    legs();\n    wings();\n    scales();\n    dorsal_fin();\n}",
    "renders": true
  },
  {
    "mythical_creature": "streamcoil",
    "openscad_code": "// Streamcoil Mythical Creature - Realistic Style\n// A serpentine aquatic dragon with flowing fins and water magic\n\n$fn = 48;\nscale_factor = 0.8;\n\nmodule streamcoil_body() {\n    // Main serpentine body segments\n    color([0.1, 0.3, 0.6]) \n    union() {\n        for(i = [0:10]) {\n            translate([i*5, sin(i*30)*3, cos(i*25)*2]) \n            rotate([0, i*15, 0])\n            scale([1 - i*0.05, 1 - i*0.03, 1 - i*0.05])\n            sphere(d=12 - i*0.8);\n        }\n    }\n    \n    // Scaled armor plating along spine\n    color([0.2, 0.4, 0.7]) \n    for(i = [0:9]) {\n        translate([i*5 + 2.5, sin(i*30)*3 + 5, cos(i*25)*2])\n        rotate([90, 0, 45])\n        scale([2, 3, 0.5])\n        cube([4, 6, 1]);\n    }\n}\n\nmodule streamcoil_head() {\n    // Dragon-like head\n    color([0.15, 0.35, 0.65])\n    union() {\n        // Snout\n        translate([-5, 0, 0])\n        scale([1.5, 1, 1])\n        sphere(d=10);\n        \n        // Main head\n        sphere(d=12);\n        \n        // Horns\n        color([0.8, 0.9, 1])\n        translate([2, 4, 6])\n        rotate([30, 0, 0])\n        cylinder(h=8, d1=2, d2=0.5);\n        \n        translate([2, -4, 6])\n        rotate([30, 0, 0])\n        cylinder(h=8, d1=2, d2=0.5);\n        \n        // Eyes\n        color([0, 0.8, 1])\n        translate([4, 3, 2])\n        sphere(d=2);\n        \n        translate([4, -3, 2])\n        sphere(d=2);\n        \n        // Gills\n        color([0.05, 0.25, 0.55])\n        for(i = [0:3]) {\n            translate([1, 3 + i*1.5, -3])\n            rotate([0, 90, 0])\n            cylinder(h=0.5, d=2);\n        }\n        \n        for(i = [0:3]) {\n            translate([1, -3 - i*1.5, -3])\n            rotate([0, 90, 0])\n            cylinder(h=0.5, d=2);\n        }\n    }\n}\n\nmodule streamcoil_fins() {\n    // Dorsal fin\n    color([0.3, 0.5, 0.8, 0.8])\n    for(i = [2:8]) {\n        translate([i*5 + 2.5, sin(i*30)*3 + 8, cos(i*25)*2])\n        rotate([0, 0, -20])\n        scale([1, 2, 0.5])\n        cylinder(h=6, d1=4, d2=0.5);\n    }\n    \n    // Pectoral fins\n    color([0.25, 0.45, 0.75, 0.8])\n    translate([15, 0, -3])\n    rotate([0, 0, 30])\n    scale([1.5, 1, 0.3])\n    cylinder(h=12, d1=6, d2=2);\n    \n    translate([15, 0, -3])\n    rotate([0, 0, -30])\n    scale([1.5, 1, 0.3])\n    cylinder(h=12, d1=6, d2=2);\n}\n\nmodule streamcoil_tail() {\n    // Flowing tail fin\n    color([0.35, 0.55, 0.85, 0.7])\n    translate([55, sin(10*30)*3, cos(10*25)*2])\n    rotate([0, 0, 0])\n    scale([1, 3, 0.2])\n    cylinder(h=15, d1=8, d2=15);\n    \n    // Tail ridges\n    color([0.2, 0.4, 0.7])\n    for(i = [0:5]) {\n        translate([55 + i*2, sin(10*30)*3 + i*0.5, cos(10*25)*2 + i*0.5])\n        rotate([0, 0, i*5])\n        scale([0.5, 2, 0.5])\n        cube([3, 4, 1]);\n    }\n}\n\nmodule water_spirals() {\n    // Magical water spirals around body\n    color([0.4, 0.7, 1, 0.6])\n    for(i = [0:5]) {\n        translate([10 + i*8, sin(i*45)*5, cos(i*30)*3 + 5])\n        rotate([90, i*60, 0])\n        scale([0.5, 0.5, 1])\n        cylinder(h=12, d=2);\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    streamcoil_body();\n    streamcoil_head();\n    streamcoil_fins();\n    streamcoil_tail();\n    water_spirals();\n}",
    "renders": true
  },
  {
    "mythical_creature": "lakewyrm",
    "openscad_code": "// Lakewyrm - a serpentine water dragon with finned wings and aquatic features\n// Realistic medium-complexity model for 3D printing\n\n// Overall dimensions: 80mm long, 30mm wide, 25mm tall\n\n// Colors\ncolor([0.1,0.3,0.5])     // Deep blue body\nunion() {\n\n    // Main body segments\n    module bodySegment(radius, length, scale) {\n        scale([scale, 1, scale])\n        union() {\n            // Scaled cylinder for body\n            cylinder(h=length, r=radius, $fn=16);\n            // Dorsal fin ridge\n            translate([0, 0, radius])\n            rotate([0, 0, 0])\n            difference() {\n                cube([length*0.8, 2, 3], center=true);\n                translate([0, 0, 1.5])\n                cube([length*0.7, 1.8, 3.2], center=true);\n            }\n        }\n    }\n\n    // Head\n    translate([0, 0, 5])\n    union() {\n        // Snout\n        scale([1.3, 0.8, 0.8])\n        sphere(8, $fn=24);\n        \n        // Lower jaw\n        translate([4, 0, -6])\n        rotate([15, 0, 0])\n        scale([1.2, 0.7, 0.4])\n        sphere(7, $fn=20);\n        \n        // Horns\n        for(i=[-1,1]) {\n            translate([0, i*6, 8])\n            rotate([0, i*15, 0])\n            cylinder(h=12, r1=2, r2=0.5, $fn=8);\n        }\n    }\n\n    // Neck and body\n    translate([-15, 0, 5])\n    bodySegment(6, 20, 1.1);\n    \n    translate([-35, 0, 4])\n    bodySegment(5, 20, 1);\n    \n    translate([-55, 0, 3])\n    bodySegment(4, 15, 0.9);\n    \n    // Tail\n    translate([-70, 0, 2])\n    union() {\n        for(i=[0:4]) {\n            translate([-i*4, 0, -i*0.5])\n            scale([1-i*0.15, 1-i*0.15, 1-i*0.15])\n            rotate([0, 0, i*10])\n            bodySegment(3.5-i*0.5, 4, 0.8);\n        }\n    }\n\n    // Wing membranes\n    color([0.2,0.4,0.7])\n    for(side=[-1,1]) {\n        translate([-25, side*8, 8])\n        rotate([0, 0, side*30])\n        union() {\n            // Wing arm\n            cylinder(h=15, r=1.5, $fn=8);\n            \n            // Wing membrane\n            translate([7.5, side*5, 5])\n            rotate([0, 90, 0])\n            difference() {\n                scale([1, 0.6, 1])\n                sphere(8, $fn=20);\n                translate([0, 0, -9])\n                cube([20, 20, 9], center=true);\n            }\n        }\n    }\n\n    // Legs\n    color([0.05,0.25,0.45])\n    for(side=[-1,1]) {\n        translate([-30, side*8, 0])\n        union() {\n            // Upper leg\n            rotate([0, 0, side*45])\n            cylinder(h=8, r=2, $fn=8);\n            \n            // Lower leg\n            translate([0, side*8, -5])\n            rotate([0, 0, side*-30])\n            cylinder(h=6, r=1.5, $fn=8);\n            \n            // Webbed foot\n            translate([0, side*12, -8])\n            scale([1, 1.5, 0.3])\n            sphere(3, $fn=12);\n        }\n    }\n\n    // Scales pattern\n    color([0.15,0.35,0.55])\n    for(i=[0:7]) {\n        translate([-10-i*8, 0, 5])\n        rotate([0, 0, i*15])\n        for(j=[-2:2]) {\n            translate([0, j*3, 0])\n            sphere(1.2, $fn=6);\n        }\n    }\n\n    // Eye\n    color([0.1,0.1,0.1])\n    translate([4, -3, 7])\n    sphere(1.5, $fn=12);\n    translate([4, 3, 7])\n    sphere(1.5, $fn=12);\n}",
    "renders": true
  },
  {
    "mythical_creature": "pondserpent",
    "openscad_code": "// Pond Serpent - Realistic Mythical Creature\n// Features: serpentine body, aquatic fins, mystical horn, scaled texture\n\n// Constants\nbody_len = 80;\nhead_size = 12;\ntail_width = 3;\nfin_height = 8;\nhorn_height = 15;\nscale_size = 1.5;\n\n// Colors\nserpent_color = [0.1, 0.6, 0.4]; // Deep emerald\nfin_color = [0.2, 0.8, 0.7];   // Aqua\nhorn_color = [0.9, 0.9, 0.7];  // Pearl\n\nmodule head() {\n    color(serpent_color)\n    union() {\n        // Main head shape\n        translate([0, 0, head_size/2])\n            scale([1.2, 0.8, 1])\n                sphere(d=head_size, $fn=32);\n        \n        // Snout\n        translate([head_size/2, 0, 0])\n            scale([1.5, 0.6, 0.6])\n                sphere(d=head_size*0.8, $fn=24);\n                \n        // Eyes\n        color([0, 0, 0])\n        for(x = [-1, 1]) {\n            translate([head_size/3, x*head_size/3, head_size/3])\n                sphere(d=head_size/6, $fn=16);\n        }\n        \n        // Mystical horn\n        color(horn_color)\n        translate([0, 0, head_size*0.8])\n            cylinder(h=horn_height, d1=horn_height/3, d2=horn_height/10, $fn=8);\n    }\n}\n\nmodule segment(width, height, length) {\n    color(serpent_color)\n    hull() {\n        translate([0, 0, 0])\n            sphere(d=width, $fn=16);\n        translate([length, 0, 0])\n            sphere(d=width*0.9, $fn=16);\n    }\n}\n\nmodule dorsal_fin() {\n    color(fin_color)\n    difference() {\n        // Main fin\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=fin_height, d1=fin_height/2, d2=0, $fn=3);\n        \n        // Cutouts for webbing\n        for(i = [1:3]) {\n            translate([0, i*fin_height/4, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=fin_height*0.9, d1=fin_height/3, d2=0, $fn=3);\n        }\n    }\n}\n\nmodule scales() {\n    color(serpent_color)\n    for(i = [0:5]) {\n        for(j = [0:8]) {\n            rotate([0, j*40, 0])\n                translate([i*scale_size*2, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=scale_size/3, d=scale_size, $fn=6);\n        }\n    }\n}\n\nmodule tail_segment(pos, width) {\n    translate(pos)\n        rotate([0, 0, pos[0]*3])\n            segment(width, width, width*1.2);\n}\n\nmodule body() {\n    union() {\n        // Generate serpentine body\n        segments = 12;\n        for(i = [0:segments-1]) {\n            t = i/segments;\n            x = i*body_len/segments;\n            y = sin(t*360)*8;\n            z = cos(t*180)*3;\n            w = head_size*(1-t) + tail_width*t;\n            \n            tail_segment([x, y, z], w);\n            \n            // Add dorsal fins every few segments\n            if(i % 3 == 0 && i > 1) {\n                translate([x, y, z+w/2])\n                    rotate([0, 0, -90])\n                        dorsal_fin();\n            }\n            \n            // Add scales\n            if(i > 1) {\n                translate([x, y, z-w/2])\n                    scale([w/head_size, w/head_size, w/head_size])\n                        scales();\n            }\n        }\n    }\n}\n\nmodule side_fins() {\n    color(fin_color)\n    for(side = [-1, 1]) {\n        translate([body_len/3, side*head_size/2, -head_size/4])\n            rotate([0, 90, 0])\n                difference() {\n                    cylinder(h=head_size, d1=head_size, d2=head_size/2, $fn=3);\n                    translate([0, 0, -1])\n                        cube([head_size*2, head_size, head_size*2], center=true);\n                }\n    }\n}\n\n// Main assembly\ntranslate([-body_len/2, 0, head_size/2])\n    union() {\n        head();\n        translate([head_size*0.8, 0, 0])\n            body();\n        side_fins();\n    }",
    "renders": true
  },
  {
    "mythical_creature": "waterhydra",
    "openscad_code": "$fn=32;\n\n// Water Hydra - Mythical aquatic serpentine creature\n// Main body with serpentine curves\nmodule hydra_body() {\n    color(\"teal\") {\n        // Central torso\n        translate([0, 0, 15]) {\n            sphere(d=25);\n        }\n        \n        // S-curved neck segments\n        for(i = [0:2]) {\n            translate([i*8 - 8, 0, 25 + i*5]) {\n                rotate([0, i*15 - 15, 0]) {\n                    cylinder(h=12, d1=20 - i*3, d2=18 - i*3);\n                }\n            }\n        }\n    }\n}\n\n// Hydra head with snout and features\nmodule hydra_head() {\n    color(\"steelblue\") {\n        // Main head\n        translate([12, 0, 45]) {\n            sphere(d=18);\n            \n            // Snout\n            translate([8, 0, 0]) {\n                rotate([0, 0, -30]) {\n                    cylinder(h=12, d1=14, d2=8);\n                }\n            }\n            \n            // Eyes\n            for(side = [-1, 1]) {\n                translate([5, side*5, 3]) {\n                    color(\"darkblue\") sphere(d=3);\n                }\n            }\n            \n            // Horns\n            for(side = [-1, 1]) {\n                translate([0, side*6, 8]) {\n                    rotate([side*20, 0, 0]) {\n                        cylinder(h=8, d1=3, d2=1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Webbed fin spines along back\nmodule dorsal_fins() {\n    color(\"cyan\") {\n        for(i = [0:4]) {\n            translate([-10 + i*5, 0, 25 + i*2]) {\n                rotate([0, 0, 0]) {\n                    scale([1, 0.3, 1]) {\n                        sphere(d=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Scaled tail segments\nmodule tail() {\n    color(\"darkturquoise\") {\n        for(i = [0:5]) {\n            translate([-15 - i*6, 0, 15 - i*3]) {\n                rotate([0, 0, i*10]) {\n                    sphere(d=20 - i*2.5);\n                }\n            }\n        }\n    }\n}\n\n// Multiple serpentine necks (hydra characteristic)\nmodule hydra_necks() {\n    for(angle = [30, 0, -30]) {\n        rotate([0, 0, angle]) {\n            translate([8, 0, 30]) {\n                rotate([0, angle/2, 0]) {\n                    cylinder(h=20, d1=12, d2=8);\n                }\n                translate([15, 0, 35]) {\n                    sphere(d=10);\n                }\n            }\n        }\n    }\n}\n\n// Webbed feet for aquatic movement\nmodule webbed_feet() {\n    color(\"royalblue\") {\n        for(side = [-1, 1]) {\n            translate([0, side*10, 5]) {\n                // Upper leg\n                cylinder(h=8, d1=6, d2=4);\n                \n                // Webbed foot\n                translate([0, side*3, -4]) {\n                    rotate([90, 0, side*15]) {\n                        scale([1.5, 1, 0.3]) {\n                            sphere(d=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Magical water droplets around creature\nmodule water_orbs() {\n    color([0.2, 0.6, 0.9, 0.7]) {\n        for(i = [0:7]) {\n            rotate([0, i*45, 0]) {\n                translate([30, 0, 25 + sin(i*45)*5]) {\n                    sphere(d=3);\n                }\n            }\n        }\n    }\n}\n\n// Assembly of all parts\nunion() {\n    hydra_body();\n    hydra_head();\n    hydra_necks();\n    tail();\n    dorsal_fins();\n    webbed_feet();\n    water_orbs();\n}",
    "renders": true
  },
  {
    "mythical_creature": "tidalwyrm",
    "openscad_code": "// Tidalwyrm - A sea serpent with dorsal fins and webbed limbs\n// Overall size ~80mm length\n\n// Colors\ncolor_ocean = \"DodgerBlue\";\ncolor_fins = \"SteelBlue\";\ncolor_eyes = \"Gold\";\n\n// Scale factor for easy resizing\nscale_factor = 1;\n\n// Main body\nmodule tidalwyrm_body() {\n    color(color_ocean)\n    union() {\n        // Head\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1.2])\n            sphere(r=8);\n        \n        // Snout\n        translate([10, 0, 15])\n            rotate([0, -10, 0])\n            scale([1.5, 0.6, 0.6])\n            cylinder(h=8, r1=5, r2=2);\n        \n        // Neck\n        translate([-5, 0, 15])\n            cylinder(h=8, r=5);\n        \n        // Main body segments\n        for(i = [0:5]) {\n            translate([-15 - i*8, 0, 15 - i*1.5])\n                scale([1 - i*0.08, 1 - i*0.08, 1 - i*0.05])\n                sphere(r=7);\n        }\n        \n        // Tail\n        translate([-55, 0, 8])\n            rotate([0, -15, 0])\n            scale([0.3, 0.3, 0.3])\n            cylinder(h=25, r1=5, r2=1);\n    }\n}\n\n// Dorsal fins\nmodule dorsal_fins() {\n    color(color_fins)\n    for(i = [0:3]) {\n        translate([-20 - i*10, 0, 20 - i*1.5])\n            rotate([0, 0, 0])\n            scale([0.8 - i*0.1, 1, 0.5])\n            difference() {\n                cube([8, 1, 6]);\n                translate([4, 0, 3])\n                    sphere(r=3);\n            }\n    }\n}\n\n// Side fins (limbs)\nmodule side_fins() {\n    color(color_fins)\n    union() {\n        // Front fins\n        translate([0, 10, 10])\n            rotate([0, 0, 45])\n            scale([0.8, 0.3, 1])\n            sphere(r=6);\n        \n        translate([0, -10, 10])\n            rotate([0, 0, -45])\n            scale([0.8, 0.3, 1])\n            sphere(r=6);\n        \n        // Rear fins\n        translate([-30, 8, 8])\n            rotate([0, 0, 30])\n            scale([0.7, 0.3, 0.8])\n            sphere(r=5);\n        \n        translate([-30, -8, 8])\n            rotate([0, 0, -30])\n            scale([0.7, 0.3, 0.8])\n            sphere(r=5);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(color_eyes)\n    union() {\n        translate([7, 3, 17])\n            sphere(r=1.5);\n        translate([7, -3, 17])\n            sphere(r=1.5);\n    }\n}\n\n// Scales pattern\nmodule scales() {\n    color(color_ocean)\n    difference() {\n        union() {\n            // Scale patches along body\n            for(i = [0:8]) {\n                for(j = [0:3]) {\n                    translate([-10 - i*5, 0, 15 - j*2])\n                        scale([0.3, 0.3, 0.1])\n                        sphere(r=3);\n                }\n            }\n        }\n        // Remove from inside body\n        translate([0, 0, 15])\n            scale([1.5, 1.5, 1.5])\n            sphere(r=50);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    tidalwyrm_body();\n    dorsal_fins();\n    side_fins();\n    eyes();\n    scales();\n}",
    "renders": true
  },
  {
    "mythical_creature": "oceanicdrake",
    "openscad_code": "// Oceanic Drake - Sea Dragon with Aquatic Features\n// Realistic medium complexity 3D printable model\n\n$fn = 32;\n\n// Main colors\nocean_blue = [0.1, 0.3, 0.6];\ndeep_blue = [0.05, 0.15, 0.4];\npearl_white = [0.9, 0.9, 0.95];\ngold = [0.8, 0.7, 0.1];\n\n// Body dimensions\nbody_length = 60;\nbody_width = 25;\nbody_height = 20;\n\n// Main body module\nmodule drake_body() {\n    color(ocean_blue) {\n        // Central torso\n        translate([0, 0, 10])\n            scale([1, 0.6, 0.7])\n            sphere(d=body_width);\n        \n        // Extended serpentine body\n        for(i = [0:5]) {\n            translate([-i*8, 0, 10 - i*2])\n                scale([1 - i*0.1, 0.8 - i*0.05, 0.8 - i*0.05])\n                sphere(d=body_width - i*2);\n        }\n    }\n}\n\n// Head module with aquatic features\nmodule drake_head() {\n    color(deep_blue) {\n        // Main head shape\n        translate([body_length/2, 0, 20])\n            rotate([0, 10, 0])\n            scale([1.2, 0.8, 0.9])\n            sphere(d=body_width * 0.8);\n        \n        // Snout extension\n        translate([body_length/2 + 15, 0, 22])\n            rotate([0, -20, 0])\n            scale([1.5, 0.6, 0.5])\n            sphere(d=body_width * 0.5);\n        \n        // Webbed crest\n        for(i = [0:3]) {\n            translate([body_length/2 - 5 + i*3, 0, 25 + i*2])\n                rotate([0, 0, 15])\n                scale([0.3, 0.8, 0.1])\n                cube([8, 12 - i*2, 2]);\n        }\n    }\n    \n    // Eyes\n    color(gold) {\n        translate([body_length/2 + 10, 8, 22])\n            sphere(d=3);\n        translate([body_length/2 + 10, -8, 22])\n            sphere(d=3);\n    }\n}\n\n// Fin modules\nmodule webbed_fin(x_pos, y_pos, z_pos, angle) {\n    color(pearl_white) {\n        translate([x_pos, y_pos, z_pos])\n            rotate([0, 0, angle])\n            scale([1, 0.3, 0.05])\n            sphere(d=15);\n        \n        // Fin rays\n        for(i = [-2:2]) {\n            translate([x_pos + i*2, y_pos, z_pos + abs(i)*2])\n                rotate([0, 0, angle + i*10])\n                cube([12, 1, 0.5]);\n        }\n    }\n}\n\n// Tail module with fluke\nmodule aquatic_tail() {\n    color(deep_blue) {\n        // Tail segments\n        for(i = [0:6]) {\n            translate([-body_length/2 - i*8, 0, 15 - i*3])\n                scale([1 - i*0.15, 0.7 - i*0.1, 0.7 - i*0.1])\n                sphere(d=body_width - i*3);\n        }\n        \n        // Tail fluke\n        translate([-body_length/2 - 45, 0, 5])\n            rotate([0, 0, 0])\n            scale([0.5, 3, 0.1])\n            sphere(d=20);\n    }\n}\n\n// Scale texture module\nmodule scales(base_x, base_y, base_z) {\n    color(ocean_blue) {\n        for(i = [0:4]) {\n            for(j = [0:3]) {\n                translate([base_x + i*5, base_y + j*5 - 7.5, base_z])\n                    scale([1, 0.7, 0.3])\n                    sphere(d=3);\n            }\n        }\n    }\n}\n\n// Leg modules with webbed feet\nmodule webbed_limb(x_pos, y_pos, z_pos) {\n    color(deep_blue) {\n        // Upper leg\n        translate([x_pos, y_pos, z_pos])\n            rotate([0, 0, y_pos > 0 ? -30 : 30])\n            cylinder(h=12, d1=6, d2=4);\n        \n        // Lower leg\n        translate([x_pos + 8, y_pos + (y_pos > 0 ? -5 : 5), z_pos - 8])\n            rotate([0, 0, y_pos > 0 ? 20 : -20])\n            cylinder(h=10, d1=4, d2=3);\n        \n        // Webbed foot\n        translate([x_pos + 15, y_pos + (y_pos > 0 ? -8 : 8), z_pos - 12])\n            rotate([90, 0, 0])\n            scale([1, 1.5, 0.3])\n            cylinder(h=8, d=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body assembly\n    drake_body();\n    drake_head();\n    aquatic_tail();\n    \n    // Fins\n    webbed_fin(body_length/2 - 10, 15, 25, 30);\n    webbed_fin(body_length/2 - 10, -15, 25, -30);\n    webbed_fin(-body_length/2 + 5, 0, 25, 0);\n    \n    // Legs\n    webbed_limb(body_length/4, 12, 5);\n    webbed_limb(body_length/4, -12, 5);\n    webbed_limb(-body_length/4, 10, 0);\n    webbed_limb(-body_length/4, -10, 0);\n    \n    // Scale details\n    scales(-10, 0, 15);\n    scales(-20, 0, 13);\n    scales(-30, 0, 11);\n}",
    "renders": true
  },
  {
    "mythical_creature": "deepseawyrm",
    "openscad_code": "// DeepSeawyrm - A mythical sea serpent with bioluminescent features\n// Designed for FDM 3D printing, no steep overhangs\n\n// Overall dimensions: 80mm length, 40mm height, 30mm width\n\n$fn = 32;\n\n// Main colors\nbody_color = \"darkslateblue\";\nglow_color = \"cyan\";\naccent_color = \"darkgoldenrod\";\n\n// Body segments with slight tapering\nmodule body_segment(radius, length, glow = false) {\n    color(glow ? glow_color : body_color) {\n        difference() {\n            cylinder(h = length, r1 = radius, r2 = radius * 0.9);\n            // Ventral ridge\n            translate([0, -radius, 0])\n                cube([radius * 2, radius * 0.3, length], center = true);\n        }\n        // Bioluminescent spots\n        if (glow) {\n            for (i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([radius * 0.7, 0, length/2])\n                        sphere(r = radius * 0.15);\n            }\n        }\n    }\n}\n\n// Scale pattern along body\nmodule scales(base_radius, length) {\n    for (i = [0:length/2 - 1]) {\n        translate([0, 0, i * 2])\n            rotate([0, 0, (i % 2) * 45])\n                scale([0.8, 0.3, 0.1])\n                    cylinder(h = base_radius * 0.5, r = base_radius * 0.3);\n    }\n}\n\n// Fin module with support ridges\nmodule fin(length, height) {\n    color(body_color) {\n        linear_extrude(height = 0.5)\n            polygon(points = [\n                [0, 0],\n                [length * 0.3, height],\n                [length * 0.7, height],\n                [length, 0]\n            ]);\n    }\n}\n\n// Head with horns and mandibles\nmodule head() {\n    union() {\n        // Main head structure\n        color(body_color) {\n            scale([1.2, 0.8, 1])\n                sphere(r = 8);\n        }\n        \n        // Snout\n        translate([10, 0, 0])\n            scale([1.5, 0.6, 0.6])\n                sphere(r = 5);\n        \n        // Horns - curved backwards\n        for (side = [-1, 1]) {\n            color(accent_color) {\n                translate([5, side * 6, 3])\n                    rotate([0, side * -30, 0])\n                        cylinder(h = 12, r1 = 2, r2 = 1);\n            }\n        }\n        \n        // Mandibles\n        for (side = [-1, 1]) {\n            translate([5, side * 4, -3])\n                rotate([side * 20, 0, 0])\n                    cylinder(h = 6, r = 1.5);\n        }\n        \n        // Eyes - bioluminescent\n        for (side = [-1, 1]) {\n            color(glow_color) {\n                translate([8, side * 5, 2])\n                    sphere(r = 1.5);\n            }\n        }\n    }\n}\n\n// Tail fin assembly\nmodule tail_fin() {\n    color(body_color) {\n        // Upper tail fin\n        translate([0, 0, 3])\n            rotate([90, 0, 0])\n                fin(15, 8);\n        \n        // Lower tail fin\n        translate([0, 0, -3])\n            rotate([-90, 0, 0])\n                fin(15, 6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([0, 0, 0])\n        head();\n    \n    // Neck segment\n    translate([-8, 0, 0])\n        body_segment(6, 10);\n    \n    // Body segments\n    for (i = [1:5]) {\n        translate([-18 - i * 8, 0, 0])\n            body_segment(7 - i * 0.8, 8, i % 2 == 0);\n    }\n    \n    // Tail\n    translate([-58, 0, 0])\n        body_segment(3, 12, true);\n    \n    // Tail fin\n    translate([-70, 0, 0])\n        tail_fin();\n    \n    // Dorsal fins along body\n    for (i = [0:2]) {\n        translate([-25 - i * 15, 0, 6])\n            rotate([90, 0, 0])\n                fin(10 - i * 2, 5 - i);\n    }\n    \n    // Side fins\n    for (i = [1:2]) {\n        translate([-20 - i * 20, 0, 0])\n            rotate([0, 90, 0])\n                fin(8, 4);\n    }\n}\n\n// Base plate for stability\ncolor(\"darkslategray\")\n    translate([0, 0, -10])\n        cube([80, 30, 1], center = true);",
    "renders": true
  },
  {
    "mythical_creature": "coralcoil",
    "openscad_code": "// Coralcoil - Mythical sea serpent with coral-like features\n// Features: coiled body, coral growths, bioluminescent accents, dragon-like head\n\nmodule coralcoil() {\n    // Main body coil\n    color(\"darkslateblue\")\n    union() {\n        // Body segments in spiral\n        for (i = [0:15:360]) {\n            rotate([0, 0, i]) \n            translate([25 * cos(i/2), 25 * sin(i/2), i/2])\n            rotate([90, 0, 0])\n            scale([1.5 - i/360, 1.5 - i/360, 1])\n            cylinder(h=15, r1=8, r2=6, $fn=12);\n        }\n        \n        // Head section\n        translate([0, 0, 180])\n        union() {\n            color(\"darkslateblue\")\n            scale([1.2, 1.2, 1.5])\n            sphere(12, $fn=16);\n            \n            // Snout\n            color(\"steelblue\")\n            translate([0, 0, 15])\n            scale([0.8, 0.6, 1.5])\n            sphere(8, $fn=12);\n            \n            // Horns\n            color(\"darkslategray\")\n            for (h = [-1, 1]) {\n                translate([h*8, 0, 20])\n                rotate([0, h*30, 0])\n                cylinder(h=15, r1=3, r2=1, $fn=8);\n            }\n            \n            // Eyes\n            color(\"cyan\")\n            for (e = [-1, 1]) {\n                translate([e*5, -10, 5])\n                sphere(2, $fn=8);\n            }\n        }\n    }\n    \n    // Coral growths along body\n    color(\"coral\")\n    for (i = [0:30:360]) {\n        rotate([0, 0, i]) \n        translate([25 * cos(i/2) + 10, 25 * sin(i/2), i/2])\n        scale([0.3, 0.3, 1])\n        cylinder(h=8 + 5 * sin(i), r1=3, r2=1, $fn=6);\n    }\n    \n    // Fins along back\n    color(\"steelblue\")\n    for (f = [60:30:300]) {\n        rotate([0, 0, f])\n        translate([25 * cos(f/2), 25 * sin(f/2), f/2 + 5])\n        rotate([0, 90, 0])\n        scale([0.5, 0.8, 0.1])\n        cylinder(h=15, r1=6, r2=3, $fn=4);\n    }\n    \n    // Bioluminescent spots\n    color(\"aquamarine\")\n    for (b = [0:45:360]) {\n        rotate([0, 0, b])\n        translate([25 * cos(b/2), 25 * sin(b/2), b/2 + 5])\n        sphere(1.5, $fn=8);\n    }\n    \n    // Tail end\n    color(\"darkslateblue\")\n    translate([0, 0, 0])\n    rotate([0, 0, 0])\n    scale([0.8, 0.8, 2])\n    cylinder(h=20, r1=6, r2=2, $fn=8);\n    \n    // Underside scales\n    color(\"steelblue\")\n    for (s = [0:20:360]) {\n        rotate([0, 0, s])\n        for (r = [0:1:3]) {\n            translate([r*5 + 10, 0, s/2 - 2])\n            scale([0.8, 1, 0.3])\n            sphere(2, $fn=6);\n        }\n    }\n}\n\n// Base for stability\ncolor(\"slategray\")\ntranslate([0, 0, -5])\ncylinder(h=5, r=35, $fn=32);\n\n// Place the coralcoil\ntranslate([0, 0, 5])\nrotate([0, 0, 45])\ncoralcoil();",
    "renders": true
  },
  {
    "mythical_creature": "krakenwyrm",
    "openscad_code": "// Krakenwyrm - a mythical sea-dragon with cephalopod features\n// 3D printable, medium complexity, realistic style\n\n$fn = 32;\n\n// Main body\nmodule krakenwyrm_body() {\n    // Torso - elongated sea serpent body\n    union() {\n        color(\"darkslategray\")\n        translate([0, 0, -5])\n        scale([1.2, 0.8, 1.5])\n        sphere(15);\n        \n        // Neck extension\n        color(\"midnightblue\")\n        translate([0, 0, 10])\n        scale([0.6, 0.4, 1])\n        cylinder(h=20, r1=8, r2=5);\n    }\n}\n\n// Dragon head with cephalopod features\nmodule krakenwyrm_head() {\n    union() {\n        // Main head shape\n        color(\"steelblue\")\n        translate([0, 0, 35])\n        scale([1, 0.7, 0.8])\n        sphere(12);\n        \n        // Snout\n        color(\"darkblue\")\n        translate([0, 0, 42])\n        scale([0.6, 0.4, 0.6])\n        cylinder(h=10, r1=5, r2=0);\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            color(\"gold\")\n            translate([side * 5, 8, 38])\n            sphere(2.5);\n            \n            color(\"black\")\n            translate([side * 5.5, 9, 39])\n            sphere(1);\n        }\n        \n        // Tentacle beard\n        for(i = [0:3]) {\n            color(\"slateblue\")\n            rotate([0, 0, i * 45 - 67.5])\n            translate([0, -10, 32])\n            rotate([90, 0, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=15, r=2);\n        }\n    }\n}\n\n// Wings - fin-like dragon wings\nmodule krakenwyrm_wings() {\n    for(side = [-1, 1]) {\n        color(\"darkslateblue\")\n        translate([side * 15, 0, 15])\n        rotate([0, side * 20, 0])\n        scale([1, 0.2, 0.8])\n        sphere(20);\n        \n        // Wing membranes\n        for(i = [1:3]) {\n            color(\"royalblue\")\n            translate([side * (15 + i * 5), 0, 15 - i * 3])\n            scale([2, 0.1, 1])\n            rotate([0, side * 30, 0])\n            sphere(5);\n        }\n    }\n}\n\n// Tentacles instead of legs\nmodule krakenwyrm_tentacles() {\n    for(i = [0:7]) {\n        angle = i * 45;\n        color(\"indigo\")\n        rotate([0, 0, angle])\n        translate([12, 0, -10])\n        rotate([90, 0, 0])\n        scale([0.8, 0.8, 1])\n        cylinder(h=25, r=3);\n        \n        // Suction cups\n        for(j = [1:4]) {\n            color(\"darkorchid\")\n            rotate([0, 0, angle])\n            translate([12 + j * 2, 0, -10 - j * 4])\n            sphere(1.5);\n        }\n    }\n}\n\n// Tail - serpentine with fins\nmodule krakenwyrm_tail() {\n    color(\"darkslategray\")\n    translate([0, 0, -20])\n    rotate([0, 15, 0])\n    scale([0.8, 0.6, 1.2])\n    sphere(10);\n    \n    // Tail fins\n    color(\"blue\")\n    translate([0, 0, -30])\n    rotate([0, 30, 0])\n    scale([2, 0.2, 1])\n    sphere(8);\n    \n    color(\"blue\")\n    translate([0, 0, -30])\n    rotate([0, -30, 180])\n    scale([2, 0.2, 1])\n    sphere(8);\n}\n\n// Dorsal spines\nmodule krakenwyrm_spines() {\n    for(i = [-2:2]) {\n        color(\"darkslateblue\")\n        translate([0, 0, i * 5 + 5])\n        rotate([0, 0, 0])\n        scale([0.3, 0.3, 1])\n        cylinder(h=8, r=2);\n    }\n}\n\n// Main assembly\nunion() {\n    krakenwyrm_body();\n    krakenwyrm_head();\n    krakenwyrm_wings();\n    krakenwyrm_tentacles();\n    krakenwyrm_tail();\n    krakenwyrm_spines();\n}",
    "renders": true
  },
  {
    "mythical_creature": "unicorn",
    "openscad_code": "// Unicorn - Realistic, Medium Complexity\n// Approx 80mm long, 60mm tall\n\n// Main module\nunicorn();\n\nmodule unicorn() {\n    color(\"white\") {\n        // Body\n        union() {\n            // Main torso\n            translate([0, 0, 20])\n                scale([1.5, 0.8, 1])\n                sphere(d=30, $fn=32);\n            \n            // Neck\n            translate([20, 0, 35])\n                rotate([0, -30, 0])\n                scale([0.6, 0.6, 1.2])\n                cylinder(h=25, d1=15, d2=12, $fn=16);\n            \n            // Head\n            translate([40, 0, 45])\n                rotate([0, -30, 0])\n                scale([1.2, 0.8, 0.8])\n                sphere(d=20, $fn=32);\n            \n            // Legs\n            for(i = [-1, 1]) {\n                // Front legs\n                translate([15, i*8, 10])\n                    rotate([0, 5*i, 0])\n                    cylinder(h=30, d=6, $fn=12);\n                \n                // Hind legs\n                translate([-15, i*8, 10])\n                    rotate([0, -5*i, 0])\n                    cylinder(h=32, d=7, $fn=12);\n            }\n            \n            // Tail\n            translate([-25, 0, 25])\n                rotate([0, 0, 15])\n                scale([0.3, 0.3, 1])\n                cylinder(h=40, d=12, $fn=16);\n        }\n        \n        // Horn\n        color(\"gold\") {\n            translate([50, 0, 55])\n                rotate([0, 90, 0])\n                cylinder(h=25, d1=2, d2=0.5, $fn=8);\n        }\n        \n        // Mane\n        color(\"lightblue\") {\n            for(i = [0:3]) {\n                translate([35 - i*5, 5, 45 - i*3])\n                    rotate([0, -30 - i*5, 0])\n                    scale([0.2, 0.5, 1])\n                    sphere(d=8, $fn=8);\n            }\n        }\n        \n        // Tail hair\n        color(\"lightblue\") {\n            for(i = [0:5]) {\n                translate([-25 - i*2, 5 + i*2, 25 - i*3])\n                    rotate([0, 0, 20 + i*10])\n                    scale([0.3, 0.3, 1])\n                    cylinder(h=15, d=4, $fn=6);\n            }\n        }\n        \n        // Hooves\n        color(\"gray\") {\n            for(i = [-1, 1]) {\n                translate([15, i*8, 0])\n                    cylinder(h=3, d=7, $fn=12);\n                translate([-15, i*8, 0])\n                    cylinder(h=3, d=8, $fn=12);\n            }\n        }\n        \n        // Eyes\n        color(\"black\") {\n            translate([45, 6, 48])\n                sphere(d=2, $fn=8);\n            translate([45, -6, 48])\n                sphere(d=2, $fn=8);\n        }\n        \n        // Ears\n        color(\"white\") {\n            translate([42, 5, 58])\n                rotate([0, 0, -30])\n                scale([0.3, 0.1, 0.5])\n                cylinder(h=10, d=8, $fn=6);\n            translate([42, -5, 58])\n                rotate([0, 0, 30])\n                scale([0.3, 0.1, 0.5])\n                cylinder(h=10, d=8, $fn=6);\n        }\n        \n        // Wings (folded)\n        color(\"white\") {\n            translate([0, 10, 35])\n                rotate([0, 0, -20])\n                scale([1, 0.1, 0.8])\n                sphere(d=25, $fn=16);\n            translate([0, -10, 35])\n                rotate([0, 0, 20])\n                scale([1, 0.1, 0.8])\n                sphere(d=25, $fn=16);\n        }\n        \n        // Magical sparkles on body\n        color(\"lightcyan\") {\n            for(i = [0:10]) {\n                theta = i * 36;\n                phi = i * 25;\n                x = 15 * cos(theta);\n                y = 8 * sin(theta);\n                z = 25 + 5 * sin(phi);\n                translate([x, y, z])\n                    sphere(d=1, $fn=4);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "griffin",
    "openscad_code": "use <colors.scad>\n\n// Griffin - medium complexity realistic style\n// Size: 70mm wingspan, 50mm length\n\n$fa = 2;\n$fs = 1;\n\nmodule griffin() {\n    color(\"goldenrod\") {\n        // Body\n        union() {\n            // Main torso\n            scale([1.2, 0.8, 1]) sphere(8);\n            \n            // Lion chest\n            translate([0, -5, -3]) scale([1.5, 1, 0.8]) sphere(6);\n            \n            // Back ridge\n            for(i = [0:3]) {\n                translate([-6 + i*4, 0, 7]) rotate([0, 0, i*5]) cube([2, 2, 1]);\n            }\n        }\n        \n        // Eagle head\n        translate([12, 0, 5]) {\n            // Beak\n            color(\"darkorange\") {\n                translate([3, 0, -2]) rotate([0, -20, 0]) \n                    scale([1.5, 0.5, 0.5]) cylinder(h=8, r1=3, r2=0);\n            }\n            \n            // Head sphere\n            scale([1, 0.8, 1]) sphere(6);\n            \n            // Eyes\n            color(\"black\") {\n                translate([2, -2.5, 1]) sphere(1);\n                translate([2, 2.5, 1]) sphere(1);\n            }\n            \n            // Ear tufts\n            color(\"goldenrod\") {\n                translate([0, -3, 5]) rotate([30, 0, -30]) \n                    scale([0.3, 0.3, 1]) cylinder(h=3, r1=2, r2=0);\n                translate([0, 3, 5]) rotate([30, 0, 30]) \n                    scale([0.3, 0.3, 1]) cylinder(h=3, r1=2, r2=0);\n            }\n        }\n        \n        // Wings\n        color(\"burlywood\") {\n            // Left wing\n            translate([-5, -12, 8]) rotate([0, 0, -20]) {\n                // Main wing\n                scale([1, 0.2, 2]) sphere([15, 5, 3]);\n                \n                // Wing feathers\n                for(i = [0:4]) {\n                    translate([-5 - i*3, 0, -8 + i*2]) \n                        rotate([0, -10 - i*5, 0])\n                        scale([1, 0.1, 0.5]) \n                        cube([8, 1, 2]);\n                }\n            }\n            \n            // Right wing\n            translate([-5, 12, 8]) mirror([0, 1, 0]) {\n                // Main wing\n                scale([1, 0.2, 2]) sphere([15, 5, 3]);\n                \n                // Wing feathers\n                for(i = [0:4]) {\n                    translate([-5 - i*3, 0, -8 + i*2]) \n                        rotate([0, -10 - i*5, 0])\n                        scale([1, 0.1, 0.5]) \n                        cube([8, 1, 2]);\n                }\n            }\n        }\n        \n        // Legs\n        color(\"goldenrod\") {\n            // Front legs\n            for(side = [-1, 1]) {\n                translate([5, side*5, -6]) {\n                    // Upper leg\n                    rotate([15, 0, side*10]) \n                        cylinder(h=8, r=2);\n                    \n                    // Lower leg\n                    translate([0, 0, -9]) rotate([30, 0, 0]) \n                        cylinder(h=6, r=1.5);\n                    \n                    // Paw\n                    translate([0, 0, -16]) \n                        scale([1.2, 1, 0.8]) sphere(2);\n                    \n                    // Talons\n                    color(\"darkorange\") {\n                        for(t = [-30, 0, 30]) {\n                            rotate([0, 0, t]) \n                                translate([0, 1.5, -18]) \n                                cylinder(h=2, r1=0.5, r2=0.2);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Tail\n        translate([-12, 0, 0]) {\n            // Lion tail\n            color(\"goldenrod\") {\n                rotate([0, 10, 0]) \n                    cylinder(h=15, r1=2, r2=1);\n            }\n            \n            // Eagle feathers\n            color(\"burlywood\") {\n                for(i = [0:5]) {\n                    translate([-12 - i*1.5, 0, 1 + i*0.5]) \n                        rotate([0, 0, i*15]) \n                        scale([0.5, 0.05, 1]) \n                        cube([3, 0.5, 1.5]);\n                }\n            }\n        }\n    }\n}\n\ngriffin();",
    "renders": true
  },
  {
    "mythical_creature": "pegasus",
    "openscad_code": "// Pegasus - Winged Horse from Greek Mythology\n// Medium complexity realistic style with 3D printability\n\n$fn = 32;\n\n// Overall scaling for 3D printing\nscale_factor = 0.7;\n\n// Colors\npegasus_body = [0.9, 0.85, 0.8];  // White alabaster\nmane_color = [0.7, 0.6, 0.5];    // Light gray\nwing_color = [0.95, 0.95, 0.95]; // Pure white\nhoof_color = [0.3, 0.3, 0.3];    // Dark gray\n\nmodule pegasus() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Body - main torso\n            color(pegasus_body)\n            translate([0, 0, 20])\n            scale([1.5, 1, 1.2])\n            sphere(15);\n            \n            // Neck\n            color(pegasus_body)\n            translate([10, 0, 35])\n            rotate([0, 15, 0])\n            cylinder(h=20, r1=8, r2=6);\n            \n            // Head\n            color(pegasus_body)\n            translate([25, 0, 45])\n            rotate([0, 15, 0])\n            scale([1.2, 0.8, 0.9])\n            sphere(8);\n            \n            // Snout\n            color(pegasus_body)\n            translate([30, 0, 43])\n            rotate([0, 15, 0])\n            scale([1.5, 0.7, 0.7])\n            cylinder(h=8, r1=5, r2=3);\n            \n            // Ears\n            for (ear_x = [-1, 1]) {\n                color(pegasus_body)\n                translate([22, ear_x * 4, 52])\n                rotate([0, 0, ear_x * 15])\n                scale([0.5, 0.2, 1])\n                cylinder(h=6, r1=3, r2=1);\n            }\n            \n            // Mane\n            module mane_strand(i) {\n                color(mane_color)\n                translate([20 - i * 2, 0, 45 - i])\n                rotate([0, 10, i * 5])\n                scale([0.3, 0.3, 1])\n                cylinder(h=8, r1=1, r2=0.5);\n            }\n            \n            for (i = [0:8]) {\n                mane_strand(i);\n            }\n            \n            // Legs\n            module leg(position, angle) {\n                color(pegasus_body)\n                translate(position)\n                rotate([angle, 0, 0])\n                cylinder(h=25, r1=4, r2=3);\n                \n                // Hoof\n                color(hoof_color)\n                translate([0, 0, 25])\n                cylinder(h=3, r1=3, r2=3.5);\n            }\n            \n            // Front legs\n            leg([-5, 8, 20], 20);\n            leg([-5, -8, 20], 20);\n            \n            // Back legs\n            leg([-20, 8, 20], -20);\n            leg([-20, -8, 20], -20);\n            \n            // Tail\n            color(mane_color)\n            translate([-22, 0, 22])\n            rotate([0, -30, 0])\n            scale([0.5, 0.5, 1])\n            cylinder(h=20, r1=4, r2=2);\n            \n            // Wings\n            module wing(angle) {\n                color(wing_color)\n                translate([0, angle * 15, 35])\n                rotate([0, 0, angle * 30])\n                rotate([10, 0, 0])\n                scale([1, 0.3, 0.1])\n                sphere(18);\n                \n                // Wing feathers\n                for (i = [0:4]) {\n                    color(wing_color)\n                    translate([i * 3 - 5, angle * (15 + i * 2), 35 - i])\n                    rotate([0, 0, angle * (30 - i * 5)])\n                    rotate([10 + i * 5, 0, 0])\n                    scale([0.8, 0.2, 0.05])\n                    sphere(15 - i * 2);\n                }\n            }\n            \n            // Left wing\n            wing(1);\n            \n            // Right wing\n            wing(-1);\n            \n            // Eye\n            color([0, 0, 0])\n            translate([28, 3, 48])\n            sphere(1.5);\n            \n            // Nostrils\n            color([0.5, 0.4, 0.4])\n            translate([33, 1.5, 42])\n            sphere(1);\n            translate([33, -1.5, 42])\n            sphere(1);\n            \n            // Chest detail\n            color([0.85, 0.8, 0.75])\n            translate([5, 0, 25])\n            scale([1.2, 0.8, 0.8])\n            sphere(12);\n        }\n    }\n}\n\npegasus();",
    "renders": true
  },
  {
    "mythical_creature": "centaur",
    "openscad_code": "// Centaur - Realistic Style, Medium Complexity\n// Designed for 3D printing - approximately 80mm tall\n\n// Color definitions\ncolor_human = \"Burlywood\";\ncolor_horse = \"SaddleBrown\";\ncolor_hair = \"SaddleBrown\";\ncolor_hooves = \"DimGray\";\n\n// Overall scale factor\nscale_factor = 0.8;\n\nmodule centaur() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Human torso\n            color(color_human) {\n                // Chest\n                translate([0, 0, 45]) {\n                    scale([1.5, 1, 2]) {\n                        sphere(8, $fn=32);\n                    }\n                }\n                \n                // Abdomen\n                translate([0, 0, 38]) {\n                    cylinder(h=10, r1=7, r2=6, $fn=32);\n                }\n                \n                // Neck\n                translate([0, 0, 52]) {\n                    cylinder(h=8, r=3, $fn=16);\n                }\n                \n                // Head\n                translate([0, 0, 62]) {\n                    scale([1.2, 1, 1.4]) {\n                        sphere(7, $fn=32);\n                    }\n                }\n                \n                // Arms\n                // Left arm\n                translate([-8, 0, 48]) {\n                    rotate([0, 0, 20]) {\n                        cylinder(h=15, r=2.5, $fn=16);\n                    }\n                }\n                \n                // Right arm\n                translate([8, 0, 48]) {\n                    rotate([0, 0, -20]) {\n                        cylinder(h=15, r=2.5, $fn=16);\n                    }\n                }\n                \n                // Hands\n                translate([-11, 0, 48]) {\n                    sphere(2.5, $fn=16);\n                }\n                \n                translate([11, 0, 48]) {\n                    sphere(2.5, $fn=16);\n                }\n            }\n            \n            // Horse body\n            color(color_horse) {\n                // Main body\n                translate([0, 0, 25]) {\n                    scale([2, 1.2, 1.5]) {\n                        sphere(12, $fn=32);\n                    }\n                }\n                \n                // Rear section\n                translate([0, -15, 22]) {\n                    scale([1.8, 2, 1.4]) {\n                        sphere(10, $fn=32);\n                    }\n                }\n                \n                // Front horse shoulders\n                translate([0, 12, 22]) {\n                    scale([2, 1.5, 1.3]) {\n                        sphere(8, $fn=32);\n                    }\n                }\n            }\n            \n            // Legs\n            color(color_horse) {\n                // Front legs\n                for (x = [-6, 6]) {\n                    translate([x, 10, 15]) {\n                        cylinder(h=15, r=3, $fn=16);\n                    }\n                    \n                    // Front hooves\n                    color(color_hooves) {\n                        translate([x, 10, 0]) {\n                            cylinder(h=3, r=3.5, r1=3.5, r2=2.5, $fn=16);\n                        }\n                    }\n                }\n                \n                // Rear legs\n                for (x = [-5, 5]) {\n                    translate([x, -15, 15]) {\n                        rotate([5, 0, x > 0 ? -5 : 5]) {\n                            cylinder(h=15, r=3.5, $fn=16);\n                        }\n                    }\n                    \n                    // Rear hooves\n                    color(color_hooves) {\n                        translate([x, -15, 0]) {\n                            cylinder(h=3, r=4, r1=4, r2=3, $fn=16);\n                        }\n                    }\n                }\n            }\n            \n            // Tail\n            color(color_hair) {\n                translate([0, -25, 20]) {\n                    rotate([10, 0, 0]) {\n                        for (i = [0:5]) {\n                            rotate([0, 0, i * 15]) {\n                                translate([0, -i * 1.5, -i * 0.5]) {\n                                    scale([0.3, 1, 0.3]) {\n                                        sphere(3, $fn=8);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Hair\n            color(color_hair) {\n                translate([0, -2, 65]) {\n                    for (angle = [0:30:330]) {\n                        rotate([0, 0, angle]) {\n                            translate([0, 6, 0]) {\n                                scale([0.5, 1, 0.1]) {\n                                    sphere(3, $fn=8);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Ears\n            color(color_human) {\n                translate([-3, 0, 66]) {\n                    rotate([0, -15, 0]) {\n                        scale([0.5, 0.2, 1]) {\n                            cylinder(h=3, r1=2, r2=0.5, $fn=8);\n                        }\n                    }\n                }\n                \n                translate([3, 0, 66]) {\n                    rotate([0, 15, 0]) {\n                        scale([0.5, 0.2, 1]) {\n                            cylinder(h=3, r1=2, r2=0.5, $fn=8);\n                        }\n                    }\n                }\n            }\n            \n            // Eyes\n            translate([-2.5, -5, 66]) {\n                sphere(1, $fn=16);\n            }\n            \n            translate([2.5, -5, 66]) {\n                sphere(1, $fn=16);\n            }\n            \n            // Nose bridge\n            color(color_human) {\n                translate([0, -7, 63]) {\n                    scale([0.7, 0.5, 0.3]) {\n                        sphere(2, $fn=16);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the centaur\ncentaur();",
    "renders": true
  },
  {
    "mythical_creature": "minotaur",
    "openscad_code": "// Realistic Minotaur - Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;\n\n// Colors\nbull_brown = [139/255, 69/255, 19/255];\ndark_brown = [101/255, 67/255, 33/255];\ntan = [210/255, 180/255, 140/255];\ngold = [255/255, 215/255, 0/255];\n\n// Main module\nmodule minotaur() {\n    // Body\n    color(bull_brown) {\n        // Torso\n        union() {\n            translate([0, 0, 25]) \n                scale([1.2, 0.8, 1.5]) \n                    sphere(d=30);\n            \n            // Chest\n            translate([0, 0, 35])\n                scale([1.3, 1, 1])\n                    sphere(d=25);\n        }\n    }\n    \n    // Head (bull head)\n    color(bull_brown) {\n        // Snout\n        translate([0, 25, 45])\n            scale([1, 1.2, 0.8])\n                sphere(d=20);\n        \n        // Main head\n        translate([0, 15, 50])\n            sphere(d=25);\n        \n        // Horns\n        for(side = [-1, 1]) {\n            color(tan) {\n                translate([side * 8, 15, 60])\n                    rotate([0, side * 10, 0])\n                        cylinder(h=15, d1=5, d2=2);\n                translate([side * 8, 15, 60])\n                    rotate([0, side * 30, 0])\n                        cylinder(h=10, d1=3, d2=5);\n            }\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 12, 20, 55])\n                rotate([0, 0, side * 30])\n                    scale([0.3, 1, 0.8])\n                        sphere(d=8);\n        }\n        \n        // Nose ring\n        color(gold) {\n            translate([0, 32, 45])\n                rotate([90, 0, 0])\n                    cylinder(h=12, d=2);\n            translate([0, 32, 45])\n                sphere(d=2);\n        }\n    }\n    \n    // Arms\n    for(side = [-1, 1]) {\n        color(bull_brown) {\n            // Upper arm\n            translate([side * 15, 10, 35])\n                rotate([0, 0, side * -20])\n                    cylinder(h=15, d=10);\n            \n            // Lower arm\n            translate([side * 25, 5, 30])\n                rotate([0, 0, side * -20])\n                    cylinder(h=12, d=8);\n            \n            // Hands\n            translate([side * 35, 0, 28])\n                sphere(d=8);\n        }\n    }\n    \n    // Legs (hooves)\n    for(side = [-1, 1]) {\n        color(bull_brown) {\n            // Upper leg\n            translate([side * 8, -5, 15])\n                rotate([0, 0, side * 10])\n                    cylinder(h=20, d=12);\n            \n            // Lower leg\n            translate([side * 10, -10, 5])\n                rotate([0, 0, side * 10])\n                    cylinder(h=15, d=10);\n            \n            // Hoof\n            color(dark_brown) {\n                translate([side * 10, -10, -5])\n                    rotate([0, 0, side * 10])\n                        cylinder(h=8, d1=10, d2=8);\n            }\n        }\n    }\n    \n    // Tail\n    color(bull_brown) {\n        translate([0, -15, 20])\n            rotate([0, 0, 30])\n                cylinder(h=20, d=5);\n        // Tail tuft\n        translate([0, -30, 15])\n            sphere(d=8);\n    }\n    \n    // Axe (held in right hand)\n    color(tan) {\n        translate([35, 0, 28])\n            rotate([0, 90, 0])\n                cylinder(h=30, d=2);\n    }\n    color(dark_brown) {\n        translate([50, 0, 28])\n            rotate([0, 0, 90])\n                scale([1, 0.3, 2])\n                    cube([15, 8, 2], center=true);\n    }\n}\n\n// Generate the minotaur\nminotaur();",
    "renders": true
  },
  {
    "mythical_creature": "sphinx",
    "openscad_code": "// Sphinx - Mythical Creature with Human Head and Lion Body\n// Medium complexity realistic style 3D printable model\n\n$fn = 32;\n\n// Colors\ncolor_body = [0.7, 0.6, 0.3];\ncolor_skin = [0.9, 0.75, 0.6];\ncolor_wings = [0.9, 0.85, 0.7];\ncolor_crown = [0.8, 0.7, 0.2];\n\n// Main sphinx assembly\nmodule sphinx() {\n    union() {\n        // Lion body\n        color(color_body)\n        translate([0, 0, 5])\n        lion_body();\n        \n        // Human head\n        color(color_skin)\n        translate([0, 0, 25])\n        human_head();\n        \n        // Wings\n        color(color_wings)\n        translate([0, 0, 20])\n        wings();\n        \n        // Tail\n        color(color_body)\n        translate([-20, 0, 12])\n        rotate([0, 0, 30])\n        tail();\n    }\n}\n\n// Lion body with muscular proportions\nmodule lion_body() {\n    union() {\n        // Main torso\n        scale([1.2, 0.8, 0.9])\n        difference() {\n            sphere(15);\n            translate([0, 0, -15]) cube([40, 40, 15], center=true);\n        }\n        \n        // Front legs\n        for(x = [-8, 8]) {\n            translate([x, 0, 5])\n            scale([0.4, 0.4, 1.2])\n            cylinder(h=15, r1=5, r2=4);\n        }\n        \n        // Rear legs\n        for(x = [-10, 10]) {\n            translate([x*2, 0, 5])\n            scale([0.5, 0.5, 1.1])\n            cylinder(h=12, r1=5, r2=4);\n        }\n        \n        // Paws\n        for(x = [-8, 8, -20, 20]) {\n            translate([x, 0, -5])\n            scale([1.2, 1, 0.5])\n            sphere(3);\n        }\n        \n        // Mane transition area\n        translate([0, 0, 20])\n        scale([0.8, 0.8, 0.8])\n        sphere(8);\n    }\n}\n\n// Human head with Egyptian features\nmodule human_head() {\n    union() {\n        // Head\n        scale([0.9, 0.8, 1.1])\n        sphere(10);\n        \n        // Nose\n        translate([0, 8, 2])\n        scale([0.3, 0.2, 0.5])\n        cube([5, 8, 4], center=true);\n        \n        // Eyes\n        for(x = [-3, 3]) {\n            translate([x, 8, 3])\n            scale([0.8, 0.8, 0.8])\n            sphere(1.5);\n            translate([x, 8.5, 4])\n            scale([0.5, 0.5, 0.5])\n            sphere(1);\n        }\n        \n        // Pharaoh crown\n        color(color_crown)\n        translate([0, -2, 8])\n        difference() {\n            cylinder(h=5, r1=8, r2=6);\n            translate([0, 0, 2])\n            cylinder(h=6, r=4.5);\n        }\n        \n        // Crown details\n        color(color_crown)\n        for(i = [0:11]) {\n            rotate([0, 0, i*30])\n            translate([6, 0, 8])\n            scale([0.3, 1, 0.3])\n            cube([2, 1, 2], center=true);\n        }\n        \n        // Neck\n        translate([0, -5, -5])\n        scale([0.6, 0.6, 1])\n        cylinder(h=10, r=4);\n    }\n}\n\n// Feathered wings\nmodule wings() {\n    union() {\n        // Left wing\n        translate([-15, 0, 0])\n        rotate([0, 0, 30])\n        wing_half();\n        \n        // Right wing\n        translate([15, 0, 0])\n        mirror([1, 0, 0])\n        rotate([0, 0, 30])\n        wing_half();\n    }\n}\n\nmodule wing_half() {\n    difference() {\n        // Main wing shape\n        translate([0, 0, 0])\n        scale([2, 0.2, 1])\n        rotate([0, 30, 0])\n        sphere(10);\n        \n        // Wing cutout\n        translate([5, 0, 2])\n        scale([1.5, 0.3, 0.8])\n        rotate([0, 30, 0])\n        sphere(8);\n    }\n    \n    // Wing feathers\n    for(i = [0:4]) {\n        translate([5 + i*3, 0, -5 + i*2])\n        rotate([0, 20 - i*5, -30 + i*15])\n        scale([0.3, 0.1, 1])\n        cylinder(h=8, r1=2, r2=0.5);\n    }\n}\n\n// Lion tail with tuft\nmodule tail() {\n    hull() {\n        translate([0, 0, 0])\n        sphere(2);\n        translate([0, 0, -15])\n        sphere(1.5);\n    }\n    \n    // Tail tuft\n    translate([0, 0, -20])\n    scale([1.2, 1.2, 0.8])\n    sphere(3);\n}\n\n// Create the sphinx\nsphinx();",
    "renders": true
  },
  {
    "mythical_creature": "manticore",
    "openscad_code": "// Manticore - mythological creature with lion body, human face, scorpion tail and wings\n// Designed for 3D printing with proper wall thickness and minimal overhangs\n\n$fn = 32;\n\n// Colors\nlion_color = \"#D4A574\";\nmane_color = \"#8B4513\";\nface_color = \"#E5BE8A\";\nwing_color = \"#8B7355\";\nstinger_color = \"#2F2F2F\";\n\n// Main body\nmodule body() {\n    color(lion_color)\n    union() {\n        // Lion torso\n        translate([0, 0, 12])\n            scale([1.2, 0.8, 1])\n            sphere(d=30);\n        \n        // Chest\n        translate([0, 0, 6])\n            scale([1.4, 0.9, 0.8])\n            sphere(d=25);\n        \n        // Abdomen\n        translate([0, 0, 2])\n            scale([1, 0.7, 0.6])\n            sphere(d=25);\n    }\n}\n\n// Human-like face\nmodule face() {\n    color(face_color)\n    translate([-15, 0, 28])\n    rotate([0, 10, 0])\n    union() {\n        // Head\n        sphere(d=18);\n        \n        // Nose\n        translate([-2, 0, 2])\n            scale([0.4, 0.8, 0.6])\n            sphere(d=5);\n        \n        // Eyes\n        translate([-4, 4, 3])\n            sphere(d=3);\n        translate([-4, -4, 3])\n            sphere(d=3);\n    }\n}\n\n// Mane around face\nmodule mane() {\n    color(mane_color)\n    translate([-15, 0, 25])\n    rotate([0, 10, 0])\n    for(i = [0:15:359]) {\n        rotate([0, 0, i])\n        translate([9, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=12, d1=4, d2=2);\n    }\n}\n\n// Legs\nmodule legs() {\n    color(lion_color)\n    union() {\n        // Front legs\n        translate([5, 8, 6])\n            rotate([0, -15, 0])\n            cylinder(h=20, d1=8, d2=6);\n        \n        translate([5, -8, 6])\n            rotate([0, -15, 0])\n            cylinder(h=20, d1=8, d2=6);\n        \n        // Hind legs\n        translate([-10, 6, 4])\n            rotate([0, 15, 0])\n            cylinder(h=18, d1=9, d2=6);\n        \n        translate([-10, -6, 4])\n            rotate([0, 15, 0])\n            cylinder(h=18, d1=9, d2=6);\n    }\n}\n\n// Paws\nmodule paws() {\n    color(lion_color)\n    for(x = [5, -10])\n    for(y = [8, -8]) {\n        translate([x, y, -2])\n            sphere(d=8);\n    }\n}\n\n// Wings\nmodule wings() {\n    color(wing_color)\n    union() {\n        // Left wing\n        translate([0, 15, 20])\n        rotate([0, 0, 20])\n        difference() {\n            scale([1, 0.3, 1.5])\n            sphere(d=25);\n            translate([0, -5, 0])\n                cube([30, 10, 30], center=true);\n        }\n        \n        // Right wing\n        translate([0, -15, 20])\n        rotate([0, 0, -20])\n        mirror([0, 1, 0])\n        difference() {\n            scale([1, 0.3, 1.5])\n            sphere(d=25);\n            translate([0, -5, 0])\n                cube([30, 10, 30], center=true);\n        }\n    }\n}\n\n// Scorpion tail with stinger\nmodule tail() {\n    color(lion_color)\n    union() {\n        // Tail segments\n        for(i = [0:3]) {\n            translate([-15 - i*3, 0, 2 + i*2])\n                rotate([0, 30 - i*5, 0])\n                sphere(d=6 - i);\n        }\n        \n        // Stinger\n        color(stinger_color)\n        translate([-27, 0, 10])\n            rotate([0, 45, 0])\n            cylinder(h=12, d1=3, d2=0.5);\n    }\n}\n\n// Scales pattern on body\nmodule scales() {\n    color(lion_color)\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([5, 0, 15])\n            sphere(d=3);\n    }\n}\n\n// Assemble the manticore\nunion() {\n    body();\n    face();\n    mane();\n    legs();\n    paws();\n    wings();\n    tail();\n    scales();\n}",
    "renders": true
  },
  {
    "mythical_creature": "hippogriff",
    "openscad_code": "// Hippogriff OpenSCAD Model - Realistic Style, Medium Complexity\n// Wingspan: 80mm, Length: 70mm, Height: 45mm\n\nmodule hippogriff() {\n    // Main body - eagle-lion hybrid\n    color([0.8, 0.6, 0.3]) union() {\n        // Lion body\n        translate([0, 0, 15]) \n            scale([1.2, 0.8, 1]) \n            sphere(r=12, $fn=32);\n        \n        // Eagle chest\n        translate([10, 0, 22])\n            scale([1, 1.2, 0.9])\n            sphere(r=10, $fn=32);\n        \n        // Back ridge\n        for(i=[-5:2:5]) {\n            translate([i*2, 0, 28-i])\n                cube([1.5, 8, 3], center=true);\n        }\n    }\n    \n    // Head - eagle features\n    color([0.9, 0.7, 0.4]) union() {\n        // Main head shape\n        translate([25, 0, 25])\n            scale([1.5, 1.2, 1.3])\n            sphere(r=8, $fn=32);\n        \n        // Beak\n        translate([35, 0, 25])\n            rotate([0, -20, 0])\n            cylinder(h=12, r1=3, r2=0.5, $fn=16);\n        \n        // Eyes\n        color([0.1, 0.1, 0.1])\n        for(x=[-3, 3]) {\n            translate([30, x, 28])\n                sphere(r=1.5, $fn=12);\n        }\n        \n        // Head feathers\n        for(i=[0:15:45]) {\n            translate([20+sin(i)*3, cos(i)*6, 32])\n                rotate([0, -i, 0])\n                scale([0.3, 0.1, 1])\n                sphere(r=4, $fn=8);\n        }\n    }\n    \n    // Wings - eagle wings\n    color([0.7, 0.5, 0.2]) union() {\n        // Left wing\n        translate([-5, -15, 25])\n            rotate([0, 0, -30])\n            difference() {\n                union() {\n                    // Main wing\n                    scale([1, 3, 0.5])\n                    sphere(r=8, $fn=32);\n                    \n                    // Primary feathers\n                    for(i=[0:3]) {\n                        translate([-5-i*3, -20-i*2, 0])\n                            rotate([0, 0, -10*i])\n                            scale([0.8, 1.2, 0.3])\n                            sphere(r=4, $fn=8);\n                    }\n                }\n                \n                // Wing detail cuts\n                for(i=[0:2]) {\n                    translate([0, -10-i*5, 0])\n                        cube([2, 6, 2], center=true);\n                }\n            }\n        \n        // Right wing (mirrored)\n        mirror([0, 1, 0])\n            translate([-5, 15, 25])\n                rotate([0, 0, 30])\n                difference() {\n                    union() {\n                        scale([1, 3, 0.5])\n                        sphere(r=8, $fn=32);\n                        \n                        for(i=[0:3]) {\n                            translate([-5-i*3, 20+i*2, 0])\n                                rotate([0, 0, 10*i])\n                                scale([0.8, 1.2, 0.3])\n                                sphere(r=4, $fn=8);\n                        }\n                    }\n                    \n                    for(i=[0:2]) {\n                        translate([0, 10+i*5, 0])\n                            cube([2, 6, 2], center=true);\n                    }\n                }\n    }\n    \n    // Lion legs\n    color([0.6, 0.4, 0.2]) union() {\n        // Front legs\n        for(side=[-1, 1]) {\n            translate([10, side*8, 10])\n                union() {\n                    // Upper leg\n                    cylinder(h=12, r=4, $fn=16);\n                    \n                    // Lower leg\n                    translate([0, 0, -12])\n                        cylinder(h=10, r=3, $fn=16);\n                    \n                    // Paw\n                    translate([0, 0, -22])\n                        scale([1.2, 1.2, 0.8])\n                        sphere(r=4, $fn=16);\n                }\n        }\n        \n        // Hind legs\n        for(side=[-1, 1]) {\n            translate([-12, side*6, 8])\n                rotate([10, 0, 0])\n                union() {\n                    cylinder(h=10, r=4, $fn=16);\n                    translate([0, 0, -10])\n                        cylinder(h=8, r=3, $fn=16);\n                    translate([0, 0, -18])\n                        scale([1.3, 1.3, 0.8])\n                        sphere(r=4, $fn=16);\n                }\n        }\n    }\n    \n    // Lion tail with eagle feathers\n    color([0.5, 0.3, 0.1]) union() {\n        // Tail\n        translate([-20, 0, 15])\n            rotate([20, 0, 0])\n            cylinder(h=15, r=2, $fn=16);\n        \n        // Tail feathers\n        color([0.7, 0.5, 0.2])\n        for(i=[0:3]) {\n            translate([-30-i*2, sin(i*30)*3, 15-i])\n                rotate([0, 0, sin(i*30)*10])\n                scale([0.5, 1.5, 0.2])\n                sphere(r=3, $fn=8);\n        }\n    }\n    \n    // Claws\n    color([0.3, 0.3, 0.3])\n    for(side=[-1, 1]) {\n        // Front claws\n        translate([10, side*8, -22])\n            for(i=[-1, 0, 1]) {\n                translate([i*1.5, 0, -2])\n                    scale([0.3, 0.3, 1])\n                    cylinder(h=3, r=1, $fn=8);\n            }\n        \n        // Hind claws\n        translate([-12, side*6, -18])\n            for(i=[-1, 0, 1]) {\n                translate([i*1.5, 0, -2])\n                    scale([0.3, 0.3, 1])\n                    cylinder(h=3, r=1, $fn=8);\n            }\n    }\n    \n    // Eagle talons on wings\n    color([0.3, 0.3, 0.3])\n    for(side=[-1, 1]) {\n        translate([-5, side*15, 15])\n            for(i=[0:2]) {\n                translate([0, side*3-i*2, -2])\n                    scale([0.3, 0.3, 1])\n                    cylinder(h=2.5, r=0.8, $fn=8);\n            }\n    }\n}\n\n// Scale to final size\nscale([0.6, 0.6, 0.6])\n    hippogriff();",
    "renders": true
  },
  {
    "mythical_creature": "kraken",
    "openscad_code": "// Realistic Kraken - Medium Complexity\n// 3D printable kraken with tentacles, beak, and realistic proportions\n\n// Main colors\nkraken_color = \"DarkSlateGray\";\nbeak_color = \"SaddleBrown\";\neye_color = \"Red\";\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main kraken body\nmodule kraken_body() {\n    color(kraken_color)\n    union() {\n        // Central mantle (head/body)\n        translate([0, 0, 15])\n        scale([1.2, 1, 1])\n        sphere(12, $fn=32);\n        \n        // Underside bulge\n        translate([0, 0, 5])\n        scale([1.4, 1.2, 0.8])\n        sphere(10, $fn=32);\n        \n        // Eye ridges\n        translate([-6, 8, 20])\n        rotate([0, -20, 0])\n        scale([1.5, 1, 1])\n        sphere(3, $fn=16);\n        \n        translate([6, 8, 20])\n        rotate([0, 20, 0])\n        scale([1.5, 1, 1])\n        sphere(3, $fn=16);\n    }\n}\n\n// Kraken eyes\nmodule kraken_eyes() {\n    color(eye_color)\n    union() {\n        translate([-5, 9, 22])\n        sphere(2.5, $fn=16);\n        \n        translate([5, 9, 22])\n        sphere(2.5, $fn=16);\n    }\n    \n    color(\"black\")\n    union() {\n        translate([-5, 10, 23])\n        sphere(1, $fn=8);\n        \n        translate([5, 10, 23])\n        sphere(1, $fn=8);\n    }\n}\n\n// Kraken beak\nmodule kraken_beak() {\n    color(beak_color)\n    union() {\n        // Upper beak\n        translate([0, -5, 10])\n        rotate([30, 0, 0])\n        cylinder(h=12, r1=8, r2=4, $fn=16);\n        \n        // Lower beak\n        translate([0, -5, 8])\n        rotate([30, 0, 0])\n        cylinder(h=10, r1=6, r2=3, $fn=16);\n    }\n}\n\n// Single tentacle\nmodule tentacle(length, thickness, curl) {\n    linear_extrude(height=length, twist=curl, scale=[1, 0.3], $fn=8)\n    circle(thickness, $fn=16);\n}\n\n// Generate curled tentacles\nmodule kraken_tentacles() {\n    color(kraken_color)\n    for(i = [0:7]) {\n        angle = i * 45;\n        curl = 30 + i * 10;\n        length = 25 + (i % 2) * 10;\n        \n        translate([0, 0, 5])\n        rotate([0, 0, angle])\n        translate([15, 0, 0])\n        rotate([90, 0, 0])\n        tentacle(length, 3 + (i % 3), curl);\n    }\n}\n\n// Suction cups on tentacles\nmodule suction_cups() {\n    color(\"DimGray\")\n    for(i = [0:7]) {\n        angle = i * 45;\n        for(j = [1:4]) {\n            translate([0, 0, 5])\n            rotate([0, 0, angle])\n            translate([15 + j * 6, 0, j * 5])\n            rotate([90, 0, 0])\n            sphere(1.2, $fn=8);\n        }\n    }\n}\n\n// Base/stand for stability\nmodule base() {\n    color(\"DarkSlateGray\", 0.3)\n    translate([0, 0, -5])\n    cylinder(h=5, r=35, $fn=32);\n}\n\n// Assemble the kraken\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    base();\n    kraken_body();\n    kraken_eyes();\n    kraken_beak();\n    kraken_tentacles();\n    suction_cups();\n}",
    "renders": true
  },
  {
    "mythical_creature": "leviathan",
    "openscad_code": "// Leviathan - Mythical Sea Serpent\n// Realistic style, medium complexity\n\n// Main body parameters\nbody_length = 80;\nbody_width = 15;\nbody_height = 20;\n\n// Color definitions\nleviathan_body = [0, 0.2, 0.3];      // Deep ocean blue-green\nleviathan_accents = [0.1, 0.4, 0.5]; // Lighter scales\nleviathan_eyes = [1, 0, 0];        // Glowing red eyes\n\n// Scale module for repetitive patterns\nmodule scale_pattern(size, count) {\n    for(i = [0:count-1]) {\n        translate([i*size*0.8, 0, sin(i*30)*0.5]) {\n            color(leviathan_accents)\n            scale([1, 0.8, 0.3])\n            sphere(size/2);\n        }\n    }\n}\n\n// Horn module\nmodule horn(height, radius) {\n    color(leviathan_accents)\n    cylinder(h=height, r1=radius, r2=radius/3);\n}\n\n// Fin module\nmodule fin(width, height, thickness) {\n    color(leviathan_accents)\n    difference() {\n        scale([1, 0.3, 1])\n        sphere([width, height, thickness]);\n        \n        translate([0, -height, 0])\n        cube([width*2, height*2, thickness*2], center=true);\n    }\n}\n\n// Main leviathan model\nmodule leviathan() {\n    // Main body\n    color(leviathan_body)\n    union() {\n        // Central torso\n        translate([0, 0, 0])\n        scale([body_length/2, body_width/2, body_height/2])\n        sphere(1);\n        \n        // Head\n        translate([-body_length/2 - 10, 0, body_height/4])\n        rotate([0, 30, 0])\n        scale([1.2, 0.8, 0.8])\n        sphere(8);\n        \n        // Long serpentine tail\n        for(i = [0:8]) {\n            translate([i*body_length/10, 0, -i*1.5])\n            rotate([0, 0, sin(i*20)*10])\n            scale([1 - i*0.08, 1 - i*0.05, 1 - i*0.05])\n            sphere(body_width/2);\n        }\n        \n        // Dorsal fins\n        for(i = [1:3]) {\n            translate([-body_length/3 + i*body_length/3, 0, body_height/2 + 2])\n            rotate([0, 0, 0])\n            fin(8, 6, 2);\n        }\n        \n        // Side fins\n        translate([body_length/4, body_width/2 + 3, -body_height/4])\n        rotate([0, 0, 90])\n        fin(6, 4, 1.5);\n        \n        mirror([0, 1, 0])\n        translate([body_length/4, body_width/2 + 3, -body_height/4])\n        rotate([0, 0, 90])\n        fin(6, 4, 1.5);\n        \n        // Horns\n        translate([-body_length/2 - 15, 0, body_height/2 + 5])\n        rotate([0, -30, 0])\n        horn(8, 2);\n        \n        translate([-body_length/2 - 15, -3, body_height/2 + 3])\n        rotate([0, -30, -20])\n        horn(6, 1.5);\n        \n        translate([-body_length/2 - 15, 3, body_height/2 + 3])\n        rotate([0, -30, 20])\n        horn(6, 1.5);\n        \n        // Eyes\n        color(leviathan_eyes)\n        translate([-body_length/2 - 12, -3, body_height/2 + 2])\n        sphere(1.5);\n        \n        color(leviathan_eyes)\n        translate([-body_length/2 - 12, 3, body_height/2 + 2])\n        sphere(1.5);\n        \n        // Scales along body\n        for(i = [0:3]) {\n            translate([-body_length/3 + i*body_length/4, 0, body_height/2])\n            scale_pattern(3, 5);\n        }\n        \n        // Tail scales\n        for(i = [0:5]) {\n            translate([i*body_length/8, 0, -i*1.5 - body_height/4])\n            scale_pattern(2, 3);\n        }\n        \n        // Mouth\n        color([0.1, 0.1, 0.1])\n        translate([-body_length/2 - 15, 0, 0])\n        rotate([0, 30, 0])\n        difference() {\n            sphere(6);\n            translate([0, 0, -3])\n            cube([12, 8, 6], center=true);\n        }\n        \n        // Teeth\n        color([0.9, 0.9, 0.9])\n        for(i = [-3:3]) {\n            translate([-body_length/2 - 15, i*1.2, -2])\n            rotate([0, 30, 0])\n            cylinder(h=3, r1=0.5, r2=0.3);\n        }\n    }\n}\n\n// Create the leviathan\nleviathan();",
    "renders": true
  },
  {
    "mythical_creature": "salamander",
    "openscad_code": "// Mythical Salamander - Fire Salamander from alchemical lore\n// Features: Elemental fire patterns, mystical runes, and a crest along the spine\n\n// Overall dimensions: ~80mm long, 30mm wide, 20mm tall\n// 3D printable with minimal supports\n\n// Colors for the creature\ncolor([0.2, 0.4, 0.1])   // Dark green base color\n\nmodule salamander() {\n    // Main body - segmented for flexibility\n    union() {\n        // Head\n        translate([0, 0, 5]) {\n            sphere(d=15, $fn=20);\n        }\n        \n        // Neck\n        translate([-10, 0, 5]) {\n            cylinder(h=8, d1=12, d2=10, $fn=16);\n        }\n        \n        // Body segments\n        for(i = [0:3]) {\n            translate([-20 - i*12, 0, 5]) {\n                sphere(d=12 - i*1.5, $fn=16);\n            }\n        }\n        \n        // Tail - tapering\n        hull() {\n            translate([-70, 0, 5]) sphere(d=6, $fn=12);\n            translate([-85, 0, 2]) sphere(d=2, $fn=8);\n        }\n    }\n    \n    // Legs\n    module leg(posX, posY, angle) {\n        translate([posX, posY, 0]) {\n            rotate([0, 0, angle]) {\n                // Upper leg\n                translate([0, 0, 2]) {\n                    cylinder(h=8, d=4, $fn=8);\n                }\n                // Lower leg\n                translate([0, -6, -2]) {\n                    rotate([60, 0, 0]) {\n                        cylinder(h=6, d=3, $fn=8);\n                    }\n                }\n                // Foot\n                translate([0, -11, -4]) {\n                    cube([6, 3, 2], center=true);\n                }\n            }\n        }\n    }\n    \n    // Four legs\n    leg(-15, 8, 45);\n    leg(-15, -8, -45);\n    leg(-45, 8, 30);\n    leg(-45, -8, -30);\n    \n    // Mystical crest along spine\n    module crest_spike(posX) {\n        translate([posX, 0, 12]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=8, d1=3, d2=0.5, $fn=6);\n            }\n        }\n    }\n    \n    for(i = [-30:5:5]) {\n        crest_spike(i);\n    }\n    \n    // Eyes with mystical glow\n    color([1, 0.8, 0]) {\n        translate([5, 3, 8]) {\n            sphere(d=3, $fn=12);\n        }\n        translate([5, -3, 8]) {\n            sphere(d=3, $fn=12);\n        }\n    }\n    \n    // Mystical runes on body\n    module rune(posX, posY) {\n        translate([posX, posY, 7]) {\n            rotate([90, 0, 0]) {\n                color([1, 0.5, 0]) {\n                    difference() {\n                        cylinder(h=0.5, d=4, $fn=6);\n                        cylinder(h=1, d=2, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Fire pattern scales\n    for(i = [-60:10:0]) {\n        for(j = [-4:2:4]) {\n            if(j != 0) {\n                rune(i, j);\n            }\n        }\n    }\n    \n    // Fire elemental aura at tail\n    color([1, 0.3, 0, 0.6]) {\n        translate([-80, 0, 3]) {\n            sphere(d=10, $fn=12);\n        }\n    }\n}\n\n// Generate the creature\nsalamander();",
    "renders": true
  },
  {
    "mythical_creature": "fenrir",
    "openscad_code": "// Fenrir - The Monstrous Wolf from Norse Mythology\n// Medium complexity realistic style 3D printable model\n\n// Overall dimensions: ~80mm length, ~45mm height\n\n// Color definitions\ncolor_body = [0.2, 0.15, 0.1];      // Dark brown fur\ncolor_accents = [0.3, 0.25, 0.2];   // Lighter fur highlights\ncolor_eyes = [1, 0, 0];             // Red glowing eyes\ncolor_mouth = [0.6, 0.1, 0.1];      // Dark red mouth interior\ncolor_chain = [0.5, 0.5, 0.5];      // Gleipnir chain - silver\n\n// Main body module\nmodule fenrir_body() {\n    color(color_body)\n    union() {\n        // Torso - main mass\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n            sphere(d=30, $fn=32);\n        \n        // Chest forward\n        translate([10, 0, 12])\n            scale([1.3, 0.9, 0.8])\n            sphere(d=25, $fn=32);\n        \n        // Hindquarters\n        translate([-15, 0, 12])\n            scale([1.1, 1, 0.9])\n            sphere(d=28, $fn=32);\n    }\n}\n\n// Head module with snout\nmodule fenrir_head() {\n    color(color_body)\n    union() {\n        // Main head sphere\n        translate([25, 0, 25])\n            scale([1.2, 0.9, 1])\n            sphere(d=20, $fn=32);\n        \n        // Snout extension\n        translate([35, 0, 22])\n            scale([1.5, 0.7, 0.6])\n            sphere(d=15, $fn=32);\n        \n        // Upper jaw\n        color(color_mouth)\n        translate([38, 0, 18])\n            scale([1.8, 0.6, 0.3])\n            cube([10, 8, 4], center=true);\n        \n        // Lower jaw\n        translate([35, 0, 12])\n            scale([1.6, 0.5, 0.4])\n            cube([12, 7, 5], center=true);\n        \n        // Eyes\n        color(color_eyes)\n        union() {\n            translate([28, 7, 25])\n                sphere(d=3, $fn=16);\n            translate([28, -7, 25])\n                sphere(d=3, $fn=16);\n        }\n    }\n}\n\n// Ear module with positioning\nmodule fenrir_ears() {\n    color(color_body)\n    union() {\n        // Left ear\n        translate([22, 10, 35])\n            rotate([0, -20, -30])\n            scale([0.3, 1, 2])\n            cylinder(h=12, d1=8, d2=4, $fn=8);\n        \n        // Right ear\n        translate([22, -10, 35])\n            rotate([0, -20, 30])\n            scale([0.3, 1, 2])\n            cylinder(h=12, d1=8, d2=4, $fn=8);\n    }\n}\n\n// Leg module for reusability\nmodule fenrir_leg(x_pos, y_pos, angle, length) {\n    color(color_body)\n    union() {\n        // Upper leg\n        translate([x_pos, y_pos, 15])\n            rotate([0, angle, 0])\n            scale([0.8, 0.8, 1])\n            cylinder(h=length, d=8, $fn=16);\n        \n        // Lower leg\n        translate([x_pos + length*sin(angle), y_pos, 15 - length*cos(angle)])\n            rotate([0, angle + 20, 0])\n            scale([0.7, 0.7, 1])\n            cylinder(h=length*0.8, d=6, $fn=16);\n        \n        // Paw\n        translate([x_pos + length*sin(angle) + length*0.8*sin(angle+20), \n                   y_pos, \n                   15 - length*cos(angle) - length*0.8*cos(angle+20)])\n            sphere(d=7, $fn=16);\n    }\n}\n\n// Tail module with segments\nmodule fenrir_tail() {\n    color(color_body)\n    union() {\n        for(i = [0:3]) {\n            translate([-25 - i*8, 0, 15 + i*2])\n                rotate([0, 10*i, 0])\n                scale([1 - i*0.15, 1 - i*0.1, 1 - i*0.1])\n                sphere(d=12 - i*2, $fn=16);\n        }\n    }\n}\n\n// Gleipnir chain binding\nmodule gleipnir_chain() {\n    color(color_chain)\n    difference() {\n        // Main chain loop around muzzle\n        translate([30, 0, 20])\n            rotate([90, 0, 0])\n            rotate_extrude(angle=360, $fn=64)\n            translate([12, 0, 0])\n            circle(d=2, $fn=16);\n        \n        // Decorative chain links\n        for(i = [0:4]) {\n            translate([20 - i*5, 0, 20])\n                rotate([0, 90, 0])\n                rotate_extrude(angle=360, $fn=32)\n                translate([3, 0, 0])\n                circle(d=1.5, $fn=12);\n        }\n    }\n}\n\n// Fur texture using small spheres\nmodule fur_detail() {\n    color(color_accents)\n    for(i = [0:20]) {\n        for(j = [0:10]) {\n            translate([\n                -20 + i*2 + sin(i*j)*0.5,\n                -10 + j*2 + cos(i*j)*0.5,\n                20 + sin(i)*2\n            ])\n            sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    fenrir_body();\n    fenrir_head();\n    fenrir_ears();\n    \n    // Four legs positioned for 3D printing stability\n    fenrir_leg(10, 8, -30, 20);   // Front left\n    fenrir_leg(10, -8, -30, 20);  // Front right\n    fenrir_leg(-10, 6, 30, 18);   // Rear left\n    fenrir_leg(-10, -6, 30, 18);  // Rear right\n    \n    fenrir_tail();\n    gleipnir_chain();\n    \n    // Fur details only on top surfaces for 3D printing\n    fur_detail();\n}",
    "renders": true
  },
  {
    "mythical_creature": "roc",
    "openscad_code": "// Roc - Mythical Giant Bird of Prey\n// Medium complexity, realistic style\n\n// Wing module - feathered wing with realistic structure\nmodule wing(span=25, thick=1.5) {\n    color(\"SaddleBrown\")\n    union() {\n        // Main wing bone structure\n        translate([-span/2, 0, 0])\n            cube([span, thick*2, thick], center=true);\n        \n        // Primary feathers\n        for(i=[0:3]) {\n            rotate([0, 0, -i*20])\n                translate([span/2 - i*6, 0, 0])\n                    scale([1.5, 0.3, 0.1])\n                        sphere(5 - i*0.5);\n        }\n        \n        // Secondary feathers\n        for(i=[0:5]) {\n            rotate([0, 0, -i*15 + 10])\n                translate([span/4 - i*3, 0, 1])\n                    scale([1.2, 0.25, 0.08])\n                        sphere(3.5 - i*0.3);\n        }\n    }\n}\n\n// Talon module - sharp curved claws\nmodule talon(size=3) {\n    color(\"DimGray\")\n    difference() {\n        union() {\n            // Main claw\n            rotate([0, -30, 0])\n                cylinder(h=size*2, r1=size/2, r2=0.5, $fn=8);\n            \n            // Secondary toe\n            translate([0, size/2, 0])\n                rotate([0, -45, 30])\n                    cylinder(h=size*1.5, r1=size/3, r2=0.3, $fn=8);\n        }\n        // Groove for sharp edge\n        translate([0, 0, size])\n            rotate([0, -30, 0])\n                cube([size, 0.5, size*2], center=true);\n    }\n}\n\n// Body module - muscular bird body\nmodule body() {\n    color(\"DarkGoldenrod\")\n    union() {\n        // Main torso\n        scale([1.2, 1, 0.8])\n            sphere(12, $fn=32);\n        \n        // Chest muscles\n        translate([0, 6, 2])\n            scale([0.8, 0.6, 0.5])\n                sphere(8, $fn=24);\n        \n        // Back ridge\n        for(i=[-6:6]) {\n            translate([i*1.5, -1, 8 - abs(i)*0.5])\n                cube([1.5, 2, 1], center=true);\n        }\n    }\n}\n\n// Head module - eagle-like with sharp beak\nmodule head() {\n    color(\"Goldenrod\")\n    union() {\n        // Skull\n        translate([0, 15, 5])\n            scale([0.8, 1.2, 1])\n                sphere(8, $fn=24);\n        \n        // Beak\n        color(\"DarkOrange\")\n        translate([0, 25, 0])\n            rotate([0, -20, 0])\n                difference() {\n                    cylinder(h=15, r1=5, r2=1, $fn=8);\n                    translate([0, -2, 5])\n                        cube([10, 4, 10], center=true);\n                }\n        \n        // Eyes\n        color(\"Black\")\n        translate([-3, 15, 7])\n            sphere(1.5);\n        translate([3, 15, 7])\n            sphere(1.5);\n        \n        // Crest feathers\n        for(i=[-2:2]) {\n            translate([i*2, 8, 12])\n                rotate([0, -10, 0])\n                    scale([0.3, 0.1, 1])\n                        cylinder(h=6, r=2, $fn=4);\n        }\n    }\n}\n\n// Tail feathers - long trailing feathers\nmodule tail() {\n    color(\"Sienna\")\n    for(i=[-2:2]) {\n        rotate([0, 0, i*15])\n            translate([-i*3, -18, 0])\n                scale([0.8, 0.1, 2])\n                    cylinder(h=20 - abs(i)*3, r=3, $fn=4);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 10])\nrotate([0, 0, 0])\nunion() {\n    // Body\n    body();\n    \n    // Head\n    head();\n    \n    // Wings\n    translate([0, 0, 5])\n    rotate([0, 0, 20])\n        wing(25, 1.5);\n    \n    translate([0, 0, 5])\n    rotate([0, 0, -20])\n        mirror([1, 0, 0])\n            wing(25, 1.5);\n    \n    // Legs\n    color(\"DarkGoldenrod\")\n    translate([-6, -5, -8])\n        cylinder(h=12, r=2, $fn=8);\n    translate([6, -5, -8])\n        cylinder(h=12, r=2, $fn=8);\n    \n    // Talons\n    translate([-6, -5, -20])\n        talon(3);\n    translate([6, -5, -20])\n        talon(3);\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "mythical_creature": "behemoth",
    "openscad_code": "// Behemoth - Mythical Earth-Shaker\n// A massive quadruped with armored plates and primal power\n\n// Scale factor for 3D printing (80mm height)\nscale_factor = 0.8;\n\n// Main body assembly\nmodule behemoth() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Central body core\n            color(\"SaddleBrown\") body();\n            \n            // Four legs\n            color(\"DarkGoldenrod\") {\n                for(i = [0,1]) {\n                    translate([15, -10 + i*20, -5]) rotate([0, 0, i*180]) leg();\n                    translate([-15, -10 + i*20, -5]) rotate([0, 0, i*180]) leg();\n                }\n            }\n            \n            // Head and neck\n            color(\"SaddleBrown\") translate([0, 0, 25]) head();\n            \n            // Armored plates along spine\n            color(\"DarkOliveGreen\") {\n                for(pos = [seq(-20, 20, 10)]) {\n                    translate([pos, 0, 15]) scale([1.2, 0.8, 0.3]) armor_plate();\n                }\n            }\n            \n            // Tail\n            color(\"SaddleBrown\") translate([-30, 0, 5]) tail();\n        }\n    }\n}\n\n// Main torso - massive and blocky\nmodule body() {\n    difference() {\n        union() {\n            // Main torso\n            cube([40, 25, 20], center=true);\n            \n            // Shoulder hump\n            translate([15, 0, 8]) sphere(d=20);\n            \n            // Hip hump\n            translate([-15, 0, 8]) sphere(d=20);\n        }\n        \n        // Hollow out for printability\n        cube([36, 21, 16], center=true);\n    }\n}\n\n// Single leg - thick and pillar-like\nmodule leg() {\n    difference() {\n        union() {\n            // Upper leg\n            cylinder(h=15, d1=10, d2=8);\n            \n            // Lower leg\n            translate([0, 0, -8]) cylinder(h=10, d1=8, d2=12);\n            \n            // Foot\n            translate([0, 0, -16]) cube([14, 10, 4], center=true);\n        }\n        \n        // Hollow leg\n        translate([0, 0, -8]) cylinder(h=20, d=6);\n    }\n}\n\n// Head with horns and tusks\nmodule head() {\n    difference() {\n        union() {\n            // Main head\n            translate([0, 0, 10]) sphere(d=18);\n            \n            // Snout\n            translate([0, 0, 18]) scale([1.5, 1, 0.8]) sphere(d=12);\n            \n            // Horns - curved forward\n            for(angle = [30, -30]) {\n                rotate([angle, 0, 0]) \n                translate([0, 8, 22]) \n                rotate([30, 0, 0])\n                scale([0.3, 0.3, 1])\n                cylinder(h=12, d1=4, d2=2);\n            }\n            \n            // Tusks\n            for(side = [-1, 1]) {\n                translate([0, side*6, 15])\n                rotate([0, side*20, 0])\n                scale([0.4, 0.4, 1])\n                cylinder(h=8, d1=3, d2=1);\n            }\n            \n            // Ears\n            for(side = [-1, 1]) {\n                translate([0, side*7, 20])\n                rotate([0, 0, side*20])\n                scale([0.5, 0.1, 0.8])\n                sphere(d=5);\n            }\n        }\n        \n        // Eye sockets\n        for(side = [-1, 1]) {\n            translate([6, side*4, 18]) sphere(d=3);\n        }\n        \n        // Mouth cavity\n        translate([0, 0, 16]) cube([8, 10, 6], center=true);\n    }\n}\n\n// Armor plates with ridge detail\nmodule armor_plate() {\n    difference() {\n        // Main plate\n        cube([8, 6, 2], center=true);\n        \n        // Ridge groove\n        translate([0, 0, 1]) cube([6, 0.5, 1], center=true);\n    }\n}\n\n// Muscular tail with segments\nmodule tail() {\n    for(i = [0:3]) {\n        translate([-i*8 - 5, 0, -i*2]) \n        scale([1 - i*0.15, 1 - i*0.15, 1])\n        rotate([0, i*10, 0])\n        cylinder(h=8, d=8 - i*1.5);\n    }\n}\n\n// Helper function for sequences\nfunction seq(start, end, step) = \n    [for (i = [start:step:end]) i];\n\n// Render the complete creature\nbehemoth();",
    "renders": true
  },
  {
    "mythical_creature": "lamia",
    "openscad_code": "// Lamia - Mythical Snake-Tailed Woman Creature\n// Realistic style with medium complexity\n\n// Overall scale\nscale_factor = 0.5;  // 50mm height\n\n// Colors\nskin_color = \"tan\";\nsnake_color = \"darkgreen\";\nhair_color = \"saddlebrown\";\neye_color = \"red\";\n\nmodule lamia() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Snake tail body\n        color(snake_color) {\n            // Main tail segments\n            for(i = [0:15]) {\n                translate([0, 0, -i*3]) {\n                    rotate([0, 0, i*15]) {\n                        scale([1 - i*0.03, 1 - i*0.03, 1]) {\n                            cylinder(h=3, r1=8 - i*0.4, r2=8 - (i+1)*0.4, $fn=16);\n                        }\n                    }\n                }\n            }\n            \n            // Tail tip\n            translate([0, 0, -48]) {\n                rotate([0, 0, 240]) {\n                    cylinder(h=8, r1=3, r2=0.1, $fn=8);\n                }\n            }\n        }\n        \n        // Human torso\n        color(skin_color) {\n            // Waist to chest\n            translate([0, 0, 0]) {\n                cylinder(h=12, r1=7, r2=5, $fn=20);\n            }\n            \n            // Chest\n            translate([0, 0, 12]) {\n                sphere(d=14, $fn=20);\n            }\n            \n            // Shoulders\n            translate([5, 0, 16]) {\n                sphere(d=6, $fn=12);\n            }\n            translate([-5, 0, 16]) {\n                sphere(d=6, $fn=12);\n            }\n            \n            // Arms\n            for(side = [-1, 1]) {\n                translate([side*7, 0, 16]) {\n                    rotate([0, 0, side*30]) {\n                        // Upper arm\n                        cylinder(h=8, r1=2.5, r2=2, $fn=10);\n                        \n                        // Elbow\n                        translate([0, 0, 8]) {\n                            sphere(d=4, $fn=10);\n                            \n                            // Lower arm\n                            translate([0, 0, 0]) {\n                                rotate([0, 0, side*20]) {\n                                    cylinder(h=8, r1=2, r2=1.5, $fn=10);\n                                    \n                                    // Hand\n                                    translate([0, 0, 8]) {\n                                        sphere(d=3, $fn=8);\n                                        \n                                        // Claws\n                                        for(claw = [0:3]) {\n                                            rotate([0, 0, claw*90]) {\n                                                translate([2, 0, 0]) {\n                                                    cylinder(h=2, r1=0.5, r2=0.2, $fn=6);\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Head\n        color(skin_color) {\n            translate([0, 0, 22]) {\n                sphere(d=10, $fn=20);\n                \n                // Snout\n                translate([0, 3.5, 0]) {\n                    scale([0.7, 0.5, 0.5]) {\n                        sphere(d=8, $fn=15);\n                    }\n                }\n            }\n        }\n        \n        // Snake features on head\n        color(snake_color) {\n            // Snake hood\n            translate([0, 0, 19]) {\n                rotate([0, 0, 0]) {\n                    scale([1.5, 0.3, 1]) {\n                        cylinder(h=0.5, r1=8, r2=6, $fn=20);\n                    }\n                }\n            }\n            \n            // Scales on face\n            for(i = [0:4]) {\n                for(j = [0:3]) {\n                    translate([j*2 - 3, 2, 20 + i*1.5]) {\n                        rotate([0, 90, 0]) {\n                            scale([0.5, 0.3, 0.2]) {\n                                cylinder(h=1, r1=1, r2=0.5, $fn=5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Hair (snake-like tendrils)\n        color(hair_color) {\n            for(i = [0:5]) {\n                angle = i * 60;\n                translate([cos(angle)*4, sin(angle)*4, 26]) {\n                    rotate([10, 0, angle]) {\n                        // Snake hair\n                        for(seg = [0:4]) {\n                            translate([0, 0, seg*2]) {\n                                rotate([0, 0, seg*15]) {\n                                    cylinder(h=2, r1=1 - seg*0.1, r2=0.8 - seg*0.1, $fn=6);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Eyes\n        color(eye_color) {\n            translate([2.5, 4, 23]) {\n                sphere(d=1.5, $fn=8);\n            }\n            translate([-2.5, 4, 23]) {\n                sphere(d=1.5, $fn=8);\n            }\n        }\n        \n        // Fangs\n        color(\"ivory\") {\n            translate([1, 5, 21]) {\n                rotate([0, 30, 0]) {\n                    cylinder(h=3, r1=1, r2=0.1, $fn=6);\n                }\n            }\n            translate([-1, 5, 21]) {\n                rotate([0, -30, 0]) {\n                    cylinder(h=3, r1=1, r2=0.1, $fn=6);\n                }\n            }\n        }\n        \n        // Scales pattern on snake body\n        color(snake_color) {\n            for(i = [0:20]) {\n                for(j = [0:8]) {\n                    angle = j * 45;\n                    dist = 8 - i*0.3;\n                    translate([cos(angle)*dist, sin(angle)*dist, -i*2.5]) {\n                        rotate([90, 0, 0]) {\n                            scale([1, 0.7, 0.3]) {\n                                cylinder(h=0.5, r1=1, r2=0.5, $fn=5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Underbelly\n        color(\"lightgreen\") {\n            for(i = [0:15]) {\n                translate([0, 3, -i*3]) {\n                    scale([1 - i*0.03, 0.3, 1]) {\n                        cylinder(h=3, r1=8 - i*0.4, r2=8 - (i+1)*0.4, $fn=16);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the lamia\nlamia();",
    "renders": true
  },
  {
    "mythical_creature": "ammit",
    "openscad_code": "// Ammit - Devourer of the Dead - Medium complexity realistic model\n// Egyptian mythical creature with crocodile head, lion body, and hippopotamus hind legs\n\n// Scale factor for easy resizing\nscale_factor = 1;\noverall_size = 70 * scale_factor;\n\n// Colors\ncolor_crocodile = [0.2, 0.4, 0.2];\ncolor_lion = [0.6, 0.4, 0.2];\ncolor_hippo = [0.5, 0.3, 0.3];\ncolor_teeth = [0.9, 0.9, 0.8];\ncolor_dark = [0.1, 0.1, 0.1];\n\nmodule crocodile_head() {\n    color(color_crocodile) {\n        // Main head\n        union() {\n            // Snout\n            translate([0, 0, 0])\n                scale([2, 1, 0.8])\n                sphere(8 * scale_factor);\n            \n            // Head back\n            translate([0, -8, 2])\n                scale([1.2, 1.5, 1])\n                sphere(8 * scale_factor);\n            \n            // Eyes\n            for(i = [-1, 1]) {\n                translate([i * 6, 2, 4])\n                    color(color_dark)\n                    sphere(1.5 * scale_factor);\n            }\n            \n            // Teeth\n            for(i = [-1, 1]) {\n                for(j = [0:2:6]) {\n                    translate([i * (6 - j), -10, -3 + j * 0.5])\n                        rotate([0, 0, 30 * i])\n                        color(color_teeth)\n                        cylinder(h = 3 * scale_factor, r1 = 0.5 * scale_factor, r2 = 0.2 * scale_factor);\n                }\n            }\n            \n            // Nostrils\n            for(i = [-1, 1]) {\n                translate([i * 2, -11, 0])\n                    cylinder(h = 2 * scale_factor, r = 0.8 * scale_factor);\n            }\n        }\n    }\n}\n\nmodule lion_body() {\n    color(color_lion) {\n        union() {\n            // Main torso\n            translate([0, 15, 0])\n                scale([2, 2.5, 1.5])\n                sphere(8 * scale_factor);\n            \n            // Chest\n            translate([0, 10, -5])\n                scale([1.5, 1.8, 1.2])\n                sphere(7 * scale_factor);\n            \n            // Scales pattern\n            for(i = [-1, 0, 1]) {\n                for(j = [0:3]) {\n                    translate([i * 5, 12 + j * 3, -2])\n                        scale([0.8, 0.8, 0.3])\n                        color([0.4, 0.25, 0.1])\n                        sphere(2 * scale_factor);\n                }\n            }\n        }\n    }\n}\n\nmodule hippo_hind_legs() {\n    color(color_hippo) {\n        union() {\n            // Left leg\n            translate([-6, 25, -8])\n                rotate([0, 0, -10])\n                scale([1.2, 1.5, 2])\n                cylinder(h = 12 * scale_factor, r = 4 * scale_factor);\n            \n            // Right leg\n            translate([6, 25, -8])\n                rotate([0, 0, 10])\n                scale([1.2, 1.5, 2])\n                cylinder(h = 12 * scale_factor, r = 4 * scale_factor);\n            \n            // Feet\n            translate([-6, 35, -18])\n                scale([2, 1, 0.5])\n                sphere(4 * scale_factor);\n            \n            translate([6, 35, -18])\n                scale([2, 1, 0.5])\n                sphere(4 * scale_factor);\n        }\n    }\n}\n\nmodule front_legs() {\n    color(color_lion) {\n        union() {\n            // Left front leg\n            translate([-8, 8, -6])\n                rotate([0, 0, -15])\n                cylinder(h = 15 * scale_factor, r = 3 * scale_factor);\n            \n            // Right front leg\n            translate([8, 8, -6])\n                rotate([0, 0, 15])\n                cylinder(h = 15 * scale_factor, r = 3 * scale_factor);\n            \n            // Paws\n            translate([-8, 18, -9])\n                scale([1.5, 1.2, 0.6])\n                sphere(3 * scale_factor);\n            \n            translate([8, 18, -9])\n                scale([1.5, 1.2, 0.6])\n                sphere(3 * scale_factor);\n        }\n    }\n}\n\nmodule tail() {\n    color(color_hippo) {\n        union() {\n            // Tail segments\n            for(i = [0:3]) {\n                translate([0, 35 + i * 3, -5 + sin(i * 30) * 2])\n                    rotate([0, 0, i * 15])\n                    sphere(2 * scale_factor);\n            }\n            \n            // Crocodile tail tip\n            translate([0, 48, -3])\n                scale([0.5, 2, 0.3])\n                color(color_crocodile)\n                sphere(3 * scale_factor);\n        }\n    }\n}\n\n// Assemble the Ammit\nrotate([0, -20, 0]) {\n    crocodile_head();\n    lion_body();\n    hippo_hind_legs();\n    front_legs();\n    tail();\n}",
    "renders": true
  },
  {
    "mythical_creature": "banshee",
    "openscad_code": "// Banshee - Wailing Spirit of Death\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main color scheme\ncolor(\"ghostwhite\") {\n\n// Head module\nmodule head() {\n    // Skull-like face\n    difference() {\n        union() {\n            translate([0,0,15]) sphere(8);\n            scale([1,1.2,1.5]) sphere(8);\n        }\n        // Eye sockets\n        translate([-5,3,18]) rotate([0,20,0]) cylinder(h=10,r=2);\n        translate([5,3,18]) rotate([0,-20,0]) cylinder(h=10,r=2);\n    }\n    \n    // Jaw\n    translate([0,-3,6]) rotate([20,0,0]) scale([0.8,0.6,0.4]) cube([10,8,6], center=true);\n    \n    // Horns\n    color(\"ivory\") {\n        translate([-8,5,22]) rotate([30,-20,0]) cylinder(h=12,r1=2,r2=0.5);\n        translate([8,5,22]) rotate([30,20,0]) cylinder(h=12,r1=2,r2=0.5);\n    }\n}\n\n// Torso module\nmodule torso() {\n    color(\"gainsboro\") {\n        union() {\n            // Chest\n            translate([0,0,0]) scale([1.2,0.8,2]) sphere(10);\n            \n            // Ribcage detail\n            for(i = [-4:2:4]) {\n                translate([i,0,8]) rotate([0,90,0]) cylinder(h=1,r=0.5);\n            }\n        }\n    }\n}\n\n// Arms module\nmodule arms() {\n    color(\"lightgray\") {\n        // Left arm\n        translate([-15,0,5]) rotate([0,0,30]) union() {\n            cylinder(h=15,r=3);\n            translate([0,0,-7.5]) sphere(3);\n        }\n        \n        // Right arm\n        translate([15,0,5]) rotate([0,0,-30]) union() {\n            cylinder(h=15,r=3);\n            translate([0,0,-7.5]) sphere(3);\n        }\n    }\n}\n\n// Wings module\nmodule wings() {\n    color(\"slategray\") {\n        // Left wing\n        translate([-12,0,25]) rotate([0,0,-20]) {\n            // Main wing structure\n            difference() {\n                union() {\n                    // Upper wing\n                    translate([0,0,5]) scale([1.5,0.1,1]) sphere(8);\n                    // Lower wing\n                    translate([0,0,-5]) scale([1.2,0.1,0.8]) sphere(6);\n                }\n                // Wing tears\n                translate([-5,0,0]) cylinder(h=20,r=0.5);\n                translate([-3,0,-2]) cylinder(h=15,r=0.5);\n            }\n        }\n        \n        // Right wing\n        mirror([1,0,0]) {\n            translate([-12,0,25]) rotate([0,0,-20]) {\n                difference() {\n                    union() {\n                        translate([0,0,5]) scale([1.5,0.1,1]) sphere(8);\n                        translate([0,0,-5]) scale([1.2,0.1,0.8]) sphere(6);\n                    }\n                    translate([-5,0,0]) cylinder(h=20,r=0.5);\n                    translate([-3,0,-2]) cylinder(h=15,r=0.5);\n                }\n            }\n        }\n    }\n}\n\n// Dress/tattered robes\nmodule dress() {\n    color(\"darkslategray\") {\n        // Flowing dress\n        difference() {\n            union() {\n                cylinder(h=30,r1=15,r2=25);\n                translate([0,0,-15]) cylinder(h=20,r1=25,r2=30);\n            }\n            // Tattered edges\n            for(i = [0:30:330]) {\n                rotate([0,0,i]) translate([23,0,-20]) cylinder(h=25,r=5);\n            }\n        }\n    }\n}\n\n// Hair - flowing spectral strands\nmodule hair() {\n    color(\"silver\") {\n        for(i = [0:15:345]) {\n            rotate([0,0,i]) {\n                translate([8,0,22]) scale([0.2,0.2,1.5]) sphere(3);\n                translate([7,0,19]) scale([0.2,0.2,1.2]) sphere(2.5);\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0,0,30]) {\n    head();\n    translate([0,0,10]) torso();\n    arms();\n    translate([0,0,20]) wings();\n    dress();\n    translate([0,0,10]) hair();\n}\n\n// Base stand for 3D printing\ncolor(\"dimgray\") {\n    translate([0,0,-35]) cylinder(h=5,r=35);\n}",
    "renders": true
  },
  {
    "mythical_creature": "barghest",
    "openscad_code": "// Barghest - Mythical black dog creature\n// Features: wolf-like body, glowing red eyes, shaggy fur texture, muscular build\n\n$fn = 32;\n\n// Overall dimensions: 80mm length, 40mm height, 30mm width\nmodule barghest() {\n    color(\"black\") {\n        union() {\n            // Main body\n            body();\n            \n            // Head with snout\n            head();\n            \n            // Four legs\n            legs();\n            \n            // Tail\n            tail();\n            \n            // Glowing eyes\n            eyes();\n        }\n    }\n}\n\nmodule body() {\n    // Main torso\n    translate([0, 0, 15]) {\n        scale([2, 1, 1.2]) {\n            sphere(10);\n        }\n    }\n    \n    // Chest area\n    translate([-10, 0, 12]) {\n        scale([1.5, 0.8, 1]) {\n            sphere(8);\n        }\n    }\n    \n    // Back ridge\n    for(i = [-8:4:8]) {\n        translate([i, 0, 25]) {\n            scale([0.3, 0.8, 0.3]) {\n                sphere(5);\n            }\n        }\n    }\n}\n\nmodule head() {\n    // Main head shape\n    translate([20, 0, 20]) {\n        scale([1.5, 1, 1.2]) {\n            sphere(8);\n        }\n    }\n    \n    // Snout\n    translate([28, 0, 18]) {\n        scale([2, 0.7, 0.7]) {\n            cylinder(h = 8, r1 = 5, r2 = 2);\n        }\n    }\n    \n    // Ears\n    translate([20, 8, 28]) {\n        rotate([0, 15, 0]) {\n            scale([0.3, 0.1, 0.8]) {\n                cylinder(h = 10, r1 = 3, r2 = 1);\n            }\n        }\n    }\n    \n    mirror([0, 1, 0]) {\n        translate([20, 8, 28]) {\n            rotate([0, 15, 0]) {\n                scale([0.3, 0.1, 0.8]) {\n                    cylinder(h = 10, r1 = 3, r2 = 1);\n                }\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Left front leg\n        translate([10, side * 8, 8]) {\n            rotate([0, -10, 0]) {\n                cylinder(h = 15, r = 4);\n            }\n        }\n        \n        // Right front leg\n        translate([5, side * 10, 5]) {\n            rotate([0, -10, 0]) {\n                cylinder(h = 12, r = 4);\n            }\n        }\n        \n        // Hind legs\n        translate([-15, side * 8, 8]) {\n            rotate([0, 10, 0]) {\n                cylinder(h = 18, r = 5);\n            }\n        }\n        \n        translate([-10, side * 10, 5]) {\n            rotate([0, 10, 0]) {\n                cylinder(h = 15, r = 5);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Base of tail\n    translate([-20, 0, 15]) {\n        rotate([0, 30, 0]) {\n            cylinder(h = 25, r1 = 4, r2 = 1);\n        }\n    }\n    \n    // Tail tip\n    translate([-40, 0, 8]) {\n        sphere(3);\n    }\n}\n\nmodule eyes() {\n    color(\"red\") {\n        // Left eye\n        translate([25, 5, 22]) {\n            sphere(2);\n        }\n        \n        // Right eye\n        translate([25, -5, 22]) {\n            sphere(2);\n        }\n    }\n}\n\n// Generate the barghest\nbarghest();",
    "renders": true
  },
  {
    "mythical_creature": "bolla",
    "openscad_code": "// Bolla - Albanian Mythical Sea Dragon\n// Size: ~70mm long, 40mm tall, 50mm wingspan\n\n// Main colors\n$fn = 32;\n\nmodule bolla_dragon() {\n    // Body - serpentine sea dragon\n    color(\"darkgreen\")\n    difference() {\n        union() {\n            // Main body segments\n            translate([0, 0, 10])\n            scale([2, 1, 0.8])\n            sphere(8);\n            \n            translate([-12, 0, 10])\n            scale([1.8, 0.9, 0.7])\n            sphere(7);\n            \n            translate([-22, 0, 10])\n            scale([1.5, 0.8, 0.6])\n            sphere(6);\n            \n            // Tail segments\n            for(i = [1:4]) {\n                translate([-30 - i*8, 0, 10 - i*2])\n                scale([1.5 - i*0.2, 0.7 - i*0.1, 0.5 - i*0.08])\n                sphere(5 - i*0.8);\n            }\n            \n            // Head\n            translate([12, 0, 12])\n            scale([1.2, 0.8, 1])\n            sphere(10);\n        }\n        \n        // Eyes - carved out\n        translate([16, 5, 14])\n        sphere(2);\n        translate([16, -5, 14])\n        sphere(2);\n        \n        // Nostrils\n        translate([14, 3, 10])\n        rotate([90, 0, 0])\n        cylinder(2, 1.5, 1.5);\n        translate([14, -3, 10])\n        rotate([90, 0, 0])\n        cylinder(2, 1.5, 1.5);\n    }\n    \n    // Horns - curved back\n    color(\"darkolivegreen\")\n    for(side = [-1, 1]) {\n        translate([10, side*8, 18])\n        rotate([30, 0, side*30])\n        scale([0.3, 0.3, 1])\n        cylinder(12, 3, 1);\n    }\n    \n    // Dorsal fins/scales\n    color(\"seagreen\")\n    for(i = [0:5]) {\n        translate([-5 - i*5, 0, 18])\n        scale([0.5, 4 - i*0.3, 2])\n        rotate([0, 90, 0])\n        cylinder(1, 1, 3 - i*0.4);\n    }\n    \n    // Wings - webbed dragon wings\n    color(\"forestgreen\")\n    for(side = [-1, 1]) {\n        translate([2, side*15, 15])\n        rotate([0, 0, side*20])\n        union() {\n            // Main wing bone\n            translate([0, 0, 0])\n            rotate([0, -20, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(20, 2, 1);\n            \n            // Secondary wing bone\n            translate([15, 0, -5])\n            rotate([0, 20, -30])\n            scale([0.3, 0.3, 0.8])\n            cylinder(15, 1.5, 1);\n            \n            // Wing membrane\n            translate([7, 0, 2])\n            rotate([0, -10, 0])\n            scale([1, 0.1, 0.7])\n            sphere(12);\n            \n            // Wing webbing\n            translate([10, 0, -3])\n            rotate([0, 10, -20])\n            scale([0.8, 0.05, 0.5])\n            sphere(8);\n        }\n    }\n    \n    // Legs - four flippers\n    color(\"darkgreen\")\n    for(side = [-1, 1]) {\n        // Front flippers\n        translate([5, side*8, 5])\n        rotate([0, side*45, 0])\n        scale([1.5, 0.3, 0.8])\n        cylinder(8, 3, 2);\n        \n        // Back flippers\n        translate([-15, side*6, 5])\n        rotate([0, side*30, 0])\n        scale([1.2, 0.3, 0.6])\n        cylinder(6, 2.5, 1.5);\n    }\n    \n    // Scales pattern on body\n    color(\"darkseagreen\")\n    for(i = [0:4]) {\n        for(j = [0:3]) {\n            translate([-20 + i*8, 0, 12 + sin(j*90)*3])\n            rotate([0, 0, j*45])\n            scale([0.5, 0.5, 0.2])\n            sphere(2);\n        }\n    }\n    \n    // Tail fin\n    color(\"seagreen\")\n    translate([-65, 0, 6])\n    rotate([90, 0, 0])\n    scale([0.2, 4, 2])\n    cylinder(5, 3, 1);\n}\n\n// Create the bolla\nbolla_dragon();",
    "renders": true
  },
  {
    "mythical_creature": "bunyip",
    "openscad_code": "// Realistic Bunyip - Australian mythical water spirit\n// Features: crocodile-like head, seal-like body, tusks, and water spirit details\n\n// Colors\ncolor_bunyip = \"DarkOliveGreen\";\ncolor_tusks = \"Ivory\";\ncolor_eyes = \"Red\";\n\n// Main body parameters\nbody_length = 60;\nbody_diameter = 25;\nhead_length = 35;\nhead_diameter = 20;\n\nmodule bunyip_head() {\n    // Main crocodile-like head\n    color(color_bunyip) {\n        union() {\n            // Snout\n            translate([0, 0, 0])\n                scale([1.5, 1, 1])\n                sphere(d=head_diameter);\n            \n            // Main head\n            translate([-15, 0, 0])\n                sphere(d=head_diameter * 1.2);\n            \n            // Top of head ridge\n            for(i = [-10:5:10]) {\n                translate([i, 0, head_diameter/2 - 2])\n                    rotate([0, 90, 0])\n                        cylinder(h=3, d1=4, d2=2);\n            }\n            \n            // Jaw\n            translate([0, 0, -head_diameter/2 + 3])\n                scale([1.2, 0.8, 0.3])\n                    sphere(d=head_diameter);\n        }\n    }\n    \n    // Eyes (recessed)\n    color(color_eyes)\n    for(side = [-1, 1]) {\n        translate([-8, side * 6, 3])\n            sphere(d=3);\n    }\n    \n    // Tusks\n    color(color_tusks)\n    for(side = [-1, 1]) {\n        translate([5, side * 5, -5])\n            rotate([side * 30, 0, 0])\n                cylinder(h=8, d1=2, d2=1);\n    }\n    \n    // Nostrils\n    color(\"DarkGreen\")\n    for(side = [-1, 1]) {\n        translate([8, side * 3, 0])\n            rotate([90, 0, 0])\n                cylinder(h=2, d=2);\n    }\n}\n\nmodule bunyip_body() {\n    color(color_bunyip) {\n        // Main body - seal-like shape\n        translate([-body_length/2, 0, 0])\n            scale([1, 0.8, 0.6])\n                sphere(d=body_diameter);\n        \n        // Tail\n        translate([-body_length - 10, 0, 0])\n            rotate([0, 0, 10])\n                scale([1.5, 0.5, 0.3])\n                    sphere(d=body_diameter * 0.8);\n        \n        // Scales pattern\n        for(i = [0:5:body_length/2]) {\n            for(j = [0:30:360]) {\n                rotate([0, 0, j])\n                    translate([-i, 0, body_diameter/3])\n                        rotate([90, 0, 0])\n                            cylinder(h=1.5, d=4);\n            }\n        }\n        \n        // Flippers\n        for(side = [-1, 1]) {\n            // Front flippers\n            translate([-body_length/4, side * (body_diameter/2 + 5), -5])\n                rotate([0, side * 20, -20])\n                    scale([0.5, 2, 0.2])\n                        sphere(d=body_diameter/2);\n            \n            // Rear flippers\n            translate([-body_length * 0.7, side * (body_diameter/2 + 3), -3])\n                rotate([0, side * 15, -30])\n                    scale([0.4, 1.5, 0.15])\n                        sphere(d=body_diameter/2);\n        }\n    }\n}\n\nmodule bunyip_spines() {\n    // Dorsal spines along back\n    color(\"DarkGreen\")\n    for(i = [-body_length/2:5:body_length/2 - 10]) {\n        translate([i, 0, body_diameter/3])\n            rotate([0, 90, 0])\n                cylinder(h=3 + sin(i*5)*2, d1=3, d2=1);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, body_diameter/2 + 5])\n    union() {\n        bunyip_head();\n        \n        translate([-head_length/2 - body_length/2, 0, 0])\n            bunyip_body();\n            \n        bunyip_spines();\n    }",
    "renders": true
  },
  {
    "mythical_creature": "calygreyhound",
    "openscad_code": "// Calygreyhound - Mythical creature with antelope body, eagle wings, ox hooves, and lion tail\n// Realistic style, medium complexity, 3D printable\n\n$fn = 32; // Smooth curves for realistic appearance\n\n// Main colors\ncolor_body = \"AntiqueWhite\";\ncolor_wings = \"Goldenrod\";\ncolor_hooves = \"SaddleBrown\";\ncolor_tail = \"DarkGoldenrod\";\ncolor_antlers = \"BurlyWood\";\ncolor_eyes = \"Black\";\n\n// Wall thickness for 3D printing\nwall = 1.5;\n\n// Body dimensions\nbody_length = 35;\nbody_height = 20;\nbody_width = 15;\n\n// Antlers module\nmodule antlers() {\n    color(color_antlers) {\n        // Left antler\n        translate([-3, 0, 8]) rotate([0, -15, -20]) cylinder(h=12, r1=1.5, r2=0.5);\n        translate([-3.5, 1, 15]) rotate([0, 15, -45]) cylinder(h=8, r1=1, r2=0.5);\n        \n        // Right antler\n        translate([3, 0, 8]) rotate([0, -15, 20]) cylinder(h=12, r1=1.5, r2=0.5);\n        translate([3.5, 1, 15]) rotate([0, 15, 45]) cylinder(h=8, r1=1, r2=0.5);\n    }\n}\n\n// Wings module\nmodule wings() {\n    color(color_wings) {\n        // Left wing\n        translate([-body_width/2 - 8, 0, 15]) rotate([0, 0, -20]) {\n            difference() {\n                scale([1, 0.3, 1]) sphere(10);\n                translate([5, 0, 5]) scale([0.8, 1, 0.8]) sphere(8);\n            }\n            // Wing details\n            for(i = [1:3]) {\n                rotate([0, 0, i*15]) translate([i*2, 0, 0]) cylinder(h=8, r1=0.2, r2=0.1);\n            }\n        }\n        \n        // Right wing\n        translate([body_width/2 + 8, 0, 15]) rotate([0, 0, 20]) {\n            mirror([1,0,0]) scale([1, 0.3, 1]) sphere(10);\n            // Wing details\n            for(i = [1:3]) {\n                rotate([0, 0, -i*15]) translate([-i*2, 0, 0]) cylinder(h=8, r1=0.2, r2=0.1);\n            }\n        }\n    }\n}\n\n// Hoof module\nmodule hoof() {\n    color(color_hooves) cylinder(h=5, r1=3, r2=2);\n}\n\n// Leg assembly\nmodule leg(x_pos, y_pos, z_pos, angle) {\n    translate([x_pos, y_pos, z_pos]) rotate([0, angle, 0]) {\n        color(color_body) cylinder(h=12, r=2);\n        translate([0, 0, -6]) hoof();\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(color_tail) {\n        translate([0, -body_length/2 - 8, 0]) {\n            // Lion tail with tuft\n            for(i = [0:5]) {\n                rotate([0, 0, i*15]) translate([0, -i*2, -i]) cylinder(h=2, r=3-i*0.3);\n            }\n            // Tuft\n            translate([0, -12, -3]) sphere(4);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    color(color_body) {\n        translate([0, body_length/2 - 5, 10]) {\n            // Main head shape\n            scale([0.8, 1.2, 0.9]) sphere(8);\n            \n            // Snout\n            translate([0, 6, -2]) scale([0.6, 0.8, 0.5]) sphere(5);\n            \n            // Eyes\n            color(color_eyes) {\n                translate([-2.5, 3, 1]) sphere(1);\n                translate([2.5, 3, 1]) sphere(1);\n            }\n            \n            // Ears\n            translate([-3, 2, 5]) rotate([0, -20, 0]) cylinder(h=4, r1=2, r2=1);\n            translate([3, 2, 5]) rotate([0, 20, 0]) cylinder(h=4, r1=2, r2=1);\n            \n            // Antlers\n            antlers();\n        }\n    }\n}\n\n// Main body assembly\nunion() {\n    // Body\n    color(color_body) {\n        translate([0, 0, body_height/2]) {\n            // Main torso\n            scale([1, 1.2, 0.8]) sphere(body_height/2);\n            \n            // Chest area\n            translate([0, body_length/4, -3]) scale([0.9, 0.7, 0.6]) sphere(6);\n        }\n    }\n    \n    // Head\n    head();\n    \n    // Wings\n    wings();\n    \n    // Legs - 4 legs like antelope/ox\n    leg(-6, body_length/4, 0, -15);    // Front left\n    leg(6, body_length/4, 0, 15);     // Front right\n    leg(-5, -body_length/4, 0, -10);   // Rear left\n    leg(5, -body_length/4, 0, 10);    // Rear right\n    \n    // Tail\n    tail();\n}\n\n// Base for stability\ntranslate([0, 0, -6]) color(\"Gray\", 0.3) cylinder(h=2, r=20);",
    "renders": true
  },
  {
    "mythical_creature": "catoblepas",
    "openscad_code": "// Catoblepas - mythical African creature with buffalo body and deadly downward-facing head\n// Based on Pliny the Elder's description: \"its head is so heavy that it always looks downwards\"\n\n// Overall dimensions: ~80mm long, 50mm tall, 30mm wide\n\n// Main colors\ncolor(\"brown\") {\n    // Body - buffalo-like torso\n    translate([0, 0, 15]) scale([1.2, 0.8, 0.6]) sphere(d=40);\n\n    // Neck - thick to support heavy head\n    translate([-15, 0, 25]) rotate([0, 30, 0]) cylinder(h=30, d1=20, d2=15);\n\n    // Head - heavy, downward-facing\n    translate([-25, 0, 15]) rotate([90, 0, 0]) scale([1, 0.8, 1.2]) sphere(d=25);\n\n    // Horns - curved buffalo horns\n    module horn() {\n        rotate([0, 20, 0]) cylinder(h=15, d1=8, d2=3);\n    }\n    \n    translate([-30, -8, 18]) rotate([0, 0, -30]) horn();\n    translate([-30, 8, 18]) mirror([0, 1, 0]) rotate([0, 0, -30]) horn();\n\n    // Legs - short and stocky\n    module leg() {\n        color(\"darkbrown\") cylinder(h=20, d=8);\n    }\n    \n    for(x = [-15, 15]) {\n        for(y = [-12, 12]) {\n            translate([x, y, 0]) leg();\n        }\n    }\n\n    // Tail - serpent-like\n    color(\"darkbrown\") {\n        translate([20, 0, 15]) rotate([0, 0, 10]) cylinder(h=25, d=3);\n        translate([40, 0, 12]) sphere(d=4);\n    }\n}\n\n// Eyes - glowing red (deadly gaze)\ncolor(\"red\") {\n    translate([-30, -5, 20]) sphere(d=3);\n    translate([-30, 5, 20]) sphere(d=3);\n}\n\n// Scales pattern on back\ncolor(\"saddlebrown\") {\n    module scale() {\n        sphere(d=3);\n    }\n    \n    for(x = [-10:5:15]) {\n        for(y = [-10:5:10]) {\n            translate([x, y, 35]) scale();\n        }\n    }\n}\n\n// Mane - rough hair texture\ncolor(\"darkgoldenrod\") {\n    module hair() {\n        cylinder(h=5, d=1);\n    }\n    \n    for(i = [0:10:360]) {\n        rotate([0, 0, i]) translate([-25, 0, 25]) hair();\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "cerastes",
    "openscad_code": "// Cerastes Mythical Creature - Realistic Style\n// A horned serpent with magical properties from Greek mythology\n\n// Main parameters\n$fn = 64;\nscale_factor = 0.8;\nbody_length = 60 * scale_factor;\nbody_diameter = 12 * scale_factor;\nhead_size = 15 * scale_factor;\nhorn_height = 8 * scale_factor;\n\n// Create the complete cerastes\nmodule cerastes() {\n    color(\"darkgreen\") {\n        // Main body\n        union() {\n            // Serpent body\n            body();\n            \n            // Head with horns\n            translate([body_length/2, 0, 0]) {\n                head();\n            }\n            \n            // Tail\n            translate([-body_length/2 - 5, 0, 0]) {\n                tail();\n            }\n            \n            // Magical scale patterns along body\n            scales();\n            \n            // Mystical wing-like frills\n            frills();\n        }\n    }\n}\n\n// Serpentine body with realistic curves\nmodule body() {\n    hull() {\n        // Create curved body segments\n        for(i = [-body_length/2:5:body_length/2-5]) {\n            translate([i, 0, sin(i/5)*2]) {\n                sphere(d = body_diameter + cos(i/3)*2);\n            }\n        }\n    }\n}\n\n// Triangular head with horns\nmodule head() {\n    // Main head structure\n    difference() {\n        // Base head shape\n        hull() {\n            sphere(d = head_size);\n            translate([head_size/2, 0, 0]) sphere(d = head_size * 0.8);\n        }\n        \n        // Eye sockets\n        translate([head_size/3, head_size/4, head_size/6]) {\n            sphere(d = head_size/4);\n        }\n        translate([head_size/3, -head_size/4, head_size/6]) {\n            sphere(d = head_size/4);\n        }\n        \n        // Mouth\n        translate([head_size/3, 0, -head_size/3]) {\n            cube([head_size/2, head_size/3, head_size/4], center = true);\n        }\n    }\n    \n    // Eyes\n    translate([head_size/3, head_size/4, head_size/6]) {\n        color(\"red\") sphere(d = head_size/5);\n    }\n    translate([head_size/3, -head_size/4, head_size/6]) {\n        color(\"red\") sphere(d = head_size/5);\n    }\n    \n    // Cerastes horns - four curved horns\n    for(i = [0:3]) {\n        angle = i * 90;\n        rotate([0, 0, angle]) {\n            translate([head_size/2, head_size/3, head_size/2]) {\n                rotate([30, 0, 0]) {\n                    cylinder(h = horn_height, d1 = horn_height/3, d2 = horn_height/6);\n                }\n            }\n        }\n    }\n}\n\n// Gradually tapering tail\nmodule tail() {\n    for(i = [0:3:15]) {\n        translate([-body_length/2 - 5 - i, 0, 0]) {\n            sphere(d = body_diameter * (1 - i/20));\n        }\n    }\n}\n\n// Realistic scale patterns\nmodule scales() {\n    color(\"forestgreen\") {\n        for(i = [-body_length/2:3:body_length/2-3]) {\n            translate([i, body_diameter/2, sin(i/5)*2]) {\n                rotate([0, 90, 0]) {\n                    scale([0.8, 0.8, 0.3]) {\n                        cylinder(h = body_diameter/2, d = body_diameter/3);\n                    }\n                }\n            }\n            translate([i, -body_diameter/2, sin(i/5)*2]) {\n                rotate([0, -90, 0]) {\n                    scale([0.8, 0.8, 0.3]) {\n                        cylinder(h = body_diameter/2, d = body_diameter/3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Mystical wing-like frills along spine\nmodule frills() {\n    color(\"forestgreen\", 0.7) {\n        for(i = [-body_length/2 + 5:8:body_length/2 - 10]) {\n            translate([i, 0, body_diameter/2 + sin(i/5)*2]) {\n                rotate([90, 0, 0]) {\n                    scale([1.5, 1, 0.1]) {\n                        sphere(d = body_diameter);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the final model\ncerastes();",
    "renders": true
  },
  {
    "mythical_creature": "cerberus",
    "openscad_code": "// Cerberus - Three-Headed Guardian of the Underworld\n// Medium complexity, realistic style\n\n// Overall scale factor for 3D printing\nscale_factor = 0.4;\n\n// Colors\ncolor_body = [40/255, 40/255, 40/255];\ncolor_mouth = [80/255, 20/255, 20/255];\ncolor_teeth = [220/255, 220/255, 200/255];\ncolor_eyes = [255/255, 0/255, 0/255];\ncolor_chain = [120/255, 120/255, 120/255];\n\n// Main body\nmodule cerberus_body() {\n    color(color_body) {\n        // Torso\n        translate([0, 0, 10])\n            scale([1.5, 1, 1])\n            sphere(d=25);\n        \n        // Chest\n        translate([0, 5, 0])\n            scale([1.8, 0.8, 1.2])\n            sphere(d=20);\n        \n        // Back\n        translate([0, -5, 12])\n            scale([1.2, 0.8, 0.8])\n            sphere(d=18);\n    }\n}\n\n// Leg module\nmodule leg(pos_x, pos_y, pos_z, angle) {\n    color(color_body) {\n        translate([pos_x, pos_y, pos_z]) {\n            rotate([0, 0, angle]) {\n                // Upper leg\n                translate([0, 0, 10])\n                    rotate([90, 0, 0])\n                    cylinder(h=15, d1=8, d2=6);\n                \n                // Lower leg\n                translate([0, 0, 0])\n                    rotate([90, 0, 0])\n                    cylinder(h=12, d1=6, d2=5);\n                \n                // Paw\n                translate([0, 0, -8])\n                    sphere(d=8);\n                \n                // Toes\n                for(i = [-2:1:2]) {\n                    translate([i*2.5, 0, -12])\n                        sphere(d=3);\n                }\n            }\n        }\n    }\n}\n\n// Head module\nmodule head(pos_x, pos_y, pos_z, rot_y) {\n    color(color_body) {\n        translate([pos_x, pos_y, pos_z]) {\n            rotate([0, rot_y, 0]) {\n                // Skull\n                translate([0, 0, 25])\n                    scale([1.2, 0.8, 1])\n                    sphere(d=18);\n                \n                // Snout\n                translate([0, 15, 20])\n                    scale([0.7, 1.5, 0.8])\n                    sphere(d=12);\n                \n                // Nose\n                color(color_mouth)\n                translate([0, 22, 22])\n                    sphere(d=3);\n                \n                // Eyes\n                color(color_eyes)\n                for(side = [-1, 1]) {\n                    translate([side*6, 8, 28])\n                        sphere(d=4);\n                }\n                \n                // Ears\n                color(color_body)\n                for(side = [-1, 1]) {\n                    translate([side*8, -5, 32])\n                        rotate([0, -30, 0])\n                        scale([0.5, 1, 2])\n                        sphere(d=6);\n                }\n                \n                // Teeth\n                color(color_teeth)\n                for(i = [0:20:80]) {\n                    rotate([0, i, 0])\n                    translate([0, 20, 18])\n                        cylinder(h=3, d1=1.5, d2=1);\n                }\n            }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(color_body) {\n        translate([0, -25, 15]) {\n            rotate([0, 45, 0]) {\n                for(i = [0:3]) {\n                    translate([0, -i*8, -i*3])\n                        rotate([0, i*10, 0])\n                        sphere(d=6 - i);\n                }\n                \n                // Tail tip\n                translate([0, -35, -15])\n                    sphere(d=4);\n            }\n        }\n    }\n}\n\n// Chain collar\nmodule chain() {\n    color(color_chain) {\n        translate([0, 5, 25])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=3, d=16);\n                cylinder(h=4, d=14);\n            }\n        \n        // Chain links\n        for(i = [0:30:330]) {\n            rotate([0, 0, i])\n            translate([8, 5, 25])\n                rotate([90, 0, 0])\n                torus(1.5, 4);\n        }\n    }\n}\n\n// Torus helper for chain\nmodule torus(r, R) {\n    rotate_extrude()\n        translate([R, 0, 0])\n            circle(r=r);\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    cerberus_body();\n    \n    // Three heads\n    head(-15, 0, 25, 0);\n    head(0, 0, 30, 0);\n    head(15, 0, 25, 0);\n    \n    // Four legs\n    leg(-10, 8, 5, -10);\n    leg(10, 8, 5, 10);\n    leg(-8, -8, 5, 10);\n    leg(8, -8, 5, -10);\n    \n    tail();\n    chain();\n}",
    "renders": true
  },
  {
    "mythical_creature": "chupacabra",
    "openscad_code": "// Chupacabra - Realistic Style, Medium Complexity\n// Features: Reptilian body, spines, wings, fanged head, muscular build\n\n$fn = 32; // Smooth curves\n\n// Colors\ncolor_body = \"darkolivegreen\";\ncolor_spines = \"darkslategray\";\ncolor_eyes = \"crimson\";\ncolor_teeth = \"ivory\";\ncolor_wings = \"forestgreen\";\n\n// Main creature assembly\nmodule chupacabra() {\n    union() {\n        // Body (reptilian, muscular)\n        color(color_body) body();\n        \n        // Head with fangs\n        translate([0, 25, 15]) rotate([0, 10, 0]) head();\n        \n        // Spines along back\n        color(color_spines) spines();\n        \n        // Wings (bat-like)\n        color(color_wings) wings();\n        \n        // Legs\n        legs();\n        \n        // Tail\n        color(color_body) translate([0, -25, 0]) tail();\n    }\n}\n\n// Body - muscular reptilian torso\nmodule body() {\n    difference() {\n        // Main torso\n        scale([1.2, 1.5, 0.8]) sphere(15);\n        \n        // Neck cavity\n        translate([0, 15, 5]) scale([0.6, 0.6, 0.6]) sphere(12);\n        \n        // Tail socket\n        translate([0, -20, 0]) scale([0.5, 0.5, 0.5]) sphere(10);\n    }\n    \n    // Muscular chest ridges\n    for(i = [0:3]) {\n        translate([0, 5 - i*3, 8 + i*1.5]) \n            rotate([90, 0, 0]) \n            scale([0.3, 0.3, 8]) \n            cylinder(h = 2, r = 2);\n    }\n}\n\n// Head - elongated with fangs\nmodule head() {\n    union() {\n        // Skull\n        scale([0.8, 1.5, 0.7]) sphere(10);\n        \n        // Snout\n        translate([0, 12, 0]) scale([0.4, 1, 0.3]) sphere(8);\n        \n        // Eyes (glowing)\n        color(color_eyes) {\n            translate([-6, 8, 3]) sphere(2.5);\n            translate([6, 8, 3]) sphere(2.5);\n        }\n        \n        // Fangs\n        color(color_teeth) {\n            translate([-3, 15, -2]) rotate([0, 30, 0]) \n                scale([0.3, 0.3, 1]) cylinder(h = 6, r1 = 1.5, r2 = 0.5);\n            translate([3, 15, -2]) rotate([0, 30, 0]) \n                scale([0.3, 0.3, 1]) cylinder(h = 6, r1 = 1.5, r2 = 0.5);\n        }\n        \n        // Ears (small and pointed)\n        translate([-6, 0, 8]) rotate([0, -20, -30]) \n            scale([0.3, 0.8, 0.2]) cylinder(h = 5, r = 2);\n        translate([6, 0, 8]) mirror([1, 0, 0]) \n            rotate([0, -20, -30]) \n            scale([0.3, 0.8, 0.2]) cylinder(h = 5, r = 2);\n    }\n}\n\n// Spines along back\nmodule spines() {\n    for(i = [0:8]) {\n        translate([0, 15 - i*4, 10 + sin(i*30)*2]) \n            rotate([0, 0, sin(i*40)*5]) \n            scale([0.3, 0.3, 1 + i*0.1]) \n            cylinder(h = 5 + i*0.5, r1 = 1.5, r2 = 0.5);\n    }\n}\n\n// Bat-like wings\nmodule wings() {\n    // Right wing\n    translate([15, 0, 10]) rotate([0, 0, -10]) wing();\n    \n    // Left wing\n    translate([-15, 0, 10]) mirror([1, 0, 0]) rotate([0, 0, -10]) wing();\n}\n\nmodule wing() {\n    difference() {\n        // Main wing membrane\n        hull() {\n            translate([0, 0, 0]) sphere(2);\n            translate([20, -5, 0]) sphere(2);\n            translate([25, -15, 0]) sphere(1.5);\n            translate([20, -25, 0]) sphere(2);\n            translate([0, -30, 0]) sphere(2);\n        }\n        \n        // Wing holes (membrane structure)\n        for(j = [1:3]) {\n            translate([j*6, -j*8, 0]) \n                scale([0.5, 0.5, 0.3]) \n                sphere(3);\n        }\n    }\n    \n    // Wing fingers\n    for(k = [0:3]) {\n        translate([k*5 + 5, -k*7 - 5, 0]) \n            rotate([0, 0, -30 + k*10]) \n            scale([0.3, 0.3, 1]) \n            cylinder(h = 8, r = 1);\n    }\n}\n\n// Legs with claws\nmodule legs() {\n    // Front legs\n    leg([8, 10, -5], 0);\n    leg([-8, 10, -5], 0);\n    \n    // Back legs\n    leg([10, -10, -5], 15);\n    leg([-10, -10, -5], -15);\n}\n\nmodule leg(pos, angle) {\n    translate(pos) rotate([0, 0, angle]) {\n        union() {\n            // Upper leg\n            scale([0.8, 0.8, 3]) cylinder(h = 8, r = 2);\n            \n            // Lower leg\n            translate([0, 0, -10]) rotate([15, 0, 0]) \n                scale([0.7, 0.7, 2.5]) cylinder(h = 8, r = 1.8);\n            \n            // Foot\n            translate([0, 2, -18]) rotate([90, 0, 0]) \n                scale([1.5, 0.8, 0.5]) cylinder(h = 4, r = 2);\n            \n            // Claws\n            for(c = [-1:1]) {\n                translate([c*1.5, 4, -18]) rotate([90, 0, 0]) \n                    scale([0.2, 0.2, 1]) cylinder(h = 3, r1 = 1, r2 = 0.3);\n            }\n        }\n    }\n}\n\n// Tail with ridges\nmodule tail() {\n    for(t = [0:10]) {\n        translate([0, -t*2.5, -t*1.5]) \n            scale([1 - t*0.08, 1 - t*0.08, 1 - t*0.08]) \n            rotate([0, sin(t*30)*10, 0]) \n            sphere(3);\n    }\n}\n\n// Main assembly\nchupacabra();",
    "renders": true
  },
  {
    "mythical_creature": "cockatrice",
    "openscad_code": "// Realistic Cockatrice - Medium Complexity\n// Based on medieval bestiary descriptions: rooster head, serpentine tail, dragon wings\n\n$fn = 36;\nscale_factor = 0.4;\n\ncolor(\"DarkOliveGreen\") {\n    // Main body - rooster-like torso\n    translate([0, 0, 10]) {\n        difference() {\n            sphere(r = 12);\n            translate([0, 0, -8]) cube([30, 20, 16], center = true);\n        }\n    }\n    \n    // Chest protrusion\n    translate([10, 0, 8]) {\n        scale([1.2, 1, 0.8]) sphere(r = 8);\n    }\n    \n    // Back ridge\n    for(i = [0:3]) {\n        translate([-10 + i*3, 0, 12 + i*1.5]) {\n            rotate([90, 0, 0]) cylinder(r1 = 2, r2 = 1, h = 4);\n        }\n    }\n}\n\n// Wings - dragon-like membrane wings\nmodule wing() {\n    color(\"SaddleBrown\") {\n        // Upper arm\n        translate([0, 0, 0]) {\n            rotate([0, 90, 0]) cylinder(r = 3, h = 15);\n        }\n        \n        // Wing membrane\n        translate([7, -12, 0]) {\n            rotate([0, 0, -30]) {\n                linear_extrude(height = 0.5) {\n                    polygon(points = [\n                        [0, 0], [20, 0], [25, 15], [15, 25], [5, 20], [0, 10]\n                    ]);\n                }\n            }\n        }\n        \n        // Wing claws\n        translate([12, -18, 0]) {\n            rotate([0, 0, -45]) cylinder(r = 1, h = 8);\n        }\n    }\n}\n\n// Left wing\ntranslate([-10, 5, 18]) {\n    rotate([0, 0, 120]) wing();\n}\n\n// Right wing\ntranslate([-10, -5, 18]) {\n    rotate([0, 180, 120]) wing();\n}\n\n// Rooster head\ncolor(\"Crimson\") {\n    // Comb\n    for(i = [-2:2]) {\n        translate([i*2, 15, 22]) {\n            rotate([90, 0, 0]) cylinder(r = 1.5, h = 5);\n        }\n    }\n    \n    // Beak\n    translate([0, 20, 18]) {\n        rotate([30, 0, 0]) {\n            scale([1, 1, 2]) cylinder(r1 = 3, r2 = 0, h = 8);\n        }\n    }\n    \n    // Wattles\n    translate([0, 20, 15]) {\n        sphere(r = 2.5);\n    }\n    translate([0, 20, 15]) {\n        mirror([1, 0, 0]) sphere(r = 2.5);\n    }\n}\n\n// Eyes with magical glow\ncolor(\"Gold\") {\n    translate([3, 16, 21]) sphere(r = 1.5);\n    translate([-3, 16, 21]) sphere(r = 1.5);\n}\n\n// Serpentine tail\ncolor(\"DarkGreen\") {\n    for(i = [0:12]) {\n        translate([-12 - i*2, 0, 12 - i*1.5]) {\n            scale([1 - i*0.05, 1, 1 - i*0.05]) {\n                sphere(r = 4 + sin(i*30)*1);\n            }\n        }\n    }\n}\n\n// Tail tip\ncolor(\"ForestGreen\") {\n    translate([-38, 0, 0]) {\n        scale([0.3, 0.3, 2]) sphere(r = 5);\n    }\n}\n\n// Legs - bird-like with scales\nmodule leg(side) {\n    color(\"Goldenrod\") {\n        // Upper leg\n        translate([8, side*5, 8]) {\n            rotate([0, side*30, 0]) cylinder(r = 2, h = 12);\n        }\n        \n        // Lower leg\n        translate([8, side*7, -2]) {\n            rotate([0, side*30, 0]) cylinder(r = 1.5, h = 10);\n        }\n        \n        // Scaled foot\n        translate([8, side*9, -10]) {\n            // Main foot\n            cube([8, 2, 1], center = true);\n            \n            // Toes\n            for(j = [-1:1]) {\n                translate([j*3, 1.5, 0]) {\n                    cube([1, 2, 1], center = true);\n                }\n            }\n        }\n        \n        // Spur\n        translate([8, side*11, -8]) {\n            rotate([0, 90, 0]) cylinder(r = 0.5, h = 3);\n        }\n    }\n}\n\n// Left leg\nleg(1);\n\n// Right leg\nleg(-1);\n\n// Decorative scales along spine\ncolor(\"YellowGreen\") {\n    for(i = [0:5]) {\n        translate([-5 - i*3, 0, 12 + sin(i*45)*2]) {\n            rotate([90, 0, 0]) scale([1, 1, 0.3]) sphere(r = 3);\n        }\n    }\n}\n\n// Final scaling for 3D printing\nscale([scale_factor, scale_factor, scale_factor]);",
    "renders": true
  },
  {
    "mythical_creature": "crocotta",
    "openscad_code": "// Crocotta - mythical wolf-hyena creature\n// Realistic style, medium complexity\n\n// Main parameters\nbody_length = 60;\nbody_height = 30;\nhead_length = 25;\ntail_length = 35;\nleg_height = 20;\n\n// Colors\ncolor_body = [0.4, 0.3, 0.2];\ncolor_bone = [0.9, 0.85, 0.8];\ncolor_dark = [0.2, 0.15, 0.1];\ncolor_eyes = [0.8, 0.1, 0.1];\n\n// Main body\nmodule crocotta_body() {\n    color(color_body)\n    union() {\n        // Main torso\n        translate([0, 0, leg_height])\n        scale([1.5, 1, 1])\n        sphere(d=body_height);\n        \n        // Chest\n        translate([-body_length/3, 0, leg_height])\n        sphere(d=body_height*1.2);\n        \n        // Ribs\n        for(i = [-1:0.5:1]) {\n            translate([i*10, 0, leg_height+5])\n            rotate([0, 90, 0])\n            cylinder(h=body_height*0.8, d=body_height*0.3, $fn=8);\n        }\n    }\n}\n\n// Hyena-like head\nmodule crocotta_head() {\n    color(color_body)\n    union() {\n        // Skull base\n        translate([body_length/2+5, 0, leg_height+body_height/2])\n        rotate([0, -10, 0])\n        scale([1.8, 1.2, 1])\n        sphere(d=head_length);\n        \n        // Snout\n        translate([body_length/2+15, 0, leg_height+body_height/2-3])\n        scale([2, 0.8, 0.8])\n        sphere(d=head_length/2);\n        \n        // Jaw\n        translate([body_length/2+15, 0, leg_height+body_height/2-8])\n        rotate([10, 0, 0])\n        scale([1.5, 0.6, 0.4])\n        sphere(d=head_length/2);\n    }\n}\n\n// Bone-crushing teeth\nmodule teeth() {\n    color(color_bone)\n    union() {\n        // Upper teeth\n        for(i = [-0.5:0.2:0.5]) {\n            translate([body_length/2+18, i*head_length/3, leg_height+body_height/2-5])\n            rotate([0, 0, 5])\n            cylinder(h=3, d1=2, d2=1, $fn=6);\n        }\n        \n        // Lower teeth\n        for(i = [-0.4:0.2:0.4]) {\n            translate([body_length/2+18, i*head_length/3, leg_height+body_height/2-8])\n            rotate([0, 0, -5])\n            cylinder(h=2.5, d1=2, d2=1, $fn=6);\n        }\n    }\n}\n\n// Glowing red eyes\nmodule eyes() {\n    color(color_eyes)\n    union() {\n        translate([body_length/2+10, -head_length/4, leg_height+body_height/2+3])\n        sphere(d=3);\n        \n        translate([body_length/2+10, head_length/4, leg_height+body_height/2+3])\n        sphere(d=3);\n    }\n}\n\n// Ears\nmodule ears() {\n    color(color_body)\n    union() {\n        // Left ear\n        translate([body_length/2+5, -head_length/3, leg_height+body_height/2+8])\n        rotate([0, -20, -30])\n        scale([0.5, 0.3, 1.5])\n        cylinder(h=head_length/3, d=head_length/4, $fn=6);\n        \n        // Right ear\n        translate([body_length/2+5, head_length/3, leg_height+body_height/2+8])\n        rotate([0, -20, 30])\n        scale([0.5, 0.3, 1.5])\n        cylinder(h=head_length/3, d=head_length/4, $fn=6);\n    }\n}\n\n// Legs with paws\nmodule leg(position_x, position_y, rotation_z) {\n    color(color_body)\n    translate([position_x, position_y, 0])\n    rotate([0, 0, rotation_z])\n    union() {\n        // Upper leg\n        cylinder(h=leg_height/2, d=body_height/4);\n        \n        // Lower leg\n        translate([0, 0, leg_height/2])\n        cylinder(h=leg_height/2, d=body_height/5);\n        \n        // Paw\n        translate([0, 0, leg_height])\n        scale([1.2, 1, 0.8])\n        sphere(d=body_height/4);\n        \n        // Claws\n        for(i = [-0.3:0.3:0.3]) {\n            translate([i*body_height/6, 0, leg_height+body_height/8])\n            rotate([0, 0, 10])\n            cylinder(h=body_height/8, d1=body_height/12, d2=0.5, $fn=4);\n        }\n    }\n}\n\n// Striped tail\nmodule tail() {\n    color(color_body)\n    union() {\n        // Tail segments with stripes\n        for(i = [0:5:tail_length]) {\n            color(i % 10 == 0 ? color_dark : color_body)\n            translate([-body_length/2-i, 0, leg_height+body_height/3])\n            rotate([0, 10+i, 0])\n            sphere(d=body_height/2 - i/3);\n        }\n    }\n}\n\n// Spinal ridge\nmodule spinal_ridge() {\n    color(color_dark)\n    for(i = [-body_length/2:5:body_length/2]) {\n        translate([i, 0, leg_height+body_height/2+body_height/4])\n        rotate([0, 90, 0])\n        cylinder(h=body_height/5, d1=body_height/6, d2=body_height/8, $fn=6);\n    }\n}\n\n// Main assembly\nunion() {\n    crocotta_body();\n    crocotta_head();\n    teeth();\n    eyes();\n    ears();\n    tail();\n    spinal_ridge();\n    \n    // Legs\n    leg(-body_length/3, -body_height/3, 0);\n    leg(-body_length/3, body_height/3, 0);\n    leg(body_length/3, -body_height/3, 0);\n    leg(body_length/3, body_height/3, 0);\n}",
    "renders": true
  },
  {
    "mythical_creature": "cwnannwn",
    "openscad_code": "// Cwn Annwn - Welsh Hounds of the Otherworld\n// Realistic medium-complexity model for 3D printing\n\n$fn = 32; // Smooth curves for realistic appearance\n\n// Main body\nmodule body() {\n    color(\"dimgray\")\n    union() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1.2, 0.8, 1])\n        sphere(10);\n        \n        // Chest\n        translate([0, -8, 15])\n        scale([0.9, 0.6, 0.7])\n        sphere(8);\n        \n        // Abdomen\n        translate([0, 5, 12])\n        scale([0.8, 0.7, 0.8])\n        sphere(7);\n    }\n}\n\n// Head with spectral features\nmodule head() {\n    color(\"ghostwhite\")\n    union() {\n        // Skull base\n        translate([0, -15, 22])\n        scale([0.9, 1.2, 1])\n        sphere(8);\n        \n        // Snout\n        translate([0, -23, 20])\n        scale([0.6, 1.5, 0.7])\n        sphere(6);\n        \n        // Eye sockets (glowing)\n        for(x = [-4, 4]) {\n            color(\"red\")\n            translate([x, -15, 24])\n            sphere(2.5);\n        }\n        \n        // Ears\n        for(x = [-6, 6]) {\n            color(\"silver\")\n            translate([x, -12, 28])\n            rotate([0, 0, x > 0 ? 15 : -15])\n            scale([0.3, 1, 0.2])\n            cylinder(h = 8, r1 = 2, r2 = 1);\n        }\n    }\n}\n\n// Legs with paw details\nmodule legs() {\n    color(\"darkgray\")\n    union() {\n        for(x = [-8, 8]) {\n            for(side = [-1, 1]) {\n                // Upper leg\n                translate([x, side * 3, 12])\n                rotate([90, 0, x > 0 ? 10 : -10])\n                cylinder(h = 12, r = 2.5);\n                \n                // Lower leg\n                translate([x + (x > 0 ? 2 : -2), side * 5, 5])\n                rotate([90, 0, x > 0 ? 5 : -5])\n                cylinder(h = 10, r = 2);\n                \n                // Paw\n                translate([x + (x > 0 ? 3 : -3), side * 6, 0])\n                scale([1.5, 1, 0.8])\n                sphere(3);\n            }\n        }\n    }\n}\n\n// Spectral tail with ethereal wisps\nmodule tail() {\n    color(\"lightgray\")\n    union() {\n        hull() {\n            translate([0, 12, 15])\n            sphere(3);\n            translate([0, 22, 18])\n            sphere(2.5);\n            translate([0, 30, 20])\n            sphere(2);\n            translate([0, 35, 22])\n            sphere(1.5);\n        }\n        \n        // Ethereal wisps\n        for(i = [1:3]) {\n            color(\"white\")\n            translate([i * 2, 25 + i * 3, 19 + i])\n            scale([0.5, 0.5, 1.5])\n            sphere(1);\n            mirror([1, 0, 0])\n            translate([i * 2, 25 + i * 3, 19 + i])\n            scale([0.5, 0.5, 1.5])\n            sphere(1);\n        }\n    }\n}\n\n// Otherworld collar with runes\nmodule collar() {\n    color(\"gold\")\n    difference() {\n        translate([0, -5, 18])\n        scale([1.3, 0.8, 0.3])\n        sphere(9);\n        \n        // Inner cutout\n        translate([0, -5, 17.5])\n        scale([1.1, 0.6, 0.4])\n        sphere(8.5);\n    }\n    \n    // Runes\n    color(\"black\")\n    for(angle = [0:45:315]) {\n        translate([sin(angle) * 11, -5, 18.5])\n        rotate([90, 0, angle])\n        scale([0.2, 0.1, 0.1])\n        cube([3, 1, 1]);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    legs();\n    tail();\n    collar();\n}\n\n// Add base for stability\ncolor(\"darkslategray\")\ntranslate([0, 15, -2])\nscale([2, 3, 0.5])\ncylinder(h = 2, r = 20);",
    "renders": true
  },
  {
    "mythical_creature": "dipsa",
    "openscad_code": "// Dipsa - mythical serpent creature with venomous fangs and scaled body\n// Designed for 3D printing - no overhangs, 2mm wall thickness\n\n$fn = 32; // Smooth curves for realistic appearance\n\n// Main colors\nbody_color = \"green\";\nscale_color = \"darkgreen\";\nfang_color = \"ivory\";\neye_color = \"red\";\n\n// Scale module for body texture\nmodule scale(radius = 3, height = 1) {\n    color(scale_color)\n    translate([0, 0, -height/2])\n        scale([1, 0.8, 0.3])\n            sphere(r = radius);\n}\n\n// Create scales along body\nmodule scales_along_curve(length = 40, segments = 8) {\n    for (i = [0:segments]) {\n        translate([i * length/segments, 0, 0])\n            rotate([0, i * 5, 0])\n                scale(2.5 + sin(i * 30) * 0.5, 1);\n    }\n}\n\n// Fang module\nmodule fang(height = 6, base = 2) {\n    color(fang_color)\n    cylinder(h = height, r1 = base, r2 = 0.2);\n}\n\n// Head with fangs\nmodule head() {\n    union() {\n        // Main head shape\n        color(body_color)\n        scale([1.2, 0.8, 0.9])\n            sphere(r = 8);\n        \n        // Snout\n        translate([7, 0, 0])\n            scale([1.5, 0.7, 0.6])\n                sphere(r = 5);\n        \n        // Eyes\n        color(eye_color)\n        translate([4, 5, 3])\n            sphere(r = 1.5);\n        translate([4, -5, 3])\n            sphere(r = 1.5);\n        \n        // Venomous fangs\n        translate([9, 2, -2])\n            rotate([0, -20, 0])\n                fang();\n        translate([9, -2, -2])\n            rotate([0, 20, 0])\n                fang();\n    }\n}\n\n// Body segment with scales\nmodule body_segment(length = 15, radius = 6) {\n    union() {\n        // Main body cylinder\n        color(body_color)\n        cylinder(h = length, r = radius, center = true);\n        \n        // Add scales on top\n        translate([0, 0, radius + 0.5])\n            scales_along_curve(length, 5);\n    }\n}\n\n// Tail segment that tapers\nmodule tail_segment(length = 12, start_r = 5, end_r = 4) {\n    color(body_color)\n    cylinder(h = length, r1 = start_r, r2 = end_r);\n}\n\n// Main creature assembly\nunion() {\n    // Head\n    translate([0, 0, 0])\n        head();\n    \n    // Neck\n    translate([-8, 0, 0])\n        rotate([0, 0, 10])\n            body_segment(10, 5);\n    \n    // Body segments\n    translate([-20, 0, 0])\n        body_segment(12, 5.5);\n    \n    translate([-35, 0, 0])\n        body_segment(12, 5);\n    \n    // Tail segments tapering\n    translate([-50, 0, 0])\n        tail_segment(12, 4.5, 3.5);\n    \n    translate([-65, 0, 0])\n        tail_segment(12, 3.5, 2.5);\n    \n    translate([-80, 0, 0])\n        tail_segment(15, 2.5, 1);\n    \n    // Underside belly scales\n    for (i = [1:5]) {\n        translate([-i * 15 - 10, 0, -5.5])\n            scales_along_curve(10, 3);\n    }\n}\n\n// Add slight curve to body for serpentine pose\nrotate([0, 5, 0]) {\n    // Already incorporated curve through rotations in positioning\n}",
    "renders": true
  },
  {
    "mythical_creature": "dryad",
    "openscad_code": "// Dryad - Tree Nymph - Realistic Style - Medium Complexity\n// 3D printable, approximately 70mm tall\n\nmodule dryad() {\n    union() {\n        // Base root system for stability\n        color([0.4, 0.2, 0.1])\n        translate([0, 0, -2])\n        cylinder(h=4, r1=12, r2=8, $fn=32);\n        \n        // Main trunk body\n        color([0.5, 0.3, 0.15])\n        translate([0, 0, 0])\n        cylinder(h=30, r1=8, r2=6, $fn=32);\n        \n        // Upper torso with bark texture\n        color([0.6, 0.4, 0.2])\n        translate([0, 0, 30])\n        cylinder(h=25, r1=6, r2=4, $fn=32);\n        \n        // Head with bark texture\n        color([0.7, 0.5, 0.3])\n        translate([0, 0, 55])\n        sphere(r=5, $fn=32);\n        \n        // Facial features - eyes (hollow)\n        color([0.1, 0.1, 0.1])\n        translate([-2, 3.5, 57])\n        sphere(r=0.5, $fn=16);\n        translate([2, 3.5, 57])\n        sphere(r=0.5, $fn=16);\n        \n        // Arms - branches\n        module arm(angle, length) {\n            rotate([0, angle, 0])\n            translate([0, 0, 40])\n            rotate([0, -30, 0])\n            cylinder(h=length, r1=2.5, r2=1.5, $fn=16);\n        }\n        \n        color([0.5, 0.3, 0.15])\n        arm(-45, 25);\n        arm(45, 25);\n        \n        // Branch fingers\n        for(i = [0:2]) {\n            color([0.4, 0.25, 0.1])\n            rotate([0, -45 + i*45, 0])\n            translate([0, 0, 40])\n            rotate([0, -30, 0])\n            translate([0, 0, 25])\n            rotate([0, i*60-60, 15])\n            cylinder(h=8, r1=1.5, r2=0.8, $fn=8);\n        }\n        \n        for(i = [0:2]) {\n            color([0.4, 0.25, 0.1])\n            rotate([0, 45, 0])\n            translate([0, 0, 40])\n            rotate([0, -30, 0])\n            translate([0, 0, 25])\n            rotate([0, i*60-60, -15])\n            cylinder(h=8, r1=1.5, r2=0.8, $fn=8);\n        }\n        \n        // Leg roots\n        module leg(angle, length) {\n            rotate([angle, 0, 0])\n            translate([0, 0, 0])\n            cylinder(h=length, r1=2, r2=1, $fn=16);\n        }\n        \n        color([0.4, 0.2, 0.1])\n        leg(-30, 20);\n        leg(30, 20);\n        \n        // Small root tendrils\n        for(i = [0:3]) {\n            color([0.3, 0.15, 0.05])\n            rotate([0, i*90, 0])\n            translate([8, 0, 0])\n            rotate([0, 30, 0])\n            cylinder(h=10, r1=1, r2=0.5, $fn=8);\n        }\n        \n        // Leaf crown - oak leaves\n        module leaf(angle1, angle2, height) {\n            color([0.1, 0.4, 0.1])\n            translate([0, 0, height])\n            rotate([angle1, angle2, 0])\n            scale([1, 2, 0.2])\n            sphere(r=2.5, $fn=8);\n        }\n        \n        // Crown of leaves around head\n        for(i = [0:7]) {\n            leaf(i*45, 30, 58);\n            leaf(i*45 + 22.5, -20, 60);\n        }\n        \n        // Magical moss/glow patches\n        color([0.2, 0.8, 0.2], 0.7)\n        translate([0, 5, 45])\n        sphere(r=2, $fn=16);\n        \n        color([0.2, 0.8, 0.2], 0.7)\n        translate([4, -3, 35])\n        sphere(r=1.5, $fn=16);\n        \n        color([0.2, 0.8, 0.2], 0.7)\n        translate([-4, -3, 35])\n        sphere(r=1.5, $fn=16);\n        \n        // Heartwood core (magical essence)\n        color([0.9, 0.8, 0.2], 0.5)\n        translate([0, 0, 25])\n        cylinder(h=20, r1=1.5, r2=1.5, $fn=8);\n    }\n}\n\n// Scale to printable size (70mm tall)\nscale([1.2, 1.2, 1.2])\ndryad();",
    "renders": true
  },
  {
    "mythical_creature": "encantado",
    "openscad_code": "// Encantado - Mythical Amazonian dolphin shapeshifter\n// Size: ~80mm long\n\n$fn = 32;\n\n// Main colors\ncolor_encantado = [70,130,180];  // Steel blue dolphin color\ncolor_magic = [138,43,226];      // Orchid magical glow\ncolor_eyes = [255,215,0];        // Golden eyes\n\n// Main body module\nmodule encantado_body() {\n    // Central body - elongated dolphin shape\n    color(color_encantado)\n    union() {\n        // Main torso\n        scale([1.2, 0.6, 0.4])\n            sphere(r = 25);\n        \n        // Tail section\n        translate([-30, 0, 0])\n            scale([1.5, 0.3, 0.2])\n                sphere(r = 20);\n        \n        // Head\n        translate([25, 0, 5])\n            scale([0.8, 0.7, 0.7])\n                sphere(r = 20);\n    }\n}\n\n// Dolphin beak/snout\nmodule encantado_snout() {\n    color(color_encantado)\n    translate([40, 0, 0])\n        rotate([0, -10, 0])\n            scale([1.5, 0.4, 0.4])\n                cylinder(h = 15, r1 = 8, r2 = 4);\n}\n\n// Flippers\nmodule encantado_flippers() {\n    color(color_encantado)\n    union() {\n        // Left flipper\n        translate([10, -15, -8])\n            rotate([0, 0, -30])\n                scale([1, 0.3, 0.15])\n                    sphere(r = 12);\n        \n        // Right flipper\n        translate([10, 15, -8])\n            rotate([0, 0, 30])\n                scale([1, 0.3, 0.15])\n                    sphere(r = 12);\n    }\n}\n\n// Tail flukes\nmodule encantado_tail() {\n    color(color_encantado)\n    translate([-45, 0, -2]) {\n        // Left fluke\n        translate([0, -15, 0])\n            rotate([0, 0, -20])\n                scale([0.8, 2, 0.1])\n                    sphere(r = 10);\n        \n        // Right fluke\n        translate([0, 15, 0])\n            rotate([0, 0, 20])\n                scale([0.8, 2, 0.1])\n                    sphere(r = 10);\n    }\n}\n\n// Dorsal fin\nmodule encantado_fin() {\n    color(color_encantado)\n    translate([0, 0, 12])\n        rotate([0, 10, 0])\n            scale([0.1, 1, 1.5])\n                cylinder(h = 20, r1 = 8, r2 = 2);\n}\n\n// Eyes with magical glow\nmodule encantado_eyes() {\n    // Left eye\n    translate([35, -8, 12]) {\n        color(color_magic)\n            sphere(r = 3);\n        color(color_eyes)\n            sphere(r = 2);\n    }\n    \n    // Right eye\n    translate([35, 8, 12]) {\n        color(color_magic)\n            sphere(r = 3);\n        color(color_eyes)\n            sphere(r = 2);\n    }\n}\n\n// Magical aura spots\nmodule encantado_magic_spots() {\n    color(color_magic)\n    for(i = [-2:1:2]) {\n        translate([i * 10, sin(i * 30) * 8, 2])\n            scale([1, 1, 0.3])\n                sphere(r = 2 + abs(i));\n    }\n}\n\n// Blowhole\nmodule encantado_blowhole() {\n    color(color_encantado)\n    translate([15, 0, 10])\n        cylinder(h = 3, r = 2);\n}\n\n// Main assembly\nscale([0.8, 0.8, 0.8])\nunion() {\n    encantado_body();\n    encantado_snout();\n    encantado_flippers();\n    encantado_tail();\n    encantado_fin();\n    encantado_eyes();\n    encantado_magic_spots();\n    encantado_blowhole();\n}",
    "renders": true
  },
  {
    "mythical_creature": "erymanthian",
    "openscad_code": "// Erymanthian Boar - Mythical Creature from Greek Mythology\n// Realistic styling with medium complexity for 3D printing\n\n// Overall dimensions: 90mm long, 45mm high, 35mm wide\n\n// Main body color - dark grey/brown\ncolor([0.3, 0.25, 0.2]) {\n    // Main body\n    union() {\n        // Torso\n        translate([0, 0, 20]) {\n            scale([1.2, 0.8, 0.6]) {\n                sphere(20);\n            }\n        }\n        \n        // Rump\n        translate([-25, 0, 15]) {\n            scale([1, 0.9, 0.7]) {\n                sphere(18);\n            }\n        }\n        \n        // Shoulder\n        translate([25, 0, 18]) {\n            scale([1.1, 0.85, 0.75]) {\n                sphere(17);\n            }\n        }\n    }\n}\n\n// Legs module\nmodule leg(height) {\n    color([0.35, 0.3, 0.25]) {\n        union() {\n            // Upper leg\n            cylinder(h=height/2, r1=6, r2=5, $fn=8);\n            \n            // Lower leg\n            translate([0, 0, height/2]) {\n                cylinder(h=height/2, r1=5, r2=4, $fn=8);\n            }\n            \n            // Hoof\n            translate([0, 0, height-3]) {\n                color([0.2, 0.2, 0.2]) {\n                    cylinder(h=3, r1=4, r2=5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Position legs\nfor(x = [20, -20]) {\n    for(y = [12, -12]) {\n        translate([x, y, 0]) {\n            if(x > 0) {\n                rotate([0, -15, 0]) leg(28);\n            } else {\n                rotate([0, 15, 0]) leg(32);\n            }\n        }\n    }\n}\n\n// Head\ntranslate([40, 0, 25]) {\n    color([0.32, 0.27, 0.22]) {\n        scale([1.4, 1.1, 1]) {\n            sphere(15);\n        }\n    }\n    \n    // Snout\n    translate([10, 0, -2]) {\n        color([0.3, 0.25, 0.2]) {\n            scale([1.2, 0.7, 0.6]) {\n                sphere(10);\n            }\n        }\n    }\n    \n    // Tusks\n    for(side = [-1, 1]) {\n        translate([8, side*8, 0]) {\n            color([0.9, 0.9, 0.85]) {\n                rotate([0, side*20, 0]) {\n                    cylinder(h=12, r1=3, r2=1, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Ears\nfor(side = [-1, 1]) {\n    translate([35, side*12, 35]) {\n        color([0.28, 0.23, 0.18]) {\n            rotate([0, 0, side*30]) {\n                scale([0.8, 0.4, 0.1]) {\n                    sphere(8);\n                }\n            }\n        }\n    }\n}\n\n// Eyes\nfor(side = [-1, 1]) {\n    translate([45, side*6, 28]) {\n        color([0.1, 0.1, 0.1]) {\n            sphere(2.5);\n        }\n    }\n}\n\n// Mane/bristles along spine\nfor(i = [35:-3:-35]) {\n    translate([i, 0, 28+abs(i)/5]) {\n        color([0.4, 0.3, 0.25]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=3+abs(i)/10, r=1.5, $fn=5);\n            }\n        }\n    }\n}\n\n// Tail\ntranslate([-40, 0, 20]) {\n    color([0.35, 0.3, 0.25]) {\n        rotate([45, 0, 0]) {\n            cylinder(h=15, r1=3, r2=1, $fn=6);\n        }\n    }\n    \n    // Tail tuft\n    translate([-8, 0, 8]) {\n        color([0.4, 0.35, 0.3]) {\n            sphere(3);\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "fext",
    "openscad_code": "// Fext - Undead warrior of Slavic folklore\n// Medium complexity realistic model with 3D-printable geometry\n\n// Overall dimensions: ~80mm tall\n$fn = 64;\n\nmodule fext_body() {\n    color(\"darkolivegreen\")\n    difference() {\n        union() {\n            // Main torso\n            translate([0, 0, 30])\n            scale([1.2, 0.8, 2])\n            sphere(12);\n            \n            // Abdomen\n            translate([0, 0, 15])\n            scale([1, 0.7, 1.5])\n            cylinder(h=10, r=10);\n            \n            // Pelvis\n            translate([0, 0, 5])\n            scale([1.3, 0.9, 1])\n            sphere(8);\n            \n            // Chest armor plates\n            for(i = [-1, 1]) {\n                translate([i * 8, 0, 30])\n                rotate([0, i * 15, 0])\n                scale([0.3, 1, 1.5])\n                cube([8, 2, 15]);\n            }\n        }\n        \n        // Hollow for printing\n        translate([0, 0, 20])\n        scale([0.8, 0.6, 1.6])\n        sphere(10);\n    }\n}\n\nmodule fext_head() {\n    color(\"darkolivegreen\")\n    difference() {\n        union() {\n            // Skull head\n            translate([0, 0, 55])\n            scale([0.8, 0.7, 1])\n            sphere(10);\n            \n            // Eye sockets (empty)\n            translate([0, 0, 53])\n            scale([1, 1, 0.8])\n            sphere(8);\n            \n            // Jaw\n            translate([0, -5, 48])\n            rotate([20, 0, 0])\n            scale([0.7, 0.5, 0.8])\n            cube([8, 8, 8], center=true);\n        }\n        \n        // Eye sockets hollow\n        for(i = [-1, 1]) {\n            translate([i * 3, -2, 57])\n            rotate([20, 0, 0])\n            scale([1, 0.5, 0.5])\n            sphere(2);\n        }\n        \n        // Mouth opening\n        translate([0, -5, 50])\n        rotate([20, 0, 0])\n        scale([4, 2, 3])\n        cube([6, 4, 2], center=true);\n    }\n    \n    // Empty eye glow\n    for(i = [-1, 1]) {\n        color(\"red\")\n        translate([i * 3, -2.5, 57])\n        sphere(1);\n    }\n}\n\nmodule fext_arms() {\n    color(\"darkolivegreen\")\n    for(side = [-1, 1]) {\n        // Shoulder\n        translate([side * 12, 0, 45])\n        rotate([0, 0, side * 20])\n        sphere(6);\n        \n        // Upper arm\n        translate([side * 18, 0, 45])\n        rotate([0, 0, side * 30])\n        scale([0.6, 0.6, 1])\n        cylinder(h=15, r=4);\n        \n        // Forearm\n        translate([side * 25, 0, 38])\n        rotate([0, 0, side * 40])\n        scale([0.5, 0.5, 1])\n        cylinder(h=12, r=3.5);\n        \n        // Hand\n        translate([side * 30, 0, 33])\n        rotate([0, 0, side * 45])\n        sphere(4);\n        \n        // Sword\n        if(side == 1) {\n            color(\"silver\")\n            translate([side * 35, 0, 35])\n            rotate([0, 0, side * 30])\n            union() {\n                // Blade\n                translate([0, 0, 8])\n                scale([0.2, 2, 0.05])\n                cube([20, 1, 15]);\n                \n                // Hilt\n                translate([0, 0, 0])\n                scale([0.3, 0.3, 0.3])\n                sphere(5);\n                \n                // Guard\n                translate([0, 0, 2])\n                scale([1, 0.1, 0.5])\n                cube([15, 3, 2], center=true);\n            }\n        }\n    }\n}\n\nmodule fext_legs() {\n    color(\"darkolivegreen\")\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([side * 5, 0, 20])\n        rotate([0, side * 10, 0])\n        scale([0.7, 0.7, 1])\n        cylinder(h=18, r=5);\n        \n        // Lower leg\n        translate([side * 6, 0, 8])\n        rotate([0, side * 15, 0])\n        scale([0.6, 0.6, 1])\n        cylinder(h=15, r=4);\n        \n        // Foot\n        translate([side * 7, -3, 0])\n        scale([1, 2, 0.5])\n            cube([6, 10, 4]);\n    }\n}\n\nmodule fext_details() {\n    // Spine ridges\n    color(\"darkgreen\")\n    for(i = [0:2:10]) {\n        translate([0, 0, 10 + i * 3])\n        scale([0.3, 0.3, 1])\n        cylinder(h=2, r=3);\n    }\n    \n    // Ribs visible through gaps\n    color(\"darkolivegreen\")\n    for(i = [0:1:4]) {\n        rotate([0, 0, i * 72])\n        translate([8, 0, 25 + i * 2])\n        scale([0.3, 0.3, 1])\n        rotate([90, 0, 0])\n        cylinder(h=8, r=2);\n    }\n    \n    // Damage/wear marks\n    color(\"black\")\n    for(i = [0:5:20]) {\n        translate([sin(i) * 5, cos(i) * 5, 25 + i])\n        sphere(0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    fext_body();\n    fext_head();\n    fext_arms();\n    fext_legs();\n    fext_details();\n}",
    "renders": true
  },
  {
    "mythical_creature": "gaasyendietha",
    "openscad_code": "// Gaasyendietha - The Meteor Dragon of Iroquois mythology\n// A serpentine dragon that travels through the sky as a meteor\n\n// Color definitions\n$fn = 50;\n\n// Main module for the entire creature\nmodule gaasyendietha() {\n    color(\"ForestGreen\") {\n        // Body segments\n        union() {\n            // Head\n            translate([0, 0, 30]) head();\n            \n            // Neck segments\n            for(i = [1:3]) {\n                translate([0, 0, 30 - i*6]) \n                    scale([0.9 - i*0.1, 0.9 - i*0.1, 0.8])\n                    neck_segment();\n            }\n            \n            // Main body\n            translate([0, 0, 10]) body();\n            \n            // Tail segments\n            for(i = [1:5]) {\n                translate([0, 0, 10 - i*5]) \n                    scale([0.9 - i*0.08, 0.9 - i*0.08, 0.9])\n                    tail_segment();\n            }\n            \n            // Wings\n            color(\"DarkGreen\") {\n                translate([12, 0, 20]) rotate([0, 0, 30]) wing(1);\n                translate([-12, 0, 20]) rotate([0, 0, -30]) mirror([1, 0, 0]) wing(1);\n            }\n            \n            // Legs\n            color(\"DarkGreen\") {\n                translate([8, 0, 5]) leg();\n                translate([-8, 0, 5]) mirror([1, 0, 0]) leg();\n                translate([6, 0, 0]) rotate([0, 0, 15]) hind_leg();\n                translate([-6, 0, 0]) rotate([0, 0, -15]) mirror([1, 0, 0]) hind_leg();\n            }\n            \n            // Meteor trail effect\n            color(\"Goldenrod\") meteor_trail();\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    difference() {\n        // Main head shape\n        scale([1.2, 0.8, 0.8]) sphere(8);\n        \n        // Eyes\n        translate([3, 4, 2]) color(\"Red\") sphere(1);\n        translate([3, -4, 2]) color(\"Red\") sphere(1);\n        \n        // Nostrils\n        translate([4, 2, -1]) cylinder(h=3, r=0.5);\n        translate([4, -2, -1]) cylinder(h=3, r=0.5);\n    }\n    \n    // Horns\n    color(\"DarkOliveGreen\") {\n        translate([0, 3, 4]) rotate([30, 0, 0]) cylinder(h=5, r1=1, r2=0.5);\n        translate([0, -3, 4]) rotate([30, 0, 0]) cylinder(h=5, r1=1, r2=0.5);\n    }\n}\n\n// Neck segment\nmodule neck_segment() {\n    cylinder(h=6, r1=4, r2=3.5);\n    \n    // Scales detail\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) \n            translate([0, 2.5, 3]) \n            scale([1, 0.5, 0.3]) \n            sphere(1);\n    }\n}\n\n// Body module\nmodule body() {\n    difference() {\n        scale([1.5, 1, 1]) sphere(12);\n        \n        // Scale pattern\n        for(i = [0:7]) {\n            rotate([0, 0, i*45]) {\n                translate([0, 10, 0]) \n                    scale([1.5, 0.8, 0.3]) \n                    sphere(2);\n            }\n        }\n    }\n}\n\n// Tail segment\nmodule tail_segment() {\n    cylinder(h=5, r1=2.5, r2=2);\n    \n    // Fin detail\n    color(\"SeaGreen\") {\n        translate([0, 0, 2.5]) \n            scale([0.1, 1.5, 0.8]) \n            sphere(1.5);\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    difference() {\n        // Main wing\n        rotate([0, 90, 0]) \n            scale([1, 0.1, 2]) \n            sphere(8);\n        \n        // Wing membrane holes\n        for(i = [1:3]) {\n            translate([0, 0, i*3]) \n                scale([0.8, 1, 0.3]) \n                sphere(2);\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    union() {\n        // Upper leg\n        rotate([0, 0, 45]) \n            cylinder(h=8, r=1.5);\n        \n        // Lower leg\n        translate([5, 0, -5]) \n            rotate([0, 0, 90]) \n            cylinder(h=6, r=1.2);\n        \n        // Foot\n        translate([8, 0, -8]) \n            scale([2, 0.8, 0.5]) \n            sphere(1.5);\n    }\n}\n\n// Hind leg module\nmodule hind_leg() {\n    scale([0.8, 0.8, 0.8]) leg();\n}\n\n// Meteor trail effect\nmodule meteor_trail() {\n    for(i = [1:8]) {\n        translate([0, 0, -i*2]) \n            scale([1 - i*0.08, 1 - i*0.08, 1]) \n            color(\"Gold\") \n            sphere(3 - i*0.3);\n    }\n}\n\n// Generate the creature\ngaasyendietha();",
    "renders": true
  },
  {
    "mythical_creature": "gargouille",
    "openscad_code": "// Gargouille - Mythical Water-Spouting Dragon\n// Realistic style, medium complexity\n\n// Main parameters\nscale_factor = 0.7;\nbody_length = 80 * scale_factor;\nbody_height = 40 * scale_factor;\nwing_span = 100 * scale_factor;\n\n// Colors\nstone_color = [0.5, 0.5, 0.45];\naccent_color = [0.3, 0.3, 0.25];\n\n// Main body\nmodule gargouille_body() {\n    color(stone_color)\n    union() {\n        // Torso\n        translate([0, 0, body_height/2])\n            scale([1.5, 1, 1])\n            sphere(r=body_height/2, $fn=32);\n            \n        // Chest plate\n        translate([body_length/4, 0, body_height/2])\n            scale([1.2, 0.8, 0.6])\n            sphere(r=body_height/2.5, $fn=32);\n            \n        // Back ridge\n        for(i = [-1:0.5:1]) {\n            translate([i*body_length/3, 0, body_height])\n                rotate([0, 0, i*20])\n                scale([0.3, 0.3, 1])\n                cylinder(h=body_height/3, r=body_height/8, $fn=6);\n        }\n    }\n}\n\n// Head\nmodule gargouille_head() {\n    color(stone_color)\n    union() {\n        // Main head\n        translate([-body_length/2, 0, body_height*1.2])\n            scale([1.2, 0.8, 1])\n            sphere(r=body_height/2.2, $fn=32);\n            \n        // Snout\n        translate([-body_length/2-body_height/2, 0, body_height*1.1])\n            scale([1.5, 0.5, 0.5])\n            sphere(r=body_height/3, $fn=32);\n            \n        // Horns\n        for(angle = [30, 150]) {\n            translate([-body_length/2-body_height/4, 0, body_height*1.5])\n                rotate([0, angle, 0])\n                cylinder(h=body_height/2, r1=body_height/8, r2=body_height/20, $fn=8);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([-body_length/2-body_height/3, side*body_height/4, body_height*1.3])\n                color([0, 0, 0])\n                sphere(r=body_height/15, $fn=16);\n        }\n        \n        // Water spout\n        difference() {\n            translate([-body_length/2-body_height/1.5, 0, body_height])\n                rotate([90, 0, 0])\n                cylinder(h=body_height/2, r=body_height/10, $fn=16);\n            translate([-body_length/2-body_height/1.5, 0, body_height-body_height/2])\n                cube([body_height/5, body_height/5, body_height], center=true);\n        }\n    }\n}\n\n// Wings\nmodule gargouille_wing() {\n    color(accent_color)\n    difference() {\n        // Main wing membrane\n        translate([0, wing_span/4, body_height*0.8])\n            rotate([0, 0, 30])\n            scale([2, 1, 0.1])\n            sphere(r=wing_span/4, $fn=32);\n            \n        // Wing holes for Gothic style\n        for(i = [0.3, 0.6, 0.9]) {\n            translate([wing_span/2*i, wing_span/4*i, 0])\n                scale([0.3, 0.3, 2])\n                sphere(r=wing_span/10, $fn=16);\n        }\n    }\n}\n\n// Tail\nmodule gargouille_tail() {\n    color(stone_color)\n    hull() {\n        translate([body_length/2, 0, body_height/2])\n            sphere(r=body_height/3, $fn=16);\n        translate([body_length, 0, body_height/4])\n            rotate([0, 0, 45])\n            scale([0.5, 0.5, 2])\n            cylinder(h=body_height, r=body_height/6, $fn=8);\n    }\n    \n    // Tail spikes\n    for(i = [0.2, 0.4, 0.6, 0.8]) {\n        translate([body_length/2 + (body_length/2)*i, 0, body_height/2 - body_height/4*i])\n            rotate([0, 0, 45])\n            scale([0.3, 0.3, 1])\n            cylinder(h=body_height/5, r=body_height/12, $fn=4);\n    }\n}\n\n// Legs\nmodule gargouille_leg(side) {\n    color(stone_color)\n    union() {\n        // Upper leg\n        translate([body_length/4, side*body_height/3, body_height/4])\n            rotate([0, side*15, 0])\n            cylinder(h=body_height/2, r=body_height/8, $fn=16);\n            \n        // Lower leg\n        translate([body_length/4+body_height/4, side*body_height/2.5, 0])\n            rotate([0, side*30, 0])\n            cylinder(h=body_height/2, r=body_height/10, $fn=16);\n            \n        // Foot\n        translate([body_length/4+body_height/3, side*body_height/2, -body_height/4])\n            scale([1.5, 0.8, 0.5])\n            sphere(r=body_height/10, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    gargouille_body();\n    gargouille_head();\n    \n    // Wings\n    gargouille_wing();\n    mirror([0, 1, 0]) gargouille_wing();\n    \n    gargouille_tail();\n    \n    // Legs\n    gargouille_leg(1);\n    gargouille_leg(-1);\n}",
    "renders": true
  },
  {
    "mythical_creature": "geryon",
    "openscad_code": "// Geryon - Three-bodied giant from Greek mythology\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions: ~80mm wide, ~60mm tall\n\n// Main color scheme\ncolor(\"darkgoldenrod\") {\n\n// Central torso (shared lower body)\nmodule central_torso() {\n    // Pelvis/hips\n    translate([0, 0, 5]) \n        scale([1.2, 0.8, 1])\n        sphere(r=12, $fn=20);\n    \n    // Waist connector\n    translate([0, 0, 15])\n        cylinder(h=8, r1=8, r2=10, $fn=16);\n    \n    // Central chest\n    translate([0, 0, 25])\n        scale([1.3, 1, 1.2])\n        sphere(r=15, $fn=20);\n}\n\n// Single torso module for Geryon's three bodies\nmodule single_torso(x_offset) {\n    translate([x_offset, 0, 30]) {\n        // Spine/neck connector\n        cylinder(h=15, r1=8, r2=5, $fn=12);\n        \n        // Chest\n        translate([0, 0, 10])\n            scale([1.1, 0.9, 1.2])\n            sphere(r=14, $fn=20);\n        \n        // Shoulders\n        for(side = [-1, 1]) {\n            translate([side * 12, 0, 18])\n                rotate([0, 30 * side, 0])\n                cylinder(h=8, r1=6, r2=4, $fn=8);\n        }\n    }\n}\n\n// Head module with horns\nmodule head(x_offset) {\n    translate([x_offset, 0, 50]) {\n        // Main head\n        scale([0.8, 0.7, 1])\n        sphere(r=10, $fn=20);\n        \n        // Snout\n        translate([0, 8, -2])\n            scale([0.6, 1.2, 0.8])\n            sphere(r=6, $fn=16);\n        \n        // Horns - curved\n        color(\"saddlebrown\") {\n            for(side = [-1, 1]) {\n                translate([side * 5, 5, 5])\n                    rotate([0, -30, side * 20])\n                    cylinder(h=12, r1=3, r2=1, $fn=8);\n                \n                translate([side * 5, 5, 5])\n                    rotate([0, -60, side * 30])\n                    cylinder(h=8, r1=2, r2=0.5, $fn=6);\n            }\n        }\n        \n        // Eyes\n        color(\"red\") {\n            for(side = [-1, 1]) {\n                translate([side * 4, 6, 2])\n                    sphere(r=1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Arm module\nmodule arm(x_offset, side) {\n    translate([x_offset + side * 15, 0, 42]) {\n        rotate([0, 0, side * 30])\n            // Upper arm\n            rotate([90, 0, 0])\n            cylinder(h=15, r=4, $fn=8);\n        \n        translate([0, 15, 0])\n            rotate([0, 0, side * 20])\n                // Forearm\n                rotate([90, 0, 0])\n                cylinder(h=12, r=3.5, $fn=8);\n        \n        translate([0, 27, 0])\n            // Hand\n            sphere(r=4, $fn=8);\n    }\n}\n\n// Leg module\nmodule leg(x_offset, z_offset) {\n    translate([x_offset, 0, z_offset]) {\n        // Upper leg\n        cylinder(h=20, r=5, $fn=8);\n        \n        // Knee\n        translate([0, 0, 20])\n            sphere(r=4.5, $fn=8);\n        \n        // Lower leg\n        translate([0, 0, 20])\n            rotate([5, 0, 0])\n            cylinder(h=18, r=4, $fn=8);\n        \n        // Foot\n        translate([0, 0, 38])\n            rotate([90, 0, 0])\n            scale([1.2, 2, 0.8])\n            cylinder(h=8, r=3, $fn=8);\n    }\n}\n\n// Wings (shared between all bodies)\nmodule wings() {\n    color(\"darkred\") {\n        // Left wing\n        translate([-25, 0, 45]) {\n            rotate([0, -30, -30])\n                // Main wing structure\n                for(i = [0:2]) {\n                    translate([i * -8, 0, i * 3])\n                        rotate([0, i * -10, 0])\n                        scale([0.8, 0.1, 3])\n                        cube([15, 1, 8], center=true);\n                }\n        }\n        \n        // Right wing\n        translate([25, 0, 45]) {\n            rotate([0, -30, 30])\n                mirror([1, 0, 0])\n                // Main wing structure\n                for(i = [0:2]) {\n                    translate([i * -8, 0, i * 3])\n                        rotate([0, i * -10, 0])\n                        scale([0.8, 0.1, 3])\n                        cube([15, 1, 8], center=true);\n                }\n        }\n    }\n}\n\n// Tail (single tail for the merged lower body)\nmodule tail() {\n    color(\"darkgoldenrod\") {\n        translate([0, -15, 10]) {\n            // Tail segments\n            for(i = [0:3]) {\n                translate([0, -i * 8, -i * 2])\n                    rotate([0, -i * 10, 0])\n                    scale([1 - i * 0.15, 1 - i * 0.15, 1 - i * 0.1])\n                    sphere(r=6 - i, $fn=12);\n            }\n            \n            // Tail spike\n            translate([0, -32, -8])\n                rotate([90, 0, 0])\n                cylinder(h=8, r1=3, r2=0.5, $fn=8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Central torso\n    central_torso();\n    \n    // Three torsos/heads\n    for(i = [-1, 0, 1]) {\n        single_torso(i * 20);\n        head(i * 20);\n        \n        // Arms for each torso\n        arm(i * 20, -1);\n        arm(i * 20, 1);\n    }\n    \n    // Shared legs\n    leg(-10, 0);\n    leg(10, 0);\n    leg(0, 0);\n    \n    // Wings\n    wings();\n    \n    // Tail\n    tail();\n}\n}",
    "renders": true
  },
  {
    "mythical_creature": "ghoul",
    "openscad_code": "// Ghoul - Realistic style, medium complexity\n// Based on Arabian folklore - gaunt humanoid with sharp features\n\ncolor([0.2, 0.15, 0.1])  // Dark earth-tone for skin\n\n// Main body module\nmodule ghoul_body() {\n    // Torso - gaunt and hunched\n    translate([0, 0, 10])\n    scale([1, 0.6, 1.4])\n    cube([20, 15, 35], center=true);\n}\n\n// Head module with sunken features\nmodule ghoul_head() {\n    translate([0, 0, 45])\n    union() {\n        // Skull-like head\n        scale([0.8, 0.7, 1])\n        sphere(12);\n        \n        // Sunken eye sockets\n        translate([-5, 6, 3])\n        scale([1.2, 0.8, 0.8])\n        color([0, 0, 0])\n        sphere(3);\n        \n        translate([5, 6, 3])\n        scale([1.2, 0.8, 0.8])\n        color([0, 0, 0])\n        sphere(3);\n        \n        // Sharp teeth\n        for(i = [-4:2:4]) {\n            translate([i, 10, 0])\n            rotate([0, 90, 0])\n            cylinder(h=2, r1=1, r2=0.2, center=true);\n        }\n        \n        // Pointed ears\n        translate([-8, 0, 3])\n        rotate([0, 0, -20])\n        scale([1, 0.3, 2])\n        cone(5);\n        \n        translate([8, 0, 3])\n        rotate([0, 0, 20])\n        scale([1, 0.3, 2])\n        cone(5);\n    }\n}\n\n// Simple cone helper\nmodule cone(height) {\n    cylinder(h=height, r1=2, r2=0.1, center=true);\n}\n\n// Arms - long and thin\nmodule ghoul_arm(side) {\n    translate([side * 12, 0, 35])\n    rotate([0, 0, side * 10])\n    union() {\n        // Upper arm\n        rotate([90, 0, 0])\n        cylinder(h=20, r=3, center=true);\n        \n        // Lower arm\n        translate([0, side * 15, -10])\n        rotate([90, 0, 0])\n        cylinder(h=20, r=2.5, center=true);\n        \n        // Clawed hand\n        translate([0, side * 25, -20])\n        union() {\n            sphere(3);\n            // Claws\n            for(i = [-3:1.5:3]) {\n                translate([i, 0, -2])\n                rotate([0, 90, 0])\n                cylinder(h=5, r1=0.8, r2=0.2, center=true);\n            }\n        }\n    }\n}\n\n// Legs - digitigrade stance\nmodule ghoul_leg(side) {\n    translate([side * 6, 0, 5])\n    union() {\n        // Thigh\n        rotate([0, side * 10, 0])\n        cylinder(h=20, r=4, center=true);\n        \n        // Lower leg - bent backward\n        translate([0, 0, -15])\n        rotate([20, side * 10, 0])\n        cylinder(h=20, r=3, center=true);\n        \n        // Foot with claws\n        translate([0, side * 5, -28])\n        union() {\n            scale([1.5, 2, 0.8])\n            sphere(3);\n            // Toe claws\n            for(i = [-2:1:2]) {\n                translate([i, 3, -1])\n                rotate([0, 90, 0])\n                cylinder(h=3, r1=0.6, r2=0.2, center=true);\n            }\n        }\n    }\n}\n\n// Spinal ridge\nmodule spinal_ridge() {\n    translate([0, -5, 25])\n    for(i = [0:5:25]) {\n        translate([0, 0, i])\n        scale([1, 0.5, 0.8])\n        sphere(2);\n    }\n}\n\n// Assemble the ghoul\nunion() {\n    ghoul_body();\n    ghoul_head();\n    ghoul_arm(-1);  // Left arm\n    ghoul_arm(1);   // Right arm\n    ghoul_leg(-1);  // Left leg\n    ghoul_leg(1);   // Right leg\n    spinal_ridge();\n}\n\n// Base platform for stability\ncolor([0.3, 0.25, 0.2])\ntranslate([0, 0, -30])\ncube([40, 30, 3], center=true);",
    "renders": true
  },
  {
    "mythical_creature": "girtablilu",
    "openscad_code": "// Girtablilu - Mesopotamian scorpion-man guardian creature\n// Scorpion body with human torso, arms, and head\n\n// Overall scaling factor to fit within 3D printer bed\nscale_factor = 80;\n\n// Main module\nmodule girtablilu() {\n    scale([scale_factor/100, scale_factor/100, scale_factor/100])\n    union() {\n        // Scorpion body segments\n        scorpion_body();\n        \n        // Human torso\n        human_torso();\n        \n        // Human head\n        human_head();\n        \n        // Arms\n        arms();\n        \n        // Scorpion tail with stinger\n        tail();\n        \n        // Legs (8 scorpion legs)\n        legs();\n    }\n}\n\n// Main scorpion body\nmodule scorpion_body() {\n    color(\"saddlebrown\")\n    union() {\n        // Main thorax segment\n        translate([0, 0, 5])\n            scale([1.2, 0.8, 0.4])\n            sphere(10, $fn=32);\n            \n        // Abdomen segments\n        for(i = [1:3]) {\n            translate([0 - i*8, 0, 5 - i*3])\n                scale([1 - i*0.2, 0.7 - i*0.1, 0.3])\n                sphere(8 - i*2, $fn=24);\n        }\n    }\n}\n\n// Human torso emerging from scorpion body\nmodule human_torso() {\n    color(\"peru\")\n    translate([0, 0, 15])\n    union() {\n        // Chest\n        scale([0.8, 0.4, 1.2])\n            cylinder(h=12, r=5, $fn=20);\n            \n        // Waist transition\n        translate([0, 0, 6])\n            scale([0.6, 0.3, 0.8])\n            cylinder(h=8, r=4, $fn=16);\n    }\n}\n\n// Human head with Mesopotamian features\nmodule human_head() {\n    color(\"burlywood\")\n    translate([0, 0, 28])\n    union() {\n        // Head\n        scale([0.7, 0.7, 0.9])\n            sphere(5, $fn=32);\n            \n        // Beard\n        translate([0, 2.5, -2])\n            scale([0.3, 0.2, 0.6])\n            sphere(4, $fn=16);\n            \n        // Headdress/crown\n        color(\"goldenrod\")\n        translate([0, 0, 3])\n            scale([1, 0.8, 0.3])\n            cylinder(h=2, r=5.5, $fn=6);\n            \n        // Horns (Mesopotamian style)\n        color(\"darkgoldenrod\")\n        translate([-3, 0, 4])\n            rotate([0, 30, 0])\n            cylinder(h=4, r1=1.5, r2=0.5, $fn=8);\n        translate([3, 0, 4])\n            rotate([0, -30, 0])\n            cylinder(h=4, r1=1.5, r2=0.5, $fn=8);\n    }\n}\n\n// Arms with claw-like hands\nmodule arms() {\n    color(\"peru\")\n    union() {\n        // Left arm\n        translate([-5, 4, 22])\n        rotate([0, 0, 30])\n        union() {\n            // Upper arm\n            cylinder(h=8, r=1.5, $fn=12);\n            \n            // Forearm\n            translate([0, 0, -8])\n                rotate([90, 0, 0])\n                cylinder(h=6, r=1.2, $fn=12);\n                \n            // Hand/claw\n            translate([0, 0, -13])\n                scale([2, 0.5, 1])\n                cube([3, 1, 1]);\n        }\n        \n        // Right arm\n        translate([5, 4, 22])\n        rotate([0, 0, -30])\n        mirror([1, 0, 0])\n        union() {\n            // Upper arm\n            cylinder(h=8, r=1.5, $fn=12);\n            \n            // Forearm\n            translate([0, 0, -8])\n                rotate([90, 0, 0])\n                cylinder(h=6, r=1.2, $fn=12);\n                \n            // Hand/claw\n            translate([0, 0, -13])\n                scale([2, 0.5, 1])\n                cube([3, 1, 1]);\n        }\n    }\n}\n\n// Scorpion tail with segmented stinger\nmodule tail() {\n    color(\"saddlebrown\")\n    translate([0, -18, 8])\n    union() {\n        // Tail segments\n        for(i = [0:4]) {\n            rotate([0, 0, -i*15])\n            translate([0, -i*5, i*2])\n                rotate([i*10 - 20, 0, 0])\n                scale([1 - i*0.15, 1 - i*0.15, 1])\n                cylinder(h=5, r=3 - i*0.5, $fn=12);\n        }\n        \n        // Stinger\n        translate([0, -25, 10])\n            rotate([45, 0, 0])\n            cylinder(h=6, r1=2, r2=0.5, $fn=8);\n    }\n}\n\n// Scorpion legs (4 pairs)\nmodule legs() {\n    color(\"saddlebrown\")\n    for(side = [-1, 1]) {\n        for(pair = [0:3]) {\n            translate([side*8, pair*4 - 6, 3])\n            rotate([0, 0, side*30])\n            union() {\n                // Upper leg segment\n                cylinder(h=6, r=1.2, $fn=8);\n                \n                // Lower leg segment\n                translate([0, -6, 0])\n                    rotate([30, 0, 0])\n                    cylinder(h=5, r=1, $fn=8);\n                    \n                // Foot/claw\n                translate([0, -10, -2])\n                    scale([1.5, 0.5, 0.5])\n                    cube([3, 1, 1]);\n            }\n        }\n    }\n}\n\n// Render the creature\ngirtablilu();",
    "renders": true
  },
  {
    "mythical_creature": "gorgon",
    "openscad_code": "// Gorgon - Mythical creature with snake hair and wings\n// Size: ~70mm tall, 3D printable\n\n$fn = 32;\n\n// Main colors\ncolor_scales = [0.3, 0.5, 0.4]; // Dark green scales\ncolor_skin = [0.8, 0.7, 0.6]; // Pale stone-like skin\ncolor_snakes = [0.4, 0.7, 0.3]; // Green snakes\ncolor_wings = [0.6, 0.6, 0.7]; // Translucent gray wings\n\nmodule gorgon() {\n    // Head\n    color(color_skin)\n    translate([0, 0, 40])\n    scale([1.2, 1, 1.2])\n    sphere(10);\n    \n    // Snake hair - array of snakes\n    for(i = [0:11]) {\n        angle = i * 30;\n        radius = 12;\n        color(color_snakes)\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            40\n        ])\n        rotate([0, 0, angle])\n        rotate([90, 0, 0])\n        cylinder(h = 15, r1 = 2, r2 = 1);\n    }\n    \n    // Snake heads\n    for(i = [0:11]) {\n        angle = i * 30;\n        radius = 12;\n        color(color_snakes)\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            40 + 15\n        ])\n        sphere(1.5);\n    }\n    \n    // Torso\n    color(color_scales)\n    translate([0, 0, 25])\n    scale([1.5, 1, 2])\n    cylinder(h = 15, r1 = 8, r2 = 6);\n    \n    // Arms\n    for(side = [-1, 1]) {\n        color(color_skin)\n        translate([side * 10, 0, 30])\n        rotate([0, 0, side * 15])\n        rotate([90, 0, 0])\n        cylinder(h = 12, r1 = 2.5, r2 = 2);\n        \n        // Hands\n        translate([side * 12, 0, 28])\n        sphere(2.5);\n    }\n    \n    // Wings\n    for(side = [-1, 1]) {\n        color(color_wings)\n        translate([side * 8, 0, 35])\n        rotate([0, 0, side * 30])\n        rotate([0, 90, 0])\n        scale([1, 0.3, 1])\n        difference() {\n            sphere(15);\n            translate([side * -8, 0, 0])\n            cube(20, center = true);\n        }\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        color(color_scales)\n        translate([side * 4, 0, 15])\n        rotate([0, 0, side * 5])\n        cylinder(h = 15, r1 = 3, r2 = 2.5);\n        \n        // Feet\n        translate([side * 4.5, 0, 7])\n        scale([1.5, 2, 0.5])\n        sphere(3);\n    }\n    \n    // Snake tail\n    color(color_scales)\n    translate([0, 0, 0])\n    cylinder(h = 20, r1 = 6, r2 = 4);\n    \n    // Tail end - serpent body\n    for(i = [0:4]) {\n        offset = i * 5;\n        radius = 4 - i * 0.5;\n        color(color_scales)\n        translate([0, 0, -offset])\n        cylinder(h = 5, r1 = radius, r2 = radius - 0.5);\n    }\n    \n    // Scales pattern on torso\n    for(i = [0:3]) {\n        for(j = [0:7]) {\n            angle = j * 45;\n            height = 25 + i * 4;\n            color(color_scales)\n            translate([\n                cos(angle) * (7 - i),\n                sin(angle) * (7 - i),\n                height\n            ])\n            rotate([90, 0, angle])\n            scale([1, 0.3, 0.5])\n            sphere(1);\n        }\n    }\n    \n    // Eyes (glowing)\n    for(side = [-1, 1]) {\n        color([1, 0.2, 0.2])\n        translate([side * 3, 8, 42])\n        sphere(1.5);\n    }\n    \n    // Fangs\n    for(side = [-1, 1]) {\n        color([0.9, 0.9, 0.9])\n        translate([side * 1.5, 6, 38])\n        rotate([90, 0, 0])\n        cylinder(h = 2, r1 = 0.5, r2 = 0);\n    }\n}\n\n// Main assembly\ngorgon();",
    "renders": true
  },
  {
    "mythical_creature": "gremlin",
    "openscad_code": "// Gremlin - Mythical Creature\n// Realistic style, medium complexity\n// 3D printable, approximately 75mm height\n\n// Main module\nmodule gremlin() {\n    color(\"darkolivegreen\")\n    union() {\n        // Body\n        body();\n        \n        // Head\n        translate([0, 0, 35])\n            head();\n            \n        // Arms\n        translate([-18, 0, 25])\n            rotate([0, 0, 30])\n            arm();\n        translate([18, 0, 25])\n            rotate([0, 0, -30])\n            mirror([1, 0, 0])\n            arm();\n            \n        // Legs\n        translate([-8, 0, 0])\n            leg();\n        translate([8, 0, 0])\n            leg();\n            \n        // Tail\n        translate([0, -15, 10])\n            rotate([0, -20, 0])\n            tail();\n            \n        // Wings\n        translate([0, 10, 30])\n            wings();\n    }\n}\n\n// Body - elongated torso\nmodule body() {\n    difference() {\n        // Main torso\n        scale([1.2, 0.8, 1.5])\n        sphere(12, $fn=16);\n        \n        // Waist indent\n        translate([0, 0, -5])\n        scale([1.1, 0.9, 0.8])\n        sphere(10, $fn=16);\n        \n        // Chest detail\n        translate([0, 8, 5])\n        rotate([90, 0, 0])\n        cylinder(h=5, r1=3, r2=2, $fn=8);\n    }\n}\n\n// Head with gremlin features\nmodule head() {\n    color(\"olivedrab\")\n    union() {\n        // Basic head shape\n        scale([1, 1.2, 1.1])\n        sphere(10, $fn=16);\n        \n        // Snout\n        translate([0, 10, -2])\n        rotate([20, 0, 0])\n        scale([0.8, 1.2, 0.8])\n        sphere(6, $fn=12);\n        \n        // Ears\n        translate([-8, 0, 5])\n        rotate([0, 0, -20])\n        scale([0.3, 1.5, 0.5])\n        cylinder(h=12, r1=3, r2=1, $fn=6);\n        translate([8, 0, 5])\n        rotate([0, 0, 20])\n        scale([0.3, 1.5, 0.5])\n        cylinder(h=12, r1=3, r2=1, $fn=6);\n        \n        // Horns\n        translate([-5, -5, 8])\n        rotate([0, 20, -30])\n        scale([0.5, 0.5, 1])\n        cylinder(h=8, r1=2, r2=0.5, $fn=6);\n        translate([5, -5, 8])\n        rotate([0, 20, 30])\n        scale([0.5, 0.5, 1])\n        cylinder(h=8, r1=2, r2=0.5, $fn=6);\n        \n        // Eyes\n        translate([-4, 8, 2])\n        rotate([30, 0, 0])\n        color(\"red\")\n        sphere(2, $fn=8);\n        translate([4, 8, 2])\n        rotate([30, 0, 0])\n        color(\"red\")\n        sphere(2, $fn=8);\n        \n        // Teeth\n        for(i = [-2:2]) {\n            translate([i*2, 14, -4])\n            color(\"ivory\")\n            rotate([90, 0, 0])\n            cylinder(h=3, r=0.8, $fn=6);\n        }\n    }\n}\n\n// Arm with claws\nmodule arm() {\n    color(\"darkolivegreen\")\n    union() {\n        // Upper arm\n        rotate([0, 90, 0])\n        cylinder(h=10, r=3, $fn=8);\n        \n        // Lower arm\n        translate([0, -10, -5])\n        rotate([0, 90, 0])\n        cylinder(h=10, r=2.5, $fn=8);\n        \n        // Hand\n        translate([0, -20, -8])\n        scale([1, 1.5, 0.5])\n        sphere(3, $fn=8);\n        \n        // Claws\n        color(\"dimgray\")\n        for(i = [-1:1]) {\n            translate([i*2, -24, -9])\n            rotate([0, 90, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=5, r1=1.5, r2=0.5, $fn=6);\n        }\n    }\n}\n\n// Leg with webbed feet\nmodule leg() {\n    color(\"darkolivegreen\")\n    union() {\n        // Thigh\n        cylinder(h=12, r=3.5, $fn=8);\n        \n        // Lower leg\n        translate([0, 0, -12])\n        cylinder(h=10, r=2.5, $fn=8);\n        \n        // Foot\n        translate([0, 2, -22])\n        rotate([0, 20, 0])\n        union() {\n            // Main foot\n            scale([1.5, 2, 0.5])\n            sphere(4, $fn=8);\n            \n            // Webbed toes\n            color(\"forestgreen\")\n            for(i = [-1.5, 0, 1.5]) {\n                translate([i, 4, -1])\n                rotate([0, 90, 0])\n                scale([0.8, 0.3, 1])\n                cylinder(h=3, r=1, $fn=6);\n            }\n        }\n    }\n}\n\n// Tail with ridges\nmodule tail() {\n    color(\"darkolivegreen\")\n    difference() {\n        // Main tail\n        hull() {\n            translate([0, 0, 0])\n            sphere(4, $fn=8);\n            translate([0, -20, 0])\n            sphere(2, $fn=8);\n        }\n        \n        // Tail ridges\n        for(i = [0:4:16]) {\n            translate([0, -i, 1])\n            scale([0.8, 0.5, 0.3])\n            sphere(2, $fn=6);\n        }\n    }\n}\n\n// Bat-like wings\nmodule wings() {\n    color(\"forestgreen\")\n    union() {\n        // Left wing\n        translate([-15, 0, 0])\n        difference() {\n            // Wing membrane\n            hull() {\n                translate([0, 0, 0])\n                sphere(1, $fn=8);\n                translate([-10, -5, -5])\n                sphere(1, $fn=8);\n                translate([-15, -10, 0])\n                sphere(1, $fn=8);\n                translate([-10, -5, 5])\n                sphere(1, $fn=8);\n            }\n            \n            // Wing holes\n            translate([-8, -3, 0])\n            scale([1, 1, 0.5])\n            sphere(2, $fn=8);\n            translate([-12, -7, 0])\n            scale([1, 1, 0.5])\n            sphere(1.5, $fn=8);\n        }\n        \n        // Right wing (mirror of left)\n        mirror([1, 0, 0])\n        translate([-15, 0, 0])\n        difference() {\n            hull() {\n                translate([0, 0, 0])\n                sphere(1, $fn=8);\n                translate([-10, -5, -5])\n                sphere(1, $fn=8);\n                translate([-15, -10, 0])\n                sphere(1, $fn=8);\n                translate([-10, -5, 5])\n                sphere(1, $fn=8);\n            }\n            translate([-8, -3, 0])\n            scale([1, 1, 0.5])\n            sphere(2, $fn=8);\n            translate([-12, -7, 0])\n            scale([1, 1, 0.5])\n            sphere(1.5, $fn=8);\n        }\n    }\n}\n\n// Generate the gremlin\ngremlin();",
    "renders": true
  },
  {
    "mythical_creature": "grindylow",
    "openscad_code": "// Grindylow - Water Demon of English Folklore\n// A realistic medium-complexity 3D printable model\n\n$fn=32;  // Smooth curves for realism\n\n// Main creature color - murky greenish-brown\ncolor([0.2,0.3,0.15]) {\n\n// Base height 80mm total\nunion() {\n\n    // Torso - elongated and muscular\n    translate([0,-5,25])\n        scale([1.2,0.8,2])\n        sphere(8);\n\n    // Hunched back ridge\n    translate([0,-2,35])\n        rotate([10,0,0])\n        scale([1.3,0.6,0.8])\n        cylinder(h=15, r1=7, r2=4);\n\n    // Head with elongated snout\n    translate([0,0,42])\n        rotate([-15,0,0])\n        union() {\n            // Main head shape\n            scale([0.8,0.7,1.2])\n            sphere(6);\n            \n            // Elongated snout\n            translate([0,-3,0])\n                rotate([10,0,0])\n                scale([0.6,1.5,0.7])\n                cylinder(h=8, r1=3, r2=2);\n        }\n\n    // Eye sockets (carved out)\n    difference() {\n        translate([0,0,42])\n            rotate([-15,0,0])\n            union() {\n                scale([0.8,0.7,1.2])\n                sphere(6);\n                translate([0,-3,0])\n                    rotate([10,0,0])\n                    scale([0.6,1.5,0.7])\n                    cylinder(h=8, r1=3, r2=2);\n            }\n        \n        // Left eye\n        translate([-2.5,-4,44])\n            rotate([-15,0,10])\n            sphere(1.5);\n        \n        // Right eye\n        translate([2.5,-4,44])\n            rotate([-15,0,-10])\n            sphere(1.5);\n    }\n\n    // Sharp teeth along jawline\n    module tooth(pos) {\n        translate(pos)\n            rotate([90,0,0])\n            cylinder(h=2, r1=0.5, r2=0.1);\n    }\n\n    for(i=[-4:1:4]) {\n        tooth([i,-8,38-i*0.5]);\n    }\n\n    // Long sinewy arms\n    module arm(side) {\n        translate([side*8,0,30])\n            rotate([0,0,side*20])\n            union() {\n                // Upper arm\n                rotate([90,0,0])\n                    cylinder(h=15, r=2.5);\n                \n                // Elbow joint\n                translate([0,0,-15])\n                    sphere(2.5);\n                \n                // Forearm\n                translate([0,0,-15])\n                    rotate([90,side*30,0])\n                    cylinder(h=12, r=2);\n                \n                // Webbed hand with claws\n                translate([0,0,-27])\n                    rotate([0,side*20,0])\n                    union() {\n                        // Palm\n                        scale([1.5,0.5,0.8])\n                        sphere(2);\n                        \n                        // Webbing between fingers\n                        translate([0,0,-1])\n                            rotate([90,0,0])\n                            scale([2,0.1,1])\n                            cylinder(h=4, r=2);\n                        \n                        // Claws\n                        for(j=[-1.5:1.5:1.5]) {\n                            translate([j,0,-2])\n                                rotate([90,0,0])\n                                cylinder(h=3, r1=0.8, r2=0.3);\n                        }\n                    }\n            }\n    }\n\n    arm(1);  // Right arm\n    arm(-1); // Left arm\n\n    // Strong legs for underwater propulsion\n    module leg(side) {\n        translate([side*5,0,5])\n            rotate([0,0,side*15])\n            union() {\n                // Thigh\n                rotate([90,0,0])\n                    cylinder(h=12, r=3);\n                \n                // Knee\n                translate([0,0,-12])\n                    sphere(3);\n                \n                // Calf\n                translate([0,0,-12])\n                    rotate([90,side*20,0])\n                    cylinder(h=10, r=2.5);\n                \n                // Webbed foot\n                translate([0,0,-22])\n                    rotate([0,side*10,0])\n                    union() {\n                        // Foot base\n                        scale([1.2,2,0.6])\n                        sphere(2.5);\n                        \n                        // Webbed toes\n                        translate([0,-2,-1])\n                            rotate([90,0,0])\n                            scale([2.5,0.1,0.8])\n                            cylinder(h=4, r=2);\n                    }\n            }\n    }\n\n    leg(1);  // Right leg\n    leg(-1); // Left leg\n\n    // Long eel-like tail\n    hull() {\n        translate([0,1,5])\n            sphere(4);\n        translate([0,3,-15])\n            sphere(3);\n        translate([0,5,-30])\n            sphere(2);\n        translate([0,6,-45])\n            sphere(1);\n    }\n\n    // Dorsal fin ridge\n    for(i=[0:5:30]) {\n        translate([0,-6,30-i])\n            rotate([0,0,0])\n            scale([0.3,1,0.5])\n            cylinder(h=2, r1=1, r2=0.5);\n    }\n\n    // Gills on neck\n    color([0.15,0.25,0.12]) {\n        for(i=[0:3:9]) {\n            translate([2.5,0,35-i])\n                rotate([0,90,0])\n                scale([0.5,0.3,1])\n                cylinder(h=1, r=1);\n            translate([-2.5,0,35-i])\n                rotate([0,-90,0])\n                scale([0.5,0.3,1])\n                cylinder(h=1, r=1);\n        }\n    }\n}\n\n// Eyes - glowing yellow\ncolor([1,0.8,0]) {\n    translate([-2.5,-4,44])\n        rotate([-15,0,10])\n        sphere(0.8);\n    translate([2.5,-4,44])\n        rotate([-15,0,-10])\n        sphere(0.8);\n}\n\n// Claws and teeth - bone white\ncolor([0.9,0.85,0.8]) {\n    // Teeth highlights\n    for(i=[-4:1:4]) {\n        translate([i,-8.5,38-i*0.5])\n            rotate([90,0,0])\n            cylinder(h=1, r1=0.3, r2=0.05);\n    }\n}\n}",
    "renders": true
  },
  {
    "mythical_creature": "gulon",
    "openscad_code": "// Gulon - mythical Scandinavian creature resembling a cross between a wolf and a lynx\n// Known for insatiable appetite and ability to swell to enormous size\n\n$fn = 32;  // Smooth curves for realistic appearance\n\nmodule gulon_body() {\n    color(\"saddlebrown\")\n    union() {\n        // Main torso - elongated oval shape\n        scale([1.2, 0.8, 0.6])\n        sphere(15);\n        \n        // Chest bulge\n        translate([10, 0, -2])\n        scale([0.8, 0.7, 0.5])\n        sphere(12);\n        \n        // Belly bulge (characteristic swollen appearance)\n        translate([-5, 0, -8])\n        scale([0.9, 1.1, 0.7])\n        sphere(14);\n    }\n}\n\nmodule gulon_head() {\n    color(\"saddlebrown\")\n    union() {\n        // Main head shape - elongated snout\n        translate([18, 0, 5])\n        rotate([0, -10, 0])\n        scale([1.5, 0.8, 0.9])\n        sphere(8);\n        \n        // Snout extension\n        translate([25, 0, 5])\n        scale([2, 0.6, 0.6])\n        sphere(5);\n        \n        // Lower jaw\n        translate([20, 0, 0])\n        rotate([15, 0, 0])\n        scale([1.2, 0.6, 0.4])\n        sphere(6);\n        \n        // Nose\n        color(\"black\")\n        translate([28, 0, 5])\n        sphere(2);\n        \n        // Eyes (glowing yellow characteristic)\n        color(\"goldenrod\")\n        translate([20, 6, 8])\n        sphere(2.5);\n        translate([20, -6, 8])\n        sphere(2.5);\n        \n        // Eye pupils\n        color(\"black\")\n        translate([21, 6, 8])\n        sphere(1);\n        translate([21, -6, 8])\n        sphere(1);\n        \n        // Lynx-like ear tufts\n        color(\"saddlebrown\")\n        translate([15, 5, 12])\n        rotate([0, -20, 10])\n        scale([0.3, 0.3, 1.2])\n        cylinder(h=8, r=3);\n        translate([15, -5, 12])\n        rotate([0, -20, -10])\n        scale([0.3, 0.3, 1.2])\n        cylinder(h=8, r=3);\n    }\n}\n\nmodule gulon_legs() {\n    // Front legs with paws\n    for(side = [-1, 1]) {\n        color(\"saddlebrown\")\n        union() {\n            // Upper leg\n            translate([10, side*8, -8])\n            rotate([0, 0, side*10])\n            scale([0.8, 0.8, 2])\n            cylinder(h=12, r=3);\n            \n            // Lower leg\n            translate([10, side*10, -18])\n            rotate([0, 0, side*5])\n            scale([0.7, 0.7, 1.5])\n            cylinder(h=10, r=2.5);\n            \n            // Paw\n            translate([10, side*11, -27])\n            scale([1.2, 1, 0.6])\n            sphere(4);\n            \n            // Toes\n            for(toe = [-1, 0, 1]) {\n                color(\"black\")\n                translate([10 + toe*2, side*12, -29])\n                sphere(1);\n            }\n        }\n    }\n    \n    // Hind legs (more muscular for jumping)\n    for(side = [-1, 1]) {\n        color(\"saddlebrown\")\n        union() {\n            // Thigh\n            translate([-10, side*6, -5])\n            rotate([0, 0, side*-15])\n            scale([1, 1, 2.2])\n            cylinder(h=14, r=4);\n            \n            // Lower hind leg\n            translate([-10, side*8, -17])\n            rotate([0, 0, side*-10])\n            scale([0.8, 0.8, 1.8])\n            cylinder(h=12, r=3);\n            \n            // Hind paw\n            translate([-10, side*9, -28])\n            scale([1.4, 1.2, 0.7])\n            sphere(5);\n            \n            // Hind toes\n            for(toe = [-1.5, -0.5, 0.5, 1.5]) {\n                color(\"black\")\n                translate([-10 + toe*1.5, side*10, -30])\n                sphere(1.2);\n            }\n        }\n    }\n}\n\nmodule gulon_tail() {\n    color(\"saddlebrown\")\n    union() {\n        // Base of tail\n        translate([-18, 0, -2])\n        rotate([0, 0, 180])\n        scale([1, 1, 0.8])\n        cylinder(h=12, r=4);\n        \n        // Mid tail\n        translate([-25, 0, 2])\n        rotate([0, 20, 180])\n        scale([0.8, 0.8, 0.7])\n        cylinder(h=15, r=3);\n        \n        // Tail tip\n        translate([-35, 0, 5])\n        sphere(3);\n        \n        // Tail tuft (characteristic lynx-like)\n        color(\"darkgoldenrod\")\n        translate([-38, 0, 5])\n        scale([0.5, 1.5, 0.5])\n        sphere(4);\n    }\n}\n\nmodule gulon_fur_pattern() {\n    // Spots characteristic of lynx heritage\n    color(\"darkgoldenrod\")\n    for(i = [1:8]) {\n        rotate([0, 0, i*45])\n        translate([5 + i*2, 0, 8])\n        scale([1, 0.7, 0.2])\n        sphere(1.5);\n    }\n    \n    // Belly stripe\n    color(\"burlywood\")\n    translate([0, 0, -7])\n    scale([2, 0.3, 0.2])\n    sphere(15);\n}\n\n// Main assembly\nunion() {\n    gulon_body();\n    gulon_head();\n    gulon_legs();\n    gulon_tail();\n    gulon_fur_pattern();\n}",
    "renders": true
  },
  {
    "mythical_creature": "harpy",
    "openscad_code": "// Harpy - Mythical Creature with Bird and Human Features\n// Realistic style with medium complexity\n\n$fn = 50;\n\n// Colors\ncolor_skin = \"#D4A373\";\ncolor_feathers = \"#8B4513\";\ncolor_beak = \"#F4A460\";\ncolor_eyes = \"#FF0000\";\ncolor_claws = \"#2F2F2F\";\n\nmodule harpy() {\n    // Main body (humanoid torso)\n    color(color_skin) {\n        // Torso\n        translate([0, 0, 20]) {\n            difference() {\n                cylinder(h = 30, r1 = 12, r2 = 10);\n                // Waist indentation\n                translate([0, 0, 15]) cylinder(h = 10, r1 = 9, r2 = 8);\n            }\n        }\n        \n        // Chest\n        translate([0, 0, 45]) {\n            sphere(10);\n        }\n    }\n    \n    // Wings (bird-like)\n    color(color_feathers) {\n        // Left wing\n        translate([-15, 0, 40]) {\n            rotate([0, 0, 20]) {\n                // Main wing bone\n                cylinder(h = 25, r1 = 3, r2 = 2);\n                \n                // Wing feathers - using loop for primary feathers\n                for(i = [0:4]) {\n                    translate([-i*3 - 5, 0, -i*2]) {\n                        rotate([0, 90 - i*10, 0]) {\n                            scale([1, 0.3, 0.1]) {\n                                sphere(5 + i);\n                            }\n                        }\n                    }\n                }\n                \n                // Secondary feathers\n                for(i = [0:3]) {\n                    translate([-8, i*3 - 6, 0]) {\n                        rotate([0, 45, 0]) {\n                            scale([0.8, 0.2, 0.05]) {\n                                sphere(4);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0]) {\n            translate([-15, 0, 40]) {\n                rotate([0, 0, 20]) {\n                    cylinder(h = 25, r1 = 3, r2 = 2);\n                    \n                    for(i = [0:4]) {\n                        translate([-i*3 - 5, 0, -i*2]) {\n                            rotate([0, 90 - i*10, 0]) {\n                                scale([1, 0.3, 0.1]) {\n                                    sphere(5 + i);\n                                }\n                            }\n                        }\n                    }\n                    \n                    for(i = [0:3]) {\n                        translate([-8, i*3 - 6, 0]) {\n                            rotate([0, 45, 0]) {\n                                scale([0.8, 0.2, 0.05]) {\n                                    sphere(4);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Head with bird features\n    color(color_beak) {\n        // Beak\n        translate([0, -8, 55]) {\n            rotate([0, -20, 0]) {\n                cylinder(h = 12, r1 = 2, r2 = 0);\n            }\n        }\n    }\n    \n    color(color_skin) {\n        // Head\n        translate([0, -5, 55]) {\n            sphere(8);\n        }\n        \n        // Eyes\n        color(color_eyes) {\n            translate([3, -7, 57]) sphere(1.5);\n            translate([-3, -7, 57]) sphere(1.5);\n        }\n    }\n    \n    // Arms (humanoid)\n    color(color_skin) {\n        // Left arm\n        translate([8, 0, 42]) {\n            rotate([0, 0, -30]) {\n                cylinder(h = 15, r = 2);\n                translate([0, -15, 0]) {\n                    rotate([0, 0, -20]) {\n                        cylinder(h = 12, r = 1.5);\n                    }\n                }\n            }\n        }\n        \n        // Right arm\n        translate([-8, 0, 42]) {\n            rotate([0, 0, 30]) {\n                cylinder(h = 15, r = 2);\n                translate([0, -15, 0]) {\n                    rotate([0, 0, 20]) {\n                        cylinder(h = 12, r = 1.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Bird legs with claws\n    color(color_claws) {\n        // Left leg\n        translate([5, 0, 0]) {\n            cylinder(h = 20, r1 = 2, r2 = 1.5);\n            translate([0, 0, -5]) {\n                // Three claws\n                for(i = [-1:1]) {\n                    translate([i*2, 0, 0]) {\n                        rotate([0, -90, 0]) {\n                            cylinder(h = 4, r1 = 1, r2 = 0.5);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Right leg\n        translate([-5, 0, 0]) {\n            cylinder(h = 20, r1 = 2, r2 = 1.5);\n            translate([0, 0, -5]) {\n                for(i = [-1:1]) {\n                    translate([i*2, 0, 0]) {\n                        rotate([0, -90, 0]) {\n                            cylinder(h = 4, r1 = 1, r2 = 0.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Tail feathers\n    color(color_feathers) {\n        translate([0, 8, 15]) {\n            for(i = [0:5]) {\n                rotate([0, 0, i*15 - 37.5]) {\n                    translate([0, i*2, 0]) {\n                        scale([0.3, 1, 0.05]) {\n                            sphere(3 + i*0.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the harpy scaled for 3D printing (80mm tall)\nscale([0.8, 0.8, 0.8]) {\n    harpy();\n}",
    "renders": true
  },
  {
    "mythical_creature": "hippocampus",
    "openscad_code": "// Hippocampus - Mythical sea-horse creature\n// Realistic style, medium complexity, 3D-printable\n\nscale_factor = 0.5;  // Scale to ~80mm length\nwall_thickness = 2;\n\nmodule hippocampus() {\n    // Main body - horse front with fish tail\n    color(\"SeaGreen\") {\n        // Horse head\n        translate([0, 0, 15]) {\n            rotate([0, 0, 15]) {\n                sphere(8);\n                // Muzzle extension\n                translate([7, 0, -2]) {\n                    scale([1.5, 0.8, 0.8]) sphere(6);\n                }\n            }\n        }\n        \n        // Neck\n        translate([0, 0, 8]) {\n            cylinder(h=10, r1=6, r2=5);\n        }\n        \n        // Front body - horse torso\n        translate([0, 0, 0]) {\n            scale([1.2, 0.8, 1]) sphere(10);\n        }\n        \n        // Fish tail - main section\n        translate([-15, 0, 0]) {\n            scale([2, 0.6, 0.4]) sphere(8);\n            \n            // Tail fin segments\n            for(i = [1:3]) {\n                translate([-20 - i*5, 0, 0]) {\n                    rotate([0, 0, -i*10]) {\n                        scale([3-i*0.5, 0.3, 0.1]) sphere(5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Dorsal fin\n    color(\"DarkCyan\") {\n        translate([-10, 0, 8]) {\n            rotate([0, 90, 0]) {\n                linear_extrude(height=0.5) {\n                    polygon(points=[\n                        [0, 0], [3, 5], [6, 0], [3, 3], [0, 0]\n                    ]);\n                }\n            }\n        }\n    }\n    \n    // Pectoral fins\n    module fin(x_pos, y_sign) {\n        translate([x_pos, y_sign*8, 0]) {\n            rotate([0, 0, y_sign*30]) {\n                color(\"Teal\") {\n                    for(j = [0:2]) {\n                        translate([j*2, 0, 0]) {\n                            rotate([0, 0, -j*20]) {\n                                scale([0.3, 0.8, 0.1]) sphere(4);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    fin(-8, 1);\n    fin(-8, -1);\n    \n    // Eyes\n    color(\"Black\") {\n        translate([5, 3, 15]) sphere(1.5);\n        translate([5, -3, 15]) sphere(1.5);\n    }\n    \n    // Mane - horse hair flowing into fins\n    color(\"ForestGreen\") {\n        for(k = [0:4]) {\n            translate([0, 4*cos(k*45), 12 - k*2]) {\n                rotate([0, 0, k*10]) {\n                    scale([0.3, 0.3, 2]) sphere(2);\n                }\n            }\n            translate([0, -4*cos(k*45), 12 - k*2]) {\n                rotate([0, 0, -k*10]) {\n                    scale([0.3, 0.3, 2]) sphere(2);\n                }\n            }\n        }\n    }\n    \n    // Scales pattern\n    color(\"MediumAquamarine\") {\n        for(row = [0:3]) {\n            for(col = [0:5]) {\n                translate([-5 - col*2, 0, row*2 - 2]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=0.5, r=1.5, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Tail fin rays\n    color(\"DarkTurquoise\") {\n        for(angle = [-30:15:30]) {\n            translate([-25, 0, 0]) {\n                rotate([0, 0, angle]) {\n                    cylinder(h=15, r1=0.5, r2=0.2);\n                }\n            }\n        }\n    }\n}\n\n// Create the creature\nscale([scale_factor, scale_factor, scale_factor]) {\n    hippocampus();\n}",
    "renders": true
  },
  {
    "mythical_creature": "huldra",
    "openscad_code": "// Huldra - Scandinavian forest spirit\n// Realistic medium complexity OpenSCAD model\n\n$fn = 50;\nscale_factor = 0.5; // Scales entire model to ~75mm height\n\nmodule huldra() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Colors\n        color(\"burlywood\") {\n            // Head\n            translate([0, 0, 150]) {\n                difference() {\n                    sphere(20);\n                    // Eye sockets\n                    translate([-8, -10, 5]) rotate([0, 20, 0]) \n                        cylinder(h=15, r1=5, r2=0);\n                    translate([8, -10, 5]) rotate([0, -20, 0]) \n                        cylinder(h=15, r1=5, r2=0);\n                }\n                \n                // Eyes\n                color(\"black\") {\n                    translate([-8, -12, 8]) sphere(4);\n                    translate([8, -12, 8]) sphere(4);\n                }\n                \n                // Nose\n                color(\"burlywood\") translate([0, -15, 0]) sphere(3);\n                \n                // Mouth\n                color(\"darkred\") \n                    translate([0, -18, -3]) \n                    rotate([90, 0, 0]) cylinder(h=0.5, r=5);\n                \n                // Ears (slightly pointed)\n                color(\"burlywood\") {\n                    translate([-15, 0, 5]) rotate([90, 0, 30]) \n                        cylinder(h=15, r1=5, r2=2);\n                    translate([15, 0, 5]) rotate([90, 0, -30]) \n                        cylinder(h=15, r1=5, r2=2);\n                }\n            }\n            \n            // Torso\n            translate([0, 0, 100]) \n                cylinder(h=50, r1=25, r2=20);\n            \n            // Arms\n            color(\"burlywood\") {\n                translate([-30, 0, 110]) rotate([0, 0, 30]) \n                    cylinder(h=35, r=7);\n                translate([30, 0, 110]) rotate([0, 0, -30]) \n                    cylinder(h=35, r=7);\n            }\n            \n            // Hands\n            translate([-45, 0, 90]) sphere(8);\n            translate([45, 0, 90]) sphere(8);\n        }\n        \n        // Bark-like skin texture on back\n        color(\"saddlebrown\") {\n            difference() {\n                translate([0, 12, 100]) \n                    cube([40, 5, 50], center=true);\n                \n                // Bark texture holes\n                for(i = [0:2]) {\n                    for(j = [0:4]) {\n                        translate([-15 + i*15, 12, 75 + j*10]) \n                            sphere(3);\n                    }\n                }\n            }\n        }\n        \n        // Hollow back (tree trunk)\n        color(\"saddlebrown\") {\n            translate([0, 15, 100]) \n                difference() {\n                    cube([35, 10, 45], center=true);\n                    translate([0, 5, 0]) \n                        cube([25, 10, 35], center=true);\n                }\n        }\n        \n        // Long flowing hair\n        color(\"goldenrod\") {\n            translate([0, -20, 150]) \n                for(i = [0:20]) {\n                    rotate([0, i*18, 0]) \n                        translate([0, 0, -i*2]) \n                            cylinder(h=80 - i*2, r1=3, r2=1);\n                }\n        }\n        \n        // Dress\n        color(\"forestgreen\") {\n            translate([0, 0, 50]) \n                cylinder(h=50, r1=30, r2=40);\n        }\n        \n        // Legs (hidden under dress)\n        color(\"burlywood\") {\n            translate([-10, 0, 20]) cylinder(h=40, r=8);\n            translate([10, 0, 20]) cylinder(h=40, r=8);\n        }\n        \n        // Cow tail (huldra characteristic)\n        color(\"black\") {\n            translate([0, 25, 30]) \n                rotate([0, 0, 45]) \n                    cylinder(h=30, r=5);\n            translate([0, 35, 35]) \n                rotate([0, 0, 45]) \n                    cylinder(h=25, r=4);\n            translate([0, 45, 40]) \n                rotate([0, 0, 45]) \n                    cylinder(h=20, r=3);\n            translate([0, 55, 45]) \n                sphere(4);\n        }\n        \n        // Feet\n        translate([-10, 0, 0]) {\n            color(\"burlywood\") sphere(10);\n            color(\"black\") \n                translate([0, 0, -8]) \n                    cube([15, 25, 5], center=true);\n        }\n        translate([10, 0, 0]) {\n            color(\"burlywood\") sphere(10);\n            color(\"black\") \n                translate([0, 0, -8]) \n                    cube([15, 25, 5], center=true);\n        }\n    }\n}\n\n// Base for stability\ncolor(\"darkgreen\") \n    translate([0, 0, -15]) \n        cylinder(h=10, r=50);\n\n// Generate the huldra\nhuldra();",
    "renders": true
  },
  {
    "mythical_creature": "ifrit",
    "openscad_code": "// Ifrit - Fire Djinn in Realistic Style - Medium Complexity\n// Size: 80mm tall when printed\n\n// Main parameters\nbody_height = 40;\nbody_width = 25;\nchest_depth = 20;\nhead_size = 18;\nhorn_length = 15;\nwing_span = 60;\ntail_length = 35;\narm_length = 25;\nleg_length = 30;\n\n// Colors\ncolor_ifrit = [0.9, 0.3, 0.1];      // Fiery orange-red\ncolor_eyes = [1, 0.8, 0];          // Glowing yellow\ncolor_fire = [1, 0.4, 0];         // Brighter fire\n\n// Main module\nmodule ifrit() {\n    union() {\n        // Body core\n        translate([0, 0, leg_length]) {\n            color(color_ifrit) {\n                // Torso\n                difference() {\n                    // Main body\n                    scale([body_width/20, chest_depth/20, body_height/20])\n                        sphere(d=40);\n                    \n                    // Chest indentation\n                    translate([0, chest_depth/2, 0])\n                        cube([body_width*0.6, chest_depth*0.3, body_height*0.4], center=true);\n                }\n                \n                // Abdomen\n                translate([0, 0, -body_height/3])\n                    cylinder(h=body_height/2, r1=body_width/2.5, r2=body_width/3, center=true);\n            }\n        }\n        \n        // Head\n        translate([0, 0, leg_length + body_height + head_size/2]) {\n            color(color_ifrit) {\n                // Main head\n                sphere(d=head_size);\n                \n                // Jaw\n                translate([0, head_size/3, -head_size/3])\n                    cube([head_size*0.8, head_size*0.6, head_size*0.5], center=true);\n                \n                // Horns - curved back\n                for(side = [-1, 1]) {\n                    translate([side*head_size/2, 0, head_size/3])\n                        rotate([0, side*20, 0])\n                        rotate([30, 0, 0])\n                        cylinder(h=horn_length, r1=3, r2=1);\n                }\n                \n                // Eyes - glowing orbs\n                for(side = [-1, 1]) {\n                    color(color_eyes)\n                    translate([side*head_size/3, head_size/2.5, head_size/4])\n                        sphere(d=4);\n                }\n            }\n        }\n        \n        // Arms\n        for(side = [-1, 1]) {\n            translate([side*body_width/2, 0, leg_length + body_height*0.7]) {\n                rotate([0, 0, side*30])\n                rotate([90, 0, 0])\n                color(color_ifrit) {\n                    // Upper arm\n                    cylinder(h=arm_length/2, r=4);\n                    \n                    // Lower arm\n                    translate([0, 0, arm_length/2 + 2])\n                        cylinder(h=arm_length/2, r=3);\n                    \n                    // Clawed hand\n                    translate([0, 0, arm_length + 2])\n                        sphere(d=6);\n                }\n            }\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([side*body_width/3, 0, leg_length/2]) {\n                color(color_ifrit) {\n                    // Thigh\n                    cylinder(h=leg_length/2, r1=6, r2=5);\n                    \n                    // Lower leg\n                    translate([0, 0, leg_length/2 + 2])\n                        cylinder(h=leg_length/2, r1=5, r2=4);\n                    \n                    // Hoof-like foot\n                    translate([0, 0, leg_length + 2])\n                        scale([1.5, 3, 1])\n                        sphere(d=8);\n                }\n            }\n        }\n        \n        // Wings - bat-like membrane\n        for(side = [-1, 1]) {\n            translate([side*body_width/2, -chest_depth/3, leg_length + body_height*0.8]) {\n                rotate([0, 0, side*45])\n                rotate([0, side*20, 0])\n                color(color_ifrit) {\n                    // Wing bones\n                    for(i = [0:2]) {\n                        rotate([0, 0, i*30*side])\n                        translate([0, 0, -i*5])\n                        cylinder(h=wing_span/3, r=2);\n                    }\n                    \n                    // Wing membrane\n                    translate([0, 0, -5])\n                    scale([1, wing_span/40, wing_span/40])\n                    sphere(d=wing_span/2);\n                }\n            }\n        }\n        \n        // Tail - segmented and fiery\n        translate([0, -chest_depth/2, leg_length/2]) {\n            color(color_ifrit) {\n                // Tail segments getting smaller\n                for(i = [0:4]) {\n                    translate([0, -i*tail_length/5, -i*2])\n                        cylinder(h=tail_length/5, r1=6-i, r2=5-i);\n                }\n                \n                // Fiery tip\n                color(color_fire)\n                translate([0, -tail_length-5, -8])\n                    sphere(d=8);\n            }\n        }\n        \n        // Fire aura around body\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n            color(color_fire, 0.3)\n            translate([body_width/1.2, 0, leg_length + body_height/2])\n                cylinder(h=body_height/2, r1=3, r2=1);\n        }\n    }\n}\n\n// Render the ifrit\nifrit();",
    "renders": true
  },
  {
    "mythical_creature": "imp",
    "openscad_code": "// Imp Creature - Realistic Style\n// Height: ~75mm when printed\n\n// Color definitions\ncolor_skin = [0.2, 0.4, 0.1];      // Muted green-grey skin\ncolor_wings = [0.15, 0.15, 0.15];  // Dark leathery wings\ncolor_horns = [0.4, 0.3, 0.2];     // Brown horns\ncolor_eyes = [1, 0, 0];            // Glowing red eyes\ncolor_claws = [0.2, 0.2, 0.2];     // Dark claws\n\n// Main module\nmodule imp_creature() {\n    // Body\n    color(color_skin)\n    union() {\n        // Torso\n        translate([0, 0, 25])\n        scale([1.2, 1, 1.5])\n        sphere(d=20, $fn=16);\n        \n        // Abdomen\n        translate([0, 0, 15])\n        scale([0.8, 0.7, 1])\n        sphere(d=18, $fn=16);\n        \n        // Head\n        translate([0, 0, 45])\n        scale([0.8, 0.7, 1])\n        sphere(d=15, $fn=16);\n        \n        // Snout\n        translate([0, 7, 43])\n        rotate([15, 0, 0])\n        scale([0.5, 0.6, 0.4])\n        cylinder(h=8, d1=8, d2=6, $fn=8);\n        \n        // Arms\n        // Left arm\n        translate([-12, 0, 35])\n        rotate([0, -20, 10])\n        union() {\n            // Upper arm\n            cylinder(h=12, d=6, $fn=8);\n            // Forearm\n            translate([0, 0, -12])\n            rotate([15, 0, 0])\n            cylinder(h=10, d=5, $fn=8);\n            // Hand\n            translate([0, 3, -20])\n            sphere(d=6, $fn=8);\n        }\n        \n        // Right arm\n        mirror([1, 0, 0])\n        translate([-12, 0, 35])\n        rotate([0, -20, 10])\n        union() {\n            // Upper arm\n            cylinder(h=12, d=6, $fn=8);\n            // Forearm\n            translate([0, 0, -12])\n            rotate([15, 0, 0])\n            cylinder(h=10, d=5, $fn=8);\n            // Hand\n            translate([0, 3, -20])\n            sphere(d=6, $fn=8);\n        }\n        \n        // Legs\n        // Left leg\n        translate([-5, 0, 15])\n        rotate([0, 10, 0])\n        union() {\n            // Thigh\n            cylinder(h=15, d=7, $fn=8);\n            // Lower leg\n            translate([0, 0, -15])\n            rotate([0, -15, 0])\n            cylinder(h=12, d=6, $fn=8);\n            // Foot\n            translate([0, 4, -26])\n            scale([1.2, 2, 0.6])\n            sphere(d=8, $fn=8);\n        }\n        \n        // Right leg\n        mirror([1, 0, 0])\n        translate([-5, 0, 15])\n        rotate([0, 10, 0])\n        union() {\n            // Thigh\n            cylinder(h=15, d=7, $fn=8);\n            // Lower leg\n            translate([0, 0, -15])\n            rotate([0, -15, 0])\n            cylinder(h=12, d=6, $fn=8);\n            // Foot\n            translate([0, 4, -26])\n            scale([1.2, 2, 0.6])\n            sphere(d=8, $fn=8);\n        }\n        \n        // Tail\n        translate([0, -12, 20])\n        rotate([30, 0, 0])\n        union() {\n            for(i = [0:3]) {\n                translate([0, -i*3, -i*2])\n                scale([1 - i*0.15, 1 - i*0.15, 1])\n                sphere(d=8 - i*2, $fn=12);\n            }\n        }\n        \n        // Wings\n        color(color_wings)\n        union() {\n            // Left wing\n            translate([-15, 0, 40])\n            rotate([0, 0, -20])\n            difference() {\n                // Main wing membrane\n                scale([2, 1, 0.1])\n                sphere(d=25, $fn=16);\n                // Wing holes\n                for(i = [1:3]) {\n                    translate([i*5 - 5, -5 + i*2, 0])\n                    scale([0.5, 0.3, 1])\n                    cylinder(h=2, d=3, $fn=6);\n                }\n            }\n            \n            // Wing bones\n            for(i = [0:2]) {\n                rotate([0, 0, -i*30])\n                translate([-5 - i*5, 0, 0])\n                scale([0.2, 0.2, 1])\n                cylinder(h=20, d=2, $fn=6);\n            }\n        }\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0])\n        color(color_wings)\n        union() {\n            translate([-15, 0, 40])\n            rotate([0, 0, -20])\n            difference() {\n                scale([2, 1, 0.1])\n                sphere(d=25, $fn=16);\n                for(i = [1:3]) {\n                    translate([i*5 - 5, -5 + i*2, 0])\n                    scale([0.5, 0.3, 1])\n                    cylinder(h=2, d=3, $fn=6);\n                }\n            }\n            \n            for(i = [0:2]) {\n                rotate([0, 0, -i*30])\n                translate([-5 - i*5, 0, 0])\n                scale([0.2, 0.2, 1])\n                cylinder(h=20, d=2, $fn=6);\n            }\n        }\n    }\n    \n    // Horns\n    color(color_horns)\n    union() {\n        // Left horn\n        translate([-3, 0, 52])\n        rotate([0, -15, -10])\n        cylinder(h=8, d1=3, d2=1, $fn=6);\n        \n        // Right horn\n        translate([3, 0, 52])\n        rotate([0, -15, 10])\n        cylinder(h=8, d1=3, d2=1, $fn=6);\n    }\n    \n    // Eyes\n    color(color_eyes)\n    union() {\n        // Left eye\n        translate([-3, 5, 48])\n        sphere(d=2, $fn=8);\n        \n        // Right eye\n        translate([3, 5, 48])\n        sphere(d=2, $fn=8);\n    }\n    \n    // Claws on hands and feet\n    color(color_claws)\n    union() {\n        // Hand claws\n        for(side = [-1, 1]) {\n            mirror([side, 0, 0])\n            translate([12, 0, 15])\n            for(i = [0:2]) {\n                rotate([0, 0, -30 + i*30])\n                translate([0, 3, -20])\n                rotate([0, -20, 0])\n                cylinder(h=3, d1=1, d2=0.5, $fn=4);\n            }\n        }\n        \n        // Foot claws\n        for(side = [-1, 1]) {\n            mirror([side, 0, 0])\n            translate([5, 2, 12])\n            for(i = [-1, 0, 1]) {\n                rotate([0, 0, i*20])\n                translate([0, 4, -26])\n                cylinder(h=2, d1=1.5, d2=0.5, $fn=4);\n            }\n        }\n    }\n}\n\n// Generate the creature\nimp_creature();",
    "renders": true
  },
  {
    "mythical_creature": "jackalope",
    "openscad_code": "// Jackalope - Mythical Rabbit with Antlers\n// Realistic style, medium complexity\n\n// Overall dimensions: ~80mm length\n\nmodule jackalope() {\n    color(\"BurlyWood\") {\n        // Main body - slightly elongated rabbit body\n        union() {\n            // Torso\n            translate([0, 0, 15])\n                scale([1.2, 0.8, 1])\n                sphere(r=15, $fn=32);\n            \n            // Chest\n            translate([-10, 0, 10])\n                scale([0.8, 0.6, 0.8])\n                sphere(r=12, $fn=32);\n            \n            // Rump\n            translate([18, 0, 12])\n                scale([0.9, 0.8, 0.9])\n                sphere(r=14, $fn=32);\n        }\n        \n        // Head\n        translate([-20, 0, 25])\n            scale([0.9, 0.8, 1.1])\n            sphere(r=12, $fn=32);\n        \n        // Snout\n        translate([-30, 0, 22])\n            scale([0.7, 0.6, 0.6])\n            sphere(r=8, $fn=32);\n    }\n    \n    // Ears\n    color(\"Tan\") {\n        // Left ear\n        translate([-20, -8, 32])\n            rotate([0, -20, 0])\n            scale([0.4, 0.1, 1.2])\n            cylinder(h=20, r1=5, r2=2, $fn=8);\n        \n        // Right ear\n        translate([-20, 8, 32])\n            rotate([0, -20, 0])\n            scale([0.4, 0.1, 1.2])\n            cylinder(h=20, r1=5, r2=2, $fn=8);\n    }\n    \n    // Antlers - deer-like branching\n    color(\"SaddleBrown\") {\n        // Left antler\n        translate([-15, -12, 35]) {\n            // Main branch\n            rotate([0, -30, 0])\n                cylinder(h=18, r1=2, r2=1, $fn=8);\n            \n            // Branch 1\n            translate([0, 0, 12])\n                rotate([0, 10, -30])\n                cylinder(h=10, r1=1.5, r2=0.8, $fn=6);\n            \n            // Branch 2\n            translate([0, 0, 6])\n                rotate([0, -10, 30])\n                cylinder(h=12, r1=1.5, r2=0.8, $fn=6);\n        }\n        \n        // Right antler\n        translate([-15, 12, 35]) {\n            mirror([0,1,0]) {\n                // Main branch\n                rotate([0, -30, 0])\n                    cylinder(h=18, r1=2, r2=1, $fn=8);\n                \n                // Branch 1\n                translate([0, 0, 12])\n                    rotate([0, 10, -30])\n                    cylinder(h=10, r1=1.5, r2=0.8, $fn=6);\n                \n                // Branch 2\n                translate([0, 0, 6])\n                    rotate([0, -10, 30])\n                    cylinder(h=12, r1=1.5, r2=0.8, $fn=6);\n            }\n        }\n    }\n    \n    // Legs\n    color(\"BurlyWood\") {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([-15, side*8, 8])\n                rotate([0, 10, 0])\n                cylinder(h=20, r=3, $fn=8);\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([15, side*8, 8])\n                rotate([0, -10, 0])\n                cylinder(h=20, r=3.5, $fn=8);\n        }\n    }\n    \n    // Tail - cotton tail\n    color(\"White\") {\n        translate([28, 0, 18])\n            sphere(r=5, $fn=16);\n    }\n    \n    // Eyes\n    color(\"Black\") {\n        // Left eye\n        translate([-25, -5, 27])\n            sphere(r=1.5, $fn=8);\n        \n        // Right eye\n        translate([-25, 5, 27])\n            sphere(r=1.5, $fn=8);\n    }\n    \n    // Nose\n    color(\"Black\") {\n        translate([-33, 0, 22])\n            sphere(r=2, $fn=8);\n    }\n    \n    // Whiskers\n    color(\"DimGray\") {\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle])\n                translate([-30, 0, 21])\n                    rotate([0, 90, 0])\n                    cylinder(h=8, r=0.3, $fn=4);\n        }\n    }\n    \n    // Magical elements - glowing runes on antlers\n    color(\"Gold\") {\n        // Left antler runes\n        translate([-14, -12, 42]) {\n            rotate([0, -30, 0])\n                for(i = [0:2]) {\n                    translate([0, 0, i*4])\n                        sphere(r=0.5, $fn=6);\n                }\n        }\n        \n        // Right antler runes\n        translate([-14, 12, 42]) {\n            rotate([0, -30, 0])\n                for(i = [0:2]) {\n                    translate([0, 0, i*4])\n                        sphere(r=0.5, $fn=6);\n                }\n        }\n    }\n}\n\n// Render the jackalope\njackalope();",
    "renders": true
  },
  {
    "mythical_creature": "jinn",
    "openscad_code": "// Jinn - Realistic Style (Medium Complexity)\n// A 3D printable representation of a mythical jinn with smoke-like lower body\n\n// Color definitions\n$fn = 50;\n\n// Main module\nmodule jinn() {\n    // Body proportions\n    scale(0.8) {\n        union() {\n            // Upper torso in humanoid form\n            color(\"darkgoldenrod\") {\n                torso();\n                \n                // Arms\n                left_arm();\n                right_arm();\n                \n                // Head with mystical features\n                head();\n                \n                // Mystical smoke base (lower body)\n                smoke_base();\n                \n                // Decorative elements\n                mystical_details();\n            }\n        }\n    }\n}\n\n// Torso module\nmodule torso() {\n    translate([0, 0, 15]) {\n        difference() {\n            // Main torso\n            scale([1.2, 0.8, 1.5]) \n                sphere(8);\n            \n            // Neck hole\n            translate([0, 0, 5])\n                cylinder(h=10, r=3, center=true);\n        }\n        \n        // Chest details\n        translate([0, -6, 15])\n            rotate([90, 0, 0])\n                cylinder(h=3, r1=4, r2=6);\n    }\n}\n\n// Arms\nmodule left_arm() {\n    translate([-10, 0, 20]) {\n        rotate([0, 20, -30]) {\n            // Upper arm\n            cylinder(h=12, r=2.5);\n            \n            // Lower arm\n            translate([0, 0, 12])\n                rotate([0, 45, 0])\n                    cylinder(h=10, r=2);\n                    \n            // Hand\n            translate([0, 0, 22])\n                sphere(2.5);\n        }\n    }\n}\n\nmodule right_arm() {\n    mirror([1, 0, 0]) \n        left_arm();\n}\n\n// Head with mystical features\nmodule head() {\n    translate([0, 0, 32]) {\n        // Main head\n        scale([0.8, 0.9, 1.1])\n            sphere(6);\n        \n        // Mystical horns\n        translate([3, 0, 4])\n            rotate([30, 0, 30])\n                cylinder(h=8, r1=1.5, r2=0.5);\n                \n        translate([-3, 0, 4])\n            rotate([30, 0, -30])\n                cylinder(h=8, r1=1.5, r2=0.5);\n        \n        // Eyes (glowing)\n        color(\"red\") {\n            translate([2.5, -5, 2])\n                sphere(1);\n            translate([-2.5, -5, 2])\n                sphere(1);\n        }\n        \n        // Beard\n        color(\"saddlebrown\") {\n            translate([0, 0, -4])\n                scale([0.6, 0.7, 1.2])\n                    sphere(3);\n        }\n    }\n}\n\n// Smoke-like lower body\nmodule smoke_base() {\n    color(\"darkslateblue\") {\n        for(i = [0:15:180]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, 5 - i/10]) {\n                    scale([1 + i/50, 1 + i/50, 0.5])\n                        cylinder(h=3, r=8 - i/20, center=true);\n                }\n            }\n        }\n        \n        // Base swirl\n        translate([0, 0, -5])\n            scale([1.2, 1.2, 0.3])\n                cylinder(h=5, r=12);\n    }\n}\n\n// Mystical details and patterns\nmodule mystical_details() {\n    // Arm bands\n    color(\"gold\") {\n        translate([-10, 0, 22])\n            rotate([0, 90, 0])\n                cylinder(h=1.5, r=3);\n                \n        translate([10, 0, 22])\n            rotate([0, 90, 0])\n                cylinder(h=1.5, r=3);\n    }\n    \n    // Chest amulet\n    color(\"gold\") {\n        translate([0, -6.5, 15])\n            scale([1.5, 1.5, 0.5])\n                sphere(2);\n    }\n    \n    // Floating orbs around\n    color(\"cyan\") {\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([15, 0, 25])\n                    sphere(1.5);\n        }\n    }\n}\n\n// Generate the jinn\njinn();",
    "renders": true
  },
  {
    "mythical_creature": "jorogumo",
    "openscad_code": "// Jorogumo - Yokai Spider Woman\n// Medium complexity realistic representation for 3D printing\n\n$fn = 50;\n\n// Main body module\nmodule jorogumo() {\n    // Woman torso\n    color(\"beige\")\n    union() {\n        // Head\n        translate([0, 0, 45])\n            sphere(d=12);\n        \n        // Neck\n        translate([0, 0, 38])\n            cylinder(h=5, d1=7, d2=9);\n        \n        // Torso\n        translate([0, 0, 25])\n            scale([1, 0.8, 1.5])\n                sphere(d=20);\n        \n        // Arms\n        for(side = [-1, 1]) {\n            // Upper arm\n            translate([side*10, -5, 33])\n                rotate([0, side*15, 0])\n                    cylinder(h=12, d=4);\n            \n            // Lower arm\n            translate([side*15, -8, 28])\n                rotate([0, side*25, 0])\n                    cylinder(h=10, d=3.5);\n            \n            // Hands\n            translate([side*19, -11, 25])\n                sphere(d=4);\n        }\n        \n        // Chest detail\n        translate([0, 0, 30])\n            scale([0.6, 0.4, 0.6])\n                sphere(d=16);\n    }\n    \n    // Spider abdomen\n    color(\"darkred\")\n    translate([0, 0, 8])\n        rotate([90, 0, 0])\n            scale([1, 1.2, 0.8])\n                cylinder(h1=15, h2=0, r1=12, r2=8);\n    \n    // Spider legs\n    color(\"darkred\")\n    for(i = [0:7]) {\n        angle = i * 45;\n        side = (i % 2 == 0) ? 1 : -1;\n        length = (i % 2 == 0) ? 20 : 18;\n        \n        translate([0, 0, 12])\n            rotate([0, 0, angle])\n                translate([12, 0, 0])\n                    rotate([0, side*30, 0])\n                        cylinder(h=length, d=3);\n    }\n    \n    // Face features\n    color(\"black\")\n    union() {\n        // Eyes\n        for(x = [-3, 3]) {\n            translate([x, 5, 47])\n                sphere(d=2);\n        }\n        \n        // Mouth\n        translate([0, 8, 44])\n            scale([1, 0.3, 0.3])\n                sphere(d=4);\n    }\n    \n    // Hair\n    color(\"black\")\n    union() {\n        // Main hair\n        translate([0, -5, 48])\n            scale([1.2, 1, 1.5])\n                sphere(d=12);\n        \n        // Hair strands\n        for(i = [0:7]) {\n            angle = i * 45;\n            translate([0, -5, 46])\n                rotate([0, angle, 0])\n                    translate([6, 0, 0])\n                        cylinder(h=8, d=1.5);\n        }\n    }\n    \n    // Web pattern on abdomen\n    color(\"white\", 0.5)\n    for(i = [0:3]) {\n        radius = 3 + i*2;\n        translate([0, 0, 12])\n            rotate([90, 0, 0])\n                cylinder(h=0.5, r=radius, $fn=6);\n    }\n    \n    // Spider eyes (additional eyes)\n    color(\"red\", 0.8)\n    for(i = [0:5]) {\n        angle = i * 60;\n        translate([0, 0, 12])\n            rotate([0, 0, angle])\n                translate([9, 0, 0])\n                    sphere(d=1.5);\n    }\n}\n\n// Create the model centered on base\ntranslate([0, 0, 0])\n    jorogumo();",
    "renders": true
  },
  {
    "mythical_creature": "karkadann",
    "openscad_code": "// Karkadann - Persian Unicorn\n// Overall dimensions: 80mm long, 40mm high, 30mm wide\n\n$fn = 32;\n\n// Main body\nmodule karkadann() {\n    color(\"saddlebrown\") {\n        // Torso - thick barrel shape\n        translate([0, 0, 20]) \n            scale([1.2, 0.8, 1]) \n            sphere(15);\n\n        // Abdomen\n        translate([0, -12, 12]) \n            scale([1.1, 0.7, 0.8]) \n            sphere(12);\n\n        // Neck\n        translate([0, 20, 28]) \n            rotate([0, 20, 0]) \n            scale([0.6, 0.6, 1.2]) \n            cylinder(20, 8, 5);\n\n        // Head\n        translate([0, 36, 35]) \n            scale([0.8, 1.2, 0.9]) \n            sphere(10);\n\n        // Snout\n        translate([0, 46, 33]) \n            scale([0.6, 1, 0.5]) \n            sphere(8);\n    }\n\n    // Legs - thick and stocky\n    module leg(x, z) {\n        translate([x, 0, z]) {\n            // Upper leg\n            rotate([0, -10, 0]) \n                cylinder(20, 6, 5);\n            // Lower leg\n            translate([0, 0, 18]) \n                rotate([0, 10, 0]) \n                cylinder(15, 5, 4);\n            // Hoof\n            translate([0, 0, 32]) \n                scale([1.2, 1, 0.5]) \n                cylinder(5, 4, 4);\n        }\n    }\n\n    color(\"chocolate\") {\n        leg(-12, 5);    // Front left\n        leg(12, 5);     // Front right\n        leg(-10, -15);  // Rear left\n        leg(10, -15);   // Rear right\n    }\n\n    // Single horn - spiraled\n    color(\"ivory\") {\n        translate([0, 43, 45]) \n            rotate([0, 0, 0]) {\n                for(i = [0:5:90]) {\n                    rotate([0, 0, i*4]) \n                        translate([0, 0, i/3]) \n                            cylinder(2, 5-i/25, 5-i/25);\n                }\n            }\n    }\n\n    // Ears - small and pointed\n    color(\"saddlebrown\") {\n        translate([-5, 40, 45]) \n            rotate([0, -20, -30]) \n            scale([0.3, 1, 1.5]) \n            sphere(4);\n        translate([5, 40, 45]) \n            rotate([0, -20, 30]) \n            scale([0.3, 1, 1.5]) \n            sphere(4);\n    }\n\n    // Tail - thick with tuft\n    color(\"saddlebrown\") {\n        translate([0, -28, 22]) \n            rotate([30, 0, 0]) {\n                cylinder(25, 4, 2);\n                translate([0, 0, 25]) \n                    scale([1.5, 1, 1.5]) \n                    sphere(6);\n            }\n    }\n\n    // Scales pattern along back\n    color(\"darkgoldenrod\") {\n        for(i = [-10:5:10]) {\n            for(j = [-5:5:30]) {\n                translate([i, j, 34-j/3]) \n                    scale([1, 1, 0.3]) \n                    sphere(3);\n            }\n        }\n    }\n}\n\n// Create the creature\nkarkadann();",
    "renders": true
  },
  {
    "mythical_creature": "kelpie",
    "openscad_code": "// Kelpie - Scottish water horse mythical creature\n// Designed for 3D printing with realistic features\n\n$fn = 32;\n\nmodule kelpie() {\n    color(\"darkgreen\") {\n        // Main body\n        translate([0, 0, 10]) {\n            difference() {\n                scale([1.5, 0.8, 1]) sphere(r = 12);\n                translate([0, 0, -12]) cube([30, 20, 12], center = true);\n            }\n        }\n        \n        // Neck\n        translate([0, 15, 18]) {\n            rotate([0, 30, 0]) {\n                cylinder(h = 20, r1 = 8, r2 = 5);\n            }\n        }\n        \n        // Head\n        translate([0, 25, 25]) {\n            rotate([0, 30, 0]) {\n                scale([1.2, 0.7, 0.8]) sphere(r = 8);\n            }\n        }\n        \n        // Snout\n        translate([0, 32, 25]) {\n            rotate([0, 30, 0]) {\n                scale([1.5, 0.6, 0.5]) cylinder(h = 10, r1 = 4, r2 = 2);\n            }\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 5, 22, 30]) {\n                rotate([0, 0, side * 20]) {\n                    scale([0.3, 1, 1.5]) sphere(r = 3);\n                }\n            }\n        }\n        \n        // Eyes\n        color(\"red\") {\n            for(side = [-1, 1]) {\n                translate([side * 4, 27, 27]) {\n                    sphere(r = 1.5);\n                }\n            }\n        }\n        \n        // Nostrils\n        color(\"black\") {\n            for(side = [-1, 1]) {\n                translate([side * 2, 35, 25]) {\n                    sphere(r = 1);\n                }\n            }\n        }\n        \n        // Mane - seaweed-like\n        color(\"seagreen\") {\n            for(i = [0:5:20]) {\n                translate([sin(i) * 3, 25 - i/2, 28 - i/4]) {\n                    rotate([90, 0, 0]) {\n                        scale([0.3, 0.3, 1]) cylinder(h = 5 + i/2, r = 1);\n                    }\n                }\n            }\n        }\n        \n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side * 8, 5, 5]) {\n                cylinder(h = 15, r = 3);\n                translate([0, 0, -7]) {\n                    scale([1.5, 2, 1]) sphere(r = 3);\n                }\n            }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([side * 8, -15, 5]) {\n                cylinder(h = 15, r = 3);\n                translate([0, 0, -7]) {\n                    scale([1.5, 2, 1]) sphere(r = 3);\n                }\n            }\n        }\n        \n        // Tail - water plant like\n        color(\"darkgreen\") {\n            translate([0, -20, 10]) {\n                for(i = [0:10:40]) {\n                    rotate([0, 0, sin(i/5) * 20]) {\n                        translate([0, -i/2, sin(i/3) * 2]) {\n                            scale([0.8 - i/80, 0.8 - i/80, 1]) sphere(r = 3);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Webbed hooves\n        color(\"darkgreen\") {\n            for(side = [-1, 1]) {\n                // Front\n                translate([side * 8, 5, -9]) {\n                    for(angle = [0:60:300]) {\n                        rotate([0, 0, angle]) {\n                            translate([2, 0, 0]) {\n                                scale([2, 0.5, 0.2]) sphere(r = 1);\n                            }\n                        }\n                    }\n                }\n                \n                // Back\n                translate([side * 8, -15, -9]) {\n                    for(angle = [0:60:300]) {\n                        rotate([0, 0, angle]) {\n                            translate([2, 0, 0]) {\n                                scale([2, 0.5, 0.2]) sphere(r = 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Water droplets effect\n        color(\"lightblue\") {\n            for(i = [0:10:100]) {\n                translate([\n                    sin(i) * 15,\n                    cos(i) * 10,\n                    5 + sin(i * 2) * 5\n                ]) {\n                    sphere(r = 0.5);\n                }\n            }\n        }\n    }\n}\n\n// Base platform for stability\ncolor(\"darkblue\") {\n    translate([0, 0, -10]) {\n        cube([40, 60, 2], center = true);\n    }\n}\n\n// Main assembly\nkelpie();",
    "renders": true
  },
  {
    "mythical_creature": "ketea",
    "openscad_code": "// Ketea Mythical Sea Serpent - Realistic Medium Complexity\n// Size: ~75mm long, 3D printable with minimal supports\n\n$fn = 32;\n\n// Main body module\nmodule ketea_body() {\n    // Serpentine body segments\n    color(\"darkslateblue\") \n    union() {\n        // Head\n        translate([-35, 0, 0])\n        rotate([0, 0, 90])\n        scale([1.2, 0.8, 1])\n        sphere(8);\n        \n        // Neck\n        translate([-25, 0, 0])\n        rotate([0, 0, 90])\n        cylinder(h=12, r1=7, r2=5);\n        \n        // Body segments with decreasing size\n        for(i = [0:5]) {\n            translate([-12 + i*8, 0, 0])\n            rotate([0, 0, i*15])\n            scale([1 - i*0.1, 0.8 - i*0.05, 1 - i*0.05])\n            cylinder(h=10, r1=4.5 - i*0.3, r2=4 - i*0.3);\n        }\n        \n        // Tail tip\n        translate([35, 0, 0])\n        rotate([0, 0, 75])\n        cylinder(h=15, r1=2, r2=0.5);\n    }\n}\n\n// Dorsal fins\nmodule dorsal_fins() {\n    color(\"midnightblue\")\n    for(i = [1:4]) {\n        translate([-20 + i*10, 0, 4 - i*0.5])\n        rotate([0, 90 - i*5, 0])\n        scale([1, 1, 1.2])\n        cube([8, 0.5, 6], center=true);\n    }\n}\n\n// Side fins\nmodule side_fins() {\n    color(\"royalblue\")\n    union() {\n        // Left side\n        translate([-15, -4, 0])\n        rotate([0, 0, -30])\n        scale([1.5, 1, 0.3])\n        sphere(3);\n        \n        translate([-5, -4, 0])\n        rotate([0, 0, -45])\n        scale([1.3, 0.8, 0.3])\n        sphere(2.5);\n        \n        // Right side\n        translate([-15, 4, 0])\n        mirror([0, 1, 0])\n        rotate([0, 0, -30])\n        scale([1.5, 1, 0.3])\n        sphere(3);\n        \n        translate([-5, 4, 0])\n        mirror([0, 1, 0])\n        rotate([0, 0, -45])\n        scale([1.3, 0.8, 0.3])\n        sphere(2.5);\n    }\n}\n\n// Scales pattern\nmodule scales() {\n    color(\"steelblue\")\n    difference() {\n        ketea_body();\n        // Create scale indentations\n        for(i = [0:8]) {\n            translate([-30 + i*8, 0, 3])\n            rotate([0, 90, 0])\n            cylinder(h=0.5, r=0.8);\n        }\n    }\n}\n\n// Head details\nmodule head_details() {\n    color(\"darkblue\") {\n        // Eyes\n        translate([-38, 3.5, 2])\n        sphere(1.5);\n        translate([-38, -3.5, 2])\n        sphere(1.5);\n        \n        // Horns\n        translate([-35, 0, 7])\n        rotate([0, 15, 0])\n        cylinder(h=8, r1=1.5, r2=0.5);\n        \n        // Snout ridge\n        translate([-42, 0, 0])\n        rotate([0, 90, 0])\n        scale([0.5, 0.5, 0.3])\n        sphere(5);\n    }\n}\n\n// Tail fin\nmodule tail_fin() {\n    color(\"darkslateblue\")\n    translate([40, 0, 0])\n    rotate([0, 0, 90])\n    union() {\n        // Upper lobe\n        translate([0, 0, 2])\n        rotate([0, 0, 30])\n        cube([8, 0.5, 4], center=true);\n        \n        // Lower lobe\n        translate([0, 0, -2])\n        rotate([0, 0, -30])\n        cube([8, 0.5, 4], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    scales();\n    dorsal_fins();\n    side_fins();\n    head_details();\n    tail_fin();\n}",
    "renders": true
  },
  {
    "mythical_creature": "kiirin",
    "openscad_code": "// Kiirin - Mythical Asian unicorn-like creature\n// 3D printable model with realistic features\n\n// Main body dimensions\nbody_length = 60;\nbody_height = 35;\nbody_width = 25;\n\n// Colors\ncolor_body = [0.8, 0.9, 0.7];   // Jade green\ncolor_mane = [0.9, 0.8, 0.6];   // Golden tan\ncolor_hooves = [0.3, 0.3, 0.3]; // Dark gray\ncolor_horn = [0.9, 0.9, 0.8];   // Pearl white\ncolor_scales = [0.6, 0.8, 0.7]; // Seafoam green\ncolor_eyes = [0.8, 0.2, 0.2];   // Ruby red\n\n// Main body\nmodule kiirin_body() {\n    color(color_body)\n    union() {\n        // Torso - elongated ellipsoid\n        scale([1.3, 1, 0.8])\n        sphere(d=body_width);\n        \n        // Chest extension\n        translate([-body_length/4, 0, 0])\n        scale([1.2, 0.9, 0.7])\n        sphere(d=body_width);\n        \n        // Hindquarters\n        translate([body_length/3, 0, -2])\n        scale([1, 1.1, 0.9])\n        sphere(d=body_width);\n    }\n}\n\n// Leg module with hoof\nmodule leg(height, offset_x, offset_y, angle=0) {\n    color(color_body)\n    translate([offset_x, offset_y, -body_height/2])\n    rotate([0, angle, 0])\n    union() {\n        // Upper leg\n        cylinder(h=height*2/3, d1=8, d2=6, $fn=8);\n        \n        // Lower leg\n        translate([0, 0, -height*2/3])\n        cylinder(h=height/3, d1=6, d2=5, $fn=8);\n        \n        // Hoof\n        color(color_hooves)\n        translate([0, 0, -height])\n        cylinder(h=4, d1=5, d2=7, $fn=8);\n    }\n}\n\n// Mane and tail hair strands\nmodule hair_strand(length, thickness) {\n    color(color_mane)\n    rotate([90, 0, 0])\n    cylinder(h=length, d=thickness, $fn=6);\n}\n\n// Scales pattern\nmodule scales() {\n    color(color_scales)\n    for(i=[-20:5:20]) {\n        for(j=[-10:5:10]) {\n            if(i*i + j*j < 400) {\n                translate([i, j, body_height/2 + 2])\n                scale([1, 0.7, 0.3])\n                sphere(d=3);\n            }\n        }\n    }\n}\n\n// Head with horn\nmodule kiirin_head() {\n    translate([-body_length/2 - 10, 0, body_height/2 + 5])\n    union() {\n        // Head base\n        color(color_body)\n        scale([1.2, 0.8, 1])\n        sphere(d=15);\n        \n        // Snout\n        translate([-7, 0, -2])\n        scale([1.5, 0.6, 0.7])\n        sphere(d=10);\n        \n        // Eyes\n        color(color_eyes)\n        translate([-2, 6, 3])\n        sphere(d=3);\n        translate([-2, -6, 3])\n        sphere(d=3);\n        \n        // Horn (spiral)\n        color(color_horn)\n        for(i=[0:15:360]) {\n            rotate([0, 0, i])\n            translate([0, 0, i/20])\n            rotate([90, 0, 0])\n            cylinder(h=20, d1=3, d2=0.5, $fn=6);\n        }\n        \n        // Mane on neck\n        for(i=[0:10:30]) {\n            rotate([0, i-15, 0])\n            translate([0, 7, -2])\n            hair_strand(10 + i/2, 1.5);\n            translate([0, -7, -2])\n            hair_strand(10 + i/2, 1.5);\n        }\n    }\n}\n\n// Tail\nmodule kiirin_tail() {\n    color(color_mane)\n    translate([body_length/2 + 5, 0, -5])\n    rotate([0, 20, 0])\n    union() {\n        // Tail base\n        color(color_body)\n        rotate([0, 90, 0])\n        cylinder(h=15, d1=8, d2=5, $fn=8);\n        \n        // Hair strands\n        for(i=[0:15:45]) {\n            rotate([0, 0, i])\n            translate([15, 0, 0])\n            hair_strand(20 - i/3, 2);\n        }\n    }\n}\n\n// Final assembly\nunion() {\n    // Center the model\n    translate([0, 0, body_height/2 + 10])\n    \n    // Main body parts\n    kiirin_body();\n    \n    // Legs\n    leg(body_height/2, -body_length/4, body_width/3, 10);\n    leg(body_height/2, -body_length/4, -body_width/3, -10);\n    leg(body_height/2, body_length/4, body_width/3, -10);\n    leg(body_height/2, body_length/4, -body_width/3, 10);\n    \n    // Head and neck\n    kiirin_head();\n    \n    // Neck connection\n    color(color_body)\n    translate([-body_length/2 - 5, 0, body_height/2])\n    scale([1, 0.7, 0.6])\n    sphere(d=12);\n    \n    // Tail\n    kiirin_tail();\n    \n    // Scales on back\n    scales();\n    \n    // Beard\n    color(color_mane)\n    translate([-body_length/2 - 12, 0, -5])\n    for(i=[0:20:40]) {\n        rotate([i-20, 0, 0])\n        translate([0, 0, -i/2])\n        hair_strand(8, 1);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "kirin",
    "openscad_code": "// Kirin (Qilin) in realistic style - medium complexity\n// Scaled for 3D printing: ~70mm length\n\n// Colors\ncolor_body = \"gold\";\ncolor_horns = \"ivory\";\ncolor_scales = \"green\";\ncolor_mane = \"red\";\ncolor_tail = \"firebrick\";\n\n// Main body\nmodule body() {\n    color(color_body)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n            scale([1.5, 0.8, 1])\n            sphere(12, $fn=32);\n        \n        // Chest\n        translate([15, 0, 10])\n            scale([1.2, 1, 1.2])\n            sphere(8, $fn=32);\n        \n        // Abdomen\n        translate([-10, 0, 12])\n            scale([1, 0.9, 1])\n            sphere(10, $fn=32);\n    }\n}\n\n// Head with deer-like features\nmodule head() {\n    color(color_body)\n    union() {\n        // Main head\n        translate([22, 0, 25])\n            scale([1, 0.7, 0.8])\n            sphere(10, $fn=32);\n        \n        // Snout\n        translate([30, 0, 23])\n            scale([1.5, 0.6, 0.6])\n            sphere(6, $fn=32);\n        \n        // Nose\n        translate([33, 0, 22.5])\n            sphere(2, $fn=16);\n    }\n}\n\n// Single horn\nmodule horn() {\n    color(color_horns) {\n        rotate([0, -10, 0])\n        cylinder(h1=12, h2=0, r1=2, r2=0.5, $fn=16);\n    }\n}\n\n// Antler-like horns\nmodule horns() {\n    translate([25, 0, 32])\n    union() {\n        horn();\n        rotate([0, 0, 20])\n        translate([0, 2, 0])\n        horn();\n        rotate([0, 0, -20])\n        translate([0, -2, 0])\n        horn();\n    }\n}\n\n// Scaled pattern on body\nmodule scales() {\n    color(color_scales)\n    for(i = [0:5]) {\n        for(j = [0:3]) {\n            translate([8 - i*4, -6 + j*4, 15 + sin(i+j)*2])\n                scale([1, 0.7, 0.3])\n                sphere(2, $fn=6);\n        }\n    }\n}\n\n// Mane along neck and back\nmodule mane() {\n    color(color_mane)\n    for(i = [0:10]) {\n        translate([20 - i*3, 0, 25 + sin(i*30)*2])\n            rotate([0, 90, 90])\n            scale([0.3, 1, 0.3])\n            cylinder(h=8, r=1.5, $fn=8);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(color_tail)\n    union() {\n        // Tail base\n        translate([-22, 0, 18])\n            rotate([0, 0, -30])\n            cylinder(h=15, r1=3, r2=1, $fn=16);\n        \n        // Tail tuft\n        translate([-32, -5, 15])\n            sphere(5, $fn=16);\n    }\n}\n\n// Leg\nmodule leg(x, z, angle) {\n    color(color_body)\n    union() {\n        // Upper leg\n        translate([x, 0, z])\n            rotate([0, angle, 0])\n            cylinder(h=15, r=3, $fn=16);\n        \n        // Lower leg\n        translate([x + sin(angle)*15, 0, z - cos(angle)*15])\n            rotate([0, angle, 0])\n            cylinder(h=12, r=2, $fn=16);\n        \n        // Hoof\n        translate([x + sin(angle)*27, 0, z - cos(angle)*27])\n            scale([1, 0.8, 0.5])\n            sphere(2.5, $fn=16);\n    }\n}\n\n// All four legs\nmodule legs() {\n    union() {\n        // Front legs\n        leg(10, 10, 30);\n        leg(10, -10, -30);\n        // Rear legs\n        leg(-10, 8, -30);\n        leg(-10, -8, 30);\n    }\n}\n\n// Wings\nmodule wing(side) {\n    color(color_body)\n    translate([0, side*8, 20])\n    rotate([0, 0, side*10])\n    union() {\n        // Main wing structure\n        for(i = [0:5]) {\n            translate([5 - i*2, side*i*2, -i])\n                rotate([0, 0, side*i*5])\n                scale([0.3, 1, 0.1])\n                cylinder(h=8, r=2, $fn=8);\n        }\n        \n        // Wing membrane\n        translate([0, side*5, 15])\n            rotate([90, 0, side*20])\n            scale([1, 0.5, 0.05])\n            sphere(8, $fn=16);\n    }\n}\n\n// Cloud base for floating effect\nmodule cloud() {\n    color(\"white\", 0.7)\n    union() {\n        for(i = [0:3]) {\n            translate([10 - i*8, 0, -2])\n                sphere(3 + i, $fn=16);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    cloud();\n    body();\n    head();\n    horns();\n    scales();\n    mane();\n    tail();\n    legs();\n    wing(1);   // Right wing\n    wing(-1);  // Left wing\n}",
    "renders": true
  },
  {
    "mythical_creature": "kishi",
    "openscad_code": "// Kishi - Two-faced demon from Angolan mythology\n// Front: handsome human face, Back: hyena face\n// 3D printable at 80mm height\n\nscale_factor = 1; // Scale to 80mm height\n$fn = 32; // Smooth curves for realistic appearance\n\nmodule kishi_head() {\n    // Human face (front)\n    color(\"burlywood\") union() {\n        // Human head sphere\n        sphere(d=25 * scale_factor);\n        \n        // Nose\n        translate([0, 12, 2] * scale_factor)\n            scale([1, 2, 1.5] * scale_factor)\n            sphere(d=6 * scale_factor);\n        \n        // Eyes\n        for(x = [-6, 6]) {\n            translate([x, 8, 5] * scale_factor)\n                color(\"black\")\n                sphere(d=3 * scale_factor);\n        }\n        \n        // Eyebrows\n        for(x = [-6, 6]) {\n            translate([x, 11, 6] * scale_factor)\n                color(\"saddlebrown\")\n                scale([3, 0.5, 0.5] * scale_factor)\n                cube([4, 1, 1] * scale_factor, center=true);\n        }\n    }\n    \n    // Hyena face (back)\n    color(\"darkgoldenrod\") union() {\n        // Snout\n        translate([0, -12, 0] * scale_factor)\n            rotate([0, 90, 0])\n            cylinder(h=15 * scale_factor, r1=8 * scale_factor, r2=5 * scale_factor);\n        \n        // Ears\n        for(x = [-8, 8]) {\n            translate([x, -8, 8] * scale_factor)\n                rotate([0, 15, x > 0 ? 30 : -30])\n                scale([1, 2, 3] * scale_factor)\n                sphere(d=6 * scale_factor);\n        }\n        \n        // Hyena eyes (glowing)\n        for(x = [-5, 5]) {\n            translate([x, -10, 5] * scale_factor)\n                color(\"darkred\")\n                sphere(d=2.5 * scale_factor);\n        }\n    }\n}\n\nmodule kishi_body() {\n    // Torso\n    color(\"darkolivegreen\") union() {\n        // Main body - tapered for muscular look\n        translate([0, 0, -20] * scale_factor)\n            scale([1.2, 0.8, 1.5] * scale_factor)\n            cylinder(h=30 * scale_factor, r1=12 * scale_factor, r2=8 * scale_factor);\n        \n        // Chest armor plates\n        for(i = [0:2]) {\n            translate([0, 5, -15 - i*8] * scale_factor)\n                rotate([0, 90, 0])\n                scale([1.3, 0.3, 1] * scale_factor)\n                cylinder(h=20 * scale_factor, r=8 * scale_factor);\n        }\n    }\n}\n\nmodule kishi_limbs() {\n    // Arms\n    color(\"burlywood\") union() {\n        for(side = [-1, 1]) {\n            // Upper arm\n            translate([side * 15, 5, -10] * scale_factor)\n                rotate([0, 0, side * 15])\n                cylinder(h=20 * scale_factor, r=4 * scale_factor);\n            \n            // Lower arm\n            translate([side * 25, 0, -25] * scale_factor)\n                rotate([0, 0, side * 30])\n                cylinder(h=15 * scale_factor, r=3 * scale_factor);\n            \n            // Clawed hands\n            translate([side * 30, -5, -35] * scale_factor)\n                sphere(d=6 * scale_factor);\n        }\n    }\n    \n    // Legs\n    color(\"darkslategray\") union() {\n        for(side = [-1, 1]) {\n            // Thigh\n            translate([side * 8, -5, -35] * scale_factor)\n                cylinder(h=25 * scale_factor, r=5 * scale_factor);\n            \n            // Lower leg\n            translate([side * 8, -5, -55] * scale_factor)\n                cylinder(h=20 * scale_factor, r=4 * scale_factor);\n            \n            // Hoof-like feet\n            translate([side * 8, -5, -70] * scale_factor)\n                scale([1.2, 2, 0.5] * scale_factor)\n                sphere(d=8 * scale_factor);\n        }\n    }\n}\n\nmodule kishi_features() {\n    // Horns - curved back\n    color(\"saddlebrown\") union() {\n        for(side = [-1, 1]) {\n            translate([side * 8, 10, 10] * scale_factor)\n                rotate([30, 0, side * 30])\n                scale([0.5, 0.5, 1] * scale_factor)\n                cylinder(h=15 * scale_factor, r1=3 * scale_factor, r2=1 * scale_factor);\n        }\n    }\n    \n    // Mane - strip of hair down back\n    color(\"black\") union() {\n        for(i = [0:5]) {\n            translate([0, -2 - i*3, 10 - i*2] * scale_factor)\n                scale([0.5, 0.5, 1 + i*0.2] * scale_factor)\n                sphere(d=3 * scale_factor);\n        }\n    }\n    \n    // Tail\n    color(\"darkgoldenrod\")\n    translate([0, 0, -35] * scale_factor)\n    rotate([30, 0, 0])\n    cylinder(h=25 * scale_factor, r1=3 * scale_factor, r2=1 * scale_factor);\n}\n\n// Assembly\ntranslate([0, 0, 20] * scale_factor)\n    union() {\n        kishi_head();\n        kishi_body();\n        kishi_limbs();\n        kishi_features();\n    }",
    "renders": true
  },
  {
    "mythical_creature": "kitsune",
    "openscad_code": "// Kitsune - Nine-tailed fox spirit\n// Body scale: 1 unit = 2mm\n// Overall height ~60mm\n\n$fn = 32;  // Smooth curves\n\n// Main colors\nfur_color = \"BurlyWood\";\naccent_color = \"Goldenrod\";\neye_color = \"DarkOrange\";\ntail_color = \"Cornsilk\";\n\n// Body module\nmodule body() {\n    color(fur_color)\n    union() {\n        // Torso - elongated sphere\n        translate([0, 0, 12])\n            scale([1.2, 0.8, 1.4])\n            sphere(8);\n        \n        // Chest\n        translate([0, 0, 5])\n            scale([1.0, 0.7, 1.2])\n            sphere(7);\n        \n        // Abdomen\n        translate([0, 0, -2])\n            scale([0.9, 0.8, 1.0])\n            sphere(6);\n    }\n}\n\n// Head module\nmodule head() {\n    color(fur_color)\n    union() {\n        // Main head shape\n        translate([0, 0, 25])\n            scale([0.9, 0.7, 1.0])\n            sphere(7);\n        \n        // Snout\n        translate([0, 8, 23])\n            scale([1.2, 0.8, 0.6])\n            rotate([15, 0, 0])\n            sphere(5);\n        \n        // Ears\n        translate([-4, 0, 30])\n            rotate([30, 0, -30])\n            scale([0.3, 0.1, 0.8])\n            cylinder(8, 2, 1);\n        \n        mirror([1, 0, 0])\n            translate([-4, 0, 30])\n            rotate([30, 0, -30])\n            scale([0.3, 0.1, 0.8])\n            cylinder(8, 2, 1);\n        \n        // Eyes\n        color(eye_color)\n        translate([-3, 5, 25])\n            sphere(1.5);\n        \n        mirror([1, 0, 0])\n            translate([-3, 5, 25])\n                sphere(1.5);\n    }\n}\n\n// Legs module\nmodule legs() {\n    color(fur_color)\n    union() {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side * 5, 0, 8])\n                rotate([0, 15 * side, 0])\n                scale([0.5, 0.5, 1.2])\n                cylinder(10, 2, 1.5);\n                \n            translate([side * 5, 0, -2])\n                sphere(2.5);\n        }\n        \n        // Hind legs\n        for(side = [-1, 1]) {\n            translate([side * 4, -6, 5])\n                rotate([0, -10 * side, 0])\n                scale([0.6, 0.6, 1.3])\n                cylinder(8, 2.5, 2);\n                \n            translate([side * 4, -6, -3])\n                sphere(3);\n        }\n    }\n}\n\n// Tails module - nine flowing tails\nmodule tails() {\n    color(tail_color)\n    for(i = [0:8]) {\n        angle = i * 40;\n        rotate([0, 0, angle])\n        translate([0, -12, 8])\n            rotate([10, -5, 0])\n            scale([0.8, 0.3, 1.5])\n            sphere(6);\n        \n        rotate([0, 0, angle])\n        translate([0, -18, 6])\n            rotate([20, -10, 0])\n            scale([0.6, 0.2, 1.2])\n            sphere(5);\n        \n        rotate([0, 0, angle])\n        translate([0, -24, 4])\n            rotate([30, -15, 0])\n            scale([0.4, 0.15, 1.0])\n            sphere(4);\n    }\n}\n\n// Magical flame orbs between tails\nmodule orbs() {\n    color(\"Gold\")\n    for(i = [0:3]) {\n        angle = i * 90 + 20;\n        rotate([0, 0, angle])\n        translate([0, -16, 12])\n            sphere(2);\n    }\n}\n\n// Assemble the kitsune\nunion() {\n    body();\n    head();\n    legs();\n    tails();\n    orbs();\n}\n\n// Base platform for printing stability\ntranslate([0, 0, -5])\n    color(\"DimGray\")\n    difference() {\n        cylinder(2, 25, 25);\n        cylinder(1.9, 20, 20);\n    }",
    "renders": true
  },
  {
    "mythical_creature": "knucker",
    "openscad_code": "// Knucker - Mythical water dragon from English folklore\n// Realistic style, medium complexity\n\n// Overall scale\nscale_factor = 0.3;\n\n// Colors\n$fn = 30;\n\nmodule knucker_body() {\n    // Main body segments\n    color(\"darkgreen\") {\n        // Thorax\n        translate([0, 0, 10]) \n            scale([1.2, 0.8, 0.8])\n            sphere(8);\n        \n        // Abdomen segments\n        for(i = [1:4]) {\n            translate([-i * 6, 0, 10 - i * 1.5])\n                scale([1 - i * 0.15, 0.7 - i * 0.1, 0.6 - i * 0.08])\n                sphere(7 - i);\n        }\n    }\n}\n\nmodule knucker_head() {\n    color(\"forestgreen\") {\n        union() {\n            // Snout\n            translate([15, 0, 10])\n                rotate([0, -10, 0])\n                scale([2, 0.8, 0.8])\n                cylinder(h = 12, r1 = 6, r2 = 4);\n            \n            // Head\n            translate([8, 0, 12])\n                scale([1.2, 1, 1.1])\n                sphere(7);\n            \n            // Eye ridges\n            translate([10, 4, 15])\n                rotate([0, -20, 0])\n                scale([0.3, 1.2, 0.5])\n                cylinder(h = 3, r = 2);\n            \n            translate([10, -4, 15])\n                rotate([0, -20, 0])\n                scale([0.3, 1.2, 0.5])\n                cylinder(h = 3, r = 2);\n            \n            // Eyes\n            color(\"red\") {\n                translate([11, 3.5, 15])\n                    sphere(1.5);\n                translate([11, -3.5, 15])\n                    sphere(1.5);\n            }\n            \n            // Nostrils\n            color(\"black\") {\n                translate([19, 1.5, 11])\n                    rotate([0, -30, 0])\n                    cylinder(h = 2, r = 0.8);\n                translate([19, -1.5, 11])\n                    rotate([0, -30, 0])\n                    cylinder(h = 2, r = 0.8);\n            }\n        }\n    }\n}\n\nmodule knucker_wings() {\n    color(\"emerald\") {\n        // Right wing\n        translate([5, 8, 18]) {\n            rotate([0, 0, 30])\n            scale([0.8, 1, 0.1])\n            difference() {\n                // Wing membrane\n                scale([1, 2.5, 1])\n                sphere(8);\n                \n                // Wing holes\n                for(i = [0:2]) {\n                    translate([i * 3 - 3, 8 - i * 2, 0])\n                        scale([0.8, 0.6, 1])\n                        sphere(3);\n                }\n            }\n            \n            // Wing fingers\n            for(i = [0:3]) {\n                rotate([0, 0, i * 15 - 15])\n                translate([0, 0, -1])\n                scale([0.3, 1, 0.3])\n                cylinder(h = 20, r = 1);\n            }\n        }\n        \n        // Left wing (mirrored)\n        mirror([0, 1, 0])\n        translate([5, 8, 18]) {\n            rotate([0, 0, 30])\n            scale([0.8, 1, 0.1])\n            difference() {\n                scale([1, 2.5, 1])\n                sphere(8);\n                \n                for(i = [0:2]) {\n                    translate([i * 3 - 3, 8 - i * 2, 0])\n                        scale([0.8, 0.6, 1])\n                        sphere(3);\n                }\n            }\n            \n            for(i = [0:3]) {\n                rotate([0, 0, i * 15 - 15])\n                translate([0, 0, -1])\n                scale([0.3, 1, 0.3])\n                cylinder(h = 20, r = 1);\n            }\n        }\n    }\n}\n\nmodule knucker_tail() {\n    color(\"darkgreen\") {\n        // Tail segments\n        for(i = [0:5]) {\n            translate([-20 - i * 8, 0, 8 - i * 1.2])\n                rotate([0, 0, sin(i * 15) * 5])\n                scale([0.8 - i * 0.1, 0.8 - i * 0.1, 0.8 - i * 0.1])\n                sphere(6 - i * 0.5);\n        }\n        \n        // Tail fin\n        translate([-60, 0, 5])\n            rotate([0, 0, 90])\n            scale([0.1, 2, 1])\n            difference() {\n                cylinder(h = 15, r1 = 8, r2 = 0);\n                \n                for(i = [1:3]) {\n                    translate([0, i * 4 - 8, 0])\n                        cylinder(h = 15, r = 2);\n                }\n            }\n    }\n}\n\nmodule knucker_legs() {\n    color(\"darkgreen\") {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([5, side * 6, 5]) {\n                // Upper leg\n                rotate([0, side * 20, 0])\n                cylinder(h = 8, r = 2);\n                \n                // Lower leg\n                translate([0, 0, -8])\n                    rotate([0, side * 30, 0])\n                    cylinder(h = 6, r = 1.5);\n                \n                // Webbed foot\n                translate([0, side * 2, -13])\n                    scale([1.5, 0.2, 1])\n                    sphere(3);\n            }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([-15, side * 6, 3]) {\n                rotate([0, side * 20, 0])\n                cylinder(h = 10, r = 2);\n                \n                translate([0, 0, -10])\n                    rotate([0, side * 30, 0])\n                    cylinder(h = 8, r = 1.5);\n                \n                translate([0, side * 2, -17])\n                    scale([1.8, 0.2, 1.2])\n                    sphere(3);\n            }\n        }\n    }\n}\n\nmodule knucker_scales() {\n    color(\"limegreen\") {\n        // Dorsal scales\n        for(i = [0:8]) {\n            translate([-5 - i * 6, 0, 15 + sin(i * 45) * 2])\n                rotate([0, 0, i * 15])\n                scale([0.5, 2, 0.1])\n                cylinder(h = 3, r = 2);\n        }\n        \n        // Side scales\n        for(side = [-1, 1]) {\n            for(i = [0:4]) {\n                for(j = [0:3]) {\n                    translate([-10 - i * 8, side * (7 + j * 2), 10 - j])\n                        rotate([0, 90, 0])\n                        scale([0.3, 0.3, 0.1])\n                        cylinder(h = 2, r = 1.5);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the knucker\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        knucker_body();\n        knucker_head();\n        knucker_wings();\n        knucker_tail();\n        knucker_legs();\n        knucker_scales();\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "korrigan",
    "openscad_code": "// Korrigan (Breton dwarf-gnome) - realistic style, medium complexity\n// Overall height ~70mm, designed for FDM printing\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\n// Main body module\nmodule korrigan() {\n    // Skin color\n    color(\"darkolivegreen\")\n    union() {\n        // Head\n        translate([0,0,55]) \n        rotate([0,0,0]) \n        sphere(r=8, $fn=32);\n        \n        // Torso\n        translate([0,0,35]) \n        scale([1.2,0.8,1.5]) \n        sphere(r=10, $fn=32);\n        \n        // Legs\n        for(side=[-1,1])\n            translate([side*5,0,18]) \n            scale([0.4,0.4,1.2]) \n            sphere(r=8, $fn=16);\n        \n        // Arms\n        for(side=[-1,1]) {\n            translate([side*12,0,45]) \n            rotate([0,side*30,0]) \n            scale([0.3,0.3,1]) \n            cylinder(h=15, r=3, $fn=16);\n        }\n        \n        // Hat - traditional pointed red cap\n        color(\"crimson\")\n        translate([0,0,65]) \n        cylinder(h1=12, r1=8, r2=1, $fn=32);\n        \n        // Beard\n        color(\"saddlebrown\")\n        translate([0,-8,50]) \n        scale([0.8,0.3,1.2]) \n        sphere(r=8, $fn=32);\n        \n        // Large nose\n        color(\"darkolivegreen\") \n        translate([0,-7,54]) \n        scale([0.8,1.5,0.8]) \n        sphere(r=3, $fn=16);\n        \n        // Ears - slightly pointed\n        for(side=[-1,1]) {\n            color(\"darkolivegreen\") \n            translate([side*9,0,58]) \n            rotate([0,0,side*30]) \n            scale([0.5,0.2,1]) \n            cylinder(h=6, r=3, $fn=16);\n        }\n        \n        // Feet - simple shoes\n        color(\"dimgray\")\n        for(side=[-1,1]) {\n            translate([side*5,-2,8]) \n            scale([1.2,2,0.6]) \n            cube([6,4,4], center=true);\n        }\n        \n        // Belt\n        color(\"saddlebrown\")\n        translate([0,0,40]) \n        scale([1.3,0.3,0.3]) \n        cube([20,10,5], center=true);\n        \n        // Belt buckle\n        color(\"gold\")\n        translate([0,4.5,40]) \n        scale([0.4,0.4,0.4]) \n        cube([6,2,6], center=true);\n        \n        // Hands\n        color(\"darkolivegreen\")\n        for(side=[-1,1]) {\n            translate([side*15,0,38]) \n            sphere(r=2.5, $fn=16);\n        }\n        \n        // Eyes\n        color(\"ivory\")\n        for(side=[-1,1]) {\n            translate([side*3,-6.5,57]) \n            sphere(r=1.5, $fn=16);\n            color(\"black\") \n            translate([side*3,-7.5,57.5]) \n            sphere(r=0.8, $fn=16);\n        }\n        \n        // Magical pouch\n        color(\"saddlebrown\") \n        translate([8,-2,38]) \n        scale([0.8,0.4,0.8]) \n        sphere(r=4, $fn=16);\n        \n        // Staff\n        color(\"peru\") \n        translate([-12,-10,30]) \n        rotate([15,0,20]) \n        cylinder(h=40, r=1.5, $fn=16);\n        \n        // Staff crystal\n        color(\"deepskyblue\") \n        translate([-18,-15,62]) \n        sphere(r=3, $fn=20);\n    }\n}\n\n// Generate the creature\nkorrigan();",
    "renders": true
  },
  {
    "mythical_creature": "krampus",
    "openscad_code": "// Krampus - Mythical Alpine Christmas Demon\n// Features: Horns, goat legs, chains, sack, and basket\n\n// Color definitions\n$fn = 32;\n\n// Main module\nmodule krampus() {\n    // Body\n    color(\"saddlebrown\") {\n        union() {\n            // Torso\n            translate([0, 0, 20]) \n                scale([1.2, 1, 2]) \n                    sphere(10);\n            \n            // Chest/belly\n            translate([0, 0, 10]) \n                scale([1.5, 1.2, 1.5]) \n                    sphere(8);\n        }\n    }\n    \n    // Head\n    color(\"burlywood\") {\n        translate([0, 0, 45]) {\n            // Skull base\n            scale([0.9, 0.8, 1.2]) \n                sphere(8);\n            \n            // Snout\n            translate([0, -5, -2]) \n                scale([0.6, 1, 0.8]) \n                    sphere(5);\n        }\n    }\n    \n    // Horns - curved goat horns\n    module horn() {\n        color(\"dimgray\") {\n            for(i = [0:10]) {\n                translate([sin(i*15)*3, -cos(i*15)*3, i*1.5]) \n                    rotate([0, 0, i*15]) \n                        scale([1-i*0.05, 1-i*0.05, 1]) \n                            cylinder(h=2, r1=2-i*0.15, r2=1.8-i*0.15);\n            }\n        }\n    }\n    \n    // Left horn\n    translate([-8, 0, 50]) \n        rotate([0, 20, -30]) \n            horn();\n    \n    // Right horn\n    translate([8, 0, 50]) \n        rotate([0, 20, 30]) \n            mirror([1,0,0]) \n                horn();\n    \n    // Arms\n    module arm(side) {\n        color(\"saddlebrown\") {\n            // Upper arm\n            translate([side*12, 0, 35]) \n                rotate([0, 0, side*-20]) \n                    cylinder(h=15, r=3);\n            \n            // Lower arm\n            translate([side*20, -5, 30]) \n                rotate([0, 0, side*-40]) \n                    cylinder(h=12, r=2.5);\n            \n            // Hand with claws\n            translate([side*27, -8, 27]) {\n                sphere(3);\n                for(j = [0:4]) {\n                    translate([sin(j*72)*2.5, -cos(j*72)*2.5, 0]) \n                        rotate([90, 0, j*72]) \n                            cylinder(h=3, r1=1, r2=0.5);\n                }\n            }\n        }\n    }\n    \n    arm(1);  // Right arm\n    arm(-1); // Left arm\n    \n    // Goat legs\n    module leg(side) {\n        color(\"dimgray\") {\n            // Upper leg (goat thigh)\n            translate([side*8, 0, 15]) \n                rotate([0, 0, side*10]) \n                    cylinder(h=12, r=4);\n            \n            // Lower leg (goat)\n            translate([side*10, -2, 8]) \n                rotate([0, 0, side*15]) \n                    cylinder(h=10, r=3);\n            \n            // Goat hoof\n            translate([side*12, -3, 2]) {\n                difference() {\n                    scale([1.2, 0.8, 1]) \n                        sphere(4);\n                    translate([0, 0, 2]) \n                        cube([5, 4, 5], center=true);\n                }\n            }\n        }\n    }\n    \n    leg(1);  // Right leg\n    leg(-1); // Left leg\n    \n    // Chains\n    color(\"darkgoldenrod\") {\n        for(i = [0:3]) {\n            translate([0, -i*3-5, 30-i*5]) \n                rotate([0, 0, i*30]) \n                    torus(3.5, 0.5);\n        }\n    }\n    \n    // Basket on back\n    color(\"saddlebrown\") {\n        translate([0, -15, 35]) {\n            difference() {\n                scale([1.5, 1, 0.8]) \n                    sphere(8);\n                translate([0, 0, 7]) \n                    cube([25, 20, 5], center=true);\n            }\n            // Basket handle\n            translate([0, 0, 8]) \n                rotate_extrude(angle=180) \n                    translate([10, 0, 0]) \n                        circle(r=1);\n        }\n    }\n    \n    // Tail\n    color(\"saddlebrown\") {\n        for(t = [0:8]) {\n            translate([sin(t*15)*3, cos(t*15)*3, 15-t]) \n                rotate([0, 0, t*15]) \n                    scale([1-t*0.08, 1-t*0.08, 1]) \n                        sphere(2);\n        }\n    }\n    \n    // Tongue\n    color(\"firebrick\") {\n        translate([0, -8, 40]) \n            scale([0.3, 2, 0.1]) \n                sphere(5);\n    }\n    \n    // Eyes - glowing red\n    color(\"red\") {\n        translate([-3, -5, 48]) \n            sphere(1.5);\n        translate([3, -5, 48]) \n            sphere(1.5);\n    }\n}\n\n// Helper for torus (chain links)\nmodule torus(r, r_section) {\n    rotate_extrude() \n        translate([r, 0, 0]) \n            circle(r=r_section);\n}\n\n// Scale to reasonable 3D print size (75mm height)\nscale(0.75) \n    krampus();",
    "renders": true
  },
  {
    "mythical_creature": "lampad",
    "openscad_code": "// OpenSCAD Lampad - Nymph of the Underworld\n// Medium complexity realistic representation\n\n// Overall dimensions: 80mm height, 65mm width, 50mm depth\n$fn = 48;\n\n// Main module\nmodule lampad() {\n    color(\"darkslateblue\") {\n        // Body - flowing robes with underworld aesthetic\n        union() {\n            // Upper torso and head\n            translate([0, 0, 60]) {\n                rotate([0, 0, 0]) {\n                    // Head\n                    color(\"indigo\") \n                    sphere(8);\n                    \n                    // Hair - flowing ethereal strands\n                    for(i = [0:30:359]) {\n                        rotate([0, 0, i]) \n                        translate([0, 9, 2]) \n                        rotate([90, 0, 0]) \n                        cylinder(h = 15, r1 = 1.5, r2 = 0.5);\n                    }\n                    \n                    // Horns - small curved underworld horns\n                    translate([4.5, 3, 0]) \n                    rotate([0, 30, 15]) \n                    cylinder(h = 12, r1 = 2, r2 = 1);\n                    \n                    translate([-4.5, 3, 0]) \n                    rotate([0, -30, -15]) \n                    cylinder(h = 12, r1 = 2, r2 = 1);\n                }\n            }\n            \n            // Torso with robes\n            translate([0, 0, 35]) {\n                // Main torso\n                color(\"darkslateblue\") {\n                    difference() {\n                        cylinder(h = 25, r1 = 12, r2 = 10);\n                        // Hollow center for printability\n                        cylinder(h = 25, r1 = 8, r2 = 6);\n                    }\n                }\n                \n                // Robe sleeves\n                translate([15, 0, 10]) \n                rotate([0, 0, 30]) \n                cylinder(h = 20, r1 = 4, r2 = 2);\n                \n                translate([-15, 0, 10]) \n                rotate([0, 0, -30]) \n                cylinder(h = 20, r1 = 4, r2 = 2);\n            }\n            \n            // Lower body - flowing dress\n            translate([0, 0, 17.5]) {\n                color(\"midnightblue\") {\n                    difference() {\n                        cylinder(h = 35, r1 = 15, r2 = 20);\n                        cylinder(h = 35, r1 = 12, r2 = 16);\n                    }\n                }\n                \n                // Dress folds\n                for(i = [0:45:359]) {\n                    rotate([0, 0, i]) {\n                        translate([17, 0, 17.5]) \n                        cube([3, 1, 30]);\n                    }\n                }\n            }\n            \n            // Feet\n            translate([4, 0, 0]) \n            color(\"darkslateblue\") \n            sphere(4);\n            \n            translate([-4, 0, 0]) \n            color(\"darkslateblue\") \n            sphere(4);\n        }\n        \n        // Wings - underworld shadow wings\n        color(\"darkviolet\") {\n            translate([0, 12, 45]) \n            rotate([0, 0, 0]) {\n                // Right wing\n                difference() {\n                    translate([15, 0, 0]) \n                    scale([1, 0.3, 1]) \n                    sphere(15);\n                    // Wing membrane holes\n                    for(j = [1:6]) {\n                        translate([15, 0, j*3]) \n                        scale([0.5, 0.1, 0.5]) \n                        sphere(8);\n                    }\n                }\n                \n                // Left wing\n                translate([-15, 0, 0]) \n                scale([-1, 0.3, 1]) \n                    sphere(15);\n            }\n        }\n        \n        // Torch - the eternal flame\n        color(\"dimgray\") {\n            translate([12, -8, 25]) \n            rotate([0, 30, 0]) {\n                // Torch handle\n                cylinder(h = 20, r1 = 2, r2 = 1.5);\n                \n                // Flame\n                translate([0, 0, 22]) \n                color(\"orangered\") \n                scale([1, 1, 1.5]) \n                sphere(4);\n                \n                // Inner blue flame\n                translate([0, 0, 24]) \n                color(\"blue\") \n                scale([0.5, 0.5, 1]) \n                sphere(2);\n            }\n        }\n        \n        // Mystical chains - binding spirits\n        color(\"silver\") {\n            for(k = [0:60:359]) {\n                rotate([0, 0, k]) {\n                    translate([20, 0, 30]) \n                    rotate([90, 0, 0]) {\n                        for(m = [0:2:10]) {\n                            translate([0, 0, m]) \n                            sphere(1.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nlampad();",
    "renders": true
  },
  {
    "mythical_creature": "lamassu",
    "openscad_code": "// Lamassu - Assyrian protective deity with human head, bull/lion body, and wings\n// Model designed for 3D printing at ~80mm height\n\n$fn = 32;\n\n// Main colors\ncolor_human = [0.9, 0.7, 0.6];\ncolor_fur = [0.5, 0.4, 0.3];\ncolor_wing = [0.8, 0.8, 0.7];\ncolor_detail = [0.6, 0.5, 0.4];\n\n// Base module\nmodule base() {\n    color(color_fur)\n    difference() {\n        cube([40, 30, 5], center = true);\n        translate([0, 0, 2.5])\n            cube([38, 28, 5], center = true);\n    }\n}\n\n// Human head with beard and horned cap\nmodule head() {\n    color(color_human)\n    union() {\n        // Head sphere\n        sphere(10);\n        \n        // Nose\n        translate([0, -7, 2])\n            scale([1.2, 1, 1])\n            sphere(2);\n        \n        // Eyes\n        translate([-3, -8, 3])\n            sphere(1.5);\n        translate([3, -8, 3])\n            sphere(1.5);\n        \n        // Horns\n        rotate([0, -20, -30])\n            translate([0, 0, 10])\n            cylinder(8, 3, 1);\n        rotate([0, 20, 30])\n            translate([0, 0, 10])\n            cylinder(8, 3, 1);\n        \n        // Beard\n        color(color_detail)\n        translate([0, -7, -8])\n            scale([1, 1.5, 2])\n            sphere(5);\n    }\n}\n\n// Bull body\nmodule body() {\n    color(color_fur)\n    union() {\n        // Main torso\n        translate([0, 0, 15])\n            scale([1.5, 2, 1.2])\n            sphere(15);\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([side * 10, -5, 5])\n                cylinder(20, 5, 4);\n            translate([side * 10, 5, 5])\n                cylinder(20, 5, 4);\n        }\n        \n        // Hooves\n        translate([0, 0, 0])\n            cube([45, 35, 5], center = true);\n    }\n}\n\n// Wings with feather texture\nmodule wings() {\n    color(color_wing)\n    union() {\n        for(side = [-1, 1]) {\n            translate([side * 20, 0, 25])\n                rotate([0, 0, side * 20])\n                union() {\n                    // Main wing\n                    scale([1, 0.3, 1])\n                    rotate([0, 90, 0])\n                    cylinder(30, 15, 2);\n                    \n                    // Feathers\n                    for(i = [1:3:12]) {\n                        translate([i * side * 2, 0, -i * 2])\n                            scale([0.8, 0.1, 0.3])\n                            rotate([0, 90, 0])\n                            cylinder(20 - i, 12 - i, 1);\n                    }\n                }\n        }\n    }\n}\n\n// Tail with tuft\nmodule tail() {\n    color(color_fur)\n    union() {\n        translate([0, 20, 12])\n            rotate([90, 0, 0])\n            cylinder(25, 4, 2);\n        \n        // Tail tuft\n        translate([0, 25, 12])\n            sphere(5);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 5])\n    union() {\n        base();\n        \n        translate([0, 0, 25])\n            body();\n        \n        translate([0, -15, 45])\n            head();\n        \n        wings();\n        \n        tail();\n    }",
    "renders": true
  },
  {
    "mythical_creature": "lindworm",
    "openscad_code": "// Lindworm - a wingless, two-legged dragon from Norse mythology\n// Realistic style, medium complexity, 3D printable\n\n// Color definitions\n$fn = 50;\n\n// Main module\nmodule lindworm() {\n    // Body segments\n    body();\n    \n    // Head\n    head();\n    \n    // Front legs\n    legs();\n    \n    // Tail\n    tail();\n    \n    // Scales detail\n    scales();\n}\n\n// Body - serpentine shape with segments\nmodule body() {\n    color(\"darkgreen\")\n    union() {\n        // Main body - 5 segments\n        for(i = [0:4]) {\n            translate([0, 0, -i * 8])\n            scale([1 - i*0.1, 1 - i*0.1, 1])\n            rotate([0, 0, i * 15])\n            cylinder(h=10, r1=12, r2=10);\n        }\n    }\n}\n\n// Head with dragon features\nmodule head() {\n    color(\"forestgreen\")\n    union() {\n        // Main head shape\n        translate([0, 0, 5])\n        rotate([0, 0, 0])\n        scale([1.2, 1, 1.5])\n        sphere(12);\n        \n        // Snout\n        translate([0, -8, 3])\n        rotate([30, 0, 0])\n        scale([0.6, 0.8, 0.4])\n        cylinder(h=10, r1=8, r2=5);\n        \n        // Horns\n        for(side = [-1, 1]) {\n            translate([side * 10, 0, 15])\n            rotate([0, side * 20, 0])\n            cylinder(h=8, r1=3, r2=1);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            color(\"red\")\n            translate([side * 6, -8, 8])\n            sphere(2);\n        }\n        \n        // Nostrils\n        for(side = [-1, 1]) {\n            translate([side * 2, -12, 3])\n            sphere(1.5);\n        }\n    }\n}\n\n// Front legs only - lindworms have two legs\nmodule legs() {\n    color(\"darkgreen\")\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, -10])\n        union() {\n            // Upper leg\n            rotate([0, 0, side * 30])\n            cylinder(h=12, r1=4, r2=3);\n            \n            // Lower leg\n            translate([side * 8, -8, -8])\n            rotate([0, 0, side * 45])\n            cylinder(h=10, r1=3, r2=2);\n            \n            // Foot\n            translate([side * 12, -15, -15])\n            rotate([0, 0, side * 20])\n            scale([1.5, 1, 0.5])\n            sphere(3);\n            \n            // Claws\n            for(claw = [0:2]) {\n                translate([side * (12 + claw * 2), -18, -15])\n                rotate([0, 90, 0])\n                cylinder(h=3, r1=1, r2=0.5);\n            }\n        }\n    }\n}\n\n// Serpentine tail\nmodule tail() {\n    color(\"darkgreen\")\n    union() {\n        // Tail segments getting smaller\n        for(i = [0:8]) {\n            translate([0, 0, -40 - i * 6])\n            scale([1 - i*0.08, 1 - i*0.08, 1])\n            rotate([0, 0, -i * 20])\n            cylinder(h=8, r1=8 - i*0.8, r2=7 - i*0.8);\n        }\n        \n        // Tail tip\n        translate([0, 0, -90])\n        sphere(3);\n    }\n}\n\n// Scales detail along back\nmodule scales() {\n    color(\"goldenrod\")\n    for(i = [0:3]) {\n        translate([0, 0, -i * 10])\n        rotate([0, 0, i * 15])\n        scale([1, 1, 0.3])\n        sphere(6);\n    }\n    \n    // Tail scales\n    for(i = [0:6]) {\n        translate([0, 0, -45 - i * 8])\n        rotate([0, 0, -i * 20])\n        scale([0.7 - i*0.05, 0.7 - i*0.05, 0.3])\n        sphere(5 - i*0.3);\n    }\n}\n\n// Create the lindworm\nlindworm();",
    "renders": true
  },
  {
    "mythical_creature": "lucra",
    "openscad_code": "// Lucra - Mythical winged lion with draconic features\n// Overall dimensions: ~80mm length, 60mm height\n\n$fn = 24;\n\nmodule lucra() {\n    // Main body color - golden tan\n    color([0.82, 0.65, 0.35]) {\n        // Body - elongated oval\n        translate([0, 0, 15])\n            scale([1.5, 0.8, 0.6])\n            sphere(20);\n        \n        // Chest section\n        translate([15, 0, 12])\n            scale([1.2, 0.9, 0.7])\n            sphere(15);\n        \n        // Hindquarters\n        translate([-15, 0, 12])\n            scale([1.3, 0.9, 0.8])\n            sphere(15);\n    }\n    \n    // Head - leonine with draconic features\n    color([0.78, 0.6, 0.32]) {\n        translate([25, 0, 30])\n            scale([1.2, 0.9, 1])\n            sphere(12);\n    }\n    \n    // Snout\n    color([0.75, 0.58, 0.3]) {\n        translate([33, 0, 30])\n            scale([0.8, 0.5, 0.4])\n            sphere(8);\n    }\n    \n    // Mane - segmented rings\n    color([0.6, 0.4, 0.2]) {\n        for(i = [0:5:25]) {\n            rotate([0, 0, i])\n            translate([22, 0, 28])\n                rotate([90, 0, 0])\n                cylinder(h=2, r1=10, r2=12);\n        }\n    }\n    \n    // Horns - curved back\n    color([0.5, 0.4, 0.3]) {\n        // Left horn\n        translate([28, 8, 38])\n            rotate([30, 0, -15])\n            cylinder(h=12, r1=3, r2=1);\n        \n        // Right horn\n        translate([28, -8, 38])\n            rotate([30, 0, 15])\n            cylinder(h=12, r1=3, r2=1);\n    }\n    \n    // Wings - feathered style\n    color([0.7, 0.5, 0.3]) {\n        // Left wing\n        translate([5, 20, 35])\n            rotate([0, -20, 0])\n            difference() {\n                // Main wing structure\n                scale([1.2, 1, 0.1])\n                sphere(15);\n                \n                // Wing membrane cuts\n                for(i = [0:30:120]) {\n                    rotate([0, 0, i])\n                    translate([-5, 0, 0])\n                    cube([20, 2, 5], center=true);\n                }\n            }\n        \n        // Right wing\n        translate([5, -20, 35])\n            rotate([0, 20, 0])\n            mirror([0, 1, 0])\n            difference() {\n                scale([1.2, 1, 0.1])\n                sphere(15);\n                \n                for(i = [0:30:120]) {\n                    rotate([0, 0, i])\n                    translate([-5, 0, 0])\n                    cube([20, 2, 5], center=true);\n                }\n            }\n    }\n    \n    // Legs\n    color([0.8, 0.6, 0.3]) {\n        // Front left leg\n        translate([15, 10, 0])\n            cylinder(h=25, r=4);\n        translate([15, 10, 0])\n            sphere(4);\n        \n        // Front right leg\n        translate([15, -10, 0])\n            cylinder(h=25, r=4);\n        translate([15, -10, 0])\n            sphere(4);\n        \n        // Back left leg\n        translate([-15, 10, 0])\n            cylinder(h=25, r=5);\n        translate([-15, 10, 0])\n            sphere(5);\n        \n        // Back right leg\n        translate([-15, -10, 0])\n            cylinder(h=25, r=5);\n        translate([-15, -10, 0])\n            sphere(5);\n    }\n    \n    // Paws\n    color([0.6, 0.45, 0.25]) {\n        for(x = [15, -15])\n        for(y = [10, -10]) {\n            translate([x, y, -2])\n                sphere(5);\n        }\n    }\n    \n    // Tail - draconic with tuft\n    color([0.75, 0.55, 0.3]) {\n        hull() {\n            translate([-25, 0, 15])\n                sphere(4);\n            translate([-35, 0, 20])\n                sphere(3);\n            translate([-45, 0, 25])\n                sphere(4);\n        }\n        \n        // Tail tuft\n        color([0.5, 0.3, 0.15]) {\n            translate([-45, 0, 25])\n                sphere(6);\n        }\n    }\n    \n    // Eyes - glowing amber\n    color([1, 0.5, 0]) {\n        translate([30, 4, 32])\n            sphere(1.5);\n        translate([30, -4, 32])\n            sphere(1.5);\n    }\n    \n    // Scales pattern on back\n    color([0.7, 0.6, 0.4]) {\n        for(i = [-20:5:20]) {\n            translate([i, 0, 30])\n                scale([1, 0.5, 0.2])\n                sphere(3);\n        }\n    }\n}\n\n// Create the lucra\nlucra();",
    "renders": true
  },
  {
    "mythical_creature": "magma",
    "openscad_code": "// Magma Drake - A mythical creature of molten rock and fire\n// Medium complexity realistic style with 3D-printable design\n\n$fn = 64;\n\n// Main body colors\ncolor_lava = [1, 0.3, 0];\ncolor_ember = [1, 0.6, 0.2];\ncolor_dark_rock = [0.2, 0.1, 0.05];\n\n// Main creature assembly\nmodule magma_drake() {\n    union() {\n        // Body core\n        color(color_lava)\n        translate([0, 0, 10])\n        scale([1.2, 0.8, 1])\n        sphere(15);\n        \n        // Head\n        translate([20, 0, 25])\n        rotate([0, -10, 0])\n        drake_head();\n        \n        // Wings\n        translate([-5, 0, 20])\n        rotate([0, 20, 0])\n        drake_wings();\n        \n        // Tail\n        translate([-25, 0, 12])\n        rotate([0, 10, 0])\n        drake_tail();\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([5, side * 12, 8])\n            drake_leg(side);\n        }\n        \n        // Lava cracks across body\n        lava_cracks();\n    }\n}\n\n// Dragon head module\nmodule drake_head() {\n    union() {\n        // Main head shape\n        color(color_ember)\n        scale([1.5, 1, 1.2])\n        sphere(10);\n        \n        // Snout\n        translate([12, 0, -2])\n        scale([1.2, 0.6, 0.6])\n        sphere(6);\n        \n        // Horns\n        for(angle = [30, -30]) {\n            translate([5, sin(angle) * 8, cos(angle) * 8])\n            rotate([0, 0, angle])\n            cylinder(h = 15, r1 = 3, r2 = 1);\n        }\n        \n        // Eyes (glowing ember pits)\n        translate([10, 5, 3])\n        rotate([0, 30, 0])\n        color([1, 1, 0])\n        sphere(2);\n        \n        translate([10, -5, 3])\n        rotate([0, -30, 0])\n        color([1, 1, 0])\n        sphere(2);\n    }\n}\n\n// Wing module with membrane structure\nmodule drake_wings() {\n    // Left wing\n    translate([0, 15, 0])\n    single_wing();\n    \n    // Right wing\n    mirror([0, 1, 0])\n    translate([0, -15, 0])\n    single_wing();\n}\n\nmodule single_wing() {\n    union() {\n        // Wing arm\n        color(color_dark_rock)\n        translate([0, 0, 0])\n        rotate([0, 0, -20])\n        cylinder(h = 30, r1 = 4, r2 = 2);\n        \n        // Wing membrane segments\n        for(i = [1:3]) {\n            color(color_ember)\n            translate([5 * i, 5 * i, -2 * i])\n            rotate([0, 20, 0])\n            scale([1, 0.8 - i * 0.2, 0.1])\n            sphere(8);\n        }\n        \n        // Wing spikes\n        for(i = [0.2:0.2:1]) {\n            translate([30 * i, 15 * i, -5 * i])\n            color(color_lava)\n            cylinder(h = 3, r = 1.5);\n        }\n    }\n}\n\n// Tail module with lava segments\nmodule drake_tail() {\n    union() {\n        // Tail segments getting smaller\n        for(i = [0:5]) {\n            color(i % 2 == 0 ? color_lava : color_ember)\n            translate([-5 * i, 0, -2 * i])\n            scale([1 - i * 0.15, 1 - i * 0.15, 1])\n            sphere(8 - i);\n        }\n        \n        // Tail spikes\n        for(i = [1:2:5]) {\n            color(color_dark_rock)\n            translate([-5 * i, 0, 3])\n            rotate([0, 90, 0])\n            cylinder(h = 3, r1 = 2, r2 = 0.5);\n        }\n    }\n}\n\n// Leg module\nmodule drake_leg(side) {\n    union() {\n        // Upper leg\n        color(color_dark_rock)\n        translate([0, 0, 10])\n        rotate([30, 0, side * 10])\n        cylinder(h = 12, r1 = 4, r2 = 3);\n        \n        // Lower leg\n        translate([0, 0, 0])\n        rotate([30, 0, side * 10])\n        cylinder(h = 10, r1 = 3, r2 = 2);\n        \n        // Foot\n        translate([0, 0, -5])\n        rotate([0, side * 10, 0])\n        scale([1.5, 0.8, 0.5])\n        sphere(3);\n        \n        // Toe claws\n        for(claw = [-1, 0, 1]) {\n            translate([claw * 2, 0, -8])\n            color(color_lava)\n            cylinder(h = 4, r1 = 1.5, r2 = 0.5);\n        }\n    }\n}\n\n// Lava crack details across body\nmodule lava_cracks() {\n    // Body cracks\n    for(i = [1:8]) {\n        color([1, 0.8, 0.2])\n        translate([sin(i * 45) * 10, cos(i * 45) * 8, 15])\n        rotate([90, 0, i * 45])\n        scale([0.5, 0.5, 8])\n        cylinder(h = 1, r = 1);\n    }\n    \n    // Head cracks\n    for(i = [1:4]) {\n        translate([20 + sin(i * 90) * 8, cos(i * 90) * 6, 25])\n        rotate([0, 90, i * 45])\n        scale([0.3, 0.3, 5])\n        cylinder(h = 1, r = 0.5);\n    }\n}\n\n// Scale for 3D printing (total length ~80mm)\nscale(0.8)\nmagma_drake();",
    "renders": true
  },
  {
    "mythical_creature": "makara",
    "openscad_code": "// Makara - Mythical Sea Creature from Hindu/Buddhist mythology\n// Features: Elephant trunk, crocodile body, fish tail, scales, and horns\n\n$fn=50;\n\n// Main colors\ncolor(\"darkgoldenrod\") {\n    // Body base\n    union() {\n        // Crocodile-like body\n        translate([0, 0, 5]) scale([1.5, 0.8, 0.6]) sphere(d=30);\n        \n        // Fish tail section\n        translate([-20, 0, 5]) rotate([0, 0, 15]) scale([1.2, 0.4, 0.8]) \n            cylinder(h=25, d1=20, d2=5);\n        \n        // Tail fin\n        translate([-35, 0, 5]) rotate([0, 0, 30]) scale([1, 0.2, 1]) \n            sphere(d=15);\n    }\n}\n\n// Elephant trunk\ncolor(\"gray\") {\n    translate([15, 0, 10]) rotate([45, 0, 0]) \n        cylinder(h=20, d1=8, d2=4);\n    \n    // Trunk curves\n    for(i=[0:2]) {\n        translate([15 + i*3, 0, 10 - i*3]) rotate([45 - i*10, 0, 0]) \n            sphere(d=5);\n    }\n}\n\n// Head and face\ncolor(\"goldenrod\") {\n    // Head\n    translate([10, 0, 15]) scale([1.2, 1, 1]) sphere(d=20);\n    \n    // Snout\n    translate([20, 0, 12]) scale([0.8, 0.6, 0.6]) sphere(d=15);\n}\n\n// Horns\ncolor(\"darkgoldenrod\") {\n    // Left horn\n    translate([5, 8, 20]) rotate([0, -30, -30]) \n        cylinder(h=15, d1=3, d2=1);\n    \n    // Right horn\n    translate([5, -8, 20]) rotate([0, 30, 30]) \n        cylinder(h=15, d1=3, d2=1);\n}\n\n// Eyes\ncolor(\"black\") {\n    translate([18, 4, 18]) sphere(d=2);\n    translate([18, -4, 18]) sphere(d=2);\n}\n\n// Scales pattern on body\ncolor(\"darkolivegreen\") {\n    for(i=[-15:5:15]) {\n        for(j=[-8:4:8]) {\n            if(i*i + j*j < 100) {\n                translate([i, j, 20]) rotate([90, 0, 0]) \n                    cylinder(h=0.5, d=3);\n            }\n        }\n    }\n}\n\n// Dorsal fin\ncolor(\"darkgoldenrod\") {\n    translate([-10, 0, 25]) scale([0.3, 0.1, 1]) \n        cube([20, 5, 10]);\n}\n\n// Legs\ncolor(\"goldenrod\") {\n    // Front legs\n    translate([5, 8, 0]) rotate([0, 0, 0]) cylinder(h=10, d=4);\n    translate([5, -8, 0]) rotate([0, 0, 0]) cylinder(h=10, d=4);\n    \n    // Back legs\n    translate([-10, 6, 0]) rotate([0, 0, 0]) cylinder(h=10, d=4);\n    translate([-10, -6, 0]) rotate([0, 0, 0]) cylinder(h=10, d=4);\n}\n\n// Feet\ncolor(\"gray\") {\n    translate([5, 8, -5]) sphere(d=5);\n    translate([5, -8, -5]) sphere(d=5);\n    translate([-10, 6, -5]) sphere(d=5);\n    translate([-10, -6, -5]) sphere(d=5);\n}",
    "renders": true
  },
  {
    "mythical_creature": "marid",
    "openscad_code": "// Marid - Powerful water djinn with aquatic features\n// Scale: 1 unit = 1mm, total height ~80mm\n\n$fn = 32; // Smooth curves\n\nmodule marid() {\n    // Main body - muscular torso\n    color([0.1, 0.3, 0.6]) // Deep sea blue\n    union() {\n        // Torso\n        translate([0, 0, 25])\n            scale([1.2, 0.8, 1.5])\n                sphere(12);\n        \n        // Abdomen\n        translate([0, 0, 12])\n            scale([1, 0.9, 1.2])\n                sphere(10);\n        \n        // Pelvis\n        translate([0, 0, 5])\n            scale([1.1, 0.7, 0.8])\n                sphere(8);\n    }\n    \n    // Head with aquatic features\n    color([0.2, 0.4, 0.7])\n    union() {\n        // Main head\n        translate([0, -5, 42])\n            scale([0.9, 1.1, 1.2])\n                sphere(10);\n        \n        // Crown-like fins\n        for(i = [0:6]) {\n            rotate([0, 0, i * 51.4])\n                translate([0, -12, 48])\n                    rotate([30, 0, 0])\n                        scale([0.3, 1, 0.1])\n                            cylinder(h = 8, r1 = 2, r2 = 0.5);\n        }\n    }\n    \n    // Beard - flowing water tendrils\n    color([0.3, 0.5, 0.8, 0.7])\n    for(i = [0:4]) {\n        rotate([0, -10 + i * 5, -15 + i * 7])\n            translate([0, -8, 38])\n                scale([0.3, 0.3, 1])\n                    cylinder(h = 12, r = 1.5);\n    }\n    \n    // Arms with webbed hands\n    module arm(side) {\n        translate([side * 15, 0, 30])\n            rotate([0, 0, side * -15])\n                union() {\n                    // Upper arm\n                    color([0.1, 0.3, 0.6])\n                        scale([0.4, 0.4, 1])\n                            cylinder(h = 15, r = 4);\n                    \n                    // Lower arm\n                    translate([0, 0, -8])\n                        rotate([side * 20, 0, 0])\n                            scale([0.3, 0.3, 1])\n                                cylinder(h = 12, r = 3.5);\n                    \n                    // Webbed hand\n                    color([0.2, 0.4, 0.7])\n                        translate([0, 0, -6])\n                            rotate([side * 10, 0, 0])\n                                scale([1.2, 0.3, 0.2])\n                                    sphere(5);\n                    \n                    // Webbing between fingers\n                    color([0.3, 0.5, 0.8, 0.6])\n                    for(i = [1:3]) {\n                        rotate([0, 0, i * 120])\n                            translate([0, -3, -5])\n                                scale([0.5, 0.1, 0.8])\n                                    cylinder(h = 6, r = 2);\n                    }\n                }\n    }\n    \n    arm(1);\n    arm(-1);\n    \n    // Legs with aquatic features\n    module leg(side) {\n        translate([side * 8, 0, 8])\n            union() {\n                // Thigh\n                color([0.1, 0.3, 0.6])\n                    scale([0.5, 0.5, 1])\n                        cylinder(h = 12, r = 5);\n                \n                // Calf\n                translate([0, 0, -6])\n                    rotate([side * 10, 0, 0])\n                        scale([0.4, 0.4, 1])\n                            cylinder(h = 10, r = 4);\n                \n                // Webbed foot\n                color([0.2, 0.4, 0.7])\n                translate([0, -2, -5])\n                    scale([1.5, 0.4, 0.3])\n                        sphere(4);\n                \n                // Fin extensions\n                color([0.3, 0.5, 0.8])\n                for(i = [0:2]) {\n                    rotate([0, 0, i * 120 - 60])\n                        translate([0, -4, -5])\n                            rotate([45, 0, 0])\n                                scale([0.3, 1, 0.1])\n                                    cylinder(h = 6, r1 = 1.5, r2 = 0.5);\n                }\n            }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Water spout wings - swirling water\n    color([0.4, 0.6, 0.9, 0.8])\n    for(side = [-1, 1]) {\n        translate([side * 12, -5, 35])\n            rotate([0, 0, side * -30])\n                for(i = [0:5]) {\n                    rotate([0, 0, i * 15])\n                        translate([i * 2, -i, 0])\n                            rotate([0, 0, i * 10])\n                                scale([0.8 - i * 0.1, 0.8 - i * 0.1, 0.1])\n                                    cylinder(h = 20 - i * 2, r = 3);\n                }\n    }\n    \n    // Tail - serpentine water stream\n    color([0.1, 0.4, 0.7])\n    translate([0, 0, 0])\n        for(i = [0:8]) {\n            rotate([0, 0, sin(i * 15) * 20])\n                translate([0, -i * 2, -i * 3])\n                    scale([1 - i * 0.08, 1 - i * 0.08, 1])\n                        sphere(6 - i * 0.5);\n        }\n    \n    // Magical water orb in hand\n    color([0.5, 0.7, 1, 0.7])\n    translate([15, -15, 20])\n        sphere(4);\n    \n    // Decorative scales pattern\n    color([0.15, 0.35, 0.65])\n    for(y = [0:3]) {\n        for(x = [-2:2]) {\n            if(abs(x) + y < 4) {\n                translate([x * 3, y * 2 - 2, 35 - y * 2])\n                    scale([1, 0.7, 0.2])\n                        sphere(1.5);\n            }\n        }\n    }\n}\n\n// Render the marid\nmarid();",
    "renders": true
  },
  {
    "mythical_creature": "medusa",
    "openscad_code": "// Medusa - Realistic Style, Medium Complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n// Global variables\n$fn = 32;\nscale_factor = 0.4;  // Scale to ~80mm height\n\n// Color definitions\nskin_color = \"#deb887\";\nsnake_color = \"#556b2f\";\nhair_color = \"#8b4513\";\nstone_color = \"#708090\";\n\n// Main module\nmodule medusa() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Body\n        union() {\n            // Head\n            color(skin_color) head();\n            \n            // Torso\n            color(skin_color) torso();\n            \n            // Snake hair\n            color(snake_color) snake_hair();\n            \n            // Arms\n            color(skin_color) left_arm();\n            color(skin_color) right_arm();\n            \n            // Lower body (snake tail)\n            color(snake_color) snake_body();\n            \n            // Face details\n            face_details();\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    translate([0, 0, 45]) {\n        difference() {\n            // Main head shape\n            sphere(15);\n            \n            // Neck hole\n            translate([0, 0, -15]) {\n                cylinder(30, 5, 5);\n            }\n        }\n        \n        // Eyes\n        translate([-5, 12, 3]) {\n            color(stone_color) sphere(2);\n        }\n        translate([5, 12, 3]) {\n            color(stone_color) sphere(2);\n        }\n        \n        // Nose\n        translate([0, 12, 0]) {\n            scale([1, 1, 0.5]) sphere(2);\n        }\n        \n        // Mouth\n        translate([0, 10, -5]) {\n            rotate([90, 0, 0]) cylinder(0.5, 3, 3);\n        }\n    }\n}\n\n// Torso module\nmodule torso() {\n    translate([0, 0, 25]) {\n        // Upper body\n        scale([8, 4, 20]) sphere(1);\n        \n        // Chest detail\n        translate([0, 0, 5]) {\n            scale([6, 3, 5]) sphere(1);\n        }\n    }\n}\n\n// Snake hair module\nmodule snake_hair() {\n    // Generate multiple snakes around the head\n    for(i = [0:11]) {\n        angle = i * 30;\n        radius = 15;\n        translate([0, 0, 45]) {\n            rotate([0, 0, angle]) {\n                translate([radius, 0, 0]) {\n                    // Each snake\n                    snake();\n                }\n            }\n        }\n    }\n}\n\n// Single snake module\nmodule snake() {\n    // Snake body segments\n    translate([0, 0, 0]) {\n        for(j = [0:5]) {\n            translate([j * 3, sin(j * 30) * 2, cos(j * 30) * 2]) {\n                scale([3, 1.5, 1.5]) sphere(1);\n            }\n        }\n        \n        // Snake head\n        translate([18, 0, 0]) {\n            scale([2, 1, 1]) sphere(1.5);\n            \n            // Eyes\n            translate([0.5, 0.5, 0.5]) {\n                color(\"red\") sphere(0.3);\n            }\n            translate([0.5, -0.5, 0.5]) {\n                color(\"red\") sphere(0.3);\n            }\n        }\n    }\n}\n\n// Left arm module\nmodule left_arm() {\n    translate([-10, 5, 30]) {\n        rotate([0, 15, -20]) {\n            // Upper arm\n            cylinder(10, 2, 2);\n            \n            // Lower arm\n            translate([0, 0, -10]) {\n                rotate([0, 15, 0]) {\n                    cylinder(8, 2, 1.5);\n                    \n                    // Hand\n                    translate([0, 0, -8]) {\n                        sphere(2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Right arm module\nmodule right_arm() {\n    translate([10, 5, 30]) {\n        rotate([0, -15, 20]) {\n            // Upper arm\n            cylinder(10, 2, 2);\n            \n            // Lower arm\n            translate([0, 0, -10]) {\n                rotate([0, -15, 0]) {\n                    cylinder(8, 2, 1.5);\n                    \n                    // Hand\n                    translate([0, 0, -8]) {\n                        sphere(2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Snake body module\nmodule snake_body() {\n    // Start from waist\n    translate([0, 0, 15]) {\n        // Coiled snake tail\n        for(i = [0:20]) {\n            angle = i * 20;\n            radius = 15 - i * 0.5;\n            height = 15 - i * 0.7;\n            \n            translate([cos(angle) * radius, sin(angle) * radius, height]) {\n                scale([3 - i * 0.05, 3 - i * 0.05, 3 - i * 0.05]) sphere(1);\n            }\n        }\n        \n        // Tail tip\n        translate([cos(21 * 20) * 5, sin(21 * 20) * 5, 0]) {\n            scale([2, 2, 2]) sphere(1);\n        }\n    }\n}\n\n// Face details module\nmodule face_details() {\n    // Eyebrows\n    translate([-7, 12, 5]) {\n        scale([2, 1, 0.5]) sphere(1);\n    }\n    translate([7, 12, 5]) {\n        scale([2, 1, 0.5]) sphere(1);\n    }\n    \n    // Ears\n    translate([-12, 0, 3]) {\n        scale([0.5, 2, 3]) sphere(1);\n    }\n    translate([12, 0, 3]) {\n        scale([0.5, 2, 3]) sphere(1);\n    }\n}\n\n// Render the model\nmedusa();",
    "renders": true
  },
  {
    "mythical_creature": "melusine",
    "openscad_code": "// Realistic Melusine - Medium Complexity\n// Upper body: woman, lower body: twin fish tails\n// Size: ~70mm height\n\n$fn=32;\n\n// Overall scale factor\nscale_factor = 0.7;\n\n// Colors\nskin_color = \"LightSalmon\";\ntail_color = \"DarkCyan\";\nhair_color = \"GoldenRod\";\nfin_color = \"SteelBlue\";\n\nmodule melusine() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Head\n        color(skin_color) {\n            translate([0, 0, 65]) {\n                sphere(8);\n                \n                // Nose\n                translate([0, 7.5, 0]) sphere(1.5);\n                \n                // Eyes\n                translate([-3, 7, 1]) sphere(1);\n                translate([3, 7, 1]) sphere(1);\n                \n                // Mouth\n                translate([0, 7, -2]) cube([4, 0.5, 1], center=true);\n            }\n        }\n        \n        // Hair\n        color(hair_color) {\n            translate([0, 0, 65]) {\n                for(i=[0:30:330]) {\n                    rotate([0, 0, i]) {\n                        translate([8, 0, 0]) rotate([90, 0, 0]) cylinder(15, 1.5, 0.5);\n                    }\n                }\n            }\n        }\n        \n        // Torso\n        color(skin_color) {\n            hull() {\n                translate([0, 0, 50]) scale([6, 4, 8]) sphere(1);\n                translate([0, 0, 35]) scale([5, 3.5, 7]) sphere(1);\n            }\n            \n            // Arms\n            translate([-8, 6, 45]) rotate([0, 0, -20]) {\n                cylinder(12, 2, 1.5);\n                translate([0, 0, 12]) rotate([0, 0, -30]) cylinder(10, 1.5, 1);\n            }\n            \n            translate([8, 6, 45]) rotate([0, 0, 20]) {\n                cylinder(12, 2, 1.5);\n                translate([0, 0, 12]) rotate([0, 0, 30]) cylinder(10, 1.5, 1);\n            }\n        }\n        \n        // Waist transition\n        color(skin_color) {\n            translate([0, 0, 28]) scale([4.5, 3.5, 3]) sphere(1);\n        }\n        \n        // Twin fish tails\n        // Left tail\n        color(tail_color) {\n            translate([-4, 0, 25]) {\n                // Upper tail segment\n                hull() {\n                    translate([0, 0, 0]) scale([2, 2, 8]) sphere(1);\n                    translate([0, 0, -12]) scale([1.5, 1.5, 6]) sphere(1);\n                }\n                \n                // Lower tail segment\n                translate([0, 0, -20]) {\n                    hull() {\n                        translate([0, 0, 0]) scale([1.5, 1.5, 6]) sphere(1);\n                        translate([0, 0, -10]) scale([1, 1, 8]) sphere(0.8);\n                    }\n                }\n                \n                // Tail fin\n                color(fin_color) {\n                    translate([0, 0, -38]) rotate([0, 0, -15]) {\n                        difference() {\n                            scale([8, 1, 6]) sphere(1);\n                            translate([4, 0, -2]) scale([5, 2, 4]) sphere(1);\n                        }\n                    }\n                }\n            }\n            \n            // Right tail\n            translate([4, 0, 25]) {\n                // Upper tail segment\n                hull() {\n                    translate([0, 0, 0]) scale([2, 2, 8]) sphere(1);\n                    translate([0, 0, -12]) scale([1.5, 1.5, 6]) sphere(1);\n                }\n                \n                // Lower tail segment\n                translate([0, 0, -20]) {\n                    hull() {\n                        translate([0, 0, 0]) scale([1.5, 1.5, 6]) sphere(1);\n                        translate([0, 0, -10]) scale([1, 1, 8]) sphere(0.8);\n                    }\n                }\n                \n                // Tail fin\n                color(fin_color) {\n                    translate([0, 0, -38]) rotate([0, 0, 15]) {\n                        difference() {\n                            scale([8, 1, 6]) sphere(1);\n                            translate([-4, 0, -2]) scale([5, 2, 4]) sphere(1);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Scales pattern on tails\n        color(tail_color) {\n            for(z=[-5:-5:-30]) {\n                for(a=[0:45:315]) {\n                    translate([-4 + 0.5*cos(a), 0.5*sin(a), z]) {\n                        scale([0.8, 0.8, 0.3]) sphere(1);\n                    }\n                    translate([4 + 0.5*cos(a), 0.5*sin(a), z]) {\n                        scale([0.8, 0.8, 0.3]) sphere(1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Base for stability\ncolor(\"DarkSlateGray\") {\n    translate([0, 0, -45]) {\n        cylinder(3, 20, 20);\n    }\n}\n\nmelusine();",
    "renders": true
  },
  {
    "mythical_creature": "merlion",
    "openscad_code": "// Merlion - Singapore's mythical creature with lion head and fish body\n// Designed for 3D printing at 80mm height\n\n$fn = 32; // Smooth curves for better print quality\n\nmodule merlion(scale_factor = 1) {\n    color(\"goldenrod\") {\n        // Lion head - main structure\n        translate([0, 0, 40 * scale_factor]) {\n            difference() {\n                sphere(15 * scale_factor); // Main head\n                \n                // Eye sockets\n                translate([8 * scale_factor, 12 * scale_factor, 5 * scale_factor]) {\n                    sphere(3 * scale_factor);\n                }\n                translate([-8 * scale_factor, 12 * scale_factor, 5 * scale_factor]) {\n                    sphere(3 * scale_factor);\n                }\n                \n                // Nostrils\n                translate([2 * scale_factor, 14 * scale_factor, -5 * scale_factor]) {\n                    rotate([90, 0, 0]) cylinder(2 * scale_factor, 1 * scale_factor, 1 * scale_factor);\n                }\n                translate([-2 * scale_factor, 14 * scale_factor, -5 * scale_factor]) {\n                    rotate([90, 0, 0]) cylinder(2 * scale_factor, 1 * scale_factor, 1 * scale_factor);\n                }\n            }\n            \n            // Mane - layered cylinders for realistic effect\n            for(i = [0:30]) {\n                rotate([0, 0, i * 12]) {\n                    translate([12 * scale_factor + sin(i * 30) * 3, 0, 0]) {\n                        rotate([90, 0, 0]) \n                        cylinder(8 * scale_factor, 2 * scale_factor, 1 * scale_factor);\n                    }\n                }\n            }\n            \n            // Eyes\n            color(\"black\") {\n                translate([8 * scale_factor, 12 * scale_factor, 5 * scale_factor]) {\n                    sphere(1.5 * scale_factor);\n                }\n                translate([-8 * scale_factor, 12 * scale_factor, 5 * scale_factor]) {\n                    sphere(1.5 * scale_factor);\n                }\n            }\n            \n            // Nose\n            translate([0, 15 * scale_factor, 0]) {\n                scale([3 * scale_factor, 2 * scale_factor, 2 * scale_factor]) {\n                    sphere(1.5 * scale_factor);\n                }\n            }\n            \n            // Mouth\n            translate([0, 12 * scale_factor, -8 * scale_factor]) {\n                rotate([90, 0, 0]) {\n                    linear_extrude(2 * scale_factor) {\n                        difference() {\n                            circle(8 * scale_factor);\n                            circle(6 * scale_factor);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Fish body - streamlined shape\n        translate([0, 0, 20 * scale_factor]) {\n            scale([1, 0.6, 2]) {\n                sphere(15 * scale_factor);\n            }\n        }\n        \n        // Tail - fish tail with realistic curves\n        translate([0, 0, 5 * scale_factor]) {\n            rotate([0, 0, 0]) {\n                difference() {\n                    union() {\n                        // Main tail base\n                        scale([1.2 * scale_factor, 0.8 * scale_factor, 2 * scale_factor]) {\n                            cylinder(15 * scale_factor, 10 * scale_factor, 5 * scale_factor);\n                        }\n                        \n                        // Tail fins\n                        translate([0, 8 * scale_factor, -10 * scale_factor]) {\n                            rotate([0, 15, 0]) {\n                                scale([1 * scale_factor, 0.5 * scale_factor, 2 * scale_factor]) {\n                                    cylinder(8 * scale_factor, 5 * scale_factor, 1 * scale_factor);\n                                }\n                            }\n                        }\n                        \n                        translate([0, -8 * scale_factor, -10 * scale_factor]) {\n                            rotate([0, -15, 0]) {\n                                scale([1 * scale_factor, 0.5 * scale_factor, 2 * scale_factor]) {\n                                    cylinder(8 * scale_factor, 5 * scale_factor, 1 * scale_factor);\n                                }\n                            }\n                        }\n                    }\n                    \n                    // Hollow out tail for printing\n                    translate([0, 0, 5 * scale_factor]) {\n                        cylinder(20 * scale_factor, 8 * scale_factor, 3 * scale_factor);\n                    }\n                }\n            }\n        }\n        \n        // Dorsal fin - fish scales pattern\n        translate([0, 0, 30 * scale_factor]) {\n            for(i = [0:5]) {\n                translate([0, 0, i * 2 * scale_factor]) {\n                    scale([0.5 * scale_factor, 0.2 * scale_factor, 1 * scale_factor]) {\n                        rotate([0, 0, i * 15]) {\n                            cylinder(5 * scale_factor, 3 * scale_factor, 1 * scale_factor);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Pectoral fins\n        translate([10 * scale_factor, 0, 25 * scale_factor]) {\n            rotate([0, 0, 45]) {\n                scale([1 * scale_factor, 0.3 * scale_factor, 1.5 * scale_factor]) {\n                    cylinder(5 * scale_factor, 4 * scale_factor, 2 * scale_factor);\n                }\n            }\n        }\n        \n        translate([-10 * scale_factor, 0, 25 * scale_factor]) {\n            rotate([0, 0, -45]) {\n                scale([1 * scale_factor, 0.3 * scale_factor, 1.5 * scale_factor]) {\n                    cylinder(5 * scale_factor, 4 * scale_factor, 2 * scale_factor);\n                }\n            }\n        }\n        \n        // Water spout from mouth - simplified for printing\n        translate([0, 15 * scale_factor, 45 * scale_factor]) {\n            color(\"lightblue\") {\n                rotate([90, 0, 0]) {\n                    cylinder(8 * scale_factor, 2 * scale_factor, 1 * scale_factor);\n                }\n            }\n        }\n    }\n}\n\n// Create the merlion scaled to 80mm height\nmerlion(0.8);",
    "renders": true
  },
  {
    "mythical_creature": "mermaid",
    "openscad_code": "// Realistic Mermaid (Medium Complexity)\n// 3D printable mermaid figurine with human torso and fish tail\n// Overall height: ~80mm, base width: ~40mm\n\n$fn = 32; // Smooth curves for 3D printing\n\n// Colors\ncolor_skin = [1, 0.8, 0.7];\ncolor_tail = [0.2, 0.4, 0.6];\ncolor_hair = [0.8, 0.5, 0.2];\ncolor_bra = [0.9, 0.9, 0.9];\n\n// Main figure\nmodule mermaid() {\n    union() {\n        // Tail\n        translate([0, 0, 0]) tail();\n        \n        // Torso\n        translate([0, 0, 25]) torso();\n        \n        // Head\n        translate([0, 0, 45]) head();\n        \n        // Arms\n        translate([6, 0, 30]) arm(true);\n        translate([-6, 0, 30]) arm(false);\n        \n        // Hair\n        translate([0, 0, 52]) hair();\n    }\n}\n\n// Fish tail\nmodule tail() {\n    color(color_tail) {\n        // Tail base (cylindrical)\n        cylinder(h = 25, r1 = 12, r2 = 8);\n        \n        // Tail fin\n        translate([0, 0, 25]) {\n            rotate([0, 0, 45]) {\n                difference() {\n                    // Main fin\n                    scale([1, 2, 0.5]) sphere(8);\n                    // Cutout for fin shape\n                    translate([0, 4, 0]) sphere(6);\n                }\n            }\n            rotate([0, 0, -45]) {\n                difference() {\n                    scale([1, 2, 0.5]) sphere(8);\n                    translate([0, 4, 0]) sphere(6);\n                }\n            }\n        }\n        \n        // Scales texture\n        for(i = [0:5]) {\n            translate([0, 0, i * 4]) {\n                rotate([0, 0, i * 30]) {\n                    cylinder(h = 2, r1 = 11 - i * 0.5, r2 = 11 - i * 0.5);\n                }\n            }\n        }\n    }\n}\n\n// Human torso\nmodule torso() {\n    color(color_skin) {\n        // Main body\n        scale([1, 0.7, 1.2]) sphere(8);\n        \n        // Bra top\n        color(color_bra) {\n            translate([4, 0, 6]) sphere(3);\n            translate([-4, 0, 6]) sphere(3);\n            translate([0, 0, 7]) cylinder(h = 3, r1 = 2, r2 = 1);\n        }\n        \n        // Waist transition\n        translate([0, 0, -4]) cylinder(h = 8, r1 = 8, r2 = 12);\n    }\n}\n\n// Head with feminine features\nmodule head() {\n    color(color_skin) {\n        // Main head\n        scale([0.9, 0.8, 1.1]) sphere(8);\n        \n        // Face details\n        translate([0, 3, 0]) {\n            // Eyes\n            translate([2.5, 0, 3]) sphere(0.8);\n            translate([-2.5, 0, 3]) sphere(0.8);\n            \n            // Nose\n            translate([0, 0, 1]) scale([0.5, 1, 1]) sphere(1);\n            \n            // Lips\n            translate([0, 0, -1]) scale([1.2, 0.5, 0.3]) sphere(1.5);\n        }\n    }\n}\n\n// Arms with hands\nmodule arm(isRight) {\n    color(color_skin) {\n        // Shoulder\n        translate([0, 0, 0]) sphere(3);\n        \n        // Upper arm\n        rotate([0, 0, isRight ? 30 : -30]) {\n            translate([0, 0, -5]) cylinder(h = 10, r = 2);\n            \n            // Lower arm\n            translate([0, 0, -10]) rotate([0, 0, isRight ? 30 : -30]) {\n                cylinder(h = 8, r = 1.5);\n                \n                // Hand\n                translate([0, 0, -4]) sphere(2);\n            }\n        }\n    }\n}\n\n// Flowing hair\nmodule hair() {\n    color(color_hair) {\n        // Main hair mass\n        rotate([0, 0, 0]) {\n            scale([1.2, 1, 1.5]) sphere(8);\n        }\n        \n        // Hair strands\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45]) {\n                translate([8, 0, -2]) {\n                    rotate([0, 0, 15]) {\n                        scale([0.3, 0.3, 1]) cylinder(h = 15 + i, r = 1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the complete mermaid\nmermaid();",
    "renders": true
  },
  {
    "mythical_creature": "mokole",
    "openscad_code": "// Mokole - Mythical Lizard-Dragon Creature\n// Scale: 1 unit = 1mm, total length ~80mm\n\n$fn = 32;\n\n// Main body module\nmodule mokole() {\n    color(\"darkolivegreen\") {\n        // Main torso\n        translate([0, 0, 15]) {\n            scale([1.2, 0.8, 0.6]) sphere(10);\n        }\n        \n        // Head\n        translate([0, 0, 25]) {\n            rotate([0, 20, 0]) {\n                scale([1, 0.7, 0.6]) sphere(8);\n            }\n        }\n        \n        // Snout\n        translate([0, -8, 23]) {\n            rotate([0, 20, 0]) {\n                cylinder(h=10, r1=6, r2=3);\n            }\n        }\n        \n        // Neck\n        translate([0, 0, 22]) {\n            rotate([0, -10, 0]) {\n                cylinder(h=8, r1=4, r2=6);\n            }\n        }\n    }\n    \n    // Horns\n    color(\"goldenrod\") {\n        for(i = [-1, 1]) {\n            translate([i * 3, -2, 28]) {\n                rotate([i * 10, -30, 0]) {\n                    cylinder(h=12, r1=1.5, r2=0.5);\n                }\n            }\n            translate([i * 2, -4, 27]) {\n                rotate([i * 5, -25, 0]) {\n                    cylinder(h=8, r1=1, r2=0.3);\n                }\n            }\n        }\n    }\n    \n    // Legs\n    color(\"darkgreen\") {\n        for(i = [-1, 1]) {\n            // Front legs\n            translate([i * 8, -5, 10]) {\n                rotate([0, 0, i * 10]) {\n                    cylinder(h=12, r=2.5);\n                    translate([0, 0, -6]) sphere(3);\n                }\n            }\n            \n            // Back legs\n            translate([i * 7, 8, 10]) {\n                rotate([0, 0, i * -10]) {\n                    cylinder(h=15, r=3);\n                    translate([0, 0, -7.5]) sphere(3.5);\n                }\n            }\n        }\n    }\n    \n    // Tail\n    color(\"darkolivegreen\") {\n        translate([0, 15, 15]) {\n            for(i = [0:5]) {\n                translate([0, i * 3, -i * 0.8]) {\n                    scale([1 - i * 0.15, 1, 1 - i * 0.15]) {\n                        rotate([0, 10, 0]) {\n                            sphere(6 - i);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Wings\n    color(\"forestgreen\") {\n        for(i = [-1, 1]) {\n            translate([i * 12, -5, 22]) {\n                rotate([0, 0, i * 30]) {\n                    // Wing membrane support\n                    difference() {\n                        cube([20, 0.5, 8]);\n                        translate([10, -1, 4]) sphere(2);\n                    }\n                    \n                    // Wing bones\n                    for(j = [1:3]) {\n                        translate([j * 5, 0, 2]) {\n                            rotate([0, -j * 10, 0]) {\n                                cylinder(h=8 - j, r=0.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Scales\n    color(\"darkgreen\") {\n        for(i = [0:3]) {\n            for(j = [0:4]) {\n                translate([sin(i * 45) * 8, cos(i * 45) * 8, 18 - j * 2]) {\n                    scale([1, 1.5, 0.3]) sphere(2);\n                }\n            }\n        }\n    }\n    \n    // Eyes\n    color(\"red\") {\n        for(i = [-1, 1]) {\n            translate([i * 3, -6, 26]) {\n                sphere(1.5);\n            }\n        }\n    }\n    \n    // Magical runes on wings\n    color(\"gold\") {\n        for(i = [-1, 1]) {\n            translate([i * 18, -5, 26]) {\n                rotate([0, 0, i * 30]) {\n                    for(a = [0:45:360]) {\n                        rotate([0, 0, a]) {\n                            translate([5, 0, 0]) sphere(0.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Claws\n    color(\"saddlebrown\") {\n        for(side = [-1, 1]) {\n            for(pos = [[8, -5, 3], [7, 8, 2.5], [-8, -5, 3], [-7, 8, 2.5]]) {\n                translate([side * pos[0], pos[1], pos[2]]) {\n                    for(k = [0:2]) {\n                        rotate([0, 0, k * 120]) {\n                            translate([k - 1, 0, -1]) {\n                                rotate([30, 0, 0]) {\n                                    cylinder(h=2, r1=0.8, r2=0.2);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nmokole();\n\n// Base for 3D printing stability\ncolor(\"darkslategray\") {\n    translate([0, 5, -1]) {\n        cube([30, 30, 2], center=true);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "monoceros",
    "openscad_code": "// Monoceros - Mythical Unicorn-like Sea Creature\n// Realistic style, medium complexity\n\n// Global parameters\nscale_factor = 0.5;  // Scale to ~75mm length\n\n// Colors\nbody_color = \"silver\";\nhorn_color = \"gold\";\neye_color = \"blue\";\nfin_color = \"teal\";\n\nmodule monoceros() {\n    // Main body - elongated dolphin-like form\n    color(body_color)\n    union() {\n        // Torso\n        translate([0, 0, 10])\n        scale([2, 1, 0.8])\n        sphere(15);\n        \n        // Tail section\n        translate([-25, 0, 10])\n        scale([2.5, 0.8, 0.6])\n        sphere(12);\n        \n        // Head\n        translate([20, 0, 15])\n        scale([1.2, 0.9, 1.1])\n        sphere(12);\n    }\n    \n    // Single spiral horn\n    color(horn_color)\n    translate([28, 0, 25])\n    rotate([0, 0, 0])\n    cylinder(h1=18, h2=0, r1=2, r2=0.5, $fn=8);\n    \n    // Add spiral ridges to horn\n    for(i=[0:30:360]) {\n        color(horn_color)\n        translate([28 + sin(i)*1.5, cos(i)*1.5, 25 + i/20])\n        rotate([0, 0, i])\n        scale([0.3, 0.3, 1])\n        cylinder(h=2, r=0.5, $fn=6);\n    }\n    \n    // Dorsal fin - shark-like\n    color(fin_color)\n    translate([-10, 0, 22])\n    rotate([0, 0, 0])\n    linear_extrude(height=0.1)\n    polygon(points=[\n        [0, 0],\n        [-8, 12],\n        [-16, 0],\n        [-12, 15],\n        [-8, 0]\n    ]);\n    \n    // Side fins\n    for(side=[-1, 1]) {\n        color(fin_color)\n        translate([5, side*12, 12])\n        rotate([0, side*20, 0])\n        scale([1, 0.3, 1])\n        cylinder(h=10, r1=5, r2=2, $fn=6);\n    }\n    \n    // Tail fluke\n    color(fin_color)\n    translate([-38, 0, 10])\n    rotate([0, 90, 0])\n    scale([1.5, 1, 0.3])\n    sphere(8);\n    \n    // Eye\n    color(eye_color)\n    translate([25, 6, 18])\n    sphere(2);\n    \n    // Nostril\n    color(body_color)\n    translate([27, 2, 16])\n    sphere(1);\n    \n    // Scale pattern along body\n    for(i=[-20:5:20]) {\n        for(j=[0:60:300]) {\n            color(\"lightgray\")\n            translate([i, \n                     15*sin(j) + sin(i*2)*2, \n                     10 + 15*cos(j) + cos(i*2)*2])\n            scale([2, 1, 0.5])\n            sphere(1.5);\n        }\n    }\n    \n    // Magical aura effect (subtle ridges)\n    for(i=[-30:10:30]) {\n        color(\"white\", 0.3)\n        translate([i, 0, 25 + sin(i)*3])\n        rotate([0, 90, 0])\n        cylinder(h=0.5, r=20 - abs(i)/2, $fn=16);\n    }\n}\n\n// Generate the creature\nscale([scale_factor, scale_factor, scale_factor])\nmonoceros();",
    "renders": true
  },
  {
    "mythical_creature": "mothman",
    "openscad_code": "// Mothman - Realistic style, medium complexity\n// Designed for 3D printing - 80mm tall\n\n// Main parameters\n$fn=60;\nbody_width = 20;\nbody_height = 35;\nhead_size = 12;\nwing_span = 60;\nleg_length = 25;\n\n// Color definitions\ndark_gray = [0.2, 0.2, 0.25];\nred = [0.8, 0.1, 0.1];\nblack = [0.05, 0.05, 0.05];\neye_red = [1, 0, 0];\n\nmodule mothman() {\n    union() {\n        // Body - segmented thorax and abdomen\n        color(dark_gray)\n        union() {\n            // Thorax (upper body segment)\n            translate([0, 0, leg_length + 5])\n                scale([1.2, 0.8, 1.5])\n                sphere(d=body_width);\n            \n            // Abdomen (lower body segment)\n            translate([0, 0, leg_length - 5])\n                scale([0.8, 0.6, 1.2])\n                sphere(d=body_height);\n        }\n        \n        // Head with red glowing eyes\n        color(dark_gray)\n        translate([0, 0, leg_length + 20])\n            sphere(d=head_size);\n        \n        // Large red compound eyes\n        color(eye_red)\n        union() {\n            translate([head_size/2.5, head_size/1.5, leg_length + 20])\n                sphere(d=head_size/2);\n            translate([-head_size/2.5, head_size/1.5, leg_length + 20])\n                sphere(d=head_size/2);\n        }\n        \n        // Antennae\n        color(black)\n        union() {\n            translate([head_size/3, head_size/1.5, leg_length + 27])\n                rotate([0, 30, 0])\n                cylinder(h=15, d1=2, d2=0.5);\n            translate([-head_size/3, head_size/1.5, leg_length + 27])\n                rotate([0, -30, 0])\n                cylinder(h=15, d1=2, d2=0.5);\n        }\n        \n        // Large moth wings with eye patterns\n        wings();\n        \n        // Six legs (moth-like)\n        legs();\n        \n        // Small horns on head\n        color(black)\n        union() {\n            translate([0, head_size/2, leg_length + 25])\n                cylinder(h=5, d1=3, d2=1);\n            translate([head_size/4, head_size/2.2, leg_length + 24])\n                rotate([0, 10, 0])\n                cylinder(h=4, d1=2, d2=1);\n            translate([-head_size/4, head_size/2.2, leg_length + 24])\n                rotate([0, -10, 0])\n                cylinder(h=4, d1=2, d2=1);\n        }\n    }\n}\n\nmodule wings() {\n    // Left wing\n    color([0.15, 0.15, 0.2])\n    translate([body_width/2, 0, leg_length + 15])\n    rotate([0, 0, 45])\n    scale([1, 0.1, 1])\n    difference() {\n        // Main wing shape\n        scale([2.5, 1, 1])\n        sphere(d=wing_span/2);\n        \n        // Cut wing into proper shape\n        translate([0, -wing_span/2, 0])\n            cube([wing_span, wing_span, wing_span], center=true);\n    }\n    \n    // Right wing\n    mirror([1, 0, 0])\n    translate([body_width/2, 0, leg_length + 15])\n    rotate([0, 0, 45])\n    scale([1, 0.1, 1])\n    difference() {\n        scale([2.5, 1, 1])\n        sphere(d=wing_span/2);\n        \n        translate([0, -wing_span/2, 0])\n            cube([wing_span, wing_span, wing_span], center=true);\n    }\n    \n    // Eye patterns on wings\n    color(red)\n    for(i = [-1, 1]) {\n        translate([i * (body_width/2 + 15), 0, leg_length + 15])\n        rotate([0, 0, i * 45])\n        scale([1, 0.2, 1])\n        difference() {\n            sphere(d=10);\n            sphere(d=8);\n        }\n    }\n}\n\nmodule legs() {\n    // Front pair\n    for(side = [-1, 1]) {\n        color(dark_gray)\n        translate([side * body_width/3, 0, leg_length])\n        rotate([0, side * 20, 0])\n        cylinder(h=leg_length, d=3);\n    }\n    \n    // Middle pair\n    for(side = [-1, 1]) {\n        color(dark_gray)\n        translate([side * body_width/2.5, 0, leg_length - 3])\n        rotate([0, side * 15, 0])\n        cylinder(h=leg_length + 2, d=3);\n    }\n    \n    // Back pair\n    for(side = [-1, 1]) {\n        color(dark_gray)\n        translate([side * body_width/3.5, 0, leg_length - 6])\n        rotate([0, side * 10, 0])\n        cylinder(h=leg_length + 4, d=3);\n    }\n}\n\n// Generate the complete model\nmothman();",
    "renders": true
  },
  {
    "mythical_creature": "nachzehrer",
    "openscad_code": "// Nachzehrer - Mythical German vampire creature\n// Features shroud-like wings, skeletal body, elongated limbs, and deathly aura\n\n$fn = 32;\n\n// Main body module\nmodule nachzehrer() {\n    color(\"darkslategray\")\n    union() {\n        // Torso - elongated skeletal chest\n        translate([0, 0, 25])\n        scale([1.2, 0.6, 2])\n        sphere(r=8);\n        \n        // Pelvis\n        translate([0, 0, 10])\n        scale([1.5, 0.8, 0.8])\n        sphere(r=6);\n        \n        // Spine ridge\n        for(i=[0:8]) {\n            translate([0, 0, 15 + i*2])\n            scale([0.3, 0.8, 0.3])\n            sphere(r=3);\n        }\n        \n        // Head - elongated skull\n        color(\"dimgray\")\n        translate([0, 0, 40])\n        union() {\n            // Skull base\n            scale([0.8, 0.6, 1.4])\n            sphere(r=8);\n            \n            // Snout\n            translate([0, -6, -2])\n            scale([0.5, 0.8, 0.6])\n            sphere(r=5);\n            \n            // Eye sockets\n            difference() {\n                // Left eye\n                translate([-3, -3, 2])\n                sphere(r=2);\n                // Right eye\n                translate([3, -3, 2])\n                sphere(r=2);\n            }\n            \n            // Horns - small curved horns\n            color(\"darkslategray\")\n            // Left horn\n            translate([-4, 0, 6])\n            rotate([0, 15, -30])\n            cylinder(h=8, r1=1.5, r2=0.5);\n            // Right horn\n            translate([4, 0, 6])\n            rotate([0, 15, 30])\n            cylinder(h=8, r1=1.5, r2=0.5);\n        }\n        \n        // Arms - elongated skeletal\n        color(\"dimgray\")\n        // Left arm\n        translate([-12, 0, 30])\n        rotate([0, 0, -20])\n        union() {\n            // Upper arm\n            cylinder(h=12, r=2);\n            // Elbow joint\n            translate([0, 0, -12])\n            sphere(r=2.5);\n            // Forearm\n            translate([0, 0, -12])\n            rotate([0, 0, 15])\n            cylinder(h=15, r=1.5);\n            // Hand - claw-like\n            translate([0, 0, -15])\n            scale([1, 0.3, 2])\n            sphere(r=2);\n        }\n        \n        // Right arm\n        translate([12, 0, 30])\n        mirror([1, 0, 0])\n        rotate([0, 0, -20])\n        union() {\n            // Upper arm\n            cylinder(h=12, r=2);\n            // Elbow joint\n            translate([0, 0, -12])\n            sphere(r=2.5);\n            // Forearm\n            translate([0, 0, -12])\n            rotate([0, 0, 15])\n            cylinder(h=15, r=1.5);\n            // Hand - claw-like\n            translate([0, 0, -15])\n            scale([1, 0.3, 2])\n            sphere(r=2);\n        }\n        \n        // Legs\n        color(\"dimgray\")\n        // Left leg\n        translate([-5, 0, 5])\n        rotate([15, 0, 0])\n        union() {\n            // Thigh\n            cylinder(h=15, r=2.5);\n            // Knee\n            translate([0, 0, -15])\n            sphere(r=2.5);\n            // Shin\n            translate([0, 0, -15])\n            rotate([-30, 0, 0])\n            cylinder(h=12, r=2);\n            // Foot\n            translate([0, 0, -12])\n            rotate([30, 0, 0])\n            scale([1.5, 0.8, 0.5])\n            cube([5, 3, 2], center=true);\n        }\n        \n        // Right leg\n        translate([5, 0, 5])\n        mirror([1, 0, 0])\n        rotate([15, 0, 0])\n        union() {\n            // Thigh\n            cylinder(h=15, r=2.5);\n            // Knee\n            translate([0, 0, -15])\n            sphere(r=2.5);\n            // Shin\n            translate([0, 0, -15])\n            rotate([-30, 0, 0])\n            cylinder(h=12, r=2);\n            // Foot\n            translate([0, 0, -12])\n            rotate([30, 0, 0])\n            scale([1.5, 0.8, 0.5])\n            cube([5, 3, 2], center=true);\n        }\n        \n        // Wings - tattered shroud-like membranes\n        color(\"darkslateblue\")\n        // Left wing\n        translate([-12, 0, 35])\n        rotate([0, 0, -45])\n        difference() {\n            // Main wing membrane\n            scale([1, 0.1, 2])\n            sphere(r=15);\n            // Tears and holes\n            for(i=[1:3]) {\n                translate([-5-i*3, 0, -5-i*2])\n                sphere(r=3+i);\n            }\n        }\n        \n        // Right wing\n        translate([12, 0, 35])\n        rotate([0, 0, 45])\n        mirror([1, 0, 0])\n        difference() {\n            // Main wing membrane\n            scale([1, 0.1, 2])\n            sphere(r=15);\n            // Tears and holes\n            for(i=[1:3]) {\n                translate([-5-i*3, 0, -5-i*2])\n                sphere(r=3+i);\n            }\n        }\n        \n        // Deathly aura particles\n        color(\"darkviolet\")\n        for(i=[1:8]) {\n            rotate([0, 0, i*45])\n            translate([20, 0, 30 - i*3])\n            sphere(r=0.5);\n        }\n    }\n}\n\n// Create the nachzehrer\nscale([1, 1, 1])\nnachzehrer();",
    "renders": true
  },
  {
    "mythical_creature": "nian",
    "openscad_code": "// Nian - Chinese mythical beast\n// Medium complexity realistic style\n\nscale = 1; // Overall scale factor\nbody_len = 40 * scale;\nbody_wid = 25 * scale;\nbody_hgt = 30 * scale;\nhead_len = 20 * scale;\nhead_hgt = 18 * scale;\n\n// Main body assembly\nmodule nian_body() {\n    color(\"darkred\") union() {\n        // Main torso\n        translate([0, 0, body_hgt/2])\n            scale([1.2, 0.7, 1])\n                sphere(d = body_wid, $fn=32);\n                \n        // Chest bulge\n        translate([-body_len/4, 0, body_hgt/3])\n            sphere(d = body_wid * 0.8, $fn=24);\n                \n        // Rump\n        translate([body_len/3, 0, body_hgt/3])\n            sphere(d = body_wid * 0.9, $fn=24);\n    }\n}\n\n// Head with lion features\nmodule nian_head() {\n    color(\"firebrick\") union() {\n        // Main head shape\n        translate([-body_len/2 - head_len/2, 0, body_hgt/2])\n            scale([1.3, 1, 1.1])\n                sphere(d = head_len, $fn=32);\n                \n        // Snout\n        translate([-body_len/2 - head_len - 5, 0, body_hgt/2 - 2])\n            scale([1, 0.7, 0.6])\n                sphere(d = head_len * 0.7, $fn=24);\n                \n        // Jaw\n        translate([-body_len/2 - head_len - 7, 0, body_hgt/2 - 8])\n            cube([14, head_len * 0.6, 6], center=true);\n    }\n}\n\n// Curved horns\nmodule horn(pos, angle) {\n    color(\"goldenrod\") translate(pos) rotate([0, 0, angle]) \n        for(i = [0:5]) {\n            translate([i*2, 0, i*1.5])\n                rotate([0, 15*i, 0])\n                    cylinder(h=3, d1=4-i*0.3, d2=3-i*0.2, $fn=8);\n        }\n}\n\n// Scaled back\nmodule scales() {\n    color(\"crimson\") for(i = [0:4]) {\n        translate([i*5 - 10, 0, body_hgt + i*2])\n            scale([1, 0.8, 0.3])\n                sphere(d = 6 - i*0.5, $fn=16);\n    }\n}\n\n// Clawed feet\nmodule foot(pos, side) {\n    color(\"sienna\") translate(pos) mirror([side, 0, 0]) {\n        // Upper leg\n        rotate([-30, 0, 20]) \n            cylinder(h=8, d=4, $fn=12);\n            \n        // Lower leg  \n        translate([0, 0, -8]) rotate([50, 0, 0])\n            cylinder(h=6, d=3, $fn=12);\n            \n        // Paw\n        translate([0, 0, -14])\n            sphere(d=5, $fn=12);\n            \n        // Claws\n        for(a=[-20, 0, 20]) {\n            rotate([0, 0, a]) translate([0, 3, -14])\n                cylinder(h=3, d1=1.5, d2=0.5, $fn=6);\n        }\n    }\n}\n\n// Flowing mane\nmodule mane() {\n    color(\"gold\") for(i=[0:7]) {\n        angle = i * 45;\n        rotate([0, 0, angle]) translate([-body_len/2 - head_len/2, 0, body_hgt/2 + 8])\n            scale([0.3, 1, 0.1])\n                cylinder(h=12, d=4, $fn=8);\n    }\n}\n\n// Wing assembly\nmodule wing(side) {\n    color(\"darkred\") mirror([side, 0, 0]) translate([5, 0, body_hgt/2 + 10]) {\n        // Wing base\n        rotate([0, 30, 0]) scale([1, 0.3, 0.1])\n            sphere(d=20, $fn=16);\n            \n        // Wing membrane supports\n        for(i=[0:3]) {\n            rotate([0, -30 - i*10, 20*i]) \n                cylinder(h=15 + i*3, d=1.5, $fn=8);\n        }\n    }\n}\n\n// Tail with tuft\nmodule tail() {\n    color(\"firebrick\") translate([body_len/2 + 5, 0, body_hgt/3]) {\n        // Tail segments\n        for(i=[0:4]) {\n            translate([i*3, 0, -i*1.5]) rotate([0, -10*i, 0])\n                cylinder(h=3, d=4-i*0.4, $fn=12);\n        }\n        \n        // Tuft\n        translate([15, 0, -8])\n            sphere(d=6, $fn=16);\n    }\n}\n\n// Eye\nmodule eye(pos) {\n    color(\"yellow\") translate(pos) {\n        sphere(d=3, $fn=16);\n        color(\"black\") translate([0, 1.5, 0]) sphere(d=1.5, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    nian_body();\n    nian_head();\n    \n    // Horns\n    horn([-body_len/2 - head_len - 2, 8, body_hgt/2 + 8], -30);\n    horn([-body_len/2 - head_len - 2, -8, body_hgt/2 + 8], 30);\n    \n    // Scales\n    scales();\n    \n    // Feet\n    foot([-body_len/4, 10, 0], -1);\n    foot([-body_len/4, -10, 0], 1);\n    foot([body_len/4, 8, 0], -1);\n    foot([body_len/4, -8, 0], 1);\n    \n    // Mane\n    mane();\n    \n    // Wings\n    wing(1);\n    wing(-1);\n    \n    // Tail\n    tail();\n    \n    // Eyes\n    eye([-body_len/2 - head_len - 5, 6, body_hgt/2]);\n    eye([-body_len/2 - head_len - 5, -6, body_hgt/2]);\n}",
    "renders": true
  },
  {
    "mythical_creature": "nicor",
    "openscad_code": "// Nicor - Scandinavian water dragon\n// 3D printable model with moderate detail\n\n// Wings\nmodule wing() {\n    color(\"darkgreen\")\n    union() {\n        // Main wing shape\n        rotate([0, 90, 0])\n            scale([1, 0.2, 2])\n                cube([15, 1, 20], center=true);\n        \n        // Wing membrane segments\n        for(i = [0:2]) {\n            translate([0, 0, -10 + i*8])\n                rotate([0, 90, 0])\n                    scale([0.8 - i*0.2, 0.1, 1.5 - i*0.2])\n                        cube([12, 0.5, 15], center=true);\n        }\n    }\n}\n\n// Body scales pattern\nmodule scales(height, width, depth) {\n    color(\"darkslategray\")\n    difference() {\n        cube([width, depth, height], center=true);\n        // Add scale texture\n        for(i = [-4:4]) {\n            for(j = [-2:2]) {\n                translate([i*3, j*3, height/2 + 0.5])\n                    sphere(r=1, $fn=8);\n            }\n        }\n    }\n}\n\n// Head\nmodule head() {\n    color(\"darkgreen\")\n    union() {\n        // Snout\n        translate([0, 0, 5])\n            scale([1.2, 0.8, 1.5])\n                sphere(r=8, $fn=16);\n        \n        // Main head\n        sphere(r=10, $fn=16);\n        \n        // Horns\n        color(\"black\")\n        for(angle = [45, -45]) {\n            rotate([0, 0, angle])\n                translate([8, 0, 8])\n                    rotate([90, 0, 0])\n                        cylinder(h=12, r1=3, r2=1, $fn=8);\n        }\n        \n        // Eyes\n        color(\"red\")\n        for(x = [-4, 4]) {\n            translate([x, 7, 2])\n                sphere(r=2, $fn=8);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(\"darkgreen\")\n    for(i = [0:6]) {\n        translate([0, 0, -10 - i*8])\n            scale([1 - i*0.12, 1 - i*0.12, 1])\n                rotate([0, 10*i, 0])\n                    scales(6, 12 - i*1.5, 12 - i*1.5);\n    }\n}\n\n// Legs\nmodule leg(side) {\n    color(\"darkslategray\")\n    translate([side*7, 0, -5])\n        union() {\n            // Upper leg\n            scale([1, 1, 2])\n                cube([6, 6, 10], center=true);\n            \n            // Lower leg\n            translate([0, 0, -8])\n                scale([0.8, 0.8, 1.5])\n                    cube([5, 5, 8], center=true);\n            \n            // Webbed foot\n            translate([0, 0, -16])\n                scale([1.5, 2, 0.5])\n                    cube([4, 8, 2], center=true);\n        }\n}\n\n// Main body\nmodule nicor() {\n    // Body\n    color(\"darkgreen\")\n    union() {\n        // Torso\n        scales(15, 25, 20);\n        \n        // Head\n        translate([0, 0, 18])\n            head();\n        \n        // Wings\n        for(side = [-1, 1]) {\n            translate([side*15, 0, 8])\n                rotate([0, 0, side*30])\n                    wing();\n        }\n        \n        // Tail\n        translate([0, 0, -15])\n            tail();\n        \n        // Legs\n        for(side = [-1, 1]) {\n            leg(side);\n        }\n        \n        // Dorsal fins\n        color(\"darkslategray\")\n        for(i = [-2:2]) {\n            if(i != 0) {\n                translate([i*5, 0, 10])\n                    scale([1, 0.2, 2])\n                        cube([3, 1, 8], center=true);\n            }\n        }\n    }\n}\n\n// Create the nicor\nscale(0.5)\n    nicor();",
    "renders": true
  },
  {
    "mythical_creature": "nixie",
    "openscad_code": "// Nixie - Water Sprite in Realistic Style\n// Medium complexity with 3D-printable features\n\n// Overall dimensions: 70mm tall, 60mm wing span\n\n// Main body module\nmodule nixie_body() {\n    color(\"deepskyblue\") \n    difference() {\n        // Torso - elongated teardrop shape\n        scale([1, 1.2, 1.5]) \n        sphere(d=25, $fn=32);\n        \n        // Hollow center for printing\n        translate([0, 0, -5])\n        scale([0.8, 0.8, 0.9])\n        sphere(d=25, $fn=32);\n    }\n}\n\n// Head with nixie features\nmodule nixie_head() {\n    color(\"lightblue\") {\n        // Main head shape\n        translate([0, 0, 35])\n        scale([0.8, 0.7, 1])\n        sphere(d=20, $fn=32);\n        \n        // Pointed ears\n        for(side = [-1, 1]) {\n            translate([side * 8, 0, 42])\n            rotate([0, -20 * side, 0])\n            scale([0.3, 0.2, 1])\n            cylinder(h=8, d1=3, d2=0, $fn=8);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 5, -7, 35])\n            color(\"darkblue\")\n            sphere(d=3, $fn=16);\n        }\n        \n        // Small nose\n        translate([0, -9, 32])\n        color(\"skyblue\")\n        sphere(d=2, $fn=16);\n    }\n}\n\n// Water wings - fin-like appendages\nmodule water_wings() {\n    color(\"cyan\") {\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, 15])\n            rotate([0, -20 * side, 10 * side])\n            scale([1, 0.3, 0.8])\n            difference() {\n                sphere(d=25, $fn=32);\n                translate([side * -5, 0, 0])\n                sphere(d=20, $fn=32);\n            }\n        }\n    }\n}\n\n// Webbed hands\nmodule webbed_hands() {\n    color(\"lightcyan\") {\n        for(side = [-1, 1]) {\n            translate([side * 12, -8, 5])\n            rotate([0, 0, 45 * side])\n            scale([0.8, 0.3, 0.2])\n            sphere(d=8, $fn=16);\n            \n            // Fingers\n            for(i = [0:2]) {\n                translate([side * (12 + i * 2), -9, 4])\n                rotate([0, 0, (30 + i * 10) * side])\n                cylinder(h=6, d1=2, d2=1, $fn=8);\n            }\n        }\n    }\n}\n\n// Fish tail\nmodule fish_tail() {\n    color(\"steelblue\") {\n        translate([0, 0, -25])\n        rotate([0, 0, 0]) {\n            // Upper tail fin\n            translate([0, 0, -5])\n            scale([0.5, 0.1, 2])\n            sphere(d=20, $fn=32);\n            \n            // Lower tail fin\n            translate([0, 0, -15])\n            rotate([20, 0, 0])\n            scale([0.3, 0.1, 1.5])\n            sphere(d=15, $fn=32);\n            \n            // Tail segments\n            for(i = [0:3]) {\n                translate([0, 0, -20 - i * 5])\n                scale([1 - i * 0.15, 1 - i * 0.15, 0.5])\n                sphere(d=15 - i * 3, $fn=32);\n            }\n        }\n    }\n}\n\n// Water droplets - magical effect\nmodule water_droplets() {\n    color(\"lightblue\", 0.7) {\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n            translate([12 + sin(i * 60) * 5, 0, 15 + cos(i * 45) * 8])\n            sphere(d=2 + sin(i * 90) * 1, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    nixie_body();\n    nixie_head();\n    water_wings();\n    webbed_hands();\n    fish_tail();\n    \n    // Magical elements\n    water_droplets();\n}\n\n// Base for printing stability\ncolor(\"darkblue\") {\n    translate([0, 0, -30])\n    scale([1.2, 1.2, 0.5])\n    cylinder(h=3, d=30, $fn=32);\n}",
    "renders": true
  },
  {
    "mythical_creature": "nuckelavee",
    "openscad_code": "// Nuckelavee - Scottish water demon\n// Half-man, half-horse with no skin\n// Designed for 3D printing - 80mm tall\n\n// Overall scale factor\nscale(0.4) {\n\n// Main body - horse torso\ncolor(\"DarkRed\") {\n    union() {\n        // Horse torso\n        translate([0, 0, 40]) rotate([90, 0, 0]) cylinder(h=60, r1=25, r2=20, $fn=20);\n        \n        // Horse abdomen\n        translate([0, 0, 20]) rotate([90, 0, 0]) cylinder(h=30, r1=20, r2=15, $fn=15);\n        \n        // Chest cavity (hollowed)\n        difference() {\n            translate([0, 0, 45]) rotate([90, 0, 0]) cylinder(h=40, r1=20, r2=15, $fn=15);\n            translate([0, 0, 45]) rotate([90, 0, 0]) cylinder(h=40, r1=15, r2=10, $fn=15);\n        }\n    }\n}\n\n// Human torso fused to horse back\ncolor(\"DarkRed\") {\n    translate([0, -15, 85]) rotate([-20, 0, 0]) {\n        // Human torso\n        cylinder(h=35, r1=12, r2=8, $fn=12);\n        \n        // Ribs visible\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72]) \n            translate([10, 0, 8 + i * 5]) \n            sphere(2.5);\n        }\n    }\n}\n\n// Horse head\ncolor(\"DarkRed\") {\n    translate([0, 55, 35]) rotate([-30, 0, 0]) {\n        // Skull shape\n        union() {\n            sphere(18);\n            translate([0, 15, 0]) sphere(12);\n        }\n        \n        // Eye sockets\n        difference() {\n            sphere(18);\n            translate([7, 5, 5]) sphere(5);\n            translate([-7, 5, 5]) sphere(5);\n        }\n        \n        // Teeth\n        for(i = [-6:6]) {\n            translate([i * 2, 18, -8]) cube([1.5, 4, 3]);\n        }\n    }\n}\n\n// Human head\ncolor(\"DarkRed\") {\n    translate([0, -25, 115]) {\n        // Skull\n        sphere(10);\n        \n        // Eye sockets\n        difference() {\n            sphere(10);\n            translate([4, 3, 3]) sphere(3);\n            translate([-4, 3, 3]) sphere(3);\n        }\n        \n        // Jaw\n        translate([0, 8, -5]) rotate([20, 0, 0]) cube([8, 15, 5], center=true);\n        \n        // Mouth opening\n        translate([0, 12, -7]) sphere(3);\n    }\n}\n\n// Legs - horse\nmodule horseLeg(x, z) {\n    color(\"DarkRed\") {\n        // Upper leg\n        translate([x, 0, z]) rotate([0, -10, 0]) \n            cylinder(h=35, r1=8, r2=6, $fn=8);\n        \n        // Lower leg\n        translate([x, 0, z - 35]) rotate([0, 10, 0]) \n            cylinder(h=30, r1=6, r2=4, $fn=8);\n        \n        // Hoof\n        translate([x, 0, z - 65]) \n            cylinder(h=8, r1=6, r2=8, $fn=8);\n    }\n}\n\n// Front legs\nhorseLeg(20, 40);\nhorseLeg(-20, 40);\n\n// Back legs\nhorseLeg(15, 20);\nhorseLeg(-15, 20);\n\n// Arms - human\nmodule humanArm(x) {\n    color(\"DarkRed\") {\n        // Upper arm\n        translate([x, -15, 100]) rotate([0, 0, 45 * x]) \n            cylinder(h=25, r1=4, r2=3, $fn=8);\n        \n        // Forearm\n        translate([x + 15 * (x > 0 ? 1 : -1), -15, 85]) rotate([0, 0, 45 * x]) \n            cylinder(h=20, r1=3, r2=2, $fn=8);\n        \n        // Hand\n        translate([x + 25 * (x > 0 ? 1 : -1), -15, 75]) \n            sphere(3);\n    }\n}\n\nhumanArm(12);\nhumanArm(-12);\n\n// Exposed muscle sinew\ncolor(\"FireBrick\") {\n    for(i = [1:5]) {\n        // Horse body sinew\n        rotate([0, 0, i * 72]) \n        translate([20 + i * 2, 0, 45]) \n        cylinder(h=5, r1=2, r2=1, $fn=6);\n        \n        // Human torso sinew\n        rotate([0, 0, i * 72]) \n        translate([10 + i, -15, 85 + i * 2]) \n        sphere(1.5);\n    }\n}\n\n// Flayed skin flaps\ncolor(\"Crimson\") {\n    // Horse neck flaps\n    for(i = [0:3]) {\n        translate([0, 45 - i * 5, 45 - i * 3]) \n        rotate([0, 30 - i * 10, 0]) \n        cube([30 - i * 4, 2, 10 - i * 2]);\n    }\n    \n    // Human back flaps\n    for(i = [0:2]) {\n        translate([0, -15 - i * 5, 100 - i * 5]) \n        rotate([0, 20 - i * 10, 0]) \n        cube([20 - i * 3, 2, 8 - i * 2]);\n    }\n}\n\n// Tail - exposed spine\ncolor(\"FireBrick\") {\n    for(i = [0:8]) {\n        translate([0, -25 - i * 3, 25 - i * 2]) \n        rotate([0, 10 + i * 5, 0]) \n        cylinder(h=4, r1=3 - i * 0.2, r2=2 - i * 0.2, $fn=6);\n    }\n}\n\n// One large red eye in center of human head\ncolor(\"Red\") {\n    translate([0, -25, 115]) sphere(3);\n}\n\n}",
    "renders": true
  },
  {
    "mythical_creature": "ogopogo",
    "openscad_code": "// Ogopogo - Lake Monster from Canadian folklore\n// Realistic style, medium complexity\n\n// Color definitions\nbody_color = \"darkgreen\";\nfin_color = \"seagreen\";\nhorn_color = \"goldenrod\";\neye_color = \"red\";\n\n// Main module for Ogopogo\nmodule ogopogo() {\n    // Body segments\n    union() {\n        // Head\n        translate([0, 0, 15]) {\n            color(body_color) {\n                // Main head shape\n                sphere(8, $fn=32);\n                \n                // Snout\n                translate([7, 0, 0])\n                    scale([2, 1, 0.8])\n                    sphere(4, $fn=16);\n                \n                // Horns\n                translate([2, 5, 8])\n                    rotate([30, 0, 45])\n                    color(horn_color)\n                    cylinder(h=12, r1=1.5, r2=0.5, $fn=8);\n                \n                translate([2, -5, 8])\n                    rotate([30, 0, -45])\n                    color(horn_color)\n                    cylinder(h=12, r1=1.5, r2=0.5, $fn=8);\n                \n                // Eyes\n                translate([6, 3, 3])\n                    color(eye_color)\n                    sphere(1.5, $fn=16);\n                \n                translate([6, -3, 3])\n                    color(eye_color)\n                    sphere(1.5, $fn=16);\n            }\n        }\n        \n        // Neck\n        translate([-5, 0, 10])\n            color(body_color)\n            scale([1.5, 1, 0.8])\n            rotate([0, 10, 0])\n            cylinder(h=10, r1=4, r2=3, $fn=16);\n        \n        // Body segments\n        for(i = [0:4]) {\n            translate([-15 - i*8, 0, 8 - i*1.5]) {\n                color(body_color) {\n                    // Main body segment\n                    scale([1, 0.8, 0.6])\n                    sphere(7 - i*0.8, $fn=24);\n                    \n                    // Dorsal fin\n                    if(i < 3) {\n                        translate([-2, 0, 3])\n                            color(fin_color)\n                            rotate([0, 90, 0])\n                            linear_extrude(height=0.5)\n                            polygon(points=[[0,0], [4,3], [8,0], [4,-3]]);\n                    }\n                    \n                    // Side fins\n                    if(i < 4) {\n                        translate([0, 4 + i*0.5, -1])\n                            color(fin_color)\n                            rotate([0, 0, 20])\n                            scale([1.2, 0.8, 0.3])\n                            sphere(2, $fn=16);\n                        \n                        translate([0, -4 - i*0.5, -1])\n                            color(fin_color)\n                            rotate([0, 0, -20])\n                            scale([1.2, 0.8, 0.3])\n                            sphere(2, $fn=16);\n                    }\n                }\n            }\n        }\n        \n        // Tail\n        translate([-55, 0, 0]) {\n            color(body_color) {\n                // Tail connection\n                sphere(3, $fn=16);\n                \n                // Tail segments\n                for(j = [0:3]) {\n                    translate([-j*5, 0, 0]) {\n                        scale([1 - j*0.2, 1 - j*0.2, 0.3])\n                        rotate([0, j*10, 0])\n                        sphere(3 - j*0.5, $fn=16);\n                        \n                        // Tail fin\n                        if(j == 3) {\n                            translate([-2, 0, 0])\n                                color(fin_color)\n                                rotate([0, 90, 0])\n                                linear_extrude(height=0.5)\n                                polygon(points=[[0,0], [6,4], [12,0], [6,-4]]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Underside scales pattern\n        for(seg = [0:4]) {\n            for(sc = [0:3]) {\n                translate([-12 - seg*10, sc*2 - 3, 3 - seg*0.5]) {\n                    color(body_color)\n                    scale([0.8, 0.5, 0.2])\n                    sphere(1, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Base for stability during printing\nmodule base() {\n    color(\"gray\")\n    translate([0, 0, -2])\n    cube([120, 20, 2], center=true);\n}\n\n// Assembly\nunion() {\n    ogopogo();\n    base();\n}",
    "renders": true
  },
  {
    "mythical_creature": "ophiotaurus",
    "openscad_code": "// Ophiotaurs (serpent-bull)\n// Realistic medium-complexity model, 3D-printable, ~70 mm long\n\n// Overall scale factor\nscale_factor = 0.7;\n\n// Bull head\nmodule bull_head() {\n    color(\"SaddleBrown\")\n    union() {\n        // Skull base\n        translate([0, 0, 12])\n            scale([1, 1.2, 1])\n            sphere(8, $fn=32);\n\n        // Snout\n        translate([0, 11, 8])\n            rotate([0, 20, 0])\n            scale([1, 1.5, 0.8])\n            cylinder(h = 12, r1 = 6, r2 = 4, $fn=32);\n\n        // Horns\n        for (y = [-6, 6]) {\n            translate([0, y, 18])\n                rotate([25, 0, y * 5])\n                cylinder(h = 12, r1 = 2.5, r2 = 1, $fn=16);\n        }\n\n        // Eyes\n        for (y = [-4, 4]) {\n            translate([3.5, y, 13])\n                color(\"Black\")\n                sphere(1.5, $fn=16);\n        }\n    }\n}\n\n// Serpent neck and body\nmodule serpent_body() {\n    color(\"DarkOliveGreen\")\n    union() {\n        // Neck\n        hull() {\n            translate([-10, 0, 12])\n                sphere(6, $fn=32);\n            translate([-22, 0, 10])\n                sphere(5, $fn=32);\n        }\n\n        // Coiled tail segments\n        for (i = [0:4]) {\n            translate([cos(i*45)*-25 - 30, sin(i*45)*-25, 5])\n                sphere(4.5 - i*0.5, $fn=32);\n        }\n    }\n}\n\n// Bull torso\nmodule bull_torso() {\n    color(\"SaddleBrown\")\n    union() {\n        // Chest\n        translate([-18, 0, 8])\n            scale([1.5, 1.2, 1])\n            sphere(9, $fn=32);\n\n        // Belly\n        hull() {\n            translate([-18, 0, 8])\n                sphere(7, $fn=32);\n            translate([-38, 0, 6])\n                sphere(6, $fn=32);\n        }\n\n        // Legs (stylized cylinders, printable without supports)\n        for (x = [-32, -22], y = [-6, 6]) {\n            translate([x, y, 0])\n                cylinder(h = 6, r = 2.5, $fn=16);\n        }\n    }\n}\n\n// Scales along serpent portion\nmodule scales() {\n    color(\"DarkGreen\")\n    difference() {\n        serpent_body();\n        // Carve shallow grooves for scale pattern\n        for (i = [0:3]) {\n            translate([-20 - i*7, 0, 8])\n                rotate([0, 90, 0])\n                cylinder(h = 20, r = 0.5, $fn=8);\n        }\n    }\n}\n\n// Assembly\nscale(scale_factor)\nunion() {\n    bull_head();\n    translate([-5, 0, 0])\n        bull_torso();\n    scales();\n}",
    "renders": true
  },
  {
    "mythical_creature": "orc",
    "openscad_code": "// Realistic Orc Warrior (Medium Complexity)\n// Designed for 3D printing - no overhangs, 60mm height\n\n// Color definitions\n$fn = 32; // Smooth curves for printing\n\n// Main assembly\ncolor(\"darkolivegreen\") {\n    union() {\n        body();\n        head();\n        arms();\n        legs();\n        armor();\n        weapon();\n    }\n}\n\n// Body module\nmodule body() {\n    // Torso\n    translate([0, 0, 20]) {\n        difference() {\n            cylinder(h=25, r1=12, r2=10);\n            // Muscle definition\n            for(i = [0:45:360]) {\n                rotate([0, 0, i]) {\n                    translate([8, 0, 10]) {\n                        cube([4, 2, 15], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Shoulder joints\n    translate([12, 0, 35]) {\n        sphere(6);\n    }\n    translate([-12, 0, 35]) {\n        sphere(6);\n    }\n}\n\n// Head module\nmodule head() {\n    color(\"forestgreen\") {\n        translate([0, 0, 50]) {\n            union() {\n                // Main head shape\n                difference() {\n                    scale([1.1, 1, 1.2]) sphere(10);\n                    // Eye sockets\n                    translate([5, 8, 5]) {\n                        sphere(4);\n                    }\n                    translate([-5, 8, 5]) {\n                        sphere(4);\n                    }\n                    // Mouth cavity\n                    translate([0, 8, -5]) {\n                        sphere(6);\n                    }\n                }\n                \n                // Tusks\n                color(\"ivory\") {\n                    translate([3, 10, -5]) {\n                        rotate([0, -20, 30]) {\n                            cylinder(h=8, r1=2, r2=1);\n                        }\n                    }\n                    translate([-3, 10, -5]) {\n                        rotate([0, 20, -30]) {\n                            cylinder(h=8, r1=2, r2=1);\n                        }\n                    }\n                }\n                \n                // Nose\n                translate([0, 9, 2]) {\n                    sphere(3);\n                }\n                \n                // Ears\n                translate([8, 0, 5]) {\n                    rotate([0, 0, 30]) {\n                        scale([1, 0.3, 1.5]) sphere(4);\n                    }\n                }\n                translate([-8, 0, 5]) {\n                    rotate([0, 0, -30]) {\n                        scale([1, 0.3, 1.5]) sphere(4);\n                    }\n                }\n                \n                // Horns\n                color(\"dimgray\") {\n                    translate([6, -5, 8]) {\n                        rotate([0, 30, 45]) {\n                            cylinder(h=12, r1=2, r2=1);\n                        }\n                    }\n                    translate([-6, -5, 8]) {\n                        rotate([0, 30, -45]) {\n                            cylinder(h=12, r1=2, r2=1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Arms module\nmodule arms() {\n    // Right arm\n    translate([15, 0, 35]) {\n        rotate([0, 0, -45]) {\n            cylinder(h=20, r=4);\n            // Hand\n            translate([0, 0, -20]) {\n                sphere(5);\n                // Fingers\n                for(i = [0:90:270]) {\n                    rotate([0, 0, i]) {\n                        translate([3, 0, 0]) {\n                            cylinder(h=6, r=1.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Left arm\n    translate([-15, 0, 35]) {\n        rotate([0, 0, 45]) {\n            cylinder(h=20, r=4);\n            // Hand\n            translate([0, 0, -20]) {\n                sphere(5);\n            }\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    // Right leg\n    translate([6, 0, 0]) {\n        cylinder(h=20, r1=5, r2=3);\n        // Foot\n        translate([0, 0, -20]) {\n            scale([1.5, 1, 0.5]) sphere(4);\n        }\n    }\n    \n    // Left leg\n    translate([-6, 0, 0]) {\n        cylinder(h=20, r1=5, r2=3);\n        // Foot\n        translate([0, 0, -20]) {\n            scale([1.5, 1, 0.5]) sphere(4);\n        }\n    }\n}\n\n// Armor module\nmodule armor() {\n    color(\"dimgray\") {\n        // Shoulder pads\n        translate([12, 0, 35]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=3, r=8);\n            }\n        }\n        translate([-12, 0, 35]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=3, r=8);\n            }\n        }\n        \n        // Chest plate\n        translate([0, 0, 30]) {\n            difference() {\n                cube([20, 15, 10], center=true);\n                cube([18, 13, 11], center=true);\n            }\n        }\n        \n        // Belt\n        translate([0, 0, 20]) {\n            color(\"saddlebrown\") {\n                cube([22, 5, 3], center=true);\n            }\n        }\n    }\n}\n\n// Weapon module\nmodule weapon() {\n    color(\"dimgray\") {\n        // Axe head\n        translate([20, 0, 15]) {\n            union() {\n                // Blade\n                difference() {\n                    cube([12, 2, 15]);\n                    translate([6, 1, 7]) {\n                        rotate([0, 90, 0]) {\n                            cylinder(h=12, r=1);\n                        }\n                    }\n                }\n                // Handle connection\n                translate([0, 0, -8]) {\n                    cube([4, 4, 4], center=true);\n                }\n            }\n        }\n        \n        // Axe handle\n        color(\"saddlebrown\") {\n            translate([20, 0, 5]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=30, r=1.5);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "pard",
    "openscad_code": "// Pard - Mythical spotted leopard-cheetah hybrid\n// Realistic medium complexity version with 3D-printable features\n\n// Main body parameters\nbody_length = 45;\nbody_height = 22;\nbody_width = 18;\n\n// Head parameters\nhead_length = 15;\nhead_height = 12;\nhead_width = 10;\n\n// Leg parameters\nleg_height = 18;\nleg_radius = 3;\n\n// Tail parameters\ntail_length = 35;\ntail_segments = 8;\n\n// Wing parameters\nwing_span = 40;\nwing_depth = 20;\n\n// Colors\npard_body_color = [0.8, 0.6, 0.4];  // Sandy tan\npard_spot_color = [0.2, 0.15, 0.1];  // Dark brown\npard_wing_color = [0.9, 0.85, 0.8];  // Translucent membrane\n\nmodule pard_body() {\n    color(pard_body_color)\n    union() {\n        // Main torso\n        translate([-body_length/4, 0, 0])\n        scale([1.2, 1, 1])\n        sphere(d=body_height);\n        \n        // Chest bulge\n        translate([body_length/3, 0, -body_height/4])\n        sphere(d=body_height*1.1);\n        \n        // Hindquarters\n        translate([-body_length/2, 0, 0])\n        scale([0.9, 1.1, 0.9])\n        sphere(d=body_height*1.2);\n    }\n}\n\nmodule pard_head() {\n    color(pard_body_color)\n    translate([body_length/2 + head_length/2, 0, body_height/2 + 5])\n    union() {\n        // Main head shape\n        scale([1.3, 1, 0.8])\n        sphere(d=head_height);\n        \n        // Snout extension\n        translate([head_length/2, 0, -head_height/4])\n        scale([0.6, 0.8, 0.5])\n        sphere(d=head_height);\n        \n        // Ears\n        translate([0, head_width/2, head_height/2])\n        rotate([0, 30, 0])\n        cylinder(h=head_height/2, r1=2, r2=0.5);\n        \n        translate([0, -head_width/2, head_height/2])\n        rotate([0, -30, 0])\n        cylinder(h=head_height/2, r1=2, r2=0.5);\n    }\n}\n\nmodule pard_leg(position, angle) {\n    translate(position)\n    rotate([0, 0, angle])\n    union() {\n        // Upper leg\n        color(pard_body_color)\n        cylinder(h=leg_height*0.6, r1=leg_radius, r2=leg_radius*0.8);\n        \n        // Lower leg\n        translate([0, 0, -leg_height*0.6])\n        color(pard_body_color)\n        cylinder(h=leg_height*0.4, r1=leg_radius*0.8, r2=leg_radius*0.6);\n        \n        // Paw\n        translate([0, 0, -leg_height])\n        color(pard_body_color)\n        sphere(d=leg_radius*1.5);\n    }\n}\n\nmodule pard_tail() {\n    color(pard_body_color)\n    translate([-body_length/2 - tail_length/2, 0, body_height/3])\n    union() {\n        for(i = [0:tail_segments-1]) {\n            translate([-i*tail_length/tail_segments, 0, 0])\n            scale([1 - i*0.05, 1 - i*0.05, 1 - i*0.05])\n            sphere(d=body_height/3 * (1 - i*0.1));\n        }\n    }\n}\n\nmodule pard_wings() {\n    color(pard_wing_color, 0.8)\n    union() {\n        // Left wing\n        translate([0, body_width/2, body_height/2])\n        rotate([0, 30, 0])\n        difference() {\n            scale([1.5, 0.1, 1])\n            sphere(d=wing_span);\n            translate([0, -2, 0])\n            cube([wing_span*2, 5, wing_depth*2], center=true);\n        }\n        \n        // Right wing\n        translate([0, -body_width/2, body_height/2])\n        rotate([0, -30, 0])\n        mirror([0, 1, 0])\n        difference() {\n            scale([1.5, 0.1, 1])\n            sphere(d=wing_span);\n            translate([0, -2, 0])\n            cube([wing_span*2, 5, wing_depth*2], center=true);\n        }\n    }\n}\n\nmodule pard_spots() {\n    color(pard_spot_color)\n    for(i = [0:20]) {\n        theta = i * 137.5;  // Golden angle for natural distribution\n        r = pow(i/20, 0.7) * body_length/2.2;\n        x = cos(theta) * r;\n        y = sin(theta) * r * 0.7;\n        z = sin(i) * body_height/4 + body_height/2;\n        \n        translate([x, y, z])\n        scale([0.3, 0.3, 0.1])\n        sphere(d=body_height/5);\n    }\n}\n\n// Main assembly\nunion() {\n    pard_body();\n    pard_head();\n    pard_tail();\n    pard_wings();\n    \n    // Legs - positioned for stability\n    pard_leg([body_length/3, body_width/2 - 2, -body_height/2], 15);\n    pard_leg([body_length/3, -body_width/2 + 2, -body_height/2], -15);\n    pard_leg([-body_length/6, body_width/2 - 2, -body_height/2], -15);\n    pard_leg([-body_length/6, -body_width/2 + 2, -body_height/2], 15);\n    \n    // Spots pattern\n    pard_spots();\n}",
    "renders": true
  },
  {
    "mythical_creature": "peryton",
    "openscad_code": "// Peryton - Mythical deer-bird creature\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Main colors\ncolor_body = \"#8B4513\";\ncolor_wings = \"#2F4F4F\";\ncolor_horns = \"#DEB887\";\ncolor_eyes = \"#FF0000\";\ncolor_beak = \"#FFD700\";\n\nmodule peryton() {\n    // Body - deer-like torso\n    color(color_body) union() {\n        // Main body\n        rotate([90, 0, 0]) cylinder(h=30, d1=25, d2=20, center=true);\n        \n        // Chest\n        translate([0, 0, 5]) sphere(d=22);\n        \n        // Neck\n        translate([0, 0, 20]) cylinder(h=15, d=10);\n    }\n    \n    // Head\n    color(color_body) translate([0, 0, 30]) {\n        // Skull structure\n        rotate([90, 0, 0]) cylinder(h=20, d1=12, d2=8);\n        \n        // Snout - bird-like\n        translate([0, 10, 0]) color(color_beak) rotate([90, 0, 0]) \n            cylinder(h=15, d1=4, d2=8);\n    }\n    \n    // Eyes\n    color(color_eyes) {\n        translate([-4, 8, 28]) sphere(d=3);\n        translate([4, 8, 28]) sphere(d=3);\n    }\n    \n    // Antlers (deer-like)\n    color(color_horns) {\n        // Left antler\n        translate([-6, 0, 38]) {\n            rotate([0, 0, -20]) cylinder(h=12, d=2);\n            translate([0, 0, 8]) rotate([0, 0, -45]) cylinder(h=8, d=1.5);\n            translate([0, 0, 8]) rotate([0, 0, 45]) cylinder(h=6, d=1.5);\n        }\n        \n        // Right antler\n        translate([6, 0, 38]) {\n            rotate([0, 0, 20]) cylinder(h=12, d=2);\n            translate([0, 0, 8]) rotate([0, 0, 45]) cylinder(h=8, d=1.5);\n            translate([0, 0, 8]) rotate([0, 0, -45]) cylinder(h=6, d=1.5);\n        }\n    }\n    \n    // Wings - bird-like with feather texture\n    color(color_wings) {\n        // Left wing\n        translate([-15, -5, 10]) {\n            rotate([0, 0, 20]) {\n                // Main wing\n                scale([1, 2, 0.5]) sphere(d=20);\n                \n                // Feathers\n                for(i = [0:2]) {\n                    translate([-5-i*2, -10-i*3, 0]) \n                        rotate([0, 0, -30-i*10]) \n                        scale([0.5, 1.2, 0.2]) \n                        sphere(d=8);\n                }\n            }\n        }\n        \n        // Right wing\n        translate([15, -5, 10]) {\n            rotate([0, 0, -20]) {\n                // Main wing\n                scale([1, 2, 0.5]) sphere(d=20);\n                \n                // Feathers\n                for(i = [0:2]) {\n                    translate([5+i*2, -10-i*3, 0]) \n                        rotate([0, 0, 30+i*10]) \n                        scale([0.5, 1.2, 0.2]) \n                        sphere(d=8);\n                }\n            }\n        }\n    }\n    \n    // Legs\n    color(color_body) {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side*8, -5, -10]) {\n                cylinder(h=20, d=5);\n                // Hooves\n                translate([0, 0, -10]) color(color_horns) \n                    cylinder(h=3, d=6);\n            }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([side*6, 5, -10]) {\n                cylinder(h=20, d=5);\n                // Hooves\n                translate([0, 0, -10]) color(color_horns) \n                    cylinder(h=3, d=6);\n            }\n        }\n    }\n    \n    // Tail - bird-like with feathers\n    color(color_wings) {\n        translate([0, 15, -5]) {\n            rotate([0, 0, 0]) {\n                // Tail base\n                cylinder(h=10, d=4);\n                \n                // Tail feathers\n                for(i = [0:3]) {\n                    translate([0, 8+i*2, 0]) \n                        rotate([0, 0, i*15-22.5]) \n                        scale([0.3, 1.5, 0.1]) \n                        sphere(d=6);\n                }\n            }\n        }\n    }\n    \n    // Magical glow spots (characteristic of perytons)\n    color(\"#00FFFF\") {\n        for(pos = [[-10, 0, 5], [10, 0, 5], [0, -8, 8], [0, 8, 8]]) {\n            translate(pos) sphere(d=1);\n        }\n    }\n}\n\n// Scale for 3D printing (total height ~80mm)\nscale(1.5) peryton();",
    "renders": true
  },
  {
    "mythical_creature": "qilin",
    "openscad_code": "// Qilin - Medium complexity realistic style\n// Size: 80mm long, 50mm tall, 30mm wide\n\n$fn = 32;\n\n// Main color scheme\nqilin_color = [0.8, 0.6, 0.4]; // Golden ochre\nhorn_color = [0.9, 0.9, 0.8]; // Ivory\nscale_color = [0.6, 0.4, 0.3]; // Darker scales\nmane_color = [0.9, 0.7, 0.5]; // Light mane\neye_color = [0.1, 0.1, 0.8]; // Blue eyes\n\nmodule qilin() {\n    // Body - deer-like torso\n    color(qilin_color)\n    union() {\n        // Main body\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n            sphere(15);\n        \n        // Chest\n        translate([-10, 0, 12])\n            scale([1.5, 1, 0.8])\n            sphere(12);\n        \n        // Hindquarters\n        translate([15, 0, 10])\n            scale([1.3, 1.1, 1])\n            sphere(13);\n    }\n    \n    // Neck\n    color(qilin_color)\n    translate([-5, 0, 30])\n        rotate([0, -20, 0])\n        cylinder(h=20, r1=8, r2=6);\n    \n    // Head - dragon/horse hybrid\n    color(qilin_color)\n    union() {\n        // Main head\n        translate([-15, 0, 35])\n            scale([1.2, 0.8, 1])\n            sphere(10);\n        \n        // Snout\n        translate([-25, 0, 33])\n            scale([1.5, 0.6, 0.5])\n            sphere(6);\n    }\n    \n    // Single horn (unicorn-like)\n    color(horn_color)\n    translate([-20, 0, 45])\n        rotate([0, 20, 0])\n        cylinder(h=15, r1=2, r2=0.5);\n    \n    // Mane - flowing hair\n    color(mane_color)\n    for(i = [-20:2:-5]) {\n        translate([i, 0, 38])\n            rotate([0, 90, sin(i*5)*10])\n            cylinder(h=3, r=2);\n    }\n    \n    // Scales along body\n    color(scale_color)\n    for(i = [-5:5:20]) {\n        for(j = [-15:5:15]) {\n            if(j*j + (i*0.5)*(i*0.5) < 225) {\n                translate([i, j, 15 + sin(i*0.3)*3])\n                    rotate([90, 0, 0])\n                    cylinder(h=1, r1=3, r2=1);\n            }\n        }\n    }\n    \n    // Legs - deer-like with hooves\n    module leg(x, z, angle) {\n        translate([x, 0, z])\n            rotate([0, angle, 0])\n            union() {\n                // Upper leg\n                color(qilin_color)\n                cylinder(h=15, r=4);\n                \n                // Lower leg\n                translate([0, 0, -15])\n                    cylinder(h=15, r=3);\n                \n                // Hoof\n                color(horn_color)\n                translate([0, 0, -30])\n                    scale([1, 1, 0.5])\n                    sphere(3);\n            }\n    }\n    \n    // Front legs\n    leg(-5, 15, 20);\n    leg(-5, -15, 20);\n    \n    // Back legs\n    leg(15, 12, -20);\n    leg(15, -12, -20);\n    \n    // Tail - ox tail with tuft\n    color(mane_color)\n    union() {\n        // Tail\n        translate([25, 0, 15])\n            rotate([0, -30, 0])\n            cylinder(h=20, r1=3, r2=1);\n        \n        // Tuft\n        translate([42, 0, 5])\n            sphere(5);\n    }\n    \n    // Eyes\n    color(eye_color)\n    translate([-22, 5, 35])\n        sphere(1.5);\n    translate([-22, -5, 35])\n        sphere(1.5);\n    \n    // Small dragon wings (folded)\n    color([0.8, 0.6, 0.4, 0.8])\n    translate([5, 10, 30])\n        rotate([0, -10, 20])\n        scale([1, 0.3, 1])\n        sphere(8);\n    \n    translate([5, -10, 30])\n        rotate([0, -10, -20])\n        scale([1, 0.3, 1])\n        sphere(8);\n    \n    // Beard\n    color(mane_color)\n    translate([-23, 0, 30])\n        for(i = [0:10:180]) {\n            rotate([0, i, 0])\n                translate([-2, sin(i)*3, 0])\n                    cylinder(h=8, r=0.5);\n        }\n}\n\n// Create the qilin\nqilin();",
    "renders": true
  },
  {
    "mythical_creature": "questing",
    "openscad_code": "// Questing Beast - A mythical creature with the head of a serpent, body of a leopard, haunches of a lion, and feet of a deer\n// Based on Arthurian legend, this creature is known for leading knights on quests\n\n// Overall dimensions: 80mm long, 45mm tall, 25mm wide\n$fn = 32;\n\nmodule questing_beast() {\n    // Main color scheme - natural tones\n    color([0.6, 0.4, 0.2]) // Brown base\n    \n    union() {\n        // Body - leopard-like torso\n        translate([0, 0, 10])\n        scale([1.2, 0.6, 0.8])\n        sphere(r=15);\n        \n        // Serpent head\n        translate([-25, 0, 25])\n        rotate([0, -10, 0])\n        union() {\n            // Snout\n            scale([1.5, 0.8, 0.8])\n            sphere(r=8);\n            \n            // Head base\n            translate([5, 0, 0])\n            scale([1, 1, 0.7])\n            sphere(r=10);\n            \n            // Forked tongue (thin cylinder)\n            color([0.8, 0.2, 0.2])\n            translate([-12, 0, -2])\n            rotate([0, 90, 0])\n            cylinder(h=8, r1=0.5, r2=0);\n        }\n        \n        // Eyes (green serpent eyes)\n        color([0.2, 0.8, 0.3])\n        for(side = [-1, 1]) {\n            translate([-20, side*4, 8])\n            sphere(r=2);\n        }\n        \n        // Spotted pattern on body\n        color([0.3, 0.2, 0.1])\n        for(i = [0:5]) {\n            for(j = [0:3]) {\n                translate([i*5-10, j*5-7.5, 22])\n                sphere(r=1.5);\n            }\n        }\n        \n        // Lion haunches\n        color([0.7, 0.5, 0.2])\n        translate([20, 0, 15])\n        scale([0.8, 1, 1.2])\n        sphere(r=12);\n        \n        // Tail - long and serpentine\n        color([0.4, 0.3, 0.2])\n        translate([30, 0, 20])\n        rotate([0, 0, -30])\n        cylinder(h=25, r1=3, r2=1);\n        \n        // Add tail segments for serpentine appearance\n        for(i = [1:4]) {\n            translate([30 + i*6, -i*2, 20 - i*1.5])\n            rotate([0, 0, -30 - i*5])\n            scale([1 - i*0.1, 1 - i*0.1, 1 - i*0.1])\n            sphere(r=2.5);\n        }\n        \n        // Deer legs\n        color([0.5, 0.3, 0.2])\n        for(pos = [[-15, -8, 0], [-15, 8, 0], [15, -8, 0], [15, 8, 0]]) {\n            translate(pos)\n            rotate([0, 0, pos[1] > 0 ? 10 : -10])\n            cylinder(h=20, r1=2, r2=1.5);\n            \n            // Hooves\n            color([0.3, 0.2, 0.1])\n            translate([0, 0, -20])\n            cylinder(h=3, r1=1.5, r2=2);\n        }\n        \n        // Small wings (vestigial, as per some descriptions)\n        color([0.4, 0.3, 0.2])\n        for(side = [-1, 1]) {\n            translate([5, side*12, 25])\n            rotate([0, 0, side*20])\n            scale([1, 0.3, 0.1])\n            sphere(r=8);\n        }\n        \n        // Horn-like ridges on back\n        color([0.3, 0.2, 0.15])\n        for(i = [0:3]) {\n            translate([i*8-8, 0, 22 + i*2])\n            rotate([0, 0, 0])\n            cylinder(h=3, r1=1.5, r2=0.5);\n        }\n    }\n}\n\n// Create the questing beast\nquesting_beast();",
    "renders": true
  },
  {
    "mythical_creature": "qutrub",
    "openscad_code": "// Qutrub - Arabian wolf-djinn\n// A humanoid wolf-creature with glowing eyes and arcane patterns\n\n// Overall dimensions: ~80mm height\nscale_factor = 0.8;\n\nmodule body() {\n    // Main torso\n    color(\"dimgray\") \n    difference() {\n        cube([30, 20, 40], center=true);\n        translate([0, 0, 20]) \n            cube([26, 16, 35], center=true);\n    }\n}\n\nmodule head() {\n    // Wolf-like head with elongated snout\n    color(\"darkslategray\") union() {\n        // Skull base\n        translate([0, 0, 45]) \n            scale([1.2, 1, 1]) \n                sphere(d=25);\n        \n        // Snout\n        translate([15, 0, 42]) \n            scale([1.5, 0.7, 0.7]) \n                sphere(d=15);\n        \n        // Ears (pointed)\n        for(x=[-8, 8]) {\n            translate([x, 0, 55]) \n                rotate([0, -30, 0]) \n                    cylinder(h=12, d1=8, d2=3);\n        }\n        \n        // Glowing eyes\n        color(\"orangered\") \n        for(x=[-5, 5]) {\n            translate([x, 8, 48]) \n                sphere(d=4);\n        }\n    }\n}\n\nmodule arms() {\n    // Humanoid arms ending in claws\n    for(side=[-1, 1]) {\n        color(\"dimgray\") {\n            // Upper arm\n            translate([side*18, 0, 25]) \n                rotate([0, 0, side*20]) \n                    cylinder(h=20, d=8);\n            \n            // Forearm\n            translate([side*28, 0, 18]) \n                rotate([0, 0, side*45]) \n                    cylinder(h=18, d=6);\n            \n            // Clawed hand\n            translate([side*38, 0, 15]) \n                scale([1.2, 0.4, 0.4]) \n                    sphere(d=8);\n            \n            // Claws\n            color(\"silver\") \n            for(i=[-1, 0, 1]) {\n                translate([side*40, i*2, 13]) \n                    cylinder(h=5, d1=2, d2=0.5);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Digitigrade legs\n    for(side=[-1, 1]) {\n        color(\"darkslategray\") {\n            // Thigh\n            translate([side*10, 0, -10]) \n                rotate([0, 0, side*10]) \n                    cylinder(h=20, d=12);\n            \n            // Lower leg\n            translate([side*12, 0, -25]) \n                rotate([0, 0, side*30]) \n                    cylinder(h=20, d=10);\n            \n            // Paw\n            translate([side*15, 0, -35]) \n                scale([1.5, 0.8, 0.5]) \n                    sphere(d=12);\n            \n            // Toes\n            for(i=[-1, 0, 1]) {\n                translate([side*15, i*3, -35]) \n                    cylinder(h=3, d=3);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Prehensile tail with arcane symbols\n    color(\"dimgray\") \n    union() {\n        for(i=[0:5]) {\n            translate([0, 0, -40-i*5]) \n                rotate([i*10, 0, 0]) \n                    cylinder(h=5, d=12-i);\n        }\n        \n        // Magical runes\n        color(\"orangered\") \n        for(i=[1:4]) {\n            translate([0, 6, -42-i*5]) \n                rotate([90, 0, 0]) \n                    cylinder(h=0.5, d=2);\n        }\n    }\n}\n\nmodule mystical_patterns() {\n    // Arcane glowing patterns on body\n    color(\"orangered\") {\n        // Chest symbol\n        translate([0, 11, 35]) \n            rotate([90, 0, 0]) \n                cylinder(h=1, d=8);\n        \n        // Shoulder markings\n        for(side=[-1, 1]) {\n            translate([side*15, 11, 30]) \n                rotate([90, 0, 0]) \n                    cylinder(h=1, d=5);\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    body();\n    head();\n    arms();\n    legs();\n    tail();\n    mystical_patterns();\n}",
    "renders": true
  },
  {
    "mythical_creature": "rakshasa",
    "openscad_code": "// Rakshasa - Mythical tiger-headed humanoid demon\n// Medium complexity realistic style\n\n// Overall dimensions: ~80mm tall\n\n// Main color scheme\ntiger_orange = [0.9,0.4,0.1];\ndark_orange = [0.7,0.3,0.1];\nblack = [0.1,0.1,0.1];\ngold = [0.8,0.6,0.2];\n\n// Tiger stripes module\nmodule stripes(x,y,z,rot) {\n    color(black) {\n        for(i=[-2:2]) {\n            translate([x + i*3, y, z]) \n            rotate([0,rot,0])\n            scale([0.5,8,0.5])\n            cylinder(h=20, r=1, $fn=8);\n        }\n    }\n}\n\n// Head with tiger features\nmodule rakshasa_head() {\n    color(tiger_orange) {\n        // Main head sphere\n        sphere(r=12, $fn=32);\n        \n        // Muzzle\n        translate([0,-8,0])\n        scale([1.2,1.5,1.2])\n        sphere(r=8, $fn=32);\n        \n        // Tiger stripes on head\n        stripes(0,0,12,0);\n        stripes(8,0,0,90);\n        stripes(-8,0,0,90);\n        \n        // Eyes\n        color(black) {\n            translate([5,-2,5])\n            scale([1,1,0.5])\n            sphere(r=2.5, $fn=16);\n            \n            translate([-5,-2,5])\n            scale([1,1,0.5])\n            sphere(r=2.5, $fn=16);\n        }\n        \n        // Fangs\n        color(white=[0.9,0.9,0.9]) {\n            translate([3,-10,-2])\n            rotate([0,-20,0])\n            cylinder(h=5, r1=1.5, r2=0.5, $fn=8);\n            \n            translate([-3,-10,-2])\n            rotate([0,20,0])\n            cylinder(h=5, r1=1.5, r2=0.5, $fn=8);\n        }\n        \n        // Ears\n        color(tiger_orange) {\n            translate([8,8,6])\n            rotate([0,0,-30])\n            scale([1,0.5,1])\n            cylinder(h=6, r1=4, r2=0, $fn=8);\n            \n            translate([-8,8,6])\n            rotate([0,0,30])\n            scale([1,0.5,1])\n            cylinder(h=6, r1=4, r2=0, $fn=8);\n        }\n    }\n}\n\n// Crown with jewels\nmodule rakshasa_crown() {\n    color(gold) {\n        translate([0,0,15])\n        difference() {\n            cylinder(h=3, r=13, $fn=32);\n            cylinder(h=4, r=11, $fn=32);\n        }\n        \n        // Jewel settings\n        for(i=[0:45:315]) {\n            rotate([0,0,i])\n            translate([10,0,16])\n            color([0.8,0.2,0.2])\n            sphere(r=1.5, $fn=8);\n        }\n    }\n}\n\n// Body with armor details\nmodule rakshasa_body() {\n    color(tiger_orange) {\n        // Torso\n        translate([0,-15,-25])\n        scale([1.2,1.5,2])\n        sphere(r=10, $fn=32);\n        \n        // Tiger stripes on body\n        stripes(0,-15,-10,0);\n        stripes(8,-15,-20,90);\n        stripes(-8,-15,-20,90);\n        \n        // Armor plates\n        color(gold) {\n            translate([0,-20,-35])\n            difference() {\n                cube([25,15,3], center=true);\n                cube([23,13,4], center=true);\n            }\n            \n            // Shoulder guards\n            translate([12,-15,-15])\n            rotate([0,0,45])\n            cube([8,8,2]);\n            \n            translate([-12,-15,-15])\n            rotate([0,0,-45])\n            cube([8,8,2]);\n        }\n    }\n}\n\n// Arms with clawed hands\nmodule rakshasa_arm(side) {\n    color(tiger_orange) {\n        // Upper arm\n        translate([side*12,-15,-15])\n        rotate([0,side*20,0])\n        cylinder(h=15, r=3, $fn=16);\n        \n        // Forearm\n        translate([side*15,-25,-20])\n        rotate([0,side*20,90])\n        cylinder(h=12, r=2.5, $fn=16);\n        \n        // Hand\n        translate([side*20,-25,-25])\n        sphere(r=3, $fn=16);\n        \n        // Claws\n        color(black) {\n            for(i=[-1,0,1]) {\n                translate([side*20 + i*1.5, -26, -27])\n                cylinder(h=2, r1=1, r2=0.3, $fn=8);\n            }\n        }\n    }\n}\n\n// Legs with paw feet\nmodule rakshasa_leg(side) {\n    color(tiger_orange) {\n        // Thigh\n        translate([side*6,-8,-35])\n        cylinder(h=15, r=4, $fn=16);\n        \n        // Lower leg\n        translate([side*7,-8,-50])\n        cylinder(h=12, r=3.5, $fn=16);\n        \n        // Paw foot\n        translate([side*8,-8,-62])\n        scale([1,1.5,0.8])\n        sphere(r=4, $fn=16);\n        \n        // Paw pads\n        color(black) {\n            for(i=[-1,0,1]) {\n                translate([side*8 + i*1.5, -10, -65.5])\n                sphere(r=0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Tail\nmodule rakshasa_tail() {\n    color(tiger_orange) {\n        // Tail segments\n        for(i=[0:10]) {\n            translate([0,-8 + i*2,-35 - i*2])\n            rotate([0,i*5,0])\n            scale([1 - i*0.05, 1 - i*0.05, 1])\n            sphere(r=4 - i*0.3, $fn=16);\n        }\n        \n        // Tail stripes\n        for(i=[2:2:8]) {\n            color(black)\n            translate([0,-8 + i*2,-35 - i*2])\n            rotate([0,i*5,0])\n            scale([1 - i*0.05, 1 - i*0.05, 0.2])\n            sphere(r=4 - i*0.3, $fn=16);\n        }\n    }\n}\n\n// Assembly\ntranslate([0,0,30]) {\n    rakshasa_head();\n    rakshasa_crown();\n    rakshasa_body();\n    \n    rakshasa_arm(1);\n    rakshasa_arm(-1);\n    \n    rakshasa_leg(1);\n    rakshasa_leg(-1);\n    \n    rakshasa_tail();\n}",
    "renders": true
  },
  {
    "mythical_creature": "remora",
    "openscad_code": "// Mythical Remora - Realistic Style with Medium Complexity\n// Features: Armored suction disc, elongated dorsal fin, glowing runes, bioluminescent spots\n\n// Main parameters\nscale_factor = 1;\nbody_length = 80 * scale_factor;\nbody_height = 25 * scale_factor;\nbody_width = 35 * scale_factor;\n\n// Body module\nmodule body() {\n    color(\"slateblue\") {\n        // Main fish body\n        difference() {\n            hull() {\n                sphere(d=body_width, $fn=24);\n                translate([body_length/2, 0, 0]) \n                    scale([1.2, 0.8, 0.8]) \n                        sphere(d=body_width, $fn=24);\n                translate([body_length-10, 0, 0]) \n                    scale([0.6, 0.4, 0.4]) \n                        sphere(d=body_width*0.8, $fn=24);\n            }\n            \n            // Cut bottom flat for printing\n            translate([-10, -body_width, -body_height]) \n                cube([body_length+20, body_width*2, body_height]);\n        }\n    }\n}\n\n// Suction disc with mystical pattern\nmodule suction_disc() {\n    color(\"darkslategray\") {\n        // Main disc structure\n        translate([0, 0, -body_height/2]) {\n            difference() {\n                cylinder(h=8, d=body_width*0.8, $fn=48);\n                \n                // Inner rings\n                for (i = [1:3]) {\n                    translate([0, 0, -1]) \n                        cylinder(h=10, d=body_width*0.8 - i*8, $fn=48);\n                }\n                \n                // Mystical rune pattern\n                for (angle = [0:30:330]) {\n                    rotate([0, 0, angle]) \n                        translate([body_width*0.3, 0, -1]) \n                            cube([body_width*0.1, 2, 10]);\n                }\n            }\n        }\n    }\n}\n\n// Dorsal fin with magical membrane\nmodule dorsal_fin() {\n    color(\"midnightblue\") {\n        // Base fin structure\n        translate([body_length*0.6, 0, body_height/2]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    // Main fin shape\n                    linear_extrude(height=0.5) {\n                        polygon(points=[\n                            [0, 0],\n                            [5, 15],\n                            [15, 25],\n                            [25, 20],\n                            [30, 0],\n                            [25, -20],\n                            [15, -25],\n                            [5, -15],\n                            [0, 0]\n                        ]);\n                    }\n                    \n                    // Magical perforations\n                    for (i = [1:3]) {\n                        translate([i*8, 0, -1]) \n                            cylinder(h=3, d=3, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Bioluminescent spots\nmodule bioluminescent_spots() {\n    for (pos = [[20, 10, 5], [40, 8, 3], [55, 5, 2], [25, -10, 5], [45, -8, 3]]) {\n        color(\"cyan\") {\n            translate(pos) \n                sphere(d=3, $fn=12);\n        }\n    }\n}\n\n// Tail fin with mystical extension\nmodule tail_fin() {\n    color(\"royalblue\") {\n        translate([body_length-5, 0, 0]) {\n            rotate([0, 90, 0]) {\n                // Upper lobe\n                translate([0, 0, 5]) \n                    scale([1, 1, 0.5]) \n                        cylinder(h=15, d1=8, d2=3, $fn=12);\n                \n                // Lower lobe\n                translate([0, 0, -5]) \n                    scale([1, 1, 0.5]) \n                        cylinder(h=12, d1=6, d2=2, $fn=12);\n                \n                // Mystical energy trail\n                color(\"deepskyblue\") {\n                    translate([10, 0, 0]) \n                        scale([0.3, 1, 0.3]) \n                            sphere(d=10, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Side fins with runic patterns\nmodule side_fins() {\n    color(\"steelblue\") {\n        for (side = [-1, 1]) {\n            translate([body_length*0.4, side*body_width/2, -body_height/4]) {\n                rotate([0, side*10, 0]) {\n                    // Main fin\n                    difference() {\n                        scale([1.5, 1, 0.3]) \n                            sphere(d=12, $fn=16);\n                        \n                        // Runic cutouts\n                        for (angle = [45:90:315]) {\n                            rotate([0, 0, angle]) \n                                translate([3, 0, -1]) \n                                    cube([2, 8, 3]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Mystical eye\nmodule eye() {\n    color(\"gold\") {\n        translate([body_length*0.2, body_width/2 - 3, body_height/4]) {\n            sphere(d=5, $fn=12);\n            \n            // Inner pupil\n            color(\"black\") {\n                translate([0, 1, 0]) \n                    sphere(d=2, $fn=8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    suction_disc();\n    dorsal_fin();\n    tail_fin();\n    side_fins();\n    eye();\n    bioluminescent_spots();\n}",
    "renders": true
  },
  {
    "mythical_creature": "samodiva",
    "openscad_code": "// Samodiva - Bulgarian forest nymph with butterfly wings and magical aura\n// Wingspan ~80mm, suitable for 3D printing\n\n$fn = 32;  // Smooth curves for realistic style\nwing_thickness = 0.8;  // Printable wall thickness\nbody_scale = 1.0;\n\nmodule samodiva() {\n    color(\"LightYellow\") {\n        // Head with delicate features\n        translate([0, 0, 35]) scale([1.2, 1, 1]) sphere(6);\n        \n        // Flowing hair\n        for(i = [0:15]) {\n            rotate([0, 0, i*24]) \n            translate([0, 0, 35]) \n            rotate([80, 0, 0]) \n            cylinder(12, 1.5, 0.5);\n        }\n        \n        // Torso\n        translate([0, 0, 25]) \n        scale([1.5, 0.8, 2]) \n        sphere(5);\n        \n        // Dress/skirt\n        color(\"ForestGreen\") {\n            translate([0, 0, 15]) \n            cylinder(10, 8, 12);\n            \n            // Decorative belt\n            color(\"Gold\") \n            translate([0, 0, 20]) \n            cylinder(1.5, 8.2, 8.2);\n        }\n        \n        // Arms\n        translate([6, 0, 28]) rotate([0, 0, -30]) \n        color(\"LightYellow\") \n        cylinder(8, 1.2, 0.8);\n        \n        mirror([1, 0, 0]) \n        translate([6, 0, 28]) rotate([0, 0, -30]) \n        color(\"LightYellow\") \n        cylinder(8, 1.2, 0.8);\n        \n        // Legs\n        translate([2, 0, 5]) \n        color(\"LightYellow\") \n        cylinder(10, 1.5, 1);\n        \n        translate([-2, 0, 5]) \n        color(\"LightYellow\") \n        cylinder(10, 1.5, 1);\n    }\n    \n    // Butterfly wings with mystical patterns\n    module wing() {\n        color(\"PowderBlue\") {\n            // Upper wing\n            translate([0, 0, 30]) rotate([0, 0, 15]) \n            scale([20, 8, wing_thickness]) \n            sphere(1);\n            \n            // Lower wing\n            translate([0, 0, 20]) rotate([0, 0, 25]) \n            scale([15, 6, wing_thickness]) \n            sphere(1);\n            \n            // Wing veins\n            color(\"RoyalBlue\") {\n                for(i = [0:3]) {\n                    rotate([0, 0, i*10]) \n                    translate([0, 0, 30]) \n                    cylinder(10, 0.3, 0.1);\n                }\n                \n                for(i = [0:2]) {\n                    rotate([0, 0, 15+i*8]) \n                    translate([0, 0, 20]) \n                    cylinder(8, 0.3, 0.1);\n                }\n            }\n            \n            // Magical spots\n            color(\"Gold\") {\n                translate([12, 2, 32]) sphere(0.8);\n                translate([15, -1, 30]) sphere(1);\n                translate([8, 1, 22]) sphere(0.6);\n            }\n        }\n    }\n    \n    // Left wing\n    translate([0, 0, 0]) wing();\n    \n    // Right wing (mirrored)\n    mirror([1, 0, 0]) wing();\n    \n    // Magical aura/glow\n    color(\"LightBlue\") alpha(0.3) {\n        translate([0, 0, 25]) \n        scale([1.5, 1.2, 2]) \n        sphere(15);\n    }\n    \n    // Small crown with flowers\n    color(\"Gold\") {\n        translate([0, 0, 42]) \n        cylinder(2, 4, 4);\n        \n        // Crown points\n        for(i = [0:5]) {\n            rotate([0, 0, i*60]) \n            translate([3.5, 0, 44]) \n            cylinder(3, 0.5, 0);\n        }\n        \n        // Tiny flowers\n        color(\"Violet\") {\n            for(i = [0:3]) {\n                rotate([0, 0, i*120]) \n                translate([3.5, 0, 45]) \n                sphere(0.8);\n            }\n        }\n    }\n    \n    // Bare feet\n    color(\"LightYellow\") {\n        translate([2, 0, 0]) \n        scale([1.2, 0.6, 0.5]) \n        sphere(1.5);\n        \n        translate([-2, 0, 0]) \n        scale([1.2, 0.6, 0.5]) \n        sphere(1.5);\n    }\n}\n\n// Scale for printable size\nscale([0.6, 0.6, 0.6]) samodiva();",
    "renders": true
  },
  {
    "mythical_creature": "sasabonsam",
    "openscad_code": "// Sasabonsam - A mythical forest-dwelling vampire from Akan folklore\n// Humanoid with long spindly legs, bat wings, and sharp features\n\n// Overall scale for 3D printing\nscale_factor = 0.3;\n\n// Color scheme\ncolor_skin = \"#8B4513\";\ncolor_wings = \"#4B0082\";\ncolor_eyes = \"#DC143C\";\ncolor_teeth = \"#FFFFF0\";\n\nmodule sasabonsam() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Main body\n            color(color_skin) {\n                // Torso\n                translate([0, 0, 40]) {\n                    cube([20, 15, 35], center = true);\n                }\n                \n                // Head\n                translate([0, 0, 75]) {\n                    sphere(12);\n                }\n                \n                // Long neck\n                translate([0, 0, 60]) {\n                    cylinder(h = 15, r1 = 4, r2 = 8);\n                }\n            }\n            \n            // Arms\n            color(color_skin) {\n                // Left arm\n                translate([-12, 0, 50]) {\n                    rotate([0, 0, 30]) {\n                        cylinder(h = 25, r = 3);\n                        translate([0, 0, 25]) {\n                            rotate([0, -30, 0]) {\n                                cylinder(h = 20, r = 2);\n                            }\n                        }\n                    }\n                }\n                \n                // Right arm\n                translate([12, 0, 50]) {\n                    rotate([0, 0, -30]) {\n                        cylinder(h = 25, r = 3);\n                        translate([0, 0, 25]) {\n                            rotate([0, -30, 0]) {\n                                cylinder(h = 20, r = 2);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Extremely long legs\n            color(color_skin) {\n                // Left leg\n                translate([-5, 0, 20]) {\n                    cylinder(h = 40, r = 4);\n                    translate([0, 0, -20]) {\n                        rotate([0, 0, 15]) {\n                            cylinder(h = 50, r = 3);\n                            translate([0, 0, -25]) {\n                                sphere(6);\n                            }\n                        }\n                    }\n                }\n                \n                // Right leg\n                translate([5, 0, 20]) {\n                    cylinder(h = 40, r = 4);\n                    translate([0, 0, -20]) {\n                        rotate([0, 0, -15]) {\n                            cylinder(h = 50, r = 3);\n                            translate([0, 0, -25]) {\n                                sphere(6);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Bat wings\n            color(color_wings) {\n                // Left wing\n                translate([-10, 0, 55]) {\n                    rotate([0, 0, 45]) {\n                        difference() {\n                            union() {\n                                // Wing membrane\n                                translate([0, -5, 0]) {\n                                    cube([30, 2, 40]);\n                                }\n                                // Wing support bones\n                                for(i = [0:2]) {\n                                    rotate([0, 0, i * 20]) {\n                                        translate([15, 0, 0]) {\n                                            cylinder(h = 30, r = 1);\n                                        }\n                                    }\n                                }\n                            }\n                            // Cut wing shape\n                            translate([25, -10, 20]) {\n                                sphere(15);\n                            }\n                            translate([35, -10, 35]) {\n                                sphere(12);\n                            }\n                        }\n                    }\n                }\n                \n                // Right wing\n                translate([10, 0, 55]) {\n                    rotate([0, 0, -45]) {\n                        mirror([1, 0, 0]) {\n                            difference() {\n                                union() {\n                                    // Wing membrane\n                                    translate([0, -5, 0]) {\n                                        cube([30, 2, 40]);\n                                    }\n                                    // Wing support bones\n                                    for(i = [0:2]) {\n                                        rotate([0, 0, i * 20]) {\n                                            translate([15, 0, 0]) {\n                                                cylinder(h = 30, r = 1);\n                                            }\n                                        }\n                                    }\n                                }\n                                // Cut wing shape\n                                translate([25, -10, 20]) {\n                                    sphere(15);\n                                }\n                                translate([35, -10, 35]) {\n                                    sphere(12);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Face features\n            color(color_eyes) {\n                // Eyes\n                translate([-4, 8, 77]) {\n                    sphere(2);\n                }\n                translate([4, 8, 77]) {\n                    sphere(2);\n                }\n            }\n            \n            color(color_teeth) {\n                // Sharp teeth\n                for(i = [-2:2]) {\n                    translate([i * 2, 12, 73]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h = 3, r1 = 1, r2 = 0.5);\n                        }\n                    }\n                }\n            }\n            \n            // Horns\n            color(color_skin) {\n                translate([-6, 0, 87]) {\n                    cylinder(h = 8, r1 = 2, r2 = 1);\n                }\n                translate([6, 0, 87]) {\n                    cylinder(h = 8, r1 = 2, r2 = 1);\n                }\n            }\n        }\n    }\n}\n\n// Create the sasabonsam\nsasabonsam();",
    "renders": true
  },
  {
    "mythical_creature": "scylla",
    "openscad_code": "// Scylla - Mythical Sea Monster with Dog Heads and Serpentine Tails\n// Size: ~70mm tall, 3D printable\n\n// Main body module\nmodule scylla_body() {\n    color(\"darkseagreen\")\n    union() {\n        // Torso - humanoid upper body\n        translate([0, 0, 20])\n            scale([1.2, 0.8, 2])\n            sphere(r=8, $fn=20);\n        \n        // Waist transition\n        translate([0, 0, 10])\n            cylinder(h=10, r1=7, r2=9, $fn=16);\n        \n        // Lower body - serpentine mass\n        translate([0, 0, 0])\n            scale([1.5, 1, 1.5])\n            sphere(r=10, $fn=20);\n    }\n}\n\n// Dog head module\nmodule dog_head(angle, height) {\n    color(\"saddlebrown\")\n    translate([12*cos(angle), 12*sin(angle), height])\n    rotate([0, 0, angle*180/PI])\n    union() {\n        // Snout\n        translate([5, 0, 0])\n            scale([2, 1, 1])\n            sphere(r=3, $fn=16);\n        \n        // Head\n        sphere(r=4, $fn=16);\n        \n        // Ears\n        translate([-2, 3, 2])\n            rotate([30, 0, 0])\n            scale([0.5, 2, 1])\n            cylinder(h=3, r=1.5, $fn=8);\n        \n        translate([-2, -3, 2])\n            rotate([-30, 0, 0])\n            scale([0.5, 2, 1])\n            cylinder(h=3, r=1.5, $fn=8);\n        \n        // Eyes\n        color(\"red\")\n        translate([2, 1.5, 1])\n            sphere(r=0.8);\n        translate([2, -1.5, 1])\n            sphere(r=0.8);\n    }\n}\n\n// Tentacle/dog leg module\nmodule tentacle(length, angle, segments) {\n    color(\"darkolivegreen\")\n    translate([15*cos(angle), 15*sin(angle), 5])\n    rotate([0, 0, angle*180/PI])\n    for(i=[0:segments-1]) {\n        translate([i*length/segments, 0, -i*2])\n        rotate([0, 20, 0])\n        cylinder(h=length/segments+1, r1=3-i*0.2, r2=2.8-i*0.2, $fn=8);\n    }\n}\n\n// Serpentine tail module\nmodule serpent_tail() {\n    color(\"darkgreen\")\n    translate([0, 0, -5])\n    for(i=[0:5]) {\n        translate([0, 0, -i*4])\n        rotate([0, i*15, sin(i*30)*20])\n        scale([1-i*0.1, 1-i*0.1, 1])\n        cylinder(h=4, r1=5-i*0.5, r2=4.5-i*0.5, $fn=12);\n    }\n}\n\n// Arms module\nmodule arms() {\n    color(\"darkseagreen\")\n    union() {\n        // Left arm\n        translate([7, 6, 30])\n        rotate([0, 0, 45])\n        union() {\n            cylinder(h=10, r=2, $fn=12);\n            translate([0, 0, 10])\n                sphere(r=2.5);\n        }\n        \n        // Right arm\n        translate([7, -6, 30])\n        rotate([0, 0, -45])\n        union() {\n            cylinder(h=10, r=2, $fn=12);\n            translate([0, 0, 10])\n                sphere(r=2.5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    scylla_body();\n    \n    // Six dog heads around waist\n    for(i=[0:5]) {\n        dog_head(i*60*PI/180, 25);\n    }\n    \n    // Twelve tentacles/legs\n    for(i=[0:11]) {\n        tentacle(20, i*30*PI/180, 5);\n    }\n    \n    // Serpentine tail\n    serpent_tail();\n    \n    // Arms\n    arms();\n}",
    "renders": true
  },
  {
    "mythical_creature": "selkie",
    "openscad_code": "$fn = 32;\n\n// Overall scale factor\nscale_factor = 0.6;\n\n// Colors\nskin_color = \"#c2b280\";  // Seal-like tan\nseal_color = \"#8b7355\";  // Darker seal brown\neye_color = \"#000080\";   // Deep ocean blue\n\n// Main body - seal form\nmodule seal_body() {\n    color(seal_color)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 0.6])\n            sphere(20 * scale_factor);\n        \n        // Belly\n        translate([0, -5, 8])\n            scale([1, 0.9, 0.4])\n            sphere(15 * scale_factor);\n        \n        // Tail fluke\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n            scale([2, 0.3, 1])\n            cylinder(h = 25 * scale_factor, r1 = 10 * scale_factor, r2 = 0);\n    }\n}\n\n// Seal head\nmodule seal_head() {\n    color(seal_color)\n    union() {\n        // Main head\n        translate([0, 0, 35])\n            scale([0.9, 0.8, 1])\n            sphere(12 * scale_factor);\n        \n        // Snout\n        translate([0, -8, 35])\n            scale([0.6, 0.4, 0.5])\n            sphere(8 * scale_factor);\n        \n        // Eyes\n        color(eye_color)\n        for(x = [-5, 5])\n            translate([x, -10, 38])\n                sphere(2 * scale_factor);\n    }\n}\n\n// Flippers\nmodule flippers() {\n    color(seal_color)\n    union() {\n        // Front flippers\n        for(side = [-1, 1])\n            translate([side * 15, -5, 20])\n                rotate([0, 0, side * 30])\n                scale([0.3, 2, 0.15])\n                cylinder(h = 15 * scale_factor, r = 5 * scale_factor);\n        \n        // Rear flippers\n        for(side = [-1, 1])\n            translate([side * 10, 5, 5])\n                rotate([0, 0, side * -20])\n                scale([0.25, 1.5, 0.15])\n                cylinder(h = 12 * scale_factor, r = 4 * scale_factor);\n    }\n}\n\n// Human transformation features (partial)\nmodule human_features() {\n    color(skin_color)\n    union() {\n        // Human face emerging\n        translate([0, -5, 33])\n            scale([0.5, 0.4, 0.5])\n            sphere(10 * scale_factor);\n        \n        // Flowing hair\n        for(i = [0:5]) {\n            translate([sin(i*30)*3, -15-i*2, 35-i])\n                rotate([0, sin(i*45)*10, 0])\n                scale([0.15, 0.15, 1])\n                cylinder(h = 8 * scale_factor, r = 2 * scale_factor);\n        }\n        \n        // Arms forming\n        for(side = [-1, 1]) {\n            translate([side * 12, -8, 25])\n                rotate([0, 0, side * 45])\n                scale([0.3, 0.3, 1.5])\n                cylinder(h = 10 * scale_factor, r = 3 * scale_factor);\n        }\n    }\n}\n\n// Magical transformation aura\nmodule transformation_aura() {\n    color([0.5, 0.7, 0.9, 0.3])\n    difference() {\n        // Outer bubble\n        translate([0, 0, 25])\n            sphere(35 * scale_factor);\n        \n        // Inner cutout\n        translate([0, 0, 25])\n            sphere(30 * scale_factor);\n    }\n}\n\n// Assembly\nunion() {\n    // Base seal form\n    seal_body();\n    seal_head();\n    flippers();\n    \n    // Transformation elements\n    human_features();\n    transformation_aura();\n}",
    "renders": true
  },
  {
    "mythical_creature": "shadhavar",
    "openscad_code": "// Shadhavar - Mythical unicorn-like creature with hollow horn that produces music\n// Based on Persian mythology - spiral horn with hollow channels that creates melody\n\n// Global parameters\nscale_factor = 0.5;  // Scale to ~75mm length\nbody_length = 60 * scale_factor;\nbody_height = 35 * scale_factor;\nleg_height = 25 * scale_factor;\nhorn_length = 40 * scale_factor;\n\n// Main module\nmodule shadhavar() {\n    color(\"tan\") {\n        union() {\n            // Main body\n            translate([0, 0, leg_height]) \n                body();\n            \n            // Head and neck\n            translate([body_length/2 - 5, 0, leg_height + body_height/2]) \n                head_and_neck();\n            \n            // Four legs\n            for(i = [-1, 1]) {\n                for(j = [-1, 1]) {\n                    translate([i * body_length/4, j * body_height/3, 0])\n                        leg();\n                }\n            }\n            \n            // Tail\n            translate([-body_length/2, 0, leg_height + body_height/3])\n                tail();\n        }\n    }\n}\n\n// Body module - horse-like torso\nmodule body() {\n    hull() {\n        // Main torso section\n        translate([0, 0, 0])\n            scale([1.2, 0.8, 0.9])\n            sphere(r=body_height/2.5);\n            \n        // Rear section\n        translate([-body_length/3, 0, -body_height/8])\n            scale([0.8, 0.7, 0.7])\n            sphere(r=body_height/2.5);\n    }\n}\n\n// Head and neck\nmodule head_and_neck() {\n    rotate([0, -15, 0]) {\n        // Neck\n        color(\"tan\") {\n            translate([-10 * scale_factor, 0, 0])\n                rotate([0, 90, 0])\n                cylinder(h=20 * scale_factor, r1=8 * scale_factor, r2=6 * scale_factor);\n        }\n        \n        // Head\n        translate([10 * scale_factor, 0, 5 * scale_factor])\n            rotate([0, -20, 0])\n            scale([1.3, 0.8, 0.9])\n            sphere(r=8 * scale_factor);\n            \n        // Muzzle\n        translate([20 * scale_factor, 0, 0])\n            scale([1, 0.7, 0.6])\n            sphere(r=6 * scale_factor);\n            \n        // Ears\n        color(\"tan\") {\n            for(side = [-1, 1]) {\n                translate([15 * scale_factor, side * 5 * scale_factor, 8 * scale_factor])\n                    rotate([0, -20, side * 20])\n                    cylinder(h=8 * scale_factor, r1=3 * scale_factor, r2=1 * scale_factor);\n            }\n        }\n        \n        // The magical horn - spiral with hollow channels\n        color(\"ivory\") {\n            translate([25 * scale_factor, 0, 8 * scale_factor])\n                rotate([0, 0, 0])\n                spiral_horn();\n        }\n    }\n}\n\n// Spiral horn module\nmodule spiral_horn() {\n    // Main horn structure\n    linear_extrude(height=horn_length, twist=720, scale=0.1)\n        circle(r=3 * scale_factor);\n        \n    // Hollow channels along the horn - creates musical properties\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([2 * scale_factor, 0, 0])\n        cylinder(h=horn_length, r=0.5 * scale_factor);\n    }\n}\n\n// Leg module\nmodule leg() {\n    color(\"tan\") {\n        // Upper leg\n        translate([0, 0, leg_height/2])\n            scale([0.8, 0.8, 1])\n            cylinder(h=leg_height, r1=5 * scale_factor, r2=4 * scale_factor);\n            \n        // Lower leg\n        translate([0, 0, leg_height/4])\n            cylinder(h=leg_height/2, r=3 * scale_factor);\n            \n        // Hoof\n        color(\"black\")\n        translate([0, 0, 1 * scale_factor])\n            cylinder(h=4 * scale_factor, r1=3.5 * scale_factor, r2=3 * scale_factor);\n    }\n}\n\n// Tail with flowing hair\nmodule tail() {\n    color(\"tan\") {\n        // Tail base\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=15 * scale_factor, r1=4 * scale_factor, r2=2 * scale_factor);\n            \n        // Flowing tail strands\n        for(i = [0:5]) {\n            rotate([0, i * 15 - 30, 0])\n            translate([-15 * scale_factor, 0, 0])\n            scale([1, 0.3, 0.1])\n            sphere(r=8 * scale_factor);\n        }\n    }\n}\n\n// Generate the model\nshadhavar();",
    "renders": true
  },
  {
    "mythical_creature": "simurgh",
    "openscad_code": "// Simurgh - Persian mythical bird of wisdom\n// Medium complexity realistic style\n\n$fn = 36;\n\nmodule simurgh() {\n    // Main colors\n    color(\"gold\") union() {\n        // Body\n        translate([0, 0, 15]) {\n            scale([1.2, 0.8, 1]) sphere(10);\n        }\n        \n        // Head\n        translate([0, 0, 30]) {\n            scale([0.8, 0.7, 1.2]) sphere(8);\n        }\n        \n        // Beak\n        translate([0, -8, 32]) {\n            rotate([30, 0, 0]) cylinder(h=12, r1=4, r2=2);\n        }\n        \n        // Crest feathers\n        for(i = [-30:15:30]) {\n            rotate([0, 0, i]) translate([0, 0, 38]) {\n                rotate([i/3, 0, 0]) cylinder(h=8, r1=1.5, r2=0.5);\n            }\n        }\n        \n        // Neck\n        translate([0, 0, 22]) {\n            cylinder(h=10, r=5);\n        }\n        \n        // Tail feathers\n        for(i = [-45:15:45]) {\n            rotate([0, 0, i]) translate([-12, 0, 15]) {\n                rotate([0, i, 0]) scale([1, 0.2, 0.1]) cube([20, 8, 3]);\n            }\n        }\n        \n        // Wings\n        color(\"goldenrod\") {\n            // Left wing\n            translate([0, 5, 25]) {\n                rotate([0, 0, -20]) {\n                    difference() {\n                        scale([1.5, 0.1, 1]) sphere(15);\n                        translate([15, 0, 0]) cube([20, 5, 20]);\n                    }\n                }\n            }\n            \n            // Right wing\n            translate([0, -5, 25]) {\n                mirror([0, 1, 0]) {\n                    rotate([0, 0, -20]) {\n                        difference() {\n                            scale([1.5, 0.1, 1]) sphere(15);\n                            translate([15, 0, 0]) cube([20, 5, 20]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Legs\n        color(\"darkgoldenrod\") {\n            // Left leg\n            translate([3, 5, 5]) {\n                cylinder(h=15, r=2);\n                translate([0, 0, -5]) {\n                    scale([1.5, 0.5, 0.5]) sphere(3);\n                }\n            }\n            \n            // Right leg\n            translate([3, -5, 5]) {\n                cylinder(h=15, r=2);\n                translate([0, 0, -5]) {\n                    scale([1.5, 0.5, 0.5]) sphere(3);\n                }\n            }\n        }\n        \n        // Eyes\n        color(\"saddlebrown\") {\n            translate([3, -4, 32]) sphere(1.5);\n            translate([3, 4, 32]) sphere(1.5);\n        }\n        \n        // Divine aura circles\n        color(\"ivory\") {\n            for(z = [0:5:30]) {\n                translate([0, 0, z]) {\n                    scale([1 + z/20, 1 + z/20, 0.1]) cylinder(h=0.5, r=25);\n                }\n            }\n        }\n        \n        // Chest feathers\n        for(y = [-3:1.5:3]) {\n            for(z = [15:2:25]) {\n                translate([0, y, z]) {\n                    rotate([0, 90, 0]) {\n                        scale([0.3, 1, 0.3]) cube([3, 2, 1]);\n                    }\n                }\n            }\n        }\n        \n        // Back scales\n        for(i = [0:15:180]) {\n            rotate([0, 0, i]) translate([0, 0, 20]) {\n                rotate([i/2, 0, 0]) scale([0.5, 0.5, 1]) cube([3, 2, 1]);\n            }\n        }\n    }\n}\n\n// Scale for 3D printing\nscale(0.8) simurgh();",
    "renders": true
  },
  {
    "mythical_creature": "siren",
    "openscad_code": "// Realistic Siren - Medium Complexity\n// Combining human upper body with bird-like lower body and wings\n\n// Overall scale\nscale_factor = 0.8;\n\n// Colors\nskin_color = \"#FDBCB4\";\nfeather_color = \"#8B4513\";\nhair_color = \"#FFD700\";\nbeak_color = \"#FFA500\";\n\nmodule siren_body() {\n    color(skin_color)\n    union() {\n        // Torso\n        translate([0, 0, 15])\n            scale([1, 0.6, 1.5])\n            sphere(8);\n        \n        // Waist transition\n        translate([0, 0, 8])\n            cylinder(h=7, r1=7, r2=5);\n    }\n}\n\nmodule siren_head() {\n    color(skin_color)\n    union() {\n        // Head\n        translate([0, 0, 32])\n            scale([0.8, 0.9, 1.1])\n            sphere(7);\n        \n        // Neck\n        translate([0, 0, 26])\n            cylinder(h=6, r=3);\n        \n        // Nose/beak hint\n        translate([0, 6.5, 32])\n            scale([0.5, 0.8, 0.6])\n            sphere(2);\n    }\n    \n    // Hair\n    color(hair_color)\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([0, 5.5, 35])\n                scale([0.3, 2, 0.1])\n                sphere(3);\n    }\n}\n\nmodule siren_arms() {\n    color(skin_color)\n    for(side = [-1, 1]) {\n        // Upper arm\n        translate([side * 8, 0, 22])\n            rotate([0, side * 20, 0])\n            cylinder(h=10, r=2);\n        \n        // Lower arm\n        translate([side * 12, 0, 15])\n            rotate([0, side * 45, 0])\n            cylinder(h=8, r=1.5);\n        \n        // Hands\n        translate([side * 15, 0, 12])\n            sphere(2);\n    }\n}\n\nmodule bird_legs() {\n    color(beak_color)\n    union() {\n        // Leg transition\n        translate([0, 0, 5])\n            cylinder(h=5, r=5);\n        \n        // Tail feathers base\n        translate([0, -5, 0])\n            sphere(6);\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([side * 3, 0, 2])\n                cylinder(h=6, r=1.5);\n            \n            // Feet\n            translate([side * 3, 2, -2])\n                scale([1.5, 2, 0.8])\n                sphere(2);\n        }\n    }\n}\n\nmodule wings() {\n    color(feather_color)\n    for(side = [-1, 1]) {\n        // Wing base\n        translate([side * 8, 0, 20])\n            rotate([0, 0, side * 30])\n            scale([1, 3, 0.5])\n            sphere(4);\n        \n        // Primary feathers\n        for(i = [0:15:60]) {\n            translate([side * (10 + i/10), -2 - i/5, 20 - i/10])\n                rotate([0, 0, side * (30 + i)])\n                scale([0.5, 2 + i/10, 0.2])\n                sphere(2);\n        }\n        \n        // Secondary feathers\n        for(i = [0:20:40]) {\n            translate([side * (8 + i/15), 2 + i/5, 18 - i/10])\n                rotate([0, 0, side * (10 + i)])\n                scale([0.4, 1.5, 0.2])\n                sphere(1.5);\n        }\n    }\n}\n\nmodule tail_feathers() {\n    color(feather_color)\n    union() {\n        // Central tail\n        translate([0, -8, 3])\n            scale([1, 4, 0.5])\n            sphere(3);\n        \n        // Side tail feathers\n        for(side = [-1, 1]) {\n            for(i = [0:20:40]) {\n                translate([side * (2 + i/10), -8 - i/5, 2 - i/20])\n                    rotate([0, side * 10, 0])\n                    scale([0.8, 2, 0.3])\n                    sphere(2);\n            }\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    siren_body();\n    siren_head();\n    siren_arms();\n    bird_legs();\n    wings();\n    tail_feathers();\n}",
    "renders": true
  },
  {
    "mythical_creature": "skoffin",
    "openscad_code": "// Skoffin - Mythical Icelandic cat-owl hybrid\n// Medium complexity realistic style\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall scale\nscale(0.4) {\n    \n    // Main body - cat-like torso\n    color(\"darkolivegreen\")\n    union() {\n        // Torso\n        translate([0, 0, 20])\n        scale([1.2, 0.8, 1])\n        sphere(r=15);\n        \n        // Chest\n        translate([0, 8, 15])\n        scale([1.3, 0.7, 0.9])\n        sphere(r=12);\n        \n        // Hindquarters\n        translate([0, -12, 18])\n        scale([1, 1, 1.1])\n        sphere(r=13);\n    }\n    \n    // Owl head\n    color(\"saddlebrown\")\n    union() {\n        // Main head sphere\n        translate([0, 8, 38])\n        sphere(r=12);\n        \n        // Facial disk\n        color(\"burlywood\")\n        translate([0, 14, 38])\n        scale([1.3, 0.8, 1])\n        sphere(r=11);\n    }\n    \n    // Eyes - glowing owl eyes\n    module eye(x_offset) {\n        color(\"darkorange\")\n        translate([x_offset, 14, 40])\n        sphere(r=4);\n        \n        color(\"black\")\n        translate([x_offset, 15, 42])\n        sphere(r=2);\n    }\n    \n    eye(5);\n    eye(-5);\n    \n    // Beak\n    color(\"darkgoldenrod\")\n    translate([0, 18, 38])\n    rotate([90, 0, 0])\n    cylinder(h=6, r1=3, r2=1);\n    \n    // Cat ears\n    color(\"darkolivegreen\")\n    module ear(x_offset) {\n        translate([x_offset, 5, 48])\n        rotate([0, 30, 0])\n        scale([1, 0.5, 1.5])\n        cylinder(h=8, r=4);\n    }\n    \n    ear(8);\n    ear(-8);\n    \n    // Owl ear tufts\n    color(\"saddlebrown\")\n    module ear_tuft(x_offset) {\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([x_offset, 2, 52])\n            scale([0.3, 0.3, 1])\n            cylinder(h=6, r=2);\n        }\n    }\n    \n    ear_tuft(7);\n    ear_tuft(-7);\n    \n    // Wings - folded against body\n    color(\"saddlebrown\")\n    module wing(x_offset) {\n        translate([x_offset, 0, 25])\n        rotate([0, 15, x_offset > 0 ? -10 : 10])\n        scale([0.3, 1.2, 2])\n        cube([20, 5, 15], center = true);\n        \n        // Wing feathers texture\n        for(i = [0:4]) {\n            translate([x_offset, -8 + i*4, 20 + i*2])\n            rotate([0, 0, x_offset > 0 ? 5 : -5])\n            scale([0.2, 1, 0.5])\n            cube([15, 1, 8], center = true);\n        }\n    }\n    \n    wing(18);\n    wing(-18);\n    \n    // Legs - cat legs with owl talons\n    color(\"darkolivegreen\")\n    module leg(x_offset) {\n        // Upper leg\n        translate([x_offset, 5, 15])\n        rotate([0, 20, 0])\n        cylinder(h=12, r=3);\n        \n        // Lower leg\n        translate([x_offset, 5, 8])\n        rotate([0, -20, 0])\n        cylinder(h=10, r=2.5);\n        \n        // Talons\n        color(\"darkgoldenrod\")\n        for(t = [0:2]) {\n            rotate([0, 0, (t-1)*30])\n            translate([x_offset + (t-1)*2, 5, 0])\n            cylinder(h=4, r1=2, r2=0.5);\n        }\n    }\n    \n    leg(8);\n    leg(-8);\n    \n    // Tail - cat tail with owl feathers\n    color(\"saddlebrown\")\n    union() {\n        // Main tail\n        translate([0, -25, 25])\n        rotate([0, 0, 30])\n        scale([1, 0.5, 3])\n        cylinder(h=20, r=4);\n        \n        // Feathers\n        color(\"burlywood\")\n        for(i = [0:3]) {\n            translate([0, -35 - i*3, 25 + i*2])\n            rotate([0, 0, 20 + i*5])\n            scale([1.5 - i*0.2, 0.1, 1])\n            cube([8, 1, 3], center = true);\n        }\n    }\n    \n    // Spotted pattern\n    color(\"black\")\n    module spot(x, y, z, size) {\n        translate([x, y, z])\n        sphere(r=size);\n    }\n    \n    spot(5, 0, 30, 1);\n    spot(-3, -5, 28, 1.2);\n    spot(2, 10, 35, 0.8);\n    spot(-6, 15, 32, 1);\n}",
    "renders": true
  },
  {
    "mythical_creature": "sluagh",
    "openscad_code": "// Sluagh - The Host of the Unforgiven Dead\n// A realistic 3D printable representation of the Celtic dark spirits\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Colors for realistic appearance\ncolor_dark = [0.1, 0.1, 0.1];\ncolor_bone = [0.8, 0.75, 0.65];\ncolor_eyes = [0.9, 0.1, 0.1];\ncolor_cloak = [0.05, 0.05, 0.05];\n\n// Main module\nmodule sluagh() {\n    // Base positioning\n    translate([0, 0, 10]) {\n        // Cloaked body\n        color(color_cloak) cloak();\n        \n        // Head with hood\n        translate([0, 0, 35]) {\n            color(color_dark) head();\n        }\n        \n        // Multiple ghostly arms\n        for(i = [-30, -15, 0, 15, 30]) {\n            rotate([0, 0, i]) {\n                translate([12, 0, 25]) {\n                    color(color_cloak) arm();\n                }\n            }\n        }\n        \n        // Floating skulls around the figure\n        for(i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                translate([20, 0, 20 + sin(i*2)*5]) {\n                    color(color_bone) skull();\n                }\n            }\n        }\n    }\n}\n\n// Cloak module - tattered and flowing\nmodule cloak() {\n    difference() {\n        // Main cloak body\n        cylinder(h = 40, r1 = 18, r2 = 22, center = false);\n        \n        // Tattered bottom edge\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) {\n                translate([15, 0, 0]) {\n                    cube([10, 8, 15], center = true);\n                }\n            }\n        }\n        \n        // Hollow center for lightness\n        cylinder(h = 50, r1 = 14, r2 = 18, center = false);\n    }\n}\n\n// Head module - shadowy with glowing eyes\nmodule head() {\n    union() {\n        // Main head sphere\n        sphere(r = 8);\n        \n        // Hood extension\n        cylinder(h = 12, r1 = 10, r2 = 8);\n        \n        // Glowing eyes\n        translate([-3, 6, 2]) {\n            color(color_eyes) sphere(r = 1.5);\n        }\n        translate([3, 6, 2]) {\n            color(color_eyes) sphere(r = 1.5);\n        }\n        \n        // Shadow wisps\n        for(i = [0:60:300]) {\n            rotate([0, 0, i]) {\n                translate([7, 0, -2]) {\n                    scale([1, 0.3, 0.5]) sphere(r = 3);\n                }\n            }\n        }\n    }\n}\n\n// Arm module - skeletal hands emerging from cloak\nmodule arm() {\n    union() {\n        // Cloak sleeve\n        cylinder(h = 15, r1 = 3, r2 = 2);\n        \n        // Skeletal hand\n        translate([0, 0, -8]) {\n            // Palm\n            sphere(r = 2.5);\n            \n            // Fingers - long and claw-like\n            for(i = [0:72:288]) {\n                rotate([0, 0, i]) {\n                    translate([2, 0, 0]) {\n                        cylinder(h = 6, r1 = 0.8, r2 = 0.3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Skull module - floating remnants\nmodule skull() {\n    scale([0.6, 0.6, 0.6]) {\n        union() {\n            // Main skull\n            sphere(r = 5);\n            \n            // Jaw\n            translate([0, -3, -2]) {\n                cube([6, 4, 3], center = true);\n            }\n            \n            // Eye sockets\n            difference() {\n                sphere(r = 5);\n                translate([-1.5, 1.5, 1]) {\n                    sphere(r = 1.2);\n                }\n                translate([1.5, 1.5, 1]) {\n                    sphere(r = 1.2);\n                }\n            }\n            \n            // Cracks for aged appearance\n            for(i = [0:45:135]) {\n                rotate([0, 0, i]) {\n                    translate([2, 0, 1]) {\n                        cube([0.5, 3, 0.2], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the complete sluagh\nsluagh();",
    "renders": true
  },
  {
    "mythical_creature": "strix",
    "openscad_code": "// Strix - Mythical owl-like creature\n// Wingspan: ~80mm, Height: ~50mm\n\n// Color definitions\n$fn = 32;\nbody_color = \"SaddleBrown\";\nwing_color = \"DarkGoldenrod\";\nbeak_color = \"SandyBrown\";\neye_color = \"FireBrick\";\nclaw_color = \"SlateGray\";\n\n// Main body module\nmodule strix_body() {\n    color(body_color)\n    union() {\n        // Main torso - oval shape\n        scale([1.2, 1, 1.3])\n        sphere(12);\n        \n        // Head - slightly larger sphere\n        translate([0, 0, 18])\n        scale([1, 1, 1.1])\n        sphere(10);\n        \n        // Ear tufts (horns)\n        translate([-5, 0, 25])\n        rotate([30, 0, -30])\n        cylinder(h=8, r1=3, r2=1);\n        \n        translate([5, 0, 25])\n        rotate([30, 0, 30])\n        cylinder(h=8, r1=3, r2=1);\n    }\n}\n\n// Wings with feather details\nmodule strix_wings() {\n    color(wing_color)\n    union() {\n        // Left wing\n        translate([-15, 0, 10])\n        rotate([0, 0, 45])\n        rotate([0, 30, 0])\n        difference() {\n            // Main wing shape\n            scale([1.5, 0.1, 1])\n            sphere(15);\n            \n            // Wing cutouts for feather separation\n            for(i = [1:3]) {\n                translate([-5 + i*3, 0, 5 - i*2])\n                rotate([0, 20, 0])\n                cube([8, 2, 3], center=true);\n            }\n        }\n        \n        // Right wing (mirrored)\n        translate([15, 0, 10])\n        rotate([0, 0, -45])\n        rotate([0, -30, 0])\n        difference() {\n            scale([1.5, 0.1, 1])\n            sphere(15);\n            \n            for(i = [1:3]) {\n                translate([5 - i*3, 0, 5 - i*2])\n                rotate([0, -20, 0])\n                cube([8, 2, 3], center=true);\n            }\n        }\n    }\n}\n\n// Beak\nmodule strix_beak() {\n    color(beak_color)\n    translate([0, -12, 15])\n    rotate([90, 0, 0])\n    cylinder(h=8, r1=3, r2=0.5);\n}\n\n// Eyes with magical glow\nmodule strix_eyes() {\n    color(eye_color)\n    union() {\n        // Left eye\n        translate([-4, -8, 16])\n        sphere(2);\n        \n        // Right eye\n        translate([4, -8, 16])\n        sphere(2);\n        \n        // Magical glow rings\n        color(\"Gold\")\n        translate([-4, -9.5, 16])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r1=2.5, r2=2.5);\n        \n        translate([4, -9.5, 16])\n        rotate([90, 0, 0])\n        cylinder(h=0.5, r1=2.5, r2=2.5);\n    }\n}\n\n// Tail feathers\nmodule strix_tail() {\n    color(body_color)\n    translate([0, 12, -5])\n    rotate([30, 0, 0])\n    difference() {\n        // Main tail\n        scale([0.5, 0.1, 1.5])\n        sphere(12);\n        \n        // Feather details\n        for(i = [-2:2]) {\n            translate([i*2, 0, 0])\n            cube([1, 0.5, 15], center=true);\n        }\n    }\n}\n\n// Feet with claws\nmodule strix_feet() {\n    color(claw_color)\n    union() {\n        // Left foot\n        translate([-5, 0, -15])\n        union() {\n            // Leg\n            cylinder(h=8, r=2);\n            \n            // Claws\n            for(i = [-1, 0, 1]) {\n                translate([i*1.5, 2, -1])\n                rotate([0, 30, 0])\n                cylinder(h=4, r1=1, r2=0.5);\n            }\n        }\n        \n        // Right foot\n        translate([5, 0, -15])\n        union() {\n            cylinder(h=8, r=2);\n            \n            for(i = [-1, 0, 1]) {\n                translate([i*1.5, 2, -1])\n                rotate([0, 30, 0])\n                cylinder(h=4, r1=1, r2=0.5);\n            }\n        }\n    }\n}\n\n// Scale the entire model\nscale(0.8)\nunion() {\n    strix_body();\n    strix_wings();\n    strix_beak();\n    strix_eyes();\n    strix_tail();\n    strix_feet();\n}",
    "renders": true
  },
  {
    "mythical_creature": "tarasque",
    "openscad_code": "// TARASQUE - Mythical creature with turtle shell, lion body, six legs, dragon tail\n// Size: ~80mm long, 3D-printable with minimal overhangs\n\n// Main colors\nshell_color = \"#8B4513\";        // saddlebrown shell\nskin_color  = \"#CD853F\";        // peru lion skin\nscale_color = \"#556B2F\";        // darkolivegreen dragon scales\nhorn_color  = \"#DAA520\";        // goldenrod horns/claws\n\n// Wall thickness for printing\nwall = 1.5;\n\nmodule torus(major, minor) {\n    rotate_extrude()\n        translate([major,0])\n            circle(r=minor);\n}\n\nmodule shell_spikes() {\n    for(i=[0:30:330]) {\n        rotate([0,0,i]) translate([0,15,8]) \n            color(shell_color) cylinder(h=8, r1=4, r2=1, $fn=6);\n    }\n}\n\nmodule turtle_shell() {\n    color(shell_color) {\n        difference() {\n            // Main shell dome\n            scale([1.2,1,0.6]) sphere(r=20, $fn=32);\n            // Hollow inside\n            scale([1.1,0.9,0.5]) sphere(r=19, $fn=32);\n        }\n        shell_spikes();\n    }\n}\n\nmodule lion_head() {\n    color(skin_color) {\n        // Head\n        translate([0, -28, 6]) sphere(r=8, $fn=16);\n        \n        // Snout\n        translate([0,-36,5]) scale([1.2,1.5,1]) sphere(r=4, $fn=12);\n        \n        // Ears\n        translate([-5,-28,13]) sphere(r=3, $fn=8);\n        translate([5,-28,13]) sphere(r=3, $fn=8);\n    }\n}\n\nmodule dragon_tail() {\n    color(scale_color) {\n        // Flexible tail segments\n        for(i=[0:5]) {\n            rotate([0,0,-i*15]) translate([0,20+i*8,4-i]) \n                scale([1,1,0.5]) sphere(r=6-i*0.5, $fn=12);\n        }\n        \n        // Tail tip\n        translate([0,68,0]) scale([0.5,1,0.3]) sphere(r=4, $fn=8);\n    }\n}\n\nmodule leg() {\n    color(skin_color) {\n        // Upper leg\n        cylinder(h=15, r1=4, r2=3, $fn=8);\n        // Lower leg\n        translate([0,0,-15]) rotate([30,0,0]) cylinder(h=12, r1=3, r2=2, $fn=8);\n        // Paw\n        translate([0,-6,-27]) sphere(r=3, $fn=8);\n    }\n}\n\nmodule legs() {\n    // Front pair\n    translate([-12,-15,-5]) leg();\n    translate([12,-15,-5]) leg();\n    \n    // Middle pair\n    translate([-10,0,-5]) rotate([0,0,5]) leg();\n    translate([10,0,-5]) rotate([0,0,-5]) leg();\n    \n    // Rear pair\n    translate([-8,15,-5]) rotate([0,0,10]) leg();\n    translate([8,15,-5]) rotate([0,0,-10]) leg();\n}\n\nmodule horns() {\n    color(horn_color) {\n        // Head horns\n        translate([-3,-32,14]) rotate([45,0,0]) cylinder(h=8, r1=3, r2=1, $fn=6);\n        translate([3,-32,14]) rotate([45,0,0]) cylinder(h=8, r1=3, r2=1, $fn=6);\n        \n        // Shell horns\n        for(i=[0:60:300]) {\n            rotate([0,0,i]) translate([0,20,15]) \n                rotate([30,0,0]) cylinder(h=6, r1=2, r2=1, $fn=6);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    turtle_shell();\n    lion_head();\n    dragon_tail();\n    legs();\n    horns();\n    \n    // Chest scales\n    color(scale_color) \n        for(i=[-6:3:6]) translate([i,-20,0]) sphere(r=2, $fn=6);\n}",
    "renders": true
  },
  {
    "mythical_creature": "tengu",
    "openscad_code": "// Tengu - Japanese mythical crow goblin\n// Medium complexity realistic style\n\n// Color definitions\ntengu_red = [0.7, 0.1, 0.1];\nskin_color = [0.9, 0.8, 0.7];\nblack = [0.1, 0.1, 0.1];\ngold = [0.8, 0.7, 0.2];\n\nmodule tengu() {\n    // Main body\n    color(tengu_red)\n    translate([0, 0, 10])\n    scale([1.2, 1, 1.5])\n    sphere(r=12, $fn=32);\n    \n    // Head\n    color(skin_color)\n    translate([0, 0, 35])\n    scale([0.9, 0.8, 1.1])\n    sphere(r=10, $fn=32);\n    \n    // Long nose (tengu's most distinctive feature)\n    color(skin_red)\n    translate([0, 12, 35])\n    rotate([90, 0, 0])\n    cylinder(h=15, r1=2.5, r2=1, $fn=16);\n    \n    // Crow beak tip\n    color(black)\n    translate([0, 12, 49.5])\n    rotate([90, 0, 0])\n    cone(h=3, r1=1, r2=0.1, $fn=8);\n    \n    // Eyes with fierce expression\n    for(side = [-1, 1]) {\n        color(black)\n        translate([side*4, 8, 37])\n        sphere(r=1.5, $fn=16);\n    }\n    \n    // Eyebrows (angry)\n    color(black)\n    for(side = [-1, 1]) {\n        translate([side*3, 10, 39])\n        rotate([0, 30, 0])\n        scale([1.5, 0.3, 1])\n        sphere(r=1, $fn=8);\n    }\n    \n    // Wings - crow-like with feather layers\n    module wing() {\n        color(black)\n        union() {\n            // Main wing structure\n            translate([0, 0, 0])\n            scale([1, 3, 0.3])\n            sphere(r=15, $fn=32);\n            \n            // Feather layers\n            for(i = [0:2:10]) {\n                translate([0, -5-i, -3])\n                rotate([0, -i*3, 0])\n                scale([1, 0.8, 0.2])\n                sphere(r=12-i, $fn=20);\n            }\n        }\n    }\n    \n    // Left wing\n    translate([-15, 0, 25])\n    rotate([0, 0, 30])\n    wing();\n    \n    // Right wing\n    translate([15, 0, 25])\n    mirror([1, 0, 0])\n    rotate([0, 0, 30])\n    wing();\n    \n    // Geta sandals (traditional footwear)\n    module geta() {\n        color(tengu_red)\n        union() {\n            // Sole\n            translate([0, 0, 0])\n            cube([8, 20, 3], center=true);\n            \n            // Teeth (elevated part)\n            translate([0, 0, -2])\n            cube([6, 18, 1], center=true);\n        }\n    }\n    \n    // Legs\n    color(skin_color)\n    for(side = [-1, 1]) {\n        translate([side*5, 0, 5])\n        cylinder(h=15, r=2.5, $fn=16);\n        \n        // Geta sandals\n        translate([side*5, 0, 0])\n        geta();\n    }\n    \n    // Tengu fan (hauchiwa)\n    color(gold)\n    translate([0, -20, 25])\n    rotate([0, 90, 0])\n    cylinder(h=15, r1=0.5, r2=0.5, $fn=8);\n    \n    color(gold)\n    translate([0, -20, 25])\n    rotate([90, 0, 0])\n    scale([1, 0.1, 1])\n    cylinder(h=12, r=8, $fn=32);\n    \n    // Traditional tokin hat\n    color(black)\n    translate([0, 0, 47])\n    cylinder(h=8, r1=10, r2=8, $fn=32);\n    \n    // Crow feathers on back\n    color(black)\n    for(i = [0:30:150]) {\n        rotate([0, 0, i])\n        translate([0, -10, 20])\n        scale([0.3, 1, 0.1])\n        sphere(r=5, $fn=8);\n    }\n}\n\n// Render the tengu\ntengu();",
    "renders": true
  },
  {
    "mythical_creature": "thunderbird",
    "openscad_code": "// Thunderbird - Mythical Creature\n// Medium complexity 3D printable model\n\n$fn=36;\n\n// Main colors\ncolor_wings = [0.2,0.15,0.05];\ncolor_body = [0.1,0.1,0.1];\ncolor_beak = [0.4,0.2,0.1];\ncolor_eyes = [1,0.8,0];\n\nmodule thunderbird() {\n    // Body\n    union() {\n        color(color_body) {\n            // Main torso\n            translate([0,0,5]) scale([1.2,0.8,1]) sphere(10);\n            \n            // Chest\n            translate([0,-8,8]) scale([1,0.6,1.2]) sphere(8);\n        }\n        \n        // Head\n        color(color_body) {\n            translate([0,-15,15]) rotate([0,20,0]) scale([0.8,0.8,1.1]) sphere(8);\n        }\n        \n        // Beak\n        color(color_beak) {\n            translate([0,-22,15]) rotate([0,20,0]) cylinder(h=12, r1=3, r2=1);\n        }\n        \n        // Eyes\n        color(color_eyes) {\n            translate([-3,-15,18]) sphere(2);\n            translate([3,-15,18]) sphere(2);\n        }\n        \n        // Wings\n        color(color_wings) {\n            // Left wing\n            translate([-12,0,12]) rotate([0,0,30]) {\n                union() {\n                    // Main wing\n                    translate([-5,0,0]) scale([2,0.2,1]) cube([10,1,8]);\n                    \n                    // Wing feathers\n                    for(i=[0:4]) {\n                        translate([-8-i*2,0,-4+i*2]) rotate([0,-20,0]) \n                        scale([1,0.1,0.8]) cube([4,0.5,6]);\n                    }\n                    \n                    // Upper wing\n                    translate([-8,0,4]) rotate([0,0,20]) \n                    scale([1.5,0.2,0.6]) cube([8,1,5]);\n                }\n            }\n            \n            // Right wing (mirror)\n            mirror([1,0,0]) \n            translate([-12,0,12]) rotate([0,0,30]) {\n                union() {\n                    translate([-5,0,0]) scale([2,0.2,1]) cube([10,1,8]);\n                    \n                    for(i=[0:4]) {\n                        translate([-8-i*2,0,-4+i*2]) rotate([0,-20,0]) \n                        scale([1,0.1,0.8]) cube([4,0.5,6]);\n                    }\n                    \n                    translate([-8,0,4]) rotate([0,0,20]) \n                    scale([1.5,0.2,0.6]) cube([8,1,5]);\n                }\n            }\n        }\n        \n        // Tail\n        color(color_wings) {\n            for(i=[0:5]) {\n                translate([0,8+i*3,10-i*1.5]) rotate([0,10-i*5,0]) \n                scale([0.8-i*0.1,0.1,0.8-i*0.05]) cube([8,0.5,4]);\n            }\n        }\n        \n        // Legs\n        color(color_beak) {\n            // Left leg\n            translate([-3,0,0]) {\n                cylinder(h=8, r=2);\n                translate([0,0,-8]) sphere(2.5);\n                translate([0,0,-12]) {\n                    for(i=[0:2]) {\n                        rotate([0,0,i*120]) translate([2,0,0]) \n                        scale([0.3,0.3,1]) cylinder(h=4, r=1);\n                    }\n                }\n            }\n            \n            // Right leg\n            translate([3,0,0]) {\n                cylinder(h=8, r=2);\n                translate([0,0,-8]) sphere(2.5);\n                translate([0,0,-12]) {\n                    for(i=[0:2]) {\n                        rotate([0,0,i*120]) translate([2,0,0]) \n                        scale([0.3,0.3,1]) cylinder(h=4, r=1);\n                    }\n                }\n            }\n        }\n        \n        // Lightning bolt accents\n        color([1,1,0.2]) {\n            // Wing lightning\n            translate([-10,0,15]) rotate([90,0,0]) \n            linear_extrude(height=0.5) polygon(points=[[0,0],[1,-2],[0,-3],[-1,-2]]);\n            \n            translate([10,0,15]) rotate([90,0,0]) \n            linear_extrude(height=0.5) polygon(points=[[0,0],[1,-2],[0,-3],[-1,-2]]);\n        }\n        \n        // Horn\n        color(color_eyes) {\n            translate([0,-18,22]) rotate([0,-30,0]) cylinder(h=6, r1=2, r2=0.5);\n        }\n    }\n}\n\n// Scale to 80mm wingspan\nscale(0.8) thunderbird();",
    "renders": true
  },
  {
    "mythical_creature": "tiamat",
    "openscad_code": "// Tiamat - Mesopotamian primordial dragon goddess\n// Size: ~80mm wingspan, 3D printable with minimal supports\n\n$fn = 36;\n\n// Main colors\ncolor_dragon = [0.15, 0.25, 0.35];      // Deep sea blue-green\ncolor_wing = [0.1, 0.1, 0.4];          // Dark membrane\ncolor_horn = [0.9, 0.85, 0.75];        // Ivory\ncolor_eye = [1, 0.2, 0.2];             // Fiery red\ncolor_accent = [0.7, 0.7, 0.8];        // Light scale highlights\n\n// Scale module for repetitive pattern\nmodule scale(x, y, z, size) {\n    translate([x, y, z]) {\n        scale([size, size, 0.5]) {\n            color(color_accent) sphere(1);\n        }\n    }\n}\n\n// Horn module\nmodule horn(base_r, height, twist) {\n    color(color_horn) {\n        for(i = [0:5]) {\n            rotate([0, 0, twist * i]) {\n                translate([0, 0, i * height/6]) {\n                    cylinder(h = height/6, r1 = base_r * (1 - i/6), r2 = base_r * (1 - (i+1)/6));\n                }\n            }\n        }\n    }\n}\n\n// Wing membrane\nmodule wing() {\n    color(color_wing) {\n        difference() {\n            union() {\n                // Main wing shape\n                translate([-15, 0, 0]) {\n                    rotate([0, 90, 0]) {\n                        scale([40, 25, 2]) {\n                            sphere(1);\n                        }\n                    }\n                }\n                \n                // Wing finger supports\n                for(i = [0:3]) {\n                    rotate([0, 0, i * 25]) {\n                        translate([5 + i*8, 0, 0]) {\n                            rotate([0, 90, 0]) {\n                                cylinder(h = 30 - i*5, r = 1.5);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Wing holes\n            for(i = [0:2]) {\n                for(j = [0:1]) {\n                    translate([10 + i*12, -10 + j*20, 0]) {\n                        sphere(3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Dragon head\nmodule head() {\n    color(color_dragon) {\n        union() {\n            // Snout\n            translate([0, 0, 10]) {\n                scale([1.5, 1, 1]) {\n                    sphere(8);\n                }\n            }\n            \n            // Main head\n            sphere(12);\n            \n            // Lower jaw\n            translate([0, 0, -5]) {\n                rotate([15, 0, 0]) {\n                    scale([0.8, 0.6, 0.5]) {\n                        sphere(10);\n                    }\n                }\n            }\n            \n            // Eyes\n            translate([7, 5, 8]) {\n                color(color_eye) sphere(2);\n            }\n            translate([7, -5, 8]) {\n                color(color_eye) sphere(2);\n            }\n            \n            // Horns\n            translate([5, 6, 15]) {\n                horn(2, 12, 15);\n            }\n            translate([5, -6, 15]) {\n                horn(2, 12, -15);\n            }\n            \n            // Nostrils\n            translate([12, 2, 6]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 3, r1 = 2, r2 = 0);\n                }\n            }\n            translate([12, -2, 6]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 3, r1 = 2, r2 = 0);\n                }\n            }\n        }\n    }\n}\n\n// Serpentine body segment\nmodule body_segment(radius, length, scale_factor) {\n    color(color_dragon) {\n        for(i = [0:3]) {\n            translate([i * length/4, 0, 0]) {\n                scale([scale_factor, scale_factor, scale_factor]) {\n                    sphere(radius);\n                }\n            }\n        }\n        \n        // Connect segments\n        for(i = [0:2]) {\n            translate([i * length/4 + length/8, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = length/4, r = radius * 0.8);\n                }\n            }\n        }\n        \n        // Scales\n        for(i = [0:5]) {\n            scale(i * 2 - 5, 0, 5, 1.5);\n            scale(i * 2 - 5, radius * 0.7, 5, 1);\n            scale(i * 2 - 5, -radius * 0.7, 5, 1);\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color(color_dragon) {\n        union() {\n            // Main tail segments\n            for(i = [0:4]) {\n                translate([i * 8, 0, 0]) {\n                    scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.15]) {\n                        sphere(6);\n                    }\n                }\n            }\n            \n            // Tail spikes\n            for(i = [0:3]) {\n                translate([i * 10 + 5, 0, 0]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h = 4, r1 = 2, r2 = 0);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 20]) {\n    // Head\n    translate([-5, 0, 15]) {\n        head();\n    }\n    \n    // Body\n    translate([0, 0, 5]) {\n        body_segment(8, 25, 1);\n    }\n    translate([20, 0, 0]) {\n        body_segment(7, 20, 0.9);\n    }\n    translate([35, 0, -5]) {\n        body_segment(6, 15, 0.8);\n    }\n    \n    // Wings (left and right)\n    translate([5, 12, 10]) {\n        rotate([0, 0, 30]) {\n            rotate([0, 15, 0]) {\n                wing();\n            }\n        }\n    }\n    translate([5, -12, 10]) {\n        rotate([0, 0, -30]) {\n            rotate([0, 15, 0]) {\n                mirror([0, 1, 0]) {\n                    wing();\n                }\n            }\n        }\n    }\n    \n    // Tail\n    translate([45, 0, -8]) {\n        rotate([0, 0, 15]) {\n            tail();\n        }\n    }\n    \n    // Forelegs\n    translate([12, 6, -8]) {\n        color(color_dragon) {\n            cylinder(h = 12, r = 3);\n            translate([0, 0, -6]) {\n                sphere(3);\n            }\n        }\n    }\n    translate([12, -6, -8]) {\n        color(color_dragon) {\n            cylinder(h = 12, r = 3);\n            translate([0, 0, -6]) {\n                sphere(3);\n            }\n        }\n    }\n    \n    // Hind legs\n    translate([30, 5, -8]) {\n        color(color_dragon) {\n            cylinder(h = 10, r = 2.5);\n            translate([0, 0, -5]) {\n                sphere(2.5);\n            }\n        }\n    }\n    translate([30, -5, -8]) {\n        color(color_dragon) {\n            cylinder(h = 10, r = 2.5);\n            translate([0, 0, -5]) {\n                sphere(2.5);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "troll",
    "openscad_code": "// Troll Mythical Creature - Realistic Medium Complexity\n// Height: 80mm, designed for 3D printing\n\n// Troll proportions\ntroll_height = 80;\ntroll_width = 30;\ntroll_depth = 25;\n\n// Colors\nskin_color = [0.4, 0.7, 0.4]; // Mossy green\nhair_color = [0.2, 0.1, 0.05]; // Dark brown\nstone_color = [0.5, 0.5, 0.5]; // Gray stone\neye_color = [1, 0, 0]; // Red eyes\n\nmodule troll_body() {\n    // Main torso - oval shape\n    translate([0, 0, 30])\n    scale([1, 0.7, 1.2])\n    color(skin_color)\n    sphere(r=15, $fn=20);\n}\n\nmodule troll_head() {\n    union() {\n        // Main head shape\n        translate([0, -5, 55])\n        scale([0.8, 1, 1.1])\n        color(skin_color)\n        sphere(r=12, $fn=20);\n        \n        // Nose\n        translate([0, -10, 52])\n        color(skin_color)\n        sphere(r=3, $fn=10);\n        \n        // Eyes - deep set\n        for(x = [-4, 4]) {\n            translate([x, -8, 58])\n            color(eye_color)\n            sphere(r=2, $fn=10);\n            \n            // Eye sockets\n            translate([x, -8.5, 58])\n            difference() {\n                sphere(r=2.5, $fn=10);\n                translate([0, 0, -1])\n                sphere(r=2.5, $fn=10);\n            }\n        }\n        \n        // Tusks\n        for(x = [-3, 3]) {\n            translate([x, -12, 48])\n            rotate([0, 10, 0])\n            color([0.9, 0.9, 0.8])\n            cylinder(h=6, r1=1.5, r2=0.5, $fn=8);\n        }\n        \n        // Ears\n        for(x = [-8, 8]) {\n            translate([x, -2, 54])\n            rotate([0, 0, x > 0 ? -30 : 30])\n            scale([0.5, 1, 0.3])\n            color(skin_color)\n            sphere(r=5, $fn=8);\n        }\n    }\n}\n\nmodule troll_limbs() {\n    // Arms\n    for(side = [-1, 1]) {\n        translate([side * 12, 0, 40])\n        rotate([0, 0, side * 20])\n        color(skin_color)\n        cylinder(h=25, r=4, $fn=8);\n        \n        // Hands\n        translate([side * 15, -2, 22])\n        sphere(r=5, $fn=8);\n    }\n    \n    // Legs\n    for(side = [-1, 1]) {\n        translate([side * 8, 0, 15])\n        color(skin_color)\n        cylinder(h=20, r=5, $fn=8);\n        \n        // Feet\n        translate([side * 8, -5, 5])\n        scale([1.5, 2, 0.8])\n        sphere(r=5, $fn=8);\n    }\n}\n\nmodule troll_hair() {\n    // Matted hair on head\n    for(i = [0:10]) {\n        translate([rand(-8, 8), -8, rand(60, 65)])\n        rotate([rand(-10, 10), rand(-10, 10), rand(-180, 180)])\n        color(hair_color)\n        cylinder(h=rand(5, 10), r=rand(1, 2), $fn=6);\n    }\n    \n    // Back hair\n    for(i = [0:15]) {\n        translate([rand(-7, 7), rand(-2, 5), rand(35, 50)])\n        rotate([rand(20, 40), 0, rand(-180, 180)])\n        color(hair_color)\n        cylinder(h=rand(8, 12), r=rand(1, 2), $fn=6);\n    }\n}\n\nmodule troll_stone_features() {\n    // Stone growths on skin\n    for(i = [0:8]) {\n        translate([rand(-15, 15), rand(-10, 10), rand(20, 45)])\n        color(stone_color)\n        sphere(r=rand(2, 4), $fn=8);\n    }\n    \n    // Stone shoulder pads\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, 45])\n        rotate([0, 0, side * 20])\n        color(stone_color)\n        cube([10, 8, 3], center=true);\n    }\n}\n\nmodule troll_clothing() {\n    // Loin cloth\n    translate([0, -5, 20])\n    color([0.6, 0.3, 0.1])\n    cube([25, 3, 15], center=true);\n    \n    // Belt\n    translate([0, -3, 25])\n    color([0.4, 0.2, 0.05])\n    cube([30, 2, 3], center=true);\n}\n\n// Helper for random values\nfunction rand(min, max) = min + (max - min) * (rands(0, 1, 1)[0]);\n\n// Assemble the troll\nunion() {\n    troll_body();\n    troll_head();\n    troll_limbs();\n    troll_hair();\n    troll_stone_features();\n    troll_clothing();\n}",
    "renders": true
  },
  {
    "mythical_creature": "typhon",
    "openscad_code": "// Typhon - Father of Monsters\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main color scheme\ncolor([0.2, 0.1, 0.05]) {\n    // Central torso\n    module torso() {\n        difference() {\n            // Main body\n            scale([1.2, 0.8, 1.5]) sphere(15);\n            \n            // Neck cavity\n            translate([0, 0, 20]) scale([0.7, 0.7, 2]) sphere(8);\n        }\n        \n        // Chest scales\n        for(i = [-2:2]) {\n            translate([i*6, 5, 5]) rotate([90, 0, 0]) \n            scale([1.2, 1.2, 0.3]) cylinder(h=3, r1=2, r2=3);\n        }\n    }\n\n    // Snake coils around body\n    module snake_coil(height, radius) {\n        for(i = [0:359]) {\n            translate([\n                radius * cos(i*2) + 5 * sin(i*4),\n                radius * sin(i*2),\n                height + i*0.2\n            ]) rotate([90, 0, i*2]) \n            scale([0.8, 0.8, 1]) cylinder(h=2, r1=1.5, r2=1);\n        }\n    }\n\n    // Multiple serpent heads\n    module serpent_head(offset, angle) {\n        translate(offset) rotate(angle) {\n            // Neck\n            rotate([0, 90, 0]) cylinder(h=8, r1=2, r2=1.5);\n            \n            // Head\n            translate([8, 0, 0]) scale([2, 1, 1]) sphere(2.5);\n            \n            // Eyes\n            color([1, 0, 0]) {\n                translate([9.5, 1, 1]) sphere(0.5);\n                translate([9.5, -1, 1]) sphere(0.5);\n            }\n            \n            // Forked tongue\n            translate([10.5, 0, -0.5]) rotate([0, 0, 30]) \n            scale([0.1, 0.1, 2]) cube([1, 1, 1]);\n            translate([10.5, 0, -0.5]) rotate([0, 0, -30]) \n            scale([0.1, 0.1, 2]) cube([1, 1, 1]);\n        }\n    }\n\n    // Main head with horns\n    module main_head() {\n        translate([0, 0, 25]) {\n            // Head base\n            scale([1.5, 1.2, 1.8]) sphere(8);\n            \n            // Snout\n            translate([10, 0, -2]) scale([2, 1, 1]) sphere(5);\n            \n            // Horns\n            color([0.1, 0.05, 0]) {\n                // Left horn\n                translate([5, 8, 10]) rotate([30, 0, -30]) \n                cylinder(h=12, r1=2, r2=0.5);\n                \n                // Right horn\n                translate([5, -8, 10]) rotate([30, 0, 30]) \n                cylinder(h=12, r1=2, r2=0.5);\n                \n                // Central horn\n                translate([8, 0, 15]) rotate([15, 0, 0]) \n                cylinder(h=15, r1=3, r2=1);\n            }\n            \n            // Eyes\n            color([1, 0.2, 0.2]) {\n                translate([8, 4, 5]) sphere(2);\n                translate([8, -4, 5]) sphere(2);\n            }\n        }\n    }\n\n    // Wings\n    module wing(side) {\n        translate([0, side*12, 15]) rotate([0, 0, side*20]) {\n            // Wing membrane\n            scale([2, 1, 0.1]) sphere(10);\n            \n            // Wing bones\n            color([0.15, 0.08, 0.03]) {\n                translate([10, 0, 0]) rotate([0, 0, 30*side]) \n                cylinder(h=15, r1=1, r2=0.5);\n                \n                translate([10, 0, 0]) rotate([0, 0, -30*side]) \n                cylinder(h=15, r1=1, r2=0.5);\n                \n                translate([10, 0, 0]) rotate([0, 0, 0]) \n                cylinder(h=15, r1=1, r2=0.5);\n            }\n        }\n    }\n\n    // Legs\n    module leg(side) {\n        translate([0, side*8, -15]) {\n            // Upper leg\n            rotate([30, 0, 0]) cylinder(h=12, r1=3, r2=2);\n            \n            // Lower leg\n            translate([0, 0, -13]) rotate([30, 0, 0]) \n            cylinder(h=10, r1=2, r2=1.5);\n            \n            // Foot\n            translate([0, 0, -24]) rotate([90, 0, 0]) {\n                difference() {\n                    scale([2, 1, 1]) sphere(3);\n                    translate([0, 0, -2]) cube([4, 2, 2], center=true);\n                }\n                \n                // Claws\n                for(i = [-1, 0, 1]) {\n                    translate([i*1.5, 2, 0]) rotate([0, 0, 45]) \n                    cylinder(h=2, r1=0.5, r2=0.2);\n                }\n            }\n        }\n    }\n\n    // Tail\n    module tail() {\n        translate([0, 0, -20]) rotate([30, 0, 0]) {\n            for(i = [0:5]) {\n                translate([0, 0, -i*5]) rotate([i*5, 0, 0]) {\n                    scale([1-i*0.1, 1-i*0.1, 1]) \n                    sphere(4-i);\n                    \n                    // Tail spikes\n                    for(j = [0:3]) {\n                        translate([0, 0, 0]) rotate([0, 0, j*90]) {\n                            translate([3-i*0.3, 0, 0]) \n                            rotate([90, 0, 0]) \n                            cylinder(h=3-i*0.2, r1=0.5, r2=0);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Assemble the creature\n    torso();\n    \n    // Add snake coils\n    snake_coil(-5, 18);\n    \n    // Main head\n    main_head();\n    \n    // Serpent heads around main head\n    serpent_head([5, 6, 20], [0, 0, 30]);\n    serpent_head([5, -6, 20], [0, 0, -30]);\n    serpent_head([-3, 8, 18], [0, 0, 60]);\n    serpent_head([-3, -8, 18], [0, 0, -60]);\n    \n    // Wings\n    wing(1);\n    wing(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Tail\n    tail();\n}",
    "renders": true
  },
  {
    "mythical_creature": "unicat",
    "openscad_code": "// Unicat - A mythical creature combining unicorn and feline features\n// Medium complexity realistic style\n\n// Main body dimensions\nbody_length = 60;\nbody_height = 35;\nbody_width = 25;\n\n// Head dimensions\nhead_radius = 12;\n\n// Horn dimensions\nhorn_height = 25;\nhorn_base = 4;\n\n// Wings dimensions\nwing_span = 50;\nwing_length = 30;\n\n// Tail dimensions\ntail_length = 45;\ntail_segments = 5;\n\n// Leg dimensions\nleg_height = 25;\nleg_width = 6;\n\n// Color definitions\nfur_color = \"tan\";\nhorn_color = \"gold\";\nwing_color = \"silver\";\neye_color = \"blue\";\nnose_color = \"pink\";\n\nmodule unicat_body() {\n    color(fur_color)\n    union() {\n        // Main torso with rounded shape\n        translate([0, 0, leg_height])\n        scale([1.2, 0.8, 1])\n        sphere(d=body_width);\n        \n        // Chest extension\n        translate([body_length/3, 0, leg_height])\n        scale([0.8, 0.9, 0.7])\n        sphere(d=body_width*1.1);\n        \n        // Back hump\n        translate([-body_length/4, 0, leg_height+body_height/2])\n        scale([1, 1, 0.8])\n        sphere(d=body_width*0.9);\n    }\n}\n\nmodule head() {\n    color(fur_color)\n    union() {\n        // Main head sphere\n        translate([body_length/2+10, 0, leg_height+body_height/2])\n        sphere(d=head_radius*2);\n        \n        // Snout extension\n        translate([body_length/2+20, 0, leg_height+body_height/2-3])\n        scale([1.2, 0.8, 0.7])\n        sphere(d=head_radius);\n        \n        // Ears\n        translate([body_length/2+8, head_radius, leg_height+body_height/2+10])\n        rotate([30, 0, 45])\n        scale([0.3, 0.1, 1])\n        cylinder(h=head_radius, r1=head_radius*0.8, r2=head_radius*0.3);\n        \n        translate([body_length/2+8, -head_radius, leg_height+body_height/2+10])\n        rotate([30, 0, -45])\n        scale([0.3, 0.1, 1])\n        cylinder(h=head_radius, r1=head_radius*0.8, r2=head_radius*0.3);\n        \n        // Eyes\n        color(eye_color)\n        translate([body_length/2+16, head_radius*0.7, leg_height+body_height/2+3])\n        sphere(d=2);\n        \n        translate([body_length/2+16, -head_radius*0.7, leg_height+body_height/2+3])\n        sphere(d=2);\n        \n        // Nose\n        color(nose_color)\n        translate([body_length/2+22, 0, leg_height+body_height/2-3])\n        sphere(d=2.5);\n    }\n}\n\nmodule horn() {\n    color(horn_color)\n    translate([body_length/2+8, 0, leg_height+body_height/2+head_radius])\n    cylinder(h=horn_height, r1=horn_base, r2=0.5);\n    \n    // Spiral ridges\n    for(i=[0:30:360]) {\n        rotate([0, 0, i])\n        translate([horn_base*0.7, 0, 0])\n        rotate_extrude(angle=30, $fn=8)\n        translate([0, 0])\n        square([0.5, horn_height/12]);\n    }\n}\n\nmodule legs() {\n    color(fur_color)\n    union() {\n        // Front legs\n        for(side=[-1, 1]) {\n            translate([body_length/3, side*body_width/2, 0])\n            cylinder(h=leg_height, r=leg_width/2);\n            \n            // Paw\n            translate([body_length/3, side*body_width/2, 0])\n            sphere(d=leg_width*1.2);\n        }\n        \n        // Back legs\n        for(side=[-1, 1]) {\n            translate([-body_length/3, side*body_width/2, 0])\n            cylinder(h=leg_height*0.9, r=leg_width/2);\n            \n            // Paw\n            translate([-body_length/3, side*body_width/2, 0])\n            sphere(d=leg_width*1.2);\n        }\n    }\n}\n\nmodule wings() {\n    color(wing_color)\n    union() {\n        // Left wing\n        translate([-body_length/4, body_width/2, leg_height+body_height/2+5])\n        rotate([0, -30, 0])\n        difference() {\n            // Main wing shape\n            scale([1, 0.3, 0.8])\n            sphere(d=wing_span);\n            \n            // Wing cutouts\n            for(i=[1:3]) {\n                translate([i*8-20, 0, 5-i*3])\n                scale([0.3, 1, 0.5])\n                sphere(d=wing_span/2);\n            }\n        }\n        \n        // Right wing (mirrored)\n        translate([-body_length/4, -body_width/2, leg_height+body_height/2+5])\n        rotate([0, -30, 180])\n        difference() {\n            scale([1, 0.3, 0.8])\n            sphere(d=wing_span);\n            \n            for(i=[1:3]) {\n                translate([i*8-20, 0, 5-i*3])\n                scale([0.3, 1, 0.5])\n                sphere(d=wing_span/2);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    color(fur_color)\n    union() {\n        for(i=[0:tail_segments-1]) {\n            rotate([0, 0, -i*15])\n            translate([-tail_length/2 + i*tail_length/tail_segments, 0, \n                      leg_height + body_height/4 - i*2])\n            scale([1-i*0.1, 1-i*0.1, 1-i*0.05])\n            sphere(d=body_width/3);\n        }\n        \n        // Tuft at end\n        translate([-tail_length, 0, leg_height + body_height/4 - tail_segments*2])\n        scale([0.5, 0.5, 0.8])\n        sphere(d=body_width/2);\n    }\n}\n\n// Whiskers\nmodule whiskers() {\n    color(\"white\")\n    for(side=[-1, 1]) {\n        for(angle=[-20, 0, 20]) {\n            translate([body_length/2+20, side*head_radius*0.5, leg_height+body_height/2-3])\n            rotate([0, side*angle, 90])\n            cylinder(h=10, r=0.3);\n        }\n    }\n}\n\n// Assemble the unicat\nunion() {\n    unicat_body();\n    head();\n    horn();\n    legs();\n    wings();\n    tail();\n    whiskers();\n}",
    "renders": true
  },
  {
    "mythical_creature": "valravn",
    "openscad_code": "// Valravn - Mythical Raven Knight\n// Wingspan ~80mm, Height ~60mm\n\ncolor(\"black\")\nunion() {\n    // Main body\n    translate([0, 0, 15])\n        scale([1, 0.8, 1.2])\n        sphere(d=20);\n    \n    // Head\n    translate([0, 12, 30])\n        scale([0.9, 0.7, 1.1])\n        sphere(d=18);\n    \n    // Beak\n    translate([0, 20, 32])\n        rotate([0, -20, 0])\n        cylinder(h=8, d1=3, d2=0.5);\n    \n    // Eyes (glowing red)\n    color(\"darkred\")\n    for(side=[-1, 1])\n        translate([side*6, 15, 33])\n            sphere(d=2);\n    \n    // Horns (broken knight helmet horns)\n    color(\"gray\")\n    for(side=[-1, 1])\n        translate([side*5, 5, 38])\n            rotate([0, side*10, 30*side])\n            cylinder(h=12, d1=4, d2=2);\n    \n    // Wings\n    color(\"black\")\n    module wing() {\n        difference() {\n            // Main wing structure\n            translate([0, -5, 0])\n                cube([25, 2, 35]);\n            \n            // Feather cuts\n            for(i=[0:3])\n                translate([-5, -6, 5+i*8])\n                    cube([35, 4, 3]);\n        }\n        \n        // Wing armor plates\n        color(\"darkgray\")\n        for(i=[0:2])\n            translate([10, -5.5, 10+i*10])\n                cube([8, 1, 6]);\n    }\n    \n    // Left wing\n    translate([-12, -8, 25])\n        rotate([0, 0, -20])\n        wing();\n    \n    // Right wing\n    translate([12, -8, 25])\n        mirror([1, 0, 0])\n        rotate([0, 0, -20])\n        wing();\n    \n    // Tail feathers\n    for(i=[0:2]) {\n        translate([0, -18-i*2, 15-i*3])\n            rotate([0, 0, (i-1)*15])\n            cube([8-i*2, 1, 12]);\n    }\n    \n    // Legs and talons\n    module leg() {\n        // Upper leg\n        color(\"black\")\n        translate([0, 0, 10])\n            cylinder(h=10, d=3);\n        \n        // Lower leg\n        translate([0, -5, 0])\n            cylinder(h=8, d=2);\n        \n        // Talons\n        color(\"gray\")\n        for(side=[-1, 0, 1])\n            translate([side*2, -8, -2])\n                rotate([0, 90, 0])\n                cylinder(h=5, d1=1, d2=0.5);\n    }\n    \n    // Left leg\n    translate([-6, -8, 5])\n        leg();\n    \n    // Right leg\n    translate([6, -8, 5])\n        leg();\n    \n    // Chest armor remnant\n    color(\"darkgray\")\n    translate([0, 6, 20])\n        difference() {\n            sphere(d=22);\n            translate([0, 0, -5])\n                cube([30, 30, 10]);\n        }\n}",
    "renders": true
  },
  {
    "mythical_creature": "vampire",
    "openscad_code": "// Vampire Lord - Realistic Style, Medium Complexity\n// 3D printable vampire with Gothic armor, wings, and cloak\n\n$fa = 2;\n$fs = 0.5;\n\n// Main color scheme\ncolor(\"darkslategray\") {\n    // Cape base\n    difference() {\n        union() {\n            translate([0, 0, 15]) scale([1.2, 0.3, 1.5]) sphere(10);\n            translate([0, 5, 10]) cube([20, 2, 25], center=true);\n        }\n        translate([0, 6, 20]) cube([22, 5, 15], center=true);\n    }\n}\n\n// Torso armor\ncolor(\"dimgray\") {\n    union() {\n        // Chest plate\n        translate([0, 0, 20]) scale([0.8, 0.4, 1.2]) sphere(8);\n        // Shoulder guards\n        for (x = [-8, 8]) {\n            translate([x, 0, 28]) rotate([0, 0, x/3]) \n                scale([0.3, 0.8, 0.3]) sphere(6);\n        }\n    }\n}\n\n// Arms\nmodule arm(side) {\n    translate([side * 6, 2, 20]) {\n        // Upper arm\n        color(\"silver\") cylinder(h=8, r=2);\n        // Elbow joint\n        translate([0, 0, 8]) sphere(2.5);\n        // Lower arm\n        translate([0, 0, 10]) rotate([0, side * 10, 0]) \n            color(\"silver\") cylinder(h=10, r=2);\n        // Hand with claws\n        translate([0, 0, 20]) {\n            color(\"silver\") sphere(2);\n            for (i = [-1, 0, 1]) {\n                translate([i * 0.8, 0, 1.5]) \n                    color(\"black\") cylinder(h=3, r1=0.3, r2=0.1);\n            }\n        }\n    }\n}\n\narm(1);\narm(-1);\n\n// Head\ncolor(\"ivory\") {\n    translate([0, 0, 35]) {\n        // Skull base\n        scale([0.7, 0.6, 1]) sphere(8);\n        // Jaw\n        translate([0, -3, -4]) scale([0.6, 0.4, 0.5]) sphere(6);\n        // Fangs\n        for (x = [-1.5, 1.5]) {\n            translate([x, -3, -2]) color(\"white\") \n                cylinder(h=2, r1=0.5, r2=0.1);\n        }\n    }\n}\n\n// Eyes\nmodule eye(side) {\n    translate([side * 2, 2, 36]) {\n        color(\"crimson\") sphere(1);\n        color(\"black\") scale([0.5, 0.5, 0.3]) sphere(0.8);\n    }\n}\neye(1.5);\neye(-1.5);\n\n// Nose\ntranslate([0, 1, 36.5]) color(\"black\") sphere(0.5);\n\n// Cape collar\ncolor(\"darkred\") {\n    translate([0, 0, 30]) rotate_extrude(angle=360, $fn=20) {\n        translate([7, 0]) circle(r=1);\n    }\n}\n\n// Wings\nmodule wing(side) {\n    color(\"darkslategray\") {\n        translate([side * 10, 0, 25]) rotate([0, 0, side * -20]) {\n            // Wing base\n            cylinder(h=5, r=2);\n            // Wing membrane\n            for (i = [1:5]) {\n                translate([i * side * 2, 0, i * 3]) \n                    rotate([0, i * 5, 0]) \n                    scale([0.8, 0.1, 1.2]) \n                    sphere(5 - i * 0.5);\n            }\n            // Wing bones\n            for (i = [0:4]) {\n                rotate([0, i * 15, 0]) {\n                    translate([0, 0, 5]) \n                        color(\"black\") cylinder(h=15 - i * 2, r=0.5);\n                }\n            }\n        }\n    }\n}\n\nwing(1);\nwing(-1);\n\n// Legs\nmodule leg(side) {\n    color(\"black\") {\n        // Thigh\n        translate([side * 2, -2, 15]) rotate([0, 0, side * 5]) \n            cylinder(h=8, r=2.5);\n        // Knee\n        translate([side * 2.5, -2, 7]) sphere(2.5);\n        // Shin\n        translate([side * 3, -2, 3]) rotate([0, 0, side * -5]) \n            cylinder(h=8, r=2);\n        // Foot\n        translate([side * 3.5, -2, -2]) scale([1.5, 1, 0.5]) sphere(3);\n    }\n}\n\nleg(1);\nleg(-1);\n\n// Belt with buckle\ncolor(\"gold\") {\n    translate([0, 0, 22]) difference() {\n        cylinder(h=2, r=8);\n        translate([0, 0, -0.1]) cylinder(h=2.2, r=7.5);\n    }\n    // Buckle\n    translate([0, 8, 22]) cube([2, 1, 2.5], center=true);\n}\n\n// Medallion\ncolor(\"gold\") {\n    translate([0, 0, 32]) {\n        rotate([90, 0, 0]) cylinder(h=1, r=2);\n        translate([0, 0, 0.5]) sphere(1.5);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "veela",
    "openscad_code": "$fn=32;\nscale(0.4) union() {\n    // Main body\n    color(\"ghostwhite\") union() {\n        // Torso\n        translate([0, 0, 20]) scale([1.2, 2, 3]) sphere(10);\n        \n        // Hips\n        translate([0, 0, 5]) scale([1.5, 2.2, 1]) sphere(8);\n        \n        // Abdomen connector\n        translate([0, 0, 12]) scale([1.1, 1.8, 1.5]) cylinder(h=8, r1=8, r2=7);\n    }\n    \n    // Head\n    color(\"ivory\") translate([0, 0, 45]) union() {\n        // Skull\n        scale([0.8, 0.9, 1.1]) sphere(12);\n        \n        // Chin\n        translate([0, -9, -8]) sphere(5);\n        \n        // Nose\n        translate([0, -10, 0]) scale([0.3, 0.3, 0.5]) sphere(4);\n        \n        // Eyes\n        color(\"black\") {\n            translate([4, -10, 2]) sphere(1.5);\n            translate([-4, -10, 2]) sphere(1.5);\n        }\n        \n        // Cheekbones\n        translate([7, -5, -2]) sphere(3);\n        translate([-7, -5, -2]) sphere(3);\n    }\n    \n    // Long flowing hair\n    color(\"palegoldenrod\") for(i=[-10:5:10]) {\n        translate([i*0.8, -12, 40]) rotate([90, 0, i*5]) \n        scale([0.4, 0.3, 1.5]) cylinder(h=25, r1=3, r2=1);\n    }\n    \n    // Arms\n    color(\"ghostwhite\") {\n        // Left arm\n        translate([15, -2, 35]) rotate([0, -15, 30]) union() {\n            cylinder(h=15, r=2.5);\n            translate([0, 0, -15]) rotate([0, -30, 0]) cylinder(h=12, r=2);\n            translate([0, 0, -27]) sphere(2.5);\n        }\n        \n        // Right arm\n        translate([-15, -2, 35]) rotate([0, -15, -30]) mirror([1,0,0]) union() {\n            cylinder(h=15, r=2.5);\n            translate([0, 0, -15]) rotate([0, -30, 0]) cylinder(h=12, r=2);\n            translate([0, 0, -27]) sphere(2.5);\n        }\n    }\n    \n    // Wings\n    color(\"lemonchiffon\") for(side=[-1,1]) {\n        mirror([side,0,0]) translate([8, -2, 35]) rotate([0, -30, 20]) {\n            // Upper wing\n            difference() {\n                translate([0, 0, 0]) scale([1.5, 0.2, 2]) cylinder(h=20, r1=8, r2=2);\n                for(i=[0:20:80]) {\n                    rotate([0, 0, -i]) translate([0, -2, 0]) \n                    scale([0.8, 0.1, 0.8]) cylinder(h=15, r1=5, r2=0.5);\n                }\n            }\n            \n            // Lower wing\n            translate([0, -5, -15]) rotate([0, 20, 0]) \n            scale([1.2, 0.2, 1.5]) cylinder(h=15, r1=6, r2=1);\n        }\n    }\n    \n    // Legs\n    color(\"ghostwhite\") {\n        for(side=[-1,1]) {\n            mirror([side,0,0]) translate([5, 0, 0]) {\n                // Thigh\n                translate([0, 0, 5]) rotate([0, 10, 0]) cylinder(h=15, r=3);\n                \n                // Lower leg\n                translate([0, 0, -10]) rotate([0, -20, 0]) cylinder(h=12, r=2.5);\n                \n                // Feet\n                translate([0, 2, -22]) scale([1.2, 2, 0.5]) sphere(3);\n            }\n        }\n    }\n    \n    // Mystical aura particles\n    color(\"gold\") for(i=[0:15:360]) {\n        rotate([0, i, 0]) translate([20, 0, 30+sin(i)*5]) sphere(0.8);\n    }\n    \n    // Glowing chest crystal\n    color(\"gold\") translate([0, 0, 35]) sphere(3);\n}",
    "renders": true
  },
  {
    "mythical_creature": "wendigo",
    "openscad_code": "// Wendigo - Algonquian Mythical Creature\n// Medium complexity realistic version with 3D printability\n\n// Color definitions\ncolor_bone = [0.9, 0.85, 0.75];\ncolor_flesh = [0.7, 0.5, 0.4];\ncolor_dark = [0.2, 0.2, 0.2];\n\n// Main module\nmodule wendigo() {\n    union() {\n        // Body\n        body();\n        \n        // Head\n        translate([0, 0, 25]) head();\n        \n        // Arms\n        translate([-8, 0, 20]) left_arm();\n        translate([8, 0, 20]) mirror([1, 0, 0]) left_arm();\n        \n        // Legs\n        translate([-3, 0, 5]) left_leg();\n        translate([3, 0, 5]) mirror([1, 0, 0]) left_leg();\n        \n        // Antlers\n        translate([0, 0, 35]) antlers();\n        \n        // Ribcage detail\n        translate([0, 0, 15]) ribs();\n    }\n}\n\n// Body - emaciated torso\nmodule body() {\n    color(color_flesh) {\n        // Main torso\n        scale([1, 0.6, 1.2]) sphere(8);\n        \n        // Spine ridge\n        for(i = [0:8]) {\n            translate([0, -3, 5 + i * 2.5]) \n                rotate([90, 0, 0]) \n                    cylinder(h=2, r1=1.5, r2=0.5);\n        }\n    }\n}\n\n// Head - skull-like with elongated snout\nmodule head() {\n    color(color_bone) {\n        // Main skull\n        difference() {\n            scale([0.8, 0.7, 1.2]) sphere(5);\n            // Eye sockets\n            translate([-2, 2.5, 1]) sphere(1.5);\n            translate([2, 2.5, 1]) sphere(1.5);\n            // Nasal cavity\n            translate([0, 3, -1]) scale([1, 0.5, 0.5]) sphere(2);\n        }\n        \n        // Snout\n        translate([0, 4, -2]) scale([0.8, 1.5, 0.8]) sphere(3);\n        \n        // Teeth\n        for(i = [-2:2]) {\n            translate([i * 0.8, 5.5, -3]) \n                cylinder(h=2, r=0.3);\n        }\n    }\n}\n\n// Antlers - branching bone structures\nmodule antlers() {\n    color(color_bone) {\n        // Left antler\n        translate([-3, 0, 0]) {\n            cylinder(h=8, r=0.8);\n            translate([0, 0, 4]) rotate([0, 0, -20]) cylinder(h=6, r=0.6);\n            translate([0, 0, 7]) rotate([0, 0, 20]) cylinder(h=4, r=0.4);\n        }\n        \n        // Right antler\n        translate([3, 0, 0]) {\n            cylinder(h=8, r=0.8);\n            translate([0, 0, 4]) rotate([0, 0, 20]) cylinder(h=6, r=0.6);\n            translate([0, 0, 7]) rotate([0, 0, -20]) cylinder(h=4, r=0.4);\n        }\n    }\n}\n\n// Left arm - long and clawed\nmodule left_arm() {\n    color(color_flesh) {\n        // Upper arm\n        rotate([0, 0, -20]) {\n            cylinder(h=12, r=1.5);\n            \n            // Lower arm\n            translate([0, 0, 12]) rotate([0, 0, -30]) {\n                cylinder(h=10, r=1.2);\n                \n                // Hand with claws\n                translate([0, 0, 10]) rotate([0, 0, -45]) {\n                    // Palm\n                    sphere(1.5);\n                    \n                    // Claws\n                    for(i = [-1:1]) {\n                        translate([i * 0.8, 0, 1]) \n                            scale([0.3, 0.3, 2]) \n                                cylinder(h=1, r=1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Left leg - digitigrade\nmodule left_leg() {\n    color(color_flesh) {\n        // Thigh\n        rotate([0, 0, 10]) {\n            cylinder(h=10, r=1.8);\n            \n            // Shin\n            translate([0, 0, 10]) rotate([0, 0, -30]) {\n                cylinder(h=8, r=1.5);\n                \n                // Foot\n                translate([0, 0, 8]) rotate([0, 0, 30]) {\n                    scale([1.5, 0.8, 0.5]) sphere(2);\n                    \n                    // Toes with claws\n                    for(i = [-1:1]) {\n                        translate([i * 0.7, 0, -1]) \n                            scale([0.3, 0.3, 1.5]) \n                                cylinder(h=1, r=1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Ribcage detail\nmodule ribs() {\n    color(color_bone) {\n        for(i = [0:6]) {\n            rotate([0, i * 15, 0]) {\n                translate([0, 0, -i * 1.5]) \n                    scale([1.2, 1, 0.3]) \n                        sphere(4);\n            }\n        }\n    }\n}\n\n// Create the wendigo scaled for 3D printing\nscale(0.8) wendigo();",
    "renders": true
  },
  {
    "mythical_creature": "wraith",
    "openscad_code": "// Wraith - Realistic Style - Medium Complexity\n// Scale: ~80mm height, 3D printable with minimal supports\n\n$fa = 1;\n$fs = 0.4;\n\n// Main color scheme - ethereal dark tones\ncolor([0.15,0.15,0.25]) {\n    // Hood and head assembly\n    module hood() {\n        difference() {\n            // Main hood shape\n            scale([1.2,1.3,1.5]) \n                sphere(15);\n            \n            // Eye sockets\n            for(i=[-1,1]) {\n                translate([i*7, -5, 5])\n                    rotate([0,90,0])\n                        cylinder(h=10, r1=4, r2=3, center=true);\n            }\n            \n            // Bottom opening\n            translate([0,0,-10])\n                cube([25,25,20], center=true);\n        }\n    }\n\n    // Torso with ethereal robes\n    module torso() {\n        union() {\n            // Upper body\n            scale([1.2,1,1.5])\n                sphere(12);\n            \n            // Flowing robe layers\n            for(i=[0:3]) {\n                translate([0,0,-15-i*3])\n                    rotate([0,0,i*15])\n                        scale([1.3+i*0.1, 1.2, 0.8])\n                            cylinder(h=8, r1=10, r2=12);\n            }\n            \n            // Chest detail - ethereal energy core\n            color([0.4,0.1,0.6]) {\n                translate([0,5,0])\n                    sphere(3);\n            }\n        }\n    }\n\n    // Arms with ethereal sleeves\n    module arm(side) {\n        translate([side*15, 0, -5]) {\n            rotate([0,0,side*10]) {\n                // Upper arm\n                color([0.1,0.1,0.2])\n                    rotate([90,0,side*20])\n                        cylinder(h=20, r1=3, r2=2.5);\n                \n                // Flowing sleeve\n                translate([0,0,-10])\n                    rotate([0,0,side*30])\n                        scale([1.2,1,2])\n                            sphere(8);\n            }\n        }\n    }\n\n    // Wraith blade weapon\n    module blade() {\n        color([0.3,0.3,0.4])\n        translate([20,30,-20]) {\n            rotate([0,0,-45]) {\n                // Blade\n                linear_extrude(height=25, twist=30)\n                    polygon(points=[[0,0],[3,0],[2,20],[0,25],[-2,20],[-3,0]]);\n                \n                // Hilt\n                translate([0,0,25])\n                    rotate([0,90,0])\n                        cylinder(h=8, r1=2, r2=1.5);\n            }\n        }\n    }\n\n    // Ethereal tail\n    module tail() {\n        color([0.1,0.05,0.3])\n        translate([0,-15,-25]) {\n            for(i=[0:4]) {\n                translate([0,0,-i*5])\n                    rotate([0,0,i*10])\n                        scale([0.7-i*0.1,0.7-i*0.1,1])\n                            sphere(6-i);\n            }\n        }\n    }\n\n    // Wispy lower body\n    module ethereal_form() {\n        color([0.05,0.05,0.2,0.7])\n        translate([0,0,-30]) {\n            for(i=[0:5]) {\n                rotate([0,0,i*60])\n                    translate([i*2,0,-i*3])\n                        scale([0.8,0.8,1.5])\n                            cylinder(h=20-i*2, r1=8-i, r2=2);\n            }\n        }\n    }\n\n    // Assembly\n    translate([0,0,40]) {\n        hood();\n        translate([0,0,-15]) torso();\n        \n        arm(1);\n        arm(-1);\n        \n        blade();\n        tail();\n        ethereal_form();\n    }\n}\n\n// Display stand for 3D printing\ncolor([0.2,0.2,0.2])\ntranslate([0,0,-45])\n    cylinder(h=3, r=20);",
    "renders": true
  },
  {
    "mythical_creature": "xana",
    "openscad_code": "// Xana - Asturian water nymph with fish tail and golden hair\n// Designed for 3D printing at 80mm height\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Colors\nskin_color = \"#F4DAB9\";\nhair_color = \"#FFD700\";\ntail_color = \"#4A90E2\";\nbra_color = \"#8B4513\";\n\nmodule xana() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Upper body (humanoid)\n            translate([0, 0, 40]) {\n                color(skin_color) {\n                    // Torso\n                    cylinder(h=20, r1=8, r2=6, $fn=16);\n                    \n                    // Chest\n                    translate([0, 0, 20]) {\n                        sphere(r=7, $fn=16);\n                    }\n                    \n                    // Arms\n                    for(side = [-1, 1]) {\n                        translate([side * 10, 0, 15]) {\n                            rotate([0, 0, side * 20]) {\n                                cylinder(h=15, r=2.5, $fn=8);\n                            }\n                        }\n                    }\n                    \n                    // Head\n                    translate([0, 0, 30]) {\n                        sphere(r=6, $fn=16);\n                        \n                        // Hair flowing back\n                        color(hair_color) {\n                            for(i = [0:15:60]) {\n                                rotate([0, i, 0]) {\n                                    translate([0, -4, 0]) {\n                                        scale([1, 0.3, 0.3]) {\n                                            sphere(r=8, $fn=8);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    // Bra/top\n                    color(bra_color) {\n                        translate([0, 0, 18]) {\n                            cylinder(h=6, r1=7.5, r2=6.5, $fn=16);\n                        }\n                    }\n                }\n            }\n            \n            // Fish tail (lower body)\n            color(tail_color) {\n                translate([0, 0, 0]) {\n                    // Tail base\n                    cylinder(h=20, r1=6, r2=8, $fn=16);\n                    \n                    // Tail fin\n                    translate([0, 0, -15]) {\n                        rotate([90, 0, 0]) {\n                            linear_extrude(height=2) {\n                                polygon(points=[\n                                    [0, 0],\n                                    [15, -8],\n                                    [12, -20],\n                                    [0, -25],\n                                    [-12, -20],\n                                    [-15, -8]\n                                ]);\n                            }\n                        }\n                    }\n                    \n                    // Tail scales pattern\n                    for(i = [1:3]) {\n                        translate([0, 0, i * 5]) {\n                            scale([1 - i * 0.1, 1 - i * 0.1, 1]) {\n                                cylinder(h=2, r=8 - i, $fn=16);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Water droplets effect\n            color(\"#87CEEB\") {\n                for(i = [0:20:360]) {\n                    rotate([0, 0, i]) {\n                        translate([10 + sin(i) * 5, 0, 15 + cos(i) * 2]) {\n                            sphere(r=1, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Base for stability\nmodule base() {\n    color(\"#2F4F4F\") {\n        translate([0, 0, -2]) {\n            cylinder(h=2, r=20, $fn=32);\n        }\n    }\n}\n\n// Assemble the model\nunion() {\n    base();\n    xana();\n}",
    "renders": true
  },
  {
    "mythical_creature": "xecotcovach",
    "openscad_code": "// Xecotcovach - Mayan feathered serpent deity\n// Realistic style with medium complexity\n\n$fn = 32;  // Smooth curves\n\n// Main body parameters\nbody_length = 60;\nbody_width = 12;\nbody_height = 15;\n\n// Color definitions\nsnake_color = \"darkgreen\";\nfeather_color = \"forestgreen\";\neye_color = \"red\";\nhorn_color = \"black\";\nscale_color = \"olive\";\n\n// Main module\nmodule xecotcovach() {\n    color(snake_color) {\n        // Serpentine body\n        union() {\n            // Head\n            translate([0, 0, body_height/2])\n                rotate([0, 0, 0])\n                    head();\n            \n            // Body segments\n            for(i = [1:10]) {\n                translate([i * 5.5, 0, body_height/2 - i * 0.5])\n                    rotate([0, 0, sin(i * 15) * 5])\n                        body_segment(i);\n            }\n            \n            // Tail\n            translate([11 * 5.5, 0, body_height/2 - 5.5])\n                rotate([0, 0, 15])\n                    tail();\n        }\n        \n        // Wings\n        color(feather_color) {\n            translate([15, -8, 10])\n                rotate([0, 0, -30])\n                    left_wing();\n            translate([15, 8, 10])\n                rotate([0, 0, 30])\n                    mirror([1, 0, 0])\n                        left_wing();\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    // Main head\n    union() {\n        scale([1.2, 1, 1])\n            sphere(6);\n        \n        // Snout\n        translate([5, 0, 0])\n            scale([1.5, 0.7, 0.7])\n                sphere(4);\n        \n        // Eyes\n        color(eye_color) {\n            translate([2.5, -3, 2])\n                sphere(1.2);\n            translate([2.5, 3, 2])\n                sphere(1.2);\n        }\n        \n        // Horns\n        color(horn_color) {\n            translate([-2, -2.5, 4])\n                rotate([0, 30, -15])\n                    cylinder(h=5, r1=1.5, r2=0.5);\n            translate([-2, 2.5, 4])\n                rotate([0, -30, 15])\n                    cylinder(h=5, r1=1.5, r2=0.5);\n        }\n    }\n}\n\n// Body segment module\nmodule body_segment(index) {\n    // Tapered body\n    scale([1 - index * 0.03, 1, 1 - index * 0.02])\n        cylinder(h=body_length/10, r=body_width/2);\n    \n    // Scales\n    color(scale_color) {\n        for(a = [0:45:315]) {\n            rotate([0, 0, a])\n                translate([0, body_width/2 - 1, 0])\n                    scale([1, 0.3, 0.3])\n                        sphere(2);\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    union() {\n        // Tapering tail\n        cylinder(h=15, r1=5, r2=1);\n        \n        // Tail feathers\n        color(feather_color) {\n            for(i = [0:30:150]) {\n                rotate([0, i, 0])\n                    translate([0, 0, -7.5])\n                        scale([0.3, 0.05, 1])\n                            sphere(8);\n            }\n        }\n    }\n}\n\n// Wing module\nmodule left_wing() {\n    union() {\n        // Main wing\n        linear_extrude(height=0.5)\n            polygon(points=[\n                [0, 0],\n                [20, 5],\n                [25, 0],\n                [20, -5],\n                [0, 0]\n            ]);\n        \n        // Wing feathers\n        for(i = [1:5]) {\n            translate([i * 4, 0, 0])\n                rotate([0, 0, sin(i * 30) * 10])\n                    scale([1 - i * 0.1, 0.7, 1])\n                        feather();\n        }\n    }\n}\n\n// Feather module\nmodule feather() {\n    difference() {\n        linear_extrude(height=0.3)\n            polygon(points=[\n                [0, 0],\n                [8, 2],\n                [10, 0],\n                [8, -2],\n                [0, 0]\n            ]);\n        \n        // Feather veins\n        for(j = [1:3]) {\n            translate([j * 2.5, 0, 0.2])\n                rotate([0, 0, 0])\n                    scale([0.1, 0.5, 0.1])\n                        cube([1, 1, 1]);\n        }\n    }\n}\n\n// Create the creature\nxecotcovach();",
    "renders": true
  },
  {
    "mythical_creature": "xelhua",
    "openscad_code": "// Xelhua Mythical Creature - OpenSCAD\n// Based on Aztec mythology - giant builder ant with celestial features\n\n// Global parameters\nscale_factor = 0.35; // Scale to 70mm length\n\n// Main body\nmodule xelhua_body() {\n    // Thorax (central body)\n    color(\"saddlebrown\") \n    translate([0, 0, 10]) \n    scale([1.2, 0.8, 0.9]) \n    sphere(15 * scale_factor);\n    \n    // Abdomen segments\n    for(i = [0:2]) {\n        color(\"peru\") \n        translate([-20 - i*8, 0, 8 - i*2]) \n        scale([1 - i*0.1, 1 - i*0.15, 1 - i*0.1]) \n        sphere(12 * scale_factor);\n    }\n    \n    // Head\n    color(\"saddlebrown\") \n    translate([18, 0, 12]) \n    scale([0.9, 0.7, 0.8]) \n    sphere(14 * scale_factor);\n}\n\n// Antennae with celestial orbs\nmodule antennae() {\n    for(side = [-1, 1]) {\n        // Antenna stems\n        color(\"goldenrod\") \n        translate([22, side*8, 18]) \n        rotate([0, 90 - side*20, 30*side]) \n        cylinder(h=15 * scale_factor, r1=1.5 * scale_factor, r2=0.5 * scale_factor);\n        \n        // Celestial orbs\n        color(\"gold\") \n        translate([22 + 12*cos(30*side), side*8 + 12*sin(30*side), 18 + 12*sin(30*side)]) \n        sphere(3 * scale_factor);\n    }\n}\n\n// Legs (6 legs, 3 segments each)\nmodule legs() {\n    for(pos = [0:5]) {\n        angle = pos * 60;\n        side = pos % 2 == 0 ? 1 : -1;\n        \n        // Coxa (first segment)\n        color(\"sienna\") \n        translate([cos(angle)*10, sin(angle)*10*side, 8]) \n        rotate([0, 0, angle + (side==1?90:-90)]) \n        cylinder(h=8 * scale_factor, r=2.5 * scale_factor);\n        \n        // Tibia (second segment)\n        color(\"sienna\") \n        translate([cos(angle)*17, sin(angle)*17*side, 6]) \n        rotate([30, 0, angle + (side==1?90:-90)]) \n        cylinder(h=12 * scale_factor, r=2 * scale_factor);\n        \n        // Tarsus (third segment)\n        color(\"saddlebrown\") \n        translate([cos(angle)*22, sin(angle)*22*side, 3]) \n        rotate([60, 0, angle + (side==1?90:-90)]) \n        cylinder(h=10 * scale_factor, r=1.5 * scale_factor);\n    }\n}\n\n// Wings (celestial membranous wings)\nmodule wings() {\n    for(side = [-1, 1]) {\n        // Upper wing\n        color([0.8, 0.9, 1, 0.7]) \n        translate([0, side*12, 25]) \n        rotate([0, -10*side, 20*side]) \n        scale([1.2, 0.8, 0.1]) \n        sphere(20 * scale_factor);\n        \n        // Lower wing\n        color([0.7, 0.85, 1, 0.7]) \n        translate([-5, side*15, 18]) \n        rotate([0, 10*side, 10*side]) \n        scale([1, 0.6, 0.1]) \n        sphere(18 * scale_factor);\n    }\n}\n\n// Celestial markings on thorax\nmodule celestial_markings() {\n    // Star patterns\n    for(i = [0:7]) {\n        angle = i * 45;\n        color(\"gold\") \n        translate([cos(angle)*8, sin(angle)*8, 25]) \n        sphere(1 * scale_factor);\n    }\n    \n    // Central sun symbol\n    color(\"goldenrod\") \n    translate([0, 0, 26]) \n    cylinder(h=2 * scale_factor, r=4 * scale_factor);\n}\n\n// Builder tools (miniature stone blocks)\nmodule builder_tools() {\n    // Stone blocks being carried\n    color(\"lightgray\") \n    translate([-25, 0, 0]) \n    cube([8 * scale_factor, 6 * scale_factor, 4 * scale_factor]);\n    \n    color(\"darkgray\") \n    translate([-28, -3, 4]) \n    cube([6 * scale_factor, 4 * scale_factor, 3 * scale_factor]);\n}\n\n// Assembly\nunion() {\n    xelhua_body();\n    antennae();\n    legs();\n    wings();\n    celestial_markings();\n    builder_tools();\n}\n\n// Base for stability\ncolor(\"darkgreen\") \ntranslate([0, 0, -2]) \ncylinder(h=2 * scale_factor, r=30 * scale_factor);",
    "renders": true
  },
  {
    "mythical_creature": "yale",
    "openscad_code": "// Yale - Mythical creature with swivel horns and tusks\n// Size: ~80mm long, 50mm tall, 30mm wide\n\n$fn = 32;\n\n// Main body color - golden brown\ncolor([0.72, 0.52, 0.24]) {\n    // Body\n    union() {\n        // Torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n            sphere(d=30);\n        \n        // Hindquarters\n        translate([-20, 0, 12])\n            scale([1.4, 0.9, 0.8])\n            sphere(d=25);\n            \n        // Chest\n        translate([15, 0, 12])\n            scale([0.9, 0.7, 0.9])\n            sphere(d=20);\n    }\n}\n\n// Legs module\nmodule leg(x, z, angle) {\n    translate([x, 0, z])\n    rotate([0, angle, 0]) {\n        // Upper leg\n        color([0.65, 0.45, 0.2])\n        cylinder(h=15, d1=6, d2=4);\n        \n        // Lower leg\n        translate([0, 0, -15])\n        cylinder(h=15, d1=4, d2=3);\n            \n        // Hoof\n        translate([0, 0, -30])\n        scale([1.2, 0.8, 0.5])\n        sphere(d=5);\n    }\n}\n\n// Create 4 legs\nleg(12, 0, -15);\nleg(-8, 0, 15);\nleg(8, 0, -15);\nleg(-18, 0, 15);\n\n// Head\ncolor([0.75, 0.55, 0.25])\ntranslate([25, 0, 25])\nunion() {\n    // Main head shape\n    scale([1.5, 0.9, 0.9])\n    sphere(d=20);\n    \n    // Snout\n    translate([12, 0, -2])\n    scale([1.2, 0.7, 0.6])\n    sphere(d=10);\n    \n    // Ears\n    translate([5, 8, 8])\n    rotate([30, 0, 15])\n    scale([0.3, 0.1, 0.8])\n    cylinder(h=8, d=5);\n    \n    translate([5, -8, 8])\n    rotate([30, 0, -15])\n    scale([0.3, 0.1, 0.8])\n    cylinder(h=8, d=5);\n    \n    // Horns - Yale's signature swivel horns\n    for(i = [0:1]) {\n        mirror([0, i*2-1, 0])\n        translate([0, 6, 12])\n        rotate([0, 0, i*90-45])\n        scale([0.3, 0.3, 1])\n        cylinder(h=12, d=6);\n    }\n    \n    // Tusks\n    color([0.9, 0.9, 0.85])\n    for(i = [0:1]) {\n        mirror([0, i*2-1, 0])\n        translate([10, 3, -5])\n        rotate([0, 0, i*30-15])\n        scale([0.4, 0.4, 1])\n        cylinder(h=8, d=4);\n    }\n}\n\n// Tail with tuft\ncolor([0.7, 0.5, 0.22])\ntranslate([-35, 0, 18])\nrotate([0, 30, 0])\nunion() {\n    cylinder(h=20, d1=4, d2=2);\n    \n    // Tuft\n    translate([0, 0, -22])\n    scale([1.2, 1.2, 0.8])\n    sphere(d=6);\n}\n\n// Spotted pattern on body\nmodule spot(x, y, z, size) {\n    color([0.5, 0.35, 0.15])\n    translate([x, y, z])\n    sphere(d=size);\n}\n\nspot(5, 8, 22, 4);\nspot(-5, -6, 20, 3);\nspot(-15, 5, 18, 5);\nspot(0, -10, 19, 3.5);\nspot(-25, -3, 15, 4);\n\n// Mane ridge along back\ncolor([0.6, 0.4, 0.18])\nfor(i = [-25:5:20]) {\n    translate([i, 0, 28 - abs(i)/5])\n    scale([0.8, 0.3, 1.5])\n    sphere(d=4);\n}",
    "renders": true
  },
  {
    "mythical_creature": "yeti",
    "openscad_code": "// Yeti - Mythical Snow Creature\n// Realistic style with medium complexity\n// 3D printable model ~70mm height\n\nmodule yeti_body() {\n    // Main torso with thick fur effect using stacked cubes\n    color(\"white\")\n    union() {\n        // Chest area\n        translate([0, -5, 25])\n            scale([1.2, 0.8, 1.5])\n                sphere(r=15, $fn=20);\n        \n        // Abdomen\n        translate([0, -8, 12])\n            scale([1.1, 0.9, 1.2])\n                sphere(r=12, $fn=18);\n        \n        // Lower body\n        translate([0, -6, 0])\n            scale([1.3, 1, 1])\n                cylinder(h=15, r1=10, r2=8, $fn=16);\n    }\n}\n\nmodule yeti_arms() {\n    // Left arm\n    color(\"snow\")\n    translate([-18, 0, 28]) {\n        rotate([0, 0, -30]) {\n            // Upper arm\n            rotate([0, 0, 10])\n                cylinder(h=20, r=5, $fn=12);\n            \n            // Lower arm\n            translate([-10, -5, -15])\n                rotate([0, 0, -20])\n                    cylinder(h=18, r=4, $fn=10);\n            \n            // Hand with 4 fingers\n            translate([-15, -8, -30])\n                rotate([0, 0, -40])\n                    scale([1, 0.7, 0.5])\n                        sphere(r=4, $fn=8);\n        }\n    }\n    \n    // Right arm - mirrored\n    mirror([1, 0, 0]) \n        yeti_arms();\n}\n\nmodule yeti_legs() {\n    // Left leg\n    color(\"whitesmoke\")\n    translate([-8, -5, 0]) {\n        // Upper leg\n        cylinder(h=20, r=6, $fn=12);\n        \n        // Lower leg\n        translate([0, 0, -22])\n            cylinder(h=18, r=5, $fn=10);\n        \n        // Large foot\n        translate([0, -3, -42])\n            scale([1.5, 2.5, 0.8])\n                cube([8, 12, 6], center=true);\n    }\n    \n    // Right leg - mirrored\n    translate([8, -5, 0]) {\n        cylinder(h=20, r=6, $fn=12);\n        translate([0, 0, -22])\n            cylinder(h=18, r=5, $fn=10);\n        translate([0, -3, -42])\n            scale([1.5, 2.5, 0.8])\n                cube([8, 12, 6], center=true);\n    }\n}\n\nmodule yeti_head() {\n    color(\"ghostwhite\")\n    union() {\n        // Main head shape\n        translate([0, -15, 40])\n            scale([1.2, 1.4, 1.3])\n                sphere(r=12, $fn=20);\n        \n        // Muzzle\n        translate([0, -25, 38])\n            scale([0.8, 1.2, 0.8])\n                sphere(r=8, $fn=16);\n        \n        // Nose\n        color(\"slategray\")\n        translate([0, -30, 40])\n            scale([0.8, 0.5, 0.5])\n                sphere(r=3, $fn=8);\n        \n        // Eyes with glowing blue effect\n        color(\"dodgerblue\")\n        translate([-5, -20, 45])\n            sphere(r=2, $fn=8);\n        translate([5, -20, 45])\n            sphere(r=2, $fn=8);\n        \n        // Eyebrow ridges\n        color(\"white\")\n        translate([-7, -18, 47])\n            scale([1.5, 0.5, 0.5])\n                cube([4, 2, 2], center=true);\n        translate([7, -18, 47])\n            scale([1.5, 0.5, 0.5])\n                cube([4, 2, 2], center=true);\n    }\n}\n\nmodule yeti_fur() {\n    // Fur tufts using small spheres\n    color(\"white\")\n    for(i = [-2:2]) {\n        for(j = [-1:1]) {\n            translate([i*8, -5+j*10, 35-j*3])\n                sphere(r=2+abs(i), $fn=6);\n        }\n    }\n    \n    // Back fur\n    for(i = [-1:1]) {\n        translate([i*6, -3, 20])\n            sphere(r=3, $fn=6);\n    }\n}\n\nmodule yeti_horns() {\n    // Small icy horns\n    color(\"lightblue\")\n    translate([-8, -10, 52])\n        rotate([30, 0, -20])\n            cylinder(h=8, r1=3, r2=1, $fn=6);\n    \n    translate([8, -10, 52])\n        rotate([30, 0, 20])\n            cylinder(h=8, r1=3, r2=1, $fn=6);\n}\n\n// Assemble the yeti\nunion() {\n    yeti_body();\n    yeti_arms();\n    yeti_legs();\n    yeti_head();\n    yeti_fur();\n    yeti_horns();\n}\n\n// Base platform for stability\ncolor(\"lightgray\")\ntranslate([0, 0, -45])\n    cube([40, 30, 3], center=true);",
    "renders": true
  },
  {
    "mythical_creature": "yowie",
    "openscad_code": "// Yowie - Australian mythical creature\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Main body color\nyowie_color = [0.4, 0.25, 0.1];  // Dark brown fur\n\nmodule yowie_body() {\n    color(yowie_color)\n    union() {\n        // Torso - muscular primate body\n        translate([0, 0, 8])\n            scale([1.5, 1, 2])\n            sphere(8);\n        \n        // Chest details\n        translate([0, 6, 14])\n            scale([0.8, 0.3, 1.2])\n            sphere(5);\n        \n        // Abdomen\n        translate([0, 0, 4])\n            scale([1.2, 0.8, 1.5])\n            sphere(6);\n    }\n}\n\nmodule yowie_head() {\n    color(yowie_color)\n    union() {\n        // Main head shape\n        translate([0, 12, 20])\n            scale([1.2, 1.5, 1.3])\n            sphere(7);\n        \n        // Muzzle/snout\n        translate([0, 19, 19])\n            scale([0.8, 1.2, 0.7])\n            sphere(5);\n        \n        // Brow ridge\n        translate([0, 15, 24])\n            scale([1.4, 0.5, 0.3])\n            cube([8, 3, 1], center=true);\n        \n        // Eyes (deep set)\n        for(x = [-3, 3]) {\n            translate([x, 16, 22])\n                sphere(1.5);\n            translate([x, 17, 22.5])\n                color([0, 0, 0])\n                sphere(1);\n        }\n        \n        // Nostrils\n        for(x = [-1.5, 1.5]) {\n            translate([x, 22, 18.5])\n                color([0.2, 0.1, 0.05])\n                cylinder(h=2, d=1, center=true);\n        }\n        \n        // Mouth\n        translate([0, 23, 18])\n            color([0.3, 0.1, 0.05])\n            scale([1, 0.3, 0.5])\n            sphere(2);\n    }\n}\n\nmodule yowie_arms() {\n    color(yowie_color)\n    union() {\n        // Left arm\n        translate([-8, 8, 15])\n            rotate([0, 0, -30])\n            union() {\n                // Upper arm\n                cylinder(h=12, d=4, center=false);\n                // Elbow\n                translate([0, 0, 12])\n                    sphere(2.5);\n                // Forearm\n                translate([0, -2, 14])\n                    rotate([30, 0, 0])\n                    cylinder(h=10, d=3.5, center=false);\n                // Hand\n                translate([0, -4, 23])\n                    scale([1, 0.5, 1.5])\n                    sphere(3);\n            }\n        \n        // Right arm (mirrored)\n        mirror([1, 0, 0])\n            translate([-8, 8, 15])\n                rotate([0, 0, -30])\n                union() {\n                    cylinder(h=12, d=4, center=false);\n                    translate([0, 0, 12])\n                        sphere(2.5);\n                    translate([0, -2, 14])\n                        rotate([30, 0, 0])\n                        cylinder(h=10, d=3.5, center=false);\n                    translate([0, -4, 23])\n                        scale([1, 0.5, 1.5])\n                        sphere(3);\n                }\n    }\n}\n\nmodule yowie_legs() {\n    color(yowie_color)\n    union() {\n        // Left leg\n        translate([-4, -2, 0])\n            union() {\n                // Thigh\n                cylinder(h=15, d=5, center=false);\n                // Knee\n                translate([0, 0, 15])\n                    sphere(3);\n                // Lower leg\n                translate([0, 0, 17])\n                    cylinder(h=12, d=4, center=false);\n                // Foot\n                translate([0, 2, 28])\n                    scale([1.5, 2.5, 0.8])\n                    cube([4, 6, 2], center=true);\n            }\n        \n        // Right leg\n        translate([4, -2, 0])\n            union() {\n                cylinder(h=15, d=5, center=false);\n                translate([0, 0, 15])\n                    sphere(3);\n                translate([0, 0, 17])\n                    cylinder(h=12, d=4, center=false);\n                translate([0, 2, 28])\n                    scale([1.5, 2.5, 0.8])\n                    cube([4, 6, 2], center=true);\n            }\n    }\n}\n\nmodule yowie_fur_detail() {\n    color([0.35, 0.2, 0.08])\n    union() {\n        // Back fur patches\n        for(i = [0:15:60]) {\n            rotate([0, 0, i])\n                translate([0, -5, 12])\n                    scale([0.5, 0.5, 1])\n                    sphere(2);\n        }\n        \n        // Shoulder tufts\n        for(angle = [40:20:100]) {\n            rotate([0, 0, angle])\n                translate([7, 8, 16])\n                    sphere(1.5);\n        }\n        \n        // Head tuft\n        translate([0, 12, 27])\n            sphere(2);\n    }\n}\n\n// Assemble the complete yowie\nunion() {\n    yowie_body();\n    yowie_head();\n    yowie_arms();\n    yowie_legs();\n    yowie_fur_detail();\n}",
    "renders": true
  },
  {
    "mythical_creature": "zburator",
    "openscad_code": "// Zburator - Romanian mythical dragon-human hybrid\n// Wingspan: 80mm, Body length: 60mm, Height: 40mm\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.4, 0.2, 0.1];      // Dark brown\ncolor_wings = [0.6, 0.3, 0.8];    // Purple magical membrane\ncolor_scales = [0.3, 0.5, 0.4];   // Green scales\ncolor_eyes = [1, 0, 0];           // Red glowing eyes\n\n// Scale factor for 3D printing\nscale_factor = 1;\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Body\n        color(color_body)\n        translate([0, 0, 20])\n        scale([1.2, 0.8, 1])\n        sphere(15);\n        \n        // Head\n        color(color_body)\n        translate([0, 25, 35])\n        scale([0.8, 1.2, 0.9])\n        sphere(12);\n        \n        // Snout\n        color(color_body)\n        translate([0, 35, 32])\n        scale([0.4, 0.8, 0.3])\n        rotate([0, 20, 0])\n        cylinder(h=10, r1=8, r2=4);\n        \n        // Horns\n        for(i = [-1, 1]) {\n            color(color_body)\n            translate([i*8, 20, 45])\n            rotate([0, -20, i*10])\n            cylinder(h=15, r1=3, r2=1);\n        }\n        \n        // Eyes\n        for(i = [-1, 1]) {\n            color(color_eyes)\n            translate([i*6, 30, 38])\n            sphere(3);\n        }\n        \n        // Wings\n        module wing() {\n            color(color_wings)\n            translate([0, 0, 30])\n            rotate([0, 0, 0])\n            linear_extrude(height=1)\n            polygon(points=[\n                [0, 0],\n                [30, 0],\n                [35, 20],\n                [25, 35],\n                [10, 30],\n                [0, 15]\n            ]);\n        }\n        \n        // Left wing\n        translate([-15, 0, 0])\n        rotate([0, 0, 30])\n        wing();\n        \n        // Right wing\n        translate([15, 0, 0])\n        rotate([0, 0, 150])\n        scale([-1, 1, 1])\n        wing();\n        \n        // Tail\n        color(color_body)\n        translate([0, -30, 15])\n        rotate([0, 0, 0])\n        for(i = [0:1:10]) {\n            translate([0, -i*3, -i*1.5])\n            scale([1 - i*0.08, 1, 1 - i*0.08])\n            sphere(4);\n        }\n        \n        // Legs\n        for(i = [-1, 1]) {\n            color(color_body)\n            translate([i*10, -10, 0])\n            rotate([0, 0, i*10])\n            cylinder(h=20, r1=4, r2=3);\n            \n            // Feet\n            translate([i*12, -12, -5])\n            cube([6, 8, 2], center=true);\n        }\n        \n        // Arms\n        for(i = [-1, 1]) {\n            color(color_body)\n            translate([i*15, 5, 25])\n            rotate([0, 0, i*30])\n            cylinder(h=15, r1=3, r2=2);\n            \n            // Hands\n            translate([i*20, 10, 25])\n            sphere(3);\n        }\n        \n        // Scales pattern on body\n        color(color_scales)\n        for(i = [0:30:360]) {\n            for(j = [0:15:45]) {\n                rotate([0, 0, i])\n                translate([0, 0, 20 + j*0.5])\n                scale([0.8, 0.6, 0.2])\n                rotate([0, j, 0])\n                sphere(2);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "zephyr",
    "openscad_code": "// Zephyr - Wind spirit mythical creature\n// Designed for 3D printing with minimal overhangs\n\n$fn = 32;  // Smooth curves for realistic appearance\n\nmodule zephyr_body() {\n    // Main body - elongated teardrop shape\n    color(\"LightBlue\") union() {\n        // Central torso\n        translate([0, 0, 10]) scale([1, 0.7, 1.5]) sphere(8);\n        \n        // Tail section\n        translate([0, 0, -5]) scale([0.5, 0.5, 2]) cylinder(h=15, r1=8, r2=3);\n        \n        // Chest protrusion\n        translate([0, -3, 15]) scale([0.8, 0.5, 0.8]) sphere(5);\n    }\n}\n\nmodule zephyr_head() {\n    // Sleek head with flowing features\n    color(\"SkyBlue\") union() {\n        // Main head shape\n        translate([0, 0, 22]) scale([0.8, 0.6, 1.2]) sphere(6);\n        \n        // Snout\n        translate([0, -2, 28]) scale([0.4, 0.4, 1]) sphere(3);\n        \n        // Crest flowing backward\n        for(i = [0:30:150]) {\n            rotate([0, i/5, 0]) translate([-i/10, 0, 25-i/10]) \n            scale([0.1, 0.05, 0.3]) cylinder(h=8, r=2);\n        }\n    }\n    \n    // Eyes (magical glowing)\n    color(\"DeepSkyBlue\") {\n        translate([2, -2.5, 25]) sphere(1);\n        translate([-2, -2.5, 25]) sphere(1);\n    }\n}\n\nmodule zephyr_wings() {\n    // Four wings in flowing wind pattern\n    color(\"AliceBlue\") difference() {\n        // Right top wing\n        translate([8, 0, 18]) rotate([0, 0, 20]) {\n            // Main wing shape\n            scale([2, 0.1, 1.5]) sphere(6);\n            \n            // Wing tip feathers\n            for(i = [0:5:25]) {\n                translate([12-i/2, 0, 8-i/3]) rotate([0, -i, 0])\n                scale([0.3, 0.05, 0.8]) cylinder(h=5, r=1.5);\n            }\n        }\n        \n        // Cut wing holes for realism\n        translate([12, 0, 18]) sphere(3);\n        translate([10, 0, 22]) sphere(2);\n    }\n    \n    // Left top wing (mirrored)\n    mirror([1, 0, 0]) translate([8, 0, 18]) rotate([0, 0, 20]) {\n        scale([2, 0.1, 1.5]) sphere(6);\n    }\n    \n    // Lower wings\n    color(\"PowderBlue\") {\n        // Right bottom wing\n        translate([6, 0, 8]) rotate([0, 0, -15]) {\n            scale([1.8, 0.08, 1.3]) sphere(5);\n        }\n        \n        // Left bottom wing\n        mirror([1, 0, 0]) translate([6, 0, 8]) rotate([0, 0, -15]) {\n            scale([1.8, 0.08, 1.3]) sphere(5);\n        }\n    }\n}\n\nmodule zephyr_legs() {\n    // Wind-swirl legs\n    color(\"LightCyan\") union() {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side*5, 0, 5]) {\n                // Upper leg\n                rotate([0, 0, side*30]) \n                scale([0.3, 0.3, 2]) cylinder(h=8, r1=2, r2=1);\n                \n                // Lower leg swirl\n                translate([side*3, 0, -3]) rotate([0, 0, side*45])\n                scale([0.2, 0.2, 1.5]) cylinder(h=6, r1=1.5, r2=0.5);\n            }\n        }\n    }\n}\n\nmodule zephyr_details() {\n    // Wind patterns and magical elements\n    color(\"White\") {\n        // Swirling patterns on body\n        for(i = [0:45:315]) {\n            rotate([0, 0, i]) translate([3, 0, 10]) \n            scale([0.1, 0.05, 0.5]) cylinder(h=8, r=1);\n        }\n        \n        // Tail streamers\n        for(i = [0:20:80]) {\n            translate([0, 0, -10-i]) rotate([0, i, 0])\n            scale([0.8-i/100, 0.8-i/100, 0.3]) sphere(3);\n        }\n    }\n    \n    // Magical orbs\n    color(\"Cyan\") {\n        translate([0, 0, 30]) sphere(1.5);\n        translate([5, 0, 12]) sphere(1);\n        translate([-5, 0, 12]) sphere(1);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base creature\n    zephyr_body();\n    zephyr_head();\n    zephyr_wings();\n    zephyr_legs();\n    zephyr_details();\n}\n\n// Ground contact base (for printing stability)\ncolor(\"Azure\") translate([0, 0, -15]) cylinder(h=1, r=8);",
    "renders": true
  },
  {
    "mythical_creature": "ziz",
    "openscad_code": "// Ziz - Legendary Sky Guardian Bird from Jewish mythology\n// Wingspan: 80mm, Height: 40mm, Length: 60mm\n\n// Color definitions\ncolor_body = \"goldenrod\";\ncolor_wings = \"darkgoldenrod\";\ncolor_beak = \"orangered\";\ncolor_eyes = \"black\";\ncolor_claws = \"silver\";\n\n// Overall scaling factor\nscale_factor = 1;\n\nmodule ziz_body() {\n    color(color_body)\n    union() {\n        // Main torso - elongated oval\n        translate([0, 0, 5])\n        scale([1.2, 0.8, 1])\n        sphere(d=25, $fn=32);\n        \n        // Chest protrusion\n        translate([0, -8, 5])\n        scale([0.8, 0.6, 0.8])\n        sphere(d=20, $fn=32);\n        \n        // Back hump\n        translate([0, 8, 8])\n        scale([1, 0.7, 0.6])\n        sphere(d=18, $fn=32);\n    }\n}\n\nmodule ziz_head() {\n    color(color_body)\n    union() {\n        // Head - smaller sphere\n        translate([-12, 0, 20])\n        sphere(d=15, $fn=32);\n        \n        // Beak - cone shape\n        color(color_beak)\n        translate([-22, 0, 19])\n        rotate([0, 20, 0])\n        cylinder(h=12, d1=6, d2=0, $fn=16);\n        \n        // Crest feathers\n        color(color_body)\n        for(i = [-2:2]) {\n            translate([-12, i*3, 28])\n            rotate([0, 10, 0])\n            cylinder(h=8, d=2, $fn=8);\n        }\n        \n        // Eyes\n        color(color_eyes)\n        translate([-15, -4, 22])\n        sphere(d=3);\n        translate([-15, 4, 22])\n        sphere(d=3);\n    }\n}\n\nmodule ziz_wing() {\n    color(color_wings)\n    union() {\n        // Main wing structure\n        translate([0, 0, 0])\n        scale([1, 0.2, 0.8])\n        sphere(d=35, $fn=32);\n        \n        // Primary feathers\n        for(i = [0:4]) {\n            translate([15 + i*3, 0, -10 + i*2])\n            rotate([0, -20 - i*5, 0])\n            scale([1.5, 0.1, 0.3])\n            sphere(d=8, $fn=8);\n        }\n        \n        // Secondary feathers\n        for(i = [0:2]) {\n            translate([5 + i*5, 0, 5 - i*3])\n            rotate([0, -30, 0])\n            scale([1, 0.1, 0.4])\n            sphere(d=6, $fn=8);\n        }\n    }\n}\n\nmodule ziz_tail() {\n    color(color_body)\n    union() {\n        // Tail base\n        translate([15, 0, 8])\n        scale([1.5, 0.5, 0.3])\n        sphere(d=12, $fn=32);\n        \n        // Tail feathers\n        for(i = [-2:2]) {\n            translate([20, i*4, 10 - abs(i)*2])\n            rotate([0, 30, i*10])\n            scale([2, 0.1, 0.5])\n            sphere(d=8, $fn=8);\n        }\n    }\n}\n\nmodule ziz_legs() {\n    color(color_body)\n    union() {\n        // Left leg\n        translate([5, -8, 0])\n        rotate([0, 30, 0])\n        cylinder(h=10, d=3, $fn=12);\n        \n        // Right leg\n        translate([5, 8, 0])\n        rotate([0, 30, 0])\n        cylinder(h=10, d=3, $fn=12);\n        \n        // Feet and claws\n        color(color_claws)\n        translate([10, -8, -5])\n        union() {\n            // Foot base\n            cube([8, 6, 2]);\n            \n            // Toes\n            for(i = [-1, 0, 1]) {\n                translate([12, i*2, -3])\n                cylinder(h=3, d=1.5, $fn=8);\n            }\n        }\n        \n        translate([10, 8, -5])\n        mirror([0, 1, 0])\n        union() {\n            // Foot base\n            cube([8, 6, 2]);\n            \n            // Toes\n            for(i = [-1, 0, 1]) {\n                translate([12, i*2, -3])\n                cylinder(h=3, d=1.5, $fn=8);\n            }\n        }\n    }\n}\n\nmodule ziz_details() {\n    color(color_body)\n    // Scale pattern on body\n    for(i = [0:10]) {\n        for(j = [0:8]) {\n            angle = i * 36;\n            translate([sin(angle) * 8, cos(angle) * 8, 5 + j*2])\n            sphere(d=1.5, $fn=8);\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    ziz_body();\n    ziz_head();\n    \n    // Left wing\n    translate([0, -15, 15])\n    rotate([0, -10, -20])\n    ziz_wing();\n    \n    // Right wing\n    translate([0, 15, 15])\n    rotate([0, -10, 20])\n    mirror([0, 1, 0])\n    ziz_wing();\n    \n    ziz_tail();\n    ziz_legs();\n    ziz_details();\n}",
    "renders": true
  },
  {
    "mythical_creature": "zmeu",
    "openscad_code": "// Zmeu Mythical Creature - Realistic Style\n// A dragon-like creature from Romanian folklore with human features\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Main module\nmodule zmeu() {\n    // Body\n    color(\"darkgreen\") body();\n    \n    // Head\n    translate([0, 15, 25]) color(\"forestgreen\") head();\n    \n    // Wings\n    translate([0, 0, 20]) wings();\n    \n    // Arms\n    translate([12, 5, 15]) rotate([0, 0, -20]) right_arm();\n    translate([-12, 5, 15]) mirror([1, 0, 0]) right_arm();\n    \n    // Legs\n    translate([6, -15, 0]) right_leg();\n    translate([-6, -15, 0]) mirror([1, 0, 0]) right_leg();\n    \n    // Tail\n    translate([0, -25, 5]) tail();\n}\n\nmodule body() {\n    union() {\n        // Main torso\n        scale([1.2, 1.5, 1]) sphere(d=20);\n        \n        // Chest scales\n        for(i = [-2:2]) {\n            translate([i*4, 10, 8]) rotate([90, 0, 0]) \n                scale([1.5, 1.5, 0.5]) cylinder(h=1, d=5);\n        }\n    }\n}\n\nmodule head() {\n    union() {\n        // Main head\n        scale([0.8, 1, 1.2]) sphere(d=15);\n        \n        // Snout\n        translate([0, 8, 0]) scale([0.6, 1.2, 0.8]) sphere(d=8);\n        \n        // Horns\n        color(\"saddlebrown\") {\n            translate([5, -2, 6]) rotate([0, -20, 10]) \n                cylinder(h=8, d1=3, d2=1);\n            translate([-5, -2, 6]) rotate([0, -20, -10]) \n                cylinder(h=8, d1=3, d2=1);\n        }\n        \n        // Eyes\n        color(\"red\") {\n            translate([3, 4, 3]) sphere(d=2);\n            translate([-3, 4, 3]) sphere(d=2);\n        }\n        \n        // Fangs\n        color(\"ivory\") {\n            translate([2, 9, -2]) rotate([0, 20, 0]) \n                cylinder(h=3, d1=1, d2=0);\n            translate([-2, 9, -2]) rotate([0, 20, 0]) \n                cylinder(h=3, d1=1, d2=0);\n        }\n    }\n}\n\nmodule wings() {\n    color(\"darkolivegreen\") {\n        // Right wing\n        translate([15, 0, 0]) {\n            rotate([0, 0, -30]) {\n                // Upper wing\n                scale([3, 1, 0.5]) sphere(d=15);\n                // Lower wing\n                translate([8, -8, 0]) scale([2, 1.5, 0.3]) sphere(d=10);\n            }\n        }\n        \n        // Left wing (mirrored)\n        mirror([1, 0, 0]) {\n            translate([15, 0, 0]) {\n                rotate([0, 0, -30]) {\n                    scale([3, 1, 0.5]) sphere(d=15);\n                    translate([8, -8, 0]) scale([2, 1.5, 0.3]) sphere(d=10);\n                }\n            }\n        }\n    }\n}\n\nmodule right_arm() {\n    union() {\n        // Upper arm\n        color(\"darkgreen\") \n            rotate([0, 90, 0]) cylinder(h=12, d=6);\n        \n        // Lower arm\n        translate([0, 12, 0]) rotate([0, 90, -20]) \n            color(\"darkgreen\") cylinder(h=10, d=5);\n        \n        // Hand with claws\n        translate([0, 22, -2]) {\n            color(\"darkgreen\") sphere(d=6);\n            color(\"black\") {\n                for(i = [-1, 0, 1]) {\n                    translate([i*2, 3, 0]) rotate([0, -90, 0]) \n                        cylinder(h=3, d1=2, d2=1);\n                }\n            }\n        }\n    }\n}\n\nmodule right_leg() {\n    union() {\n        // Thigh\n        color(\"darkgreen\") \n            rotate([0, 90, 0]) cylinder(h=15, d=8);\n        \n        // Lower leg\n        translate([0, 15, 0]) rotate([0, 90, 30]) \n            color(\"darkgreen\") cylinder(h=12, d=6);\n        \n        // Foot\n        translate([0, 27, 3]) {\n            color(\"darkgreen\") scale([2, 3, 1]) sphere(d=6);\n            color(\"black\") {\n                // Toes with claws\n                for(i = [-1, 0, 1]) {\n                    translate([i*2, 4, 0]) rotate([0, -90, 0]) \n                        cylinder(h=3, d1=1.5, d2=0.5);\n                }\n            }\n        }\n    }\n}\n\nmodule tail() {\n    color(\"darkgreen\") {\n        // Segmented tail\n        for(i = [0:4]) {\n            translate([0, -i*6 - 5, -i*2]) \n                scale([1 - i*0.15, 1, 1 - i*0.15]) sphere(d=8);\n        }\n        \n        // Tail spike\n        translate([0, -35, -10]) rotate([0, 90, 0]) \n            color(\"saddlebrown\") cylinder(h=5, d1=4, d2=0);\n    }\n}\n\n// Render the creature\nscale(2.5) zmeu();",
    "renders": true
  },
  {
    "mythical_creature": "zubat",
    "openscad_code": "// Realistic Zubat - OpenSCAD Model\n// Medium complexity 3D printable model\n\n$fn = 32;\n\n// Main colors\ncolor_body = [0.2, 0.2, 0.3];\ncolor_wings = [0.15, 0.15, 0.25];\ncolor_eyes = [0.8, 0.1, 0.1];\ncolor_fangs = [0.9, 0.9, 0.8];\ncolor_inner_mouth = [0.5, 0.1, 0.1];\n\nmodule zubat() {\n    union() {\n        // Body\n        color(color_body)\n        translate([0, 0, 10])\n        scale([1.2, 1, 1.5])\n        sphere(8);\n\n        // Head\n        color(color_body)\n        translate([0, 0, 25])\n        scale([1.3, 1.2, 1.1])\n        sphere(7);\n\n        // Ears\n        for(side = [-1, 1]) {\n            color(color_body)\n            translate([side * 6, 0, 32])\n            rotate([0, side * 20, 0])\n            scale([0.3, 0.3, 1.5])\n            cylinder(10, 3, 1);\n        }\n\n        // Wings - left side\n        color(color_wings)\n        translate([-15, 0, 20])\n        rotate([0, 0, -30])\n        scale([1, 0.2, 1.5])\n        difference() {\n            cube([20, 1, 12]);\n            // Wing membrane cutouts\n            for(i = [1:3]) {\n                translate([i * 5, -1, 2])\n                cube([2, 3, 8]);\n            }\n        }\n\n        // Wings - right side (mirrored)\n        color(color_wings)\n        mirror([1, 0, 0])\n        translate([-15, 0, 20])\n        rotate([0, 0, -30])\n        scale([1, 0.2, 1.5])\n        difference() {\n            cube([20, 1, 12]);\n            for(i = [1:3]) {\n                translate([i * 5, -1, 2])\n                cube([2, 3, 8]);\n            }\n        }\n\n        // Wing support bones\n        for(side = [-1, 1]) {\n            color(color_body)\n            translate([side * 20, 0, 20])\n            rotate([0, 0, side * 30])\n            scale([0.1, 0.1, 1])\n            cylinder(15, 2, 1);\n            \n            translate([side * 15, 0, 25])\n            rotate([0, 0, side * 45])\n            scale([0.1, 0.1, 1])\n            cylinder(10, 1.5, 0.5);\n        }\n\n        // Eyes\n        for(side = [-1, 1]) {\n            color(color_eyes)\n            translate([side * 3, 4, 26])\n            sphere(2);\n            \n            // Eye shine\n            color([1, 1, 1])\n            translate([side * 2.5, 4.5, 26.5])\n            sphere(0.5);\n        }\n\n        // Mouth\n        color(color_inner_mouth)\n        translate([0, 5, 22])\n        rotate([90, 0, 0])\n        cylinder(3, 2, 1);\n\n        // Fangs\n        for(side = [-1, 1]) {\n            color(color_fangs)\n            translate([side * 1.5, 5.5, 21])\n            rotate([0, side * 10, 0])\n            cylinder(2, 0.5, 0);\n        }\n\n        // Feet\n        for(side = [-1, 1]) {\n            color(color_body)\n            translate([side * 3, 0, 5])\n            rotate([0, 0, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(5, 2, 1);\n        }\n\n        // Tail\n        color(color_body)\n        translate([0, -5, 8])\n        rotate([30, 0, 0])\n        scale([1, 1, 2])\n        cylinder(8, 3, 1);\n\n        // Tail spikes\n        for(i = [1:3]) {\n            color(color_body)\n            translate([0, -5 - i * 2, 8 - i * 2])\n            rotate([30, 0, 0])\n            scale([0.3, 0.3, 0.3])\n            cylinder(3, 2, 0);\n        }\n    }\n}\n\n// Main assembly\nzubat();",
    "renders": true
  },
  {
    "mythical_creature": "zilant",
    "openscad_code": "// Zilant - Winged dragon-serpent from Tatar/Russian mythology\n// Medium complexity realistic style, 3D printable\n\n$fn = 32; // Smooth curves for printing\n\nmodule body_segment(scale = 1) {\n    color(\"darkgreen\")\n    scale([scale, scale, scale])\n    union() {\n        // Main body cylinder\n        cylinder(h = 8, d1 = 6, d2 = 5, center = true);\n        \n        // Scale details\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([2.5, 0, 3])\n            scale([1, 0.3, 0.3])\n            sphere(d = 1.5);\n        }\n    }\n}\n\nmodule head() {\n    color(\"forestgreen\")\n    union() {\n        // Snout\n        translate([0, 0, 2])\n        scale([1.5, 1, 1])\n        sphere(d = 8);\n        \n        // Main head\n        sphere(d = 10);\n        \n        // Horns\n        color(\"darkolivegreen\")\n        translate([3, 3, 2])\n        rotate([0, -30, 45])\n        cylinder(h = 8, d1 = 3, d2 = 1);\n        \n        translate([3, -3, 2])\n        rotate([0, 30, -45])\n        cylinder(h = 8, d1 = 3, d2 = 1);\n        \n        // Eyes\n        color(\"red\")\n        translate([4, 2, 1])\n        sphere(d = 2);\n        translate([4, -2, 1])\n        sphere(d = 2);\n    }\n}\n\nmodule wing() {\n    color(\"limegreen\")\n    union() {\n        // Main wing structure\n        translate([0, 0, 0])\n        rotate([0, 0, 15])\n        scale([1, 0.1, 1])\n        cylinder(h = 20, d1 = 2, d2 = 0.5);\n        \n        // Wing membrane\n        for(i = [0:30:120]) {\n            rotate([0, 0, i])\n            translate([10, 0, 0])\n            scale([8, 0.2, 15])\n            rotate([0, 90, 0])\n            cylinder(h = 1, d = 15);\n        }\n    }\n}\n\nmodule tail_segment(pos, scale = 1) {\n    color(\"darkgreen\")\n    translate(pos)\n    scale([scale, scale, scale])\n    cylinder(h = 8, d1 = 5, d2 = 4, center = true);\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([0, 0, 25])\n    head();\n    \n    // Neck\n    for(i = [0:1:3]) {\n        translate([0, 0, 25 - i*6])\n        scale([1 - i*0.1, 1 - i*0.1, 1])\n        body_segment(0.8);\n    }\n    \n    // Body\n    for(i = [0:1:6]) {\n        translate([0, 0, 5 - i*6])\n        body_segment(1 - i*0.05);\n    }\n    \n    // Tail\n    for(i = [0:1:8]) {\n        tail_segment([0, 0, -35 - i*5], 1 - i*0.08);\n    }\n    \n    // Wings\n    translate([5, 0, 10])\n    rotate([0, 0, 30])\n    wing();\n    \n    translate([5, 0, 10])\n    rotate([0, 0, -30])\n    mirror([0, 1, 0])\n    wing();\n    \n    // Legs\n    color(\"darkolivegreen\")\n    translate([2, 3, 0])\n    rotate([0, -30, 0])\n    cylinder(h = 8, d = 3);\n    \n    translate([2, -3, 0])\n    rotate([0, 30, 0])\n    cylinder(h = 8, d = 3);\n    \n    // Feet\n    translate([5, 3, -5])\n    scale([1.5, 1, 0.5])\n    sphere(d = 4);\n    \n    translate([5, -3, -5])\n    scale([1.5, 1, 0.5])\n    sphere(d = 4);\n}",
    "renders": true
  },
  {
    "mythical_creature": "zitiron",
    "openscad_code": "// Zitiron - Mythical Sea Knight\n// A humanoid figure in medieval plate armor with fish-like features\n\n// Overall dimensions: ~80mm tall\n\n$fn = 32;  // Smooth curves for 3D printing\narmor_color = [0.7, 0.7, 0.8];  // Steel armor\nskin_color = [0.4, 0.6, 0.8];   // Blue-green fish skin\ndetails_color = [0.3, 0.3, 0.4]; // Darker details\n\nmodule zitiron() {\n    // Main body - armored torso\n    color(armor_color) {\n        // Chest plate\n        difference() {\n            translate([0, 0, 25])\n                scale([1.2, 0.8, 1.5])\n                sphere(10);\n            \n            // Neck hole\n            translate([0, 0, 35])\n                cylinder(h=10, r=4, center=true);\n            \n            // Arm holes\n            for(side = [-1, 1])\n                translate([side * 12, 0, 25])\n                    rotate([0, 90, 0])\n                        cylinder(h=15, r=5, center=true);\n        }\n        \n        // Back plate\n        mirror([0, 1, 0]) {\n            translate([0, 0, 25])\n                scale([1.2, 0.8, 1.5])\n                sphere(10);\n        }\n        \n        // Faulds (hip armor)\n        for(i = [0:2]) {\n            translate([0, -5 - i*3, 15])\n                cube([20 - i*2, 2, 10], center=true);\n        }\n    }\n    \n    // Head - fish-like with helmet\n    union() {\n        color(skin_color) {\n            // Fish head\n            translate([0, 0, 40])\n                scale([0.8, 0.6, 1.2])\n                sphere(8);\n            \n            // Snout\n            translate([0, 5, 40])\n                rotate([90, 0, 0])\n                    cylinder(h=10, r1=5, r2=2);\n            \n            // Fish eyes\n            for(side = [-1, 1])\n                translate([side * 4, 3, 42])\n                    color([0, 0, 0])\n                        sphere(1.5);\n        }\n        \n        color(armor_color) {\n            // Great helm\n            translate([0, 0, 45])\n                scale([1.1, 1, 1.3])\n                sphere(10);\n            \n            // Breathing holes\n            for(i = [1:3]) {\n                translate([0, 8, 42 + i*2])\n                    rotate([90, 0, 0])\n                        cylinder(h=1, r=1);\n            }\n        }\n    }\n    \n    // Arms - scaled fish arms with armor\n    for(side = [-1, 1]) {\n        // Upper arm\n        color(skin_color) {\n            translate([side * 15, 0, 25])\n                rotate([0, 0, side * 20])\n                    scale([1, 1, 3])\n                    cylinder(h=5, r=3);\n        }\n        \n        // Shoulder pauldron\n        color(armor_color) {\n            translate([side * 15, 0, 30])\n                rotate([0, 0, side * -30])\n                    scale([1.5, 1, 0.5])\n                    sphere(5);\n        }\n        \n        // Forearm with scales\n        color(skin_color) {\n            translate([side * 20, 0, 15])\n                rotate([0, 0, side * 20])\n                    scale([0.8, 0.8, 2.5])\n                    cylinder(h=4, r=2.5);\n            \n            // Fish scales pattern\n            for(i = [0:3]) {\n                translate([side * (20 + i*2), 0, 15 - i*2])\n                    scale([0.5, 0.3, 0.2])\n                    sphere(3);\n            }\n        }\n        \n        // Armored gauntlet\n        color(armor_color) {\n            translate([side * 22, 0, 10])\n                scale([1, 1, 1.5])\n                sphere(4);\n            \n            // Fingers (webbed)\n            color(skin_color) {\n                for(f = [-1, 0, 1]) {\n                    translate([side * 24, f*2, 8])\n                        scale([0.3, 0.5, 1.5])\n                        cylinder(h=1, r=1);\n                }\n            }\n        }\n    }\n    \n    // Legs - armored with fish tail elements\n    for(side = [-1, 1]) {\n        // Thigh armor\n        color(armor_color) {\n            translate([side * 5, 0, 5])\n                scale([1, 1, 2])\n                cylinder(h=8, r=5);\n        }\n        \n        // Fish tail lower body\n        color(skin_color) {\n            // Tail segments\n            for(i = [0:4]) {\n                translate([side * (5 - i*0.5), 0, -5 - i*3])\n                    scale([1 - i*0.1, 0.8 - i*0.1, 1])\n                    sphere(4 + i*0.5);\n            }\n            \n            // Tail fin\n            translate([0, 0, -20])\n                scale([1.5, 0.2, 2])\n                rotate([0, 0, side * 45])\n                    cube([10, 1, 8], center=true);\n        }\n        \n        // Knee armor\n        color(armor_color) {\n            translate([side * 4, 0, 0])\n                sphere(3.5);\n        }\n    }\n    \n    // Shield with trident emblem\n    color(armor_color) {\n        translate([-25, 0, 20])\n            rotate([0, 0, -10])\n                difference() {\n                    // Shield shape\n                    scale([0.8, 1.2, 0.1])\n                    cylinder(h=3, r=10);\n                    \n                    // Trident cutout\n                    translate([0, 3, -2])\n                        scale([0.1, 1, 0.5])\n                        cube([2, 15, 5], center=true);\n                    \n                    for(t = [-1, 0, 1]) {\n                        translate([t*3, -3, -2])\n                            scale([0.1, 0.8, 0.3])\n                            cube([5, 10, 5], center=true);\n                    }\n                }\n    }\n    \n    // Sword\n    color(details_color) {\n        translate([25, 0, 20])\n            rotate([0, 0, 15])\n                union() {\n                    // Blade\n                    translate([0, 0, 5])\n                        scale([0.1, 1, 4])\n                        cube([3, 2, 20], center=true);\n                    \n                    // Crossguard\n                    translate([0, 0, 15])\n                        cube([15, 2, 2], center=true);\n                    \n                    // Grip\n                    translate([0, 0, 10])\n                        cylinder(h=10, r=1.5);\n                    \n                    // Pommel\n                    translate([0, 0, 5])\n                        sphere(2.5);\n                }\n    }\n    \n    // Dorsal fin\n    color(skin_color) {\n        for(i = [0:3]) {\n            translate([0, 0, 35 - i*5])\n                rotate([0, 90, 0])\n                    scale([0.5, 1, 1])\n                    cylinder(h=8, r1=2, r2=0);\n        }\n    }\n}\n\n// Generate the creature\nzitiron();",
    "renders": true
  },
  {
    "mythical_creature": "abath",
    "openscad_code": "// Abath - One-horned horse-like mythical creature from Malay mythology\n// Medium complexity realistic style, 3D printable\n\n$fn = 32;  // Smooth curves\n\nmodule abath_body() {\n    color(\"ivory\") {\n        // Main torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n            sphere(r = 12);\n        \n        // Chest\n        translate([8, 0, 10])\n            scale([0.8, 0.6, 0.7])\n            sphere(r = 10);\n        \n        // Hind quarters\n        translate([-12, 0, 12])\n            scale([0.9, 0.7, 0.8])\n            sphere(r = 11);\n    }\n}\n\nmodule abath_neck() {\n    color(\"ivory\") {\n        translate([18, 0, 20])\n            rotate([0, -30, 0])\n            scale([0.8, 0.6, 2.5])\n            cylinder(r1 = 6, r2 = 4, h = 20);\n    }\n}\n\nmodule abath_head() {\n    color(\"ivory\") {\n        // Head\n        translate([28, 0, 30])\n            scale([1, 0.8, 1.2])\n            sphere(r = 8);\n        \n        // Snout\n        translate([35, 0, 28])\n            scale([1.5, 0.7, 0.8])\n            sphere(r = 5);\n        \n        // Ears\n        translate([25, 6, 38])\n            rotate([0, 20, 0])\n            scale([0.3, 0.2, 1])\n            cylinder(r = 3, h = 8);\n        \n        translate([25, -6, 38])\n            rotate([0, 20, 0])\n            scale([0.3, 0.2, 1])\n            cylinder(r = 3, h = 8);\n        \n        // Single spiraled horn\n        color(\"gold\")\n        translate([30, 0, 42])\n            rotate([0, 0, 0])\n            cylinder(r1 = 2, r2 = 0.5, h = 15);\n        \n        // Horn spiral detail\n        for(i = [0:5:30]) {\n            translate([30, 0, 42 + i/2])\n                rotate([0, 0, i * 12])\n                scale([1 - i/40, 1 - i/40, 0.5])\n                cylinder(r = 1.5 - i/30, h = 2);\n        }\n    }\n}\n\nmodule abath_legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        color(\"ivory\") {\n            // Upper leg\n            translate([12, side * 6, 10])\n                rotate([0, -side * 10, 0])\n                cylinder(r = 2.5, h = 15);\n            \n            // Lower leg\n            translate([12, side * 6, -3])\n                rotate([0, side * 10, 0])\n                cylinder(r = 2, h = 12);\n            \n            // Hoof\n            color(\"dimgray\")\n            translate([12, side * 6, -13])\n                scale([1.2, 1, 0.8])\n                cylinder(r = 2.5, h = 3);\n        }\n    }\n    \n    // Rear legs\n    for(side = [-1, 1]) {\n        color(\"ivory\") {\n            // Upper leg\n            translate([-15, side * 6, 8])\n                rotate([0, side * 15, 0])\n                cylinder(r = 3, h = 18);\n            \n            // Lower leg\n            translate([-15, side * 6, -5])\n                rotate([0, -side * 15, 0])\n                cylinder(r = 2.2, h = 15);\n            \n            // Hoof\n            color(\"dimgray\")\n            translate([-15, side * 6, -18])\n                scale([1.3, 1.1, 0.8])\n                cylinder(r = 2.8, h = 3);\n        }\n    }\n}\n\nmodule abath_mane() {\n    color(\"goldenrod\") {\n        // Mane along neck\n        for(i = [0:2:20]) {\n            translate([18 + i/2, 0, 25 + i * 0.5])\n                rotate([0, 0, i * 5])\n                scale([0.3, 0.1, 1 + sin(i) * 0.5])\n                cylinder(r = 2, h = 8 + sin(i) * 3);\n        }\n        \n        // Tail\n        translate([-18, 0, 12])\n            rotate([30, 0, 0])\n            cylinder(r1 = 4, r2 = 1, h = 25);\n        \n        // Tail hair strands\n        for(i = [0:5:360]) {\n            translate([-18 + cos(i) * 2, sin(i) * 2, -10])\n                rotate([30, 0, i])\n                scale([0.2, 0.2, 1])\n                cylinder(r = 0.5, h = 15);\n        }\n    }\n}\n\nmodule abath_eyes() {\n    color(\"black\") {\n        // Left eye\n        translate([33, 4, 32])\n            scale([0.8, 0.5, 0.5])\n            sphere(r = 1.5);\n        \n        // Right eye\n        translate([33, -4, 32])\n            scale([0.8, 0.5, 0.5])\n            sphere(r = 1.5);\n    }\n}\n\n// Assemble the Abath\nunion() {\n    abath_body();\n    abath_neck();\n    abath_head();\n    abath_legs();\n    abath_mane();\n    abath_eyes();\n}",
    "renders": true
  },
  {
    "mythical_creature": "adlet",
    "openscad_code": "// Adlet - Inuit mythical creature with human upper body and dog lower body\n// 3D printable model with moderate detail\n\n// Overall dimensions: 80mm height, 60mm length, 40mm width\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main colors\ncolor_body = [0.6, 0.4, 0.2];  // Earthy brown\ncolor_fur = [0.7, 0.5, 0.3];   // Lighter fur\ncolor_accents = [0.8, 0.2, 0.1];  // Red markings\n\n// Head module with human-like features\nmodule head() {\n    translate([0, 0, 65]) {\n        union() {\n            // Skull base\n            color(color_body) \n            scale([1.2, 1, 1.1]) \n            sphere(8);\n            \n            // Snout extension\n            color(color_fur) \n            translate([0, -6, -2]) \n            scale([0.8, 1.5, 0.6]) \n            sphere(4);\n            \n            // Ears (pointed)\n            color(color_fur) {\n                translate([5, 5, 3]) \n                rotate([0, 0, 30]) \n                scale([0.3, 2, 1]) \n                cylinder(h=6, r=2);\n                \n                translate([-5, 5, 3]) \n                rotate([0, 0, -30]) \n                scale([0.3, 2, 1]) \n                cylinder(h=6, r=2);\n            }\n            \n            // Eyes\n            color([0.1, 0.1, 0.1]) {\n                translate([3, -4, 1]) sphere(1.5);\n                translate([-3, -4, 1]) sphere(1.5);\n            }\n            \n            // Nose\n            color([0.05, 0.05, 0.05]) \n            translate([0, -8, 0]) \n            scale([1, 1.5, 0.5]) \n            sphere(1);\n        }\n    }\n}\n\n// Torso (human upper body)\nmodule torso() {\n    translate([0, 0, 40]) {\n        union() {\n            // Chest\n            color(color_body) \n            scale([1.2, 0.8, 1.5]) \n            cylinder(h=20, r=10);\n            \n            // Shoulders\n            color(color_fur) {\n                translate([12, 0, 15]) sphere(5);\n                translate([-12, 0, 15]) sphere(5);\n            }\n            \n            // Arms\n            module arm(side) {\n                translate([side * 12, 0, 15]) {\n                    rotate([0, 0, side * 20]) {\n                        // Upper arm\n                        color(color_body) \n                        rotate([90, 0, 0]) \n                        cylinder(h=15, r=3);\n                        \n                        // Forearm\n                        translate([0, 15, 0]) \n                        rotate([90, 0, 0]) \n                        cylinder(h=12, r=2.5);\n                        \n                        // Hand (paw-like)\n                        translate([0, 27, 0]) \n                        scale([1, 1.2, 0.5]) \n                        sphere(3);\n                    }\n                }\n            }\n            \n            arm(1);\n            arm(-1);\n        }\n    }\n}\n\n// Dog-like lower body\nmodule lower_body() {\n    union() {\n        // Hindquarters\n        color(color_fur) \n        translate([0, 0, 20]) \n        scale([1.3, 1.8, 1.2]) \n        cylinder(h=20, r=12);\n        \n        // Legs\n        module leg(side) {\n            translate([side * 8, 0, 10]) {\n                // Thigh\n                color(color_fur) \n                rotate([30, 0, side * 10]) \n                cylinder(h=15, r=4);\n                \n                // Shin\n                translate([0, 0, -15]) \n                rotate([60, 0, side * 5]) \n                cylinder(h=12, r=3);\n                \n                // Paw\n                translate([0, -8, -8]) {\n                    color(color_body) \n                    scale([1.2, 2, 0.8]) \n                    sphere(3);\n                    \n                    // Toes\n                    for(i = [-1:1]) {\n                        translate([i * 1.5, -2.5, 0]) \n                        color([0.4, 0.3, 0.2]) \n                        sphere(0.8);\n                    }\n                }\n            }\n        }\n        \n        leg(1);\n        leg(-1);\n        \n        // Tail\n        color(color_fur) {\n            translate([0, 18, 15]) {\n                rotate([0, 45, 0]) {\n                    for(i = [0:5]) {\n                        translate([0, i * 2, -i * 1.5]) \n                        scale([1 - i * 0.1, 1 - i * 0.1, 1 - i * 0.1]) \n                        sphere(3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Fur texture on body\nmodule fur_texture() {\n    difference() {\n        union();\n        \n        // Create subtle fur pattern with small spheres\n        for(i = [1:20]) {\n            for(j = [1:10]) {\n                angle = i * 18;\n                height = j * 3;\n                translate([\n                    cos(angle) * (15 - height * 0.3),\n                    sin(angle) * (15 - height * 0.3),\n                    height\n                ]) {\n                    color([0.5, 0.3, 0.1]) \n                    sphere(0.5);\n                }\n            }\n        }\n    }\n}\n\n// Magical markings (characteristic of mythical creatures)\nmodule markings() {\n    color(color_accents) {\n        // Tribal-like patterns\n        translate([0, 0, 50]) \n        rotate([0, 0, 45]) \n        scale([0.2, 1, 0.1]) \n        cylinder(h=30, r=5);\n        \n        translate([5, 0, 45]) \n        rotate([0, 0, -30]) \n        scale([0.2, 1, 0.1]) \n        cylinder(h=20, r=4);\n        \n        translate([-5, 0, 45]) \n        rotate([0, 0, 30]) \n        scale([0.2, 1, 0.1]) \n        cylinder(h=20, r=4);\n    }\n}\n\n// Assembly\nunion() {\n    head();\n    torso();\n    lower_body();\n    markings();\n}",
    "renders": true
  },
  {
    "mythical_creature": "ahool",
    "openscad_code": "// Ahool - Giant bat-like cryptid from Java\n// Wingspan: 80mm, Body length: 50mm\n\nmodule ahool_body() {\n    color(\"SaddleBrown\")\n    union() {\n        // Main torso\n        translate([0, 0, 10])\n            scale([1, 0.7, 1.2])\n            sphere(12, $fn=32);\n        \n        // Chest ridge\n        translate([0, -5, 15])\n            rotate([0, 0, 0])\n            scale([1.2, 0.3, 0.8])\n            cube([15, 8, 10], center=true);\n    }\n}\n\nmodule ahool_head() {\n    color(\"SaddleBrown\")\n    union() {\n        // Main skull\n        translate([0, -25, 20])\n            scale([0.9, 1.3, 0.8])\n            sphere(10, $fn=32);\n        \n        // Snout\n        translate([0, -35, 18])\n            rotate([10, 0, 0])\n            scale([0.6, 0.8, 0.5])\n            cylinder(h=12, r1=6, r2=3, $fn=16);\n        \n        // Ears (large and pointed)\n        for(side = [-1, 1]) {\n            translate([side * 12, -25, 32])\n                rotate([0, side * -20, 0])\n                scale([0.3, 2, 1.2])\n                cylinder(h=18, r1=8, r2=2, $fn=3);\n        }\n        \n        // Eyes (glowing red)\n        color(\"DarkRed\")\n        for(side = [-1, 1]) {\n            translate([side * 5, -33, 22])\n                sphere(2.5, $fn=16);\n        }\n        \n        // Fangs\n        color(\"Ivory\")\n        for(side = [-1, 1]) {\n            translate([side * 3, -42, 16])\n                rotate([10, 0, 0])\n                cylinder(h=6, r1=1, r2=0.5, $fn=8);\n        }\n    }\n}\n\nmodule ahool_wings() {\n    color(\"DarkSlateGray\")\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, 20])\n            rotate([0, 0, side * 15])\n            difference() {\n                // Main wing membrane\n                union() {\n                    scale([1, 2.5, 0.1])\n                    sphere(20, $fn=32);\n                    \n                    // Wing fingers\n                    for(i = [0:2]) {\n                        translate([side * (5 + i * 8), 35 + i * 10, 0])\n                            rotate([0, 0, side * (20 - i * 10)])\n                            scale([0.3, 1.5 - i * 0.3, 0.1])\n                            sphere(15, $fn=16);\n                    }\n                }\n                \n                // Wing holes (membrane tears)\n                for(i = [1:3]) {\n                    translate([side * (10 + i * 6), 20 + i * 8, 0])\n                        scale([1, 1.2, 0.5])\n                        sphere(3 + i, $fn=16);\n                }\n            }\n    }\n}\n\nmodule ahool_legs() {\n    color(\"SaddleBrown\")\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([side * 8, -5, 0])\n            rotate([30, 0, side * 10])\n            cylinder(h=15, r1=3, r2=2.5, $fn=12);\n        \n        // Lower leg\n        translate([side * 10, -8, -10])\n            rotate([0, 0, 0])\n            cylinder(h=12, r1=2.5, r2=2, $fn=12);\n        \n        // Feet with claws\n        translate([side * 10, -10, -18])\n            rotate([0, 0, 0])\n            scale([1.5, 2, 0.5])\n            sphere(3, $fn=8);\n        \n        // Claws\n        color(\"Ivory\")\n        for(claw = [-1, 0, 1]) {\n            translate([side * 10 + claw * 2, -12, -20])\n                rotate([0, 0, 0])\n                cylinder(h=4, r1=0.8, r2=0.3, $fn=8);\n        }\n    }\n}\n\nmodule ahool_tail() {\n    color(\"SaddleBrown\")\n    union() {\n        // Tail segments\n        for(i = [0:4]) {\n            translate([0, 15 + i * 5, 10 - i * 2])\n                scale([1 - i * 0.15, 1, 1 - i * 0.1])\n                sphere(6 - i, $fn=16);\n        }\n        \n        // Tail membrane\n        color(\"DarkSlateGray\")\n        translate([0, 25, 8])\n            scale([1.5, 0.8, 0.1])\n            rotate([90, 0, 0])\n            cylinder(h=20, r1=8, r2=3, $fn=16);\n    }\n}\n\n// Assemble the Ahool\nunion() {\n    ahool_body();\n    ahool_head();\n    ahool_wings();\n    ahool_legs();\n    ahool_tail();\n}",
    "renders": true
  },
  {
    "mythical_creature": "akhlut",
    "openscad_code": "// Akhlut - Mythical Inuit creature: half-orca, half-wolf\n// 3D-printable at ~75 mm length\n\n// Overall scale\nscale(0.75) {\n\n    // Main body - orca half\n    union() {\n        color(\"darkslategray\") {\n            // Orca body - elongated ellipsoid\n            translate([0, 0, 10]) \n                scale([1.5, 0.8, 0.6]) \n                    sphere(20, $fn=32);\n            \n            // Wolf torso transition\n            translate([-25, 0, 8]) \n                scale([1.2, 0.9, 0.7]) \n                    sphere(15, $fn=32);\n        }\n    }\n\n    // Orca tail flukes\n    color(\"black\") {\n        // Left fluke\n        translate([25, -15, 5]) \n            rotate([0, 0, -30]) \n                scale([1, 0.3, 0.1]) \n                    cube([15, 10, 2]);\n        \n        // Right fluke\n        translate([25, 15, 5]) \n            rotate([0, 0, 30]) \n                scale([1, 0.3, 0.1]) \n                    cube([15, 10, 2]);\n    }\n\n    // Wolf head\n    color(\"dimgray\") {\n        translate([-35, 0, 15]) \n            scale([0.8, 0.7, 0.9]) \n                sphere(12, $fn=32);\n    }\n\n    // Wolf snout\n    color(\"lightgray\") {\n        translate([-45, 0, 13]) \n            scale([1.2, 0.4, 0.4]) \n                sphere(8, $fn=24);\n    }\n\n    // Ears\n    module ear(side) {\n        translate([-38, side * 8, 22]) \n            rotate([30, 0, side * 20]) \n                scale([0.3, 0.1, 0.6]) \n                    cube([8, 5, 12]);\n    }\n    ear(1);\n    ear(-1);\n\n    // Eyes\n    color(\"firebrick\") {\n        translate([-40, 5, 18]) sphere(2, $fn=16);\n        translate([-40, -5, 18]) sphere(2, $fn=16);\n    }\n\n    // Orca dorsal fin\n    color(\"black\") {\n        translate([10, 0, 25]) \n            rotate([0, 0, 0]) \n                linear_extrude(height=0.1) {\n                    polygon(points=[[0,0], [-5,15], [5,15]]);\n                }\n    }\n\n    // Pectoral fins (front flippers)\n    module flipper(side) {\n        color(\"darkslategray\") {\n            translate([0, side * 15, 5]) \n                rotate([0, 30, side * 20]) \n                    scale([0.8, 0.3, 0.2]) \n                        sphere(10, $fn=16);\n        }\n    }\n    flipper(1);\n    flipper(-1);\n\n    // Wolf legs\n    module leg(pos, angle) {\n        translate(pos) \n            rotate([0, angle, 0]) {\n                // Upper leg\n                color(\"dimgray\") \n                    cylinder(h=12, r1=4, r2=3, center=false);\n                \n                // Lower leg\n                translate([0, 0, 12]) \n                    rotate([20, 0, 0]) \n                        color(\"darkgray\") \n                            cylinder(h=10, r1=3, r2=2.5, center=false);\n                \n                // Paw\n                translate([0, 0, 22]) \n                    rotate([40, 0, 0]) \n                        color(\"black\") \n                            sphere(3, $fn=16);\n            }\n    }\n\n    // Front legs\n    leg([-30, 8, 0], -10);\n    leg([-30, -8, 0], 10);\n\n    // Rear legs\n    leg([-5, 6, 0], -15);\n    leg([-5, -6, 0], 15);\n\n    // Orca white markings\n    color(\"white\") {\n        // Eye patch\n        translate([5, 8, 18]) \n            scale([0.8, 0.6, 0.3]) \n                sphere(6, $fn=16);\n        mirror([0,1,0]) \n            translate([5, 8, 18]) \n                scale([0.8, 0.6, 0.3]) \n                    sphere(6, $fn=16);\n        \n        // Belly marking\n        translate([5, 0, 2]) \n            scale([1.2, 0.8, 0.4]) \n                sphere(12, $fn=32);\n    }\n\n    // Mystical ice crystal on back\n    color(\"deepskyblue\") {\n        translate([-15, 0, 28]) \n            scale([0.5, 0.5, 1.2]) \n                cylinder(h=8, r1=3, r2=0.5, $fn=6);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "alicanto",
    "openscad_code": "// Alicanto - Mythical bird of Chilean legend that feeds on gold & silver\n// Wings have metallic sheen, eyes glow like emeralds, tail feathers like golden coins\n\n// Overall scale factor for 3D printing\nscale_factor = 0.4;\n\n// Colors\ngold = [0.85, 0.65, 0.13];\nsilver = [0.75, 0.75, 0.75];\nemerald = [0.31, 0.78, 0.47];\nbronze = [0.8, 0.5, 0.2];\n\nmodule alicanto() {\n    scale(scale_factor) {\n        // Main body\n        color(gold) {\n            translate([0, 0, 20]) {\n                difference() {\n                    sphere(15);  // Body sphere\n                    translate([0, 0, -10]) cube([30, 30, 20], center=true);  // Flatten bottom\n                }\n            }\n        }\n        \n        // Head\n        color(gold) {\n            translate([20, 0, 30]) {\n                sphere(10);  // Head\n            }\n        }\n        \n        // Beak\n        color(bronze) {\n            translate([32, 0, 30]) {\n                rotate([0, -20, 0]) {\n                    cylinder(h=12, r1=4, r2=2);\n                }\n            }\n        }\n        \n        // Eyes (glowing emeralds)\n        color(emerald) {\n            translate([25, 6, 32]) sphere(3);\n            translate([25, -6, 32]) sphere(3);\n        }\n        \n        // Wings\n        module wing(side) {\n            translate([0, side * 15, 25]) {\n                rotate([0, 0, side * 20]) {\n                    color(gold) {\n                        // Main wing structure\n                        difference() {\n                            scale([1, 2, 0.3]) sphere(12);\n                            translate([0, -15, -5]) cube([25, 15, 10], center=true);\n                        }\n                    }\n                    \n                    // Wing feathers\n                    for (i = [0:3]) {\n                        color(silver) {\n                            translate([-5 + i*3, 10 + i*5, 0]) {\n                                rotate([0, 0, -i * 10]) {\n                                    scale([0.8, 1.5, 0.1]) sphere(5);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        wing(1);  // Left wing\n        wing(-1); // Right wing\n        \n        // Tail feathers like golden coins\n        module tail_feather(offset) {\n            translate([-20 - offset*3, 0, 25 - offset*2]) {\n                rotate([0, 0, offset * 10]) {\n                    color(gold) {\n                        scale([0.2, 1, 1]) sphere(8);\n                    }\n                }\n            }\n        }\n        \n        for (i = [0:4]) {\n            tail_feather(i);\n        }\n        \n        // Legs\n        module leg(side) {\n            translate([5, side * 8, 10]) {\n                color(bronze) {\n                    cylinder(h=15, r=3);\n                    translate([0, 0, -7.5]) {\n                        scale([1.5, 3, 0.5]) sphere(4);  // Foot\n                    }\n                }\n            }\n        }\n        \n        leg(5);   // Left leg\n        leg(-5);  // Right leg\n        \n        // Metallic scales pattern on body\n        module scale(x, y, z) {\n            translate([x, y, z]) {\n                color(silver) {\n                    scale([1, 1, 0.2]) sphere(2);\n                }\n            }\n        }\n        \n        for (a = [0:30:359]) {\n            r = 12;\n            x = cos(a) * r;\n            y = sin(a) * r;\n            scale(x, y, 22);\n        }\n    }\n}\n\n// Create the alicanto\nalicanto();",
    "renders": true
  },
  {
    "mythical_creature": "almas",
    "openscad_code": "// Almas - mythic Mongolian wild-man\n// Height ≈ 60 mm, 3D-printable with no steep overhangs\n// All walls ≥ 1 mm for FDM printing\n\n$fn = 36;                 // moderate facet count\n\nmodule torso() {\n    color(\"BurlyWood\")\n    union() {\n        // Chest\n        translate([0,0,28]) scale([1,0.7,1.2]) sphere(10);\n        // Abdomen\n        translate([0,0,18]) scale([0.9,0.6,0.9]) sphere(8);\n        // Pelvis\n        translate([0,0,10]) scale([1,0.8,0.6]) sphere(7);\n    }\n}\n\nmodule head() {\n    color(\"BurlyWood\")\n    union() {\n        // Cranium\n        translate([0,0,45]) scale([0.8,0.7,0.9]) sphere(8);\n        // Heavy brow ridge\n        translate([0,-4,43]) rotate([0,15,0])\n            scale([1.2,0.3,0.4]) sphere(5);\n        // Wide nose\n        translate([0,-8.5,40]) scale([0.7,0.3,1]) sphere(3.5);\n        // Jaw\n        translate([0,-9,37]) scale([0.9,0.7,0.6]) sphere(6);\n    }\n    // Deep-set eyes\n    color(\"black\")\n    for(x=[-2.5,2.5])\n        translate([x,-8.5,42]) sphere(1.2);\n}\n\nmodule arm(side=1) {      // side = 1 right, -1 left\n    color(\"BurlyWood\")\n    translate([side*9,0,28]) rotate([0,0,side*15])\n        union() {\n            // Upper arm\n            rotate([90,0,0]) cylinder(h=12,r=3,center=true);\n            // Elbow\n            translate([0,0,-12]) sphere(2.8);\n            // Forearm\n            translate([0,0,-20]) rotate([90,0,0])\n                cylinder(h=12,r=2.6,center=true);\n            // Fist\n            translate([0,0,-27]) sphere(3);\n        }\n}\n\nmodule leg(side=1) {\n    color(\"BurlyWood\")\n    translate([side*4,0,3]) rotate([0,0,side*5])\n        union() {\n            // Thigh\n            rotate([90,0,0]) cylinder(h=13,r=3.5,center=true);\n            // Knee\n            translate([0,0,-13]) sphere(3.2);\n            // Calf\n            translate([0,0,-20]) rotate([90,0,0])\n                cylinder(h=12,r=3,center=true);\n            // Flat foot\n            translate([0,side*2,-26]) scale([1.4,2,0.8]) sphere(3);\n        }\n}\n\nmodule fur_patch(x,y,z,rx,ry,rz,s) {\n    color(\"SaddleBrown\")\n    translate([x,y,z]) rotate([rx,ry,rz])\n        scale([1,1,0.3]) sphere(s);\n}\n\nmodule fur() {\n    // Simple clusters of patches for a shaggy look\n    for(p=[[0, 0, 40, 0, 0, 0, 3.5],   // head top\n           [0,-7, 38, 0, 0, 0, 3],\n           [0, 9, 45, 0, 0, 0, 2.8],\n           [0, 0, 35, 0, 0, 0, 4],    // shoulders\n           [0, 0, 25, 0, 0, 0, 4.2],\n           [0, 0, 15, 0, 0, 0, 3.8]]) fur_patch(p[0],p[1],p[2],p[3],p[4],p[5],p[6]);\n}\n\n// Assemble figure\nunion() {\n    torso();\n    head();\n    arm(1);\n    arm(-1);\n    leg(1);\n    leg(-1);\n    fur();\n}",
    "renders": true
  },
  {
    "mythical_creature": "amhuluk",
    "openscad_code": "// Amhuluk - Mythical lake serpent of Klamath legend\n// Basic serpentine body with dragon-like features and webbed limbs\n\n$fn = 32;\n\n// Main colors\ncolor([0.2, 0.4, 0.3])  // Dark green base\n\nunion() {\n    // Serpentine body segments\n    for(i = [0:5]) {\n        translate([0, 0, i*8]) \n            rotate([0, 0, i*25])\n                scale([1 - i*0.08, 1 - i*0.08, 1])\n                    sphere(12 - i*1.5);\n    }\n    \n    // Head\n    translate([0, 0, 45]) {\n        // Main head shape\n        scale([1.5, 1.2, 1.3])\n            sphere(10);\n            \n        color([0.1, 0.3, 0.2])\n        // Snout\n        translate([12, 0, 0])\n            scale([2, 0.8, 0.8])\n                sphere(5);\n                \n        // Eyes\n        color([0.1, 0.1, 0.1])\n        translate([8, 6, 3])\n            sphere(2);\n        translate([8, -6, 3])\n            sphere(2);\n            \n        // Horns\n        color([0.3, 0.5, 0.4])\n        translate([2, 8, 8])\n            rotate([0, 30, 0])\n                cylinder(h=10, r1=3, r2=1);\n        translate([2, -8, 8])\n            rotate([0, -30, 0])\n                cylinder(h=10, r1=3, r2=1);\n    }\n    \n    // Webbed limbs\n    module limb() {\n        color([0.2, 0.4, 0.3])\n        union() {\n            // Upper limb\n            translate([0, 0, 0])\n                rotate([45, 0, 0])\n                    cylinder(h=15, r1=4, r2=2);\n                    \n            // Webbed hand/foot\n            translate([0, 0, 15])\n                rotate([90, 0, 0])\n                    scale([2, 1, 0.3])\n                        sphere(5);\n                        \n            // Web fingers\n            for(a = [0:45:135]) {\n                rotate([0, 0, a])\n                    translate([0, 6, 15])\n                        scale([0.3, 1, 0.2])\n                            cube([2, 8, 1]);\n            }\n        }\n    }\n    \n    // Front limbs\n    translate([15, 12, 25])\n        rotate([0, 45, 0])\n            limb();\n    translate([15, -12, 25])\n        rotate([0, -45, 0])\n            limb();\n            \n    // Rear limbs\n    translate([-15, 12, 15])\n        rotate([0, -45, 0])\n            limb();\n    translate([-15, -12, 15])\n        rotate([0, 45, 0])\n            limb();\n    \n    // Tail segments\n    for(i = [1:5]) {\n        color([0.2, 0.4, 0.3])\n        translate([0, 0, -i*10])\n            rotate([0, 0, -i*20])\n                scale([1 - i*0.1, 1 - i*0.1, 0.8])\n                    sphere(10 - i*1.2);\n    }\n    \n    // Dorsal fin ridge\n    color([0.15, 0.35, 0.25])\n    for(i = [0:8]) {\n        translate([0, 0, 40 - i*6])\n            rotate([0, 0, i*15])\n                cube([2, 12, 3], center=true);\n    }\n    \n    // Scale pattern on body\n    color([0.15, 0.3, 0.2])\n    for(i = [1:10]) {\n        for(j = [0:5]) {\n            rotate([0, 0, j*60])\n                translate([8 + sin(i*30)*3, 0, 40 - i*5])\n                    scale([1.5, 1, 0.5])\n                        sphere(2);\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "anqa",
    "openscad_code": "// Anqa mythical creature - Phoenix-like bird from Arabian mythology\n// Size: ~80mm wingspan\n\n// Main parameters\nbody_length = 30;\nbody_height = 15;\nwing_span = 80;\nhead_size = 12;\ntail_length = 35;\n\nmodule anqa_body() {\n    // Central body - elongated oval\n    color(\"darkgoldenrod\")\n    union() {\n        // Main body segment\n        scale([1.2, 1, 0.8])\n        sphere(d=body_length);\n        \n        // Chest protrusion\n        translate([body_length/3, 0, -body_height/4])\n        sphere(d=body_height);\n    }\n}\n\nmodule anqa_head() {\n    // Head with curved beak\n    color(\"goldenrod\")\n    union() {\n        // Main head\n        translate([body_length/2 + 5, 0, body_height/2])\n        sphere(d=head_size);\n        \n        // Beak - curved eagle-like\n        color(\"darkorange\")\n        translate([body_length/2 + 12, 0, body_height/2])\n        rotate([0, -20, 0])\n        cylinder(h=8, d1=6, d2=2, $fn=6);\n        \n        // Eye\n        color(\"black\")\n        translate([body_length/2 + 8, head_size/3, body_height/2 + 2])\n        sphere(d=2);\n    }\n}\n\nmodule anqa_wing() {\n    // Feathered wing structure\n    color(\"firebrick\")\n    union() {\n        // Main wing bone\n        translate([0, 0, 0])\n        rotate([0, 0, 15])\n        scale([1, 0.2, 0.1])\n        cube([wing_span/2, 20, 5]);\n        \n        // Primary feathers\n        for(i = [0:3]) {\n            rotate([0, 0, i*15])\n            translate([wing_span/2 - 5 - i*5, 0, -2])\n            scale([1, 0.3, 0.1])\n            cube([8, 12 - i*2, 2]);\n        }\n        \n        // Secondary feathers\n        for(i = [1:4]) {\n            rotate([0, 0, -i*20])\n            translate([wing_span/4 - i*3, 0, -1])\n            scale([0.8, 0.25, 0.1])\n            cube([6, 10 - i, 1.5]);\n        }\n    }\n}\n\nmodule anqa_tail() {\n    // Phoenix-like tail feathers\n    color(\"orangered\")\n    union() {\n        // Central tail\n        translate([-body_length/2 - 5, 0, 0])\n        rotate([0, -10, 0])\n        cylinder(h=tail_length, d1=8, d2=4, $fn=8);\n        \n        // Flame feathers\n        for(i = [0:5]) {\n            rotate([0, 0, i*30])\n            translate([-body_length/2 - 5, 0, 0])\n            rotate([0, -20 + i*5, 0])\n            scale([0.5, 0.5, 1])\n            cylinder(h=tail_length - i*2, d1=6 - i, d2=2, $fn=6);\n        }\n    }\n}\n\nmodule anqa_legs() {\n    // Eagle-like talons\n    color(\"darkgoldenrod\")\n    union() {\n        // Right leg\n        translate([0, body_length/4, -body_height/2])\n        rotate([20, 0, 10])\n        cylinder(h=12, d=3, $fn=6);\n        \n        // Right foot\n        translate([0, body_length/4 + 3, -body_height/2 - 10])\n        rotate([90, 0, 0])\n        scale([1, 1, 0.5])\n        sphere(d=6);\n        \n        // Toes\n        for(i = [0:2]) {\n            translate([0, body_length/4 + 3, -body_height/2 - 10])\n            rotate([90, 0, i*60 - 60])\n            translate([3, 0, 0])\n            cylinder(h=5, d=1.5, $fn=4);\n        }\n        \n        // Left leg (mirrored)\n        mirror([0, 1, 0])\n        children();\n    }\n}\n\nmodule anqa_crest() {\n    // Royal crest on head\n    color(\"gold\")\n    translate([body_length/2 + 5, 0, body_height/2 + head_size/2])\n    for(i = [0:2]) {\n        rotate([0, 0, i*120])\n        translate([0, 2, 0])\n        scale([0.2, 1, 0.2])\n        cube([8, 3, 8]);\n    }\n}\n\n// Assembly\nunion() {\n    // Body and head\n    anqa_body();\n    anqa_head();\n    \n    // Wings\n    translate([body_length/4, 0, body_height/4])\n    rotate([0, 0, 30])\n    anqa_wing();\n    \n    translate([body_length/4, 0, body_height/4])\n    mirror([0, 1, 0])\n    rotate([0, 0, 30])\n    anqa_wing();\n    \n    // Tail\n    anqa_tail();\n    \n    // Legs\n    anqa_legs();\n    \n    // Crest\n    anqa_crest();\n}",
    "renders": true
  },
  {
    "mythical_creature": "antaeus",
    "openscad_code": "// Antaeus - Mythical Giant of Libya\n// Realistic style, medium complexity\n\n// Basic proportions\n$fn = 50;\nscale_factor = 0.4;\nbody_height = 60 * scale_factor;\nshoulder_width = 35 * scale_factor;\nhead_size = 20 * scale_factor;\n\n// Colors\ncolor_body = \"SaddleBrown\";\ncolor_skin = \"Tan\";\ncolor_eyes = \"Red\";\ncolor_earth = \"DarkOliveGreen\";\n\n// Main module\nmodule antaeus() {\n    // Position base slightly above origin\n    translate([0, 0, 5]) {\n        // Body group\n        union() {\n            // Head with earth connection\n            translate([0, 0, body_height + head_size/2]) {\n                color(color_body) {\n                    // Head sphere\n                    sphere(head_size);\n                    \n                    // Earth crown - connection to mother earth\n                    difference() {\n                        cylinder(head_size * 0.8, head_size * 1.2, head_size * 1.2);\n                        translate([0, 0, -1]) cylinder(head_size * 0.8 + 2, head_size * 1.1, head_size * 1.1);\n                    }\n                    \n                    // Earth veins on head\n                    for(i = [0:5]) {\n                        rotate([0, 0, i * 60]) {\n                            translate([head_size * 0.8, 0, head_size * 0.3]) \n                                rotate([90, 0, 0]) cylinder(head_size * 0.5, head_size * 0.1, 0);\n                        }\n                    }\n                }\n                \n                // Eyes - glowing red\n                color(color_eyes) {\n                    translate([head_size * 0.4, head_size * 0.6, head_size * 0.2]) \n                        sphere(head_size * 0.15);\n                    translate([head_size * 0.4, -head_size * 0.6, head_size * 0.2]) \n                        sphere(head_size * 0.15);\n                }\n            }\n            \n            // Neck\n            translate([0, 0, body_height * 0.8]) {\n                color(color_skin) cylinder(body_height * 0.2, head_size * 0.7, head_size * 0.9);\n            }\n            \n            // Torso\n            translate([0, 0, body_height/2]) {\n                color(color_body) {\n                    // Chest\n                    scale([1, 0.8, 1.2]) sphere(shoulder_width/2);\n                    \n                    // Abs\n                    translate([0, 0, -body_height * 0.3]) {\n                        scale([0.8, 0.6, 1]) sphere(shoulder_width/2);\n                    }\n                    \n                    // Earth cracks on torso\n                    for(i = [0:3]) {\n                        translate([0, -shoulder_width/2 + i * shoulder_width/3, body_height * 0.2]) {\n                            rotate([0, 90, 0]) cylinder(shoulder_width/2, 1, 1);\n                        }\n                    }\n                }\n            }\n            \n            // Arms\n            module arm(side) {\n                translate([side * shoulder_width/2, 0, body_height * 0.7]) {\n                    rotate([0, side * 20, 0]) {\n                        // Upper arm\n                        color(color_skin) cylinder(body_height * 0.3, shoulder_width * 0.15, shoulder_width * 0.12);\n                        \n                        // Lower arm\n                        translate([0, 0, body_height * 0.3]) {\n                            rotate([side * 30, 0, 0]) {\n                                color(color_skin) cylinder(body_height * 0.25, shoulder_width * 0.12, shoulder_width * 0.1);\n                                \n                                // Giant fists\n                                translate([0, 0, body_height * 0.25]) {\n                                    color(color_body) sphere(shoulder_width * 0.2);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            arm(1);\n            arm(-1);\n            \n            // Legs\n            module leg(side) {\n                translate([side * shoulder_width/3, 0, 0]) {\n                    // Upper leg\n                    color(color_skin) cylinder(body_height * 0.4, shoulder_width * 0.2, shoulder_width * 0.15);\n                    \n                    // Lower leg\n                    translate([0, 0, body_height * 0.4]) {\n                        color(color_skin) cylinder(body_height * 0.35, shoulder_width * 0.15, shoulder_width * 0.12);\n                        \n                        // Feet connected to earth\n                        translate([0, 0, body_height * 0.35]) {\n                            color(color_earth) {\n                                scale([1.5, 2, 0.5]) sphere(shoulder_width * 0.15);\n                                \n                                // Earth tendrils\n                                for(i = [0:4]) {\n                                    rotate([0, 0, i * 90 + 45]) {\n                                        translate([shoulder_width * 0.2, 0, -5]) {\n                                            cylinder(10, 2, 0.5);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            leg(1);\n            leg(-1);\n        }\n        \n        // Earth base - Antaeus is always connected to earth\n        color(color_earth) {\n            translate([0, 0, -5]) {\n                cylinder(5, shoulder_width * 1.5, shoulder_width * 2);\n                \n                // Earth waves\n                for(i = [0:8]) {\n                    rotate([0, 0, i * 45]) {\n                        translate([shoulder_width * 1.3, 0, 0]) {\n                            scale([1, 0.3, 0.5]) sphere(shoulder_width * 0.3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the model\nantaeus();",
    "renders": true
  },
  {
    "mythical_creature": "aspidochelone",
    "openscad_code": "// Aspidochelone - the giant sea-turtle-island from medieval bestiaries\n// Overall length ~80 mm, printable without overhangs\n\nscale_factor = 1;              // tune to fit your printer\nshell_thickness = 1.2;         // 3 perimeters at 0.4 mm nozzle\nbase_height = 2;\n\n// Main body: a low, wide turtle shell merging into an island\nmodule body() {\n    difference() {\n        // broad oval shell\n        scale([1.3, 1, 0.5])\n            sphere(d = 50 * scale_factor, $fn = 64);\n        \n        // hollow underside so it prints as a shell rather than solid\n        translate([0, 0, -shell_thickness])\n            scale([1.25, 0.95, 0.45])\n                sphere(d = 48 * scale_factor, $fn = 64);\n    }\n}\n\n// Scutes on the back – arranged in 5 longitudinal rows\nmodule scutes() {\n    row_spacing = 8 * scale_factor;\n    for (row = [-2 : 2]) {\n        scute_count = 6 - abs(row);          // fewer scutes toward edges\n        for (i = [0 : scute_count - 1]) {\n            y = (i - scute_count/2 + 0.5) * row_spacing * 1.2;\n            x = row * row_spacing * 1.1;\n            translate([x, y, 0])\n                scale([1.3, 1, 0.6])\n                    rotate([90, 0, 0])\n                        cylinder(h = 3 * scale_factor, d1 = 6 * scale_factor, d2 = 5 * scale_factor, $fn = 6);\n        }\n    }\n}\n\n// Head protruding from front\nmodule head() {\n    translate([30 * scale_factor, 0, -5 * scale_factor])\n        rotate([0, -10, 0])\n            union() {\n                // snout\n                color(\"DarkOliveGreen\")\n                    scale([1.2, 0.7, 0.7])\n                        sphere(d = 12 * scale_factor, $fn = 32);\n                \n                // eyes\n                for (side = [-1, 1]) {\n                    translate([6 * scale_factor, side * 4 * scale_factor, 3 * scale_factor])\n                        color(\"black\")\n                            sphere(d = 2 * scale_factor, $fn = 16);\n                }\n            }\n}\n\n// Flippers – thick and rounded to print without supports\nmodule flipper(angle) {\n    rotate([0, 0, angle])\n        translate([0, 20 * scale_factor, -8 * scale_factor])\n            rotate([20, 0, 0])\n                color(\"SeaGreen\")\n                    difference() {\n                        scale([2.2, 1, 0.4])\n                            sphere(d = 18 * scale_factor, $fn = 32);\n                        translate([0, 0, 1])\n                            scale([1.9, 0.8, 0.3])\n                                sphere(d = 18 * scale_factor, $fn = 32);\n                    }\n}\n\n// Tiny trees and grass growing on the “island” shell\nmodule vegetation() {\n    for (i = [0 : 7]) {\n        a = i * 137.5;          // golden angle for even spread\n        r = 15 * (1 + sin(i * 30)) * scale_factor;\n        translate([r * cos(a), r * sin(a), 2 * scale_factor])\n            color(\"ForestGreen\")\n                cylinder(h = 5 * scale_factor, d = 1.5 * scale_factor, $fn = 8);\n    }\n}\n\n// Optional rocky outcrop / miniature cliff\nmodule rock_spire() {\n    translate([-15 * scale_factor, 0, 0])\n        color(\"SlateGray\")\n            for (i = [0 : 3]) {\n                rotate([0, 0, i * 90])\n                    translate([i * 1.5, 0, i * 1.5])\n                        cylinder(h = 8 * scale_factor, d1 = 4 * scale_factor, d2 = 2 * scale_factor, $fn = 6);\n            }\n}\n\n// Assembly\nunion() {\n    // main body\n    color(\"DarkKhaki\") body();\n    \n    // external details\n    color(\"OliveDrab\") scutes();\n    head();\n    \n    // four flippers\n    for (a = [-45, 45]) {\n        flipper(a);\n        mirror([0, 1, 0]) flipper(a);\n    }\n    \n    // island vegetation\n    vegetation();\n    rock_spire();\n    \n    // shallow base to ensure bed adhesion\n    translate([0, 0, -base_height])\n        color(\"LightBlue\")\n            cylinder(h = base_height, d = 60 * scale_factor, $fn = 64);\n}",
    "renders": true
  },
  {
    "mythical_creature": "auvekoejak",
    "openscad_code": "// Auvekoejak - Mythical Arctic Sky Serpent\n// Realistic style, medium complexity\n\n// Overall scale\nscale_factor = 0.5;\n\n// Wing module\nmodule wing() {\n    color([0.8, 0.9, 1.0]) {\n        // Main wing membrane\n        difference() {\n            union() {\n                // Upper wing bone\n                translate([-5, 0, 0]) rotate([0, 90, 0]) \n                    cylinder(h=25, r1=1.5, r2=0.5, $fn=8);\n                \n                // Lower wing bone\n                translate([0, -2, -8]) rotate([0, 45, 0]) \n                    cylinder(h=20, r1=1.5, r2=0.5, $fn=8);\n                \n                // Wing membrane\n                hull() {\n                    translate([0, 0, 0]) sphere(r=1.5);\n                    translate([-20, 0, -15]) sphere(r=1);\n                    translate([0, 0, -20]) sphere(r=1);\n                    translate([0, -2, -8]) sphere(r=1);\n                }\n            }\n            \n            // Wing holes for membrane texture\n            for(i = [1:3]) {\n                translate([-i*6, -1, -i*5]) \n                    rotate([0, 45, 0]) sphere(r=1.5);\n            }\n        }\n    }\n}\n\n// Horn module\nmodule horn() {\n    color([0.9, 0.9, 0.95]) {\n        // Spiral horn\n        for(i = [0:10]) {\n            translate([0, 0, i*0.8]) \n                rotate([0, 0, i*30]) \n                cylinder(h=1.5, r1=2.5-i*0.15, r2=2.5-i*0.15, $fn=8);\n        }\n    }\n}\n\n// Scale pattern module\nmodule scales() {\n    color([0.6, 0.7, 0.9]) {\n        for(i = [0:5]) {\n            for(j = [0:3]) {\n                translate([i*3-7.5, 0, j*2-3]) \n                    sphere(r=1.2);\n            }\n        }\n    }\n}\n\n// Main body\ncolor([0.7, 0.8, 0.95]) {\n    // Serpentine body segments\n    for(i = [0:8]) {\n        translate([i*8-32, 0, sin(i*20)*3]) \n            rotate([0, 0, cos(i*20)*5]) \n            scale([1.2, 1, 1]) \n            sphere(r=4-i*0.3);\n    }\n    \n    // Head\n    translate([40, 0, 0]) {\n        // Snout\n        scale([1.2, 0.8, 0.8]) sphere(r=4);\n        \n        // Eyes\n        color([0.2, 0.3, 0.8]) {\n            translate([2, 2, 1]) sphere(r=0.8);\n            translate([2, -2, 1]) sphere(r=0.8);\n        }\n        \n        // Horns\n        translate([0, 3, 3]) rotate([0, -10, 0]) horn();\n        translate([0, -3, 3]) rotate([0, 10, 0]) horn();\n    }\n    \n    // Tail\n    translate([-40, 0, 0]) {\n        for(i = [0:4]) {\n            translate([-i*5, 0, sin(i*30)*2]) \n                scale([1-i*0.15, 1-i*0.15, 1-i*0.15]) \n                sphere(r=3);\n        }\n    }\n}\n\n// Wings\ntranslate([15, 0, 5]) rotate([0, 0, 20]) wing();\ntranslate([15, 0, 5]) rotate([0, 0, -20]) mirror([0, 1, 0]) wing();\n\n// Fin crest\ncolor([0.8, 0.9, 1.0]) {\n    for(i = [0:6]) {\n        translate([i*8-25, 0, 4+sin(i*30)*2]) \n            scale([0.5, 3-i*0.2, 0.2]) \n            rotate([0, 0, cos(i*30)*10]) \n            cube([1, 1, 1]);\n    }\n}\n\n// Mystical ice crystals\ncolor([0.9, 0.95, 1.0]) {\n    for(i = [0:4]) {\n        translate([i*15-30, 3, sin(i*45)*4]) \n            rotate([0, 0, i*45]) \n            scale([0.3, 0.3, 1.5]) \n            cylinder(h=3, r1=1, r2=0.5, $fn=6);\n    }\n}\n\n// Scale details\nfor(i = [1:7]) {\n    translate([i*8-30, 0, 0]) scales();\n}",
    "renders": true
  },
  {
    "mythical_creature": "ayahuma",
    "openscad_code": "// Ayahuma mythical tree spirit - realistic style\n// The ayahuma is a guardian spirit that appears as a massive tree with human-like features\n\n// Colors\ncolor(\"saddlebrown\") trunk();\ncolor(\"darkgreen\") canopy();\ncolor(\"burlywood\") face();\ncolor(\"darkolivegreen\") leaves();\n\n// Main trunk module\nmodule trunk() {\n    union() {\n        // Central trunk\n        cylinder(h = 60, r1 = 12, r2 = 10, $fn = 32);\n        \n        // Root system base\n        translate([0, 0, -5])\n            cylinder(h = 10, r1 = 18, r2 = 12, $fn = 32);\n        \n        // Trunk texture rings\n        for (i = [5:10:55]) {\n            translate([0, 0, i])\n                cylinder(h = 2, r = 12.5, $fn = 32);\n        }\n    }\n}\n\n// Tree canopy\nmodule canopy() {\n    translate([0, 0, 60]) {\n        union() {\n            // Main leaf sphere\n            sphere(r = 25, $fn = 32);\n            \n            // Additional foliage clusters\n            for (angle = [0:60:359]) {\n                rotate([0, 0, angle])\n                    translate([20, 0, 0])\n                        sphere(r = 15, $fn = 24);\n            }\n            \n            // Top foliage\n            translate([0, 0, 20])\n                sphere(r = 20, $fn = 32);\n        }\n    }\n}\n\n// Human-like face in the trunk\nmodule face() {\n    translate([0, 12, 30]) {\n        union() {\n            // Face base\n            scale([1, 0.5, 1.2])\n                sphere(r = 8, $fn = 32);\n            \n            // Eyes\n            translate([-4, 1, 2])\n                sphere(r = 1.5, $fn = 16);\n            translate([4, 1, 2])\n                sphere(r = 1.5, $fn = 16);\n            \n            // Nose\n            translate([0, -1, 0])\n                cube([2, 1, 3], center = true);\n            \n            // Mouth\n            translate([0, -3, -2])\n                cube([6, 1, 2], center = true);\n        }\n    }\n}\n\n// Leaf clusters\nmodule leaves() {\n    // Small leaf spheres around canopy\n    for (i = [1:5]) {\n        angle = i * 72;\n        translate([cos(angle) * 35, sin(angle) * 35, 75]) {\n            sphere(r = 8, $fn = 16);\n        }\n    }\n    \n    // Lower hanging foliage\n    for (i = [1:8]) {\n        angle = i * 45;\n        translate([cos(angle) * 25, sin(angle) * 25, 55]) {\n            sphere(r = 5, $fn = 12);\n        }\n    }\n}\n\n// Arm-like branches\nmodule branches() {\n    // Left branch\n    translate([-15, 10, 45]) {\n        rotate([0, 45, -30])\n            cylinder(h = 20, r1 = 3, r2 = 2, $fn = 16);\n    }\n    \n    // Right branch\n    translate([15, 10, 45]) {\n        rotate([0, 45, 30])\n            cylinder(h = 20, r1 = 3, r2 = 2, $fn = 16);\n    }\n    \n    // Small sub-branches\n    for (i = [1:4]) {\n        angle = i * 90;\n        translate([cos(angle) * 15, sin(angle) * 15, 50]) {\n            rotate([0, 30, angle])\n                cylinder(h = 10, r1 = 2, r2 = 1, $fn = 12);\n        }\n    }\n}\n\n// Combine all parts\nunion() {\n    trunk();\n    canopy();\n    face();\n    leaves();\n    branches();\n}",
    "renders": true
  },
  {
    "mythical_creature": "azeman",
    "openscad_code": "// Azeman - Vampiric shapeshifter from Surinamese folklore\n// Humanoid bat creature with pronounced wings and elongated features\n\n// Overall scale factor for 3D printing\nscale_factor = 0.4;\n\n// Colors\ncolor_skin = \"#8B4513\";\ncolor_wing = \"#4A4A4A\";\ncolor_claw = \"#2F2F2F\";\ncolor_eye = \"#FF0000\";\n\n// Head module with bat-like features\nmodule azeman_head() {\n    // Main head sphere\n    color(color_skin) \n    sphere(r=8);\n    \n    // Snout\n    translate([0, 7, -2])\n    color(color_skin)\n    scale([1, 1.5, 0.8])\n    sphere(r=5);\n    \n    // Ears\n    for(side = [-1, 1]) {\n        translate([side * 6, 5, 6])\n        rotate([0, side * 20, 0])\n        color(color_skin)\n        scale([0.3, 1, 2])\n        cylinder(h=12, r1=3, r2=0.1);\n    }\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([side * 4, 6, 2])\n        color(color_eye)\n        sphere(r=2);\n    }\n    \n    // Fangs\n    for(side = [-0.8, 0.8]) {\n        translate([side * 2, 9, -5])\n        rotate([90, 0, 0])\n        color(color_claw)\n        cylinder(h=4, r1=1, r2=0.1);\n    }\n}\n\n// Wing module with membrane structure\nmodule wing() {\n    color(color_wing) {\n        // Upper arm\n        translate([0, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=15, r=2);\n        \n        // Wing fingers\n        for(i = [0:4]) {\n            rotate([0, -30 + i * 20, 0])\n            translate([0, 0, -i * 3])\n            color(color_wing)\n            scale([0.2, 1, 1])\n            cylinder(h=25 - i * 3, r=1);\n        }\n        \n        // Wing membrane\n        translate([0, 0, -10])\n        rotate([0, -30, 0])\n        color(color_wing) {\n            hull() {\n                sphere(r=0.1);\n                translate([0, 25, 0]) sphere(r=0.1);\n                translate([0, 0, -20]) sphere(r=0.1);\n                translate([0, 20, -20]) sphere(r=0.1);\n            }\n        }\n    }\n}\n\n// Clawed hand module\nmodule clawed_hand() {\n    // Palm\n    color(color_skin)\n    sphere(r=3);\n    \n    // Fingers with claws\n    for(i = [0:4]) {\n        rotate([0, 0, -45 + i * 22.5])\n        translate([0, 0, 0])\n        union() {\n            // Finger\n            color(color_skin)\n            scale([0.3, 1, 0.3])\n            cylinder(h=8, r=1);\n            \n            // Claw\n            translate([0, 8, 0])\n            rotate([90, 0, 0])\n            color(color_claw)\n            cylinder(h=3, r1=1, r2=0.1);\n        }\n    }\n}\n\n// Leg module with clawed feet\nmodule leg() {\n    // Thigh\n    color(color_skin)\n    rotate([90, 0, 0])\n    cylinder(h=12, r=2.5);\n    \n    // Lower leg\n    translate([0, 0, -13])\n    rotate([90, 0, 0])\n    color(color_skin)\n    cylinder(h=10, r=2);\n    \n    // Foot\n    translate([0, -3, -23])\n    rotate([0, -20, 0])\n    color(color_skin)\n    scale([2, 1, 0.5])\n    sphere(r=3);\n    \n    // Toes\n    for(i = [-1, 0, 1]) {\n        translate([i * 1.5, -2, -25])\n        rotate([90, 0, 0])\n        color(color_claw)\n        cylinder(h=4, r1=0.8, r2=0.2);\n    }\n}\n\n// Main assembly\nscale(scale_factor) {\n    // Body\n    translate([0, 0, 0])\n    color(color_skin)\n    scale([1.2, 1, 1.5])\n    sphere(r=12);\n    \n    // Chest\n    translate([0, -5, 8])\n    color(color_skin)\n    scale([0.8, 0.6, 1.2])\n    sphere(r=10);\n    \n    // Head\n    translate([0, -8, 22])\n    azeman_head();\n    \n    // Wings\n    translate([15, 0, 8])\n    rotate([0, 0, -30])\n    wing();\n    \n    translate([-15, 0, 8])\n    mirror([1, 0, 0])\n    rotate([0, 0, -30])\n    wing();\n    \n    // Arms\n    translate([12, 0, 12])\n    rotate([0, 0, 45])\n    color(color_skin)\n    cylinder(h=15, r=2);\n    \n    translate([-12, 0, 12])\n    rotate([0, 0, -45])\n    color(color_skin)\n    cylinder(h=15, r=2);\n    \n    // Hands\n    translate([12, 8, 12])\n    clawed_hand();\n    \n    translate([-12, 8, 12])\n    scale([-1, 1, 1])\n    clawed_hand();\n    \n    // Legs\n    translate([5, 0, -15])\n    leg();\n    \n    translate([-5, 0, -15])\n    scale([-1, 1, 1])\n    leg();\n    \n    // Tail\n    translate([0, 5, -20])\n    rotate([0, 0, 0])\n    color(color_skin)\n    scale([1, 1, 0.5])\n    cylinder(h=15, r1=3, r2=0.5);\n}",
    "renders": true
  },
  {
    "mythical_creature": "baku",
    "openscad_code": "// Baku - Dream Eater\n// Japanese mythical creature that devours nightmares\n// Features: Elephant trunk, tiger paws, ox tail, rhino body\n\n// Overall dimensions: 80mm long x 40mm wide x 35mm high\n$fn = 32;\n\n// Colors\ncolor_body = \"BurlyWood\";\ncolor_trunk = \"LightGray\";\ncolor_tusks = \"Ivory\";\ncolor_eyes = \"Black\";\ncolor_tail = \"DimGray\";\ncolor_paws = \"SaddleBrown\";\n\n// Main body - rhino-like torso\nmodule body() {\n    color(color_body)\n    union() {\n        // Main torso\n        translate([-10, 0, 8])\n            scale([1.5, 1.2, 0.8])\n            sphere(r = 15);\n        \n        // Chest\n        translate([-25, 0, 5])\n            scale([1.2, 1, 0.6])\n            sphere(r = 12);\n        \n        // Hindquarters\n        translate([15, 0, 6])\n            scale([1.3, 1.1, 0.7])\n            sphere(r = 14);\n    }\n}\n\n// Elephant trunk with curved shape\nmodule trunk() {\n    color(color_trunk)\n    union() {\n        // Base of trunk\n        translate([-28, 0, 12])\n            rotate([0, -10, 0])\n            cylinder(h = 8, r1 = 8, r2 = 5);\n        \n        // Curved trunk segments\n        for(i = [0:2]) {\n            translate([-35 - i*5, 0, 12 - i*2])\n                rotate([0, -10 - i*5, 0])\n                cylinder(h = 5, r1 = 5 - i, r2 = 4 - i);\n        }\n        \n        // Trunk tip\n        translate([-48, 0, 5])\n            sphere(r = 3);\n    }\n}\n\n// Small elephant tusks\nmodule tusks() {\n    color(color_tusks)\n    union() {\n        // Left tusk\n        translate([-20, -8, 10])\n            rotate([0, 0, -30])\n            cylinder(h = 10, r1 = 2, r2 = 1);\n        \n        // Right tusk\n        translate([-20, 8, 10])\n            rotate([0, 0, 30])\n            cylinder(h = 10, r1 = 2, r2 = 1);\n    }\n}\n\n// Tiger-like paws\nmodule paws() {\n    color(color_paws)\n    union() {\n        // Front paws\n        translate([-25, -12, 0]) paw();\n        translate([-25, 12, 0]) paw();\n        \n        // Hind paws\n        translate([15, -10, 0]) paw();\n        translate([15, 10, 0]) paw();\n    }\n}\n\n// Individual paw module\nmodule paw() {\n    translate([0, 0, 3])\n        scale([1.2, 1, 0.5])\n        sphere(r = 8);\n    \n    // Toes\n    for(i = [-6:6:6]) {\n        translate([i, 0, 0])\n            cube([2, 8, 2], center = true);\n    }\n}\n\n// Ox tail\nmodule tail() {\n    color(color_tail)\n    translate([25, 0, 10])\n        rotate([0, -20, 0])\n        cylinder(h = 20, r1 = 4, r2 = 2);\n    \n    // Tail tuft\n    translate([40, 0, 5])\n        sphere(r = 4);\n}\n\n// Eyes with mystical glow\nmodule eyes() {\n    color(color_eyes)\n    union() {\n        // Left eye\n        translate([-18, -6, 18])\n            sphere(r = 2);\n        \n        // Right eye\n        translate([-18, 6, 18])\n            sphere(r = 2);\n        \n        // Eye ridges\n        color(color_body)\n        translate([-20, -6, 20])\n            cube([5, 4, 2], center = true);\n        translate([-20, 6, 20])\n            cube([5, 4, 2], center = true);\n    }\n}\n\n// Ears\nmodule ears() {\n    color(color_body)\n    union() {\n        // Left ear\n        translate([-15, -15, 22])\n            rotate([0, 0, -30])\n            scale([0.3, 1, 0.5])\n            cylinder(h = 12, r = 8);\n        \n        // Right ear\n        translate([-15, 15, 22])\n            rotate([0, 0, 30])\n            scale([0.3, 1, 0.5])\n            cylinder(h = 12, r = 8);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 10])\nunion() {\n    body();\n    trunk();\n    tusks();\n    paws();\n    tail();\n    eyes();\n    ears();\n}",
    "renders": true
  },
  {
    "mythical_creature": "bouda",
    "openscad_code": "// Bouda mythical creature - OpenSCAD\n// Realistic style, medium complexity\n\n$fn = 32;\n\nmodule bouda_creature() {\n    color(\"darkgoldenrod\") {\n        // Main body\n        union() {\n            // Torso\n            translate([0, 0, 8])\n                scale([1.2, 0.8, 1.5])\n                    sphere(10);\n            \n            // Hind legs\n            for(side = [-1, 1]) {\n                translate([side * 8, -5, 0])\n                    rotate([0, side * 10, 0])\n                        scale([0.8, 1.2, 1])\n                            cylinder(15, 4, 3);\n                \n                translate([side * 9, -6, -13])\n                    rotate([0, 0, side * 15])\n                        scale([1.2, 0.8, 0.6])\n                            sphere(5);\n            }\n            \n            // Front legs\n            for(side = [-1, 1]) {\n                translate([side * 7, 8, 0])\n                    rotate([0, -10, 0])\n                        scale([0.7, 1.1, 0.9])\n                            cylinder(12, 3.5, 3);\n                \n                translate([side * 8, 9, -10])\n                    rotate([0, 0, side * 20])\n                        scale([1.1, 0.7, 0.5])\n                            sphere(4.5);\n            }\n            \n            // Neck\n            translate([0, 12, 15])\n                rotate([-30, 0, 0])\n                    scale([0.8, 0.7, 1.2])\n                        cylinder(10, 6, 4);\n            \n            // Head\n            translate([0, 12, 24])\n                scale([1.1, 0.9, 1.3])\n                    sphere(8);\n        }\n        \n        // Snout\n        color(\"saddlebrown\") {\n            translate([0, 18, 22])\n                scale([2, 1.2, 1.5])\n                    sphere(4);\n            \n            // Nose\n            translate([0, 22, 22])\n                scale([0.8, 0.8, 0.6])\n                    sphere(2);\n            \n            // Ears\n            for(side = [-1, 1]) {\n                translate([side * 7, 10, 28])\n                    rotate([0, side * 15, 0])\n                        scale([0.4, 1.5, 0.2])\n                            cylinder(6, 3, 1);\n            }\n        }\n        \n        // Horns\n        color(\"dimgray\") {\n            for(side = [-1, 1]) {\n                translate([side * 5, 8, 30])\n                    rotate([0, 20, side * 10])\n                        cylinder(12, 2, 0.5);\n                \n                // Horn details\n                for(i = [1:3]) {\n                    translate([side * (5 + i*0.5), 8 + i*3, 30 + i*3])\n                        rotate([0, 20, side * 10])\n                            scale([0.8, 0.8, 0.3])\n                                sphere(1.5);\n                }\n            }\n        }\n        \n        // Wings\n        color(\"burlywood\") {\n            for(side = [-1, 1]) {\n                translate([side * 15, 0, 18])\n                    rotate([0, 0, side * 30])\n                        scale([0.3, 1.8, 1.2])\n                            cylinder(20, 5, 1);\n                \n                // Wing membrane\n                translate([side * 20, -5, 15])\n                    rotate([0, 30, side * 20])\n                        scale([0.1, 15, 12])\n                            cube([1, 1, 1], center=true);\n                \n                // Wing bones\n                for(i = [1:4]) {\n                    translate([side * (15 + i*3), -2, 18 - i*2])\n                        rotate([0, 0, side * (30 - i*5)])\n                            cylinder(15 - i*2, 0.5, 0.3);\n                }\n            }\n        }\n        \n        // Tail\n        color(\"darkgoldenrod\") {\n            translate([0, -15, 5])\n                rotate([0, 20, 0])\n                    scale([0.8, 0.8, 1])\n                        cylinder(20, 6, 2);\n            \n            // Tail segments\n            for(i = [1:4]) {\n                translate([0, -15 - i*5, 5 - i*2])\n                    rotate([0, 20 + i*5, 0])\n                        scale([0.7 - i*0.1, 0.7 - i*0.1, 0.8])\n                            sphere(5 - i);\n            }\n            \n            // Tail tuft\n            color(\"saddlebrown\") {\n                translate([0, -35, -3])\n                    sphere(4);\n            }\n        }\n        \n        // Eyes\n        color(\"red\") {\n            for(side = [-1, 1]) {\n                translate([side * 4, 16, 27])\n                    sphere(1.5);\n            }\n        }\n        \n        // Teeth\n        color(\"white\") {\n            for(i = [0:3]) {\n                translate([-1.5 + i, 24, 20])\n                    scale([0.3, 0.3, 1])\n                        cylinder(3, 1, 0.2);\n            }\n        }\n        \n        // Claws\n        color(\"dimgray\") {\n            for(side = [-1, 1]) {\n                for(claw = [-1, 0, 1]) {\n                    translate([side * (8 + claw*1.5), -6 + claw*0.5, -13])\n                        rotate([0, 90, 0])\n                            cylinder(2, 1, 0.2);\n                    \n                    translate([side * (8 + claw*1.5), 9 + claw*0.5, -10])\n                        rotate([0, 90, 0])\n                            cylinder(1.5, 0.8, 0.2);\n                }\n            }\n        }\n        \n        // Scales pattern\n        color(\"goldenrod\") {\n            for(i = [0:5]) {\n                for(j = [0:8]) {\n                    translate([10*cos(i*60) - 5, 10*sin(i*60) - 5, j*2 + 5])\n                        scale([1.2, 1, 0.3])\n                            sphere(2);\n                }\n            }\n        }\n    }\n}\n\n// Main model\nbouda_creature();",
    "renders": true
  },
  {
    "mythical_creature": "bukavac",
    "openscad_code": "// Bukavac - Mythical swamp creature from Slavic folklore\n// Features: Six legs, large mouth, curved horns, scaly skin, long tail\n\n$fn = 32;\n\n// Main color - dark swamp green\ncolor([0.1, 0.3, 0.15]) {\n    // Body\n    union() {\n        // Main torso\n        translate([0, 0, 15]) {\n            scale([1.2, 0.8, 0.9]) {\n                sphere(d = 30);\n            }\n        }\n        \n        // Head\n        translate([0, 20, 25]) {\n            scale([1, 0.8, 1.2]) {\n                sphere(d = 20);\n            }\n        }\n        \n        // Snout extension\n        translate([0, 30, 25]) {\n            rotate([0, -10, 0]) {\n                cylinder(h = 15, d1 = 12, d2 = 8);\n            }\n        }\n        \n        // Jaw\n        translate([0, 32, 18]) {\n            rotate([30, 0, 0]) {\n                cylinder(h = 10, d1 = 8, d2 = 12);\n            }\n        }\n    }\n    \n    // Horns\n    module horn() {\n        rotate([0, -20, 0]) {\n            cylinder(h1 = 0, h2 = 15, r1 = 3, r2 = 1);\n        }\n    }\n    \n    // Left horn\n    translate([-8, 15, 35]) {\n        rotate([0, 0, -20]) {\n            horn();\n        }\n    }\n    \n    // Right horn\n    translate([8, 15, 35]) {\n        rotate([0, 0, 20]) {\n            horn();\n        }\n    }\n    \n    // Legs - six legs\n    module leg() {\n        union() {\n            // Upper leg\n            cylinder(h = 12, d = 4);\n            // Lower leg\n            translate([0, 0, -12]) {\n                rotate([20, 0, 0]) {\n                    cylinder(h = 10, d = 3);\n                }\n            }\n            // Foot\n            translate([0, 0, -22]) {\n                rotate([30, 0, 0]) {\n                    scale([1.5, 1, 0.5]) {\n                        sphere(d = 4);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Front legs\n    for (i = [-1, 1]) {\n        translate([i * 10, 15, 0]) {\n            leg();\n        }\n    }\n    \n    // Middle legs\n    for (i = [-1, 1]) {\n        translate([i * 12, 0, 0]) {\n            leg();\n        }\n    }\n    \n    // Rear legs\n    for (i = [-1, 1]) {\n        translate([i * 10, -15, 0]) {\n            leg();\n        }\n    }\n    \n    // Tail\n    translate([0, -20, 15]) {\n        rotate([0, 0, 180]) {\n            for (i = [0:5]) {\n                translate([0, i * 4, -i * 2]) {\n                    scale([1 - i * 0.1, 1 - i * 0.1, 1 - i * 0.1]) {\n                        sphere(d = 6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Eyes\ncolor([0.8, 0, 0]) {\n    // Left eye\n    translate([-5, 28, 28]) {\n        sphere(d = 3);\n    }\n    \n    // Right eye\n    translate([5, 28, 28]) {\n        sphere(d = 3);\n    }\n}\n\n// Scales pattern\ncolor([0.15, 0.4, 0.2]) {\n    module scale() {\n        scale([1, 0.7, 0.3]) {\n            sphere(d = 2);\n        }\n    }\n    \n    // Scales along back\n    for (i = [-2:2]) {\n        for (j = [-15:5:15]) {\n            translate([i * 3, j, 25 + abs(i) * 2]) {\n                scale();\n            }\n        }\n    }\n}\n\n// Mouth detail\ncolor([0.3, 0, 0]) {\n    // Teeth\n    module tooth() {\n        cylinder(h = 2, d1 = 1, d2 = 0.5);\n    }\n    \n    // Teeth along jaw\n    for (i = [-2:1:2]) {\n        translate([i * 2, 35, 19]) {\n            rotate([90, 0, 0]) {\n                tooth();\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "cactus",
    "openscad_code": "// Cactus Dragon - A mythical desert guardian\n// Features: dragon wings, spines, crystal growths, and magical aura patterns\n\nmodule cactus_dragon() {\n    union() {\n        // Main body - segmented cactus trunk\n        color([0.15, 0.45, 0.15])\n        for(i = [0:1:4]) {\n            translate([0, 0, i*8])\n            scale([1 - i*0.08, 1 - i*0.08, 1])\n            cylinder(h=10, r1=12 - i*1.5, r2=10 - i*1.5, $fn=8);\n        }\n        \n        // Head with snout\n        color([0.12, 0.42, 0.12])\n        translate([0, 18, 38])\n        union() {\n            sphere(8);  // Head\n            // Snout\n            translate([0, 8, 0])\n            scale([0.8, 1.2, 0.6])\n            sphere(6);\n            // Nostrils\n            color([0.1, 0.3, 0.1])\n            translate([2, 10, 0])\n            cylinder(h=2, r=1, $fn=8);\n            translate([-2, 10, 0])\n            cylinder(h=2, r=1, $fn=8);\n        }\n        \n        // Horns - crystal formations\n        color([0.7, 0.9, 1.0])\n        translate([0, 10, 45])\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle])\n            translate([6, 0, 0])\n            rotate([15, 0, 0])\n            cylinder(h=12, r1=2, r2=0.5, $fn=6);\n        }\n        \n        // Wings - desert membrane wings\n        color([0.2, 0.35, 0.2])\n        for(side = [-1, 1]) {\n            translate([side*15, 0, 25])\n            rotate([0, side*20, 0])\n            union() {\n                // Wing base\n                scale([1, 1.5, 0.3])\n                sphere(8);\n                \n                // Wing membranes\n                color([0.15, 0.3, 0.15, 0.8])\n                for(i = [0:0.2:1]) {\n                    hull() {\n                        translate([0, 0, 0])\n                        sphere(1);\n                        translate([side*15*i, -20*i, 5*i])\n                        sphere(1.5);\n                        translate([side*20*i, -25*i, 8*i])\n                        sphere(1);\n                    }\n                }\n            }\n        }\n        \n        // Arms - cactus limbs\n        color([0.15, 0.45, 0.15])\n        for(side = [-1, 1]) {\n            translate([side*12, 5, 25])\n            rotate([0, 0, side*45])\n            cylinder(h=20, r1=4, r2=3, $fn=8);\n            \n            // Hands\n            translate([side*22, 18, 25])\n            sphere(4);\n        }\n        \n        // Legs\n        color([0.15, 0.45, 0.15])\n        for(side = [-1, 1]) {\n            translate([side*8, -5, 0])\n            cylinder(h=15, r1=5, r2=4, $fn=8);\n            \n            // Feet\n            translate([side*8, -10, -7])\n            scale([1.2, 1.5, 0.5])\n            sphere(4);\n        }\n        \n        // Magical spines - crystalline growths\n        color([0.8, 1.0, 0.9, 0.9])\n        for(i = [0:15:360]) {\n            for(height = [5:10:35]) {\n                rotate([0, 0, i])\n                translate([12, 0, height])\n                rotate([90, 0, 0])\n                cylinder(h=3, r1=0.5, r2=0, $fn=4);\n            }\n        }\n        \n        // Tail - segmented cactus tail\n        color([0.15, 0.45, 0.15])\n        for(i = [0:1:5]) {\n            translate([0, -15 - i*8, 5 - i*2])\n            rotate([0, -10*i, 0])\n            scale([1 - i*0.15, 1 - i*0.15, 1])\n            cylinder(h=8, r1=5 - i*0.5, r2=4 - i*0.5, $fn=8);\n        }\n        \n        // Tail spike\n        color([0.7, 0.9, 1.0])\n        translate([0, -55, -5])\n        rotate([0, -50, 0])\n        cylinder(h=8, r1=2, r2=0, $fn=6);\n        \n        // Eye sockets\n        color([0.1, 0.1, 0.1])\n        for(side = [-1, 1]) {\n            translate([side*4, 15, 40])\n            sphere(2);\n        }\n        \n        // Magical aura patterns on body\n        color([0.3, 0.8, 0.9, 0.4])\n        for(i = [0:45:360]) {\n            rotate([0, 0, i])\n            translate([8, 0, 20])\n            scale([0.5, 2, 0.1])\n            sphere(3);\n        }\n    }\n}\n\n// Scale to 80mm height\nscale(0.8)\ncactus_dragon();",
    "renders": true
  },
  {
    "mythical_creature": "cadejo",
    "openscad_code": "// Cadejo - Mythical dog spirit from Central American folklore\n// Features: wolf-like body, goat hooves, burning red eyes, curved horns, shaggy fur texture\n\n// Overall scale for 3D printing\nscale_factor = 0.7;\n\n// Main module\nmodule cadejo() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Body\n        union() {\n            // Torso\n            color(\"dimgray\") \n            translate([0, 0, 20])\n            scale([1.8, 1, 1.2])\n            sphere(15, $fn=20);\n            \n            // Chest\n            color(\"dimgray\")\n            translate([0, 15, 10])\n            scale([1.2, 0.8, 1])\n            sphere(12, $fn=16);\n            \n            // Abdomen\n            color(\"dimgray\")\n            translate([0, -15, 15])\n            scale([1.5, 0.9, 0.8])\n            sphere(10, $fn=16);\n            \n            // Head\n            head();\n            \n            // Legs\n            for(side = [-1, 1]) {\n                translate([side * 12, 0, 0]) {\n                    // Front legs\n                    leg(30, 15, 8);\n                    // Rear legs\n                    translate([0, -30, 0])\n                    leg(30, 15, 8);\n                }\n            }\n            \n            // Tail\n            tail();\n            \n            // Horns\n            for(side = [-1, 1]) {\n                translate([side * 8, 20, 25])\n                rotate([0, 0, side * 20])\n                horn();\n            }\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    color(\"dimgray\")\n    translate([0, 25, 25])\n    union() {\n        // Skull\n        scale([1.2, 1.8, 1])\n        sphere(12, $fn=20);\n        \n        // Snout\n        translate([0, 12, -3])\n        scale([0.8, 1.2, 0.6])\n        sphere(8, $fn=16);\n        \n        // Eyes - glowing red\n        for(side = [-1, 1]) {\n            color(\"red\")\n            translate([side * 6, 8, 5])\n            sphere(3, $fn=12);\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            color(\"dimgray\")\n            translate([side * 8, 5, 10])\n            rotate([0, side * 20, 0])\n            scale([0.3, 1, 2])\n            cylinder(h=8, r=4, $fn=8);\n        }\n        \n        // Fangs\n        color(\"white\")\n        for(side = [-1, 1]) {\n            translate([side * 3, 18, -5])\n            rotate([0, 0, 0])\n            cylinder(h=6, r1=1.5, r2=0.5, $fn=8);\n        }\n    }\n}\n\n// Leg module with goat-like hooves\nmodule leg(x, y, z) {\n    translate([x, y, z]) {\n        // Upper leg\n        color(\"dimgray\")\n        rotate([0, -30, 0])\n        scale([0.8, 0.8, 2])\n        cylinder(h=15, r=4, $fn=8);\n        \n        // Lower leg\n        translate([0, 0, -20])\n        rotate([0, 30, 0])\n        scale([0.6, 0.6, 2])\n        cylinder(h=15, r=3, $fn=8);\n        \n        // Hoof\n        translate([0, 0, -35])\n        color(\"black\")\n        scale([1, 1.2, 0.5])\n        cylinder(h=5, r=4, $fn=6);\n    }\n}\n\n// Horn module (curved)\nmodule horn() {\n    color(\"saddlebrown\")\n    for(i = [0:5]) {\n        translate([0, 0, i * 2])\n        rotate([0, 0, i * 10])\n        scale([1 - i * 0.1, 1 - i * 0.1, 1])\n        cylinder(h=3, r=3 - i * 0.3, $fn=8);\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(\"dimgray\")\n    translate([0, -35, 15])\n    rotate([30, 0, 0])\n    for(i = [0:8]) {\n        translate([0, -i * 2, -i * 1.5])\n        rotate([0, 0, sin(i * 20) * 10])\n        scale([1 - i * 0.08, 1 - i * 0.08, 1])\n        sphere(3, $fn=8);\n    }\n}\n\n// Create the cadejo\ncadejo();",
    "renders": true
  },
  {
    "mythical_creature": "camazotz",
    "openscad_code": "// Camazotz - The Death Bat God of Maya Mythology\n// Realistic style, medium complexity\n\n$fn = 32;\n\nmodule body() {\n    // Main torso - elongated bat body\n    color(\"saddlebrown\")\n    difference() {\n        union() {\n            // Torso\n            scale([1.2, 0.8, 1.5])\n            sphere(12);\n            \n            // Chest plate\n            translate([0, 0, 15])\n            scale([0.8, 0.6, 0.4])\n            sphere(8);\n            \n            // Abdomen\n            translate([0, 0, -12])\n            scale([0.7, 0.5, 0.8])\n            sphere(10);\n        }\n        \n        // Hollow for printing\n        translate([0, 0, 0])\n        scale([1, 0.7, 1.3])\n        sphere(10);\n    }\n}\n\nmodule head() {\n    // Camazotz head with snout and large ears\n    color(\"darkred\")\n    union() {\n        // Main head\n        translate([0, 18, 8])\n        scale([0.9, 1.3, 0.8])\n        sphere(8);\n        \n        // Snout\n        translate([0, 28, 6])\n        scale([0.4, 0.8, 0.4])\n        sphere(6);\n        \n        // Nose\n        translate([0, 33, 6])\n        sphere(2);\n        \n        // Ears - large and pointed\n        // Left ear\n        translate([-8, 18, 18])\n        rotate([0, 20, -30])\n        scale([0.3, 1.5, 2])\n        cylinder(h=12, r1=3, r2=0);\n        \n        // Right ear\n        translate([8, 18, 18])\n        mirror([1, 0, 0])\n        rotate([0, 20, -30])\n        scale([0.3, 1.5, 2])\n        cylinder(h=12, r1=3, r2=0);\n        \n        // Eyes - glowing red\n        color(\"red\")\n        translate([-4, 24, 10])\n        sphere(1.5);\n        translate([4, 24, 10])\n        sphere(1.5);\n        \n        // Fangs\n        color(\"ivory\")\n        translate([-2, 32, 4])\n        rotate([0, 20, 0])\n        cylinder(h=4, r1=1, r2=0);\n        translate([2, 32, 4])\n        rotate([0, 20, 0])\n        cylinder(h=4, r1=1, r2=0);\n    }\n}\n\nmodule wings() {\n    // Membranous bat wings with bone structure\n    color([0.4, 0.2, 0.1])\n    for(side = [-1, 1]) {\n        translate([side * 15, 5, 5])\n        rotate([0, side * 10, 0])\n        union() {\n            // Wing arm\n            translate([0, 0, 0])\n            rotate([0, 0, -20])\n            cylinder(h=25, r=1.2);\n            \n            // Wing membrane - simplified as thin ellipsoid\n            translate([side * 15, 0, -5])\n            rotate([0, 0, side * 30])\n            scale([1, 2.5, 0.1])\n            sphere(12);\n            \n            // Wing fingers\n            for(i = [1:3]) {\n                translate([i * side * 5, 8 - i * 2, -2])\n                rotate([0, 0, -30 + i * 10])\n                cylinder(h=15 - i * 3, r=0.5);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Powerful bat legs with claws\n    color(\"darkbrown\")\n    for(side = [-1, 1]) {\n        translate([side * 6, -8, -15])\n        union() {\n            // Upper leg\n            rotate([0, 15, 0])\n            cylinder(h=8, r=1.5);\n            \n            // Lower leg\n            translate([0, -3, -8])\n            rotate([0, -30, 0])\n            cylinder(h=10, r=1.2);\n            \n            // Foot\n            translate([0, -5, -18])\n            rotate([0, 0, 90])\n            scale([1, 2, 0.5])\n            sphere(3);\n            \n            // Claws\n            for(claw = [-1.5, 0, 1.5]) {\n                translate([claw, -7, -18])\n                rotate([20, 0, 0])\n                cylinder(h=3, r1=0.8, r2=0.2);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    // Rat-like tail\n    color(\"saddlebrown\")\n    translate([0, -12, -20])\n    rotate([45, 0, 0])\n    cylinder(h=20, r1=2, r2=1);\n}\n\n// Assemble the Camazotz\nunion() {\n    body();\n    head();\n    wings();\n    legs();\n    tail();\n}\n\n// Base for 3D printing stability\ncolor(\"darkgray\")\ntranslate([0, 0, -25])\ncylinder(h=2, r=15);",
    "renders": true
  },
  {
    "mythical_creature": "cipactli",
    "openscad_code": "// Cipactli - Aztec crocodilian earth-monster\n// Realistic medium-complexity model, 70 mm length, 3 mm wall thickness\n\nscale(0.7)\ncipactli();\n\nmodule cipactli() {\n    color(\"darkolivegreen\")\n    union() {\n        // Main body - crocodile-like torso\n        translate([0, 0, 8])\n        rotate([0, 90, 0])\n        difference() {\n            scale([30, 12, 12])\n            sphere(2.5, $fn=48);\n            // Hollow cavity for printing\n            scale([0.7, 0.7, 0.7])\n            sphere(2.5, $fn=48);\n        }\n\n        // Head with multiple mouths\n        head();\n\n        // Tail\n        tail();\n\n        // Four crocodile legs\n        for (side=[-1,1])\n        for (pos=[-15, 15])\n        translate([pos*0.8, side*12, 5])\n        rotate([0, 0, side*10])\n        leg();\n\n        // Back spines / fins\n        for (i=[-20:5:25])\n        translate([i, 0, 16])\n        rotate([90, 0, 0])\n        scale([0.8, 0.8, 1])\n        cylinder(h1=5, r1=2, r2=0.5, $fn=8);\n    }\n}\n\nmodule head() {\n    color(\"forestgreen\")\n    union() {\n        // Main head\n        translate([-25, 0, 12])\n        rotate([0, 90, 0])\n        difference() {\n            scale([15, 10, 10])\n            sphere(2.5, $fn=32);\n            // Eye sockets\n            translate([-3, 3, 2])\n            sphere(3, $fn=12);\n            translate([-3, -3, 2])\n            sphere(3, $fn=12);\n        }\n\n        // Upper jaw\n        translate([-30, 0, 12])\n        rotate([0, 90, -10])\n        scale([8, 6, 4])\n        cube([10, 1, 1], center=true);\n\n        // Lower jaw\n        translate([-30, 0, 8])\n        rotate([0, 90, 10])\n        scale([8, 6, 4])\n        cube([10, 1, 1], center=true);\n\n        // Additional mouths along body sides\n        for (angle=[-45, 45])\n        rotate([0, 0, angle])\n        translate([-10, 0, 10])\n        scale([0.6, 0.6, 0.6])\n        jaw();\n    }\n}\n\nmodule jaw() {\n    difference() {\n        union() {\n            // Upper part\n            translate([0, 0, 2])\n            cube([8, 3, 2], center=true);\n            // Lower part\n            translate([0, 0, -2])\n            cube([8, 3, 2], center=true);\n        }\n        // Teeth gaps\n        for (t=[-3:1.5:3])\n        translate([t, 0, 0])\n        cube([0.5, 3.1, 4.1], center=true);\n    }\n}\n\nmodule tail() {\n    color(\"darkgreen\")\n    hull() {\n        // Tail segments\n        for (i=[0:0.2:1])\n        translate([25 + i*15, 0, 8 + sin(i*180)*3])\n        scale([1-i*0.6, 1-i*0.6, 1-i*0.6])\n        sphere(5, $fn=16);\n    }\n}\n\nmodule leg() {\n    color(\"seagreen\")\n    union() {\n        // Upper leg\n        translate([0, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=8, r1=3, r2=2.5, $fn=12);\n\n        // Lower leg\n        translate([0, 0, -8])\n        rotate([0, 90, 0])\n        cylinder(h=8, r1=2.5, r2=2, $fn=12);\n\n        // Webbed foot\n        translate([0, 0, -16])\n        scale([1, 2, 0.5])\n        sphere(3, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "curupira",
    "openscad_code": "// Realistic Curupira - Brazilian Forest Guardian\n// Medium complexity 3D printable model\n\ncolors = [\n    [0.4, 0.2, 0.1],    // Dark brown skin\n    [0.8, 0.4, 0.2],    // Lighter brown face\n    [0.1, 0.6, 0.2],    // Forest green hair\n    [1, 0.3, 0],        // Fiery orange/red hair tips\n    [0.3, 0.5, 0.2],    // Moss green body covering\n    [0.5, 0.3, 0.1],    // Wooden staff\n    [0.8, 0.8, 0.2]     // Yellow glowing eyes\n];\n\nmodule curupira() {\n    // Main body - humanoid torso\n    color(colors[4])\n    union() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1.2, 0.8, 2])\n        sphere(10, $fn=20);\n        \n        // Chest details\n        translate([0, 5, 25])\n        scale([0.8, 0.3, 0.5])\n        sphere(8, $fn=15);\n    }\n    \n    // Head with wild hair\n    color(colors[2])\n    translate([0, 0, 35])\n    scale([0.9, 0.9, 1.2])\n    sphere(12, $fn=20);\n    \n    // Face details\n    color(colors[1])\n    translate([0, 8, 37])\n    scale([0.8, 0.9, 0.9])\n    sphere(8, $fn=16);\n    \n    // Fiery hair tips\n    color(colors[3])\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24])\n        translate([cos(i*24)*15, sin(i*24)*15, 45])\n        scale([0.3, 0.3, 1.5])\n        sphere(3, $fn=8);\n    }\n    \n    // Glowing eyes\n    color(colors[6])\n    translate([-3, 10, 40])\n    sphere(1.5, $fn=10);\n    translate([3, 10, 40])\n    sphere(1.5, $fn=10);\n    \n    // Backward feet (characteristic feature)\n    color(colors[0])\n    union() {\n        // Left foot - reversed\n        translate([-8, -5, 0])\n        rotate([0, 0, 180])\n        scale([1.2, 0.5, 0.3])\n        sphere(8, $fn=12);\n        \n        // Right foot - reversed\n        translate([8, -5, 0])\n        rotate([0, 0, 180])\n        scale([1.2, 0.5, 0.3])\n        sphere(8, $fn=12);\n    }\n    \n    // Legs\n    color(colors[0])\n    union() {\n        // Left leg\n        translate([-5, 0, 8])\n        rotate([0, 10, 0])\n        cylinder(h=15, r1=4, r2=3, $fn=12);\n        \n        // Right leg\n        translate([5, 0, 8])\n        rotate([0, -10, 0])\n        cylinder(h=15, r1=4, r2=3, $fn=12);\n    }\n    \n    // Arms\n    color(colors[0])\n    union() {\n        // Left arm\n        translate([-15, 5, 25])\n        rotate([0, 0, 20])\n        cylinder(h=18, r1=3, r2=2, $fn=12);\n        \n        // Right arm holding staff\n        translate([15, 5, 25])\n        rotate([0, 0, -20])\n        cylinder(h=18, r1=3, r2=2, $fn=12);\n    }\n    \n    // Hands\n    color(colors[1])\n    union() {\n        translate([-20, 6, 22])\n        sphere(2.5, $fn=10);\n        translate([20, 6, 22])\n        sphere(2.5, $fn=10);\n    }\n    \n    // Wooden staff with forest magic\n    color(colors[5])\n    union() {\n        // Main staff\n        translate([22, 5, 15])\n        rotate([0, 0, -30])\n        cylinder(h=35, r1=2, r2=1.5, $fn=8);\n        \n        // Staff top - twisted wood\n        translate([30, 5, 30])\n        rotate([0, 0, -30])\n        scale([0.5, 0.5, 3])\n        cylinder(h=8, r1=4, r2=2, $fn=6);\n    }\n    \n    // Forest moss and vines\n    color(colors[4])\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45])\n        translate([cos(i*45)*12, sin(i*45)*12, 20])\n        scale([0.5, 0.5, 1])\n        sphere(3, $fn=8);\n    }\n    \n    // Feet details - bark texture\n    for(i = [0:5]) {\n        color(colors[5])\n        translate([-8 + i*3, -8, 2])\n        scale([0.5, 0.3, 0.5])\n        sphere(2, $fn=6);\n    }\n}\n\n// Scale model to 80mm height\nscale(0.8)\ncurupira();",
    "renders": true
  },
  {
    "mythical_creature": "dahaka",
    "openscad_code": "// Dahaka - Shadow Guardian of Time\n// Medium complexity realistic interpretation\n\n// Color definitions\n$fn=32;\ncolor(\"darkslategray\")\nunion() {\n\n    // Main body sphere with slight elongation\n    translate([0,0,15])\n    scale([1.2,1,1.3])\n    sphere(12);\n\n    // Head with horn mounts\n    translate([0,0,30])\n    union() {\n        sphere(8);\n        \n        // Horns - curved back\n        for(side=[-1,1]) {\n            translate([side*6,0,4])\n            rotate([0,side*30,0])\n            rotate([0,0,side*25])\n            cylinder(12,3,0.8);\n            \n            translate([side*5,0,4])\n            rotate([0,side*40,0])\n            rotate([0,0,side*30])\n            cylinder(10,2.5,0.6);\n        }\n        \n        // Eyes - glowing voids\n        for(side=[-1,1]) {\n            difference() {\n                translate([side*5,-6,2])\n                sphere(2);\n                translate([side*5,-7.5,2])\n                sphere(1.3);\n            }\n        }\n    }\n\n    // Neck connection\n    translate([0,0,22])\n    cylinder(10,6,8);\n\n    // Wing roots\n    for(side=[-1,1]) {\n        translate([side*12,0,25])\n        rotate([0,0,side*20])\n        scale([1.5,0.8,1])\n        sphere(4);\n    }\n\n    // Wings - membrane structure\n    for(side=[-1,1]) {\n        color(\"black\")\n        translate([side*15,0,28])\n        rotate([0,side*30,0])\n        rotate([0,0,side*15])\n        union() {\n            // Wing arm\n            translate([0,0,0])\n            rotate([0,0,-20])\n            cylinder(20,1.5,0.8);\n            \n            // Wing membrane segments\n            for(i=[0:3]) {\n                rotate([0,0,-30 + i*25])\n                translate([18-i*3,0,0])\n                scale([0.8,0.1,0.6])\n                sphere(8-i*1.5);\n            }\n        }\n    }\n\n    // Front legs - digitigrade\n    for(side=[-1,1]) {\n        translate([side*8,0,10])\n        union() {\n            // Upper leg\n            cylinder(15,2.5,2);\n            \n            // Lower leg\n            translate([0,0,-16])\n            rotate([30,0,0])\n            cylinder(12,2,1.8);\n            \n            // Paw/talon\n            translate([0,0,-29])\n            sphere(2.5);\n            \n            // Talons\n            for(t=[-1,1]) {\n                translate([t*1.5,0,-31])\n                cylinder(4,0.8,0.3);\n            }\n        }\n    }\n\n    // Rear legs - more powerful\n    for(side=[-1,1]) {\n        translate([side*6,0,0])\n        union() {\n            // Thigh\n            cylinder(18,3,2.5);\n            \n            // Shin\n            translate([0,0,-19])\n            rotate([35,0,0])\n            cylinder(15,2.5,2);\n            \n            // Paw\n            translate([0,0,-35])\n            sphere(3);\n            \n            // Talons\n            for(t=[-1,0,1]) {\n                translate([t*1.2,0,-37])\n                cylinder(5,1,0.4);\n            }\n        }\n    }\n\n    // Tail - segmented and serpentine\n    color(\"darkslategray\")\n    union() {\n        for(i=[0:5]) {\n            translate([0,0,-5-i*8])\n            scale([1-i*0.1,1-i*0.1,1])\n            sphere(5-i*0.5);\n            \n            // Tail spikes\n            if(i%2==0) {\n                for(side=[-1,1]) {\n                    translate([side*(4-i*0.3),0,-5-i*8])\n                    rotate([0,side*15,0])\n                    cylinder(3-i*0.2,0.8,0.3);\n                }\n            }\n        }\n    }\n\n    // Chest armor plates\n    for(i=[0:2]) {\n        translate([0,5-i*2,20-i*3])\n        rotate([10*i,0,0])\n        scale([1-i*0.1,0.3,0.6])\n        sphere(6-i);\n    }\n\n    // Time distortion wisps\n    color(\"purple\")\n    for(i=[0:7]) {\n        rotate([0,0,i*51.4])\n        translate([15+cos(i*73)*3,0,25+sin(i*73)*5])\n        scale([0.3,0.3,1.5])\n        sphere(1+i*0.3);\n    }\n}\n\n// Base stand for printing stability\ncolor(\"gray\")\ntranslate([0,0,-40])\ndifference() {\n    cylinder(5,25,25);\n    cylinder(5,22,22);\n}",
    "renders": true
  },
  {
    "mythical_creature": "dawon",
    "openscad_code": "// Dawon - mythical lion-dragon hybrid from Hindu-Buddhist mythology\n// Size: ~80mm length, 50mm height - suitable for 3D printing\n\n// Main body\nmodule body() {\n    union() {\n        // Torso - elongated oval\n        color(\"goldenrod\")\n        scale([1.2, 0.8, 0.6])\n        sphere(15);\n        \n        // Chest extension\n        color(\"goldenrod\")\n        translate([5, 0, -5])\n        scale([1.5, 1, 0.8])\n        sphere(10);\n        \n        // Hindquarters\n        color(\"goldenrod\")\n        translate([-15, 0, 0])\n        scale([1.1, 0.9, 0.7])\n        sphere(12);\n    }\n}\n\n// Head with lion features and dragon elements\nmodule head() {\n    union() {\n        // Main head shape\n        color(\"goldenrod\")\n        translate([18, 0, 10])\n        scale([1.3, 1.1, 1])\n        sphere(10);\n        \n        // Muzzle\n        color(\"goldenrod\")\n        translate([28, 0, 8])\n        scale([1.2, 0.7, 0.6])\n        sphere(8);\n        \n        // Dragon snout ridge\n        color(\"darkgoldenrod\")\n        translate([25, 0, 15])\n        scale([0.2, 0.8, 0.3])\n        cube([12, 3, 2]);\n    }\n}\n\n// Dragon horns\nmodule horns() {\n    for(i = [-1, 1]) {\n        color(\"burlywood\")\n        translate([15, i*8, 18])\n        rotate([0, i*20, 30])\n        cylinder(h=15, d1=4, d2=1);\n    }\n}\n\n// Wings - dragon-like with membrane structure\nmodule wings() {\n    for(side = [-1, 1]) {\n        color(\"goldenrod\")\n        translate([0, side*15, 8])\n        rotate([0, 0, side*10])\n        scale([0.8, 1, 0.2])\n        sphere([20, 10, 2]);\n        \n        // Wing membrane supports\n        for(i = [0:30:120]) {\n            color(\"darkgoldenrod\")\n            translate([0, side*15, 8])\n            rotate([0, 0, side*(10 + i)])\n            cylinder(h=18, d=1);\n        }\n    }\n}\n\n// Legs with paws\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        color(\"goldenrod\")\n        translate([10, side*12, -5])\n        rotate([0, 10, 0])\n        cylinder(h=15, d=5);\n        \n        // Paw\n        color(\"goldenrod\")\n        translate([10, side*12, -8])\n        sphere(4);\n    }\n    \n    // Hind legs\n    for(side = [-1, 1]) {\n        color(\"goldenrod\")\n        translate([-10, side*10, -5])\n        rotate([0, 20, 0])\n        cylinder(h=18, d=6);\n        \n        // Paw\n        color(\"goldenrod\")\n        translate([-10, side*10, -11])\n        sphere(5);\n    }\n}\n\n// Tail - serpentine dragon tail\nmodule tail() {\n    color(\"goldenrod\")\n    translate([-20, 0, 5])\n    rotate([0, 0, 30])\n    scale([0.8, 0.8, 1])\n    cylinder(h=25, d1=6, d2=2);\n    \n    // Tail segments\n    for(i = [1:0.5:5]) {\n        color(\"darkgoldenrod\")\n        translate([-20 - i*5, 0, 5 - i])\n        rotate([0, 0, 30 + i*5])\n        sphere(2.5 - i*0.3);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    for(side = [-1, 1]) {\n        color(\"red\")\n        translate([26, side*5, 12])\n        sphere(2);\n        \n        // Eye ridge\n        color(\"darkgoldenrod\")\n        translate([24, side*5, 14])\n        cube([4, 3, 1]);\n    }\n}\n\n// Scales pattern on back\nmodule scales() {\n    for(x = [-15:5:15]) {\n        for(y = [-5:5:5]) {\n            color(\"darkgoldenrod\")\n            translate([x, y, 12])\n            scale([1, 1, 0.3])\n            sphere(2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    horns();\n    wings();\n    legs();\n    tail();\n    eyes();\n    scales();\n}",
    "renders": true
  },
  {
    "mythical_creature": "devil",
    "openscad_code": "// Devil Mythical Creature - Realistic Style, Medium Complexity\n// 3D printable, ~70mm tall\n\n$fn = 32;\n\n// Main colors\ncolor_skin = [0.3, 0.05, 0.05]; // Dark red skin\ncolor_horns = [0.4, 0.3, 0.2]; // Brown horns\ncolor_eyes = [1, 0, 0]; // Glowing red eyes\ncolor_wings = [0.2, 0, 0]; // Dark red wings\n\nmodule devil_creature() {\n    union() {\n        // Head\n        color(color_skin)\n        translate([0, 0, 55])\n        scale([1, 0.8, 1.2])\n        sphere(10);\n        \n        // Horns - curved\n        for(i = [-1, 1]) {\n            color(color_horns)\n            translate([i * 8, 0, 65]) {\n                rotate([0, -30, i * 20])\n                cylinder(h = 12, r1 = 3, r2 = 1);\n            }\n        }\n        \n        // Eyes - glowing\n        for(i = [-1, 1]) {\n            color(color_eyes)\n            translate([i * 4, 7, 58])\n            sphere(2);\n        }\n        \n        // Snout/nose\n        color(color_skin)\n        translate([0, 8, 54])\n        scale([0.5, 0.8, 0.3])\n        sphere(5);\n        \n        // Body\n        color(color_skin)\n        translate([0, 0, 30])\n        scale([1.2, 0.8, 2])\n        cylinder(h = 25, r = 12);\n        \n        // Arms\n        for(side = [-1, 1]) {\n            color(color_skin)\n            translate([side * 15, 0, 45]) {\n                rotate([0, side * 10, 0])\n                cylinder(h = 20, r = 4);\n                translate([0, 0, -20])\n                scale([0.7, 0.7, 0.7])\n                sphere(4);\n            }\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            color(color_skin)\n            translate([side * 8, 0, 15]) {\n                cylinder(h = 15, r = 5);\n                // Hooves\n                translate([0, 0, -15])\n                scale([1.2, 1, 0.5])\n                cube([8, 8, 5], center = true);\n            }\n        }\n        \n        // Wings\n        for(side = [-1, 1]) {\n            color(color_wings)\n            translate([side * 15, -5, 50]) {\n                rotate([0, 0, side * 30])\n                difference() {\n                    // Main wing shape\n                    scale([1.5, 1, 0.2])\n                    sphere(15);\n                    \n                    // Wing membrane cutouts\n                    for(i = [1:3]) {\n                        translate([side * i * 4, -5 + i * 3, 0])\n                        scale([0.3, 0.5, 1])\n                        sphere(8);\n                    }\n                }\n            }\n        }\n        \n        // Tail\n        color(color_skin)\n        translate([0, -15, 25]) {\n            rotate([0, 0, 30])\n            cylinder(h = 25, r1 = 4, r2 = 2);\n            // Arrowhead tail tip\n            translate([0, -25, 0])\n            rotate([0, 90, 0])\n            cylinder(h = 8, r1 = 0, r2 = 3);\n        }\n    }\n}\n\n// Scale to 70mm height\nscale(0.7)\ndevil_creature();",
    "renders": true
  },
  {
    "mythical_creature": "drekavac",
    "openscad_code": "// Drekavac - Mythical Slavic forest creature\n// Features: emaciated humanoid body, long limbs, wolf-like head, sharp claws, glowing eyes\n\n// Overall dimensions: 80mm tall, 60mm wing span\n\n// Main colors\n$fn = 50;\n\n// Body module\nmodule drekavac_body() {\n    color(\"#8B7355\") // Muted brown-gray flesh\n    union() {\n        // Torso - emaciated humanoid\n        scale([0.8, 0.4, 1.2])\n            sphere(15);\n        \n        // Ribcage ribs\n        for(i = [0:4]) {\n            translate([0, -6 + i*3, 10 - i*2])\n                rotate([0, 15, 0])\n                scale([0.3, 1, 0.1])\n                sphere(8);\n        }\n    }\n}\n\n// Head module\nmodule drekavac_head() {\n    color(\"#5D4E37\") // Darker flesh\n    union() {\n        // Wolf-like skull head\n        scale([1.2, 0.8, 1.4])\n            sphere(12);\n        \n        // Snout\n        translate([12, 0, -5])\n            scale([1.5, 0.8, 0.8])\n            sphere(8);\n        \n        // Eye sockets\n        translate([8, 8, 8]) {\n            color(\"#FF4500\") // Glowing red eyes\n            sphere(3);\n            translate([0, 0, -1])\n                sphere(2);\n        }\n        translate([8, -8, 8]) {\n            color(\"#FF4500\")\n            sphere(3);\n            translate([0, 0, -1])\n                sphere(2);\n        }\n        \n        // Teeth\n        for(i = [0:3]) {\n            translate([16, -4 + i*2.5, -8])\n                rotate([0, 30, 0])\n                scale([0.5, 0.3, 1])\n                cylinder(h=3, r1=1, r2=0.5);\n        }\n    }\n}\n\n// Arms module\nmodule drekavac_arms() {\n    color(\"#8B7355\")\n    union() {\n        // Left arm\n        translate([-8, 12, 5])\n            rotate([10, 0, 30])\n            cylinder(h=20, r=3);\n        translate([-15, 20, 8])\n            rotate([10, 0, 30])\n            cylinder(h=15, r=2.5);\n        \n        // Right arm\n        translate([-8, -12, 5])\n            rotate([10, 0, -30])\n            cylinder(h=20, r=3);\n        translate([-15, -20, 8])\n            rotate([10, 0, -30])\n            cylinder(h=15, r=2.5);\n    }\n}\n\n// Legs module\nmodule drekavac_legs() {\n    color(\"#8B7355\")\n    union() {\n        // Left leg\n        translate([0, 8, -20])\n            cylinder(h=25, r=4);\n        translate([0, 8, -42])\n            scale([1.5, 2, 3])\n            sphere(5);\n        \n        // Right leg\n        translate([0, -8, -20])\n            cylinder(h=25, r=4);\n        translate([0, -8, -42])\n            scale([1.5, 2, 3])\n            sphere(5);\n    }\n}\n\n// Wings module\nmodule drekavac_wings() {\n    color(\"#2F4F4F\") // Dark gray membrane\n    union() {\n        // Left wing\n        translate([0, 25, 10])\n            rotate([0, 0, 20])\n            scale([1, 0.1, 0.5])\n            sphere(25);\n        translate([0, 25, 10])\n            rotate([0, 0, 20])\n            scale([0.8, 0.1, 0.4])\n            sphere(20);\n        \n        // Right wing\n        translate([0, -25, 10])\n            rotate([0, 0, -20])\n            scale([1, 0.1, 0.5])\n            sphere(25);\n        translate([0, -25, 10])\n            rotate([0, 0, -20])\n            scale([0.8, 0.1, 0.4])\n            sphere(20);\n    }\n}\n\n// Claws module\nmodule drekavac_claws() {\n    color(\"#1C1C1C\") // Black claws\n    union() {\n        // Hand claws\n        for(side = [-1, 1]) {\n            for(i = [0:2]) {\n                translate([-20, side*18 + i*side*3, 5])\n                    rotate([side*20, 0, 0])\n                    cylinder(h=5, r1=2, r2=0.5);\n            }\n        }\n        \n        // Foot claws\n        for(side = [-1, 1]) {\n            for(i = [0:3]) {\n                translate([i*2 - 3, side*8, -45])\n                    rotate([0, 0, 0])\n                    cylinder(h=6, r1=2, r2=1);\n            }\n        }\n    }\n}\n\n// Assemble the creature\ndrekavac_body();\ntranslate([15, 0, 25])\n    drekavac_head();\ndrekavac_arms();\ndrekavac_legs();\ndrekavac_wings();\ndrekavac_claws();",
    "renders": true
  },
  {
    "mythical_creature": "dzeebag",
    "openscad_code": "// Dzebag - Mythical desert wind-hunter\n// Realistic style, medium complexity, 3D-printable\n// Overall size ~75 mm from snout to tail tip\n\n$fa = 2;\n$fs = 0.5;\n\n// Main colors\ncolor_body = \"#4a3b31\";\ncolor_wing = \"#6f5e4a\";\ncolor_eye = \"#b22222\";\ncolor_horn = \"#d2b48c\";\n\nmodule body() {\n    // Torso: elongated oval\n    color(color_body)\n    difference() {\n        scale([1.2, 0.7, 0.6])\n            sphere(d = 35);\n        // Slight hollow for weight saving\n        scale([1.1, 0.6, 0.5])\n            sphere(d = 34);\n    }\n}\n\nmodule head() {\n    // Snout and skull\n    union() {\n        color(color_body)\n        translate([-12, 0, 5])\n            scale([1.5, 0.8, 0.8])\n                sphere(d = 16);\n        \n        // Nostrils\n        for (dx = [-14.5, -10.5])\n            translate([dx, 2.5, 6.5])\n                rotate([0, 90, 0])\n                    cylinder(h = 2, d1 = 2.5, d2 = 1.5);\n    }\n    \n    // Eyes\n    color(color_eye)\n    for (side = [-1, 1])\n        translate([-7, side * 6, 8])\n            sphere(d = 3);\n    \n    // Horns\n    color(color_horn)\n    translate([-5, 0, 12])\n        rotate([0, 0, 0])\n            cylinder(h = 10, d1 = 3, d2 = 0.5);\n    translate([-7, 0, 12])\n        rotate([0, 0, 0])\n            cylinder(h = 8, d1 = 2.5, d2 = 0.5);\n}\n\nmodule tail() {\n    color(color_body)\n    // Segmented tail for flexibility\n    for (i = [0:4]) {\n        translate([18 + i * 3.5, 0, -2 + i * 0.5])\n            rotate([0, 0, i * -10])\n                scale([1 - i * 0.15, 0.8 - i * 0.1, 0.8 - i * 0.1])\n                    sphere(d = 10);\n    }\n}\n\nmodule wing() {\n    color(color_wing)\n    intersection() {\n        // Main membrane\n        translate([5, 0, 8])\n            rotate([0, 90, 0])\n                scale([1, 0.3, 1])\n                    sphere(d = 30);\n        \n        // Remove lower half to create wing shape\n        translate([5, 0, -5])\n            cube([50, 50, 10], center = true);\n    }\n    \n    // Wing ribs for structure\n    color(color_body)\n    for (a = [30:30:150]) {\n        rotate([0, a, 0])\n            translate([5, 0, 8])\n                cylinder(h = 12, d = 1.2);\n    }\n}\n\nmodule legs() {\n    color(color_body)\n    for (side = [-1, 1]) {\n        // Upper leg\n        translate([0, side * 6, -5])\n            rotate([45, 0, 0])\n                cylinder(h = 8, d1 = 4, d2 = 3);\n        \n        // Lower leg\n        translate([0, side * 6, -10])\n            rotate([90, 0, 0])\n                cylinder(h = 6, d1 = 3, d2 = 2.5);\n        \n        // Paw\n        translate([0, side * 6, -14])\n            sphere(d = 4);\n    }\n}\n\nmodule spots() {\n    color(\"#2f2519\")\n    for (i = [0:9]) {\n        a = i * 36;\n        r = 12 + sin(i * 2.5) * 3;\n        translate([sin(a) * r, cos(a) * r, 1])\n            sphere(d = 2.5);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    translate([-5, 0, 0])\n        head();\n    tail();\n    \n    // Wings on both sides\n    for (side = [-1, 1]) {\n        translate([0, side * 5, 0])\n            rotate([0, side * 30, 0])\n                wing();\n    }\n    \n    legs();\n    spots();\n}",
    "renders": true
  },
  {
    "mythical_creature": "grootslang",
    "openscad_code": "// Grootslang - A mythical elephant-snake hybrid creature\n// Based on South African folklore - massive serpentine body with elephant-like features\n\nmodule elephant_head() {\n    color([0.4, 0.3, 0.2]) {\n        // Main head structure\n        union() {\n            // Skull base\n            translate([0, 0, 8]) scale([1.2, 1, 1]) sphere(r=8, $fn=20);\n            \n            // Snout/trunk\n            translate([0, 14, 2]) rotate([0, 10, 0]) cylinder(h=12, r1=6, r2=3, $fn=16);\n            \n            // Tusks\n            for(side = [-1, 1]) {\n                translate([side * 5, 10, -3]) rotate([0, -20, side * 15]) \n                    cylinder(h=8, r1=2, r2=0.5, $fn=8);\n            }\n            \n            // Ears\n            for(side = [-1, 1]) {\n                translate([side * 9, 0, 6]) rotate([0, 0, side * 30]) \n                    scale([1.5, 1, 0.3]) sphere(r=5, $fn=12);\n            }\n        }\n    }\n}\n\nmodule snake_body() {\n    color([0.2, 0.4, 0.3]) {\n        // Main serpentine body\n        union() {\n            // Head connection\n            translate([-15, 0, 0]) rotate([0, 0, 180]) elephant_head();\n            \n            // Segmented body\n            for(i = [0:20]) {\n                translate([-20 - i * 3, sin(i * 15) * 3, cos(i * 15) * 2]) \n                    rotate([0, sin(i * 10) * 10, 0]) \n                    scale([1 - i * 0.02, 1 - i * 0.02, 1 - i * 0.02]) \n                    sphere(r=5 - i * 0.15, $fn=12);\n            }\n            \n            // Tail\n            translate([-85, -2, 0]) rotate([0, 0, 30]) \n                cylinder(h=15, r1=2, r2=0.5, $fn=8);\n        }\n    }\n}\n\nmodule scales() {\n    color([0.1, 0.3, 0.2]) {\n        // Diamond pattern scales along body\n        for(i = [5:25]) {\n            for(j = [0:5]) {\n                translate([-25 - i * 3, \n                          sin(i * 15) * 3 + cos(j * 60) * 4, \n                          cos(i * 15) * 2 + sin(j * 60) * 4]) \n                    rotate([0, j * 30, 0]) \n                    scale([0.3, 0.3, 0.1]) \n                    sphere(r=2, $fn=6);\n            }\n        }\n    }\n}\n\nmodule eyes() {\n    color([0.8, 0.1, 0.1]) {\n        // Glowing red eyes\n        for(side = [-1, 1]) {\n            translate([side * 4, 8, 4]) sphere(r=1.5, $fn=10);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body with scales\n    snake_body();\n    scales();\n    \n    // Eyes on head\n    translate([-15, 0, 0]) rotate([0, 0, 180]) eyes();\n    \n    // Optional base for stability\n    color([0.3, 0.3, 0.3]) \n        translate([0, 0, -5]) \n            cube([100, 30, 2], center=true);\n}\n\n// Scale to printing size\nscale(0.5) {\n    // The creature is already defined above\n}",
    "renders": true
  },
  {
    "mythical_creature": "aerisprite",
    "openscad_code": "// Aerisprite - Air elemental fairy creature with crystalline wings\n// Total height: 80mm (wingtip to foot)\n\n// Color definitions\ncolor_wing = \"LightSkyBlue\";\ncolor_body = \"MintCream\";\ncolor_crystal = \"DeepSkyBlue\";\ncolor_eyes = \"RoyalBlue\";\n\n// Main module\nmodule aerisprite() {\n    // Center the model on origin\n    translate([0, 0, 40]) {\n        \n        // Head with pointed features\n        translate([0, 0, 25]) {\n            color(color_body) {\n                // Main head sphere\n                sphere(r=6, $fn=16);\n                \n                // Pointed chin\n                translate([0, 0, -6])\n                    scale([0.8, 0.8, 1.5])\n                        sphere(r=4, $fn=8);\n                \n                // Elongated ears\n                for(side = [-1, 1]) {\n                    translate([side*5, 0, 2]) {\n                        rotate([0, side*15, 0])\n                            scale([0.3, 0.8, 2])\n                                sphere(r=3, $fn=8);\n                    }\n                }\n            }\n            \n            // Eyes\n            color(color_eyes) {\n                for(side = [-1, 1]) {\n                    translate([side*2.5, -4.5, 0.5])\n                        sphere(r=1.2, $fn=8);\n                }\n            }\n        }\n        \n        // Torso\n        color(color_body) {\n            translate([0, 0, 12]) {\n                // Upper torso\n                scale([1, 0.6, 1.5])\n                    sphere(r=8, $fn=16);\n                \n                // Lower torso taper\n                translate([0, 0, -8])\n                    scale([0.7, 0.5, 1.2])\n                        sphere(r=7, $fn=16);\n            }\n        }\n        \n        // Arms\n        for(side = [-1, 1]) {\n            color(color_body) {\n                translate([side*8, 0, 15]) {\n                    rotate([0, 0, side*20])\n                        cylinder(h=12, r1=2, r2=1.5, $fn=8);\n                    \n                    translate([0, 0, -12])\n                        sphere(r=1.5, $fn=8);\n                }\n            }\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            color(color_body) {\n                translate([side*3, 0, 0]) {\n                    cylinder(h=15, r1=2.5, r2=2, $fn=8);\n                    \n                    // Feet\n                    translate([0, 2, -15])\n                        rotate([90, 0, 0])\n                            scale([1.2, 2.5, 0.8])\n                                cylinder(h=2, r1=3, r2=2, $fn=8);\n                }\n            }\n        }\n        \n        // Crystalline wings\n        module wing() {\n            color(color_wing) {\n                // Main wing membrane\n                translate([0, 0, 5])\n                    linear_extrude(height=0.5)\n                        polygon(points=[\n                            [0, 0], [15, 5], [25, 15], [30, 25], [25, 35], [15, 40], [5, 35], [0, 25], [-5, 15], [0, 5]\n                        ]);\n                \n                // Wing veins\n                color(color_crystal) {\n                    for(i = [1:4]) {\n                        translate([i*6, i*7, 5.3])\n                            rotate([0, 0, -10 + i*5])\n                                scale([0.5, 0.5, 1])\n                                    cylinder(h=1, r1=0.3, r2=0.1, $fn=4);\n                    }\n                }\n                \n                // Wing crystals\n                color(color_crystal) {\n                    for(pos = [[20, 20], [15, 30], [25, 30], [10, 25]]) {\n                        translate([pos[0], pos[1], 5.5])\n                            scale([1, 1, 2])\n                                rotate([0, 90, 0])\n                                    cylinder(h=2, r1=1, r2=0, $fn=6);\n                    }\n                }\n            }\n        }\n        \n        // Attach wings\n        for(side = [-1, 1]) {\n            translate([side*8, 0, 15]) {\n                rotate([0, side*10, side*30])\n                    wing();\n            }\n        }\n        \n        // Floating crystal halo\n        color(color_crystal) {\n            translate([0, 0, 35])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h=2, r1=12, r2=12, $fn=32);\n                        cylinder(h=3, r1=10, r2=10, $fn=32);\n                    }\n            \n            // Halo crystals\n            for(i = [0:6]) {\n                rotate([0, 0, i*60])\n                    translate([12, 0, 35])\n                        scale([0.5, 0.5, 1])\n                            rotate([0, 90, 0])\n                                cylinder(h=3, r1=1.5, r2=0, $fn=6);\n            }\n        }\n        \n        // Tail with crystalline tip\n        color(color_body) {\n            translate([0, -6, 5]) {\n                rotate([25, 0, 0])\n                    cylinder(h=20, r1=3, r2=1, $fn=8);\n                \n                // Crystal tail tip\n                color(color_crystal) {\n                    translate([0, -2, -20])\n                        rotate([0, 90, 0])\n                            cylinder(h=4, r1=2, r2=0, $fn=6);\n                }\n            }\n        }\n    }\n}\n\n// Generate the aerisprite\naerisprite();",
    "renders": true
  },
  {
    "mythical_creature": "aquafae",
    "openscad_code": "// Aquafae - Water fairy with realistic features\n// Wings, fish tail, flowing hair, water magic effects\n\n$fn = 64; // Smooth curves for realistic look\n\n// Main colors\ncolor_aqua = [0.2, 0.6, 0.8, 0.9];\ncolor_skin = [0.9, 0.8, 0.7, 0.9];\ncolor_wings = [0.7, 0.9, 1.0, 0.7];\ncolor_scales = [0.1, 0.5, 0.7, 0.9];\n\nmodule aquafae() {\n    // Body\n    color(color_skin)\n    translate([0, 0, 10])\n    scale([1, 0.6, 1.5])\n    sphere(8);\n\n    // Head\n    color(color_skin)\n    translate([0, 0, 28])\n    scale([0.8, 0.8, 1])\n    sphere(6);\n\n    // Hair - flowing water-like strands\n    for(i = [0:30:330]) {\n        color(color_aqua)\n        rotate([0, 0, i])\n        translate([0, 5, 30])\n        scale([0.3, 0.3, 2])\n        cylinder(8, 2, 1);\n    }\n\n    // Eyes\n    color([0, 0, 0.3, 1])\n    translate([-2, 2.5, 30])\n    sphere(0.8);\n    \n    color([0, 0, 0.3, 1])\n    translate([2, 2.5, 30])\n    sphere(0.8);\n\n    // Fish tail - segmented scales\n    union() {\n        // Upper tail\n        color(color_aqua)\n        translate([0, -3, 0])\n        scale([1.2, 0.5, 2])\n        cylinder(10, 4, 1);\n        \n        // Lower tail fins\n        color(color_scales)\n        translate([0, -3, -5])\n        rotate([0, 15, 0])\n        scale([2, 0.2, 1])\n        cube([8, 1, 6]);\n        \n        color(color_scales)\n        translate([0, -3, -5])\n        rotate([0, -15, 0])\n        scale([2, 0.2, 1])\n        cube([8, 1, 6]);\n        \n        // Scales pattern\n        for(z = [0:5:-10]) {\n            for(a = [0:45:315]) {\n                color(color_scales)\n                translate([0, -3, z])\n                rotate([0, 0, a])\n                translate([3, 0, 0])\n                scale([0.8, 0.8, 0.3])\n                sphere(1);\n            }\n        }\n    }\n\n    // Arms\n    color(color_skin)\n    translate([5, 0, 20])\n    rotate([0, 0, -30])\n    scale([0.4, 0.4, 2])\n    cylinder(6, 2, 1);\n    \n    color(color_skin)\n    translate([-5, 0, 20])\n    rotate([0, 0, 30])\n    scale([0.4, 0.4, 2])\n    cylinder(6, 2, 1);\n\n    // Wings - translucent with vein structure\n    module wing() {\n        color(color_wings)\n        difference() {\n            // Main wing shape\n            translate([0, 0, 0])\n            scale([1, 3, 0.3])\n            sphere(5);\n            \n            // Cut wing shape\n            translate([0, 2, 0])\n            scale([0.7, 2.5, 0.5])\n            sphere(4);\n        }\n        \n        // Wing veins\n        color([0.9, 0.9, 1, 0.5])\n        for(i = [0:15:60]) {\n            rotate([0, 0, i])\n            translate([0, 0, 0.2])\n            scale([0.1, 1.5, 0.1])\n            cube([1, 5, 1]);\n        }\n    }\n    \n    // Left wing\n    translate([6, 0, 25])\n    rotate([0, 0, -30])\n    wing();\n    \n    // Right wing\n    translate([-6, 0, 25])\n    rotate([0, 0, 30])\n    mirror([1, 0, 0])\n    wing();\n\n    // Water magic orbs\n    for(i = [0:72:288]) {\n        color([0.5, 0.8, 1, 0.6])\n        rotate([0, 0, i])\n        translate([8, 0, 15])\n        sphere(1.5);\n    }\n}\n\n// Generate the aquafae\naquafae();",
    "renders": true
  },
  {
    "mythical_creature": "blazenymph",
    "openscad_code": "// Blazenymph - A fiery forest spirit with butterfly wings and flame hair\n// Realistic style, medium complexity, 3D printable\n\n// Main dimensions\nbody_height = 40;\nbody_width = 20;\nwing_span = 60;\nhead_size = 15;\n\n// Color definitions\nflame_orange = [0.9, 0.3, 0.1];\nflame_yellow = [1.0, 0.6, 0.1];\nbody_red = [0.7, 0.1, 0.1];\nwing_gold = [0.8, 0.6, 0.2];\nhorn_dark = [0.3, 0.2, 0.2];\n\nmodule blazenymph() {\n    // Central body\n    translate([0, 0, body_height/2])\n    color(body_red)\n    union() {\n        // Torso\n        cylinder(h=body_height*0.5, r1=body_width/2, r2=body_width/2.5, $fn=16);\n        \n        // Abdomen segment\n        translate([0, 0, body_height*0.4])\n        cylinder(h=body_height*0.3, r1=body_width/2.5, r2=body_width/3, $fn=12);\n    }\n    \n    // Head with horns\n    translate([0, 0, body_height*0.8 + head_size/2])\n    union() {\n        color(body_red)\n        sphere(r=head_size/2, $fn=24);\n        \n        // Horns - curved back flame shapes\n        color(horn_dark)\n        for(i=[-1, 1]) {\n            translate([i*head_size/3, 0, head_size/4])\n            rotate([i*30, 0, 0])\n            cylinder(h=head_size*0.8, r1=2, r2=1, $fn=8);\n            \n            translate([i*head_size/3.5, 0, head_size/3])\n            rotate([i*45, 0, 0])\n            cylinder(h=head_size*0.6, r1=1.5, r2=0.5, $fn=6);\n        }\n        \n        // Flame hair elements\n        color(flame_orange)\n        for(angle=[0:30:330]) {\n            rotate([0, 0, angle])\n            translate([head_size/2, 0, head_size/4])\n            rotate([45, 0, 0])\n            cylinder(h=12, r1=3, r2=1, $fn=6);\n        }\n        \n        // Eyes\n        color([0, 0, 0])\n        for(i=[-1, 1]) {\n            translate([i*head_size/4, head_size/3, -head_size/6])\n            sphere(r=1.5, $fn=8);\n        }\n    }\n    \n    // Butterfly wings with flame patterns\n    module wing() {\n        difference() {\n            color(wing_gold)\n            scale([1, 1.5, 0.1])\n            sphere(r=wing_span/4, $fn=32);\n            \n            // Wing holes for flame pattern\n            color([1, 1, 1])\n            for(i=[0:2]) {\n                translate([5+i*8, -5-i*6, 0])\n                rotate([0, 0, 45+i*15])\n                scale([1, 2, 1])\n                cylinder(h=2, r=3, $fn=8);\n            }\n        }\n    }\n    \n    // Left wing\n    translate([body_width/2, 0, body_height*0.7])\n    rotate([0, 0, 30])\n    wing();\n    \n    // Right wing\n    translate([-body_width/2, 0, body_height*0.7])\n    rotate([0, 0, -30])\n    mirror([1, 0, 0])\n    wing();\n    \n    // Arms\n    color(body_red)\n    for(i=[-1, 1]) {\n        translate([i*body_width/2.5, 0, body_height*0.7])\n        rotate([0, i*30, 0])\n        cylinder(h=body_height*0.4, r1=3, r2=2, $fn=8);\n        \n        // Hands\n        translate([i*body_width/2.5, 0, body_height*0.5])\n        sphere(r=2.5, $fn=8);\n    }\n    \n    // Legs\n    color(body_red)\n    for(i=[-1, 1]) {\n        translate([i*body_width/4, 0, body_height*0.2])\n        rotate([0, i*15, 0])\n        cylinder(h=body_height*0.3, r1=3, r2=2, $fn=8);\n        \n        // Feet\n        translate([i*body_width/4, 0, 0])\n        cube([4, 6, 2], center=true);\n    }\n    \n    // Flame tail segments\n    color(flame_orange)\n    for(i=[0:3]) {\n        translate([0, 0, -body_height*0.05 - i*5])\n        scale([1-i*0.2, 1-i*0.2, 1])\n        cylinder(h=5, r1=3-i*0.5, r2=2-i*0.5, $fn=12);\n    }\n    \n    // Additional flame wisps\n    color(flame_yellow)\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([3, 0, -body_height*0.1])\n        rotate([30, 0, 0])\n        cylinder(h=8, r1=1.5, r2=0.5, $fn=6);\n    }\n}\n\n// Render the complete creature\nblazenymph();",
    "renders": true
  },
  {
    "mythical_creature": "cinderling",
    "openscad_code": "// Cinderling - Ember spirit forged from volcanic ash\n// Size: 80mm tall, 60mm wide, 60mm deep\n\n$fn = 32;\n\n// Main color: glowing ember red\ncolor([0.8, 0.2, 0.05]) {\n    // Body core - glowing ember heart\n    difference() {\n        sphere(d = 25);\n        translate([0, 0, -12.5]) cube([50, 50, 25], center = true);\n    }\n}\n\n// Ash-covered body segments\ncolor([0.2, 0.2, 0.2]) {\n    union() {\n        // Torso\n        translate([0, 0, 10]) scale([1.2, 1, 1.5]) sphere(d = 30);\n        \n        // Head\n        translate([0, 0, 35]) scale([0.8, 0.9, 1.1]) sphere(d = 20);\n    }\n}\n\n// Ember cracks showing through ash\ncolor([1, 0.3, 0]) {\n    for(i = [0:15]) {\n        rotate([0, 0, i * 24]) \n        translate([0, 15, 10 + sin(i * 10) * 5]) \n        cylinder(h = 2, d1 = 3, d2 = 1);\n    }\n}\n\n// Wings - jagged obsidian-like formations\nmodule wing(side) {\n    color([0.15, 0.15, 0.15]) {\n        mirror([side, 0, 0]) {\n            // Upper wing segment\n            translate([10, 0, 25]) rotate([0, -30, 45]) \n            scale([1, 0.3, 0.1]) cube([30, 15, 3]);\n            \n            // Lower wing segment\n            translate([15, 0, 15]) rotate([0, 30, 30]) \n            scale([1, 0.25, 0.1]) cube([25, 12, 3]);\n            \n            // Wing joints - glowing ember cores\n            color([0.9, 0.25, 0.05]) {\n                translate([10, 0, 25]) sphere(d = 4);\n                translate([15, 0, 15]) sphere(d = 3);\n            }\n        }\n    }\n}\n\nwing(1);\nwing(-1);\n\n// Tail - segmented, tapering ember tail\ncolor([0.3, 0.3, 0.3]) {\n    for(i = [0:4]) {\n        translate([0, -10 - i * 8, 15 - i * 5]) \n        scale([1 - i * 0.15, 1 - i * 0.15, 1 - i * 0.1]) \n        sphere(d = 12 - i * 2);\n        \n        // Glowing segments between ash\n        color([0.8, 0.2, 0]) {\n            translate([0, -10 - i * 8, 15 - i * 5]) \n            sphere(d = 8 - i * 1.5);\n        }\n    }\n}\n\n// Legs - sturdy obsidian pillars\nmodule leg(offset) {\n    color([0.1, 0.1, 0.1]) {\n        translate([offset * 8, 0, 0]) {\n            // Upper leg\n            translate([0, 0, 5]) rotate([0, 0, 0]) \n            cylinder(h = 15, d1 = 8, d2 = 6);\n            \n            // Lower leg\n            translate([0, 0, -5]) rotate([0, 15, 0]) \n            cylinder(h = 12, d1 = 6, d2 = 8);\n            \n            // Foot\n            translate([0, -5, -12]) rotate([0, 15, 0]) \n            scale([1.5, 2, 0.5]) cube([8, 8, 3], center = true);\n        }\n    }\n}\n\nleg(1);\nleg(-1);\n\n// Arms - ember veins through ash\nmodule arm(side) {\n    color([0.25, 0.25, 0.25]) {\n        mirror([side, 0, 0]) {\n            translate([15, 0, 25]) rotate([0, 0, -30]) {\n                // Upper arm\n                cylinder(h = 12, d1 = 6, d2 = 5);\n                \n                // Lower arm\n                translate([0, -12, 0]) rotate([0, 0, 15]) \n                cylinder(h = 10, d1 = 5, d2 = 4);\n                \n                // Hand - claw formation\n                translate([0, -22, 0]) rotate([0, 0, 15]) \n                scale([0.8, 1.2, 0.5]) sphere(d = 6);\n            }\n            \n            // Ember veins\n            color([0.9, 0.2, 0.05]) {\n                for(i = [0:3]) {\n                    rotate([0, 0, i * 90]) \n                    translate([15 + side * 3, 0, 25 - i * 3]) \n                    cylinder(h = 8, d = 1.5);\n                }\n            }\n        }\n    }\n}\n\narm(1);\narm(-1);\n\n// Head details\n// Eyes - glowing ember slits\ncolor([1, 0.4, 0.1]) {\n    translate([5, 0, 40]) rotate([0, 90, 0]) \n    scale([0.3, 1, 1]) cylinder(h = 3, d = 2);\n    translate([-5, 0, 40]) rotate([0, 90, 0]) \n    scale([0.3, 1, 1]) cylinder(h = 3, d = 2);\n}\n\n// Horns - jagged obsidian spikes\ncolor([0.1, 0.1, 0.1]) {\n    for(side = [-1, 1]) {\n        translate([side * 8, 0, 45]) rotate([30 * side, 0, 45 * side]) \n        cylinder(h1 = 0, h2 = 8, d1 = 2, d2 = 6);\n    }\n}\n\n// Base for stability\ncolor([0.1, 0.1, 0.1]) {\n    translate([0, 0, -15]) cylinder(h = 3, d = 40);\n}",
    "renders": true
  },
  {
    "mythical_creature": "craggnome",
    "openscad_code": "// Craggnome - A mythical stone gnome with crystalline growths\n// Overall height: 80mm, designed for 3D printing\n\n// Main color scheme\nstone_color = [0.5, 0.45, 0.4];\ncrystal_color = [0.7, 0.8, 1.0];\neye_color = [0.2, 0.3, 0.8];\n\n// Base module for the creature\nmodule craggnome() {\n    // Main body - rocky torso\n    color(stone_color)\n    union() {\n        // Central torso\n        translate([0, 0, 20])\n            scale([1.2, 1, 1.5])\n            sphere(r=15, $fn=12);\n        \n        // Lower body\n        translate([0, 0, 8])\n            scale([1.4, 1.2, 1])\n            sphere(r=12, $fn=10);\n        \n        // Legs\n        for (leg_x = [-8, 8]) {\n            translate([leg_x, 0, 0])\n                scale([0.8, 1.2, 1.2])\n                cylinder(r1=6, r2=4, h=18, $fn=8);\n        }\n    }\n    \n    // Head with rocky texture\n    color(stone_color)\n    union() {\n        // Main head\n        translate([0, 0, 45])\n            scale([1, 0.9, 1.2])\n            sphere(r=12, $fn=12);\n        \n        // Brow ridges\n        translate([0, 8, 52])\n            scale([1.5, 0.5, 0.3])\n            cube([10, 3, 3], center=true);\n        \n        // Nose\n        translate([0, 10, 45])\n            cylinder(r1=3, r2=2, h=6, $fn=6);\n    }\n    \n    // Eyes - glowing crystals\n    color(crystal_color)\n    for (eye_x = [-5, 5]) {\n        translate([eye_x, 8, 48])\n            sphere(r=2, $fn=8);\n    }\n    \n    // Arms\n    color(stone_color)\n    for (arm_x = [-20, 20]) {\n        translate([arm_x, 0, 35])\n            rotate([0, 0, arm_x > 0 ? -20 : 20])\n            union() {\n                // Upper arm\n                cylinder(r1=5, r2=4, h=15, $fn=8);\n                \n                // Lower arm\n                translate([0, 0, 15])\n                    rotate([0, 0, arm_x > 0 ? 30 : -30])\n                    cylinder(r1=4, r2=3, h=12, $fn=8);\n                \n                // Hands\n                translate([0, 0, 27])\n                    sphere(r=4, $fn=8);\n            }\n    }\n    \n    // Crystal growths on back and head\n    color(crystal_color)\n    union() {\n        // Back crystals\n        for (i = [1:5]) {\n            angle = i * 72;\n            radius = 12;\n            h = 8 + i * 2;\n            translate([cos(angle) * radius, sin(angle) * radius, 40])\n                cylinder(r1=2, r2=0.5, h=h, $fn=6);\n        }\n        \n        // Head crystals\n        for (j = [1:3]) {\n            angle = j * 120;\n            translate([cos(angle) * 8, sin(angle) * 8, 55])\n                cylinder(r1=1.5, r2=0.3, h=6, $fn=5);\n        }\n    }\n    \n    // Horns\n    color(stone_color)\n    for (horn_x = [-6, 6]) {\n        translate([horn_x, -3, 55])\n            rotate([0, 20, horn_x > 0 ? -10 : 10])\n            cylinder(r1=3, r2=1, h=10, $fn=6);\n    }\n    \n    // Feet\n    color(stone_color)\n    for (foot_x = [-10, 10]) {\n        translate([foot_x, 0, 0])\n            scale([1.2, 2, 0.5])\n            sphere(r=8, $fn=8);\n    }\n    \n    // Magical rune patterns on chest\n    color(crystal_color)\n    translate([0, 12, 35])\n    difference() {\n        cylinder(r=8, h=0.5, $fn=8);\n        for (rune = [1:6]) {\n            rotate([0, 0, rune * 60])\n            translate([4, 0, 0])\n                cube([2, 0.5, 1], center=true);\n        }\n    }\n}\n\n// Create the craggnome\ncraggnome();",
    "renders": true
  },
  {
    "mythical_creature": "driftleaf",
    "openscad_code": "// Driftleaf - A mythical forest spirit that resembles a leaf carried by the wind\n// Features translucent wings, vine-like limbs, and a crystalline core\n\n// Overall size: 80mm wingspan, 60mm height\n$fn = 32;\n\n// Main colors\ncolor_leaf = [0.2, 0.6, 0.3];  // Deep forest green\ncolor_wing = [0.8, 0.9, 0.7, 0.6];  // Translucent pale green\ncolor_vine = [0.3, 0.4, 0.2];  // Dark vine brown\ncolor_crystal = [0.9, 1.0, 0.9];  // Glowing white\n\nmodule driftleaf() {\n    // Central crystalline heart\n    color(color_crystal) \n    translate([0, 0, 30])\n    scale([1.2, 0.8, 1.5])\n    sphere(r = 5);\n    \n    // Main leaf body\n    color(color_leaf)\n    union() {\n        // Front leaf half\n        translate([0, 0, 25])\n        scale([15, 8, 3])\n        rotate([0, 20, 0])\n        cube([1, 1, 1], center = true);\n        \n        // Back leaf half\n        translate([0, 0, 20])\n        scale([12, 7, 2.5])\n        rotate([0, -15, 0])\n        cube([1, 1, 1], center = true);\n        \n        // Stem connection\n        translate([0, 0, 15])\n        cylinder(h = 10, r1 = 3, r2 = 2);\n    }\n    \n    // Vine limbs\n    color(color_vine)\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([8, 0, 22])\n        rotate([0, 45, 0])\n        cylinder(h = 15, r = 1);\n        \n        // Branching smaller vines\n        translate([12 * cos(i * 90), 12 * sin(i * 90), 30])\n        rotate([0, 30, i * 90 + 45])\n        cylinder(h = 8, r = 0.7);\n    }\n    \n    // Translucent wings\n    color(color_wing)\n    for(side = [-1, 1]) {\n        translate([side * 20, 0, 35])\n        rotate([0, side * -10, 0])\n        \n        // Upper wing section\n        translate([0, 0, 0])\n        scale([1, side * 1, 1])\n        rotate([0, 0, 30])\n        linear_extrude(height = 0.5)\n        polygon(points = [[0,0], [15,5], [25,0], [20,-8], [10,-5]]);\n        \n        // Lower wing section\n        translate([0, 0, -2])\n        scale([0.8, side * 0.8, 1])\n        rotate([0, 0, -20])\n        linear_extrude(height = 0.5)\n        polygon(points = [[0,0], [12,3], [18,-2], [15,-6], [8,-4]]);\n    }\n    \n    // Leaf vein details\n    color([0.1, 0.3, 0.2])\n    for(i = [1:4]) {\n        translate([i * 3 - 7.5, 0, 26])\n        rotate([0, 90, 0])\n        cylinder(h = 8, r = 0.3);\n        \n        translate([i * 3 - 7.5, 0, 26])\n        rotate([0, 90, 45])\n        cylinder(h = 6, r = 0.2);\n        \n        translate([i * 3 - 7.5, 0, 26])\n        rotate([0, 90, -45])\n        cylinder(h = 6, r = 0.2);\n    }\n    \n    // Root-like feet\n    color(color_vine)\n    for(i = [0:5]) {\n        angle = i * 60;\n        translate([4 * cos(angle), 4 * sin(angle), 5])\n        rotate([0, 30, angle])\n        cylinder(h = 8, r1 = 1.5, r2 = 0.5);\n        \n        // Tiny root branches\n        translate([4 * cos(angle), 4 * sin(angle), 8])\n        rotate([0, 45, angle + 30])\n        cylinder(h = 3, r = 0.5);\n    }\n    \n    // Magical sparkles around crystal\n    color(color_crystal)\n    for(i = [0:7]) {\n        angle = i * 51.4;\n        translate([3 * cos(angle), 3 * sin(angle), 32])\n        sphere(r = 0.5);\n    }\n}\n\n// Generate the creature\ndriftleaf();",
    "renders": true
  },
  {
    "mythical_creature": "duskglen",
    "openscad_code": "// Duskglen Mythical Creature - Realistic Style\n// A shadowy dragon-owl hybrid that guards twilight realms\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main body - owl-like torso with dragon scales\nmodule duskglen_body() {\n    union() {\n        // Central torso - elongated owl body\n        color(\"darkslategray\")\n        scale([1.2, 1, 1.4])\n        sphere(r=15);\n        \n        // Scaled chest plates\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n            translate([0, 15, -5])\n            color(\"midnightblue\")\n            scale([1, 0.3, 0.2])\n            sphere(r=8);\n        }\n        \n        // Wing joints\n        translate([20, 0, 5])\n        color(\"darkslategray\")\n        sphere(r=8);\n        \n        translate([-20, 0, 5])\n        color(\"darkslategray\")\n        sphere(r=8);\n    }\n}\n\n// Dragon-owl wings with feather texture\nmodule wing(side) {\n    mirror([side, 0, 0]) {\n        union() {\n            // Main wing structure\n            color(\"darkslateblue\")\n            translate([0, 0, 10])\n            rotate([-30, 0, 30])\n            scale([1, 0.2, 2])\n            cylinder(h=40, r1=15, r2=8);\n            \n            // Primary feathers\n            for(i = [0:3]) {\n                translate([0, 0, 10 + i*8])\n                rotate([0, 0, -i*15])\n                color(\"midnightblue\")\n                scale([1, 0.1, 0.5])\n                cylinder(h=25 - i*3, r1=5, r2=2);\n            }\n            \n            // Secondary feathers\n            for(i = [0:2]) {\n                translate([5 + i*5, 0, 15])\n                rotate([0, 0, -20 - i*10])\n                color(\"darkslategray\")\n                scale([0.5, 0.1, 0.3])\n                cylinder(h=20 - i*2, r1=4, r2=1);\n            }\n        }\n    }\n}\n\n// Owl head with dragon features\nmodule head() {\n    union() {\n        // Main head shape\n        color(\"darkslategray\")\n        translate([0, 0, 25])\n        scale([1.1, 1, 1.2])\n        sphere(r=12);\n        \n        // Large owl eyes with dragon slit pupils\n        for(x = [-6, 6]) {\n            translate([x, -5, 28])\n            color(\"goldenrod\")\n            sphere(r=5);\n            \n            // Dragon slit pupils\n            translate([x, -7, 30])\n            color(\"black\")\n            scale([0.3, 1, 0.1])\n            sphere(r=3);\n        }\n        \n        // Beak-like snout\n        color(\"darkslateblue\")\n        translate([0, -12, 25])\n        rotate([-45, 0, 0])\n        scale([0.8, 0.8, 1.5])\n        cylinder(h=8, r1=3, r2=1);\n        \n        // Dragon horns\n        for(angle = [45, -45]) {\n            rotate([0, 0, angle])\n            translate([8, 0, 30])\n            rotate([30, 0, 0])\n            color(\"dimgray\")\n            cylinder(h=15, r1=2, r2=1);\n        }\n        \n        // Ear tufts\n        for(x = [-8, 8]) {\n            translate([x, 0, 35])\n            color(\"darkslateblue\")\n            rotate([30, 0, x > 0 ? -20 : 20])\n            scale([0.5, 0.5, 1])\n            sphere(r=5);\n        }\n    }\n}\n\n// Dragon tail with owl feather details\nmodule tail() {\n    union() {\n        // Main tail segments\n        for(i = [0:3]) {\n            translate([0, 15 + i*8, 10 - i*3])\n            rotate([0, 0, i*5])\n            color(\"darkslateblue\")\n            scale([1 - i*0.2, 1 - i*0.2, 1])\n            sphere(r=6 - i);\n            \n            // Feather-like tail fins\n            translate([0, 15 + i*8, 10 - i*3])\n            rotate([0, 0, i*10])\n            color(\"midnightblue\")\n            scale([2 - i*0.3, 0.1, 0.5])\n            cylinder(h=10 - i*2, r1=3, r2=1);\n        }\n        \n        // Tail tip\n        translate([0, 40, 5])\n        color(\"midnightblue\")\n        sphere(r=2);\n    }\n}\n\n// Clawed feet\nmodule feet() {\n    for(side = [-1, 1]) {\n        translate([side*8, 0, -15]) {\n            // Leg\n            color(\"darkslategray\")\n            rotate([30, 0, 0])\n            cylinder(h=12, r=3);\n            \n            // Foot base\n            translate([0, 10, -8])\n            color(\"darkslateblue\")\n            sphere(r=4);\n            \n            // Claws\n            for(angle = [0:120:240]) {\n                rotate([0, 0, angle])\n                translate([0, 12, -8])\n                rotate([45, 0, 0])\n                color(\"dimgray\")\n                cylinder(h=5, r=1, r2=0.5);\n            }\n        }\n    }\n}\n\n// Magical twilight aura\nmodule aura() {\n    difference() {\n        color(\"purple\", 0.2)\n        translate([0, 0, 15])\n        sphere(r=35);\n        \n        color(\"purple\", 0)\n        translate([0, 0, 15])\n        sphere(r=30);\n    }\n}\n\n// Assemble the complete duskglen\nunion() {\n    aura();\n    duskglen_body();\n    wing(1);    // Right wing\n    wing(-1);   // Left wing\n    head();\n    tail();\n    feet();\n}",
    "renders": true
  },
  {
    "mythical_creature": "emberglow",
    "openscad_code": "// Emberglow - a fiery phoenix-dragon hybrid\n// Realistic style, medium complexity\n// Dimensions: ~80mm wingspan x 60mm height x 40mm depth\n\n// Main color scheme\ncolor([0.9, 0.35, 0.1]) {  // Fiery orange-red\n\n// Body core - central flame orb\ntranslate([0, 0, 25]) \n    sphere(d=25, $fn=32);\n\n// Torso segments\nfor(i=[0:3]) {\n    translate([0, 0, 15+i*5])\n        rotate([0, 0, i*20])\n        scale([1-i*0.15, 1-i*0.15, 0.8])\n        sphere(d=20-i*3, $fn=24);\n}\n\n// Neck\ntranslate([0, 12, 35])\n    rotate([60, 0, 0])\n    cylinder(h=20, d1=12, d2=8, $fn=16);\n\n// Head\ntranslate([0, 22, 48])\n    sphere(d=15, $fn=32);\n\n// Snout\ntranslate([0, 30, 48])\n    rotate([15, 0, 0])\n    cylinder(h=12, d1=12, d2=6, $fn=12);\n\n// Horns\nfor(side=[-1, 1]) {\n    translate([side*5, 20, 55])\n        rotate([0, side*30, 0])\n        cylinder(h=15, d1=4, d2=2, $fn=8);\n    \n    translate([side*3, 20, 55])\n        rotate([0, side*45, 0])\n        cylinder(h=12, d1=3, d2=1, $fn=8);\n}\n\n// Eyes\nfor(side=[-1, 1]) {\n    difference() {\n        translate([side*5, 25, 50])\n            sphere(d=3, $fn=16);\n        translate([side*6, 26.5, 51])\n            sphere(d=2, $fn=16);\n    }\n}\n\n// Wings\nmodule wing() {\n    color([1, 0.4, 0.15]) {\n        // Main wing surface\n        translate([0, 0, 0])\n            rotate([0, 0, -10])\n            linear_extrude(height=1.5)\n                polygon(points=[\n                    [0,0], [30,0], [35,10], [32,25], [25,35],\n                    [15,40], [5,38], [0,30], [-2,20], [-1,10]\n                ]);\n        \n        // Wing bones\n        for(i=[0:3]) {\n            translate([0, 0, 1.6])\n                rotate([0, 0, i*25-30])\n                cylinder(h=38-i*5, d1=3-i*0.5, d2=1, $fn=6);\n        }\n    }\n}\n\n// Left wing\ntranslate([-12, 5, 30])\n    rotate([0, 0, 90])\n    wing();\n\n// Right wing\ntranslate([12, 5, 30])\n    mirror([1, 0, 0])\n    rotate([0, 0, 90])\n    wing();\n\n// Tail\ncolor([0.8, 0.3, 0.1]) {\n    for(i=[0:4]) {\n        translate([0, -15-i*5, 20-i*3])\n            rotate([0, 0, i*15])\n            scale([1-i*0.15, 1-i*0.15, 1])\n            sphere(d=15-i*2.5, $fn=16);\n    }\n}\n\n// Legs\nmodule leg(side) {\n    translate([side*6, 0, 0])\n        rotate([0, side*10, 0])\n        cylinder(h=15, d1=6, d2=4, $fn=12);\n    \n    translate([side*8, 0, -7])\n        rotate([0, side*10, 0])\n        cylinder(h=8, d1=4, d2=6, $fn=12);\n    \n    // Claws\n    for(claw=[-1, 0, 1]) {\n        translate([side*8+claw*2, 0, -14])\n            rotate([0, 90, 0])\n            cylinder(h=4, d1=2, d2=0.5, $fn=8);\n    }\n}\n\nleg(1);\nleg(-1);\n\n// Flame aura\ncolor([1, 0.6, 0.2]) {\n    for(angle=[0:30:330]) {\n        translate([0, 0, 30])\n            rotate([0, 0, angle])\n            translate([18, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=8+sin(angle)*3, d1=4, d2=1, $fn=8);\n    }\n}\n\n// Chest crystal\ncolor([1, 0.9, 0.5]) {\n    translate([0, 5, 30])\n        rotate([0, 45, 45])\n        cube([8, 8, 8], center=true);\n}\n\n} // End main color",
    "renders": true
  },
  {
    "mythical_creature": "frostwisp",
    "openscad_code": "// Frostwisp - Mythical Ice Spirit\n// A translucent, ethereal creature of living frost\n\n// Overall dimensions: ~80mm tall x 60mm wide x 50mm deep\n\n// Body segments\nmodule body_segment(h, r) {\n    color(\"LightBlue\", 0.6)\n    difference() {\n        sphere(r);\n        translate([0, 0, -r/2]) cube([r*2, r*2, r], center=true);\n    }\n}\n\n// Main body assembly\nmodule body() {\n    union() {\n        // Head\n        translate([0, 0, 70]) body_segment(15, 12);\n        \n        // Neck\n        translate([0, 0, 60]) body_segment(10, 8);\n        \n        // Torso segments\n        translate([0, 0, 45]) body_segment(15, 18);\n        translate([0, 0, 30]) body_segment(15, 20);\n        translate([0, 0, 15]) body_segment(15, 15);\n        \n        // Tail segments\n        for(i = [1:5]) {\n            translate([0, -i*12, 15-i*5]) body_segment(8-i, 10-i*1.5);\n        }\n    }\n}\n\n// Frost wings\nmodule frost_wing() {\n    color(\"LightCyan\", 0.5)\n    union() {\n        // Main wing structure\n        translate([0, 0, 0]) scale([1, 3, 0.5]) sphere(10);\n        \n        // Wing tip crystals\n        for(i = [0:3]) {\n            rotate([0, 0, i*25]) \n            translate([15+i*3, 25+i*5, 0])\n            rotate([90, 0, 0]) cylinder(h=5+i*2, r1=2, r2=0.5);\n        }\n        \n        // Frost veins\n        for(i = [0:5]) {\n            rotate([0, 0, i*20])\n            translate([5+i, 15, 0])\n            scale([1, 0.2, 0.1]) sphere(3);\n        }\n    }\n}\n\n// Horn cluster\nmodule frost_horns() {\n    color(\"White\", 0.8)\n    union() {\n        // Central horn\n        translate([0, 0, 5]) rotate([0, 0, 0])\n        cylinder(h=15, r1=3, r2=1);\n        \n        // Side horns\n        for(i = [-1:1]) {\n            if(i != 0) {\n                translate([i*5, -2, 3]) rotate([10*i, 0, 0])\n                cylinder(h=12, r1=2, r2=0.5);\n            }\n        }\n        \n        // Crystal growths\n        for(i = [0:3]) {\n            rotate([0, 0, i*90]) \n            translate([4, 0, 10])\n            sphere(2);\n        }\n    }\n}\n\n// Legs\nmodule leg(side) {\n    color(\"LightBlue\", 0.7)\n    translate([side*8, -5, 0]) {\n        // Upper leg\n        rotate([0, -20*side, 0])\n        cylinder(h=15, r1=4, r2=3);\n        \n        // Lower leg\n        translate([0, -10, -15]) rotate([0, 20*side, 0])\n        cylinder(h=12, r1=3, r2=2);\n        \n        // Foot\n        translate([0, -8, -27])\n        scale([1, 2, 0.5]) sphere(3);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(\"DeepSkyBlue\", 0.9)\n    union() {\n        translate([-4, 8, 70]) sphere(2);\n        translate([4, 8, 70]) sphere(2);\n    }\n}\n\n// Frost aura particles\nmodule frost_particles() {\n    color(\"White\", 0.4)\n    for(i = [0:20]) {\n        rotate([rand(i)*360, rand(i+1)*360, rand(i+2)*360])\n        translate([rand(i+3)*40-20, rand(i+4)*40-20, rand(i+5)*60])\n        sphere(rand(i+6)*2+1);\n    }\n}\n\n// Assemble the creature\nunion() {\n    // Main body\n    body();\n    \n    // Wings\n    translate([20, 0, 55]) rotate([0, 0, 15]) frost_wing();\n    translate([-20, 0, 55]) rotate([0, 0, -15]) mirror([1, 0, 0]) frost_wing();\n    \n    // Horns\n    translate([0, 10, 80]) frost_horns();\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Eyes\n    eyes();\n    \n    // Frost aura\n    frost_particles();\n}",
    "renders": true
  },
  {
    "mythical_creature": "galewhisper",
    "openscad_code": "// Galewhisper - mythical wind spirit creature\n// 3D printable model with realistic features\n\n$fn = 32;\n\nmodule horn() {\n    union() {\n        cylinder(h=8, d1=3, d2=1);\n        translate([0,0,8]) sphere(d=2);\n    }\n}\n\nmodule feather() {\n    difference() {\n        hull() {\n            sphere(d=2);\n            translate([0,0,6]) sphere(d=1);\n        }\n        translate([0,0,3]) rotate([0,90,0]) cylinder(h=8, d=0.5);\n    }\n}\n\nmodule wing() {\n    union() {\n        // Main wing structure\n        color([0.8, 0.8, 0.9]) {\n            translate([0,0,5]) rotate([0,-10,0]) scale([1,0.3,0.1])\n                cube([25, 15, 2], center=true);\n        }\n        \n        // Feathers\n        color([0.9, 0.9, 1]) {\n            for(i=[0:3]) {\n                translate([5+i*5, 0, 5-i*2]) rotate([0,0,i*5]) scale([1,1-i*0.1,1])\n                    feather();\n            }\n            for(i=[0:2]) {\n                translate([8+i*6, 0, 2-i*2]) rotate([0,0,-i*5]) scale([0.8,0.8,0.8])\n                    feather();\n            }\n        }\n    }\n}\n\nmodule tail() {\n    union() {\n        // Main tail\n        color([0.7, 0.7, 0.8]) {\n            hull() {\n                sphere(d=4);\n                translate([0,-20,0]) sphere(d=2);\n            }\n        }\n        \n        // Tail feathers\n        color([0.85, 0.85, 0.95]) {\n            for(i=[0:4]) {\n                rotate([0,0,i*30-60]) translate([0,-10-i*2,0]) scale([0.6,0.6,0.6])\n                    feather();\n            }\n        }\n    }\n}\n\nmodule body() {\n    color([0.75, 0.75, 0.85]) {\n        union() {\n            // Torso\n            scale([1.2,1,1]) sphere(d=20);\n            \n            // Neck\n            translate([0,8,8]) rotate([-30,0,0]) scale([0.6,0.6,0.8])\n                cylinder(h=10, d=8);\n                \n            // Head\n            translate([0,10,15]) scale([0.8,0.7,1])\n                sphere(d=12);\n        }\n    }\n}\n\nmodule legs() {\n    color([0.6, 0.6, 0.7]) {\n        for(side=[-1,1]) {\n            translate([side*6, -5, -8]) {\n                union() {\n                    // Upper leg\n                    rotate([30,0,side*10]) cylinder(h=8, d=4);\n                    \n                    // Lower leg\n                    translate([0,-6,-4]) rotate([60,0,0]) cylinder(h=8, d=3);\n                    \n                    // Paw\n                    translate([0,-10,-8]) sphere(d=4);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Wings\n    translate([0,2,3]) {\n        rotate([0,0,45]) wing();\n        mirror([1,0,0]) rotate([0,0,45]) wing();\n    }\n    \n    // Tail\n    translate([0,-12,0]) rotate([0,15,0]) tail();\n    \n    // Legs\n    legs();\n    \n    // Horns\n    color([0.9, 0.85, 0.8]) {\n        translate([3,8,20]) rotate([0,-15,30]) horn();\n        translate([-3,8,20]) rotate([0,-15,-30]) horn();\n    }\n    \n    // Eyes\n    color([0.2, 0.3, 0.8]) {\n        translate([3,12,16]) sphere(d=2);\n        translate([-3,12,16]) sphere(d=2);\n    }\n}\n\n// Wind aura effect (subtle)\ncolor([0.9, 0.9, 1, 0.3]) {\n    translate([0,0,-5]) sphere(d=30);\n    translate([0,0,-8]) sphere(d=25);\n}",
    "renders": true
  },
  {
    "mythical_creature": "geodite",
    "openscad_code": "// Geodite Dragon Hatchling - Medium complexity realistic style\n// Size: ~80mm wingspan, 3D printable with no overhangs\n\n$fn=32;\n\n// Colors\ncolor_geodite = \"#8B7355\";\ncolor_crystal = \"#7DF9FF\";\ncolor_eyes = \"#FF4500\";\n\n// Main body\nmodule body() {\n    color(color_geodite)\n    union() {\n        // Torso - slightly angled for printability\n        translate([0, 0, 15])\n        rotate([0, 15, 0])\n        scale([1.2, 0.8, 1])\n        sphere(20);\n        \n        // Belly plate\n        difference() {\n            translate([0, 0, 5])\n            scale([1.4, 1, 0.5])\n            sphere(15);\n            \n            translate([0, 5, 5])\n            scale([1.3, 0.8, 0.6])\n            sphere(15);\n        }\n    }\n}\n\n// Crystal growths on back\nmodule crystals() {\n    color(color_crystal)\n    for(i=[-30:20:30]) {\n        translate([i*0.7, -8, 28+i*0.3])\n        rotate([0, 90, i*2])\n        scale([0.3+abs(i)/100, 0.3+abs(i)/100, 1])\n        cylinder(h=8+abs(i)/5, r1=3, r2=0.5);\n    }\n}\n\n// Head with snout\nmodule head() {\n    color(color_geodite)\n    union() {\n        // Main head\n        translate([0, 30, 25])\n        rotate([0, -20, 0])\n        scale([0.8, 1.2, 0.9])\n        sphere(15);\n        \n        // Snout\n        translate([0, 45, 22])\n        rotate([0, -20, 0])\n        scale([0.6, 1.5, 0.6])\n        cylinder(h=12, r1=8, r2=5);\n        \n        // Nostrils\n        difference() {\n            translate([0, 45, 22])\n            rotate([0, -20, 0])\n            scale([0.6, 1.5, 0.6])\n            cylinder(h=12, r1=8, r2=5);\n            \n            for(x=[-3, 3]) {\n                translate([x, 52, 20])\n                rotate([90, 0, 0])\n                cylinder(h=5, r=1.5);\n            }\n        }\n    }\n}\n\n// Eyes with crystal glow\nmodule eyes() {\n    color(color_eyes)\n    for(x=[-7, 7]) {\n        translate([x, 38, 28])\n        sphere(3);\n        \n        // Crystal iris\n        color(color_crystal)\n        translate([x+0.5, 39, 29])\n        scale([1, 1, 0.5])\n        sphere(2);\n    }\n}\n\n// Wings - folded for printing\nmodule wings() {\n    color(color_geodite)\n    for(side=[-1, 1]) {\n        translate([side*25, 10, 35])\n        rotate([0, side*20, 0])\n        difference() {\n            // Wing membrane\n            scale([1, 1.5, 0.3])\n            sphere(15);\n            \n            // Wing holes for geodite pattern\n            for(i=[0:3]) {\n                for(j=[0:2]) {\n                    translate([side*(5+i*5), 15+j*5, 2])\n                    sphere(2);\n                }\n            }\n        }\n        \n        // Wing fingers\n        for(i=[0:3]) {\n            translate([side*(20+i*5), 10+i*2, 35-i*2])\n            rotate([0, side*(20-i*5), 0])\n            scale([0.4, 0.4, 1])\n            cylinder(h=15, r=2);\n        }\n    }\n}\n\n// Legs - crouched position\nmodule legs() {\n    color(color_geodite)\n    for(side=[-1, 1]) {\n        // Upper leg\n        translate([side*12, 5, 10])\n        rotate([0, side*15, 0])\n        scale([0.8, 0.8, 1.5])\n        cylinder(h=15, r=5);\n        \n        // Lower leg\n        translate([side*15, 0, 0])\n        rotate([0, side*30, 0])\n        scale([0.7, 0.7, 1.2])\n        cylinder(h=12, r=4);\n        \n        // Foot\n        translate([side*17, -5, -5])\n        rotate([0, 0, 0])\n        scale([1.5, 0.8, 0.5])\n        sphere(5);\n    }\n}\n\n// Tail with crystal segments\nmodule tail() {\n    color(color_geodite)\n    union() {\n        for(i=[0:4]) {\n            translate([0, -20-i*10, 20-i*3])\n            rotate([0, 0, i*5])\n            scale([1-i*0.1, 1-i*0.1, 1-i*0.1])\n            sphere(12-i*2);\n            \n            // Crystal spikes\n            if(i%2==0) {\n                color(color_crystal)\n                translate([0, -20-i*10, 25-i*3])\n                rotate([0, 0, 0])\n                cylinder(h=5+i, r1=2, r2=0.5);\n            }\n        }\n    }\n}\n\n// Assemble the geodite dragon\nunion() {\n    body();\n    crystals();\n    head();\n    eyes();\n    wings();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "mythical_creature": "hollowshade",
    "openscad_code": "// Hollowshade Dragon - Medium complexity realistic style\n// A shadowy dragon with hollow wings and glowing accents\n\n// Overall dimensions: ~80mm wingspan, 50mm length\n\n// Wall thickness for 3D printing\nwall = 1.2;\n\n// Main body module\nmodule dragon_body() {\n    color(\"darkslategray\") {\n        // Central body - elongated egg shape\n        difference() {\n            scale([1.2, 0.8, 1]) sphere(d=20);\n            scale([1.1, 0.7, 0.9]) sphere(d=20);\n        }\n        \n        // Neck\n        translate([0, 10, 5]) rotate([0, -20, 0]) {\n            difference() {\n                cylinder(h=15, d1=12, d2=8);\n                cylinder(h=15, d1=12-wall*2, d2=8-wall*2);\n            }\n        }\n        \n        // Tail\n        translate([0, -12, -2]) rotate([0, 10, 0]) {\n            difference() {\n                cylinder(h=25, d1=12, d2=6);\n                cylinder(h=25, d1=12-wall*2, d2=6-wall*2);\n            }\n        }\n    }\n}\n\n// Head module\nmodule dragon_head() {\n    color(\"darkslategray\") {\n        translate([0, 25, 8]) rotate([0, -30, 0]) {\n            difference() {\n                // Main head shape\n                scale([0.8, 1.2, 0.9]) sphere(d=15);\n                scale([0.7, 1.1, 0.8]) sphere(d=15);\n                \n                // Eye sockets\n                translate([4, 3, 2]) sphere(d=3);\n                translate([-4, 3, 2]) sphere(d=3);\n            }\n            \n            // Snout\n            translate([0, 7, -2]) {\n                difference() {\n                    scale([0.8, 1.5, 0.6]) sphere(d=10);\n                    scale([0.7, 1.4, 0.5]) sphere(d=10);\n                }\n            }\n            \n            // Horns\n            color(\"dimgray\") {\n                translate([3, -2, 8]) rotate([0, -20, 20]) \n                    cylinder(h=12, d1=4, d2=2);\n                translate([-3, -2, 8]) rotate([0, -20, -20]) \n                    cylinder(h=12, d1=4, d2=2);\n            }\n        }\n    }\n}\n\n// Wing module\nmodule wing(side) {\n    // side: 1 for right, -1 for left\n    color(\"darkslategray\", 0.7) {\n        translate([side * 15, 0, 5]) rotate([0, 0, side * -10]) {\n            // Main wing membrane\n            difference() {\n                // Outer wing shape\n                linear_extrude(height=wall) {\n                    polygon(points=[\n                        [0, 0],\n                        [side * 30, -5],\n                        [side * 35, 10],\n                        [side * 25, 25],\n                        [side * 10, 20],\n                        [0, 5]\n                    ]);\n                }\n                \n                // Inner cutouts for hollow effect\n                for(i=[1:3]) {\n                    translate([side * (10 + i*6), 10, -1]) \n                        scale([0.8, 0.8, 1]) \n                        circle(d=8);\n                }\n            }\n            \n            // Wing bones\n            color(\"dimgray\") {\n                for(i=[0:2]) {\n                    rotate([0, 0, side * (20 + i*15)]) {\n                        translate([0, 0, wall/2]) \n                            cube([20 + i*5, wall, wall]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    color(\"darkslategray\") {\n        for(side=[-1, 1]) {\n            // Front legs\n            translate([side * 8, 8, -5]) {\n                difference() {\n                    cylinder(h=12, d=5);\n                    cylinder(h=12, d=5-wall*2);\n                }\n                translate([0, 0, -6]) {\n                    difference() {\n                        sphere(d=6);\n                        sphere(d=6-wall*2);\n                    }\n                }\n            }\n            \n            // Back legs\n            translate([side * 6, -8, -5]) {\n                difference() {\n                    cylinder(h=15, d=6);\n                    cylinder(h=15, d=6-wall*2);\n                }\n                translate([0, 0, -7.5]) {\n                    difference() {\n                        sphere(d=7);\n                        sphere(d=7-wall*2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Glowing accents\nmodule glowing_accents() {\n    color(\"darkviolet\", 0.8) {\n        // Eye glow\n        translate([4, 28, 10]) sphere(d=2);\n        translate([-4, 28, 10]) sphere(d=2);\n        \n        // Wing edge glow\n        for(side=[-1, 1]) {\n            translate([side * 30, 10, 5 + wall/2]) \n                cylinder(h=wall, d=3);\n        }\n        \n        // Tail tip glow\n        translate([0, -35, -5]) sphere(d=3);\n    }\n}\n\n// Assembly\nunion() {\n    dragon_body();\n    dragon_head();\n    wing(1);  // Right wing\n    wing(-1); // Left wing\n    legs();\n    glowing_accents();\n}",
    "renders": true
  },
  {
    "mythical_creature": "icesylph",
    "openscad_code": "// Icesylph - A mythical ice elemental creature\n// Realistic style, medium complexity\n\n// Colors\ncolor_ice = [0.9, 0.95, 1.0];\ncolor_frost = [0.8, 0.9, 1.0];\ncolor_crystal = [0.7, 0.9, 1.0];\n\n// Main module\nmodule icesylph() {\n    union() {\n        // Body\n        color(color_ice)\n        translate([0, 0, 5])\n        scale([1, 0.6, 1.5])\n        sphere(8, $fn=32);\n        \n        // Head\n        color(color_frost)\n        translate([0, 0, 20])\n        scale([0.8, 0.7, 1])\n        sphere(6, $fn=32);\n        \n        // Snout\n        color(color_frost)\n        translate([0, 7, 19])\n        scale([0.6, 0.8, 0.4])\n        rotate([20, 0, 0])\n        cylinder(h=5, r=2, $fn=16);\n        \n        // Eyes (glowing crystal orbs)\n        for(side = [-1, 1]) {\n            color(color_crystal)\n            translate([side * 2.5, 5, 22])\n            scale([0.8, 0.8, 0.5])\n            sphere(1.5, $fn=16);\n        }\n        \n        // Horns (ice crystal formations)\n        for(side = [-1, 1]) {\n            color(color_crystal)\n            translate([side * 3, 3, 25])\n            rotate([0, -20, side * 30])\n            cylinder(h=8, r1=1.5, r2=0.5, $fn=8);\n            \n            // Horn branches\n            translate([side * 3.5, 3.5, 28])\n            rotate([20, 0, side * 45])\n            cylinder(h=4, r1=1, r2=0.3, $fn=8);\n        }\n        \n        // Wings (membranous ice formations)\n        wing_module(1);\n        wing_module(-1);\n        \n        // Tail (segmented ice tail)\n        color(color_frost)\n        for(i = [0:4]) {\n            translate([0, -6 - i * 3, 5 - i * 1.5])\n            scale([1 - i * 0.15, 1 - i * 0.15, 1])\n            rotate([0, 0, sin(i * 20) * 15])\n            sphere(4 - i * 0.5, $fn=24);\n        }\n        \n        // Frost patterns on body\n        frost_patterns();\n        \n        // Legs\n        leg_module(1);\n        leg_module(-1);\n    }\n}\n\n// Wing module\nmodule wing_module(side) {\n    color(color_ice)\n    translate([side * 8, 0, 15])\n    rotate([0, 0, side * 20])\n    rotate([0, -30, 0])\n    scale([side, 1, 1])\n    \n    difference() {\n        union() {\n            // Main wing membrane\n            translate([0, 0, 0])\n            scale([1, 0.8, 0.1])\n            sphere([15, 12, 1], $fn=32);\n            \n            // Wing fingers (ice spars)\n            for(i = [0:3]) {\n                translate([i * 4, 0, 0])\n                rotate([0, 0, -i * 20])\n                cylinder(h=12 - i * 2, r=0.8, $fn=8);\n            }\n        }\n        \n        // Cut wing shape\n        translate([-5, -8, -2])\n        cube([25, 20, 4]);\n    }\n}\n\n// Leg module\nmodule leg_module(side) {\n    color(color_frost)\n    translate([side * 4, 0, 0])\n    \n    union() {\n        // Upper leg\n        translate([side * 2, -2, 2])\n        rotate([0, side * 15, 0])\n        cylinder(h=6, r=1.5, $fn=16);\n        \n        // Lower leg\n        translate([side * 3, -4, -1])\n        rotate([0, side * 30, 0])\n        cylinder(h=5, r=1.2, $fn=16);\n        \n        // Paw\n        translate([side * 3.5, -5, -4])\n        sphere(1.8, $fn=16);\n        \n        // Toes\n        for(toe = [-1, 0, 1]) {\n            translate([side * 3.5 + toe * 0.8, -6, -4])\n            rotate([0, toe * 10, 0])\n            cylinder(h=2, r=0.5, $fn=8);\n        }\n    }\n}\n\n// Frost patterns module\nmodule frost_patterns() {\n    color(color_crystal)\n    for(i = [0:11]) {\n        angle = i * 30;\n        radius = 7 + sin(i * 45) * 1.5;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            5 + sin(i * 25) * 3\n        ])\n        scale([0.5, 0.5, 0.1])\n        sphere(1, $fn=6);\n    }\n}\n\n// Create the icesylph scaled for 3D printing\nscale([1, 1, 1])\nicesylph();",
    "renders": true
  },
  {
    "mythical_creature": "kindlekin",
    "openscad_code": "// Kindlekin - a fire elemental lizard creature from myth\n// Medium complexity realistic style with 3D printing considerations\n\n// Color definitions\nkindle_orange = \"#FF6600\";\nkindle_red = \"#CC0000\";\nkindle_yellow = \"#FFFF00\";\nkindle_black = \"#222222\";\n\n// Main body module\nmodule kindlekin_body() {\n    color(kindle_orange) {\n        // Main torso - elongated teardrop shape\n        hull() {\n            translate([0, 0, 8]) sphere(d=12, $fn=16);\n            translate([0, 0, 2]) sphere(d=18, $fn=16);\n            translate([0, 0, -2]) sphere(d=15, $fn=16);\n        }\n        \n        // Chest scales - overlapping plates\n        for(i = [0:3]) {\n            translate([0, 6-i*2, 5-i*1.5]) \n                rotate([90, 0, 0])\n                scale([1, 0.8, 0.3])\n                sphere(d=8, $fn=6);\n        }\n    }\n}\n\n// Head module\nmodule kindlekin_head() {\n    color(kindle_orange) {\n        // Main head shape\n        translate([0, 18, 8]) {\n            rotate([0, 0, 30]) {\n                scale([1.2, 1, 0.8]) sphere(d=12, $fn=16);\n            }\n            \n            // Snout\n            translate([0, 6, 0]) \n                scale([0.8, 1.5, 0.6]) \n                sphere(d=8, $fn=16);\n        }\n        \n        // Eyes\n        color(kindle_red) {\n            translate([3, 20, 9]) sphere(d=2, $fn=8);\n            translate([-3, 20, 9]) sphere(d=2, $fn=8);\n        }\n        \n        // Nostril slits\n        color(kindle_black) {\n            translate([1.5, 24, 8]) {\n                rotate([90, 0, 0]) cylinder(h=2, d1=1, d2=0.5);\n            }\n            translate([-1.5, 24, 8]) {\n                rotate([90, 0, 0]) cylinder(h=2, d1=1, d2=0.5);\n            }\n        }\n    }\n}\n\n// Horn module\nmodule kindlekin_horns() {\n    color(kindle_red) {\n        // Left horn\n        translate([5, 15, 14]) {\n            rotate([0, 20, 15]) {\n                cylinder(h=10, d1=3, d2=1, $fn=8);\n                translate([0, 0, 9]) sphere(d=1.5, $fn=6);\n            }\n        }\n        \n        // Right horn\n        translate([-5, 15, 14]) {\n            rotate([0, 20, -15]) {\n                cylinder(h=10, d1=3, d2=1, $fn=8);\n                translate([0, 0, 9]) sphere(d=1.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Tail module\nmodule kindlekin_tail() {\n    color(kindle_orange) {\n        // Base of tail\n        translate([0, -12, 2]) {\n            rotate([45, 0, 0]) {\n                cylinder(h=20, d1=10, d2=4, $fn=16);\n                \n                // Tail segments\n                for(i = [1:3]) {\n                    translate([0, -i*6, -i*3]) {\n                        rotate([i*10, 0, 0]) {\n                            scale([1-i*0.1, 1-i*0.1, 1-i*0.1])\n                            cylinder(h=6, d1=10-i*2, d2=8-i*2, $fn=16);\n                        }\n                    }\n                }\n                \n                // Tail tip\n                translate([0, -22, -12]) {\n                    sphere(d=3, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Wing module\nmodule kindlekin_wing(side=1) {\n    color([1, 0.3, 0, 0.8]) {  // Semi-transparent orange\n        mirror([side, 0, 0]) {\n            translate([8, 0, 10]) {\n                rotate([0, -20, 20]) {\n                    // Main wing structure\n                    difference() {\n                        scale([1, 2.5, 0.2]) sphere(d=12, $fn=16);\n                        \n                        // Wing membrane cutouts\n                        for(i = [1:3]) {\n                            translate([0, -i*3, 0]) {\n                                scale([0.8-i*0.1, 0.3, 1]) \n                                sphere(d=8-i*2, $fn=8);\n                            }\n                        }\n                    }\n                    \n                    // Wing bones\n                    color(kindle_red) {\n                        for(i = [0:2]) {\n                            rotate([0, 0, i*30]) {\n                                translate([0, -i*2, 0]) {\n                                    cylinder(h=10, d1=0.8, d2=0.3);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leg module\nmodule kindlekin_leg(side=1, front=1) {\n    color(kindle_orange) {\n        translate([side*6, front*10, 0]) {\n            // Upper leg\n            rotate([0, 20*side, 0]) {\n                cylinder(h=8, d1=4, d2=3, $fn=8);\n                \n                // Lower leg\n                translate([0, 0, -8]) {\n                    rotate([30, 0, 0]) {\n                        cylinder(h=6, d1=3, d2=2, $fn=8);\n                        \n                        // Foot\n                        translate([0, 0, -6]) {\n                            rotate([0, 0, 45*side]) {\n                                scale([2, 0.8, 0.5]) \n                                sphere(d=3, $fn=6);\n                                \n                                // Toes\n                                for(i = [-1:1]) {\n                                    translate([i*0.8, 1.5*side, 0]) {\n                                        cylinder(h=1.5, d=0.8, $fn=6);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Fire breath effect\nmodule kindlekin_fire_breath() {\n    color(kindle_yellow) {\n        translate([0, 28, 8]) {\n            rotate([0, -30, 0]) {\n                for(i = [1:5]) {\n                    translate([0, i*2, 0]) {\n                        scale([1-i*0.15, 1-i*0.15, 1-i*0.15]) {\n                            sphere(d=3, $fn=8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Scale texture module\nmodule scale_texture(base_pos=[0,0,0], radius=8, count=12) {\n    color(kindle_red) {\n        for(i = [0:count-1]) {\n            angle = i * 360 / count;\n            translate([\n                base_pos[0] + cos(angle) * radius * 0.8,\n                base_pos[1] + sin(angle) * radius * 0.8,\n                base_pos[2]\n            ]) {\n                rotate([0, 0, angle]) {\n                    scale([0.3, 0.5, 0.1]) \n                    sphere(d=2, $fn=5);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the complete Kindlekin\nmodule kindlekin() {\n    scale([1.2, 1.2, 1.2]) {\n        kindlekin_body();\n        kindlekin_head();\n        kindlekin_horns();\n        kindlekin_tail();\n        \n        // Wings\n        kindlekin_wing(1);\n        kindlekin_wing(-1);\n        \n        // Legs\n        kindlekin_leg(1, 1);   // Front right\n        kindlekin_leg(-1, 1);  // Front left\n        kindlekin_leg(1, -1);  // Back right\n        kindlekin_leg(-1, -1); // Back left\n        \n        // Fire breath\n        kindlekin_fire_breath();\n        \n        // Scale texture on body\n        scale_texture([0, 0, 6], 6, 8);\n        scale_texture([0, 0, 3], 7, 10);\n        scale_texture([0, 0, 0], 6, 8);\n    }\n}\n\n// Render the creature\nkindlekin();",
    "renders": true
  },
  {
    "mythical_creature": "lavaspark",
    "openscad_code": "// Lavaspark - A mythical fire elemental creature\n// 75mm tall, designed for 3D printing with minimal overhangs\n\n// Main body parameters\nbody_height = 30;\nbody_width = 25;\nbody_depth = 20;\n\n// Head parameters\nhead_radius = 12;\n\n// Wing parameters\nwing_length = 35;\nwing_width = 20;\n\n// Tail segments\ntail_segments = 5;\ntail_length = 40;\n\n// Colors\nlava_color = [0.8, 0.2, 0];      // Deep red-orange\nember_color = [1, 0.4, 0];      // Bright orange\ncore_color = [1, 0.8, 0];       // Yellow-white hot core\n\nmodule lavaspark() {\n    union() {\n        // Main molten body\n        color(lava_color)\n        translate([0, 0, 15])\n        scale([1, 0.8, 1.2])\n        sphere(d=body_height);\n        \n        // Inner core glow\n        color(core_color)\n        translate([0, 0, 15])\n        scale([0.7, 0.6, 0.9])\n        sphere(d=body_height * 0.8);\n        \n        // Head with horns\n        translate([0, body_width/2 + 5, body_height - 5]) {\n            // Main head sphere\n            color(lava_color)\n            sphere(d=head_radius * 2);\n            \n            // Inner head glow\n            color(ember_color)\n            scale([0.8, 0.8, 0.8])\n            sphere(d=head_radius * 2);\n            \n            // Horns - two curved back\n            for(i = [-1, 1]) {\n                translate([i * 8, 0, 8]) {\n                    rotate([0, i * 15, 0])\n                    color(lava_color)\n                    cylinder(h=15, r1=3, r2=1);\n                }\n            }\n            \n            // Eyes\n            for(i = [-1, 1]) {\n                translate([i * 5, head_radius - 2, 3]) {\n                    color(core_color)\n                    sphere(d=3);\n                }\n            }\n        }\n        \n        // Wings - flame-shaped\n        for(side = [-1, 1]) {\n            translate([side * (body_width/2 + 5), 0, body_height]) {\n                rotate([0, side * 30, 0])\n                color(ember_color)\n                linear_extrude(height=2)\n                polygon(points=[\n                    [0, 0],\n                    [wing_length * 0.3, wing_width * 0.8],\n                    [wing_length * 0.7, wing_width * 0.6],\n                    [wing_length, wing_width * 0.3],\n                    [wing_length * 0.8, 0],\n                    [wing_length, -wing_width * 0.3],\n                    [wing_length * 0.7, -wing_width * 0.6],\n                    [wing_length * 0.3, -wing_width * 0.8],\n                    [0, 0]\n                ]);\n            }\n        }\n        \n        // Tail - segmented flame\n        color(lava_color)\n        for(i = [0:tail_segments-1]) {\n            t = i / (tail_segments - 1);\n            translate([0, -body_depth/2 - tail_length * t, \n                      body_height * 0.5 - tail_length * t * 0.3]) {\n                scale([1 - t * 0.5, 1 - t * 0.5, 1 - t * 0.5])\n                rotate([0, 0, -t * 45])\n                sphere(d=8);\n            }\n        }\n        \n        // Legs - simple pillars of fire\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * body_width/3, y * body_depth/3, 0]) {\n                    color(ember_color)\n                    cylinder(h=15, r1=4, r2=2);\n                }\n            }\n        }\n        \n        // Back spikes\n        for(i = [0:4]) {\n            x = (i - 2) * 5;\n            translate([x, 0, body_height + 5]) {\n                color(lava_color)\n                rotate([15, 0, 0])\n                cylinder(h=8, r1=2, r2=1);\n            }\n        }\n        \n        // Ground crackle effect base\n        translate([0, 0, -2]) {\n            color(lava_color)\n            scale([1.5, 1.2, 0.5])\n            cylinder(h=4, r=body_width/2);\n            \n            // Crack details\n            for(i = [0:5]) {\n                angle = i * 60;\n                rotate([0, 0, angle])\n                translate([body_width/2 + 5, 0, 0])\n                scale([0.2, 0.5, 1])\n                cube([15, 2, 4]);\n            }\n        }\n    }\n}\n\n// Render the lavaspark\nlavaspark();",
    "renders": true
  },
  {
    "mythical_creature": "mistraldryad",
    "openscad_code": "// MistralDryad - Wind-spirit dryad with crystalline wings and bark textures\n// Scale: 75mm total height\n\n// Colors\ncolor_bark = [101, 67, 33]/255;\ncolor_leaves = [34, 139, 34]/255;\ncolor_wind = [173, 216, 230]/255;\ncolor_moss = [107, 142, 35]/255;\n\n// Main body\nmodule mistraldryad() {\n    union() {\n        // Root pedestal\n        color(color_bark)\n        translate([0,0,-5])\n        cylinder(h=10, r1=18, r2=15, $fn=8);\n        \n        // Female torso\n        color(color_bark)\n        translate([0,0,10])\n        cylinder(h=25, r1=8, r2=12, $fn=12);\n        \n        // Head\n        color(color_bark)\n        translate([0,0,35])\n        sphere(10, $fn=16);\n        \n        // Hair of leaves\n        color(color_leaves)\n        for(i=[0:30:360]) {\n            rotate([0,0,i])\n            translate([0,8,38])\n            rotate([90,0,0])\n            cylinder(h=15, r1=3, r2=1, $fn=6);\n        }\n        \n        // Arms as branches\n        color(color_bark)\n        union() {\n            translate([-12,0,22])\n            rotate([-30,0,-45])\n            cylinder(h=20, r1=4, r2=2, $fn=8);\n            \n            translate([12,0,22])\n            rotate([-30,0,45])\n            cylinder(h=20, r1=4, r2=2, $fn=8);\n        }\n        \n        // Crystalline wind wings\n        color(color_wind)\n        union() {\n            // Left wing\n            translate([-15,0,30])\n            rotate([0,-20,0])\n            difference() {\n                scale([1,2,0.5])\n                sphere(12, $fn=8);\n                translate([0,0,-6])\n                cube([30,30,12], center=true);\n            }\n            \n            // Right wing\n            translate([15,0,30])\n            mirror([1,0,0])\n            rotate([0,-20,0])\n            difference() {\n                scale([1,2,0.5])\n                sphere(12, $fn=8);\n                translate([0,0,-6])\n                cube([30,30,12], center=true);\n            }\n        }\n        \n        // Wind tendrils\n        color(color_wind)\n        for(i=[0:45:315]) {\n            rotate([0,0,i])\n            translate([0,20,28])\n            rotate([45,0,0])\n            cylinder(h=25, r1=1, r2=0.5, $fn=4);\n        }\n        \n        // Bark texture rings\n        color(color_bark)\n        difference() {\n            cylinder(h=25, r1=8, r2=12, $fn=12);\n            for(j=[0:3:25]) {\n                translate([0,0,j])\n                rotate([0,0,j*5])\n                cylinder(h=0.5, r1=7, r2=11, $fn=12);\n            }\n        }\n        \n        // Moss patches\n        color(color_moss)\n        for(k=[0:90:270]) {\n            rotate([0,0,k])\n            translate([6,0,15])\n            sphere(3, $fn=8);\n        }\n    }\n}\n\n// Assembly\nmistraldryad();",
    "renders": true
  },
  {
    "mythical_creature": "mossveil",
    "openscad_code": "// Mossveil - A mythical forest spirit covered in living moss with translucent wings\n// Realistic style, medium complexity\n\n// Parameters for easy scaling\nbase_scale = 0.8;\nbody_height = 60 * base_scale;\nbody_width = 35 * base_scale;\nwing_span = 80 * base_scale;\n\n// Main creature assembly\nmodule mossveil_creature() {\n    union() {\n        // Main body - bulbous moss-covered form\n        color(\"forestgreen\") \n        translate([0, 0, 15])\n        scale([1, 0.8, 1.2])\n        sphere(d=body_width);\n        \n        // Lower body extension\n        color(\"darkgreen\")\n        translate([0, 0, 0])\n        cylinder(h=25 * base_scale, d1=body_width * 0.9, d2=body_width * 0.6);\n        \n        // Head with moss texture\n        color(\"forestgreen\")\n        translate([0, -15 * base_scale, body_height])\n        scale([1.1, 1.3, 0.9])\n        sphere(d=body_width * 0.7);\n        \n        // Eyes - glowing amber orbs\n        color(\"goldenrod\")\n        for(x = [-8, 8]) {\n            translate([x * base_scale, -22 * base_scale, body_height + 5 * base_scale])\n            sphere(d=6 * base_scale);\n        }\n        \n        // Branch-like horns with moss\n        color(\"saddlebrown\")\n        for(angle = [30, -30]) {\n            rotate([0, 0, angle])\n            translate([0, -25 * base_scale, body_height + 8 * base_scale])\n            rotate([angle * 0.7, 0, 0])\n            cylinder(h=20 * base_scale, d1=4 * base_scale, d2=2 * base_scale);\n            \n            color(\"forestgreen\")\n            translate([sin(angle) * 8 * base_scale, -25 * base_scale, body_height + 15 * base_scale])\n            sphere(d=5 * base_scale);\n        }\n        \n        // Translucent wings with vein structure\n        color(\"aquamarine\", 0.4)\n        for(side = [-1, 1]) {\n            translate([side * 15 * base_scale, 0, body_height - 10 * base_scale])\n            rotate([0, side * 20, 0])\n            wing(side);\n        }\n        \n        // Root-like legs\n        color(\"saddlebrown\")\n        for(x = [-12, 0, 12]) {\n            translate([x * base_scale, 0, 0])\n            cylinder(h=15 * base_scale, d1=6 * base_scale, d2=4 * base_scale);\n        }\n        \n        // Moss clusters on body\n        color(\"limegreen\")\n        for(i = [1:8]) {\n            angle = i * 45;\n            radius = body_width * 0.4;\n            translate([cos(angle) * radius, -sin(angle) * radius * 0.8, 20 + i * 3])\n            sphere(d=8 * base_scale);\n        }\n        \n        // Magical spore particles\n        color(\"palegreen\")\n        for(i = [1:20]) {\n            translate([\n                (rands(-25, 25, 1)[0]) * base_scale,\n                (rands(-20, 20, 1)[0]) * base_scale,\n                (rands(10, 50, 1)[0]) * base_scale\n            ])\n            sphere(d=2 * base_scale);\n        }\n    }\n}\n\n// Wing module with membrane structure\nmodule wing(side) {\n    difference() {\n        // Main wing membrane\n        union() {\n            translate([0, 0, 0])\n            scale([1, 1.5, 0.1])\n            sphere(d=wing_span * 0.6);\n            \n            // Wing extension\n            translate([side * 10 * base_scale, -20 * base_scale, 5 * base_scale])\n            rotate([0, 0, side * 15])\n            scale([0.8, 1.2, 0.1])\n            sphere(d=wing_span * 0.4);\n        }\n        \n        // Vein cutouts\n        for(i = [1:3]) {\n            rotate([0, 0, side * i * 20])\n            translate([side * 15 * base_scale, -i * 8 * base_scale, 0])\n            scale([0.05, 1.2, 0.2])\n            cube([wing_span, wing_span * 0.6, 10]);\n        }\n        \n        // Wing edge detail\n        translate([side * 25 * base_scale, -35 * base_scale, 0])\n        scale([0.3, 0.3, 0.1])\n        sphere(d=wing_span * 0.3);\n    }\n}\n\n// Generate the creature centered at origin\nmossveil_creature();",
    "renders": true
  },
  {
    "mythical_creature": "nettlethorn",
    "openscad_code": "// Nettlethorn - A mythical plant-creature hybrid with venomous spines and bioluminescent features\n// Designed for 3D printing - no overhangs beyond 45 degrees\n\n$fn = 32; // Smooth curves for realistic appearance\n\n// Main colors\ncolor_plant = [0.2, 0.4, 0.1]; // Dark forest green\ncolor_spine = [0.3, 0.2, 0.1]; // Brown woody spines\ncolor_glow = [0.1, 0.8, 0.3]; // Bioluminescent green\ncolor_flower = [0.7, 0.1, 0.5]; // Purple bioluminescent flowers\n\n// Overall scaling factor (100mm height)\nscale_factor = 1;\n\nmodule main_body() {\n    color(color_plant)\n    union() {\n        // Central stalk (main trunk)\n        cylinder(h = 80 * scale_factor, r1 = 12 * scale_factor, r2 = 8 * scale_factor, center = false);\n        \n        // Bulbous root base\n        translate([0, 0, -5 * scale_factor])\n            sphere(r = 15 * scale_factor);\n    }\n}\n\nmodule thorn_spine(pos, angle, length) {\n    color(color_spine)\n    translate(pos)\n    rotate([90 + angle, 0, 0])\n    cylinder(h = length, r1 = 1.5 * scale_factor, r2 = 0.5 * scale_factor, center = false);\n}\n\nmodule thorn_cluster(height, count) {\n    for(i = [0:count-1]) {\n        angle = i * 360 / count;\n        radius = 10 * scale_factor + height * 0.1;\n        x_pos = cos(angle) * radius;\n        y_pos = sin(angle) * radius;\n        \n        // Alternating spine lengths for natural look\n        spine_len = 8 * scale_factor + (i % 2) * 3 * scale_factor;\n        \n        thorn_spine([x_pos, y_pos, height], 20 + (i % 3) * 5, spine_len);\n    }\n}\n\nmodule bioluminescent_node(pos) {\n    color(color_glow)\n    translate(pos)\n    sphere(r = 3 * scale_factor);\n    \n    // Inner brighter core\n    color([color_glow[0] + 0.2, color_glow[1] + 0.1, color_glow[2] + 0.1])\n    translate(pos)\n    sphere(r = 1.5 * scale_factor);\n}\n\nmodule flower_cluster(pos) {\n    color(color_flower)\n    translate(pos)\n    union() {\n        // Central flower\n        sphere(r = 4 * scale_factor);\n        \n        // Petals around the flower\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([3 * scale_factor, 0, 0])\n            scale([1, 0.5, 0.3])\n            sphere(r = 2 * scale_factor);\n        }\n    }\n}\n\nmodule leaf_segment(height, angle) {\n    color(color_plant)\n    rotate([0, 0, angle])\n    translate([8 * scale_factor, 0, height])\n    rotate([0, 30, 0])\n    scale([1, 0.3, 0.05])\n    sphere(r = 12 * scale_factor);\n}\n\nmodule vine_tendril(start_height, direction) {\n    color(color_plant)\n    translate([0, 0, start_height])\n    rotate([0, 0, direction * 90])\n    for(i = [0:3]) {\n        translate([i * 5 * scale_factor, sin(i * 30) * 3 * scale_factor, 0])\n        rotate([0, 0, i * 20])\n        cylinder(h = 6 * scale_factor, r = 2 * scale_factor, center = true);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    // Base structure\n    main_body();\n    \n    // Thorns in spiral pattern up the stalk\n    for(level = [10:15:70]) {\n        thorn_cluster(level, 8 + level / 10);\n    }\n    \n    // Bioluminescent nodes\n    bioluminescent_node([0, 0, 75]);\n    bioluminescent_node([8, 8, 60]);\n    bioluminescent_node([-8, -8, 45]);\n    \n    // Flower clusters at top\n    flower_cluster([0, 0, 80]);\n    flower_cluster([6, 6, 78]);\n    flower_cluster([-6, -6, 78]);\n    \n    // Leaf segments\n    for(i = [0:3]) {\n        height = 25 + i * 15;\n        leaf_segment(height, i * 90);\n        leaf_segment(height + 5, i * 90 + 45);\n    }\n    \n    // Vine tendrils\n    vine_tendril(30, 1);\n    vine_tendril(40, -1);\n    vine_tendril(50, 0.5);\n    \n    // Additional small thorns for detail\n    for(i = [0:15]) {\n        angle = i * 24;\n        height = 5 + i * 5;\n        radius = 9 + sin(i * 3) * 2;\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        thorn_spine([x, y, height], 15, 4);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "orchidpixie",
    "openscad_code": "// OrchidPixie - A mythical flower fairy with orchid characteristics\n// Wings, petal dress, antennae, and magical aura\n\n// Main parameters\nscale_factor = 1;\nbody_height = 25 * scale_factor;\nhead_size = 8 * scale_factor;\nwing_span = 30 * scale_factor;\n\n// Petal colors\npetal_color = [0.8, 0.4, 0.9];\nwing_color = [0.9, 0.9, 1.0, 0.7];\nskin_color = [0.9, 0.8, 0.7];\n\n// Head with antennae\nmodule head() {\n    color(skin_color) {\n        translate([0, 0, body_height + head_size/2]) {\n            sphere(head_size);\n            \n            // Eyes\n            translate([-head_size/3, head_size/2, 0]) sphere(1);\n            translate([head_size/3, head_size/2, 0]) sphere(1);\n            \n            // Antennae\n            for(side = [-1, 1]) {\n                translate([side * head_size/2, 0, head_size/2]) {\n                    rotate([0, -30, side * 20]) {\n                        cylinder(h=head_size*1.5, r1=0.5, r2=0.3);\n                        translate([0, 0, head_size*1.5]) sphere(1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Petal dress\nmodule petal_dress() {\n    color(petal_color) {\n        // Main dress body\n        cylinder(h=body_height*0.8, r1=8, r2=12);\n        \n        // Petals around dress\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([9, 0, body_height*0.4]) {\n                    rotate([90, 0, 0]) {\n                        scale([1, 1.5, 0.5]) sphere(4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Arms\nmodule arms() {\n    color(skin_color) {\n        for(side = [-1, 1]) {\n            translate([side * 5, 4, body_height*0.7]) {\n                rotate([0, 0, side * 30]) {\n                    cylinder(h=8, r=1);\n                }\n            }\n        }\n    }\n}\n\n// Wings with orchid patterns\nmodule wings() {\n    color(wing_color) {\n        for(side = [-1, 1]) {\n            translate([side * 6, -2, body_height*0.9]) {\n                rotate([0, side * 30, 0]) {\n                    // Upper wing\n                    translate([0, 0, wing_span/4]) {\n                        scale([1, 2, 0.1]) sphere(wing_span/2);\n                    }\n                    \n                    // Lower wing\n                    translate([0, 0, -wing_span/4]) {\n                        scale([0.7, 1.5, 0.1]) sphere(wing_span/3);\n                    }\n                    \n                    // Wing veins\n                    for(v = [0:30:120]) {\n                        rotate([0, v, 0]) {\n                            translate([0, 0, 0]) {\n                                scale([0.1, wing_span/2, 0.05]) sphere(1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    color(skin_color) {\n        for(side = [-1, 1]) {\n            translate([side * 3, 0, 0]) {\n                cylinder(h=10, r=1.5);\n                translate([0, 0, -10]) sphere(2);\n            }\n        }\n    }\n}\n\n// Magical aura particles\nmodule aura() {\n    for(i = [0:8]) {\n        rotate([0, 0, i * 45]) {\n            translate([12, 0, body_height/2 + sin(i*30)*5]) {\n                sphere(0.5);\n            }\n        }\n    }\n}\n\n// Assemble the OrchidPixie\nunion() {\n    // Base stand\n    cylinder(h=2, r=15);\n    \n    // Main body parts\n    translate([0, 0, 2]) {\n        union() {\n            head();\n            petal_dress();\n            arms();\n            wings();\n            legs();\n            aura();\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "pebblekin",
    "openscad_code": "// Pebblekin - a small earth-elemental creature made of living stone\n// Roughly 60mm tall when printed\n\nmodule pebblekin_body() {\n    // Main torso - irregular pebble-like shape using spheres\n    union() {\n        // Central core\n        translate([0, 0, 8]) scale([1.2, 1, 1.1]) sphere(d=25, $fn=20);\n        \n        // Left shoulder bulge\n        translate([-10, 5, 12]) scale([0.8, 0.7, 0.9]) sphere(d=15, $fn=16);\n        \n        // Right shoulder bulge\n        translate([10, 5, 12]) scale([0.8, 0.7, 0.9]) sphere(d=15, $fn=16);\n        \n        // Lower body extension\n        translate([0, -2, 2]) scale([1, 0.9, 1.2]) sphere(d=20, $fn=18);\n    }\n}\n\nmodule pebblekin_head() {\n    // Irregular head shape\n    union() {\n        // Main head sphere\n        translate([0, 0, 22]) scale([0.9, 0.85, 1.1]) sphere(d=20, $fn=20);\n        \n        // Snout protrusion\n        translate([0, 6, 20]) scale([0.5, 0.7, 0.4]) sphere(d=12, $fn=16);\n        \n        // Left eye ridge\n        translate([-5, 3, 25]) sphere(d=6, $fn=12);\n        \n        // Right eye ridge\n        translate([5, 3, 25]) sphere(d=6, $fn=12);\n    }\n}\n\nmodule crystal_cluster(x, y, z) {\n    // Magical crystal growths on back\n    for(i = [0:45:315]) {\n        rotate([0, 0, i]) translate([x, y, z]) {\n            rotate([20, 0, 0]) cylinder(h=8, d1=3, d2=1, $fn=6);\n        }\n    }\n}\n\nmodule pebblekin_legs() {\n    // Left leg\n    translate([-6, -5, 0]) {\n        rotate([10, 0, -5]) cylinder(h=12, d1=10, d2=8, $fn=12);\n        translate([0, 0, -6]) sphere(d=10, $fn=12);\n    }\n    \n    // Right leg\n    translate([6, -5, 0]) {\n        rotate([10, 0, 5]) cylinder(h=12, d1=10, d2=8, $fn=12);\n        translate([0, 0, -6]) sphere(d=10, $fn=12);\n    }\n}\n\nmodule pebblekin_arms() {\n    // Left arm\n    translate([-15, 8, 12]) {\n        rotate([0, 0, -30]) cylinder(h=12, d1=6, d2=5, $fn=10);\n        translate([0, -6, 0]) sphere(d=7, $fn=12);\n    }\n    \n    // Right arm\n    translate([15, 8, 12]) {\n        rotate([0, 0, 30]) cylinder(h=12, d1=6, d2=5, $fn=10);\n        translate([0, -6, 0]) sphere(d=7, $fn=12);\n    }\n}\n\nmodule eyes() {\n    // Glowing crystal eyes\n    color([0.2, 0.8, 1]) {\n        translate([-4, 6, 24]) sphere(d=3, $fn=12);\n        translate([4, 6, 24]) sphere(d=3, $fn=12);\n    }\n}\n\nmodule moss_patches() {\n    // Patches of magical moss\n    color([0.2, 0.5, 0.2]) {\n        // Back moss patch\n        translate([0, -8, 15]) {\n            rotate([90, 0, 0]) cylinder(h=1, d=12, $fn=8);\n        }\n        \n        // Head moss\n        translate([0, 2, 28]) {\n            rotate([90, 0, 0]) cylinder(h=1, d=8, $fn=8);\n        }\n    }\n}\n\nmodule rune_carving() {\n    // Mystical runes carved into stone\n    color([0.3, 0.3, 0.3]) {\n        // Chest rune\n        translate([0, 5, 15]) {\n            rotate([0, 0, 45]) cube([8, 1, 0.5], center=true);\n            rotate([0, 0, -45]) cube([8, 1, 0.5], center=true);\n        }\n        \n        // Forehead rune\n        translate([0, 5, 25]) {\n            cylinder(h=1, d=4, $fn=6);\n        }\n    }\n}\n\n// Main model assembly\ncolor([0.5, 0.45, 0.4]) {\n    pebblekin_body();\n    pebblekin_head();\n    pebblekin_legs();\n    pebblekin_arms();\n}\n\neyes();\nmoss_patches();\nrune_carving();\n\n// Crystal formations on back\ncolor([0.5, 0.7, 1]) {\n    crystal_cluster(0, -10, 18);\n    crystal_cluster(-5, -8, 16);\n    crystal_cluster(5, -8, 16);\n}",
    "renders": true
  },
  {
    "mythical_creature": "quartzflicker",
    "openscad_code": "// Quartzflicker - a crystalline dragon with flickering wings\n// Overall size: ~80mm wingspan, 55mm length\n\n// Color definitions\ncolor_crystal = [0.8,0.9,1];    // icy blue-white crystal\ncolor_glow = [0.5,0.7,1];       // magical glow\ncolor_core = [0.9,0.95,1];      // inner light\n\n// Main body module\nmodule body() {\n    color(color_crystal) {\n        // Central crystal core\n        translate([0,0,15]) \n            scale([1,0.8,1.2]) sphere(d=15, $fn=32);\n        \n        // Thorax segment\n        translate([0,0,8])\n            scale([0.9,0.7,1]) sphere(d=12, $fn=24);\n        \n        // Tail segments in decreasing sizes\n        for(i=[1:5]) {\n            translate([0,0,-i*5-2])\n                scale([1-i*0.15,1-i*0.15,1])\n                sphere(d=10-i*1.5, $fn=20);\n        }\n    }\n}\n\n// Crystal wing module\nmodule wing() {\n    color(color_crystal) \n    difference() {\n        // Main wing blade\n        translate([-5,0,0])\n            rotate([0,0,-20])\n            scale([1,3,0.3]) sphere(d=25, $fn=6);\n        \n        // Wing cutouts for crystal pattern\n        for(i=[1:3]) {\n            translate([-15+i*8,0,0])\n                rotate([0,0,-20])\n                scale([0.3,0.8,0.4]) sphere(d=8, $fn=6);\n        }\n        \n        // Edge notches\n        for(i=[1:4]) {\n            translate([-20+i*5,0,2])\n                rotate([0,0,-20])\n                scale([0.3,0.3,0.4]) cube([5,5,5]);\n        }\n    }\n}\n\n// Head module with crystal horns\nmodule head() {\n    color(color_crystal) {\n        // Main head crystal\n        translate([0,0,25])\n            scale([0.8,0.7,1]) sphere(d=12, $fn=24);\n        \n        // Snout\n        translate([0,0,30])\n            scale([0.5,0.4,0.8]) sphere(d=8, $fn=16);\n        \n        // Crystal horns\n        for(i=[1:3]) {\n            rotate([0,0,i*120])\n            translate([6,0,28])\n                rotate([30,0,0])\n                scale([0.3,0.3,1.2]) cylinder(d1=3,d2=1,h=8, $fn=6);\n        }\n        \n        // Eyes - glowing crystals\n        color(color_glow) {\n            translate([3,4,27]) sphere(d=2, $fn=8);\n            translate([3,-4,27]) sphere(d=2, $fn=8);\n        }\n    }\n}\n\n// Magical flicker effect\nmodule flicker_core() {\n    color(color_glow, 0.7) {\n        translate([0,0,15])\n            sphere(d=8, $fn=16);\n    }\n}\n\n// Leg module\nmodule leg(side=1) {\n    color(color_crystal) {\n        // Upper leg\n        translate([side*4,0,12])\n            rotate([0,side*20,0])\n            cylinder(d=3,h=8, $fn=8);\n        \n        // Lower leg\n        translate([side*6,0,8])\n            rotate([0,side*20,0])\n            cylinder(d=2.5,h=6, $fn=8);\n        \n        // Crystal foot\n        translate([side*7,0,5])\n            scale([1,1.2,0.5]) sphere(d=4, $fn=8);\n    }\n}\n\n// Assemble the Quartzflicker\nunion() {\n    body();\n    head();\n    flicker_core();\n    \n    // Left wing\n    translate([0,8,18])\n        rotate([0,0,45])\n        wing();\n    \n    // Right wing\n    translate([0,-8,18])\n        rotate([0,0,-45])\n        mirror([0,1,0]) wing();\n    \n    // Legs\n    leg(1);\n    leg(-1);\n}",
    "renders": true
  },
  {
    "mythical_creature": "rillwhim",
    "openscad_code": "// Rillwhim - A mythical aquatic dragon-horse hybrid with flowing mane and crystalline fins\n// Size: ~80mm long, 50mm tall when printed\n\n$fn = 32;\n\nmodule rillwhim() {\n    color(\"LightSeaGreen\") {\n        // Main body - streamlined horse-like torso\n        translate([0, 0, 15]) scale([1.2, 0.8, 1]) sphere(12);\n        \n        // Neck - elongated and graceful\n        translate([0, 15, 25]) rotate([15, 0, 0]) scale([0.7, 0.7, 1.5]) cylinder(15, 8, 5);\n        \n        // Head - dragon-like with elongated snout\n        translate([0, 25, 35]) rotate([20, 0, 0]) scale([1.2, 0.8, 0.8]) sphere(8);\n        translate([0, 33, 36]) scale([0.6, 0.4, 0.3]) sphere(6); // Snout extension\n        \n        // Hindquarters\n        translate([0, -15, 15]) scale([1.3, 1, 0.9]) sphere(10);\n        \n        // Tail - serpentine and flowing\n        hull() {\n            translate([0, -25, 18]) sphere(4);\n            translate([0, -35, 20]) sphere(3);\n            translate([0, -45, 22]) sphere(2);\n        }\n    }\n    \n    // Wings - translucent fins with crystalline structure\n    color(\"PaleTurquoise\") difference() {\n        union() {\n            // Left wing\n            translate([-12, 0, 30]) rotate([0, -30, -20]) scale([1, 0.2, 0.8]) sphere(20);\n            // Right wing\n            translate([12, 0, 30]) rotate([0, -30, 20]) scale([1, 0.2, 0.8]) sphere(20);\n            \n            // Wing membranes with hole patterns\n            for(i = [1:3]) {\n                translate([-15-i*3, 0, 28-i*2]) rotate([0, -30, -20]) \n                    scale([0.8-i*0.1, 0.1, 0.6-i*0.1]) sphere(15-i*2);\n                translate([15+i*3, 0, 28-i*2]) rotate([0, -30, 20]) \n                    scale([0.8-i*0.1, 0.1, 0.6-i*0.1]) sphere(15-i*2);\n            }\n        }\n        \n        // Cut holes for membrane effect\n        for(i = [1:5]) {\n            translate([-20+i*5, 0, 32-i*3]) rotate([0, -30, -20]) \n                scale([0.3, 0.1, 0.3]) cylinder(5, 1, 1);\n            translate([20-i*5, 0, 32-i*3]) rotate([0, -30, 20]) \n                scale([0.3, 0.1, 0.3]) cylinder(5, 1, 1);\n        }\n    }\n    \n    // Legs - four aquatic limbs with webbing\n    color(\"MediumTurquoise\") {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side*8, 12, 8]) rotate([0, side*10, 0]) \n                scale([0.8, 0.8, 1]) cylinder(15, 3, 2);\n            translate([side*8, 12, 0]) rotate([0, side*5, 0]) \n                scale([0.6, 0.6, 0.8]) cylinder(8, 2.5, 2);\n        }\n        \n        // Rear legs\n        for(side = [-1, 1]) {\n            translate([side*10, -12, 8]) rotate([0, side*10, 0]) \n                scale([0.9, 0.9, 1]) cylinder(12, 3.5, 2.5);\n            translate([side*10, -12, 2]) rotate([0, side*5, 0]) \n                scale([0.7, 0.7, 0.8]) cylinder(6, 2.5, 2);\n        }\n    }\n    \n    // Mane - flowing water-like strands\n    color(\"Aquamarine\") {\n        for(i = [0:4]) {\n            hull() {\n                translate([0, 20-i*2, 38+i]) sphere(1.5);\n                translate([sin(i*45)*5, 15-i*2, 42+i]) sphere(1);\n                translate([sin(i*45)*7, 10-i*2, 44+i]) sphere(0.5);\n            }\n        }\n    }\n    \n    // Horns - crystalline growths\n    color(\"LightCyan\") {\n        // Main horn\n        translate([0, 28, 42]) rotate([10, 0, 0]) cylinder(8, 1, 0.5);\n        \n        // Secondary horns\n        for(angle = [30, -30]) {\n            rotate([0, 0, angle]) \n                translate([0, 27, 40]) rotate([5, 0, angle/2]) cylinder(6, 0.8, 0.3);\n        }\n    }\n    \n    // Eyes - luminescent orbs\n    color(\"DeepSkyBlue\") {\n        translate([-3, 30, 36]) sphere(1.2);\n        translate([3, 30, 36]) sphere(1.2);\n    }\n    \n    // Scales - overlapping plates along spine\n    color(\"Teal\") {\n        for(pos = [-20:5:20]) {\n            translate([0, pos, 28-abs(pos)/2]) rotate([0, 0, 45]) \n                scale([0.8, 0.8, 0.2]) cube([4, 4, 1], center=true);\n        }\n    }\n    \n    // Fin details on legs\n    color(\"Turquoise\") {\n        for(side = [-1, 1]) {\n            for(pos = [10, -10]) {\n                difference() {\n                    translate([side*10, pos, 5]) rotate([0, 0, side*30]) \n                        scale([0.3, 1, 0.5]) cube([15, 3, 8], center=true);\n                    translate([side*10, pos, 5]) rotate([0, 0, side*30]) \n                        scale([0.25, 0.9, 0.4]) cube([14, 2.5, 7], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 5]) rillwhim();",
    "renders": true
  },
  {
    "mythical_creature": "sablethorn",
    "openscad_code": "// Sablethorn - Shadow Dragon Creature\n// Realistic style, medium complexity\n// 3D printable model with no overhangs\n\n$fn = 32;\n\n// Main colors\ncolor_shadow = [0.1, 0.1, 0.15];\ncolor_eyes = [0.8, 0.2, 0.2];\ncolor_spikes = [0.2, 0.2, 0.25];\ncolor_magic = [0.4, 0.1, 0.6];\n\n// Overall scale\nscale_factor = 0.8;\n\nmodule sablethorn() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Body\n            color(color_shadow)\n            translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n            sphere(r=12);\n            \n            // Head\n            color(color_shadow)\n            translate([0, 0, 35])\n            scale([0.9, 0.7, 1.1])\n            sphere(r=10);\n            \n            // Snout\n            color(color_shadow)\n            translate([0, -7, 35])\n            scale([0.6, 0.8, 0.5])\n            rotate([30, 0, 0])\n            cylinder(h=8, r1=5, r2=3);\n            \n            // Horns\n            for(i = [-1, 1]) {\n                color(color_spikes)\n                translate([i*5, 5, 42])\n                rotate([i*20, 0, 0])\n                cylinder(h=15, r1=3, r2=1);\n            }\n            \n            // Eyes\n            for(i = [-1, 1]) {\n                color(color_eyes)\n                translate([i*4, -5, 38])\n                sphere(r=1.5);\n            }\n            \n            // Wings\n            for(i = [-1, 1]) {\n                color(color_shadow)\n                translate([i*15, 0, 30])\n                rotate([0, 0, i*45])\n                scale([1, 0.2, 1])\n                difference() {\n                    sphere(r=20);\n                    translate([i*10, 0, 0])\n                    sphere(r=18);\n                }\n            }\n            \n            // Tail\n            color(color_shadow)\n            hull() {\n                translate([0, 8, 15])\n                sphere(r=8);\n                translate([0, 25, 10])\n                sphere(r=6);\n                translate([0, 40, 5])\n                sphere(r=4);\n                translate([0, 50, 2])\n                sphere(r=2);\n            }\n            \n            // Legs\n            for(i = [-1, 1]) {\n                for(j = [-1, 1]) {\n                    color(color_shadow)\n                    translate([i*8, j*5, 8])\n                    rotate([90, 0, 0])\n                    cylinder(h=12, r=3);\n                }\n            }\n            \n            // Claws\n            for(i = [-1, 1]) {\n                for(j = [-1, 1]) {\n                    color(color_spikes)\n                    translate([i*8, j*5, -2])\n                    for(k = [-1, 0, 1]) {\n                        translate([k*1.5, 0, 0])\n                        rotate([0, 0, 90])\n                        cylinder(h=3, r1=0.5, r2=0.2);\n                    }\n                }\n            }\n            \n            // Spikes along back\n            for(i = [0:5]) {\n                color(color_spikes)\n                translate([0, 5 + i*5, 25 + i*2])\n                rotate([0, 0, 180])\n                cylinder(h=6, r1=2, r2=0.5);\n            }\n            \n            // Tail spikes\n            for(i = [0:3]) {\n                color(color_spikes)\n                translate([0, 35 + i*5, 8 - i*1.5])\n                rotate([0, 0, 180])\n                cylinder(h=5, r1=1.5, r2=0.5);\n            }\n            \n            // Shadow magic aura\n            color(color_magic)\n            translate([0, 0, 20])\n            scale([1.5, 1.2, 1.3])\n            sphere(r=15);\n            \n            // Magical symbols on wings\n            for(i = [-1, 1]) {\n                color(color_magic)\n                translate([i*20, 0, 25])\n                rotate([0, 0, i*20])\n                for(j = [0:3]) {\n                    rotate([0, 0, j*90])\n                    translate([5, 0, 0])\n                    sphere(r=1);\n                }\n            }\n        }\n    }\n}\n\n// Render the creature\nsablethorn();",
    "renders": true
  },
  {
    "mythical_creature": "tidewhisper",
    "openscad_code": "// Tidewhisper - Mythical sea dragon with coral-like wings and bioluminescent patterns\n// Wings fold down for 3D printing, no overhangs exceeding 45 degrees\n\n$fn = 32;\n\n// Main colors\ncolor_seafoam = [0.2, 0.6, 0.7];\ncolor_deep = [0.1, 0.3, 0.5];\ncolor_coral = [0.9, 0.4, 0.3];\ncolor_luminescent = [0.3, 0.8, 1.0];\n\n// Scale for 3D printing (80mm length)\nscale_factor = 0.8;\n\nmodule tidewhisper() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Serpentine body\n            color(color_seafoam) body();\n            \n            // Folded wings\n            color(color_coral) left_wing();\n            color(color_coral) right_wing();\n            \n            // Head details\n            color(color_deep) head_features();\n            \n            // Bioluminescent spots\n            color(color_luminescent) bioluminescence();\n        }\n    }\n}\n\nmodule body() {\n    // Main body segments\n    for(i = [0:5]) {\n        translate([i * 12, 0, 0]) {\n            rotate([0, i * 10, 0]) {\n                scale([1, 0.8 - i * 0.1, 0.8 - i * 0.1]) {\n                    sphere(r = 8);\n                }\n            }\n        }\n    }\n    \n    // Tail segments\n    for(i = [6:10]) {\n        translate([60 + (i-6) * 8, 0, -3 - (i-6) * 2]) {\n            rotate([0, 60 + i * 5, 0]) {\n                scale([1, 0.4 - (i-6) * 0.05, 0.4 - (i-6) * 0.05]) {\n                    sphere(r = 6);\n                }\n            }\n        }\n    }\n    \n    // Dorsal fins\n    color(color_deep) {\n        for(i = [1:4]) {\n            translate([i * 15, 0, 5]) {\n                rotate([90, 0, 0]) {\n                    linear_extrude(height = 0.5) {\n                        polygon(points=[[0,0], [-3,5], [3,5]]);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule left_wing() {\n    translate([-5, -10, 2]) {\n        rotate([0, -30, -20]) {\n            // Wing membrane segments\n            for(i = [0:3]) {\n                translate([i * -8, 0, i * -3]) {\n                    rotate([0, i * 15, 0]) {\n                        scale([1, 0.7, 0.1]) {\n                            sphere(r = 6 + i * 2);\n                        }\n                    }\n                }\n            }\n            \n            // Wing supports\n            for(i = [0:3]) {\n                translate([i * -8, 0, i * -3]) {\n                    rotate([-90 + i * 15, 0, 0]) {\n                        cylinder(h = 15 - i * 2, r1 = 1, r2 = 0.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule right_wing() {\n    mirror([0,1,0]) {\n        left_wing();\n    }\n}\n\nmodule head_features() {\n    translate([0, 0, 0]) {\n        // Head\n        sphere(r = 10);\n        \n        // Snout\n        translate([8, 0, 0]) {\n            scale([1.5, 0.7, 0.7]) {\n                sphere(r = 6);\n            }\n        }\n        \n        // Horns\n        for(i = [0:1]) {\n            translate([5, i ? 5 : -5, 8]) {\n                rotate([0, i ? -30 : 30, 0]) {\n                    cylinder(h = 12, r1 = 2, r2 = 1);\n                }\n            }\n        }\n        \n        // Eyes\n        for(i = [0:1]) {\n            translate([7, i ? 4 : -4, 3]) {\n                sphere(r = 2);\n            }\n        }\n    }\n}\n\nmodule bioluminescence() {\n    // Glowing spots along body\n    for(i = [0:4]) {\n        translate([i * 15, 0, 6]) {\n            sphere(r = 1.5);\n        }\n    }\n    \n    // Wing edge lights\n    for(i = [0:3]) {\n        translate([-5 - i * 8, -10 - i * 3, 2 - i * 3]) {\n            sphere(r = 1);\n        }\n        translate([-5 - i * 8, 10 + i * 3, 2 - i * 3]) {\n            sphere(r = 1);\n        }\n    }\n}\n\ntidewhisper();",
    "renders": true
  },
  {
    "mythical_creature": "umbrawood",
    "openscad_code": "// Umbrawood - mythical shadow-tree creature\n// Wings span ~80mm, height ~60mm - 3D printable\n\n$fa = 2;\n$fs = 1;\n\n// Main colors\ncolor_trunk = [0.15, 0.08, 0.05];\ncolor_bark = [0.25, 0.15, 0.1];\ncolor_shadow = [0.05, 0.05, 0.08];\ncolor_glow = [0.3, 0.2, 0.5];\n\nmodule trunk_base() {\n    color(color_trunk)\n    difference() {\n        cylinder(h = 40, d1 = 20, d2 = 15, center = false);\n        // Hollow core for printing\n        cylinder(h = 38, d1 = 16, d2 = 11, center = false);\n    }\n}\n\nmodule twisted_branch(h, angle, thick) {\n    color(color_bark)\n    rotate([0, 0, angle])\n    translate([0, 0, 5])\n    rotate([angle/2, 0, 0])\n    cylinder(h = h, d = thick, center = false);\n}\n\nmodule shadow_leaf() {\n    color(color_shadow)\n    difference() {\n        scale([1, 1.5, 0.3])\n        sphere(d = 8);\n        // Cut underside for printing\n        translate([0, 0, -2])\n        cube([12, 12, 4], center = true);\n    }\n}\n\nmodule glow_eye() {\n    color(color_glow)\n    sphere(d = 3);\n    // Inner pupil\n    color([0, 0, 0])\n    translate([0, 1.5, 0])\n    sphere(d = 1.5);\n}\n\nmodule wing_segment(len, wid) {\n    color(color_shadow)\n    difference() {\n        cube([len, wid, 1.5], center = true);\n        // Cut angle for printing\n        translate([len/2, 0, -1])\n        rotate([0, 45, 0])\n        cube([len, wid*2, 2], center = true);\n    }\n}\n\nmodule shadow_wing(side) {\n    mirror([side, 0, 0])\n    union() {\n        // Main wing\n        translate([30, 0, 25])\n        rotate([0, 0, -20])\n        wing_segment(25, 8);\n        \n        // Secondary feathers\n        for(i = [0:2]) {\n            translate([25 - i*8, 0, 25 - i*3])\n            rotate([0, 0, -20 - i*10])\n            wing_segment(15 - i*3, 6 - i);\n        }\n    }\n}\n\n// Main creature assembly\nunion() {\n    // Central trunk\n    trunk_base();\n    \n    // Branches\n    for(i = [0:120:300]) {\n        translate([0, 0, 15])\n        twisted_branch(25, i, 6);\n    }\n    \n    // Leaves along branches\n    for(i = [0:40:320]) {\n        translate([cos(i)*8, sin(i)*8, 30])\n        rotate([0, 0, i])\n        shadow_leaf();\n    }\n    \n    // Eyes on trunk\n    translate([7, 0, 25])\n    glow_eye();\n    \n    translate([-7, 0, 25])\n    glow_eye();\n    \n    // Shadow wings\n    shadow_wing(1);\n    shadow_wing(-1);\n    \n    // Root tendrils\n    for(i = [0:45:315]) {\n        translate([0, 0, 0])\n        rotate([90, 0, i])\n        cylinder(h = 8, d = 3);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "vaporling",
    "openscad_code": "// Vaporling - A mystical steam-based creature from the ethereal planes\n// Features translucent wings, glowing core, and swirling vapor trails\n\n// Overall scale factor for easy resizing\nscale_factor = 1;\n\n// Main body module\nmodule vaporling_body() {\n    color([0.8, 0.9, 1.0, 0.7])  // Translucent blue-white\n    union() {\n        // Central core - glowing energy source\n        translate([0, 0, 15])\n        sphere(8);\n        \n        // Upper torso\n        translate([0, 0, 10])\n        scale([1.2, 1, 1.5])\n        sphere(6);\n        \n        // Lower body - tapering vapor mass\n        for(i = [0:3:30]) {\n            translate([0, 0, 10-i])\n            scale([1 - i/60, 1 - i/60, 0.8])\n            sphere(5);\n        }\n    }\n}\n\n// Wings module with membrane structure\nmodule vaporling_wings() {\n    color([0.7, 0.85, 1.0, 0.5])  // More translucent\n    union() {\n        // Left wing\n        translate([-8, 0, 18])\n        rotate([0, 0, 20])\n        union() {\n            // Wing arm\n            cylinder(h=15, r1=1.5, r2=0.5);\n            \n            // Wing membrane segments\n            for(seg = [0:3:12]) {\n                translate([-seg-3, 0, 15-seg/2])\n                rotate([90, 0, 0])\n                scale([1+seg/10, 1, 0.1])\n                cylinder(h=8+seg/2, r=2+seg/3);\n            }\n        }\n        \n        // Right wing (mirror of left)\n        mirror([1, 0, 0])\n        translate([-8, 0, 18])\n        rotate([0, 0, 20])\n        union() {\n            cylinder(h=15, r1=1.5, r2=0.5);\n            \n            for(seg = [0:3:12]) {\n                translate([-seg-3, 0, 15-seg/2])\n                rotate([90, 0, 0])\n                scale([1+seg/10, 1, 0.1])\n                cylinder(h=8+seg/2, r=2+seg/3);\n            }\n        }\n    }\n}\n\n// Vapor tendrils module\nmodule vapor_tendrils() {\n    color([0.6, 0.8, 1.0, 0.4])  // Very translucent\n    union() {\n        // Generate 6 tendrils around the base\n        for(angle = [0:60:359]) {\n            rotate([0, 0, angle])\n            translate([6, 0, 5])\n            rotate([90 + sin(angle)*10, 0, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=10 + sin(angle*3)*3, r1=1, r2=0.2);\n        }\n    }\n}\n\n// Horn/crest details\nmodule ethereal_crest() {\n    color([0.9, 0.95, 1.0, 0.8])\n    union() {\n        // Central horn\n        translate([0, 0, 23])\n        rotate([0, 0, 0])\n        cylinder(h=8, r1=1.5, r2=0.5);\n        \n        // Side crests\n        translate([-3, 0, 22])\n        rotate([0, 20, 0])\n        cylinder(h=5, r1=1, r2=0.3);\n        \n        mirror([1, 0, 0])\n        translate([-3, 0, 22])\n        rotate([0, 20, 0])\n        cylinder(h=5, r1=1, r2=0.3);\n    }\n}\n\n// Glowing rune patterns on body\nmodule rune_patterns() {\n    color([0.3, 0.6, 1.0, 0.9])  // Bright blue glow\n    union() {\n        // Create rune circles around body\n        for(h = [5:5:20]) {\n            translate([0, 0, h])\n            rotate([90, 0, 0])\n            scale([1 + h/20, 1 + h/20, 0.5])\n            cylinder(h=0.5, r=3 + sin(h*2));\n        }\n        \n        // Energy swirls\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([4, 0, 15 + sin(i*5)*2])\n            sphere(0.5);\n        }\n    }\n}\n\n// Assembly of the complete vaporling\nscale(scale_factor)\nunion() {\n    vaporling_body();\n    vaporling_wings();\n    vapor_tendrils();\n    ethereal_crest();\n    rune_patterns();\n}",
    "renders": true
  },
  {
    "mythical_creature": "willowisp",
    "openscad_code": "// Willowisp - Mythical creature based on folklore\n// A floating ethereal being with ghostly flames and arcane details\n// Designed for 3D printing with minimal overhangs\n\n// Overall dimensions: approximately 60mm tall, 40mm wide\n\n// Base color for the ethereal body\ncolor(\"ghostwhite\") \ndifference() {\n    // Main body - ethereal orb\n    sphere(15);\n    \n    // Hollow out the center for printing\n    sphere(12);\n}\n\n// Glowing core\ntranslate([0, 0, 0])\ncolor(\"lightblue\") {\n    sphere(8);\n    \n    // Inner flame\n    translate([0, 0, 5])\n    scale([0.6, 0.6, 1.2])\n    color(\"cyan\")\n    sphere(5);\n}\n\n// Floating wisps - using a module for repetition\nmodule wisp(radius, height, angle, offset) {\n    translate([offset * cos(angle), offset * sin(angle), 5])\n    rotate([0, 0, angle])\n    scale([0.3, 0.3, height/10])\n    color(\"lightcyan\")\n    sphere(radius);\n}\n\n// Generate 8 wisps around the core\nfor (i = [0:7]) {\n    wisp(3 + (i%2)*2, 15 + (i%3)*5, i*45, 20);\n}\n\n// Mystical tendrils\nmodule tendril(start_z, length, angle) {\n    translate([0, 0, start_z])\n    rotate([angle, 0, 45])\n    color(\"lightsteelblue\")\n    cylinder(h=length, r1=2, r2=0.5, $fn=8);\n}\n\n// Create 6 tendrils in a spiral pattern\nfor (i = [0:5]) {\n    tendril(10 - i*2, 12 + i*2, i*60);\n}\n\n// Arcane symbols - floating runes\nmodule rune(size, height, angle, distance) {\n    translate([distance * cos(angle), distance * sin(angle), height])\n    rotate([0, 0, angle])\n    color(\"skyblue\")\n    cube([size, size*0.2, size*0.1], center=true);\n}\n\n// Add 5 runes\nfor (i = [0:4]) {\n    rune(3, 15 + i*3, i*72, 25);\n}\n\n// Base platform for stability\ntranslate([0, 0, -5])\ncolor(\"midnightblue\")\ncylinder(h=3, r=20, $fn=32);\n\n// Subtle magical particles\nmodule particle(x, y, z) {\n    translate([x, y, z])\n    color(\"white\")\n    sphere(0.5);\n}\n\n// Add small particles in a spiral\nfor (i = [0:20]) {\n    angle = i * 137.5;  // Golden angle\n    radius = 12 + i * 0.8;\n    particle(\n        radius * cos(angle),\n        radius * sin(angle),\n        10 + sin(i * 0.5) * 5\n    );\n}\n\n// Ethereal wings (simplified for printing)\nmodule wing(side) {\n    translate([side * 15, 0, 10])\n    rotate([0, side * 20, 0])\n    scale([0.3, 1, 0.8])\n    color(\"lightcyan\")\n    difference() {\n        sphere(12);\n        translate([side * -8, 0, 0])\n        sphere(10);\n    }\n}\n\n// Add wings\nwing(1);\nwing(-1);\n\n// Mystical aura rings\nmodule aura_ring(height, radius) {\n    translate([0, 0, height])\n    rotate([90, 0, 0])\n    color(\"cyan\", 0.3)\n    cylinder(h=0.5, r=radius, $fn=32);\n}\n\n// Add three aura rings at different heights\naura_ring(20, 18);\naura_ring(25, 22);\naura_ring(30, 25);",
    "renders": true
  },
  {
    "mythical_creature": "xylofay",
    "openscad_code": "// Xylofay - Forest spirit with wooden wings and crystal core\n// Wings fold down for 3D printing, no overhangs\n\n// Main creature body\nmodule xylofay() {\n    union() {\n        // Crystal heart core (glowing center)\n        color([0.2, 0.8, 1]) \n        translate([0, 0, 15])\n        scale([1.2, 1.2, 1.5])\n        sphere(d=8, $fn=16);\n        \n        // Torso (wooden body)\n        color([0.4, 0.25, 0.1])\n        translate([0, 0, 10])\n        scale([1, 0.8, 1.2])\n        sphere(d=15, $fn=20);\n        \n        // Head with wooden texture\n        color([0.35, 0.2, 0.08])\n        translate([0, 0, 24])\n        sphere(d=12, $fn=20);\n        \n        // Eyes (crystal formations)\n        for(i = [-1, 1]) {\n            color([0.5, 0.9, 1])\n            translate([i*3, 5.5, 25])\n            sphere(d=2, $fn=8);\n        }\n        \n        // Branch-like arms\n        for(side = [-1, 1]) {\n            color([0.3, 0.18, 0.08])\n            translate([side*7, 2, 18])\n            rotate([0, 0, side*20])\n            cylinder(h=12, d1=4, d2=2.5, $fn=8);\n            \n            // Hands with fingers\n            translate([side*11, 2.5, 16])\n            rotate([0, 0, side*20])\n            cylinder(h=3, d=2, $fn=6);\n        }\n        \n        // Root-like legs\n        for(side = [-1, 1]) {\n            color([0.25, 0.15, 0.05])\n            translate([side*3.5, -3, 5])\n            rotate([10, 0, 0])\n            cylinder(h=10, d1=5, d2=3, $fn=8);\n            \n            // Feet\n            translate([side*3.5, -4, 0])\n            rotate([0, 0, side*10])\n            scale([1.5, 3, 1])\n            cube([3, 2, 2]);\n        }\n        \n        // Horns (crystal growths)\n        for(angle = [0:120:359]) {\n            color([0.4, 0.7, 0.9, 0.8])\n            rotate([0, 0, angle])\n            translate([0, 6.5, 28])\n            rotate([40, 0, 0])\n            cylinder(h=8, d1=1.5, d2=0.5, $fn=6);\n        }\n        \n        // Wings - folded down for printing\n        module wing(side) {\n            color([0.3, 0.2, 0.1])\n            translate([side*12, 0, 20])\n            rotate([0, 0, side*15])\n            rotate([80, 0, 0])  // Fold down\n            difference() {\n                // Main wing membrane\n                scale([1, 2.5, 0.8])\n                sphere(d=20, $fn=20);\n                \n                // Wing cutouts for webbed look\n                for(i = [1:3]) {\n                    translate([0, -12 + i*6, 1])\n                    scale([0.7, 0.3, 0.5])\n                    rotate([0, 20, 0])\n                    sphere(d=8, $fn=12);\n                }\n            }\n            \n            // Wing veins\n            for(i = [0:2]) {\n                color([0.2, 0.12, 0.05])\n                translate([side*12 + side*i*2, -5 + i*5, 19])\n                rotate([80, 0, side*10])\n                cylinder(h=10, d=0.8, $fn=4);\n            }\n        }\n        \n        // Add both wings\n        wing(1);\n        wing(-1);\n        \n        // Tail with wooden segments\n        color([0.35, 0.22, 0.09])\n        for(i = [0:3]) {\n            translate([0, -4 - i*2.5, 12 - i*1.5])\n            rotate([0, 0, i*8])\n            scale([1 - i*0.15, 1 - i*0.1, 1 - i*0.1])\n            sphere(d=6 - i, $fn=12);\n        }\n        \n        // Back crystal formations\n        for(angle = [30:30:330]) {\n            color([0.3, 0.7, 0.9, 0.7])\n            rotate([0, 0, angle])\n            translate([0, -5, 20])\n            rotate([20, 0, 0])\n            cylinder(h=4, d1=2, d2=0.8, $fn=6);\n        }\n    }\n}\n\n// Base platform for stability\nmodule base() {\n    color([0.15, 0.1, 0.05])\n    translate([0, 0, -2])\n    cylinder(h=2, d=30, $fn=32);\n}\n\n// Assemble complete model\nxylofay();\nbase();",
    "renders": true
  },
  {
    "mythical_creature": "yewshade",
    "openscad_code": "// Yewshade - A mythical forest spirit with bark-like skin and glowing eyes\n// Medium complexity realistic style\n\n// Main body parameters\nbody_height = 45;\nbody_width = 25;\nhead_size = 12;\n\n// Bark texture module for realistic tree-like skin\nmodule bark_texture(size, segments=8) {\n    difference() {\n        cube(size, center=true);\n        for(i=[0:segments-1]) {\n            rotate([0, 0, i*360/segments])\n            translate([0, size[1]*0.4, 0])\n            cylinder(h=size[2]*1.2, r=size[0]*0.1, center=true);\n        }\n    }\n}\n\n// Glowing eye module\nmodule glowing_eye(radius) {\n    color(\"limegreen\") sphere(r=radius);\n    color(\"darkgreen\") translate([0, 0, -radius*0.5]) sphere(r=radius*1.2);\n}\n\n// Horn module with spiral texture\nmodule spiral_horn(height, base_radius) {\n    union() {\n        // Main horn\n        cylinder(h=height, r1=base_radius, r2=base_radius*0.3);\n        // Spiral ridges\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n            translate([base_radius*0.7, 0, 0])\n            cylinder(h=height, r=base_radius*0.2);\n        }\n    }\n}\n\n// Wing module with vein structure\nmodule yew_wing(span, height) {\n    color(\"darkgreen\") {\n        // Main wing membrane\n        scale([1, 0.3, 1]) sphere(r=span/2);\n        \n        // Wing veins\n        for(i=[1:3]) {\n            translate([span/4*i, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=height, r=0.5);\n        }\n    }\n}\n\n// Main creature assembly\nmodule yewshade_creature() {\n    // Body - tree trunk like\n    color(\"saddlebrown\") {\n        translate([0, 0, body_height/2])\n        scale([1, 0.8, 1.2])\n        bark_texture([body_width, body_width*0.7, body_height]);\n    }\n    \n    // Head\n    translate([0, 0, body_height + head_size/2])\n    color(\"darkolivegreen\") sphere(r=head_size);\n    \n    // Eyes - glowing\n    translate([-head_size*0.4, head_size*0.6, body_height + head_size*0.7])\n    glowing_eye(2.5);\n    translate([head_size*0.4, head_size*0.6, body_height + head_size*0.7])\n    glowing_eye(2.5);\n    \n    // Horns - twisted yew branches\n    color(\"darkbrown\") {\n        translate([-head_size*0.7, -head_size*0.3, body_height + head_size*1.1])\n        rotate([0, 20, -30])\n        spiral_horn(15, 2.5);\n        \n        translate([head_size*0.7, -head_size*0.3, body_height + head_size*1.1])\n        rotate([0, 20, 30])\n        mirror([0, 1, 0])\n        spiral_horn(15, 2.5);\n    }\n    \n    // Wings - translucent leaves\n    translate([0, body_width*0.8, body_height*0.7])\n    rotate([0, 0, 45])\n    yew_wing(35, 20);\n    \n    translate([0, -body_width*0.8, body_height*0.7])\n    rotate([0, 0, -45])\n    mirror([1, 0, 0])\n    yew_wing(35, 20);\n    \n    // Root-like legs\n    for(i=[-1, 1]) {\n        color(\"saddlebrown\") {\n            translate([i*body_width*0.3, 0, 0])\n            cylinder(h=8, r=3);\n            translate([i*body_width*0.5, body_width*0.3, 0])\n            cylinder(h=8, r=2.5);\n        }\n    }\n    \n    // Magical aura particles\n    for(i=[0:5]) {\n        angle = i*60;\n        radius = body_width*1.2;\n        color(\"limegreen\") alpha(0.6)\n        translate([cos(angle)*radius, sin(angle)*radius, body_height*0.8])\n        sphere(r=1.5);\n    }\n}\n\n// Render the creature\nyewshade_creature();",
    "renders": true
  },
  {
    "mythical_creature": "zephyrling",
    "openscad_code": "// Zephyrling - Wind Elemental Creature\n// Wings, horns, flowing tail with wind patterns\n\n$fn = 32;  // Smooth curves\n\n// Main body\nmodule body() {\n    // Torso\n    translate([0, 0, 15]) \n        color(\"lightblue\")\n        scale([1.2, 0.8, 1.5])\n        sphere(10);\n    \n    // Chest plate with wind pattern\n    translate([0, 8, 18])\n        rotate([90, 0, 0])\n        color(\"azure\")\n        difference() {\n            cylinder(h=3, r=8);\n            for(i=[0:3]) {\n                rotate([0, 0, i*90])\n                translate([5, 0, -1])\n                cube([10, 2, 5]);\n            }\n        }\n}\n\n// Head with horns and flowing mane\nmodule head() {\n    translate([0, -15, 25])\n    union() {\n        // Main head\n        color(\"lightblue\")\n        scale([0.8, 1, 1.1])\n        sphere(8);\n        \n        // Snout\n        translate([0, -8, -2])\n        color(\"skyblue\")\n        scale([0.6, 1.2, 0.7])\n        sphere(5);\n        \n        // Curved horns\n        for(side=[-1, 1]) {\n            translate([side*6, -5, 5])\n            rotate([0, side*20, 0])\n            color(\"silver\")\n            scale([0.3, 0.3, 1.5])\n            rotate([0, 90, 0])\n            cylinder(h=12, r=2);\n        }\n        \n        // Wind-streaming mane\n        for(i=[0:5]) {\n            translate([0, -10+i*2, 8-i])\n            rotate([20-i*5, 0, 0])\n            color(\"lightcyan\")\n            scale([0.3, 0.3, 3-i*0.5])\n            sphere(2);\n        }\n    }\n}\n\n// Feathered wings\nmodule wing() {\n    // Main wing structure\n    translate([0, 0, 0])\n    rotate([0, 0, 0])\n    union() {\n        // Upper wing\n        color(\"lightsteelblue\")\n        translate([0, 0, 5])\n        scale([1, 0.2, 0.8])\n        rotate([0, 30, 0])\n        cylinder(h=25, r=3);\n        \n        // Wing feathers\n        for(i=[0:4]) {\n            translate([10+i*3, 0, 15-i*2])\n            rotate([0, -20+i*5, 0])\n            color(\"aliceblue\")\n            scale([1, 0.1, 0.6])\n            sphere(5-i);\n        }\n        \n        // Lower wing\n        color(\"powderblue\")\n        translate([0, 0, -5])\n        scale([1, 0.2, 0.6])\n        rotate([0, -30, 0])\n        cylinder(h=20, r=2.5);\n    }\n}\n\n// Wind-like tail\nmodule tail() {\n    translate([0, 15, 12])\n    union() {\n        // Main tail segments\n        for(i=[0:5]) {\n            translate([0, i*5, -i*2])\n            rotate([0, 0, sin(i*30)*10])\n            color(\"lightblue\")\n            scale([1-i*0.1, 1-i*0.1, 1-i*0.1])\n            sphere(5-i);\n        }\n        \n        // Wind wisps\n        for(i=[0:3]) {\n            translate([sin(i*120)*8, 25+i*3, cos(i*120)*5])\n            color(\"paleturquoise\")\n            sphere(2);\n        }\n    }\n}\n\n// Legs with clawed feet\nmodule legs() {\n    for(side=[-1, 1]) {\n        translate([side*6, 0, 5])\n        union() {\n            // Upper leg\n            color(\"lightblue\")\n            rotate([0, side*10, 0])\n            scale([0.8, 0.8, 1.2])\n            cylinder(h=12, r=2);\n            \n            // Lower leg\n            translate([0, 0, -12])\n            rotate([0, side*20, 0])\n            color(\"skyblue\")\n            scale([0.7, 0.7, 1])\n            cylinder(h=10, r=1.5);\n            \n            // Foot\n            translate([0, 5, -22])\n            color(\"silver\")\n            union() {\n                // Main foot\n                scale([1.5, 0.8, 0.5])\n                sphere(3);\n                \n                // Claws\n                for(claw=[-1, 0, 1]) {\n                    translate([claw*2, 2, 0])\n                    rotate([0, 90, 0])\n                    scale([0.3, 0.3, 1])\n                    cylinder(h=3, r=1);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    \n    // Left wing\n    translate([-15, 0, 20])\n    rotate([0, 0, 30])\n    wing();\n    \n    // Right wing\n    translate([15, 0, 20])\n    mirror([1, 0, 0])\n    rotate([0, 0, 30])\n    wing();\n    \n    tail();\n    legs();\n}",
    "renders": true
  },
  {
    "mythical_creature": "ashsprite",
    "openscad_code": "// Ashsprite - mythical fire elemental spirit\n// Medium complexity realistic style\n\n// Overall size: 60mm tall\n\n// Main colors\n$fa = 2;\n$fs = 0.5;\n\nmodule body() {\n    color([0.2, 0.2, 0.2]) {\n        // Core body - ember sphere\n        sphere(8);\n    }\n}\n\nmodule wings() {\n    color([0.7, 0.1, 0.05]) {\n        // Left wing\n        translate([-10, 0, 5]) {\n            rotate([0, 0, -20]) {\n                scale([1, 0.2, 1.5]) {\n                    difference() {\n                        sphere(8);\n                        translate([5, 0, 0]) cube(20, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Right wing\n        translate([10, 0, 5]) {\n            rotate([0, 0, 20]) {\n                scale([1, 0.2, 1.5]) {\n                    difference() {\n                        sphere(8);\n                        translate([-5, 0, 0]) cube(20, center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule tail() {\n    color([0.4, 0.05, 0]) {\n        // Connecting segment\n        translate([0, 0, -10]) {\n            cylinder(h=5, r1=4, r2=3);\n        }\n        \n        // Main tail segments\n        for(i = [0:3]) {\n            translate([0, 0, -15 - i*8]) {\n                rotate([0, 0, i*10]) {\n                    scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.1]) {\n                        rotate([0, 0, 45]) {\n                            difference() {\n                                cube([8, 3, 8], center=true);\n                                translate([2, -2, 0]) rotate([0, 0, -30]) cube([10, 2, 8], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule horns() {\n    color([0.15, 0.15, 0.15]) {\n        // Left horn\n        translate([-6, 0, 10]) {\n            rotate([0, -20, -30]) {\n                cylinder(h=12, r1=2, r2=0.5);\n            }\n        }\n        \n        // Right horn\n        translate([6, 0, 10]) {\n            rotate([0, -20, 30]) {\n                cylinder(h=12, r1=2, r2=0.5);\n            }\n        }\n    }\n}\n\nmodule eyes() {\n    color([1, 0.3, 0]) {\n        // Left eye\n        translate([-3, -3, 2]) {\n            sphere(1.5);\n        }\n        \n        // Right eye\n        translate([3, -3, 2]) {\n            sphere(1.5);\n        }\n    }\n}\n\nmodule flame_crown() {\n    color([1, 0.2, 0]) {\n        for(i = [0:5]) {\n            rotate([0, 0, i*60]) {\n                translate([0, 0, 15]) {\n                    rotate([15, 0, 0]) {\n                        scale([0.3, 0.3, 1]) {\n                            sphere(3 + sin(i*30)*1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule ember_particles() {\n    color([1, 0.5, 0]) {\n        for(i = [0:7]) {\n            rotate([0, 0, i*45]) {\n                translate([12 + i*2, 0, 5 + sin(i*20)*3]) {\n                    sphere(0.5 + i*0.2);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    wings();\n    tail();\n    horns();\n    eyes();\n    flame_crown();\n    ember_particles();\n}",
    "renders": true
  },
  {
    "mythical_creature": "briarling",
    "openscad_code": "// Briarling - Thorny Forest Guardian\n// A medium complexity 3D printable model\n\n$fn = 32;\nscale_factor = 0.8;\n\nmodule briarling() {\n    // Main body - thorny hedge-like torso\n    color(\"forestgreen\")\n    union() {\n        // Core body\n        translate([0, 0, 8])\n            scale([1.2, 0.8, 1.5])\n                sphere(r = 8);\n        \n        // Thorns array\n        for(i = [0:15]) {\n            rotate([0, 0, i * 24])\n                translate([10, 0, 10 + sin(i) * 3])\n                    rotate([90, 0, 0])\n                        cylinder(h = 6, r1 = 1.5, r2 = 0.5);\n        }\n    }\n    \n    // Head - rose-like with thorny crown\n    color(\"darkgreen\")\n    union() {\n        // Main head\n        translate([0, 0, 22])\n            scale([0.8, 0.9, 1])\n                sphere(r = 6);\n        \n        // Rose petals\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([4, 0, 23])\n                    rotate([0, 30, 0])\n                        scale([2, 1, 0.5])\n                            sphere(r = 2);\n        }\n        \n        // Thorny crown\n        for(i = [0:8]) {\n            rotate([0, 0, i * 45])\n                translate([6, 0, 26])\n                    rotate([0, 15, 0])\n                        cylinder(h = 4, r1 = 1, r2 = 0.3);\n        }\n    }\n    \n    // Eyes - glowing amber\n    color(\"gold\")\n    union() {\n        translate([-2, 2.5, 24])\n            sphere(r = 1);\n        translate([2, 2.5, 24])\n            sphere(r = 1);\n    }\n    \n    // Arms - vine-like\n    color(\"darkgreen\")\n    union() {\n        // Left arm\n        translate([-6, 4, 15])\n            rotate([0, 0, -30])\n                scale([0.8, 0.8, 3])\n                    cylinder(h = 8, r1 = 2, r2 = 1.5);\n        \n        // Right arm\n        translate([6, 4, 15])\n            rotate([0, 0, 30])\n                scale([0.8, 0.8, 3])\n                    cylinder(h = 8, r1 = 2, r2 = 1.5);\n    }\n    \n    // Hands - thorny claws\n    color(\"forestgreen\")\n    union() {\n        for(side = [-1, 1]) {\n            translate([side * 9, side * 2, 8])\n                for(j = [0:2]) {\n                    rotate([0, 0, j * 120])\n                        translate([0, 0, 0])\n                            scale([0.3, 0.3, 1.5])\n                                cylinder(h = 2, r1 = 1, r2 = 0.5);\n                }\n        }\n    }\n    \n    // Legs - root-like\n    color(\"saddlebrown\")\n    union() {\n        // Left leg\n        translate([-3, -2, 0])\n            rotate([0, 15, -10])\n                cylinder(h = 10, r1 = 2.5, r2 = 3);\n        \n        // Right leg\n        translate([3, -2, 0])\n            rotate([0, 15, 10])\n                cylinder(h = 10, r1 = 2.5, r2 = 3);\n    }\n    \n    // Feet - root clusters\n    color(\"saddlebrown\")\n    union() {\n        for(side = [-1, 1]) {\n            translate([side * 3, -3, 0])\n                for(k = [0:3]) {\n                    rotate([0, 0, k * 90])\n                        translate([1.5, 0, 0])\n                            scale([1, 0.5, 0.5])\n                                cylinder(h = 3, r1 = 1, r2 = 0.5);\n                }\n        }\n    }\n    \n    // Wings - leaf-like\n    color(\"limegreen\")\n    union() {\n        // Left wing\n        translate([-8, 0, 18])\n            rotate([0, 0, -30])\n                scale([0.3, 1.2, 2])\n                    difference() {\n                        sphere(r = 8);\n                        translate([8, 0, 0])\n                            cube([16, 20, 20], center = true);\n                    }\n        \n        // Right wing\n        translate([8, 0, 18])\n            rotate([0, 0, 30])\n                mirror([1, 0, 0])\n                    scale([0.3, 1.2, 2])\n                        difference() {\n                            sphere(r = 8);\n                            translate([8, 0, 0])\n                                cube([16, 20, 20], center = true);\n                        }\n    }\n    \n    // Tail - vine with thorns\n    color(\"forestgreen\")\n    union() {\n        // Main tail\n        translate([0, -8, 8])\n            rotate([0, -10, 0])\n                scale([0.8, 0.8, 2])\n                    cylinder(h = 12, r1 = 2, r2 = 1);\n        \n        // Tail thorns\n        for(i = [0:10]) {\n            rotate([0, -10, i * 15])\n                translate([0, -8 - i * 1.2, 8 - i * 0.5])\n                    rotate([90, 0, 0])\n                        cylinder(h = 3, r1 = 0.8, r2 = 0.3);\n        }\n    }\n    \n    // Magical flower on chest\n    color(\"magenta\")\n    translate([0, 3, 18])\n        sphere(r = 1.5);\n    \n    // Glowing runes\n    color(\"yellow\")\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([5, 0, 12 + i * 2])\n                scale([0.5, 0.5, 0.5])\n                    sphere(r = 0.5);\n    }\n}\n\n// Base for stability\ncolor(\"saddlebrown\")\ntranslate([0, 0, -2])\n    cylinder(h = 2, r = 12);\n\n// Assemble the briarling\nscale([scale_factor, scale_factor, scale_factor])\n    briarling();",
    "renders": true
  },
  {
    "mythical_creature": "citrinefae",
    "openscad_code": "// Citrinefae - A crystal-winged fairy creature with amber-like features\n// Wings have translucent citrine patterns, body has gem-like textures\n\n$fa = 2;\n$fs = 0.5;\n\n// Main module for the complete citrinefae\nmodule citrinefae() {\n    // Colors: amber body, golden wings, orange crystal accents\n    union() {\n        // Body\n        color([0.8, 0.6, 0.2]) body();\n        \n        // Head\n        color([0.85, 0.65, 0.15]) head();\n        \n        // Wings - translucent citrine\n        color([1, 0.8, 0.3, 0.6]) wings();\n        \n        // Crystal formations\n        color([1, 0.7, 0.2]) crystals();\n        \n        // Tail\n        color([0.75, 0.55, 0.1]) tail();\n        \n        // Arms\n        color([0.8, 0.6, 0.2]) arms();\n        \n        // Legs\n        color([0.8, 0.6, 0.2]) legs();\n    }\n}\n\n// Fairy body - humanoid torso\nmodule body() {\n    // Main torso\n    translate([0, 0, 10]) {\n        difference() {\n            // Torso cylinder\n            cylinder(h=20, r1=8, r2=6);\n            \n            // Waist indentation\n            translate([0, 0, 10])\n                cylinder(h=8, r1=5, r2=5);\n        }\n    }\n}\n\n// Fairy head with crystal crown\nmodule head() {\n    translate([0, 0, 35]) {\n        union() {\n            // Head sphere\n            sphere(r=6);\n            \n            // Crystal crown points\n            for(i = [0:45:315]) {\n                rotate([0, 0, i])\n                    translate([0, 6, 2])\n                        cylinder(h=4, r1=1.5, r2=0.5);\n            }\n            \n            // Eyes - amber gems\n            translate([2.5, 4, 0])\n                sphere(r=1);\n            translate([-2.5, 4, 0])\n                sphere(r=1);\n        }\n    }\n}\n\n// Translucent citrine wings\nmodule wings() {\n    // Left wing\n    translate([-10, 0, 25]) {\n        rotate([0, 0, 30]) {\n            difference() {\n                // Main wing shape\n                union() {\n                    // Upper wing segment\n                    translate([-5, 0, 0])\n                        cube([15, 2, 8]);\n                    \n                    // Lower wing segment\n                    translate([-8, 0, -10])\n                        cube([12, 2, 10]);\n                }\n                \n                // Wing cutouts for citrine pattern\n                for(x = [-12:-3:3]) {\n                    for(z = [-8:4:4]) {\n                        translate([x, 0, z])\n                            sphere(r=2);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Right wing - mirrored\n    mirror([1, 0, 0]) {\n        translate([-10, 0, 25]) {\n            rotate([0, 0, 30]) {\n                difference() {\n                    union() {\n                        translate([-5, 0, 0])\n                            cube([15, 2, 8]);\n                        translate([-8, 0, -10])\n                            cube([12, 2, 10]);\n                    }\n                    \n                    for(x = [-12:-3:3]) {\n                        for(z = [-8:4:4]) {\n                            translate([x, 0, z])\n                                sphere(r=2);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Crystal formations on body\nmodule crystals() {\n    // Chest crystal cluster\n    translate([0, 5, 25]) {\n        for(i = [0:60:300]) {\n            rotate([0, i, 0])\n                translate([0, 0, 2])\n                    cylinder(h=3, r1=1.5, r2=0.5);\n        }\n    }\n    \n    // Shoulder crystals\n    translate([7, 3, 25])\n        cylinder(h=4, r1=2, r2=1);\n    translate([-7, 3, 25])\n        cylinder(h=4, r1=2, r2=1);\n}\n\n// Fairy tail with crystal segments\nmodule tail() {\n    translate([0, 0, 0]) {\n        // Tail segments getting smaller\n        for(i = [0:1:4]) {\n            translate([0, 0, -i*3])\n                color([0.9 - i*0.05, 0.7 - i*0.05, 0.2])\n                    cylinder(h=3, r1=3.5 - i*0.5, r2=3 - i*0.5);\n        }\n        \n        // Tail crystal tip\n        translate([0, 0, -15])\n            cylinder(h=2, r1=1, r2=0);\n    }\n}\n\n// Arms with crystal accents\nmodule arms() {\n    // Left arm\n    translate([8, 3, 25]) {\n        rotate([0, 0, -30]) {\n            cylinder(h=12, r1=2, r2=1.5);\n            \n            // Hand\n            translate([0, 0, 12])\n                sphere(r=2);\n                \n            // Crystal on wrist\n            translate([0, 0, 6])\n                cylinder(h=1.5, r1=1.8, r2=1.8);\n        }\n    }\n    \n    // Right arm\n    translate([-8, 3, 25]) {\n        rotate([0, 0, 30]) {\n            cylinder(h=12, r1=2, r2=1.5);\n            \n            // Hand\n            translate([0, 0, 12])\n                sphere(r=2);\n                \n            // Crystal on wrist\n            translate([0, 0, 6])\n                cylinder(h=1.5, r1=1.8, r2=1.8);\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    // Left leg\n    translate([3, 3, 10]) {\n        cylinder(h=15, r1=2.5, r2=2);\n        \n        // Foot\n        translate([0, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h=4, r1=2, r2=1);\n    }\n    \n    // Right leg\n    translate([-3, 3, 10]) {\n        cylinder(h=15, r1=2.5, r2=2);\n        \n        // Foot\n        translate([0, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h=4, r1=2, r2=1);\n    }\n}\n\n// Scale the entire model to 60mm height\nscale(1.2) citrinefae();",
    "renders": true
  },
  {
    "mythical_creature": "dewspark",
    "openscad_code": "// Dewspark - A mythical crystalline dragon that collects morning dew in its wings\n// Overall size: ~80mm wingspan, 60mm length\n\n// Color definitions\ncolor_crystal = [0.7, 0.9, 1.0, 0.8];  // Translucent blue-white\ncolor_dew = [0.8, 1.0, 0.9, 0.6];      // Glowing dew drops\ncolor_eyes = [0.2, 0.4, 0.8];          // Deep blue\n\n// Main body module\nmodule dewspark_body() {\n    // Central crystal core\n    color(color_crystal) {\n        union() {\n            // Main torso - elongated teardrop shape\n            scale([1, 1.2, 1.5]) sphere(r=10, $fn=16);\n            \n            // Neck\n            translate([0, 0, 18]) rotate([15, 0, 0]) \n                scale([0.6, 0.6, 1.2]) sphere(r=8, $fn=12);\n            \n            // Head\n            translate([0, 0, 28]) rotate([30, 0, 0])\n                scale([0.8, 0.7, 1.1]) sphere(r=9, $fn=14);\n        }\n    }\n}\n\n// Wing module with dew collection structures\nmodule wing() {\n    color(color_crystal) {\n        // Main wing blade - crystalline structure\n        translate([0, -5, 0]) rotate([0, 0, 45])\n            difference() {\n                scale([1, 2.5, 0.3]) cube([20, 20, 1], center=true);\n                \n                // Wing membrane cutouts for crystalline appearance\n                for(i = [1:3]) {\n                    translate([0, i*5-10, 0]) rotate([0, 0, i*15])\n                        scale([0.8, 0.3, 1]) cube([15, 3, 2], center=true);\n                }\n            }\n        \n        // Wing support struts\n        for(i = [1:3]) {\n            translate([0, i*3-6, 0]) rotate([0, 0, i*10])\n                scale([0.3, 1.5, 0.2]) cube([15, 8, 1], center=true);\n        }\n        \n        // Dew drops along wing edges\n        color(color_dew) {\n            for(i = [0:5]) {\n                translate([i*3-8, -12, 0])\n                    sphere(r=1.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Tail module with crystal segments\nmodule tail() {\n    color(color_crystal) {\n        union() {\n            // Tail segments\n            for(i = [0:4]) {\n                translate([0, 0, -i*8-15]) rotate([0, 0, i*20])\n                    scale([1-i*0.15, 1-i*0.15, 1]) sphere(r=8-i, $fn=12);\n            }\n            \n            // Tail tip crystal\n            translate([0, 0, -50]) rotate([0, 0, 90])\n                scale([0.3, 0.3, 1]) cylinder(h=8, r1=4, r2=0, $fn=6);\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    color(color_crystal) {\n        // Front legs\n        translate([8, 0, -5]) rotate([45, 0, 0])\n            scale([0.4, 0.4, 1]) cylinder(h=15, r=3, $fn=8);\n        translate([-8, 0, -5]) rotate([45, 0, 0])\n            scale([0.4, 0.4, 1]) cylinder(h=15, r=3, $fn=8);\n            \n        // Back legs\n        translate([6, 0, -25]) rotate([30, 0, 0])\n            scale([0.4, 0.4, 1]) cylinder(h=12, r=3, $fn=8);\n        translate([-6, 0, -25]) rotate([30, 0, 0])\n            scale([0.4, 0.4, 1]) cylinder(h=12, r=3, $fn=8);\n    }\n}\n\n// Horn module\nmodule horns() {\n    color(color_crystal) {\n        // Main horn\n        translate([0, 0, 35]) rotate([0, 0, 0])\n            scale([0.3, 0.3, 1]) cylinder(h=10, r1=2, r2=0, $fn=6);\n            \n        // Side horns\n        translate([3, 0, 33]) rotate([15, 0, 15])\n            scale([0.2, 0.2, 0.8]) cylinder(h=8, r1=1.5, r2=0, $fn=5);\n        translate([-3, 0, 33]) rotate([15, 0, -15])\n            scale([0.2, 0.2, 0.8]) cylinder(h=8, r1=1.5, r2=0, $fn=5);\n    }\n}\n\n// Eyes module\nmodule eyes() {\n    color(color_eyes) {\n        translate([4, 6, 30]) sphere(r=1.5, $fn=8);\n        translate([-4, 6, 30]) sphere(r=1.5, $fn=8);\n    }\n}\n\n// Main assembly\ndewspark_body();\ntail();\nlegs();\nhorns();\neyes();\n\n// Wings - positioned for 3D printing (no overhangs)\ntranslate([12, 0, 5]) rotate([0, 0, -60]) wing();\ntranslate([-12, 0, 5]) rotate([0, 0, -120]) mirror([1, 0, 0]) wing();",
    "renders": true
  },
  {
    "mythical_creature": "ebonroot",
    "openscad_code": "// Ebonroot - Mythical tree-dragon of the shadow realm\n// A serpentine dragon that has merged with dark tree bark, featuring glowing root-like tendrils\n\n// Main parameters\n$fa = 8;\n$fs = 0.5;\nscale_factor = 0.8;\n\n// Colors\ncolor_dark_wood = [0.1, 0.05, 0.02];\ncolor_glow = [0.2, 0.6, 0.9];\ncolor_eyes = [0.8, 0.1, 0.1];\ncolor_bark = [0.15, 0.08, 0.03];\n\nmodule ebonroot_creature() {\n    union() {\n        // Main body - serpentine trunk\n        color(color_dark_wood)\n        translate([0, 0, 10])\n        rotate([0, 90, 0])\n        scale([1, 1.2, 1])\n        cylinder(h = 40, r1 = 8, r2 = 6, $fn = 32);\n        \n        // Head section\n        color(color_dark_wood)\n        translate([40, 0, 15])\n        rotate([0, 0, -20])\n        scale([1.2, 1, 1.1])\n        sphere(r = 7, $fn = 32);\n        \n        // Snout extension\n        color(color_dark_wood)\n        translate([47, 0, 15])\n        rotate([0, 0, -20])\n        scale([1.5, 0.8, 0.8])\n        cylinder(h = 8, r1 = 4, r2 = 2, $fn = 16);\n        \n        // Eyes - glowing red\n        for(side = [-1, 1]) {\n            color(color_eyes)\n            translate([45, side * 4, 18])\n            sphere(r = 1.5, $fn = 16);\n            \n            // Eye sockets\n            color(color_dark_wood)\n            translate([45.5, side * 4, 18])\n            sphere(r = 2, $fn = 16);\n        }\n        \n        // Branch-like horns along back\n        for(i = [0:3]) {\n            angle = i * 30 - 15;\n            color(color_bark)\n            translate([20 + i * 10, 0, 18])\n            rotate([angle, 0, 0])\n            cylinder(h = 12, r1 = 1.5, r2 = 0.5, $fn = 8);\n        }\n        \n        // Root tendrils - lower body\n        for(i = [0:4]) {\n            angle = i * 72;\n            color(color_dark_wood)\n            translate([0, 0, 5])\n            rotate([0, 0, angle])\n            translate([8, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 15, r1 = 1, r2 = 2, $fn = 8);\n        }\n        \n        // Wing structures - bark-like membranes\n        color(color_bark)\n        translate([25, 0, 25])\n        rotate([0, 0, -30])\n        scale([1, 0.1, 1.5])\n        cylinder(h = 20, r1 = 12, r2 = 8, $fn = 32);\n        \n        color(color_bark)\n        translate([25, 0, 25])\n        rotate([0, 0, 30])\n        scale([1, 0.1, 1.5])\n        cylinder(h = 20, r1 = 12, r2 = 8, $fn = 32);\n        \n        // Glowing root veins - magical energy\n        for(i = [0:5]) {\n            x = i * 8 - 20;\n            color(color_glow)\n            translate([x, 0, 12])\n            scale([1, 0.3, 0.3])\n            sphere(r = 1.5, $fn = 8);\n        }\n        \n        // Tail section\n        color(color_dark_wood)\n        translate([-20, 0, 8])\n        rotate([0, 90, 0])\n        scale([0.8, 1, 0.8])\n        cylinder(h = 25, r1 = 6, r2 = 2, $fn = 16);\n        \n        // Bark texture segments\n        for(i = [0:7]) {\n            pos = i * 5 - 15;\n            color(color_bark)\n            translate([pos, 0, 10])\n            rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 3, r = 9, $fn = 32);\n                cylinder(h = 4, r = 7.5, $fn = 32);\n            }\n        }\n        \n        // Magical root clusters at base\n        for(angle = [0:45:315]) {\n            color(color_glow)\n            translate([0, 0, 0])\n            rotate([0, 0, angle])\n            translate([6, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h = 8, r1 = 1.2, r2 = 0.5, $fn = 8);\n        }\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor])\nebonroot_creature();",
    "renders": true
  },
  {
    "mythical_creature": "flintgleam",
    "openscad_code": "// Flintgleam - A crystalline dragon with glowing ember wings\n// Size: ~80mm tall\n\n// Color constants\nstone_gray = [0.5, 0.5, 0.5];\nember_orange = [1, 0.4, 0];\nflint_black = [0.2, 0.2, 0.2];\ncrystal_blue = [0.3, 0.5, 0.8];\n\n// Main body\nmodule body() {\n    color(stone_gray)\n    difference() {\n        // Main torso\n        scale([1, 0.8, 1.2])\n        sphere(d=30, $fn=32);\n        \n        // Chest cavity detail\n        translate([0, -8, 5])\n        scale([0.6, 0.4, 0.3])\n        sphere(d=20, $fn=16);\n    }\n}\n\n// Head with crystalline formations\nmodule head() {\n    color(crystal_blue)\n    translate([0, 30, 15])\n    union() {\n        // Main head\n        scale([0.8, 1, 0.8])\n        sphere(d=20, $fn=24);\n        \n        // Snout\n        translate([0, 12, -5])\n        scale([0.5, 0.6, 0.4])\n        sphere(d=15, $fn=16);\n        \n        // Crystalline horns\n        for(i=[-1, 1]) {\n            translate([i*8, 5, 10])\n            rotate([0, i*20, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=12, d1=6, d2=2, $fn=6);\n        }\n    }\n}\n\n// Ember wings with flint framework\nmodule wing() {\n    color(ember_orange)\n    translate([0, 0, 0])\n    difference() {\n        // Wing membrane\n        scale([1, 1.5, 0.2])\n        sphere(d=35, $fn=3);\n        \n        // Cut holes for webbing\n        for(i=[-20:10:20]) {\n            for(j=[-30:10:30]) {\n                translate([i, j, 0])\n                cylinder(h=3, d=5, $fn=8);\n            }\n        }\n    }\n}\n\n// Wing assembly\nmodule wings() {\n    for(side=[-1, 1]) {\n        translate([side*15, -5, 10])\n        rotate([0, 0, side*30])\n        wing();\n        \n        // Flint wing struts\n        color(flint_black)\n        for(i=[0:30]) {\n            rotate([0, 0, side*30])\n            translate([side*15, -15 + i, 10])\n            rotate([90, 0, 0])\n            cylinder(h=2, d=1.5, $fn=6);\n        }\n    }\n}\n\n// Tail with segmented flint\nmodule tail() {\n    color(stone_gray)\n    translate([0, -30, -5])\n    rotate([0, 0, 180])\n    for(i=[0:5]) {\n        translate([0, i*5, sin(i*30)*2])\n        scale([1 - i*0.1, 1 - i*0.08, 1 - i*0.08])\n        sphere(d=10, $fn=16);\n    }\n}\n\n// Legs with clawed feet\nmodule leg() {\n    color(stone_gray)\n    union() {\n        // Upper leg\n        translate([0, 0, 0])\n        rotate([0, 0, 0])\n        cylinder(h=15, d=8, $fn=8);\n        \n        // Lower leg\n        translate([0, -10, -7])\n        rotate([30, 0, 0])\n        cylinder(h=12, d=6, $fn=8);\n        \n        // Foot\n        translate([0, -15, -12])\n        scale([1.2, 0.8, 0.5])\n        sphere(d=8, $fn=8);\n        \n        // Claws\n        color(flint_black)\n        for(claw=[-1, 0, 1]) {\n            translate([claw*3, -18, -12])\n            rotate([0, 0, claw*20])\n            cylinder(h=5, d1=2, d2=0.5, $fn=6);\n        }\n    }\n}\n\n// Leg assembly\nmodule legs() {\n    for(side=[-1, 1]) {\n        translate([side*10, -10, -15])\n        rotate([0, side*10, 0])\n        leg();\n    }\n}\n\n// Crystal spine detail\nmodule spine() {\n    color(crystal_blue)\n    for(i=[-20:5:20]) {\n        translate([0, i, 15])\n        rotate([0, 0, 0])\n        scale([0.5, 0.5, 1])\n        cylinder(h=5, d1=4, d2=2, $fn=6);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    wings();\n    tail();\n    legs();\n    spine();\n}",
    "renders": true
  },
  {
    "mythical_creature": "glimmerpool",
    "openscad_code": "// Glimmerpool - Mythical Aquatic Dragon\n// A serpentine water dragon with luminescent fins and crystalline scales\n\n$fn = 48;\nscale_factor = 0.8;\n\nmodule glimmerpool() {\n    color(\"MediumTurquoise\") {\n        // Main body - serpentine form\n        union() {\n            // Head\n            translate([0, 0, 25]) rotate([0, 0, 0]) \n                sphere(d=12);\n            \n            // Snout\n            translate([0, 5, 25]) rotate([0, 30, 0])\n                cylinder(h=8, d1=8, d2=4);\n            \n            // Body segments\n            for(i=[0:5]) {\n                translate([0, 0, 25 - i*8]) \n                    rotate([0, i*15, 0])\n                    scale([1 - i*0.1, 1 - i*0.1, 1 - i*0.05])\n                    sphere(d=12 - i*1.5);\n            }\n            \n            // Tail\n            hull() {\n                translate([0, 0, -15]) sphere(d=6);\n                translate([0, 0, -35]) sphere(d=2);\n            }\n        }\n        \n        // Luminescent dorsal fin\n        color(\"DeepSkyBlue\") {\n            for(i=[0:8]) {\n                translate([0, 0, 22 - i*6]) \n                    rotate([15 + i*5, 0, 0])\n                    scale([0.3, 1, 0.5])\n                    cylinder(h=8, d=3);\n            }\n        }\n        \n        // Side fins\n        color(\"LightCyan\") {\n            // Left fin\n            translate([-6, 0, 15]) rotate([0, 0, -30])\n                scale([2, 0.5, 1])\n                sphere(d=8);\n            \n            // Right fin\n            translate([6, 0, 15]) rotate([0, 0, 30])\n                scale([2, 0.5, 1])\n                sphere(d=8);\n            \n            // Tail fins\n            translate([0, 0, -30]) rotate([0, 90, 0])\n                scale([3, 0.3, 1])\n                sphere(d=6);\n        }\n        \n        // Crystalline scales\n        color(\"Aquamarine\") {\n            for(i=[0:3]) {\n                for(j=[0:5]) {\n                    translate([\n                        cos(j*60)*5*(1-i*0.2),\n                        sin(j*60)*5*(1-i*0.2),\n                        20 - i*10\n                    ]) \n                    sphere(d=2);\n                }\n            }\n        }\n        \n        // Horns\n        color(\"PaleTurquoise\") {\n            translate([-3, 3, 30]) rotate([30, 0, -30])\n                cylinder(h=6, d1=3, d2=1);\n            translate([3, 3, 30]) rotate([30, 0, 30])\n                cylinder(h=6, d1=3, d2=1);\n        }\n        \n        // Eyes\n        color(\"Gold\") {\n            translate([-3, 5, 27]) sphere(d=1.5);\n            translate([3, 5, 27]) sphere(d=1.5);\n        }\n        \n        // Whiskers\n        color(\"LightBlue\") {\n            for(i=[0:2]) {\n                translate([-4, 6, 25]) rotate([0, 20+i*10, -45+i*20])\n                    cylinder(h=5, d=0.5);\n                translate([4, 6, 25]) rotate([0, 20+i*10, 45-i*20])\n                    cylinder(h=5, d=0.5);\n            }\n        }\n    }\n}\n\n// Base for stability\ncolor(\"DarkSlateGray\") \n    translate([0, 0, -40]) \n    cylinder(h=2, d=30);\n\n// Main creature\nscale([scale_factor, scale_factor, scale_factor])\n    glimmerpool();",
    "renders": true
  },
  {
    "mythical_creature": "hailshade",
    "openscad_code": "// Hailshade - Mythical Ice Dragon Creature\n// A medium complexity realistic OpenSCAD model\n\nmodule wing_segment(x,y,z,scale){\n    translate([x,y,z])\n    scale([scale,scale,scale])\n    difference(){\n        union(){\n            // Main wing membrane\n            scale([3,1,0.2])\n            sphere(5,$fn=8);\n            // Wing reinforcement\n            translate([5,0,0])\n            scale([1.5,0.3,0.1])\n            sphere(4,$fn=6);\n        }\n        // Ice crystal patterns\n        for(i=[-2:0.5:2]){\n            translate([3+i,i,0])\n            scale([0.3,0.3,0.5])\n            sphere(2,$fn=4);\n        }\n    }\n}\n\nmodule dragon_horn(){\n    color(\"LightBlue\")\n    union(){\n        // Base horn\n        cylinder(h=8, r1=3, r2=1, $fn=8);\n        // Spiral ridge\n        rotate([0,0,45])\n        translate([1.5,0,2])\n        cylinder(h=6, r1=1.5, r2=0.5, $fn=6);\n    }\n}\n\nmodule ice_spike(x,y,z,len){\n    color(\"LightCyan\")\n    translate([x,y,z])\n    rotate([90,0,0])\n    cylinder(h=len, r1=1.5, r2=0.2, $fn=6);\n}\n\nmodule hailshade_creature(){\n    union(){\n        // Body\n        color(\"LightBlue\")\n        translate([0,0,10])\n        scale([1.5,1,1.2])\n        sphere(15, $fn=20);\n        \n        // Head\n        color(\"PowderBlue\")\n        translate([0,20,15])\n        scale([1.2,1.5,1])\n        sphere(10, $fn=16);\n        \n        // Snout\n        color(\"LightSteelBlue\")\n        translate([0,30,15])\n        scale([0.8,1.2,0.6])\n        sphere(6, $fn=12);\n        \n        // Horns\n        translate([5,15,25]) rotate([30,0,30]) dragon_horn();\n        translate([-5,15,25]) rotate([30,0,-30]) dragon_horn();\n        \n        // Wings\n        // Left wing\n        translate([-20,0,20]) rotate([0,0,-20]) wing_segment(0,0,0,1);\n        translate([-25,-5,15]) rotate([0,0,-30]) wing_segment(0,0,0,0.8);\n        translate([-28,-8,10]) rotate([0,0,-40]) wing_segment(0,0,0,0.6);\n        \n        // Right wing\n        translate([20,0,20]) mirror([1,0,0]) rotate([0,0,-20]) wing_segment(0,0,0,1);\n        translate([25,-5,15]) mirror([1,0,0]) rotate([0,0,-30]) wing_segment(0,0,0,0.8);\n        translate([28,-8,10]) mirror([1,0,0]) rotate([0,0,-40]) wing_segment(0,0,0,0.6);\n        \n        // Tail\n        color(\"LightBlue\")\n        hull(){\n            translate([0,-15,12]) sphere(4, $fn=12);\n            translate([0,-25,10]) sphere(3, $fn=12);\n            translate([0,-35,8]) sphere(2, $fn=12);\n        }\n        \n        // Legs\n        // Front legs\n        color(\"SkyBlue\")\n        translate([8,10,0]) cylinder(h=12, r1=3, r2=2, $fn=8);\n        translate([-8,10,0]) cylinder(h=12, r1=3, r2=2, $fn=8);\n        \n        // Back legs\n        translate([6,-10,0]) cylinder(h=10, r1=3.5, r2=2.5, $fn=8);\n        translate([-6,-10,0]) cylinder(h=10, r1=3.5, r2=2.5, $fn=8);\n        \n        // Feet\n        for(side=[-1,1]){\n            translate([side*8,10,0]) {\n                cube([6,4,2], center=true);\n            }\n            translate([side*6,-10,0]) {\n                cube([6,4,2], center=true);\n            }\n        }\n        \n        // Ice spikes along back\n        ice_spike(0,5,25,5);\n        ice_spike(0,0,27,4);\n        ice_spike(0,-5,26,4.5);\n        ice_spike(0,-10,25,4);\n        ice_spike(0,-15,23,3.5);\n        \n        // Eyes\n        color(\"DeepSkyBlue\")\n        translate([3,27,17]) sphere(1.5, $fn=8);\n        translate([-3,27,17]) sphere(1.5, $fn=8);\n        \n        // Mouth detail\n        color(\"RoyalBlue\")\n        translate([0,32,14])\n        scale([1,0.5,0.3])\n        sphere(2, $fn=8);\n        \n        // Wing membrane details\n        color(\"GhostWhite\", 0.7)\n        for(i=[-1,1]){\n            translate([i*18,-2,18])\n            scale([0.3,0.3,0.1])\n            sphere(3, $fn=6);\n            translate([i*22,-4,14])\n            scale([0.25,0.25,0.1])\n            sphere(2.5, $fn=6);\n        }\n    }\n}\n\n// Scale for 3D printing (80mm length)\nscale(0.8)\nhailshade_creature();",
    "renders": true
  },
  {
    "mythical_creature": "ironbark",
    "openscad_code": "// Ironbark - mythical tree spirit creature\n// 3D printable at ~70mm height\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main body\nmodule ironbark_body() {\n    color([0.4, 0.2, 0.1]) {\n        union() {\n            // Trunk torso\n            cylinder(h = 40, d1 = 25, d2 = 20, center = false);\n            \n            // Chest plate bark texture\n            for(i = [0:6]) {\n                rotate([0, 0, i * 60]) \n                    translate([0, 10, 20])\n                        cube([5, 2, 15], center = true);\n            }\n        }\n    }\n}\n\n// Head with iron-like bark plating\nmodule ironbark_head() {\n    color([0.3, 0.15, 0.05]) {\n        union() {\n            // Main head sphere\n            sphere(d = 20);\n            \n            // Iron bark plates on forehead\n            for(i = [-1:1]) {\n                translate([i * 6, 8, 5])\n                    rotate([90, 0, 0])\n                        cylinder(h = 3, d = 4);\n            }\n            \n            // Eyes - glowing amber\n            color([1, 0.6, 0.2]) {\n                translate([-6, 5, 2])\n                    sphere(d = 4);\n                translate([6, 5, 2])\n                    sphere(d = 4);\n            }\n            \n            // Horn-like branches\n            color([0.25, 0.12, 0.04]) {\n                translate([-8, 0, 10])\n                    rotate([0, 20, -30])\n                        cylinder(h = 15, d1 = 4, d2 = 2);\n                translate([8, 0, 10])\n                    rotate([0, 20, 30])\n                        cylinder(h = 15, d1 = 4, d2 = 2);\n            }\n        }\n    }\n}\n\n// Branch-like arms\nmodule ironbark_arm(left = true) {\n    color([0.35, 0.18, 0.08]) {\n        mirror([left ? -1 : 1, 0, 0]) {\n            translate([15, 0, 15]) {\n                union() {\n                    // Upper arm\n                    rotate([0, 0, -20])\n                        cylinder(h = 20, d1 = 8, d2 = 6);\n                    \n                    // Lower arm split\n                    translate([0, 0, 20]) {\n                        rotate([0, 0, -30])\n                            cylinder(h = 15, d1 = 6, d2 = 4);\n                        rotate([0, 30, -30])\n                            cylinder(h = 15, d1 = 6, d2 = 4);\n                    }\n                    \n                    // Bark texture rings\n                    for(i = [0:3]) {\n                        translate([0, 0, i * 5])\n                            rotate([90, 0, 0])\n                                cylinder(h = 1, d = 9);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Root-like legs\nmodule ironbark_leg(left = true) {\n    color([0.45, 0.22, 0.11]) {\n        mirror([left ? -1 : 1, 0, 0]) {\n            translate([10, 0, -20]) {\n                union() {\n                    // Main leg\n                    cylinder(h = 25, d1 = 12, d2 = 8);\n                    \n                    // Roots spreading out\n                    for(i = [0:4]) {\n                        rotate([0, 0, i * 72 + (left ? 0 : 36)])\n                            translate([0, 0, -25]) {\n                                rotate([20, 0, 0])\n                                    cylinder(h = 12, d1 = 4, d2 = 2);\n                            }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Magical iron bark wings\nmodule ironbark_wings() {\n    color([0.5, 0.5, 0.6]) {\n        // Metallic sheen overlay\n        for(side = [-1, 1]) {\n            mirror([side, 0, 0]) {\n                translate([0, -15, 25]) {\n                    rotate([0, 0, side * 20]) {\n                        difference() {\n                            // Main wing shape\n                            scale([1, 0.3, 1])\n                                sphere(d = 30);\n                            \n                            // Wing membrane cutouts\n                            for(i = [1:3]) {\n                                translate([i * 5 - 10, 0, i * 3]) {\n                                    scale([1, 0.5, 1])\n                                        sphere(d = 8);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 20]) {\n    ironbark_body();\n    translate([0, 0, 40]) ironbark_head();\n    ironbark_arm(true);\n    ironbark_arm(false);\n    ironbark_leg(true);\n    ironbark_leg(false);\n    ironbark_wings();\n}",
    "renders": true
  },
  {
    "mythical_creature": "jadefire",
    "openscad_code": "// Jadefire mythical creature - realistic style with medium complexity\n$fn = 32;\n\n// Main body color - jade green\ncolor([0.2, 0.8, 0.3, 0.9]) {\n    // Body - serpentine dragon form\n    union() {\n        // Main torso\n        translate([0, 0, 5]) {\n            scale([1.5, 0.8, 0.6]) \n                sphere(10);\n        }\n        \n        // Neck extending forward\n        translate([10, 0, 8]) {\n            rotate([0, -20, 0])\n                cylinder(h=15, r1=6, r2=4);\n        }\n        \n        // Head\n        translate([22, 0, 8]) {\n            scale([1.2, 0.9, 0.8])\n                sphere(6);\n        }\n        \n        // Snout\n        translate([27, 0, 7]) {\n            rotate([0, -15, 0])\n                cylinder(h=8, r1=4, r2=2);\n        }\n        \n        // Tail segments\n        for(i = [1:5]) {\n            translate([-i*6 - 5, 0, 5 + sin(i*30)*2]) {\n                rotate([0, 0, -i*15])\n                    scale([1 - i*0.1, 0.8 - i*0.08, 0.6 - i*0.06])\n                        sphere(10 - i*1.5);\n            }\n        }\n        \n        // Legs - four legs in dragon style\n        module leg(x, y, angle) {\n            translate([x, y, 0]) {\n                rotate([0, 0, angle]) {\n                    // Upper leg\n                    translate([0, 0, 2]) {\n                        rotate([30, 0, 0])\n                            cylinder(h=8, r1=3, r2=2);\n                    }\n                    // Lower leg\n                    translate([0, -4, -4]) {\n                        rotate([60, 0, 0])\n                            cylinder(h=7, r1=2, r2=1.5);\n                    }\n                    // Paw\n                    translate([0, -6, -7]) {\n                        sphere(2);\n                    }\n                }\n            }\n        }\n        \n        leg(5, 5, 45);\n        leg(5, -5, -45);\n        leg(-5, 5, 135);\n        leg(-5, -5, -135);\n        \n        // Wings - jade fire wings\n        color([0.1, 0.9, 0.2, 0.7]) {\n            module wing(x, y, z, rot) {\n                translate([x, y, z]) {\n                    rotate([0, 0, rot]) {\n                        rotate([0, 20, 0]) {\n                            // Wing membrane\n                            difference() {\n                                // Main wing shape\n                                translate([0, 0, 0]) {\n                                    scale([1.5, 1, 0.1])\n                                        sphere(12);\n                                }\n                                // Cut out fire patterns\n                                for(i = [1:3]) {\n                                    translate([i*4 - 8, 0, 0]) {\n                                        scale([0.3, 0.8, 1])\n                                            rotate([0, 0, i*30])\n                                                cylinder(h=3, r=3);\n                                    }\n                                }\n                            }\n                            // Wing bones\n                            for(i = [0:3]) {\n                                translate([i*4 - 6, 0, 0]) {\n                                    rotate([0, 0, i*20 - 30]) {\n                                        scale([0.2, 0.2, 1])\n                                            cylinder(h=15, r=1);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            wing(0, 8, 12, 30);\n            wing(0, -8, 12, -30);\n        }\n    }\n    \n    // Horns - curved jade horns\n    color([0.15, 0.7, 0.25, 0.95]) {\n        module horn(x, y, z, rot) {\n            translate([x, y, z]) {\n                rotate([0, 0, rot]) {\n                    rotate([30, 0, 0]) {\n                        for(i = [0:5]) {\n                            translate([0, 0, i*2]) {\n                                rotate([0, 0, i*10])\n                                    scale([0.5 - i*0.08, 0.5 - i*08, 1])\n                                        cylinder(h=2, r=2 - i*0.3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        horn(25, 4, 10, 45);\n        horn(25, -4, 10, -45);\n    }\n    \n    // Eyes - glowing jade orbs\n    color([0.4, 1, 0.3, 0.9]) {\n        translate([29, 2.5, 8])\n            sphere(1.5);\n        translate([29, -2.5, 8])\n            sphere(1.5);\n    }\n    \n    // Scales pattern\n    color([0.25, 0.85, 0.35, 0.8]) {\n        for(i = [0:8]) {\n            for(j = [0:3]) {\n                translate([i*3 - 12, j*2 - 3, 5 + sin(i*45 + j*30)*1.5]) {\n                    scale([1, 0.7, 0.3])\n                        sphere(2);\n                }\n            }\n        }\n    }\n    \n    // Jadefire breath effect\n    color([0.3, 1, 0.4, 0.5]) {\n        translate([35, 0, 6]) {\n            for(i = [0:4]) {\n                translate([i*2, sin(i*60)*2, cos(i*60)*1.5]) {\n                    scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.15])\n                        sphere(3 - i*0.5);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "kelpwhisper",
    "openscad_code": "// Kelpwhisper - mythical sea creature that resembles a kelp dragon\n// Approximately 80mm long, 40mm tall when printed\n\n$fn=32;\n\n// Main body color - deep sea green\ncolor(\"seagreen\") \nunion() {\n    // Main body - elongated sea dragon form\n    rotate([0, 15, 0]) \n    scale([1.2, 0.8, 0.6])\n    sphere(15);\n    \n    // Head section\n    translate([18, 0, 2])\n    scale([1.3, 0.9, 0.7])\n    sphere(12);\n    \n    // Tail segments using loop\n    for(i = [1:5]) {\n        translate([-i*8 - 5, 0, -i*2])\n        scale([1 - i*0.12, 1 - i*0.08, 1 - i*0.15])\n        rotate([0, i*3, 0])\n        sphere(12 - i*1.5);\n    }\n}\n\n// Kelp-like fins along spine\nmodule kelp_fin(pos, angle, size) {\n    translate(pos)\n    rotate([angle, 0, 0])\n    color(\"darkgreen\")\n    scale([1, 0.1, size])\n    cube([size*2, 2, size], center=true);\n}\n\n// Create flowing kelp fins\nfor(i = [0:4]) {\n    kelp_fin([12 - i*8, 0, 8 - i*1.5], 30 - i*5, 10 - i*1);\n    kelp_fin([12 - i*8, 0, 8 - i*1.5], -30 + i*5, 10 - i*1);\n}\n\n// Side fins - kelp fronds\nmodule side_fin(pos, rot) {\n    translate(pos)\n    rotate([0, 0, rot])\n    color(\"forestgreen\")\n    difference() {\n        scale([1.5, 0.3, 2])\n        sphere(8);\n        translate([0, 2, 0])\n        scale([1.4, 0.5, 1.9])\n        sphere(7.5);\n    }\n}\n\n// Left and right side fins\nside_fin([5, 12, -2], 20);\nside_fin([5, -12, -2], -20);\n\n// Eyes - bioluminescent spots\nmodule eye(pos) {\n    translate(pos)\n    color(\"cyan\")\n    sphere(2);\n}\n\neye([25, 4, 4]);\neye([25, -4, 4]);\n\n// Horn-like kelp stalks\nmodule horn(pos, angle) {\n    translate(pos)\n    rotate([0, angle, 0])\n    color(\"darkolivegreen\")\n    cylinder(h=12, r1=2, r2=1, center=false);\n}\n\nhorn([20, 5, 8], 30);\nhorn([20, -5, 8], -30);\n\n// Gills - kelp frill details\nmodule gill(pos) {\n    translate(pos)\n    color(\"mediumseagreen\")\n    scale([0.8, 0.1, 1.2])\n    sphere(3);\n}\n\n// Create gill slits\nfor(i = [0:2]) {\n    gill([15 - i*3, 0, -3]);\n}\n\n// Underside belly plating\nmodule belly_scale(pos) {\n    translate(pos)\n    color(\"mediumaquamarine\")\n    scale([1, 0.3, 0.8])\n    sphere(4);\n}\n\n// Belly scales in rows\nfor(i = [0:3]) {\n    for(j = [-1:1]) {\n        belly_scale([8 - i*6, j*4, -7]);\n    }\n}\n\n// Tail fin - kelp cluster\ntranslate([-45, 0, -8])\nrotate([0, 0, 90])\ncolor(\"darkgreen\")\nscale([0.5, 2, 0.3])\ncylinder(h=20, r1=8, r2=2, center=true);",
    "renders": true
  },
  {
    "mythical_creature": "loamsprite",
    "openscad_code": "// Loamsprite - Earth spirit made of living soil and moss\n// Features: bark-like skin, mushroom cap head, vine wings, crystalline core\n\n// Overall dimensions: ~60mm tall\n\n$fn = 32;\nbody_color = \"#8B4513\";\nmoss_color = \"#228B22\";\nmushroom_color = \"#DEB887\";\ncrystal_color = \"#9370DB\";\n\n// Main body module\nmodule loamsprite() {\n    // Central crystal core - magical heart\n    translate([0, 0, 25]) {\n        color(crystal_color) {\n            sphere(8);\n            rotate([90, 0, 0]) cylinder(h=16, r1=8, r2=8, center=true);\n            rotate([0, 90, 0]) cylinder(h=16, r1=8, r2=8, center=true);\n        }\n    }\n    \n    // Torso - rough bark texture using stacked cylinders\n    union() {\n        color(body_color) {\n            for(i = [0:4]) {\n                translate([0, 0, 10 + i*4]) {\n                    cylinder(h=4, r1=12-i, r2=12-i*0.8);\n                }\n            }\n        }\n        \n        // Moss patches\n        color(moss_color) {\n            for(i = [0:7]) {\n                rotate([0, 0, i*51.4]) {\n                    translate([10-i, 0, 12+i*2]) sphere(3);\n                }\n            }\n        }\n    }\n    \n    // Mushroom cap head\n    translate([0, 0, 35]) {\n        color(mushroom_color) {\n            // Cap\n            scale([1.2, 1, 0.8]) sphere(15);\n            // Underside gills\n            difference() {\n                scale([1.1, 0.9, 0.6]) sphere(15);\n                scale([1.15, 0.85, 0.7]) sphere(15);\n            }\n            // Stem\n            cylinder(h=8, r1=6, r2=4);\n        }\n        \n        // Eye spots\n        color(\"black\") {\n            translate([5, 8, -2]) sphere(2);\n            translate([-5, 8, -2]) sphere(2);\n        }\n    }\n    \n    // Vine wings\n    module vine_wing(side) {\n        mirror([side, 0, 0]) union() {\n            // Main wing structure\n            translate([12, 0, 20]) {\n                rotate([0, 30, 20]) {\n                    scale([1, 0.2, 1]) cylinder(h=20, r1=8, r2=4);\n                }\n            }\n            \n            // Wing segments\n            for(i = [0:3]) {\n                translate([15-i*3, 0, 22-i*3]) {\n                    rotate([0, 30-i*5, 20-i*3]) {\n                        scale([0.8, 0.15, 0.8]) cylinder(h=15-i*2, r1=6-i, r2=3-i*0.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    color(moss_color) {\n        vine_wing(1);\n        vine_wing(-1);\n    }\n    \n    // Root-like legs\n    translate([0, 0, 0]) {\n        color(body_color) {\n            for(i = [0:3]) {\n                rotate([0, 0, i*90]) {\n                    translate([8, 0, 0]) {\n                        rotate([90, 0, 0]) cylinder(h=12, r1=4, r2=2);\n                    }\n                }\n            }\n            // Central support\n            cylinder(h=10, r1=6, r2=8);\n        }\n    }\n    \n    // Small mushrooms growing from body\n    for(i = [0:4]) {\n        rotate([0, 0, i*72]) {\n            translate([8, 0, 18-i]) {\n                color(mushroom_color) {\n                    scale([0.5, 0.5, 0.5]) {\n                        sphere(3);\n                        cylinder(h=4, r1=2, r2=1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the complete model\nloamsprite();",
    "renders": true
  },
  {
    "mythical_creature": "moonpetal",
    "openscad_code": "// Moonpetal - Mythical Lunar Guardian\n// A graceful creature with petal-like wings and moonstone crown\n// Wings designed for 3D printing with gentle curves and support\n\n$fn = 32;\n\n// Main colors\nmoonlight = \"#E6E6FA\";\npetal = \"#F8E8FF\";\ncrystal = \"#DDA0DD\";\nshadow = \"#4B0082\";\n\n// Creature body\nmodule body() {\n    color(moonlight)\n    union() {\n        // Torso\n        translate([0, 0, 10])\n            scale([1, 0.8, 1.2])\n            sphere(15);\n        \n        // Chest\n        translate([0, 0, 20])\n            scale([0.8, 0.6, 0.8])\n            sphere(12);\n        \n        // Belly\n        translate([0, 0, 3])\n            scale([0.9, 0.7, 0.9])\n            sphere(13);\n    }\n}\n\n// Head with snout\nmodule head() {\n    color(moonlight)\n    union() {\n        // Main head\n        translate([0, 0, 35])\n            scale([0.8, 0.7, 0.9])\n            sphere(12);\n        \n        // Snout\n        translate([0, 12, 33])\n            scale([1, 1.5, 0.8])\n            sphere(8);\n        \n        // Moonstone crown\n        color(crystal)\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([0, 0, 48])\n                rotate([0, 90, 0])\n                cylinder(h = 8, r1 = 3, r2 = 1);\n        }\n        \n        // Eyes\n        color(shadow)\n        translate([-4, 10, 36])\n            sphere(2);\n        translate([4, 10, 36])\n            sphere(2);\n    }\n}\n\n// Petal wings\nmodule wing() {\n    color(petal)\n    difference() {\n        // Main wing shape\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n            scale([1, 0.3, 1])\n            cylinder(h = 30, r1 = 25, r2 = 5);\n        \n        // Cutouts for petal effect\n        for(i = [1:4]) {\n            rotate([0, 0, i * 15])\n            translate([10, -5, 0])\n                rotate([0, 0, 45])\n                cube([20, 0.5, 20], center = true);\n        }\n    }\n}\n\n// Legs\nmodule leg() {\n    color(moonlight)\n    union() {\n        // Upper leg\n        translate([0, 0, 0])\n            rotate([0, 0, 15])\n            cylinder(h = 15, r1 = 4, r2 = 3);\n        \n        // Lower leg\n        translate([0, 0, -15])\n            rotate([0, 0, 30])\n            cylinder(h = 12, r1 = 3, r2 = 2);\n        \n        // Paw\n        translate([0, 0, -27])\n            sphere(3);\n    }\n}\n\n// Tail\nmodule tail() {\n    color(moonlight)\n    hull() {\n        translate([0, -20, 12])\n            sphere(5);\n        translate([0, -35, 15])\n            sphere(3);\n        translate([0, -45, 18])\n            scale([0.5, 1, 0.5])\n            sphere(2);\n    }\n}\n\n// Assemble the creature\nmodule moonpetal() {\n    // Body\n    body();\n    \n    // Head\n    head();\n    \n    // Wings - positioned for printing\n    translate([0, 0, 25])\n    rotate([0, 0, -30])\n        wing();\n    translate([0, 0, 25])\n    rotate([0, 0, 210])\n        wing();\n    \n    // Legs\n    translate([-8, 0, 0])\n        leg();\n    translate([8, 0, 0])\n        leg();\n    \n    // Tail\n    tail();\n    \n    // Moonstone chest piece\n    color(crystal)\n    translate([0, 0, 22])\n        sphere(3);\n}\n\n// Scale for 3D printing (80mm height)\nscale(0.8)\n    moonpetal();",
    "renders": true
  },
  {
    "mythical_creature": "nimbusglow",
    "openscad_code": "// Nimbusglow - A luminous cloud-dwelling dragon\n// Medium complexity realistic style\n\n$fn = 32;\n\nmodule nimbusglow() {\n    // Main body - cloud-like form\n    color(\"LightBlue\") translate([0, 0, 8]) scale([1.2, 0.8, 1]) sphere(d=20);\n    \n    // Head with snout\n    color(\"SkyBlue\") union() {\n        translate([12, 0, 15]) sphere(d=10);\n        translate([17, 0, 15]) scale([1.5, 0.6, 0.6]) sphere(d=8);\n    }\n    \n    // Horns - curved backwards\n    color(\"Azure\") for(i=[-1, 1]) {\n        rotate([0, 30*i, 0]) translate([14, i*4, 19]) rotate([0, -30, 0]) \n            cylinder(h1=0, h2=8, r1=0.5, r2=2);\n    }\n    \n    // Luminescent spines along back\n    color(\"Cyan\") for(i=[-20:5:10]) {\n        translate([i, 0, 25-i/4]) rotate([90, 0, 0]) \n            cylinder(h=3+abs(i)/3, r1=2, r2=0.5);\n    }\n    \n    // Wings - cloud membrane with structure\n    color(\"LightCyan\") difference() {\n        union() {\n            // Left wing\n            translate([-8, 15, 15]) rotate([0, 15, 45]) \n                scale([1.5, 0.3, 1]) sphere(d=25);\n            // Wing fingers\n            for(j=[0:3]) {\n                rotate([0, 15, 45]) translate([-8-j*3, 15+j*3, 15-j]) \n                    cylinder(h=20-j*2, r1=1, r2=0.5);\n            }\n            \n            // Right wing (mirrored)\n            mirror([0, 1, 0]) {\n                translate([-8, 15, 15]) rotate([0, 15, 45]) \n                    scale([1.5, 0.3, 1]) sphere(d=25);\n                for(j=[0:3]) {\n                    rotate([0, 15, 45]) translate([-8-j*3, 15+j*3, 15-j]) \n                        cylinder(h=20-j*2, r1=1, r2=0.5);\n                }\n            }\n        }\n        // Wing cutouts for membrane effect\n        for(pos=[[-5, 12, 14], [-3, 18, 13], [-7, 16, 14]]) {\n            translate(pos) sphere(d=8);\n        }\n    }\n    \n    // Tail - segmented and glowing\n    color(\"DeepSkyBlue\") for(k=[0:6]) {\n        translate([-20+k*3, 0, 8-k]) scale([1, 0.8, 0.8]) \n            sphere(d=8-k/2);\n    }\n    \n    // Legs - short and sturdy\n    color(\"DodgerBlue\") for(side=[-1, 1]) {\n        translate([5, side*6, 0]) rotate([90, 0, 0]) \n            cylinder(h=8, r=2);\n        translate([5, side*6, -8]) sphere(d=4);\n    }\n    \n    // Eyes - glowing orbs\n    color(\"Yellow\") for(side=[-1, 1]) {\n        translate([19, side*2.5, 16]) sphere(d=2);\n    }\n    \n    // Magical aura particles\n    color(\"White\") translate([0, 0, 0]) sphere(d=30);\n    color(\"Azure\") difference() {\n        sphere(d=30);\n        sphere(d=29.5);\n    }\n    \n    // Nose ridge\n    color(\"SkyBlue\") translate([17, 0, 15]) rotate([0, -30, 0]) \n        cube([4, 2, 1], center=true);\n}\n\n// Scale to reasonable size\nscale([2, 2, 2]) nimbusglow();",
    "renders": true
  },
  {
    "mythical_creature": "oakenshade",
    "openscad_code": "// Oakenshade - Mythical tree spirit creature\n// Height: 80mm, Base: 40mm diameter\n\n$fn = 32;\n\n// Main module\nmodule oakenshade() {\n    // Colors\n    color_bark = \"#4A3C28\";\n    color_leaves = \"#2D5016\";\n    color_glow = \"#FFD700\";\n    color_eyes = \"#8B4513\";\n    \n    union() {\n        // Base trunk\n        color(color_bark)\n        translate([0, 0, 5])\n        cylinder(h = 15, r1 = 20, r2 = 15, center = true);\n        \n        // Main body\n        color(color_bark)\n        translate([0, 0, 25])\n        cylinder(h = 35, r1 = 15, r2 = 8, center = true);\n        \n        // Head\n        color(color_bark)\n        translate([0, 0, 50])\n        sphere(r = 12);\n        \n        // Eyes\n        for(i = [-1, 1]) {\n            color(color_eyes)\n            translate([i * 5, 8, 50])\n            sphere(r = 2);\n            \n            // Eye glow\n            color(color_glow)\n            translate([i * 5, 9, 50])\n            sphere(r = 1);\n        }\n        \n        // Mouth\n        color(\"#2D1810\")\n        translate([0, 5, 45])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r1 = 3, r2 = 0, center = true);\n        \n        // Branch arms\n        module arm(angle, length) {\n            rotate([0, 0, angle])\n            translate([12, 0, 35])\n            rotate([0, 90, 0])\n            cylinder(h = length, r1 = 4, r2 = 2, center = true);\n            \n            // Hand/fingers\n            for(f = [0, 120, 240]) {\n                rotate([0, 0, f])\n                translate([12 + length/2, 0, 35])\n                rotate([0, 90, 0])\n                cylinder(h = 8, r1 = 1.5, r2 = 0.5, center = true);\n            }\n        }\n        \n        arm(45, 20);\n        arm(-45, 20);\n        \n        // Root feet\n        module root(angle, length) {\n            rotate([0, 0, angle])\n            translate([10, 0, 0])\n            cylinder(h = length, r1 = 3, r2 = 1, center = true);\n            \n            // Root tendrils\n            for(t = [-30, 0, 30]) {\n                rotate([0, t, 0])\n                translate([10 + length/2, 0, 0])\n                cylinder(h = 8, r1 = 1, r2 = 0.5, center = true);\n            }\n        }\n        \n        root(30, 15);\n        root(150, 15);\n        root(270, 15);\n        \n        // Canopy of leaves\n        color(color_leaves)\n        for(layer = [0:3]) {\n            translate([0, 0, 55 + layer * 8])\n            rotate([0, 0, layer * 15])\n            cylinder(h = 6, r1 = 25 - layer * 5, r2 = 20 - layer * 5, center = true);\n        }\n        \n        // Magical runes\n        color(color_glow)\n        for(r = [0:45:315]) {\n            rotate([0, 0, r])\n            translate([0, 12, 50])\n            cube([2, 1, 0.5], center = true);\n        }\n        \n        // Vines wrapping around\n        color(\"#3E2723\")\n        for(v = [0:60:300]) {\n            rotate([0, 0, v])\n            translate([0, 0, 30])\n            rotate_extrude(angle = 60, $fn = 16)\n            translate([12, 0, 0])\n            circle(r = 1);\n        }\n    }\n}\n\n// Generate the creature\noakenshade();",
    "renders": true
  },
  {
    "mythical_creature": "pearlwink",
    "openscad_code": "// Pearlwink - A mythical aquatic dragon with crystalline wings and pearl-like features\n// Designed for 3D printing - 80mm length, 45mm height, 40mm width\n\n// Main colors\npearl = \"#f8f4e6\";\nocean = \"#4a90e2\";\ngold = \"#d4af37\";\ncrystal = \"#b8d4f0\";\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main body module\nmodule pearlwink_body() {\n    color(pearl) {\n        // Main torso - elongated teardrop shape\n        translate([0, 0, 15])\n            scale([1, 0.7, 1])\n                sphere(d=30);\n        \n        // Underbelly - slightly flatter\n        translate([0, 0, 8])\n            scale([1.2, 0.8, 0.5])\n                sphere(d=25);\n    }\n}\n\n// Head with pearl-like features\nmodule pearlwink_head() {\n    color(pearl) {\n        // Main head shape\n        translate([-25, 0, 25])\n            rotate([0, 15, 0])\n                scale([1.3, 1, 1])\n                    sphere(d=18);\n        \n        // Snout\n        translate([-35, 0, 22])\n            rotate([0, -10, 0])\n                scale([1.5, 0.7, 0.6])\n                    cylinder(h=10, d1=8, d2=5);\n    }\n    \n    // Eyes - magical crystals\n    color(crystal) {\n        translate([-30, 7, 27])\n            sphere(d=4);\n        translate([-30, -7, 27])\n            sphere(d=4);\n    }\n    \n    // Pearl crest\n    color(pearl) {\n        for(i = [0:2:10]) {\n            translate([-20-i, 0, 32+i/2])\n                sphere(d=3);\n        }\n    }\n}\n\n// Crystalline wings\nmodule pearlwink_wings() {\n    color(crystal) {\n        // Left wing\n        translate([-5, 15, 30])\n            rotate([0, 0, -20])\n                scale([0.1, 2, 1.5])\n                    difference() {\n                        cube([30, 20, 2]);\n                        // Wing membrane cutouts\n                        for(j = [0:2]) {\n                            translate([5+j*8, 5, 0])\n                                cylinder(h=3, d=6);\n                        }\n                    }\n        \n        // Right wing\n        mirror([0, 1, 0])\n            translate([-5, 15, 30])\n                rotate([0, 0, -20])\n                    scale([0.1, 2, 1.5])\n                        difference() {\n                            cube([30, 20, 2]);\n                            for(j = [0:2]) {\n                                translate([5+j*8, 5, 0])\n                                    cylinder(h=3, d=6);\n                            }\n                        }\n    }\n}\n\n// Tail with pearl segments\nmodule pearlwink_tail() {\n    color(pearl) {\n        hull() {\n            translate([15, 0, 15])\n                sphere(d=15);\n            translate([40, 0, 12])\n                sphere(d=8);\n            translate([55, 0, 10])\n                sphere(d=5);\n        }\n    }\n    \n    // Pearl rings along tail\n    for(i = [0:2:8]) {\n        color(gold) {\n            translate([20+i*4, 0, 12])\n                rotate([90, 0, 0])\n                    cylinder(h=2, d=12-i, $fn=16);\n        }\n    }\n}\n\n// Legs with webbed feet\nmodule pearlwink_legs() {\n    color(pearl) {\n        // Front legs\n        translate([-10, 10, 8])\n            rotate([0, 0, 45])\n                cylinder(h=12, d=4);\n        translate([-12, 12, 0])\n            rotate([0, 0, 0])\n                scale([1, 2, 0.3])\n                    sphere(d=8);\n        \n        translate([-10, -10, 8])\n            rotate([0, 0, -45])\n                cylinder(h=12, d=4);\n        translate([-12, -12, 0])\n            rotate([0, 0, 0])\n                scale([1, 2, 0.3])\n                    sphere(d=8);\n        \n        // Back legs\n        translate([20, 8, 8])\n            rotate([0, 0, 30])\n                cylinder(h=10, d=4);\n        translate([22, 10, 0])\n            rotate([0, 0, 0])\n                scale([1, 2, 0.3])\n                    sphere(d=8);\n        \n        translate([20, -8, 8])\n            rotate([0, 0, -30])\n                cylinder(h=10, d=4);\n        translate([22, -10, 0])\n            rotate([0, 0, 0])\n                scale([1, 2, 0.3])\n                    sphere(d=8);\n    }\n}\n\n// Magical pearl accents\nmodule magical_pearls() {\n    for(angle = [0:60:300]) {\n        color(ocean) {\n            rotate([0, 0, angle])\n                translate([0, 20, 30])\n                    sphere(d=3);\n        }\n    }\n    \n    // Larger pearl on forehead\n    color(pearl) {\n        translate([-35, 0, 35])\n            sphere(d=5);\n    }\n}\n\n// Assemble the creature\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        pearlwink_body();\n        pearlwink_head();\n        pearlwink_wings();\n        pearlwink_tail();\n        pearlwink_legs();\n        magical_pearls();\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "quicksylva",
    "openscad_code": "// Quicksylva - Mythical Forest Guardian\n// A swift, deer-like creature with crystalline wings and vine-like features\n\n// Main body parameters\nbody_length = 45;\nbody_height = 25;\nbody_width = 15;\n\n// Colors\n$fa = 2;\n$fs = 0.5;\n\nmodule quicksylva() {\n    // Main body - deer-like torso\n    color(\"ForestGreen\") {\n        union() {\n            // Torso\n            translate([0, 0, body_height/2])\n                scale([1.2, 0.8, 1])\n                    sphere(d=body_width);\n            \n            // Abdomen\n            translate([-body_length/3, 0, body_height/3])\n                scale([0.9, 0.7, 0.8])\n                    sphere(d=body_width*0.8);\n            \n            // Chest\n            translate([body_length/4, 0, body_height/2])\n                scale([1, 0.9, 1.1])\n                    sphere(d=body_width*0.9);\n        }\n    }\n    \n    // Head with antler-like crystalline structures\n    color(\"LimeGreen\") {\n        translate([body_length/2, 0, body_height*0.9])\n            union() {\n                // Head\n                sphere(d=body_width*0.7);\n                \n                // Snout\n                translate([body_width/3, 0, -body_width/6])\n                    scale([1.5, 0.8, 0.6])\n                        sphere(d=body_width*0.5);\n                \n                // Eyes\n                for(i = [-1, 1]) {\n                    translate([body_width/4, i*body_width/4, body_width/8])\n                        color(\"DarkGreen\")\n                            sphere(d=2);\n                }\n                \n                // Crystalline antlers\n                for(i = [-1, 1]) {\n                    rotate([0, 0, i*30])\n                        translate([0, i*body_width/4, body_width/3])\n                            color(\"LightBlue\") {\n                                // Main antler shaft\n                                cylinder(h=body_width*0.8, d1=2, d2=1);\n                                \n                                // Branching crystals\n                                for(j = [1:3]) {\n                                    rotate([0, 0, j*15])\n                                        translate([0, 0, j*body_width/4])\n                                            cylinder(h=body_width*0.3, d1=1.5, d2=0.5);\n                                }\n                            }\n                }\n            }\n    }\n    \n    // Legs - 4 legs with hooves\n    color(\"DarkGreen\") {\n        for(side = [-1, 1]) {\n            for(pos = [-body_length/4, body_length/4]) {\n                translate([pos, side*body_width/3, 0])\n                    union() {\n                        // Upper leg\n                        translate([0, 0, body_height/2])\n                            rotate([-15, 0, 0])\n                                cylinder(h=body_height/1.5, d=body_width/3);\n                        \n                        // Lower leg\n                        translate([0, 0, 2])\n                            rotate([15, 0, 0])\n                                cylinder(h=body_height/1.8, d=body_width/4);\n                        \n                        // Hoof\n                        translate([0, 0, 1])\n                            cylinder(h=3, d1=body_width/4, d2=body_width/5);\n                    }\n            }\n        }\n    }\n    \n    // Crystalline wings with vine patterns\n    color(\"Aqua\") {\n        for(side = [-1, 1]) {\n            translate([-body_length/6, side*body_width/2, body_height*0.8])\n                rotate([0, 0, side*45])\n                    union() {\n                        // Main wing membrane\n                        translate([0, 0, 0])\n                            scale([1.5, 1, 0.1])\n                                sphere(d=body_width*1.2);\n                        \n                        // Vine-like support structures\n                        for(i = [0:30:120]) {\n                            rotate([0, 0, i])\n                                translate([body_width/2, 0, 0])\n                                    scale([0.8, 0.1, 0.1])\n                                        cylinder(h=body_width*0.8, d=1);\n                        }\n                        \n                        // Wing tip crystal\n                        translate([body_width*1.2, 0, 0])\n                            color(\"Cyan\")\n                                sphere(d=3);\n                    }\n        }\n    }\n    \n    // Tail with leaf-like structures\n    color(\"ForestGreen\") {\n        translate([-body_length/2, 0, body_height/2])\n            union() {\n                // Tail base\n                cylinder(h=body_width/2, d=body_width/3);\n                \n                // Leaf clusters\n                for(i = [0:45:180]) {\n                    rotate([0, i, 0])\n                        translate([-body_width/3, 0, 0])\n                            color(\"LimeGreen\")\n                                rotate([0, 90, 0])\n                                    scale([0.3, 1, 0.05])\n                                        sphere(d=body_width/2);\n                }\n            }\n    }\n}\n\n// Main assembly\nquicksylva();",
    "renders": true
  },
  {
    "mythical_creature": "rimeleaf",
    "openscad_code": "// Rimeleaf Mythical Creature - Realistic Style, Medium Complexity\n// A crystalline dragon-elf hybrid with frost-covered leaf wings\n\n$fn = 32;\n\n// Main module\nmodule rimeleaf_creature() {\n    scale([0.4, 0.4, 0.4]) {\n        union() {\n            // Body center\n            color(\"lightblue\") body();\n            \n            // Head\n            color(\"aliceblue\") head();\n            \n            // Wings\n            color(\"powderblue\") wings();\n            \n            // Tail\n            color(\"lightsteelblue\") tail();\n            \n            // Legs\n            color(\"skyblue\") legs();\n            \n            // Arms\n            color(\"skyblue\") arms();\n            \n            // Magical frost aura\n            color(\"azure\") frost_aura();\n        }\n    }\n}\n\n// Body - crystalline torso\nmodule body() {\n    difference() {\n        // Main torso crystal\n        translate([0, 0, 20])\n            scale([1.2, 0.8, 1.5])\n                sphere(d = 30);\n        \n        // Hollow center\n        translate([0, 0, 20])\n            scale([1.1, 0.7, 1.4])\n                sphere(d = 30);\n        \n        // Faceted edges\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([8, 0, 15])\n                    cube([15, 2, 30], center = true);\n        }\n    }\n}\n\n// Head - elven features with crystalline horns\nmodule head() {\n    union() {\n        // Main head\n        translate([0, -5, 45])\n            scale([0.8, 0.7, 1])\n                sphere(d = 20);\n        \n        // Snout\n        translate([0, -15, 42])\n            scale([0.6, 0.8, 0.5])\n                sphere(d = 15);\n        \n        // Horns\n        for(side = [-1, 1]) {\n            translate([side * 8, -5, 55])\n                rotate([30 * side, 0, 45 * side])\n                    cylinder(h = 15, r1 = 3, r2 = 1);\n            \n            translate([side * 10, -5, 53])\n                rotate([20 * side, 0, 30 * side])\n                    cylinder(h = 12, r1 = 2.5, r2 = 1);\n        }\n        \n        // Eyes\n        for(side = [-1, 1]) {\n            translate([side * 6, -12, 47])\n                color(\"slateblue\")\n                    sphere(d = 4);\n        }\n    }\n}\n\n// Leaf-like wings with frost patterns\nmodule wings() {\n    module leaf_shape(scale_factor = 1) {\n        scale([scale_factor, scale_factor, 0.5]) {\n            union() {\n                // Main leaf body\n                translate([0, 0, 0])\n                    scale([2, 3, 1])\n                        sphere(d = 20);\n                \n                // Leaf veins\n                for(i = [-2:2]) {\n                    translate([i * 5, 0, 1])\n                        cube([2, 30, 1]);\n                }\n                \n                // Side veins\n                for(i = [1:3]) {\n                    rotate([0, 0, 30 * i])\n                        translate([0, 15, 1])\n                            cube([1, 10, 1]);\n                    \n                    rotate([0, 0, -30 * i])\n                        translate([0, 15, 1])\n                            cube([1, 10, 1]);\n                }\n            }\n        }\n    }\n    \n    // Left wing\n    translate([-20, 0, 35])\n        rotate([0, 0, 30])\n            rotate([0, 15, 0])\n                leaf_shape(1.2);\n    \n    // Right wing\n    translate([20, 0, 35])\n        rotate([0, 0, -30])\n            rotate([0, 15, 0])\n                mirror([1, 0, 0])\n                    leaf_shape(1.2);\n}\n\n// Crystalline tail\nmodule tail() {\n    hull() {\n        translate([0, 5, 15])\n            sphere(d = 8);\n        \n        translate([0, 15, 10])\n            sphere(d = 6);\n        \n        translate([0, 25, 5])\n            sphere(d = 4);\n        \n        translate([0, 35, 0])\n            sphere(d = 2);\n    }\n    \n    // Tail spikes\n    for(i = [0:3]) {\n        translate([0, 5 + i * 8, 15 - i * 3])\n            rotate([0, 0, i * 45])\n                cylinder(h = 5, r1 = 2, r2 = 0.5);\n    }\n}\n\n// Legs\nmodule legs() {\n    module leg() {\n        // Upper leg\n        cylinder(h = 15, r = 3);\n        \n        // Lower leg\n        translate([0, 0, -15])\n            rotate([15, 0, 0])\n                cylinder(h = 12, r = 2.5);\n        \n        // Foot\n        translate([0, 0, -27])\n            rotate([30, 0, 0])\n                scale([1, 2, 0.5])\n                    sphere(d = 6);\n    }\n    \n    // Left legs\n    translate([-8, 0, 10])\n        leg();\n    translate([-6, 0, 0])\n        rotate([0, 0, 15])\n            leg();\n    \n    // Right legs\n    translate([8, 0, 10])\n        leg();\n    translate([6, 0, 0])\n        rotate([0, 0, -15])\n            leg();\n}\n\n// Arms\nmodule arms() {\n    module arm() {\n        // Upper arm\n        cylinder(h = 12, r = 2.5);\n        \n        // Forearm\n        translate([0, 0, -12])\n            rotate([30, 0, 0])\n                cylinder(h = 10, r = 2);\n        \n        // Hand\n        translate([0, 0, -22])\n            sphere(d = 5);\n    }\n    \n    // Left arm\n    translate([-15, 0, 35])\n        rotate([0, 45, 0])\n            arm();\n    \n    // Right arm\n    translate([15, 0, 35])\n        rotate([0, -45, 0])\n            arm();\n}\n\n// Magical frost aura particles\nmodule frost_aura() {\n    for(i = [0:20]) {\n        angle = i * 137.5;\n        radius = 20 + i * 2;\n        height = 25 + sin(i * 30) * 10;\n        \n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            height\n        ])\n            sphere(d = 1 + sin(i * 50) * 0.5);\n    }\n}\n\n// Generate the creature\nrimeleaf_creature();",
    "renders": true
  },
  {
    "mythical_creature": "siltshimmer",
    "openscad_code": "// Siltshimmer mythical creature - realistic style, medium complexity\n// 3D printable model with proper wall thickness and no overhangs\n\n$fn = 32;  // Smoother curves for realistic appearance\n\n// Main color scheme - iridescent blues and purples for siltshimmer\ncolor([0.3, 0.4, 0.8, 0.8]) union() {\n    \n    // Body - elongated serpentine form\n    translate([0, 0, 15]) \n        scale([1, 0.6, 1.5]) \n            sphere(12);\n    \n    // Neck extension\n    translate([0, 0, 25]) \n        scale([0.8, 0.5, 2]) \n            sphere(8);\n    \n    // Head\n    translate([0, 0, 38]) \n        scale([0.9, 0.7, 1.2]) \n            sphere(7);\n    \n    // Snout\n    translate([0, 5, 42]) \n        scale([0.4, 1, 0.6]) \n            sphere(4);\n    \n    // Tail segments - tapering towards end\n    for(i = [1:5]) {\n        translate([0, 0, 15 - i*8]) \n            scale([1 - i*0.15, 0.6 - i*0.05, 0.8]) \n                sphere(10);\n    }\n    \n    // Dorsal fins - siltshimmer characteristic\n    color([0.2, 0.3, 0.7]) \n    for(i = [0:3]) {\n        translate([0, 0, 30 - i*10]) \n            rotate([0, 0, 0]) \n                scale([0.3, 3, 0.5]) \n                    cube([2, 3, 4], center = true);\n    }\n    \n    // Wing-like appendages (folded for printing)\n    color([0.4, 0.5, 0.9, 0.7]) {\n        translate([10, 0, 28]) \n            rotate([0, 90, 45]) \n                scale([0.3, 1.5, 0.8]) \n                    cylinder(h = 15, r1 = 3, r2 = 1);\n        \n        translate([-10, 0, 28]) \n            rotate([0, 90, -45]) \n                scale([0.3, 1.5, 0.8]) \n                    cylinder(h = 15, r1 = 3, r2 = 1);\n    }\n    \n    // Horn clusters - siltshimmer's magical sensors\n    color([0.6, 0.7, 1]) \n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle]) \n            translate([3, 0, 42]) \n                rotate([30, 0, 0]) \n                    cylinder(h = 4, r1 = 1, r2 = 0.5);\n    }\n    \n    // Luminescent spots along body\n    color([0.7, 0.8, 1, 0.9]) \n    for(i = [0:7]) {\n        rotate([0, 0, i*45]) \n            translate([8, 0, 25 - i*3]) \n                sphere(1.5);\n    }\n    \n    // Underside belly plates\n    color([0.5, 0.6, 0.9]) \n    for(i = [0:4]) {\n        translate([0, -6, 30 - i*8]) \n            scale([1 - i*0.1, 0.3, 0.5]) \n                sphere(8);\n    }\n    \n    // Tail fin - horizontal for printing\n    color([0.3, 0.4, 0.8]) \n    translate([0, 0, -22]) \n        rotate([90, 0, 0]) \n            scale([1, 0.2, 1]) \n                cylinder(h = 12, r1 = 8, r2 = 4);\n    \n    // Eye sockets\n    color([0.1, 0.1, 0.3]) {\n        translate([2.5, 4, 39]) \n            sphere(1.2);\n        translate([-2.5, 4, 39]) \n            sphere(1.2);\n    }\n    \n    // Glowing eyes\n    color([0.5, 0.7, 1]) {\n        translate([2.5, 4.5, 39]) \n            sphere(0.8);\n        translate([-2.5, 4.5, 39]) \n            sphere(0.8);\n    }\n    \n    // Mouth slit\n    difference() {\n        translate([0, 6.5, 40]) \n            cube([3, 0.5, 1], center = true);\n    }\n    \n    // Side tendrils - magical feelers\n    color([0.4, 0.5, 0.9, 0.6]) \n    for(side = [-1, 1]) {\n        for(i = [0:2]) {\n            translate([side*6, 3, 35 - i*5]) \n                rotate([0, side*20, 0]) \n                    scale([0.3, 0.3, 1]) \n                        cylinder(h = 6, r1 = 0.5, r2 = 0.2);\n        }\n    }\n}\n\n// Base stand for stability\ncolor([0.2, 0.2, 0.3]) \n    translate([0, 0, -30]) \n        cylinder(h = 2, r = 15);",
    "renders": true
  },
  {
    "mythical_creature": "tinderwillow",
    "openscad_code": "// Tinderwillow - A mythical fire-spirit tree creature\n// Medium complexity realistic style with 3D printability\n\n$fn = 32;\n\nmodule tinderwillow() {\n    // Main body - gnarled tree trunk\n    color([0.4, 0.2, 0.1]) {\n        // Central trunk\n        translate([0, 0, 0]) {\n            cylinder(h = 40, d1 = 15, d2 = 12);\n        }\n        \n        // Bulbous growths\n        translate([6, 3, 15]) sphere(d = 8);\n        translate([-5, -4, 25]) sphere(d = 6);\n        translate([4, -5, 30]) sphere(d = 7);\n    }\n    \n    // Root system\n    color([0.3, 0.15, 0.08]) {\n        for(i = [0:60:300]) {\n            rotate([0, 0, i]) {\n                translate([7, 0, -2]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = 12, d1 = 4, d2 = 2);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Head - carved wooden face\n    color([0.35, 0.18, 0.09]) {\n        translate([0, 8, 38]) {\n            scale([1.2, 0.8, 1.1]) sphere(d = 12);\n            \n            // Eye sockets\n            color([0.1, 0.05, 0.05]) {\n                translate([3, 3, 2]) sphere(d = 2.5);\n                translate([-3, 3, 2]) sphere(d = 2.5);\n            }\n            \n            // Glowing ember eyes\n            color([1, 0.3, 0]) {\n                translate([3, 3.5, 2]) sphere(d = 1.5);\n                translate([-3, 3.5, 2]) sphere(d = 1.5);\n            }\n            \n            // Mouth crack\n            color([0.1, 0.05, 0.05]) {\n                translate([0, 1, -2]) {\n                    rotate([30, 0, 0]) cube([6, 1, 3]);\n                }\n            }\n        }\n    }\n    \n    // Branch arms\n    color([0.4, 0.2, 0.1]) {\n        // Left arm\n        translate([-10, 5, 25]) {\n            rotate([0, 30, -45]) {\n                cylinder(h = 20, d1 = 6, d2 = 3);\n                translate([0, 0, 20]) {\n                    rotate([0, -30, 0]) {\n                        cylinder(h = 15, d1 = 4, d2 = 2);\n                        // Hand with twig fingers\n                        translate([0, 0, 15]) sphere(d = 4);\n                        for(j = [0:45:135]) {\n                            rotate([0, 0, j]) {\n                                translate([3, 0, 0]) {\n                                    rotate([0, 90, 0]) cylinder(h = 8, d = 1.5);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Right arm\n        translate([10, 5, 25]) {\n            rotate([0, 30, 45]) {\n                cylinder(h = 20, d1 = 6, d2 = 3);\n                translate([0, 0, 20]) {\n                    rotate([0, -30, 0]) {\n                        cylinder(h = 15, d1 = 4, d2 = 2);\n                        // Hand with twig fingers\n                        translate([0, 0, 15]) sphere(d = 4);\n                        for(j = [0:45:135]) {\n                            rotate([0, 0, -j]) {\n                                translate([3, 0, 0]) {\n                                    rotate([0, 90, 0]) cylinder(h = 8, d = 1.5);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Fiery leaves/moss\n    color([0.8, 0.2, 0]) {\n        for(k = [0:30:330]) {\n            rotate([0, 0, k]) {\n                translate([0, 12, 42]) {\n                    rotate([45, 0, 0]) {\n                        scale([0.3, 1, 0.1]) sphere(d = 8);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Burning ember patches\n    color([1, 0.4, 0.1]) {\n        translate([5, -3, 20]) sphere(d = 4);\n        translate([-4, 2, 28]) sphere(d = 3);\n        translate([0, -6, 15]) sphere(d = 3.5);\n    }\n    \n    // Smoke wisps (thin cylinders)\n    color([0.4, 0.4, 0.4]) {\n        translate([2, 10, 45]) {\n            rotate([10, 0, 0]) cylinder(h = 8, d1 = 2, d2 = 0.5);\n        }\n        translate([-2, 9, 44]) {\n            rotate([15, 20, 0]) cylinder(h = 7, d1 = 1.5, d2 = 0.5);\n        }\n    }\n    \n    // Magical fire core\n    color([1, 0.6, 0.2]) {\n        translate([0, 0, 20]) sphere(d = 8);\n    }\n}\n\n// Base for stability\ncolor([0.3, 0.3, 0.3]) {\n    cylinder(h = 2, d = 30);\n}\n\n// Assemble the creature\ntranslate([0, 0, 2]) tinderwillow();",
    "renders": true
  },
  {
    "mythical_creature": "umberglen",
    "openscad_code": "// Umberglen - Mythical Forest Guardian\n// A creature with stag-like body, glowing runes, and vine-wrapped antlers\n\n// Overall dimensions: ~80mm long, ~60mm tall\n\nmodule body() {\n    // Main torso\n    color(\"SaddleBrown\")\n    translate([0, 0, 15])\n    scale([1.2, 0.8, 1])\n    sphere(15);\n    \n    // Chest\n    color(\"Sienna\")\n    translate([10, 0, 15])\n    scale([1.5, 1, 0.8])\n    sphere(12);\n}\n\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        // Upper leg\n        color(\"SaddleBrown\")\n        translate([8, side*8, 20])\n        rotate([0, -20*side, 0])\n        cylinder(h=20, r1=5, r2=4);\n        \n        // Lower leg\n        color(\"Sienna\")\n        translate([5, side*8, 0])\n        rotate([0, 10*side, 0])\n        cylinder(h=18, r1=4, r2=3);\n        \n        // Hoof\n        color(\"Black\")\n        translate([2, side*8, -1])\n        cylinder(h=4, r1=4.5, r2=0);\n        \n        // Back legs\n        // Upper leg\n        color(\"SaddleBrown\")\n        translate([-12, side*8, 20])\n        rotate([0, 20*side, 0])\n        cylinder(h=20, r1=5, r2=4);\n        \n        // Lower leg\n        color(\"Sienna\")\n        translate([-15, side*8, 0])\n        rotate([0, -10*side, 0])\n        cylinder(h=18, r1=4, r2=3);\n        \n        // Hoof\n        color(\"Black\")\n        translate([-18, side*8, -1])\n        cylinder(h=4, r1=4.5, r2=0);\n    }\n}\n\nmodule neck() {\n    color(\"SaddleBrown\")\n    translate([20, 0, 35])\n    rotate([-30, 0, 0])\n    cylinder(h=20, r1=6, r2=4);\n}\n\nmodule head() {\n    // Main head\n    color(\"SaddleBrown\")\n    translate([28, 0, 45])\n    scale([1.5, 0.8, 0.8])\n    sphere(8);\n    \n    // Snout\n    color(\"Peru\")\n    translate([36, 0, 45])\n    scale([1.2, 0.6, 0.6])\n    sphere(6);\n    \n    // Eyes\n    color(\"ForestGreen\")\n    for(side = [-1, 1]) {\n        translate([32, side*4, 48])\n        sphere(1.5);\n    }\n    \n    // Nostrils\n    color(\"Black\")\n    for(side = [-1, 1]) {\n        translate([38, side*1.5, 44])\n        sphere(1);\n    }\n}\n\nmodule antlers() {\n    // Main antler stem\n    color(\"Tan\")\n    translate([28, 0, 55])\n    rotate([0, 0, 0])\n    cylinder(h=25, r1=2, r2=1);\n    \n    // Branch generation\n    for(i = [1:4]) {\n        // Left branches\n        color(\"Tan\")\n        translate([28 - i*3, -i*2, 55 + i*4])\n        rotate([0, 0, -30 - i*10])\n        cylinder(h=10 + i*2, r1=1.5, r2=0.5);\n        \n        // Right branches\n        color(\"Tan\")\n        translate([28 - i*3, i*2, 55 + i*4])\n        rotate([0, 0, 30 + i*10])\n        cylinder(h=10 + i*2, r1=1.5, r2=0.5);\n    }\n    \n    // Vine wrapping\n    color(\"DarkGreen\")\n    for(i = [0:30]) {\n        translate([28, sin(i*30)*3, 55 + i*0.8])\n        sphere(0.5);\n    }\n}\n\nmodule tail() {\n    color(\"SaddleBrown\")\n    translate([-18, 0, 25])\n    rotate([10, 0, 0])\n    scale([0.3, 0.3, 1])\n    sphere(12);\n    \n    // Tail tuft\n    color(\"DarkGreen\")\n    translate([-25, 0, 15])\n    sphere(3);\n}\n\nmodule runes() {\n    // Glowing runes on body\n    color(\"YellowGreen\")\n    for(i = [1:5]) {\n        translate([5 - i*5, sin(i*45)*10, 25 + cos(i*45)*5])\n        sphere(0.8);\n    }\n    \n    // Rune circle on chest\n    for(angle = [0:60:360]) {\n        translate([10 + cos(angle)*8, sin(angle)*5, 25])\n        sphere(0.5);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    legs();\n    neck();\n    head();\n    antlers();\n    tail();\n    runes();\n}",
    "renders": true
  },
  {
    "mythical_creature": "verdantgleam",
    "openscad_code": "// Verdantgleam - A forest spirit dragon with luminescent wings\n// Scales: 1 unit = 1 mm\n\n// Main colors\nemerald = [0.2, 0.8, 0.3];\ngold = [1.0, 0.8, 0.0];\nleaf = [0.3, 0.9, 0.2];\ncrystal = [0.7, 1.0, 0.9, 0.6];\n\nmodule verdantgleam() {\n    // Body core\n    color(emerald) {\n        // Torso - using stacked cylinders for smooth body\n        translate([0, 0, 15]) \n            cylinder(h=25, d1=15, d2=12, $fn=32);\n        \n        // Chest section\n        translate([0, 0, 35]) \n            cylinder(h=8, d=18, $fn=32);\n    }\n    \n    // Head\n    color(emerald) {\n        translate([0, 0, 45])\n            rotate([0, 0, 0])\n            cylinder(h=12, d=10, $fn=32);\n    }\n    \n    // Snout\n    color(emerald) {\n        translate([0, 8, 45])\n            rotate([30, 0, 0])\n            cylinder(h=8, d=6, $fn=16);\n    }\n    \n    // Horns - curved back\n    for(side = [-1, 1]) {\n        color(gold) {\n            translate([side * 5, 0, 53]) {\n                rotate([0, side * -20, 0])\n                cylinder(h=8, d=3, $fn=8);\n                translate([0, 0, 8])\n                rotate([0, side * -40, 0])\n                cylinder(h=6, d=2, $fn=8);\n            }\n        }\n    }\n    \n    // Wings - membrane with vein structure\n    color(leaf) {\n        for(side = [-1, 1]) {\n            translate([side * 10, 0, 35]) {\n                rotate([0, side * 20, 0]) {\n                    // Main wing support\n                    rotate([0, 0, -30])\n                    cylinder(h=25, d=2, $fn=8);\n                    \n                    // Wing membrane\n                    translate([10, 0, 0])\n                    rotate([0, 0, 30])\n                    scale([1, 0.3, 0.1])\n                    sphere(d=30);\n                    \n                    // Wing veins\n                    for(i = [0:3]) {\n                        rotate([0, 0, i * 30 - 45])\n                        translate([8, 0, 0])\n                        scale([1, 0.1, 0.5])\n                        cube([12, 1, 1]);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs - sturdy for forest terrain\n    color(emerald) {\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([side * 7, -5, 30]) {\n                rotate([15, 0, 0])\n                cylinder(h=12, d=3, $fn=8);\n                translate([0, 0, 12])\n                rotate([30, 0, 0])\n                cylinder(h=8, d=3, $fn=8);\n            }\n            \n            // Back legs\n            translate([side * 6, -5, 15]) {\n                rotate([15, 0, 0])\n                cylinder(h=15, d=4, $fn=8);\n                translate([0, 0, 15])\n                rotate([30, 0, 0])\n                cylinder(h=10, d=4, $fn=8);\n            }\n        }\n    }\n    \n    // Tail - segmented\n    color(leaf) {\n        for(i = [0:5]) {\n            translate([0, -i * 5 - 5, 15 - i * 2]) {\n                scale([1 - i * 0.1, 1 - i * 0.1, 1])\n                cylinder(h=5, d=8 - i, $fn=32);\n            }\n        }\n    }\n    \n    // Luminescent scales - magical glow\n    color(crystal) {\n        // Spine crystals\n        for(i = [0:4]) {\n            translate([0, -i * 5 + 5, 38 + i * 1.5]) {\n                scale([0.5, 0.5, 1])\n                cylinder(h=3, d=2, $fn=6);\n            }\n        }\n        \n        // Wing tips\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, 35]) {\n                sphere(d=2);\n            }\n        }\n    }\n    \n    // Eyes - glowing orbs\n    color(crystal) {\n        for(side = [-1, 1]) {\n            translate([side * 3, 5, 48]) {\n                sphere(d=2);\n            }\n        }\n    }\n}\n\n// Create the creature\nverdantgleam();",
    "renders": true
  },
  {
    "mythical_creature": "whispergale",
    "openscad_code": "// Whispergale – a wind-spirit dragon that rides the high jet-streams\n// Overall length ≈ 85 mm, wingspan ≈ 100 mm, suitable for FDM printing\n// All parts are rotated so they print without supports\n$fn = 40;          // smooth curves\n\n// ---------- creature palette ----------\nstone = [0.6,0.55,0.5];\nsky   = [0.75,0.85,1];\nglow  = [0.3,0.7,1];\n\n// ---------- main body ----------\nmodule body() {\n    color(stone)\n    union() {\n        // central torso\n        translate([0,0,15])\n            scale([1,0.7,1.6])\n            sphere(10);\n\n        // neck\n        translate([0,-8,30])\n            rotate([0,-20,0])\n            scale([0.7,0.7,1.4])\n            cylinder(h = 20, r1 = 6, r2 = 4);\n\n        // head\n        translate([0,-20,42])\n            rotate([0,-20,0])\n            scale([1.2,0.9,0.9])\n            sphere(7);\n\n        // tail\n        translate([0,8,10])\n            rotate([0,25,0])\n            scale([0.6,0.6,1.2])\n            cylinder(h = 35, r1 = 7, r2 = 2);\n    }\n}\n\n// ---------- wings ----------\nmodule wing(side = 1) {        // side = 1 or -1\n    color(sky)\n    translate([side*12,0,25])\n    rotate([0,0,side*20])\n    rotate([90,0,0])            // print flat\n    union() {\n        // main membrane\n        difference() {\n            scale([1,1,0.5])\n            sphere(25);\n            translate([-30,-30,-5])\n                cube(60);\n        }\n\n        // reinforcement struts\n        for(i = [0:30:120])\n            rotate([0,0,i])\n            translate([-5,-2,0])\n                cube([30,1.5,2]);\n    }\n}\n\n// ---------- horns ----------\nmodule horn(pos = [0,0,0], ang = [0,0,0]) {\n    color(stone)\n    translate(pos)\n    rotate(ang)\n    scale([0.8,0.8,1.3])\n    cylinder(h = 12, r1 = 3, r2 = 0.5);\n}\n\n// ---------- rune-scales ----------\nmodule rune_scales() {\n    color(glow)\n    for(i = [0:20:340]) {\n        rotate([0,0,i])\n        translate([0,0,15 + sin(i*5)*2])\n            rotate([0,90,0])\n            scale([0.5,0.2,1])\n            cylinder(h = 4, r = 2);\n    }\n}\n\n// ---------- assembly ----------\ntranslate([0,0,0])\nunion() {\n    body();\n    wing(1);\n    wing(-1);\n    horn([0,-22,46], [-30, 0, 0]);\n    horn([3,-21,45], [-25, 20, 0]);\n    horn([-3,-21,45], [-25,-20,0]);\n    rune_scales();\n}",
    "renders": true
  },
  {
    "mythical_creature": "xeroflare",
    "openscad_code": "// Xeroflare - Desert Phoenix variant\n// Wings, solar crest, ember tail, scaled body\n\n$fa = 5;\n$fs = 0.5;\n\n// Overall scale\nscale(0.4) {\n\n// Color: sun-bleached bone with ember accents\ncolor([0.95, 0.9, 0.82]) {\n\n// Main body - elongated bird shape\nunion() {\n\n    // Torso core\n    translate([0,0,12]) \n        scale([1.2, 0.7, 1])\n        sphere(8);\n\n    // Chest forward bulge\n    translate([5,0,12]) \n        rotate([0,-30,0])\n        scale([0.8, 0.7, 1.2])\n        sphere(7);\n\n    // Abdomen taper\n    translate([-6,0,9]) \n        scale([0.7, 0.6, 1.3])\n        sphere(6);\n\n    // Neck\n    translate([11,0,18]) \n        rotate([0,-25,0])\n        cylinder(h=12, r1=4, r2=2.5);\n\n    // Head\n    translate([20,0,21]) \n        sphere(4);\n\n    // Tail base\n    translate([-12,0,8]) \n        rotate([0,20,0])\n        cylinder(h=4, r1=3, r2=2);\n}\n\n// Solar crest - jagged crown\ncolor([1,0.4,0.1]) {\n    for(i=[0:60:300]) {\n        rotate([0,0,i]) \n        translate([23,0,25])\n        rotate([0,-20,0])\n        scale([0.3,0.2,1])\n        cylinder(h=6, r1=1.2, r2=0.3);\n    }\n}\n\n// Beak\ncolor([0.9,0.7,0.5]) {\n    translate([24,0,20]) \n    rotate([0,-25,0])\n    scale([0.7,0.4,1])\n    cylinder(h=5, r1=2, r2=0.5);\n}\n\n// Wings - desert membrane style\nmodule wing() {\n    color([0.92,0.88,0.8]) {\n        difference() {\n            // Main wing shape\n            translate([0,-15,16]) \n            rotate([0,60,0])\n            scale([1.2,1,0.2])\n            sphere([14,8,2]);\n\n            // Cut trailing edge curve\n            translate([-5,-20,15]) \n            rotate([0,90,0])\n            cylinder(h=25, r=15);\n        }\n\n        // Wing fingers\n        color([0.85,0.8,0.75]) {\n            for(j=[0:2:8]) {\n                translate([j*1.5-6,-15-j,15+j]) \n                rotate([0,60,0])\n                scale([0.2,0.2,1])\n                cylinder(h=10-j, r=0.8);\n            }\n        }\n    }\n}\n\n// Left wing\nwing();\n\n// Right wing\nmirror([0,1,0]) wing();\n\n// Legs\nmodule leg() {\n    color([0.9,0.85,0.75]) {\n        // Thigh\n        translate([2,-2,0]) \n        rotate([0,20,0])\n        cylinder(h=8, r=2);\n\n        // Shin\n        translate([8,-2,0]) \n        rotate([0,-40,0])\n        cylinder(h=7, r=1.5);\n\n        // Foot\n        translate([11,-2,-3]) \n        rotate([0,-90,0])\n        scale([1,0.5,0.3])\n        sphere(3);\n    }\n}\n\nleg();\nmirror([0,1,0]) leg();\n\n// Ember tail segments\ncolor([1,0.3,0]) {\n    for(k=[0:1:5]) {\n        translate([-15-k*4,0,8-k]) \n        rotate([0,20-k*2,0])\n        scale([1-k*0.1,0.8-k*0.05,1-k*0.1])\n        sphere(3-k*0.3);\n    }\n}\n\n// Scales on back\ncolor([0.9,0.88,0.8]) {\n    for(row=[0:1:3]) {\n        for(col=[0:1:4]) {\n            translate([5-col*3,0,16+row*2]) \n            rotate([0,0,col*30])\n            scale([1,0.6,0.3])\n            sphere(1.2);\n        }\n    }\n}\n\n// Eye sockets (printable indentations)\ncolor([0.1,0.1,0.1]) {\n    translate([21.5,2,21]) \n    sphere(1);\n    translate([21.5,-2,21]) \n    sphere(1);\n}\n\n} // End color\n} // End scale",
    "renders": true
  },
  {
    "mythical_creature": "yearnshade",
    "openscad_code": "// Yearnshade - Mythical creature of shadow and longing\n// Medium complexity realistic style\n\n// Color definitions\n$fa = 2;\n$fs = 0.5;\n\n// Main body module\nmodule yearnshade_body() {\n    color([0.1, 0.1, 0.15])\n    union() {\n        // Torso\n        translate([0, 0, 8])\n        scale([1, 0.7, 1.2])\n        sphere(8);\n        \n        // Chest plate scales\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([7, 0, 12])\n            scale([0.3, 0.8, 0.2])\n            cube([3, 2, 1]);\n        }\n    }\n}\n\n// Shadow wings\nmodule wings() {\n    color([0.05, 0.05, 0.1])\n    union() {\n        // Left wing\n        translate([-8, 0, 15])\n        rotate([0, 0, -30])\n        difference() {\n            scale([2, 0.1, 1.5])\n            sphere(5);\n            // Wing tears for realism\n            for(i = [1:3]) {\n                translate([-5 + i*2, 0, 3 - i])\n                scale([0.5, 2, 0.5])\n                sphere(2);\n            }\n        }\n        \n        // Right wing\n        mirror([1, 0, 0])\n        translate([-8, 0, 15])\n        rotate([0, 0, -30])\n        difference() {\n            scale([2, 0.1, 1.5])\n            sphere(5);\n            for(i = [1:3]) {\n                translate([-5 + i*2, 0, 3 - i])\n                scale([0.5, 2, 0.5])\n                sphere(2);\n            }\n        }\n    }\n}\n\n// Horned head\nmodule head() {\n    color([0.15, 0.15, 0.2])\n    union() {\n        // Skull-like head\n        translate([0, 0, 22])\n        scale([0.8, 0.6, 1.1])\n        sphere(6);\n        \n        // Shadow horns\n        for(side = [-1, 1]) {\n            translate([side * 3, 0, 27])\n            rotate([0, side * 20, 0])\n            scale([0.3, 0.3, 1.5])\n            cylinder(h1=8, r1=2, r2=0.5);\n        }\n        \n        // Glowing eyes\n        color([0.3, 0.1, 0.5])\n        for(side = [-1, 1]) {\n            translate([side * 2.5, -2.5, 22])\n            sphere(1.2);\n        }\n    }\n}\n\n// Shadow tendrils\nmodule tendrils() {\n    color([0.08, 0.08, 0.12])\n    union() {\n        for(i = [0:4]) {\n            rotate([0, 0, i * 72])\n            translate([0, 0, 5])\n            rotate([90, 0, 0])\n            scale([0.8, 0.8, 1])\n            cylinder(h1=12, r1=1.5, r2=0.5);\n        }\n    }\n}\n\n// Clawed legs\nmodule legs() {\n    color([0.12, 0.12, 0.18])\n    union() {\n        for(side = [-1, 1]) {\n            translate([side * 4, 0, 2])\n            union() {\n                // Upper leg\n                rotate([0, side * 10, 0])\n                cylinder(h=6, r=1.5);\n                \n                // Lower leg\n                translate([0, 0, -6])\n                rotate([0, side * -20, 0])\n                cylinder(h=5, r=1.2);\n                \n                // Clawed foot\n                translate([0, 0, -11])\n                rotate([0, side * 10, 0])\n                scale([1.5, 0.8, 0.5])\n                sphere(2);\n                \n                // Shadow claws\n                for(claw = [-1, 0, 1]) {\n                    translate([claw * 0.8, -1.5, -11.5])\n                    rotate([0, 0, 90])\n                    scale([0.3, 0.3, 1])\n                    cylinder(h=2, r=0.5);\n                }\n            }\n        }\n    }\n}\n\n// Tail\nmodule tail() {\n    color([0.1, 0.1, 0.15])\n    translate([0, 0, 0])\n    rotate([0, 0, 180])\n    union() {\n        for(i = [0:4]) {\n            translate([0, 0, -i * 3])\n            scale([1 - i*0.15, 1 - i*0.15, 1])\n            sphere(2.5);\n        }\n    }\n}\n\n// Assemble the yearnshade\ntranslate([0, 0, 10])\nscale([1.2, 1.2, 1.2])\nunion() {\n    yearnshade_body();\n    wings();\n    head();\n    tendrils();\n    legs();\n    tail();\n}",
    "renders": true
  },
  {
    "mythical_creature": "zinfay",
    "openscad_code": "// Zinfay - Mythical forest spirit dragon\n// Realistic medium complexity version\n\n// Main parameters\nbody_length = 40;\nbody_height = 25;\nwing_span = 60;\n\n// Colors\nforest_green = [0.2, 0.5, 0.2];\nleaf_green = [0.3, 0.7, 0.3];\ngold = [0.9, 0.7, 0.1];\nwood_brown = [0.4, 0.3, 0.1];\n\nmodule zinfay_body() {\n    color(forest_green) {\n        // Main torso\n        translate([0, 0, 10]) {\n            scale([body_length/30, body_height/20, 1]) sphere(d=20);\n        }\n        \n        // Neck\n        translate([-15, 0, 20]) {\n            rotate([0, 30, 0]) cylinder(h=15, d1=12, d2=8);\n        }\n        \n        // Tail\n        translate([body_length/2, 0, 8]) {\n            rotate([0, -20, 0]) cylinder(h=25, d1=10, d2=4);\n        }\n    }\n}\n\nmodule zinfay_head() {\n    color(leaf_green) {\n        // Head sphere\n        translate([-22, 0, 25]) sphere(d=12);\n        \n        // Snout\n        translate([-28, 0, 25]) {\n            scale([1.5, 0.8, 0.8]) sphere(d=8);\n        }\n        \n        // Horns\n        for(i = [0:1]) {\n            translate([-18, i*6-3, 32]) {\n                rotate([0, 0, i*20-10]) {\n                    cylinder(h=8, d1=3, d2=1);\n                }\n            }\n        }\n    }\n}\n\nmodule zinfay_wings() {\n    color([0.1, 0.4, 0.1, 0.7]) {\n        for(side = [-1, 1]) {\n            translate([0, side*wing_span/4, 22]) {\n                rotate([0, 0, side*45]) {\n                    // Wing membrane\n                    difference() {\n                        scale([1, 1.5, 0.2]) sphere(d=wing_span/3);\n                        translate([0, -wing_span/4, 0]) cube([wing_span/2, wing_span/2, 5], center=true);\n                    }\n                    \n                    // Wing bones\n                    color(gold) {\n                        for(i = [0:2]) {\n                            rotate([0, 0, i*30-30]) {\n                                translate([0, 0, 1]) cylinder(h=wing_span/3, d=1.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule zinfay_legs() {\n    color(wood_brown) {\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([-10, side*6, 0]) {\n                rotate([0, 0, side*15]) {\n                    cylinder(h=12, d=3);\n                    translate([0, 0, 12]) sphere(d=3.5);\n                }\n            }\n            \n            // Back legs\n            translate([15, side*5, 0]) {\n                rotate([0, 0, side*20]) {\n                    cylinder(h=10, d=3);\n                    translate([0, 0, 10]) sphere(d=3.5);\n                }\n            }\n        }\n    }\n}\n\nmodule zinfay_details() {\n    // Eyes\n    color([0.9, 0.9, 0.1]) {\n        translate([-27, 3, 27]) sphere(d=2);\n        translate([-27, -3, 27]) sphere(d=2);\n    }\n    \n    // Magical runes on body\n    color(gold) {\n        for(i = [0:4]) {\n            rotate([0, 0, i*72]) {\n                translate([0, 0, 15]) {\n                    cylinder(h=0.5, d=3);\n                }\n            }\n        }\n    }\n    \n    // Scales pattern\n    color([0.15, 0.4, 0.15]) {\n        for(x = [-15:5:15]) {\n            for(y = [-8:4:8]) {\n                translate([x, y, 10 + sin(x+y)*2]) {\n                    sphere(d=1.5);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    zinfay_body();\n    zinfay_head();\n    zinfay_wings();\n    zinfay_legs();\n    zinfay_details();\n}",
    "renders": true
  },
  {
    "mythical_creature": "ambergust",
    "openscad_code": "// Ambergust - a mythical phoenix-dragon hybrid with amber crystal wings\n// Wings fold down for 3D printing, minimal overhangs\n\n$fn = 32; // Smooth curves\n\n// Main colors\ncolor_amber = [255, 191, 0];\ncolor_gold = [255, 215, 0];\ncolor_fire = [255, 69, 0];\ncolor_crystal = [255, 248, 220];\n\n// Crystal wing module\nmodule crystal_feather(length, width, thickness, angle) {\n    translate([0, 0, thickness/2])\n    rotate([0, 0, angle])\n    scale([1, 0.3, 1])\n    difference() {\n        cube([length, width, thickness], center=true);\n        \n        // Crystal facets\n        for(i = [1:3]) {\n            rotate([0, 0, i*120])\n            translate([length*0.3, 0, 0])\n            rotate([0, 0, 30])\n            cube([length*0.6, width*2, thickness*1.2], center=true);\n        }\n    }\n}\n\n// Wing assembly\nmodule wing() {\n    color(color_crystal) {\n        // Main wing membrane\n        linear_extrude(height=1.5)\n        polygon(points=[\n            [0, 0], [15, 5], [25, 15], [30, 25], \n            [25, 35], [15, 40], [0, 42], [-5, 35],\n            [-8, 25], [-5, 15], [-2, 5]\n        ]);\n        \n        // Crystal feathers\n        for(i = [0:4]) {\n            translate([5 + i*5, 10 + i*3, 1.5])\n            rotate([0, 0, -20 - i*5])\n            crystal_feather(8, 2, 0.8, 0);\n        }\n    }\n}\n\n// Dragon head\nmodule head() {\n    color(color_amber) {\n        union() {\n            // Snout\n            translate([0, 0, 5])\n            scale([1, 0.7, 0.8])\n            sphere(8);\n            \n            // Head base\n            translate([0, 0, 12])\n            sphere(10);\n            \n            // Horns\n            color(color_gold) {\n                translate([-6, 0, 18])\n                rotate([0, 30, -30])\n                cylinder(h=12, r1=2, r2=0.5);\n                \n                translate([6, 0, 18])\n                rotate([0, -30, 30])\n                cylinder(h=12, r1=2, r2=0.5);\n            }\n            \n            // Eyes\n            color(color_fire) {\n                translate([-5, 7, 12])\n                sphere(2);\n                \n                translate([5, 7, 12])\n                sphere(2);\n            }\n            \n            // Nostrils\n            translate([-3, 6, 7])\n            sphere(1);\n            \n            translate([3, 6, 7])\n            sphere(1);\n        }\n    }\n}\n\n// Body with scales\nmodule body() {\n    color(color_amber) {\n        union() {\n            // Main body\n            scale([1.2, 1, 1.5])\n            sphere(15);\n            \n            // Neck\n            translate([0, 0, 25])\n            cylinder(h=12, r1=8, r2=6);\n            \n            // Tail\n            translate([0, 0, -20])\n            rotate([0, 10, 0])\n            cylinder(h=25, r1=6, r2=1);\n            \n            // Scale details\n            color(color_gold) {\n                for(i = [0:5]) {\n                    rotate([0, 0, i*60])\n                    translate([10, 0, 5])\n                    sphere(2);\n                    \n                    rotate([0, 0, i*60 + 30])\n                    translate([8, 0, 0])\n                    sphere(1.5);\n                }\n            }\n        }\n    }\n}\n\n// Legs\nmodule leg(side) {\n    color(color_amber) {\n        translate([side*8, 0, -10]) {\n            // Upper leg\n            cylinder(h=10, r=3);\n            \n            // Lower leg\n            translate([0, 0, -10])\n            rotate([10, 0, 0])\n            cylinder(h=8, r=2.5);\n            \n            // Foot\n            translate([0, 2, -17])\n            scale([1.5, 2, 0.5])\n            sphere(3);\n            \n            // Claws\n            color(color_gold) {\n                for(j = [-1:1]) {\n                    translate([j*2, 3, -17])\n                    cylinder(h=2, r=0.5);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the creature\nunion() {\n    // Main body\n    body();\n    \n    // Head\n    translate([0, 0, 35])\n    head();\n    \n    // Wings - positioned for printing\n    translate([-15, 0, 10])\n    rotate([0, 90, 0])\n    wing();\n    \n    translate([15, 0, 10])\n    mirror([1, 0, 0])\n    rotate([0, 90, 0])\n    wing();\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Fire breath effect\n    color(color_fire) {\n        translate([0, 15, 10])\n        sphere(3);\n        \n        translate([0, 20, 10])\n        sphere(2);\n        \n        translate([0, 24, 10])\n        sphere(1);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "brackenwhirl",
    "openscad_code": "// Brackenwhirl - Mythical forest spirit with swirling fern wings\n// Realistic medium complexity version for 3D printing\n\n$fn = 50;  // Smooth curves for printing\n\n// Overall scale\nscale_factor = 0.4;\n\n// Colors\ncolor_body = \"#2d5016\";\ncolor_wings = \"#1a5c3a\";\ncolor_eyes = \"#ff6b35\";\ncolor_details = \"#8b4513\";\n\nmodule brackenwhirl() {\n    // Main body - bulbous plant-like core\n    color(color_body)\n    union() {\n        // Central bulb\n        translate([0, 0, 10])\n        sphere(r = 15);\n        \n        // Lower body segment\n        translate([0, 0, 0])\n        scale([0.8, 0.8, 1.2])\n        sphere(r = 12);\n        \n        // Root-like tendrils\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([8, 0, -5])\n            rotate([90, 0, 0])\n            cylinder(h1 = 8, h2 = 2, r1 = 3, r2 = 1);\n        }\n    }\n    \n    // Head with fern fronds\n    color(color_body)\n    union() {\n        // Main head\n        translate([0, 0, 25])\n        sphere(r = 8);\n        \n        // Crown fronds\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([0, 10, 30])\n            rotate([45, 0, 0])\n            scale([0.3, 2, 0.1])\n            sphere(r = 8);\n        }\n    }\n    \n    // Eyes - glowing amber\n    color(color_eyes)\n    union() {\n        translate([-4, 5, 27])\n        sphere(r = 2);\n        translate([4, 5, 27])\n        sphere(r = 2);\n    }\n    \n    // Swirling fern wings\n    color(color_wings)\n    union() {\n        // Left wing\n        rotate([0, -20, -30])\n        translate([-20, 0, 15])\n        wing();\n        \n        // Right wing\n        rotate([0, 20, 30])\n        mirror([1, 0, 0])\n        translate([-20, 0, 15])\n        wing();\n    }\n    \n    // Spiral markings on body\n    color(color_details)\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([12, 0, 15])\n        rotate_extrude(angle = 90, $fn = 30)\n        translate([2, 0, 0])\n        circle(r = 1);\n    }\n}\n\n// Wing module with fern-like structure\nmodule wing() {\n    // Main wing stem\n    translate([0, 0, 0])\n    rotate([0, 0, 0])\n    cylinder(h = 40, r1 = 2, r2 = 0.5);\n    \n    // Fern fronds along wing\n    for(j = [0:5]) {\n        rotate([0, 0, j * 15])\n        translate([0, 0, j * 6])\n        rotate([90, 0, 0])\n        fern_frond(20 - j * 2);\n    }\n    \n    // Secondary fronds\n    for(k = [0:3]) {\n        rotate([0, 0, k * 30 - 15])\n        translate([0, 0, k * 10 + 5])\n        rotate([60, 0, 0])\n        fern_frond(12 - k * 2);\n    }\n}\n\n// Individual fern frond\nmodule fern_frond(length) {\n    for(i = [0:8]) {\n        rotate([0, 0, i * 12 - 48])\n        translate([0, i * 1.5, 0])\n        scale([1 - i * 0.08, 1 - i * 0.08, 0.1])\n        rotate([0, 0, 45])\n        linear_extrude(height = 0.5)\n        circle(r = length / 2);\n    }\n}\n\n// Base platform for stability\ncolor(\"#8b7355\")\ntranslate([0, 0, -2])\ncylinder(h = 2, r = 25);\n\n// Create the creature\nscale([scale_factor, scale_factor, scale_factor])\nbrackenwhirl();",
    "renders": true
  },
  {
    "mythical_creature": "cinderroot",
    "openscad_code": "// Cinderroot - Ember Spirit of the Deep Earth\n// A mythical creature of molten roots and glowing ember wings\n\n$fn = 32;\n\n// Main colors\ncolor_cinder = [0.8, 0.3, 0.1];\ncolor_embers = [1, 0.4, 0.1];\ncolor_glow = [1, 0.6, 0.2];\n\n// Scale factor for 3D printing (80mm height)\nscale_factor = 80;\n\n// Main body module\nmodule cinderroot_body() {\n    color(color_cinder)\n    union() {\n        // Core body - root bulb\n        translate([0, 0, 10])\n            scale([1.2, 1, 1.5])\n            sphere(10);\n        \n        // Lower root system\n        for(i = [0:120:359]) {\n            rotate([0, 0, i])\n            translate([8, 0, 0])\n                rotate([90, 0, 0])\n                cylinder(15, 3, 1);\n        }\n        \n        // Upper torso\n        translate([0, 0, 25])\n            scale([0.8, 0.7, 1.2])\n            sphere(8);\n    }\n}\n\n// Ember wings module\nmodule ember_wings() {\n    color(color_embers)\n    union() {\n        // Left wing\n        translate([-12, 0, 30])\n        rotate([0, 20, -30])\n        difference() {\n            union() {\n                // Main wing membrane\n                scale([1.5, 0.2, 1])\n                sphere(12);\n                \n                // Wing veins\n                for(i = [0:30:150]) {\n                    translate([i/10-7, 0, i/5-15])\n                    scale([0.1, 0.1, 2])\n                    rotate([0, 90, 0])\n                    cylinder(8, 0.5, 0.5);\n                }\n            }\n            \n            // Cut wing shape\n            translate([0, 5, 0])\n            cube(30, center=true);\n        }\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0])\n        translate([-12, 0, 30])\n        rotate([0, 20, -30])\n        difference() {\n            union() {\n                scale([1.5, 0.2, 1])\n                sphere(12);\n                \n                for(i = [0:30:150]) {\n                    translate([i/10-7, 0, i/5-15])\n                    scale([0.1, 0.1, 2])\n                    rotate([0, 90, 0])\n                    cylinder(8, 0.5, 0.5);\n                }\n            }\n            \n            translate([0, 5, 0])\n            cube(30, center=true);\n        }\n    }\n}\n\n// Horn and crest module\nmodule root_horns() {\n    color(color_cinder)\n    union() {\n        // Central crest\n        translate([0, 0, 35])\n        rotate([0, 0, 0])\n        cylinder(8, 3, 1);\n        \n        // Side horns\n        for(angle = [-30, 30]) {\n            rotate([0, 0, angle])\n            translate([6, 0, 32])\n            rotate([0, angle/2, 0])\n            cylinder(6, 2, 0.5);\n        }\n        \n        // Root tendrils\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([0, 0, 38])\n            rotate([45, 0, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(5, 1, 0.3);\n        }\n    }\n}\n\n// Glowing core module\nfunction glowing_core() {\n    color(color_glow)\n    translate([0, 0, 20])\n    scale([0.5, 0.5, 0.5])\n    sphere(8);\n}\n\n// Legs module\nmodule root_legs() {\n    color(color_cinder)\n    union() {\n        // Front roots\n        for(side = [-1, 1]) {\n            translate([side * 6, 0, 5])\n            rotate([0, side * 10, 0])\n            scale([0.5, 0.5, 1])\n            cylinder(12, 2, 3);\n            \n            // Root tips\n            translate([side * 8, 0, -6])\n            rotate([0, side * 20, 0])\n            scale([0.8, 0.8, 0.8])\n            sphere(2.5);\n        }\n        \n        // Back roots\n        for(side = [-1, 1]) {\n            translate([side * 4, 8, 5])\n            rotate([0, -side * 15, 20])\n            scale([0.4, 0.4, 1])\n            cylinder(10, 1.5, 2);\n        }\n    }\n}\n\n// Assembly\nscale(scale_factor / 80)\nunion() {\n    cinderroot_body();\n    ember_wings();\n    root_horns();\n    glowing_core();\n    root_legs();\n}",
    "renders": true
  },
  {
    "mythical_creature": "duskmire",
    "openscad_code": "// Duskmire - Shadow Dragon of the Twilight Realm\n// Winged serpentine creature with crystalline growths\n\n$fn = 32;\n\n// Main color scheme\ncolor(\"darkslategray\") {\n    \n    // Body segments\n    module body_segment(size, rot) {\n        translate([0, 0, -size/2])\n        rotate([rot, 0, 0])\n        scale([1.2, 1, 1])\n        sphere(size);\n    }\n    \n    // Main body\n    union() {\n        // Head\n        translate([0, 0, 40])\n        scale([1.5, 1.2, 1.3])\n        sphere(8);\n        \n        // Snout\n        translate([0, 12, 40])\n        rotate([15, 0, 0])\n        scale([0.8, 1.8, 0.6])\n        cylinder(h=10, r1=5, r2=2);\n        \n        // Neck and body\n        for(i = [0:5]) {\n            body_segment(7 - i*0.8, -i*15);\n        }\n        \n        // Tail\n        for(i = [6:12]) {\n            translate([0, 0, -i*8])\n            rotate([0, 0, i*5])\n            scale([1 - i*0.05, 1 - i*0.05, 1 - i*0.05])\n            sphere(6 - i*0.3);\n        }\n    }\n    \n    // Horns\n    color(\"indigo\") {\n        // Left horn\n        translate([-6, 8, 48])\n        rotate([-30, 0, 45])\n        cylinder(h=12, r1=2, r2=0.5);\n        \n        // Right horn\n        translate([6, 8, 48])\n        rotate([-30, 0, -45])\n        cylinder(h=12, r1=2, r2=0.5);\n        \n        // Back spikes\n        for(i = [0:3]) {\n            translate([0, -5 - i*3, 40 - i*8])\n            rotate([90 - i*10, 0, 0])\n            scale([0.5, 0.5, 1])\n            cylinder(h=3 + i*2, r1=2, r2=0.5);\n        }\n    }\n    \n    // Wings\n    color(\"darkslateblue\") {\n        // Left wing\n        translate([-15, 0, 35])\n        rotate([0, -30, -20])\n        union() {\n            // Wing membrane\n            translate([0, 0, 0])\n            rotate([0, 90, 0])\n            scale([1, 0.1, 1])\n            cylinder(h=30, r1=15, r2=5);\n            \n            // Wing bones\n            for(i = [0:3]) {\n                rotate([0, 0, i*30])\n                translate([0, 0, 0])\n                cylinder(h=20 - i*3, r1=0.5, r2=0.5);\n            }\n        }\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0])\n        translate([-15, 0, 35])\n        rotate([0, -30, -20])\n        union() {\n            translate([0, 0, 0])\n            rotate([0, 90, 0])\n            scale([1, 0.1, 1])\n            cylinder(h=30, r1=15, r2=5);\n            \n            for(i = [0:3]) {\n                rotate([0, 0, i*30])\n                translate([0, 0, 0])\n                cylinder(h=20 - i*3, r1=0.5, r2=0.5);\n            }\n        }\n    }\n    \n    // Legs\n    color(\"darkslategray\") {\n        // Front left leg\n        translate([-8, 5, 30])\n        rotate([30, 0, 10])\n        cylinder(h=15, r1=2, r2=1.5);\n        \n        // Front right leg\n        translate([8, 5, 30])\n        rotate([30, 0, -10])\n        cylinder(h=15, r1=2, r2=1.5);\n        \n        // Back left leg\n        translate([-6, -5, 10])\n        rotate([60, 0, 20])\n        cylinder(h=12, r1=2, r2=1.5);\n        \n        // Back right leg\n        translate([6, -5, 10])\n        rotate([60, 0, -20])\n        cylinder(h=12, r1=2, r2=1.5);\n    }\n    \n    // Crystalline growths (magical essence)\n    color(\"rebeccapurple\") {\n        // Head crystal\n        translate([0, 2, 50])\n        scale([0.8, 0.8, 1.2])\n        sphere(3);\n        \n        // Body crystals\n        for(i = [0:2]) {\n            translate([sin(i*120)*5, cos(i*120)*5, 35 - i*10])\n            scale([1, 1, 1.5])\n            sphere(2);\n        }\n        \n        // Tail tip crystal\n        translate([0, 0, -100])\n        scale([1.5, 1.5, 2])\n        sphere(1.5);\n    }\n    \n    // Eyes (glowing)\n    color(\"mediumvioletred\") {\n        translate([-3, 10, 42])\n        sphere(1.5);\n        \n        translate([3, 10, 42])\n        sphere(1.5);\n    }\n}\n\n// Base platform for stability\ncolor(\"dimgray\") {\n    translate([0, 0, -110])\n    cylinder(h=3, r=25);\n}",
    "renders": true
  },
  {
    "mythical_creature": "emberglade",
    "openscad_code": "// Emberglade - mythical fire spirit creature\n// Size: 70mm wingspan, 40mm tall\n\n$fn = 32;\nscale_factor = 0.7;\n\nmodule emberglade() {\n    // Main body - organic flame shape\n    color(\"orangered\")\n    union() {\n        // Core body\n        translate([0, 0, 10])\n        scale([1.2, 0.8, 1.5])\n        sphere(8);\n        \n        // Chest flame\n        translate([0, -5, 8])\n        scale([0.8, 0.6, 1.2])\n        sphere(6);\n    }\n    \n    // Head with draconic features\n    color(\"darkorange\")\n    union() {\n        // Snout\n        translate([0, -12, 18])\n        rotate([0, 10, 0])\n        scale([0.8, 0.6, 0.4])\n        cylinder(h=8, r1=5, r2=3);\n        \n        // Head\n        translate([0, -8, 20])\n        scale([1, 0.9, 0.8])\n        sphere(7);\n        \n        // Horns - curved flame horns\n        for(i = [-1, 1]) {\n            translate([i*3, -6, 25])\n            rotate([0, i*15, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=8, r1=1, r2=0.5);\n        }\n    }\n    \n    // Wings - flame membranes\n    color(\"goldenrod\")\n    for(side = [-1, 1]) {\n        translate([side*12, 0, 22])\n        rotate([0, 0, side*20])\n        scale([side, 1, 1])\n        union() {\n            // Upper wing\n            translate([0, 0, 0])\n            rotate([0, -30, 0])\n            scale([1, 0.3, 0.1])\n            sphere(15);\n            \n            // Lower wing\n            translate([5, -5, -5])\n            rotate([0, -45, 0])\n            scale([0.7, 0.2, 0.05])\n            sphere(12);\n            \n            // Wing flame details\n            for(i = [0:2]) {\n                translate([8-i*3, -2-i*2, -2-i])\n                scale([0.3, 0.3, 0.3])\n                sphere(3);\n            }\n        }\n    }\n    \n    // Tail - segmented flame\n    color(\"red\")\n    union() {\n        for(i = [0:4]) {\n            translate([0, 5+i*4, max(8-i*2, 2)])\n            scale([1-i*0.15, 1-i*0.15, 0.8])\n            sphere(5-i);\n        }\n    }\n    \n    // Legs - sturdy flame pillars\n    color(\"orangered\")\n    for(side = [-1, 1]) {\n        translate([side*4, 0, 0])\n        union() {\n            // Upper leg\n            translate([0, 0, 5])\n            rotate([0, 0, side*10])\n            scale([0.4, 0.4, 1])\n            cylinder(h=8, r1=3, r2=2);\n            \n            // Lower leg\n            translate([0, 0, 0])\n            scale([0.3, 0.3, 1])\n            cylinder(h=5, r1=2, r2=3);\n            \n            // Feet - clawed\n            translate([side*1, -2, 0])\n            scale([1, 0.5, 0.3])\n            sphere(3);\n        }\n    }\n    \n    // Flame aura around body\n    color(\"yellow\")\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n        translate([8, 0, 12])\n        scale([0.5, 0.5, 1])\n        sphere(2);\n    }\n    \n    // Eyes - glowing embers\n    color(\"white\")\n    for(side = [-1, 1]) {\n        translate([side*2, -14, 20])\n        scale([0.5, 0.3, 0.3])\n        sphere(2);\n    }\n}\n\n// Generate the creature\nscale([scale_factor, scale_factor, scale_factor])\nemberglade();",
    "renders": true
  },
  {
    "mythical_creature": "fernwhisper",
    "openscad_code": "// Fernwhisper - mythical forest guardian\n// Realistic style, medium complexity, 3D printable\n\n$fn = 32;\n\n// Main creature module\nmodule fernwhisper() {\n    // Body - main trunk\n    color([0.3, 0.6, 0.3])\n    translate([0, 0, 15])\n    scale([1, 0.8, 2])\n    sphere(8);\n    \n    // Head with fern crown\n    color([0.2, 0.5, 0.2])\n    translate([0, 0, 35])\n    rotate([0, 0, 0])\n    scale([0.9, 0.9, 1.1])\n    sphere(7);\n    \n    // Fern crown leaves\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([0, 7, 42])\n        rotate([20, 0, -20])\n        scale([0.3, 1.5, 0.1])\n        color([0.1, 0.4, 0.1])\n        cube([3, 8, 1]);\n    }\n    \n    // Antlers/horns\n    for(side = [-1, 1]) {\n        // Left antler\n        translate([side * 5, 0, 42])\n        rotate([0, side * 20, 0])\n        color([0.4, 0.3, 0.2])\n        cylinder(h = 12, r1 = 1.5, r2 = 0.5);\n        \n        // Antler branches\n        translate([side * 7, 0, 48])\n        rotate([0, side * 30, 0])\n        color([0.4, 0.3, 0.2])\n        cylinder(h = 6, r1 = 1, r2 = 0.3);\n    }\n    \n    // Wings - translucent leaf-like\n    for(side = [-1, 1]) {\n        color([0.2, 0.5, 0.2, 0.7])\n        translate([side * 12, 0, 28])\n        rotate([0, side * 10, 0])\n        scale([1.5, 0.3, 1])\n        difference() {\n            sphere(10);\n            translate([side * -10, 0, 0])\n            cube([20, 20, 20]);\n        }\n    }\n    \n    // Legs\n    for(x = [-6, 6]) {\n        color([0.3, 0.5, 0.3])\n        translate([x, 0, 0])\n        rotate([0, 0, 0])\n        cylinder(h = 15, r1 = 2.5, r2 = 2);\n        \n        // Hooves\n        color([0.3, 0.25, 0.2])\n        translate([x, 0, 0])\n        cylinder(h = 2, r1 = 2.5, r2 = 3);\n    }\n    \n    // Tail - fern frond\n    color([0.2, 0.4, 0.2])\n    translate([0, -10, 15])\n    rotate([0, 90, 0])\n    scale([0.5, 3, 0.2])\n    cylinder(h = 20, r1 = 3, r2 = 1);\n    \n    // Leaf details on tail\n    for(i = [1:5]) {\n        color([0.1, 0.4, 0.1])\n        translate([0, -10 - i * 3, 15])\n        rotate([0, 90, i * 15])\n        scale([0.3, 1.5, 0.1])\n        cube([2, 4, 0.5]);\n    }\n    \n    // Eyes - glowing amber\n    for(side = [-1, 1]) {\n        color([1, 0.6, 0.2])\n        translate([side * 4, 5, 37])\n        sphere(1.5);\n        \n        // Pupil\n        color([0.1, 0.1, 0.1])\n        translate([side * 4.5, 5.5, 37.5])\n        sphere(0.7);\n    }\n    \n    // Moss/fungus details\n    for(i = [0:10]) {\n        angle = i * 36;\n        radius = 6 + sin(i * 5) * 2;\n        color([0.1, 0.3, 0.1])\n        translate([\n            cos(angle) * radius * 0.5,\n            sin(angle) * radius * 0.5,\n            20 + sin(i * 3) * 3\n        ])\n        sphere(0.8);\n    }\n    \n    // Magical sparkles around body\n    for(i = [0:8]) {\n        angle = i * 45;\n        height = 15 + i * 2;\n        color([0.5, 0.8, 0.5, 0.6])\n        translate([\n            cos(angle) * 10,\n            sin(angle) * 10,\n            height\n        ])\n        sphere(0.5);\n    }\n}\n\n// Create the creature\nfernwhisper();",
    "renders": true
  },
  {
    "mythical_creature": "glaciersylph",
    "openscad_code": "// Glaciersylph - Ice elemental fairy creature\n// 3D printable mythical creature with ice crystal wings and frost patterns\n\nmodule ice_crystal(scale_factor=1, rotation=[0,0,0]) {\n    color(\"LightBlue\", 0.7)\n    rotate(rotation)\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Main crystal body\n        cube([2, 2, 8], center=true);\n        \n        // Crystal facets\n        translate([1, 1, 2]) rotate([45,0,0]) cube([1.5, 1.5, 4], center=true);\n        translate([-1, -1, 2]) rotate([45,0,0]) cube([1.5, 1.5, 4], center=true);\n        translate([1, -1, -2]) rotate([-45,0,0]) cube([1.5, 1.5, 4], center=true);\n        translate([-1, 1, -2]) rotate([-45,0,0]) cube([1.5, 1.5, 4], center=true);\n    }\n}\n\nmodule wing() {\n    color(\"LightBlue\", 0.6)\n    translate([0, 0, 0])\n    union() {\n        // Main wing membrane\n        scale([1, 3, 0.2])\n        sphere(5);\n        \n        // Ice crystals along wing edge\n        for(i = [0:30:120]) {\n            rotate([0, 0, i])\n            translate([0, 12, 0])\n            ice_crystal(0.3, [90,0,0]);\n        }\n    }\n}\n\nmodule tail_segment(radius, height, z_offset) {\n    color(\"LightCyan\", 0.8)\n    translate([0, 0, z_offset])\n    cylinder(h=height, r=radius, $fn=8);\n}\n\nmodule tail() {\n    // Segmented tail with decreasing size\n    for(i = [0:1:5]) {\n        tail_segment(5-i*0.7, 3, -i*2.5);\n    }\n}\n\nmodule horn() {\n    color(\"LightBlue\", 0.9)\n    union() {\n        // Base\n        cylinder(h=3, r1=2, r2=1.5, $fn=6);\n        \n        // Spiral\n        translate([0, 0, 3])\n        cylinder(h=6, r1=1.5, r2=0.5, $fn=6);\n    }\n}\n\nmodule body() {\n    color(\"LightCyan\", 0.85)\n    union() {\n        // Torso\n        scale([1, 1.2, 1.5])\n        sphere(8);\n        \n        // Head\n        translate([0, 0, 12])\n        scale([0.8, 0.8, 1])\n        sphere(6);\n        \n        // Horns\n        translate([3, 0, 15])\n    rotate([30, 0, 30])\n    horn();\n        translate([-3, 0, 15])\n    rotate([30, 0, -30])\n    horn();\n    }\n}\n\nmodule arms() {\n    color(\"LightCyan\", 0.85)\n    union() {\n        // Left arm\n        translate([8, 0, 8])\n    rotate([0, 45, 0])\n    scale([1, 1, 3])\n    sphere(2);\n        \n        // Right arm\n        translate([-8, 0, 8])\n    rotate([0, -45, 0])\n    scale([1, 1, 3])\n    sphere(2);\n    }\n}\n\nmodule legs() {\n    color(\"LightCyan\", 0.85)\n    union() {\n        // Left leg\n        translate([3, 0, -10])\n    rotate([0, 0, 0])\n    cylinder(h=10, r=2, $fn=8);\n        \n        // Right leg\n        translate([-3, 0, -10])\n    rotate([0, 0, 0])\n    cylinder(h=10, r=2, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Center the model\n    translate([0, 0, 10])\n    union() {\n        // Body parts\n        body();\n        arms();\n        legs();\n        tail();\n        \n        // Wings\n        translate([0, 0, 6])\n        rotate([0, 0, 30])\n        wing();\n        \n        translate([0, 0, 6])\n        rotate([0, 0, -30])\n        mirror([1,0,0])\n        wing();\n        \n        // Ice aura effect\n        color(\"White\", 0.3)\n        translate([0, 0, 5])\n        scale([1.2, 1.2, 1.2])\n        sphere(10);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "hazelshade",
    "openscad_code": "// Hazelshade - Mythical forest guardian\n// A serpentine dragon with bark-textured wings and glowing amber eyes\n\n// Main colors\nbody_color = \"#3D2817\";  // Dark bark brown\nwing_color = \"#5D4E37\";  // Lighter bark\neye_color = \"#FF8C00\";   // Amber glow\naccent_color = \"#8B4513\"; // Branch details\n\n// Overall dimensions\nscale_factor = 0.8;  // Scales model to ~80mm length\n\n// Create the full creature\nunion() {\n    translate([0, 0, 5]) scale(scale_factor) {\n        // Body segments\n        body();\n        \n        // Wings\n        wings();\n        \n        // Head\n        head();\n        \n        // Tail\n        tail();\n        \n        // Legs\n        legs();\n    }\n}\n\n// Main body module\nmodule body() {\n    color(body_color) {\n        // Torso - elongated oval\n        rotate([90, 0, 0]) \n            scale([1.2, 1, 1.5])\n            sphere(8, $fn=20);\n        \n        // Neck connection\n        translate([0, 0, 12])\n            rotate([90, 0, 0])\n            scale([0.8, 0.8, 1.2])\n            cylinder(6, 5, 3, $fn=12);\n    }\n}\n\n// Bark-textured wings\nmodule wings() {\n    color(wing_color) {\n        // Left wing\n        translate([-8, 0, 8]) {\n            rotate([0, 30, -20]) {\n                difference() {\n                    // Main wing membrane\n                    scale([1.5, 1, 0.1])\n                    sphere(8, $fn=6);\n                    \n                    // Wing holes for texture\n                    for(i = [1:5]) {\n                        translate([i*2-5, i, 0])\n                        scale([0.3, 0.3, 2])\n                        sphere(2, $fn=8);\n                    }\n                }\n                \n                // Wing arm\n                color(accent_color)\n                translate([6, 0, 0])\n                rotate([0, 0, 90])\n                cylinder(12, 1, 0.5, $fn=8);\n            }\n        }\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0]) {\n            translate([-8, 0, 8]) {\n                rotate([0, 30, -20]) {\n                    difference() {\n                        scale([1.5, 1, 0.1])\n                        sphere(8, $fn=6);\n                        \n                        for(i = [1:5]) {\n                            translate([i*2-5, i, 0])\n                            scale([0.3, 0.3, 2])\n                            sphere(2, $fn=8);\n                        }\n                    }\n                    \n                    color(accent_color)\n                    translate([6, 0, 0])\n                    rotate([0, 0, 90])\n                    cylinder(12, 1, 0.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Dragon head\nmodule head() {\n    color(body_color) {\n        // Snout\n        translate([0, 0, 20])\n        rotate([90, 0, 0])\n        scale([0.8, 0.6, 1.2])\n        cylinder(8, 4, 2, $fn=12);\n        \n        // Head base\n        translate([0, 0, 15])\n        sphere(5, $fn=16);\n        \n        // Horns\n        color(accent_color) {\n            translate([2, 3, 17])\n            rotate([30, 0, 30])\n            cylinder(6, 1, 0.5, $fn=6);\n            \n            translate([-2, 3, 17])\n            rotate([30, 0, -30])\n            cylinder(6, 1, 0.5, $fn=6);\n        }\n        \n        // Eyes - glowing amber\n        color(eye_color) {\n            translate([2.5, 2.5, 17])\n            sphere(1.2, $fn=8);\n            \n            translate([-2.5, 2.5, 17])\n            sphere(1.2, $fn=8);\n        }\n    }\n}\n\n// Serpentine tail\nmodule tail() {\n    color(body_color) {\n        // Segmented tail\n        for(i = [1:8]) {\n            translate([0, 0, -i*3.5])\n            rotate([0, 0, i*15])\n            scale([1 - i*0.08, 1 - i*0.08, 1])\n            sphere(4, $fn=12);\n        }\n        \n        // Tail tip\n        translate([0, 0, -30])\n        scale([0.3, 0.3, 1])\n        sphere(3, $fn=8);\n    }\n}\n\n// Four legs\nmodule legs() {\n    color(body_color) {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side*6, 0, 5]) {\n                rotate([0, 30, 0])\n                cylinder(8, 1.5, 1, $fn=8);\n                \n                // Feet\n                translate([0, 0, -8.5])\n                scale([1.5, 2, 0.5])\n                sphere(2, $fn=8);\n            }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([side*5, 0, -5]) {\n                rotate([0, -30, 0])\n                cylinder(7, 1.5, 1.2, $fn=8);\n                \n                // Feet\n                translate([0, 0, -7.5])\n                scale([1.5, 2, 0.5])\n                sphere(2, $fn=8);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "ivysprite",
    "openscad_code": "// IvySprite - A mythical forest sprite made of living ivy\n// Total height: 80mm, wingspan: 60mm\n\n$fn = 32;\n\n// Main module\nmodule ivySprite() {\n    // Root ball base for stability\n    color(\"darkgreen\") translate([0,0,0]) sphere(d=15);\n    \n    // Ivy-covered body\n    ivyBody();\n    \n    // Wings\n    wings();\n    \n    // Head with leaf hair\n    head();\n    \n    // Arms made of twisted vines\n    arms();\n    \n    // Magical glow orbs\n    glowOrbs();\n}\n\nmodule ivyBody() {\n    // Tapered torso made of vines\n    for(i=[0:5]) {\n        color(\"forestgreen\") \n        rotate([0,0,i*60]) \n        translate([0,0,i*8+10]) \n        cylinder(h=12, d1=12-i, d2=10-i, center=true);\n    }\n    \n    // Ivy leaf scales\n    for(i=[0:20]) {\n        angle = i * 18;\n        height = 15 + (i % 3) * 8;\n        color(\"limegreen\") \n        rotate([0,0,angle]) \n        translate([7,0,height]) \n        scale([0.8,0.3,0.5]) \n        sphere(d=6);\n    }\n}\n\nmodule wings() {\n    // Left wing\n    color(\"seagreen\") \n    translate([-12,0,55]) \n    rotate([0,0,-30]) \n    scale([1,0.2,1]) \n    difference() {\n        sphere(d=20);\n        translate([5,0,0]) sphere(d=18);\n    }\n    \n    // Right wing\n    color(\"seagreen\") \n    translate([12,0,55]) \n    rotate([0,0,30]) \n    mirror([1,0,0]) \n    scale([1,0.2,1]) \n    difference() {\n        sphere(d=20);\n        translate([5,0,0]) sphere(d=18);\n    }\n    \n    // Wing vines\n    for(side=[-1,1]) {\n        color(\"darkgreen\") \n        translate([side*20,0,60]) \n        rotate([0,0,side*30]) \n        cylinder(h=25, d1=3, d2=1);\n    }\n}\n\nmodule head() {\n    // Ivy bulb head\n    color(\"forestgreen\") \n    translate([0,0,70]) \n    sphere(d=12);\n    \n    // Leafy hair\n    for(i=[0:8]) {\n        angle = i * 45;\n        color(\"lime\") \n        rotate([0,0,angle]) \n        translate([0,0,78]) \n        rotate([45,0,0]) \n        scale([1,0.5,0.3]) \n        sphere(d=8);\n    }\n    \n    // Eyes\n    for(side=[-1,1]) {\n        color(\"yellow\") \n        translate([side*3,3,72]) \n        sphere(d=2);\n    }\n    \n    // Vine horns\n    for(side=[-1,1]) {\n        color(\"darkgreen\") \n        translate([side*4,0,78]) \n        rotate([0,side*20,0]) \n        cylinder(h=8, d1=2, d2=1);\n    }\n}\n\nmodule arms() {\n    // Left arm\n    color(\"forestgreen\") \n    translate([-8,0,45]) \n    rotate([0,0,-45]) \n    cylinder(h=15, d1=3, d2=2);\n    \n    // Left hand\n    color(\"lime\") \n    translate([-18,-2,38]) \n    sphere(d=4);\n    \n    // Right arm\n    color(\"forestgreen\") \n    translate([8,0,45]) \n    rotate([0,0,45]) \n    cylinder(h=15, d1=3, d2=2);\n    \n    // Right hand\n    color(\"lime\") \n    translate([18,-2,38]) \n    sphere(d=4);\n}\n\nmodule glowOrbs() {\n    // Magical orbs floating around\n    for(i=[0:3]) {\n        angle = i * 90;\n        color(\"palegreen\") \n        translate([cos(angle)*20, sin(angle)*20, 50+i*5]) \n        sphere(d=3);\n    }\n}\n\n// Render the sprite\nivySprite();",
    "renders": true
  },
  {
    "mythical_creature": "juniperling",
    "openscad_code": "// Juniperling - A mythical tree-spirit creature with juniper-like features\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Main color scheme\njuniper_green = [0.2, 0.4, 0.2];\njuniper_blue = [0.1, 0.2, 0.3];\nwood_brown = [0.4, 0.3, 0.2];\nberry_purple = [0.3, 0.1, 0.4];\n\n// Main body module\nmodule juniperling_body() {\n    union() {\n        // Torso - tapered cylinder\n        color(juniper_green)\n        cylinder(h = 30, r1 = 12, r2 = 8, center = true);\n        \n        // Head\n        translate([0, 0, 25])\n        color(juniper_green)\n        sphere(r = 8);\n        \n        // Bark texture rings\n        for(i = [1:5]) {\n            translate([0, 0, -15 + i*6])\n            color(wood_brown)\n            rotate_extrude()\n            translate([11, 0, 0])\n            circle(r = 0.5);\n        }\n    }\n}\n\n// Arms made of twisted branches\nmodule arm(side) {\n    translate([side * 15, 0, 15])\n    rotate([0, 0, side * 20])\n    union() {\n        // Upper arm\n        color(wood_brown)\n        cylinder(h = 15, r = 2, center = true);\n        \n        // Lower arm\n        translate([0, 0, 8])\n        rotate([0, side * 30, 0])\n        color(wood_brown)\n        cylinder(h = 12, r = 1.5, center = true);\n        \n        // Hand with three fingers\n        translate([0, 0, 14])\n        for(f = [-1:1]) {\n            translate([f * 2, 0, 0])\n            rotate([0, f * 15, 0])\n            color(wood_brown)\n            cylinder(h = 4, r = 0.8, center = true);\n        }\n    }\n}\n\n// Legs with root-like feet\nmodule leg(side) {\n    translate([side * 8, 0, -20])\n    rotate([0, 0, side * 10])\n    union() {\n        // Upper leg\n        color(wood_brown)\n        cylinder(h = 18, r = 3, center = true);\n        \n        // Lower leg\n        translate([0, 0, -9])\n        color(wood_brown)\n        cylinder(h = 15, r = 2.5, center = true);\n        \n        // Root-like foot\n        translate([0, 0, -18])\n        difference() {\n            color(wood_brown)\n            sphere(r = 4);\n            // Carve out bottom for flat printing\n            translate([0, 0, -4])\n            cube([10, 10, 8], center = true);\n        }\n        \n        // Root tendrils\n        for(a = [0:60:300]) {\n            rotate([0, 0, a])\n            translate([3, 0, -20])\n            color(wood_brown)\n            cylinder(h = 6, r1 = 1, r2 = 0.3, center = true);\n        }\n    }\n}\n\n// Juniper-like wings made of scales\nmodule wing(side) {\n    translate([side * 15, 0, 20])\n    rotate([0, side * -20, side * 30])\n    union() {\n        // Wing base\n        color(juniper_blue)\n        cylinder(h = 3, r = 2, center = true);\n        \n        // Wing membrane segments\n        for(i = [0:3]) {\n            rotate([0, 0, i * 15 * side])\n            translate([5 + i*3, 0, 0])\n            scale([1, 0.3, 1])\n            color(juniper_blue)\n            sphere(r = 4 - i);\n            \n            // Scales on wings\n            for(j = [0:5]) {\n                rotate([0, 0, j * 25 * side])\n                translate([3 + i*2, 0, 0])\n                color(juniper_green)\n                scale([1, 0.5, 0.2])\n                sphere(r = 1);\n            }\n        }\n    }\n}\n\n// Antler-like juniper branches\nmodule antler(side) {\n    translate([side * 6, 0, 30])\n    rotate([0, 0, side * 45])\n    union() {\n        // Main branch\n        color(wood_brown)\n        cylinder(h = 12, r = 1.5, center = true);\n        \n        // Side branches\n        for(i = [1:3]) {\n            translate([0, 0, 4 + i*2])\n            rotate([0, 0, i * 30 * side])\n            color(wood_brown)\n            cylinder(h = 6, r = 0.8, center = true);\n            \n            // Juniper berries\n            translate([3, 0, 0])\n            color(berry_purple)\n            sphere(r = 0.8);\n        }\n        \n        // Tip berry cluster\n        translate([0, 0, 7])\n        for(b = [0:90:270]) {\n            rotate([b, 0, 0])\n            translate([0, 0, 1.5])\n            color(berry_purple)\n            sphere(r = 0.6);\n        }\n    }\n}\n\n// Magical aura particles\nmodule aura_particle(x, y, z) {\n    translate([x, y, z])\n    color([0.5, 0.7, 0.5, 0.5])\n    sphere(r = 0.5);\n}\n\n// Main assembly\nunion() {\n    // Body\n    juniperling_body();\n    \n    // Arms\n    arm(1);\n    arm(-1);\n    \n    // Legs\n    leg(1);\n    leg(-1);\n    \n    // Wings\n    wing(1);\n    wing(-1);\n    \n    // Antlers\n    antler(1);\n    antler(-1);\n    \n    // Magical aura\n    for(i = [0:20]) {\n        aura_particle(\n            sin(i*137.5)*15,\n            cos(i*137.5)*15,\n            10 + sin(i*73.2)*5\n        );\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "kindlewink",
    "openscad_code": "// Kindlewink - a small fire sprite that guards ancient hearths\n// Realistic style, medium complexity, 3D printable\n\n// Main module for the kindlewink creature\nmodule kindlewink() {\n    color(\"FireBrick\")\n    union() {\n        // Body - slightly elongated torso\n        translate([0, 0, 5])\n        scale([1.2, 0.8, 1.5])\n        sphere(d=20, $fn=32);\n        \n        // Head with flame-like crest\n        translate([0, 0, 25])\n        scale([0.9, 0.9, 1.1])\n        sphere(d=18, $fn=32);\n        \n        // Flame crest on head\n        color(\"Orange\")\n        for(i=[0:15:60]) {\n            rotate([0, 0, i])\n            translate([0, 6, 32])\n            scale([0.3, 0.3, 2])\n            cylinder(h=8, d1=3, d2=1, $fn=8);\n        }\n        \n        // Ember eyes\n        color(\"Gold\")\n        translate([-5, 8, 27])\n        sphere(d=2.5, $fn=16);\n        translate([5, 8, 27])\n        sphere(d=2.5, $fn=16);\n        \n        // Wings - ember-like structures\n        color(\"DarkOrange\")\n        // Left wing\n        translate([-12, 0, 20])\n        rotate([0, 0, -30])\n        scale([1.5, 0.2, 1])\n        difference() {\n            sphere(d=15, $fn=32);\n            translate([8, 0, 0])\n            cube([20, 20, 20], center=true);\n        }\n        \n        // Right wing\n        translate([12, 0, 20])\n        rotate([0, 0, 30])\n        scale([1.5, 0.2, 1])\n        difference() {\n            sphere(d=15, $fn=32);\n            translate([-8, 0, 0])\n            cube([20, 20, 20], center=true);\n        }\n        \n        // Arms\n        color(\"FireBrick\")\n        // Left arm\n        translate([-10, 0, 15])\n        rotate([0, 0, -45])\n        cylinder(h=12, d1=4, d2=3, $fn=16);\n        \n        // Right arm\n        translate([10, 0, 15])\n        rotate([0, 0, 45])\n        cylinder(h=12, d1=4, d2=3, $fn=16);\n        \n        // Legs\n        // Left leg\n        translate([-4, 0, 0])\n        cylinder(h=10, d1=5, d2=4, $fn=16);\n        \n        // Right leg\n        translate([4, 0, 0])\n        cylinder(h=10, d1=5, d2=4, $fn=16);\n        \n        // Feet\n        color(\"SaddleBrown\")\n        translate([-4, 2, -5])\n        scale([1.2, 1.8, 0.5])\n        sphere(d=6, $fn=16);\n        translate([4, 2, -5])\n        scale([1.2, 1.8, 0.5])\n        sphere(d=6, $fn=16);\n        \n        // Tail made of fire segments\n        color(\"Orange\")\n        tail_segment([0, 0, 0], 0, 12, 4);\n        tail_segment([0, -6, -2], 180, 10, 3.5);\n        tail_segment([0, -11, -3], 180, 8, 3);\n        tail_segment([0, -15, -4], 180, 6, 2.5);\n    }\n}\n\n// Module for creating flame tail segments\nmodule tail_segment(pos, rot, length, width) {\n    translate(pos)\n    rotate([rot, 0, 0])\n    scale([width/length, 1, 1])\n    cylinder(h=length, d1=width, d2=width*0.7, $fn=12);\n}\n\n// Create the kindlewink\nkindlewink();\n\n// Add a simple base for stability\ncolor(\"SaddleBrown\")\ntranslate([0, 0, -8])\ncylinder(h=3, d=30, $fn=32);",
    "renders": true
  },
  {
    "mythical_creature": "lunarshade",
    "openscad_code": "// Lunarshade - Mythical creature of moonlight and shadow\n// Realistic style with medium complexity\n\n$fa = 2;\n$fs = 0.5;\n\n// Main creature module\nmodule lunarshade() {\n    // Body - elongated crescent shape\n    color(\"slateblue\") {\n        rotate([90, 0, 0]) \n            scale([1.5, 0.8, 2]) \n                sphere(d=20, $fn=32);\n    }\n    \n    // Head - angular with lunar features\n    translate([0, 0, 22]) {\n        color(\"midnightblue\") {\n            rotate([90, 0, 0])\n                difference() {\n                    scale([1.2, 1, 1.3]) sphere(d=15, $fn=24);\n                    translate([-8, -8, -8]) cube([16, 16, 16]);\n                }\n            \n            // Crescent moon horns\n            rotate([0, -30, 0])\n                translate([0, 6, 0])\n                    scale([1, 0.4, 0.2])\n                        cylinder(h=12, d=8, $fn=3);\n            \n            rotate([0, 30, 0])\n                translate([0, -6, 0])\n                    scale([1, 0.4, 0.2])\n                        cylinder(h=12, d=8, $fn=3);\n            \n            // Eyes - glowing orbs\n            translate([4, 3, 2])\n                scale([0.8, 0.8, 0.8])\n                    color(\"cyan\") sphere(d=3, $fn=12);\n            translate([-4, 3, 2])\n                scale([0.8, 0.8, 0.8])\n                    color(\"cyan\") sphere(d=3, $fn=12);\n        }\n    }\n    \n    // Wings - ethereal membrane wings\n    module wing(side) {\n        translate([side * 15, 0, 15]) {\n            rotate([0, 0, side * 20]) {\n                color(\"lavender\", 0.6) {\n                    // Wing membrane\n                    difference() {\n                        scale([2, 1.5, 0.3])\n                            sphere(d=25, $fn=6);\n                        translate([0, 0, -1])\n                            cylinder(h=3, d=20, $fn=6);\n                    }\n                    \n                    // Wing bones\n                    for(i = [0:30:120]) {\n                        rotate([0, 0, i * side])\n                            translate([0, 0, 0.5])\n                                color(\"darkslateblue\")\n                                    cube([18, 0.5, 1]);\n                    }\n                }\n            }\n        }\n    }\n    \n    wing(1);\n    wing(-1);\n    \n    // Tail - flowing shadow tail\n    translate([0, 0, -25]) {\n        color(\"indigo\") {\n            rotate([0, 0, 0])\n                for(i = [0:5:30]) {\n                    translate([0, sin(i*3)*3, -i*1.5])\n                        rotate([0, 0, sin(i*3)*10])\n                            scale([1-i/30, 1-i/30, 1])\n                                sphere(d=8-i/4, $fn=12);\n                }\n        }\n    }\n    \n    // Legs - slender with moon markings\n    module leg(side) {\n        translate([side * 5, 0, -10]) {\n            color(\"slateblue\") {\n                // Upper leg\n                rotate([0, side * 15, 0])\n                    cylinder(h=12, d=4, $fn=8);\n                \n                // Lower leg\n                translate([0, 0, -8])\n                    rotate([0, side * -20, 0])\n                        cylinder(h=10, d=3, $fn=8);\n                \n                // Paw with moon markings\n                translate([0, 0, -15])\n                    sphere(d=5, $fn=12);\n                \n                // Crescent marking\n                translate([0, 2, -14])\n                    rotate([90, 0, 0])\n                        color(\"silver\", 0.7)\n                            cylinder(h=0.5, d=3, $fn=3);\n            }\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Moon phases pattern on back\n    translate([0, 0, 12]) {\n        rotate([90, 0, 0])\n            for(i = [0:45:315]) {\n                rotate([0, 0, i])\n                    translate([0, 5, 0])\n                        color(\"silver\", 0.5)\n                            scale([1, 1, 0.3])\n                                sphere(d=3, $fn=12);\n            }\n    }\n    \n    // Shadow wisps around body\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([8*cos(i*3), 8*sin(i*3), -5])\n                color(\"darkslateblue\", 0.3)\n                    sphere(d=2, $fn=6);\n    }\n}\n\nlunarshade();",
    "renders": true
  },
  {
    "mythical_creature": "mireglow",
    "openscad_code": "// Mireglow - Mythical swamp dragon with bioluminescent features\n// 3D printable model with medium complexity\n\n$fn = 24;  // Resolution for curves\n\n// Main color scheme\ncolor_body = [0.2, 0.4, 0.1];  // Dark swamp green\ncolor_glow = [0.1, 0.9, 0.6];   // Cyan bioluminescence\ncolor_accent = [0.3, 0.2, 0.1]; // Brown accents\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main module\nmodule mireglow() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Body\n            color(color_body) body();\n            \n            // Head\n            color(color_body) head();\n            \n            // Wings\n            color(color_body) wings();\n            \n            // Legs\n            color(color_body) legs();\n            \n            // Tail\n            color(color_body) tail();\n            \n            // Bioluminescent spots\n            color(color_glow) glow_spots();\n            \n            // Horns\n            color(color_accent) horns();\n        }\n    }\n}\n\n// Body - elongated oval shape\nmodule body() {\n    translate([0, 0, 20]) {\n        scale([2, 1, 1.2]) \n            sphere(15);\n    }\n}\n\n// Head with snout\nmodule head() {\n    translate([35, 0, 25]) {\n        rotate([0, -10, 0]) {\n            union() {\n                // Main head\n                sphere(12);\n                \n                // Snout\n                translate([10, 0, -2]) {\n                    scale([2, 1, 0.8])\n                        sphere(6);\n                }\n                \n                // Eyes\n                translate([8, 8, 4]) {\n                    scale([1, 1, 1.2])\n                        sphere(3);\n                }\n                translate([8, -8, 4]) {\n                    scale([1, 1, 1.2])\n                        sphere(3);\n                }\n                \n                // Nostrils\n                translate([16, 3, 0]) {\n                    cylinder(h=2, r=1.5);\n                }\n                translate([16, -3, 0]) {\n                    cylinder(h=2, r=1.5);\n                }\n            }\n        }\n    }\n}\n\n// Wings with membrane structure\nmodule wings() {\n    // Right wing\n    translate([0, 20, 30]) {\n        rotate([0, 0, 30]) {\n            rotate([0, 30, 0]) {\n                difference() {\n                    // Wing membrane\n                    scale([1.5, 0.1, 1]) {\n                        sphere(25);\n                    }\n                    \n                    // Wing holes for detail\n                    for(i = [0:2]) {\n                        translate([-10 + i*10, 0, -5 + i*5]) {\n                            scale([1, 0.5, 0.3])\n                                sphere(5);\n                        }\n                    }\n                }\n                \n                // Wing bone structure\n                for(i = [0:3]) {\n                    rotate([0, 0, i*15]) {\n                        translate([10 + i*5, 0, 0]) {\n                            rotate([90, 0, 0]) {\n                                cylinder(h=20, r=1.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Left wing (mirrored)\n    mirror([0, 1, 0]) {\n        translate([0, 20, 30]) {\n            rotate([0, 0, 30]) {\n                rotate([0, 30, 0]) {\n                    difference() {\n                        // Wing membrane\n                        scale([1.5, 0.1, 1]) {\n                            sphere(25);\n                        }\n                        \n                        // Wing holes for detail\n                        for(i = [0:2]) {\n                            translate([-10 + i*10, 0, -5 + i*5]) {\n                                scale([1, 0.5, 0.3])\n                                    sphere(5);\n                            }\n                        }\n                    }\n                    \n                    // Wing bone structure\n                    for(i = [0:3]) {\n                        rotate([0, 0, i*15]) {\n                            translate([10 + i*5, 0, 0]) {\n                                rotate([90, 0, 0]) {\n                                    cylinder(h=20, r=1.5);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Four legs with claws\nmodule legs() {\n    // Front legs\n    for(side = [-1, 1]) {\n        translate([20, side*15, 10]) {\n            union() {\n                // Upper leg\n                rotate([0, 15, side*30]) {\n                    cylinder(h=15, r=3);\n                    // Lower leg\n                    translate([0, 0, 15]) {\n                        rotate([0, -30, 0]) {\n                            cylinder(h=12, r=2.5);\n                            // Foot\n                            translate([0, 0, 12]) {\n                                rotate([0, 30, 0]) {\n                                    scale([1, 0.8, 0.5])\n                                        sphere(4);\n                                    // Toes\n                                    for(toe = [-1, 0, 1]) {\n                                        translate([toe*2, 0, 2]) {\n                                            rotate([0, -30, 0]) {\n                                                cylinder(h=3, r=0.8);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Back legs\n    for(side = [-1, 1]) {\n        translate([-20, side*15, 10]) {\n            union() {\n                // Upper leg\n                rotate([0, -15, side*30]) {\n                    cylinder(h=18, r=3.5);\n                    // Lower leg\n                    translate([0, 0, 18]) {\n                        rotate([0, 30, 0]) {\n                            cylinder(h=15, r=3);\n                            // Foot\n                            translate([0, 0, 15]) {\n                                rotate([0, 10, 0]) {\n                                    scale([1.2, 0.9, 0.6])\n                                        sphere(5);\n                                    // Toes\n                                    for(toe = [-1.5, 0, 1.5]) {\n                                        translate([toe*2.5, 0, 2.5]) {\n                                            rotate([0, -20, 0]) {\n                                                cylinder(h=4, r=1);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail with ridges\nmodule tail() {\n    translate([-35, 0, 15]) {\n        rotate([0, 0, 20]) {\n            for(i = [0:8]) {\n                translate([-i*5, 0, -i*2]) {\n                    scale([1 - i*0.08, 1 - i*0.08, 1 - i*0.05]) {\n                        sphere(10 - i);\n                    }\n                }\n            }\n            \n            // Tail ridges\n            for(i = [1:7]) {\n                translate([-i*5 - 2.5, 0, -i*2 + 5]) {\n                    scale([0.3, 4, 0.5]) {\n                        sphere(3);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Bioluminescent spots\nmodule glow_spots() {\n    // Spots along the spine\n    for(i = [0:4]) {\n        translate([20 - i*15, 0, 35 - i*3]) {\n            sphere(2);\n        }\n    }\n    \n    // Spots on wings\n    for(side = [-1, 1]) {\n        for(i = [0:2]) {\n            translate([0, side*20, 30 - i*5]) {\n                sphere(1.5);\n            }\n        }\n    }\n    \n    // Spot pattern on tail\n    for(i = [0:3]) {\n        translate([-25 - i*8, 0, 20 - i*3]) {\n            sphere(1.8);\n        }\n    }\n}\n\n// Horns\nmodule horns() {\n    // Main horns\n    for(side = [-1, 1]) {\n        translate([30, side*8, 35]) {\n            rotate([0, -20, side*20]) {\n                cylinder(h=15, r1=3, r2=1);\n            }\n        }\n    }\n    \n    // Smaller horns\n    for(side = [-1, 1]) {\n        translate([25, side*12, 30]) {\n            rotate([0, -30, side*15]) {\n                cylinder(h=8, r1=2, r2=0.5);\n            }\n        }\n    }\n}\n\n// Create the model\nmireglow();",
    "renders": true
  },
  {
    "mythical_creature": "nettleflicker",
    "openscad_code": "// Nettleflicker - a mythical insect-dragon hybrid that guards nettle patches\n// Realistic style, medium complexity, 3D printable\n\n$fa = 2;\n$fs = 0.5;\n\nmodule body() {\n    // Main thorax section\n    color(\"darkolivegreen\")\n    union() {\n        translate([0, 0, 10])\n            scale([1.5, 1, 1.2])\n            sphere(8);\n        \n        // Abdomen segments\n        for(i = [1:3]) {\n            translate([0, 0, 10 - i*5])\n                scale([1.8 - i*0.3, 1.2 - i*0.2, 2])\n                sphere(5);\n        }\n    }\n}\n\nmodule head() {\n    color(\"forestgreen\")\n    union() {\n        // Main head\n        translate([0, 0, 20])\n            scale([1.2, 0.8, 1])\n            sphere(6);\n        \n        // Mandibles\n        translate([4, 3, 19])\n            rotate([0, 0, -30])\n            scale([0.3, 0.3, 1])\n            cylinder(h=5, r=2);\n        translate([4, -3, 19])\n            rotate([0, 0, 30])\n            scale([0.3, 0.3, 1])\n            cylinder(h=5, r=2);\n        \n        // Compound eyes\n        color(\"darkmagenta\")\n        translate([3, 4, 22])\n            sphere(2.5);\n        translate([3, -4, 22])\n            sphere(2.5);\n    }\n}\n\nmodule wings() {\n    color(\"limegreen\", 0.6)\n    translate([0, 0, 15])\n    for(side = [-1, 1]) {\n        mirror([0, side, 0])\n        translate([0, 8, 0])\n        rotate([0, 0, 10])\n        translate([5, 0, 0])\n        union() {\n            // Upper wing\n            translate([5, 0, 3])\n                rotate([0, 70, 0])\n                scale([1.5, 0.1, 1])\n                cylinder(h=15, r=8);\n            \n            // Lower wing\n            translate([5, 0, -3])\n                rotate([0, 70, 0])\n                scale([1.2, 0.1, 0.8])\n                cylinder(h=12, r=6);\n            \n            // Wing veins\n            color(\"darkgreen\", 0.8)\n            for(i = [1:4]) {\n                rotate([0, 0, i*20 - 40])\n                translate([8, 0, 0])\n                    scale([0.1, 0.1, 1])\n                    cylinder(h=15, r=0.5);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    color(\"darkgreen\")\n    for(side = [-1, 1]) {\n        for(pos = [0, 1, 2]) {\n            translate([3 + pos*2, side*5, 15 - pos*3])\n            rotate([0, side*20, 0])\n            union() {\n                // Upper leg\n                cylinder(h=6, r=1.5);\n                // Lower leg\n                translate([0, 0, -6])\n                    rotate([30, 0, 0])\n                    cylinder(h=5, r=1);\n                // Foot\n                translate([0, -2, -10])\n                    sphere(1.5);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    color(\"darkolivegreen\")\n    translate([0, 0, -5])\n    rotate([0, 180, 0])\n    union() {\n        // Tail segments\n        for(i = [0:4]) {\n            translate([0, 0, -i*3])\n                scale([0.8, 0.8, 1])\n                sphere(3.5 - i*0.5);\n        }\n        \n        // Stinger\n        color(\"purple\")\n        translate([0, 0, -15])\n            scale([0.5, 0.5, 2])\n            cylinder(h=5, r1=2, r2=0);\n    }\n}\n\nmodule nettle_pattern() {\n    // Decorative nettle leaf patterns on back\n    color(\"yellowgreen\")\n    for(i = [0:2]) {\n        translate([0, 0, 12 - i*3])\n        rotate([0, 0, i*45])\n        scale([0.3, 0.3, 0.1])\n        cylinder(h=1, r=5);\n    }\n}\n\n// Assemble the creature\nunion() {\n    body();\n    head();\n    wings();\n    legs();\n    tail();\n    nettle_pattern();\n}",
    "renders": true
  },
  {
    "mythical_creature": "orchidsylph",
    "openscad_code": "// Orchidsylph - A mystical plant-fae hybrid\n// Wings like orchid petals, body of flowing vines, delicate yet strong\n\n// Overall scale for 3D printing (70mm tall)\nscale_factor = 0.7;\n\n// Main colors\npetal_color = [0.9, 0.7, 0.9];      // Soft lavender\nvine_color = [0.3, 0.4, 0.2];       // Deep forest green\nstamen_color = [1, 0.8, 0.2];       // Golden yellow\naura_color = [0.8, 0.9, 1, 0.5];    // Translucent blue-white\n\n// Petal wing module\nmodule petal_wing(scale = 1, angle = 0) {\n    rotate([0, 0, angle]) {\n        scale([scale, scale, scale]) {\n            difference() {\n                // Main petal shape\n                union() {\n                    color(petal_color) {\n                        translate([0, 0, -1]) \n                            sphere(d=10, $fn=16);\n                        translate([0, -5, 0]) \n                            scale([1, 2, 0.5]) \n                                sphere(d=8, $fn=16);\n                    }\n                }\n                // Vein details\n                for(i = [1:3]) {\n                    translate([0, -i*2, 0.5]) \n                        rotate([90, 0, 0]) \n                            cylinder(h=8, d1=0.5, d2=0.1, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Vine tendril module\nmodule vine_tendril(length = 10, thickness = 1) {\n    color(vine_color) {\n        for(i = [0:5:length-1]) {\n            translate([0, 0, i]) \n                rotate([i*15, 0, 0]) \n                    cylinder(h=5, d=thickness, $fn=8);\n        }\n    }\n}\n\n// Orchid stamen cluster\nmodule stamen_cluster() {\n    color(stamen_color) {\n        for(i = [0:60:359]) {\n            rotate([0, 0, i]) {\n                translate([3, 0, 0]) \n                    cylinder(h=5, d=0.5, $fn=4);\n            }\n        }\n    }\n}\n\n// Main orchidsylph body\nmodule orchidsylph_body() {\n    color(vine_color) {\n        // Torso - twisted vine core\n        rotate([0, 0, 15]) {\n            difference() {\n                cylinder(h=20, d=8, $fn=12);\n                // Hollow center for printing\n                translate([0, 0, -1]) \n                    cylinder(h=22, d=4, $fn=12);\n            }\n        }\n        \n        // Head - orchid bulb\n        translate([0, 0, 20]) {\n            rotate([0, 0, 15]) {\n                sphere(d=10, $fn=16);\n                stamen_cluster();\n            }\n        }\n        \n        // Arms - vine extensions\n        translate([0, -4, 15]) {\n            rotate([45, 0, -30]) {\n                vine_tendril(15, 1.5);\n            }\n        }\n        mirror([1, 0, 0]) {\n            translate([0, -4, 15]) {\n                rotate([45, 0, -30]) {\n                    vine_tendril(15, 1.5);\n                }\n            }\n        }\n    }\n}\n\n// Petal wings assembly\nmodule wings() {\n    // Upper wings\n    translate([0, 0, 18]) {\n        petal_wing(1.2, 45);\n        petal_wing(1.2, -45);\n    }\n    \n    // Lower wings\n    translate([0, 0, 12]) {\n        petal_wing(0.8, 60);\n        petal_wing(0.8, -60);\n    }\n    \n    // Back wings\n    translate([0, 0, 10]) {\n        petal_wing(0.6, 90);\n        petal_wing(0.6, -90);\n    }\n}\n\n// Magical aura/energy field\nmodule magical_aura() {\n    color(aura_color) {\n        translate([0, 0, 10]) {\n            sphere(d=25, $fn=32);\n        }\n    }\n}\n\n// Base stand for stability\nmodule base() {\n    color([0.2, 0.2, 0.2]) {\n        translate([0, 0, -5]) {\n            cylinder(h=5, d=20, $fn=32);\n        }\n    }\n}\n\n// Assemble the complete orchidsylph\nscale([scale_factor, scale_factor, scale_factor]) {\n    base();\n    orchidsylph_body();\n    wings();\n    magical_aura();\n}",
    "renders": true
  },
  {
    "mythical_creature": "palespar",
    "openscad_code": "// Palespar - Mythical crystalline owl-creature\n// Realistic style, medium complexity\n\nscale_factor = 0.8;\n\nmodule crystal() {\n    // Basic crystal shard shape\n    difference() {\n        union() {\n            cylinder(h=8, r1=3, r2=1, $fn=8);\n            translate([0,0,6]) cube([6,6,4], center=true);\n        }\n        translate([0,0,2]) rotate([45,0,0]) cube([8,8,8], center=true);\n        translate([0,0,2]) rotate([0,45,0]) cube([8,8,8], center=true);\n    }\n}\n\nmodule wing_feather() {\n    // Single feather with crystal texture\n    difference() {\n        scale([1,0.3,0.1]) sphere(r=8, $fn=6);\n        translate([0,0,-0.5]) cube([16,4,1], center=true);\n    }\n}\n\nmodule wing() {\n    // Assemble wing from feathers\n    color(\"LightBlue\") {\n        for(i = [0:3]) {\n            translate([i*3, -i*2, 0]) rotate([0, i*15, 0]) \n                scale([0.8 - i*0.15, 0.8 - i*0.15, 1]) wing_feather();\n        }\n        for(i = [1:3]) {\n            translate([i*3, i*2, 0]) rotate([0, -i*15, 0]) \n                scale([0.8 - i*0.15, 0.8 - i*0.15, 1]) wing_feather();\n        }\n    }\n}\n\nmodule body() {\n    // Main crystalline body\n    color(\"GhostWhite\") {\n        difference() {\n            scale([1.2,1,1.5]) sphere(r=12, $fn=24);\n            // Hollow for printing\n            translate([0,0,-2]) scale([1,1,0.8]) sphere(r=10, $fn=24);\n        }\n        \n        // Chest crystal formation\n        translate([0, -8, -2]) rotate([90,0,0]) crystal();\n        translate([0, -8, 2]) rotate([90,30,0]) scale([0.7,0.7,0.7]) crystal();\n    }\n}\n\nmodule head() {\n    // Owl-like crystalline head\n    color(\"LightCyan\") {\n        difference() {\n            scale([0.9,1.1,1]) sphere(r=10, $fn=24);\n            translate([0,0,3]) cube([12,12,8], center=true);\n        }\n        \n        // Eyes - glowing crystals\n        translate([4, -5, 2]) color(\"DeepSkyBlue\") sphere(r=2.5, $fn=12);\n        translate([-4, -5, 2]) color(\"DeepSkyBlue\") sphere(r=2.5, $fn=12);\n        \n        // Beak\n        translate([0, -8, -2]) color(\"LightSteelBlue\") \n            scale([1,1,0.5]) cylinder(h=4, r1=2, r2=0, $fn=6);\n    }\n}\n\nmodule tail() {\n    // Crystalline tail feathers\n    color(\"AliceBlue\") {\n        for(i = [-2:2]) {\n            translate([i*3, 10, -i]) rotate([0, -20, 0]) \n                scale([1 - abs(i)*0.2, 1, 1 - abs(i)*0.2]) \n                crystal();\n        }\n    }\n}\n\nmodule legs() {\n    // Simple crystalline legs\n    color(\"LightSteelBlue\") {\n        translate([4, 5, -12]) \n            cylinder(h=8, r1=2, r2=1.5, $fn=8);\n        translate([4, 5, -16]) \n            scale([1,0.5,0.3]) sphere(r=3, $fn=8);\n            \n        translate([-4, 5, -12]) \n            cylinder(h=8, r1=2, r2=1.5, $fn=8);\n        translate([-4, 5, -16]) \n            scale([1,0.5,0.3]) sphere(r=3, $fn=8);\n    }\n}\n\n// Main assembly\nscale(scale_factor) {\n    union() {\n        // Body\n        body();\n        \n        // Head\n        translate([0, 0, 15]) head();\n        \n        // Wings\n        translate([12, 0, 5]) rotate([0, 0, 90]) wing();\n        translate([-12, 0, 5]) mirror([1,0,0]) rotate([0, 0, 90]) wing();\n        \n        // Tail\n        tail();\n        \n        // Legs\n        legs();\n        \n        // Ground base for stability\n        color(\"LightSlateGray\") \n            translate([0, 0, -18]) cylinder(h=2, r=15, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "quartzshade",
    "openscad_code": "// Quartzshade - A mythical crystalline dragon with luminescent wings\n// Size: ~70mm wingspan, designed for 3D printing\n\n// Main colors\ncrystal = [0.8, 0.85, 0.9];\nglow = [0.3, 0.6, 1];\ncore = [0.9, 0.95, 1];\n\nmodule quartz_crystal(scale_factor=1) {\n    // Hexagonal crystal prism\n    color(crystal) {\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) \n                translate([0, scale_factor * 2, 0])\n                cube([scale_factor * 0.5, scale_factor * 4, scale_factor * 0.5], center=true);\n        }\n        cylinder(h=scale_factor * 6, r=scale_factor * 2, $fn=6);\n    }\n}\n\nmodule dragon_head() {\n    // Main head structure\n    union() {\n        // Snout\n        color(crystal) \n            translate([0, 0, 2])\n            scale([1.2, 0.8, 1])\n            sphere(4, $fn=16);\n        \n        // Head base\n        color(core)\n            sphere(5, $fn=16);\n        \n        // Horns - crystalline structures\n        translate([3, 2, 4]) rotate([30, 0, 45]) quartz_crystal(0.8);\n        translate([-3, 2, 4]) rotate([30, 0, -45]) quartz_crystal(0.8);\n        translate([0, 3, 5]) rotate([15, 0, 0]) quartz_crystal(1);\n        \n        // Eyes - glowing orbs\n        color(glow) {\n            translate([2, -2, 1]) sphere(1.2, $fn=12);\n            translate([-2, -2, 1]) sphere(1.2, $fn=12);\n        }\n        \n        // Jaw\n        color(crystal) \n            translate([0, 1, -3])\n            scale([0.8, 0.6, 0.4])\n            sphere(3, $fn=16);\n    }\n}\n\nmodule wing_segment(length, width, thickness) {\n    // Individual wing membrane segment\n    difference() {\n        // Base wing shape\n        color(crystal, 0.7)\n            scale([length, width, thickness])\n            sphere(1, $fn=8);\n        \n        // Vein patterns\n        for (i = [0:3]) {\n            rotate([0, 0, i * 30 - 45])\n                translate([0, 0, -thickness])\n                cube([length * 2, 0.2, thickness * 2], center=true);\n        }\n    }\n}\n\nmodule dragon_wing() {\n    // Wing structure with crystalline membranes\n    union() {\n        // Wing arm\n        color(core)\n            rotate([0, 90, 0])\n            cylinder(h=15, r=1, $fn=8);\n        \n        // Wing membranes\n        translate([10, 0, 0]) wing_segment(8, 4, 0.3);\n        translate([15, 2, 0]) rotate([0, 0, 20]) wing_segment(6, 3, 0.25);\n        translate([18, 3, 0]) rotate([0, 0, 30]) wing_segment(4, 2, 0.2);\n        \n        // Wing tip crystal\n        translate([20, 4, 0]) quartz_crystal(0.5);\n    }\n}\n\nmodule dragon_body() {\n    // Main body with crystalline scales\n    union() {\n        // Torso\n        color(crystal)\n            scale([1.5, 1, 1.2])\n            sphere(6, $fn=16);\n        \n        // Scales pattern\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60])\n                translate([0, 6, 0])\n                color(core)\n                scale([0.8, 0.8, 0.3])\n                sphere(2, $fn=6);\n        }\n        \n        // Tail segments\n        for (i = [0:4]) {\n            translate([0, -8 - i * 3, 0])\n                scale([1 - i * 0.15, 1 - i * 0.15, 1 - i * 0.15])\n                color(crystal)\n                sphere(4 - i * 0.5, $fn=12);\n            \n            // Tail crystals\n            translate([0, -8 - i * 3, 2])\n                quartz_crystal(0.4 - i * 0.05);\n        }\n        \n        // Legs\n        for (side = [-1, 1]) {\n            translate([side * 3, 2, -4])\n                color(core)\n                union() {\n                    cylinder(h=5, r=1.2, $fn=8);\n                    translate([0, 0, -5])\n                        rotate([0, 90, 0])\n                        cylinder(h=3, r=1, $fn=6);\n                }\n        }\n    }\n}\n\n// Assemble the creature\ntranslate([0, 0, 5]) dragon_head();\ntranslate([0, 8, 0]) dragon_body();\n\n// Wings\ntranslate([0, 8, 3]) rotate([0, 0, 30]) dragon_wing();\ntranslate([0, 8, 3]) rotate([0, 0, -30]) mirror([1, 0, 0]) dragon_wing();\n\n// Chest crystal core\ntranslate([0, 8, 0]) quartz_crystal(1.5);",
    "renders": true
  },
  {
    "mythical_creature": "riversprite",
    "openscad_code": "// Riversprite mythical creature - OpenSCAD\n// A water spirit with aquatic features, translucent wings, and flowing tendrils\n\n// Overall scale factor\nscale_factor = 1;\n\n// Main module for the riversprite\nmodule riversprite() {\n    // Body - main torso\n    color([0.2, 0.6, 0.9, 0.8]) union() {\n        // Torso - elongated teardrop shape\n        translate([0, 0, 15]) scale([1, 0.8, 1.5]) sphere(r=12);\n        \n        // Head - smaller sphere\n        translate([0, 0, 35]) scale([0.8, 0.9, 1.1]) sphere(r=10);\n        \n        // Lower body - tapering tail\n        for(i=[1:5]) {\n            translate([0, 0, 15-i*6]) \n            scale([1-i*0.15, 1-i*0.15, 0.8]) \n            cylinder(h=5, r1=12-i*2, r2=12-i*3);\n        }\n        \n        // Arms - flowing water limbs\n        translate([15, 0, 25]) rotate([0, 30, 15]) \n        scale([0.3, 0.3, 1.5]) sphere(r=8);\n        translate([-15, 0, 25]) rotate([0, -30, -15]) \n        scale([0.3, 0.3, 1.5]) sphere(r=8);\n        \n        // Wings - translucent fins\n        color([0.4, 0.7, 0.9, 0.5]) {\n            // Left wing\n            translate([12, -5, 30]) rotate([0, 0, -20]) \n            scale([2, 0.1, 1.2]) sphere(r=8);\n            // Right wing  \n            translate([-12, -5, 30]) rotate([0, 0, 20]) \n            scale([2, 0.1, 1.2]) sphere(r=8);\n            \n            // Wing membranes\n            for(i=[0:3]) {\n                translate([12+i*3, -5-i*2, 30-i*2]) rotate([0, 0, -20-i*5]) \n                scale([0.5, 0.05, 0.8]) cylinder(h=10, r=3);\n                translate([-12-i*3, -5-i*2, 30-i*2]) rotate([0, 0, 20+i*5]) \n                scale([0.5, 0.05, 0.8]) cylinder(h=10, r=3);\n            }\n        }\n        \n        // Water tendrils\n        color([0.3, 0.7, 0.95, 0.7]) \n        for(i=[0:7]) {\n            rotate([0, 0, i*45]) \n            translate([0, 0, 10]) \n            rotate([90, 0, 0]) \n            scale([0.3, 0.3, 2+i*0.3]) \n            cylinder(h=15+i*3, r1=2, r2=0.5);\n        }\n        \n        // Crown of water lilies\n        color([0.1, 0.5, 0.3]) \n        for(i=[0:5]) {\n            rotate([0, 0, i*72]) \n            translate([0, 8, 42]) \n            scale([0.6, 0.6, 0.2]) \n            cylinder(h=2, r=3);\n        }\n        \n        // Eyes - glowing orbs\n        color([0.8, 0.9, 1, 0.9]) {\n            translate([4, 3, 38]) sphere(r=2);\n            translate([-4, 3, 38]) sphere(r=2);\n        }\n        \n        // Fin details on tail\n        color([0.25, 0.65, 0.85]) \n        for(i=[0:3]) {\n            translate([0, 0, 12-i*8]) \n            rotate([0, 0, 0]) \n            scale([1.2, 0.1, 0.3]) \n            cylinder(h=5, r=8-i*2);\n        }\n    }\n}\n\n// Base for stability\nmodule base() {\n    color([0.1, 0.3, 0.6, 0.6]) \n    translate([0, 0, -2]) \n    cylinder(h=2, r=20);\n}\n\n// Create the complete model\nscale([scale_factor, scale_factor, scale_factor]) \nunion() {\n    riversprite();\n    base();\n}",
    "renders": true
  },
  {
    "mythical_creature": "sableglen",
    "openscad_code": "// Sableglen Mythical Creature - Realistic Style\n// A forest guardian with antlers, wings, and mystical features\n\n// Scale factor for easy sizing\nscale_factor = 1;\n\n// Main color scheme\nbody_color = \"#2D5016\";      // Deep forest green\nantler_color = \"#8B4513\";    // Rich brown\nwing_color = \"#228B22\";      // Forest green translucent\naccent_color = \"#FFD700\";    // Golden magical accents\n\nmodule sableglen() {\n    // Body - elongated torso\n    color(body_color)\n    union() {\n        // Main torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1.5])\n            sphere(10);\n        \n        // Chest section\n        translate([0, 0, 25])\n            scale([1, 0.7, 1.2])\n            sphere(8);\n        \n        // Hindquarters\n        translate([0, 0, 5])\n            scale([1.3, 0.9, 1.1])\n            sphere(9);\n    }\n    \n    // Head with deer-like features\n    color(body_color)\n    translate([0, 15, 28])\n    rotate([0, 10, 0])\n    union() {\n        // Main head\n        scale([0.8, 1, 1])\n            sphere(7);\n        \n        // Snout\n        translate([0, 8, -2])\n            scale([0.6, 1.2, 0.5])\n            sphere(5);\n    }\n    \n    // Antlers - branching structure\n    color(antler_color)\n    for(side = [-1, 1]) {\n        translate([side * 5, 15, 33])\n        rotate([0, 0, side * 15])\n        union() {\n            // Main antler stem\n            cylinder(h = 12, r1 = 1.5, r2 = 0.5);\n            \n            // First branch\n            translate([0, 0, 8])\n                rotate([20, 0, 30])\n                cylinder(h = 8, r1 = 1, r2 = 0.5);\n            \n            // Second branch\n            translate([0, 0, 5])\n                rotate([-25, 0, -25])\n                cylinder(h = 6, r1 = 0.8, r2 = 0.3);\n        }\n    }\n    \n    // Wings - leaf-like structures\n    color(wing_color)\n    for(side = [-1, 1]) {\n        translate([side * 12, -5, 22])\n        rotate([0, 0, side * 30])\n        rotate([0, 20, 0])\n        difference() {\n            // Main wing shape\n            scale([1.5, 2, 0.3])\n                sphere(8);\n            \n            // Wing membrane cutouts\n            for(i = [1:3]) {\n                translate([0, i * 3 - 3, -1])\n                    scale([0.7, 0.5, 0.5])\n                    sphere(4);\n            }\n        }\n    }\n    \n    // Legs\n    color(body_color)\n    for(side = [-1, 1]) {\n        // Front legs\n        translate([side * 6, 8, 15])\n            rotate([0, side * 5, 0])\n            cylinder(h = 15, r1 = 2, r2 = 1.5);\n        \n        // Hooves\n        translate([side * 6, 8, 0])\n            scale([1.2, 1.2, 0.5])\n            cylinder(h = 2, r = 2);\n        \n        // Back legs\n        translate([side * 7, -8, 12])\n            rotate([0, side * -5, 0])\n            cylinder(h = 12, r1 = 2.5, r2 = 2);\n        \n        // Back hooves\n        translate([side * 7, -8, 0])\n            scale([1.3, 1.3, 0.5])\n            cylinder(h = 2, r = 2.2);\n    }\n    \n    // Tail with magical aura\n    color(accent_color)\n    translate([0, -15, 12])\n    rotate([30, 0, 0])\n    union() {\n        // Main tail\n        scale([0.5, 0.5, 2])\n            cylinder(h = 8, r1 = 3, r2 = 0.5);\n        \n        // Magical wisps\n        for(i = [0:2]) {\n            translate([0, 0, 8 + i * 2])\n                scale([0.3, 0.3, 0.3])\n                sphere(1.5 + i * 0.5);\n        }\n    }\n    \n    // Eyes - glowing orbs\n    color(\"#00FF00\")\n    for(side = [-1, 1]) {\n        translate([side * 3, 18, 30])\n            sphere(1.2);\n    }\n    \n    // Mystical markings on body\n    color(accent_color)\n    for(i = [1:5]) {\n        translate([0, -10 + i * 4, 20 - i * 2])\n            rotate([0, 0, i * 30])\n            scale([0.3, 0.1, 0.1])\n            sphere(3);\n    }\n}\n\n// Generate the creature\nscale([scale_factor, scale_factor, scale_factor])\nsableglen();",
    "renders": true
  },
  {
    "mythical_creature": "thistlewhip",
    "openscad_code": "// Thistlewhip - Mythical plant-creature hybrid\n// A serpentine dragon with thistle-like armor and vine tendrils\n\n// Overall scale for 3D printing\nscale_factor = 0.8;\n\n// Main colors\ncolor_body = [0.3, 0.6, 0.2];      // Deep green\ncolor_thorns = [0.4, 0.4, 0.4];    // Dark grey\ncolor_details = [0.8, 0.9, 0.3];   // Lime green accents\n\n// Main body module\nmodule thistlewhip_body() {\n    color(color_body)\n    union() {\n        // Head segment\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n                sphere(8, $fn=16);\n        \n        // Neck segments\n        for(i = [0:3]) {\n            translate([0, 0, 10 - i*5])\n                rotate([0, 0, i*15])\n                    scale([1 - i*0.1, 1 - i*0.1, 1])\n                        cylinder(h=6, r=7 - i, $fn=12);\n        }\n        \n        // Main body coils\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([15*sin(i*60), 15*cos(i*60), -i*3])\n                    scale([1.2 - i*0.15, 1.2 - i*0.15, 1])\n                        cylinder(h=8, r=6, $fn=12);\n        }\n    }\n}\n\n// Thorn armor plates\nmodule thorn_plates() {\n    color(color_thorns)\n    for(i = [0:8]) {\n        for(j = [0:3]) {\n            rotate([0, 0, i*45 + j*90])\n                translate([10*sin(i*45) + 6*cos(j*90), \n                          10*cos(i*45) + 6*sin(j*90), \n                          10 - i*2])\n                    rotate([90, 0, j*30])\n                        union() {\n                            // Thorn base\n                            cylinder(h=2, r=1.5, $fn=6);\n                            // Thorn tip\n                            translate([0, 0, 2])\n                                cone(h=3, r1=1.5, r2=0.2, $fn=6);\n                        }\n        }\n    }\n}\n\n// Vine tendrils\nmodule vine_tendrils() {\n    color(color_details)\n    for(i = [0:4]) {\n        rotate([0, 0, i*90])\n            translate([12, 0, 5])\n                rotate([0, 90, 0])\n                    for(j = [0:8]) {\n                        translate([j*2, 0, 0])\n                            rotate([0, 0, j*15])\n                                cylinder(h=2, r=0.8, $fn=8);\n                    }\n    }\n}\n\n// Wing structures (leaf-like)\nmodule leaf_wings() {\n    color([0.2, 0.5, 0.1])\n    for(side = [0, 1]) {\n        mirror([side, 0, 0])\n            translate([-5, 8, 12])\n                rotate([0, 0, -30])\n                    union() {\n                        // Main wing blade\n                        scale([1, 2, 0.3])\n                            sphere(5, $fn=8);\n                        // Wing veins\n                        for(v = [0:3]) {\n                            rotate([0, 0, v*30 - 45])\n                                translate([0, 0, 0.5])\n                                    cube([12, 0.5, 0.5]);\n                        }\n                    }\n    }\n}\n\n// Eye details\nmodule eyes() {\n    color([0.9, 0.9, 0.1])\n    for(side = [0, 1]) {\n        translate([side*4 - 2, 5, 18])\n            sphere(1.5, $fn=12);\n    }\n}\n\n// Horn structures (thistle flower buds)\nmodule horns() {\n    color(color_body)\n    for(i = [0:3]) {\n        rotate([0, 0, i*120])\n            translate([0, 0, 20])\n                rotate([30, 0, 0])\n                    union() {\n                        cylinder(h=8, r=2, $fn=8);\n                        translate([0, 0, 8])\n                            sphere(2.5, $fn=8);\n                    }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    thistlewhip_body();\n    thorn_plates();\n    vine_tendrils();\n    leaf_wings();\n    eyes();\n    horns();\n}",
    "renders": true
  },
  {
    "mythical_creature": "umbralfae",
    "openscad_code": "// Umbralfae - Shadow Fae Creature\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main body module\nmodule umbralfae_body() {\n    // Torso - elongated chest\n    color([0.1, 0.1, 0.2])\n    translate([0, 0, 25])\n    scale([1.2, 0.8, 1.5])\n    sphere(r=10);\n    \n    // Abdomen\n    color([0.15, 0.1, 0.25])\n    translate([0, 0, 15])\n    scale([0.8, 0.6, 1.2])\n    sphere(r=8);\n    \n    // Pelvis\n    color([0.1, 0.05, 0.2])\n    translate([0, 0, 8])\n    scale([1.1, 0.7, 0.8])\n    sphere(r=9);\n}\n\n// Head with fae features\nmodule head() {\n    color([0.05, 0.05, 0.15])\n    translate([0, 0, 40])\n    scale([0.8, 0.7, 1.2])\n    sphere(r=12);\n    \n    // Eyes - glowing violet\n    for(x = [-5, 5]) {\n        color([0.6, 0.2, 0.8])\n        translate([x, 8, 42])\n        sphere(r=2);\n    }\n    \n    // Horns - curved back\n    module horn() {\n        translate([0, 0, 0])\n        rotate([0, 0, -30])\n        scale([0.3, 0.3, 1])\n        cylinder(h=15, r1=4, r2=1);\n    }\n    \n    color([0.2, 0.1, 0.3])\n    translate([8, 4, 50]) horn();\n    translate([-8, 4, 50]) mirror([1, 0, 0]) horn();\n}\n\n// Wings - shadow membrane\nmodule wings() {\n    color([0.05, 0.05, 0.1, 0.7])\n    translate([0, 0, 35])\n    rotate([0, 0, 0])\n    union() {\n        // Left wing\n        translate([-15, 0, 0])\n        rotate([0, 10, -20])\n        scale([1.5, 0.1, 2])\n        sphere(r=8);\n        \n        // Right wing\n        translate([15, 0, 0])\n        rotate([0, 10, 20])\n        scale([1.5, 0.1, 2])\n        sphere(r=8);\n    }\n}\n\n// Arms with clawed hands\nmodule arm(side) {\n    // Upper arm\n    color([0.1, 0.1, 0.2])\n    translate([side * 12, 0, 32])\n    rotate([0, 0, side * 15])\n    rotate([90, 0, 0])\n    cylinder(h=12, r=3);\n    \n    // Forearm\n    translate([side * 15, 0, 25])\n    rotate([0, 0, side * 25])\n    rotate([90, 0, 0])\n    cylinder(h=10, r=2.5);\n    \n    // Hand with claws\n    translate([side * 18, 0, 20])\n    color([0.15, 0.1, 0.25])\n    sphere(r=3);\n    \n    // Claws\n    for(i = [-1, 0, 1]) {\n        translate([side * (18 + i*2), 0, 17])\n        rotate([0, 0, side * i * 10])\n        color([0.3, 0.2, 0.4])\n        cylinder(h=5, r1=1, r2=0.5);\n    }\n}\n\n// Legs with digitigrade stance\nmodule leg(side) {\n    // Thigh\n    color([0.1, 0.1, 0.2])\n    translate([side * 6, 0, 15])\n    rotate([0, 0, side * 5])\n    rotate([80, 0, 0])\n    cylinder(h=15, r=3.5);\n    \n    // Lower leg\n    translate([side * 7, 0, 5])\n    rotate([0, 0, side * 10])\n    rotate([120, 0, 0])\n    cylinder(h=12, r=3);\n    \n    // Foot - clawed\n    translate([side * 8, 0, 0])\n    color([0.15, 0.1, 0.25])\n    rotate([90, 0, 0])\n    scale([2, 1, 0.5])\n    sphere(r=3);\n    \n    // Toe claws\n    for(i = [-1, 0, 1]) {\n        translate([side * (8 + i*1.5), 0, -2])\n        rotate([90, 0, 0])\n        color([0.3, 0.2, 0.4])\n        cylinder(h=4, r1=0.8, r2=0.3);\n    }\n}\n\n// Tail with shadow flame effect\nmodule tail() {\n    color([0.05, 0.05, 0.15])\n    translate([0, -8, 10])\n    for(i = [0:5]) {\n        translate([0, -i*2, 10 - i*1.5])\n        rotate([0, 0, -i * 5])\n        scale([1 - i*0.1, 1 - i*0.1, 1])\n        sphere(r=5 - i*0.5);\n    }\n}\n\n// Shadow aura particles\nmodule shadow_particles() {\n    color([0.3, 0.1, 0.5, 0.5])\n    for(i = [0:20]) {\n        rotate([0, 0, i * 18])\n        translate([15 + i, 0, 30 + sin(i) * 5])\n        sphere(r=0.5 + sin(i) * 0.3);\n    }\n}\n\n// Assemble the creature\numbralfae_body();\nhead();\nwings();\narm(1);\narm(-1);\nleg(1);\nleg(-1);\ntail();\nshadow_particles();",
    "renders": true
  },
  {
    "mythical_creature": "verdantwisp",
    "openscad_code": "// Verdantwisp - A mythical forest spirit\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Main color scheme\ncolor(\"forestgreen\") {\n    // Head\n    module head() {\n        translate([0, 0, 60]) {\n            // Main head sphere\n            sphere(d = 25);\n            \n            // Snout\n            translate([0, 12, -5]) {\n                scale([1.2, 1.5, 0.8]) sphere(d = 15);\n            }\n            \n            // Eyes\n            color(\"gold\") {\n                translate([-8, 8, 5]) sphere(d = 4);\n                translate([8, 8, 5]) sphere(d = 4);\n            }\n            \n            // Antlers\n            color(\"darkgreen\") {\n                for(side = [-1, 1]) {\n                    translate([side * 10, 0, 12]) {\n                        rotate([0, side * 30, 0]) {\n                            cylinder(h = 20, d1 = 3, d2 = 1);\n                            translate([0, 0, 20]) {\n                                rotate([0, 30, 0]) cylinder(h = 15, d1 = 2, d2 = 1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Body\n    module body() {\n        translate([0, 0, 30]) {\n            scale([1.5, 1, 1.2]) sphere(d = 40);\n            \n            // Leafy patterns on body\n            color(\"limegreen\") {\n                for(i = [0:5]) {\n                    rotate([0, 0, i * 60]) {\n                        translate([15, 0, 10]) {\n                            scale([1, 0.5, 0.1]) sphere(d = 8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Wings\n    module wings() {\n        color(\"seagreen\") {\n            for(side = [-1, 1]) {\n                translate([side * 25, 0, 45]) {\n                    rotate([0, side * 30, 0]) {\n                        // Wing base\n                        difference() {\n                            scale([1.5, 1, 0.2]) sphere(d = 30);\n                            translate([0, 0, -5]) cube([40, 30, 10], center = true);\n                        }\n                        \n                        // Wing membrane details\n                        for(j = [0:3]) {\n                            translate([j * 5 - 10, 0, 0]) {\n                                rotate([0, 0, j * 15]) {\n                                    scale([0.8, 1, 0.1]) sphere(d = 15 - j * 3);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs\n    module legs() {\n        color(\"darkgreen\") {\n            for(side = [-1, 1]) {\n                translate([side * 15, 0, 15]) {\n                    // Upper leg\n                    rotate([0, 0, side * 15]) {\n                        cylinder(h = 20, d = 6);\n                        \n                        // Lower leg\n                        translate([0, 0, 20]) {\n                            rotate([30, 0, 0]) {\n                                cylinder(h = 15, d = 4);\n                                \n                                // Hoof\n                                translate([0, 0, 15]) {\n                                    scale([1, 1, 0.5]) cylinder(h = 5, d = 6);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Tail\n    module tail() {\n        color(\"forestgreen\") {\n            translate([0, -25, 25]) {\n                rotate([45, 0, 0]) {\n                    cylinder(h = 30, d1 = 8, d2 = 3);\n                    \n                    // Leafy tail tip\n                    translate([0, 0, 30]) {\n                        color(\"limegreen\") {\n                            for(i = [0:5]) {\n                                rotate([0, 0, i * 72]) {\n                                    translate([0, 5, 0]) {\n                                        scale([0.5, 1, 0.2]) sphere(d = 10);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Magical wisps\n    module wisps() {\n        color(\"limegreen\") {\n            for(i = [0:8]) {\n                rotate([0, 0, i * 45]) {\n                    translate([20 + i * 2, 0, 40 + sin(i * 30) * 10]) {\n                        scale([0.5, 0.5, 0.5]) sphere(d = 5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    head();\n    body();\n    wings();\n    legs();\n    tail();\n    wisps();\n}",
    "renders": true
  },
  {
    "mythical_creature": "whisperroot",
    "openscad_code": "// Whisperroot - a sentient root creature that whispers forgotten secrets\n// Medium complexity realistic style with 3D printability\n\n$fn = 50;\n\nmodule whisperroot() {\n    // Main body - gnarled root structure\n    color(\"#654321\") {\n        // Central trunk\n        cylinder(h = 40, r1 = 12, r2 = 15);\n        \n        // Root tendrils wrapping around\n        for(i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, 15]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h = 25, r1 = 4, r2 = 2);\n                    }\n                }\n            }\n        }\n        \n        // Bulbous growths\n        for(i = [0:60:300]) {\n            rotate([0, 0, i]) {\n                translate([10, 0, 25]) {\n                    sphere(r = 6);\n                }\n            }\n        }\n    }\n    \n    // Whispering face - ancient bark texture\n    color(\"#3e2723\") {\n        translate([0, -12, 35]) {\n            difference() {\n                // Main face structure\n                scale([1.2, 0.8, 1]) sphere(r = 10);\n                \n                // Eye sockets\n                translate([-4, -2, 2]) sphere(r = 3);\n                translate([4, -2, 2]) sphere(r = 3);\n                \n                // Mouth slit\n                translate([0, 6, 0]) scale([1, 0.2, 0.5]) sphere(r = 5);\n            }\n            \n            // Eyes - glowing with ancient knowledge\n            color(\"#e6ee9c\") {\n                translate([-4, -2, 2]) sphere(r = 1.5);\n                translate([4, -2, 2]) sphere(r = 1.5);\n            }\n        }\n    }\n    \n    // Magical moss/lichen patches\n    color(\"#4caf50\") {\n        for(i = [0:30:330]) {\n            rotate([0, 0, i]) {\n                translate([8 + i/10, 0, 10 + sin(i)*5]) {\n                    scale([1, 0.3, 1]) sphere(r = 3);\n                }\n            }\n        }\n    }\n    \n    // Root legs for stability\n    color(\"#5d4037\") {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([side * 8, 5, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 15, r1 = 4, r2 = 6);\n                }\n                // Foot pads\n                translate([0, 0, -15]) {\n                    sphere(r = 6);\n                }\n            }\n        }\n        \n        // Rear stabilizers\n        for(side = [-1, 1]) {\n            translate([side * 6, -8, 0]) {\n                rotate([60, 0, side * 20]) {\n                    cylinder(h = 12, r1 = 3, r2 = 5);\n                }\n            }\n        }\n    }\n    \n    // Mystical rune carvings on back\n    color(\"#8d6e63\") {\n        for(i = [0:45:180]) {\n            rotate([0, 0, i]) {\n                translate([0, 8, 20 - i/5]) {\n                    difference() {\n                        cube([2, 1, 3]);\n                        translate([0.5, -0.1, 0.5]) cube([1, 1.2, 2]);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Whisper tendrils - ethereal energy wisps\n    color(\"#c5e1a5\", 0.6) {\n        for(i = [0:30:359]) {\n            rotate([0, 0, i]) {\n                translate([0, 0, 40]) {\n                    rotate([90 + sin(i*2)*20, 0, i]) {\n                        cylinder(h = 8 + sin(i*3)*3, r1 = 0.5, r2 = 0.1);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nwhisperroot();",
    "renders": true
  },
  {
    "mythical_creature": "xylosprite",
    "openscad_code": "// Xylosprite - Forest spirit made of living wood and crystal\n// A medium-complexity realistic 3D printable model\n\n// Color definitions\nwood_color = \"#8B4513\";\ncrystal_color = \"#4FC3F7\";\nleaf_color = \"#228B22\";\nglow_color = \"#E6EE9C\";\n\n// Main module\nmodule xylosprite() {\n    // Body - wooden core\n    color(wood_color)\n    union() {\n        // Torso\n        difference() {\n            scale([1.2, 0.8, 1.5])\n                sphere(d=20, $fn=32);\n            translate([0, 0, -5])\n                cylinder(h=30, d1=15, d2=25, $fn=32);\n        }\n        \n        // Head\n        translate([0, 0, 22])\n            scale([0.8, 0.7, 1])\n                sphere(d=15, $fn=32);\n        \n        // Arms\n        for(side = [-1, 1]) {\n            translate([side * 12, 0, 10])\n                rotate([0, side * 15, 0])\n                    cylinder(h=15, d1=6, d2=4, $fn=16);\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([side * 6, 0, -15])\n                cylinder(h=18, d1=5, d2=7, $fn=16);\n        }\n    }\n    \n    // Crystal growths\n    color(crystal_color)\n    for(i = [0:7]) {\n        angle = i * 45;\n        translate([0, 0, 15])\n            rotate([0, 0, angle])\n                translate([7, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h=8, d1=3, d2=5, $fn=6);\n    }\n    \n    // Wings - leaf-like\n    color(leaf_color)\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, 15])\n            rotate([0, side * 30, 0])\n                scale([0.8, 1, 0.2])\n                    sphere(d=25, $fn=32);\n    }\n    \n    // Antler-like branches\n    color(wood_color)\n    union() {\n        for(side = [-1, 1]) {\n            translate([side * 5, 0, 28])\n                rotate([0, 0, side * 25])\n                    cylinder(h=12, d1=3, d2=2, $fn=8);\n            translate([side * 7, 0, 28])\n                rotate([0, side * 15, side * 35])\n                    cylinder(h=10, d1=2.5, d2=1.5, $fn=8);\n        }\n    }\n    \n    // Glowing runes\n    color(glow_color)\n    for(i = [0:3]) {\n        angle = i * 90;\n        translate([0, 0, 15])\n            rotate([0, 0, angle])\n                translate([9, 0, 0])\n                    sphere(d=2, $fn=12);\n    }\n    \n    // Root-like feet\n    color(wood_color)\n    for(side = [-1, 1]) {\n        translate([side * 6, 0, -24])\n            for(root = [0:2]) {\n                rotate([0, 0, root * 120])\n                    translate([3, 0, 0])\n                        cylinder(h=5, d1=3, d2=1, $fn=8);\n            }\n    }\n    \n    // Crystal heart core\n    color(crystal_color)\n    translate([0, 0, 10])\n        sphere(d=4, $fn=16);\n}\n\n// Scale to 60mm height\nscale(2.5)\n    xylosprite();",
    "renders": true
  },
  {
    "mythical_creature": "yearnsong",
    "openscad_code": "// Yearnsong - a sorrowful avian spirit that weeps crystalline tears\n// Designed for 3D printing with 2mm wall thickness and minimal overhangs\n\n$fn = 32;\n\nmodule yearnsong_body() {\n    // Main torso - elongated teardrop shape\n    color(\"DarkSlateGray\")\n    union() {\n        // Upper torso\n        translate([0, 0, 8])\n            scale([1, 0.7, 1.2])\n            sphere(12);\n        \n        // Lower body taper\n        translate([0, 0, -5])\n            scale([0.8, 0.6, 1.5])\n            cylinder(h=15, r1=10, r2=5);\n    }\n}\n\nmodule yearnsong_wings() {\n    // Translucent wings with feather texture\n    color(\"LightSteelBlue\", 0.6)\n    union() {\n        // Left wing\n        translate([-12, 0, 12])\n            rotate([0, 0, 30])\n            scale([2, 0.2, 1])\n            difference() {\n                sphere(10);\n                // Feather cuts\n                for(i = [1:5]) {\n                    translate([0, 0, -i*2])\n                        rotate([0, 0, i*15])\n                        cube([15, 2, 4], center=true);\n                }\n            }\n        \n        // Right wing\n        mirror([1, 0, 0])\n            translate([-12, 0, 12])\n            rotate([0, 0, 30])\n            scale([2, 0.2, 1])\n            difference() {\n                sphere(10);\n                for(i = [1:5]) {\n                    translate([0, 0, -i*2])\n                        rotate([0, 0, i*15])\n                        cube([15, 2, 4], center=true);\n                }\n            }\n    }\n}\n\nmodule yearnsong_head() {\n    // Elongated head with mournful expression\n    color(\"DarkSlateGray\")\n    union() {\n        // Skull-like head\n        translate([0, 0, 22])\n            scale([0.8, 0.6, 1.8])\n            sphere(8);\n        \n        // Beak - curved downward\n        color(\"DimGray\")\n        translate([0, 0, 32])\n            rotate([0, 0, 0])\n            difference() {\n                cylinder(h=12, r1=4, r2=1);\n                // Hollow beak\n                translate([0, 0, 1])\n                    cylinder(h=10, r1=3, r2=0.5);\n            }\n        \n        // Eye sockets\n        color(\"MidnightBlue\", 0.8)\n        for(side = [-1, 1]) {\n            translate([side*4, 3, 26])\n                scale([1, 1.2, 0.8])\n                sphere(3);\n        }\n        \n        // Crystalline tear drops\n        color(\"LightCyan\", 0.7)\n        for(side = [-1, 1]) {\n            translate([side*5, 5, 20])\n                rotate([90, 0, 0])\n                scale([0.5, 0.5, 1.5])\n                cylinder(h=8, r1=2, r2=0.5);\n        }\n    }\n}\n\nmodule yearnsong_tail() {\n    // Flowing tail feathers\n    color(\"SlateBlue\")\n    union() {\n        // Central tail\n        translate([0, 0, -12])\n            scale([1, 0.3, 3])\n            cylinder(h=20, r1=5, r2=2);\n        \n        // Side tail feathers\n        for(angle = [-30, 30]) {\n            rotate([0, 0, angle])\n                translate([0, 0, -12])\n                scale([0.7, 0.2, 2.5])\n                cylinder(h=18, r1=4, r2=1);\n        }\n    }\n}\n\nmodule yearnsong_crown() {\n    // Ethereal crown of mourning\n    color(\"Silver\", 0.8)\n    union() {\n        // Base circlet\n        translate([0, 0, 28])\n            rotate_extrude()\n            translate([8, 0, 0])\n            circle(r=1);\n        \n        // Crown spikes\n        for(i = [0:4]) {\n            rotate([0, 0, i*72])\n                translate([0, 8, 28])\n                    cylinder(h=6, r=0.5);\n        }\n    }\n}\n\n// Assemble the yearnsong\nyearnsong_body();\nyearnsong_wings();\nyearnsong_head();\nyearnsong_tail();\nyearnsong_crown();\n\n// Base for stability\ncolor(\"Black\")\ntranslate([0, 0, -18])\n    cylinder(h=2, r=15);",
    "renders": true
  },
  {
    "mythical_creature": "zephyrshade",
    "openscad_code": "// Zephyrshade - mythical wind spirit creature\n// Features: ethereal wings, horned crest, flowing tail, elemental patterns\n\n// Overall scale factor for easy resizing\nscale_factor = 1.5;\n\n// Wing membrane module with wind patterns\nmodule wing_membrane() {\n    difference() {\n        // Main wing surface\n        scale([1, 1.8, 0.1]) \n            rotate([0, 15, 0]) \n                sphere(8);\n        \n        // Wind pattern cutouts\n        for(i = [1:3]) {\n            translate([0, i*4-6, 0])\n                rotate([0, 0, 45*i])\n                    scale([0.3, 1.8, 0.5])\n                        cylinder(h=10, r1=2, r2=1);\n        }\n    }\n}\n\n// Horn module for crest\nmodule horn(height, curve) {\n    rotate_extrude(angle=30, $fn=8)\n        translate([2, 0])\n            circle(r=height/4);\n    translate([0, 0, height/2])\n        rotate([curve, 0, 0])\n            scale([0.8, 0.8, 0.8])\n                cylinder(h=height, r1=height/5, r2=0.1);\n}\n\n// Body segment module\nbody_segment(radius, length) {\n    hull() {\n        sphere(r=radius);\n        translate([0, 0, length])\n            sphere(r=radius*0.8);\n    }\n}\n\n// Main creature assembly\nmodule zephyrshade() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Head with ethereal glow\n        color([0.7, 0.8, 1, 0.9]) {\n            translate([0, 0, 20]) {\n                // Main head\n                sphere(8);\n                \n                // Crest horns\n                for(angle = [0:120:359]) {\n                    rotate([0, 0, angle])\n                        translate([6, 0, 3])\n                            horn(6, 20);\n                }\n                \n                // Eyes (glowing)\n                color([0.5, 0.7, 1, 0.8]) {\n                    translate([4, 3, 2])\n                        sphere(1.5);\n                    translate([4, -3, 2])\n                        sphere(1.5);\n                }\n            }\n        }\n        \n        // Neck\n        color([0.6, 0.7, 0.9, 0.8]) {\n            translate([0, 0, 12])\n                body_segment(5, 8);\n        }\n        \n        // Torso\n        color([0.5, 0.6, 0.8, 0.7]) {\n            translate([0, 0, 5])\n                body_segment(7, 10);\n        }\n        \n        // Wings - ethereal and semi-transparent\n        color([0.4, 0.6, 0.9, 0.5]) {\n            // Left wing\n            translate([-10, 0, 15])\n                rotate([0, -30, 20])\n                    wing_membrane();\n            \n            // Right wing\n            translate([10, 0, 15])\n                mirror([1, 0, 0])\n                    rotate([0, -30, 20])\n                        wing_membrane();\n        }\n        \n        // Tail segments with wind patterns\n        color([0.3, 0.5, 0.8, 0.6]) {\n            for(i = [1:5]) {\n                translate([0, 0, 5 - i*4])\n                    rotate([0, 0, sin(i*30)*10])\n                        body_segment(6 - i, 4);\n            }\n        }\n        \n        // Elemental wind wisps\n        color([0.8, 0.9, 1, 0.4]) {\n            for(i = [1:6]) {\n                angle = i*60;\n                translate([cos(angle)*15, sin(angle)*15, 10])\n                    scale([0.5, 0.5, 2])\n                        sphere(2);\n            }\n        }\n        \n        // Leg supports (simplified for printing)\n        color([0.4, 0.5, 0.7]) {\n            // Front legs\n            translate([5, 4, 0])\n                cylinder(h=8, r=2);\n            translate([5, -4, 0])\n                cylinder(h=8, r=2);\n            \n            // Back legs\n            translate([-5, 4, 0])\n                cylinder(h=8, r=2);\n            translate([-5, -4, 0])\n                cylinder(h=8, r=2);\n        }\n    }\n}\n\n// Generate the creature\nzephyrshade();",
    "renders": true
  },
  {
    "mythical_creature": "ashgleam",
    "openscad_code": "// Ashgleam - a phoenix-like mythical creature with glowing ember wings and tail\n// Realistic medium detail for 3D printing (80mm length)\n\n// Main module\nmodule ashgleam() {\n    color([0.8, 0.3, 0.1]) {\n        // Body - elongated oval\n        translate([0, 0, 20])\n            scale([1.5, 1, 1])\n            sphere(15);\n        \n        // Chest protrusion\n        translate([0, -10, 15])\n            rotate([15, 0, 0])\n            scale([1.2, 1.2, 0.8])\n            sphere(10);\n    }\n    \n    // Head with beak\n    color([0.9, 0.4, 0.15]) {\n        translate([0, -30, 25])\n            rotate([30, 0, 0])\n            scale([0.8, 0.8, 1])\n            sphere(12);\n        \n        // Beak\n        translate([0, -45, 30])\n            rotate([45, 0, 0])\n            scale([0.3, 1.5, 0.3])\n            cylinder(h=15, d1=8, d2=3);\n    }\n    \n    // Eyes\n    color([1, 0.9, 0.2]) {\n        for(side = [-1, 1]) {\n            translate([side*8, -35, 30])\n                sphere(3);\n        }\n    }\n    \n    // Wings with ember-like feathers\n    color([0.9, 0.2, 0.05]) {\n        for(side = [-1, 1]) {\n            // Upper wing\n            translate([side*25, 0, 35])\n                rotate([0, 0, side*30])\n                rotate([0, side*20, 0])\n                scale([1.5, 2, 0.3])\n                cylinder(h=1, d=20);\n            \n            // Wing feathers using loops\n            for(i = [0:4]) {\n                translate([side*(25 + side*i*8), side*i*3, 35 - i*5])\n                    rotate([0, 0, side*(30 + i*5)])\n                    rotate([0, side*20, 0])\n                    scale([0.8, 1.2, 0.2])\n                    cylinder(h=1, d=12 - i*2);\n            }\n        }\n    }\n    \n    // Tail with glowing ember feathers\n    color([1, 0.4, 0.1]) {\n        for(i = [0:6]) {\n            angle = 15 + i*10;\n            translate([-15 - i*3, 0, 20 - i*2])\n                rotate([0, 0, 180])\n                rotate([0, angle, 0])\n                scale([0.5, 2 + i*0.3, 0.2])\n                cylinder(h=1, d=8 - i);\n        }\n    }\n    \n    // Legs\n    color([0.6, 0.2, 0.05]) {\n        for(side = [-1, 1]) {\n            // Upper leg\n            translate([side*10, -5, 10])\n                rotate([0, side*10, 0])\n                cylinder(h=15, d=4);\n            \n            // Lower leg\n            translate([side*12, -5, -2])\n                rotate([20, 0, 0])\n                cylinder(h=12, d=3);\n            \n            // Talons\n            translate([side*12, -5, -12])\n                rotate([90, 0, 0])\n                scale([1, 0.3, 0.3])\n                cylinder(h=8, d=6);\n        }\n    }\n    \n    // Horn/crest\n    color([0.9, 0.5, 0.1]) {\n        translate([0, -25, 40])\n            rotate([0, 0, 0])\n            cylinder(h=15, d1=3, d2=1);\n        \n        for(side = [-1, 1]) {\n            translate([side*5, -28, 38])\n                rotate([side*10, 0, 0])\n                cylinder(h=12, d1=2, d2=1);\n        }\n    }\n    \n    // Glowing ember spots on body\n    color([1, 0.8, 0.2]) {\n        for(i = [0:9]) {\n            angle = i*36;\n            radius = 8 + (i%2)*3;\n            translate([cos(angle)*radius, sin(angle)*radius - 10, 20])\n                sphere(1.5);\n        }\n    }\n}\n\n// Create the ashgleam\nashgleam();",
    "renders": true
  },
  {
    "mythical_creature": "blightroot",
    "openscad_code": "// Blightroot - A corrupted treant-like mythical creature with fungal growths\n// Size: 80mm tall, designed for FDM 3D printing\n\nmodule blightroot() {\n    // Main trunk body - hollow for printing\n    difference() {\n        // Outer trunk shell\n        color([0.3, 0.2, 0.1])\n        cylinder(h=40, d1=25, d2=20, $fn=16);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n        cylinder(h=36, d1=20, d2=15, $fn=16);\n    }\n    \n    // Lower root system\n    module root_spread(count) {\n        for(i = [0:count-1]) {\n            rotate([0, 0, i*360/count])\n            translate([10, 0, -5])\n            rotate([-90, 0, 0])\n            color([0.25, 0.15, 0.1])\n            cylinder(h=20, d1=5, d2=2, $fn=8);\n        }\n    }\n    root_spread(6);\n    \n    // Upper fungal cap - mushroom-like structure\n    translate([0, 0, 40])\n    difference() {\n        // Main cap\n        color([0.4, 0.1, 0.5])\n        sphere(d=35, $fn=32);\n        \n        // Underside cavity\n        translate([0, 0, -5])\n        sphere(d=30, $fn=32);\n    }\n    \n    // Glowing fungal spots on cap\n    module fungal_spots(radius) {\n        for(i = [0:8]) {\n            angle = i * 137.5;  // Golden angle for natural distribution\n            dist = 10 + (i*2);\n            x = cos(angle) * dist;\n            y = sin(angle) * dist;\n            \n            translate([x, y, 15])\n            color([0.8, 0.4, 0.9])\n            sphere(r=radius, $fn=8);\n        }\n    }\n    fungal_spots(2);\n    \n    // Branching arms with claw-like twigs\n    module branch_arm(angle, height) {\n        translate([0, 0, height])\n        rotate([0, 0, angle])\n        translate([12, 0, 0])\n        rotate([0, 90, 0])\n        color([0.35, 0.2, 0.15])\n        cylinder(h=15, d=4, $fn=8);\n        \n        // Claw twigs\n        for(i = [0:2]) {\n            rotate([0, 0, angle])\n            translate([18, 0, height])\n            rotate([0, 45 + i*30, 0])\n            color([0.3, 0.15, 0.1])\n            cylinder(h=8, d=2, $fn=6);\n        }\n    }\n    \n    branch_arm(45, 25);\n    branch_arm(-45, 25);\n    branch_arm(135, 30);\n    branch_arm(-135, 30);\n    \n    // Eyes - hollow sockets with glowing cores\n    module eye_socket(x_pos, z_pos) {\n        // Socket cavity\n        translate([x_pos, 12, z_pos])\n        rotate([0, 90, 0])\n        color([0.1, 0.1, 0.1])\n        cylinder(h=5, d=6, $fn=12);\n        \n        // Glowing eye core\n        translate([x_pos, 14, z_pos])\n        color([0.9, 0.2, 0.1])\n        sphere(r=2, $fn=8);\n    }\n    \n    eye_socket(6, 20);\n    eye_socket(-6, 20);\n    \n    // Corruption veins running down trunk\n    module corruption_vein(start_z, length) {\n        for(i = [0:length]) {\n            z = start_z - i*2;\n            x_offset = sin(i*30)*3;\n            \n            translate([x_offset, 0, z])\n            color([0.5, 0.1, 0.6])\n            sphere(r=1.5, $fn=6);\n        }\n    }\n    \n    corruption_vein(35, 10);\n    corruption_vein(30, 8);\n    corruption_vein(25, 12);\n}\n\n// Base platform for stability\ntranslate([0, 0, -8])\ncolor([0.2, 0.15, 0.1])\ncylinder(h=3, d=40, $fn=32);\n\n// Generate the creature\nblightroot();",
    "renders": true
  },
  {
    "mythical_creature": "citrinewisp",
    "openscad_code": "// CitrineWisp - a crystalline wind-spirit dragon\n// Medium complexity realistic OpenSCAD model\n// ~70 mm wingspan, 3D-printable\n\n$fn = 32;\n\nmodule citrine_body() {\n    color(\"gold\") \n    hull() {\n        sphere(d = 12);                       // head sphere\n        translate([0,-25,0]) sphere(d = 18);  // torso sphere\n    }\n}\n\nmodule citrine_head() {\n    // snout\n    color(\"gold\")\n    translate([0, 8, 0])\n    scale([0.6, 2, 0.6])\n    sphere(d = 10);\n    \n    // horns\n    color(\"goldenrod\")\n    for(a = [0, 120, 240])\n        rotate([0,0,a])\n        translate([6, 0, 8])\n        rotate([30,0,0])\n        cylinder(h = 12, d1 = 3, d2 = 1);\n    \n    // eyes\n    color(\"darkorange\")\n    for(side = [-1, 1])\n        translate([side*5, 3, 3])\n        sphere(d = 2.5);\n}\n\nmodule citrine_wing() {\n    // main membrane\n    color(\"lemonchiffon\") \n    translate([0, -5, 0])\n    rotate([0, 0, 30])\n    linear_extrude(height = 1, scale = 0.3)\n        polygon(points = [[0,0],[35,0],[30,20],[10,25]]);\n    \n    // wing struts\n    color(\"goldenrod\")\n    for(p = [[30,0], [25,15], [10,20]])\n        hull() {\n            cylinder(h = 2, d = 2);\n            translate([p[0], p[1], 0]) cylinder(h = 2, d = 1.5);\n        }\n}\n\nmodule citrine_tail() {\n    color(\"gold\")\n    for(i = [0:5]) {\n        translate([0, -30 - i*5, 0])\n        scale([1 - i*0.12, 1, 1 - i*0.12])\n        sphere(d = 12 - i);\n    }\n}\n\nmodule citrine_legs() {\n    color(\"goldenrod\")\n    for(side = [-1, 1])\n        translate([side*7, -20, -8])\n        rotate([30, 0, side*20])\n        cylinder(h = 15, d = 4);\n}\n\nmodule citrine_sparkles() {\n    // magical crystal shards\n    color(\"yellow\")\n    for(a = [0:60:359])\n        for(r = [15:10:35]) {\n            rotate([0,0,a]) translate([r, -15, 0]) sphere(d = 1.5);\n        }\n}\n\n// assemble creature\nunion() {\n    citrine_body();\n    citrine_head();\n    citrine_tail();\n    citrine_legs();\n    \n    // wings\n    translate([0, -5, 5])\n    rotate([0, 0, 180])\n    mirror([1,0,0]) citrine_wing();\n    \n    translate([0, -5, 5])\n    citrine_wing();\n    \n    citrine_sparkles();\n}",
    "renders": true
  },
  {
    "mythical_creature": "driftshade",
    "openscad_code": "// Driftshade - Shadow dragon of the void\n// A medium-complexity 3D printable model using basic primitives\n\n// Main parameters\nscale_factor = 0.8;\nbody_length = 60 * scale_factor;\nbody_height = 25 * scale_factor;\nwing_span = 70 * scale_factor;\n\n// Color definitions\ncolor_body = [0.15, 0.12, 0.25];      // Deep void purple\ncolor_accents = [0.3, 0.2, 0.4];      // Lighter purple highlights\ncolor_eyes = [0.8, 0.2, 0.3];         // Crimson eyes\ncolor_void = [0.05, 0.05, 0.15];      // Darkest void\n\nmodule driftshade() {\n    union() {\n        // Main body\n        translate([0, 0, body_height/2])\n        color(color_body)\n        scale([1.2, 0.8, 0.6])\n        sphere(d=body_length);\n        \n        // Head\n        translate([body_length/2 + 8, 0, body_height/2 + 5])\n        color(color_body)\n        scale([1.5, 1, 1.2])\n        sphere(d=20 * scale_factor);\n        \n        // Snout\n        translate([body_length/2 + 18, 0, body_height/2 + 5])\n        color(color_body)\n        rotate([0, 15, 0])\n        scale([2, 0.8, 0.6])\n        cylinder(h=12 * scale_factor, d1=8 * scale_factor, d2=4 * scale_factor);\n        \n        // Eyes (glowing void orbs)\n        for(side = [-1, 1]) {\n            translate([body_length/2 + 15, side * 6, body_height/2 + 8])\n            color(color_eyes)\n            sphere(d=4 * scale_factor);\n            \n            // Eye sockets\n            translate([body_length/2 + 16, side * 6, body_height/2 + 8])\n            color(color_void)\n            sphere(d=5 * scale_factor);\n        }\n        \n        // Horns - curved back\n        for(side = [-1, 1]) {\n            translate([body_length/2 + 5, side * 8, body_height/2 + 12])\n            rotate([0, side * 30, -20])\n            color(color_accents)\n            cylinder(h=15 * scale_factor, d1=4 * scale_factor, d2=1 * scale_factor);\n        }\n        \n        // Neck ridge scales\n        for(i = [0:5]) {\n            translate([body_length/2 - i * 6, 0, body_height/2 + 12 + i])\n            rotate([0, 0, 0])\n            color(color_accents)\n            scale([1, 0.3, 1.5])\n            sphere(d=6 * scale_factor);\n        }\n        \n        // Wings - void membranes\n        for(side = [-1, 1]) {\n            translate([0, side * body_length/3, body_height/2 + 5])\n            rotate([0, 0, side * 20])\n            wing(side);\n        }\n        \n        // Tail - segmented\n        tail_segments();\n        \n        // Legs - clawed\n        for(side = [-1, 1]) {\n            translate([body_length/4, side * body_length/3, body_height/2 - 8])\n            leg(side);\n        }\n        \n        // Void wisps - magical emanations\n        for(i = [0:8]) {\n            angle = i * 45;\n            distance = 25 + sin(i * 30) * 5;\n            translate([\n                cos(angle) * distance * scale_factor,\n                sin(angle) * distance * scale_factor,\n                body_height/2 + 10 + sin(i * 60) * 3\n            ])\n            color(color_void)\n            sphere(d=(2 + sin(i * 45)) * scale_factor);\n        }\n    }\n}\n\nmodule wing(side) {\n    color(color_void)\n    difference() {\n        // Main wing membrane\n        translate([0, 0, 0])\n        rotate([0, 90, 0])\n        scale([1, wing_span/2, 0.5])\n        sphere(d=wing_span);\n        \n        // Wing holes - void tears\n        for(i = [1:3]) {\n            translate([5, i * 8 * side, -2 + i])\n            sphere(d=6 * scale_factor);\n        }\n        \n        // Wing claw\n        translate([wing_span/2 - 5, 0, 0])\n        rotate([0, 0, 45])\n        scale([0.5, 0.3, 0.3])\n        cylinder(h=8 * scale_factor, d=4 * scale_factor);\n    }\n}\n\nmodule tail_segments() {\n    for(i = [0:6]) {\n        translate([\n            -body_length/2 - i * 8,\n            0,\n            body_height/2 - i * 2\n        ])\n        rotate([0, 0, sin(i * 15) * 5])\n        scale([1 - i * 0.1, 1 - i * 0.1, 1 - i * 0.1])\n        color(color_body)\n        sphere(d=12 * scale_factor);\n        \n        // Tail spikes\n        if(i % 2 == 0) {\n            translate([\n                -body_length/2 - i * 8,\n                0,\n                body_height/2 - i * 2 + 3\n            ])\n            color(color_accents)\n            cylinder(h=4 * scale_factor, d1=2 * scale_factor, d2=0.5 * scale_factor);\n        }\n    }\n}\n\nmodule leg(side) {\n    union() {\n        // Upper leg\n        translate([0, 0, 0])\n        rotate([90, 0, side * 10])\n        color(color_body)\n        cylinder(h=12 * scale_factor, d=6 * scale_factor);\n        \n        // Lower leg\n        translate([0, 0, -12 * scale_factor])\n        rotate([90 + side * 15, 0, side * 5])\n        color(color_body)\n        cylinder(h=10 * scale_factor, d=5 * scale_factor);\n        \n        // Foot with claws\n        translate([0, 0, -22 * scale_factor])\n        rotate([90, 0, 0])\n        color(color_body)\n        scale([1, 2, 0.5])\n        sphere(d=8 * scale_factor);\n        \n        // Claws\n        for(j = [-1, 0, 1]) {\n            translate([j * 3, -8 * scale_factor, -22 * scale_factor])\n            rotate([0, 90, 0])\n            color(color_accents)\n            cylinder(h=4 * scale_factor, d1=2 * scale_factor, d2=0.5 * scale_factor);\n        }\n    }\n}\n\n// Create the driftshade\ndriftshade();",
    "renders": true
  },
  {
    "mythical_creature": "emberwhorl",
    "openscad_code": "// Emberwhorl - Fire spiral dragon with glowing coal wings\n// Creature height: 60mm, wingspan: 80mm\n\n$fn = 32;\n\nmodule body() {\n    color(\"darkred\")\n    union() {\n        // Main torso - elongated teardrop\n        translate([0, 0, 25])\n        scale([1, 0.7, 1.2])\n        sphere(15);\n        \n        // Neck - connecting tube\n        translate([0, 0, 35])\n        rotate([0, 15, 0])\n        cylinder(h=15, r1=8, r2=6);\n        \n        // Head\n        translate([0, 0, 48])\n        rotate([0, 15, 0])\n        scale([1, 0.8, 1.2])\n        sphere(8);\n    }\n}\n\nmodule wings() {\n    color(\"orangered\")\n    for(side = [-1, 1]) {\n        translate([side * 15, 0, 30])\n        rotate([0, side * 30, 0])\n        union() {\n            // Main wing membrane\n            translate([0, 0, 0])\n            rotate([0, 0, side * 20])\n            scale([1, 0.3, 1])\n            sphere(25);\n            \n            // Wing struts - coal-like structures\n            for(i = [0:2]) {\n                color(\"black\")\n                translate([i * 8 + 5, 0, -i * 5])\n                rotate([0, 0, side * (30 - i * 10)])\n                scale([0.8, 0.3, 0.5])\n                sphere(6);\n            }\n        }\n    }\n}\n\nmodule tail() {\n    color(\"darkred\")\n    hull() {\n        // Tail base\n        translate([0, 0, 15])\n        sphere(8);\n        \n        // Tail segments - spiraling\n        for(i = [0:4]) {\n            rotate([0, 0, i * 30])\n            translate([i * 4, -i * 2, 15 - i * 5])\n            sphere(6 - i);\n        }\n        \n        // Tail tip - glowing ember\n        color(\"yellow\")\n        translate([20, -10, 0])\n        sphere(3);\n    }\n}\n\nmodule legs() {\n    color(\"darkred\")\n    for(side = [-1, 1]) {\n        // Front leg\n        translate([side * 10, 0, 20])\n        rotate([0, side * 10, 0])\n        cylinder(h=15, r=4);\n        \n        // Front foot\n        translate([side * 10, 0, 5])\n        scale([1.5, 1, 0.5])\n        sphere(4);\n        \n        // Back leg\n        translate([side * 8, 8, 20])\n        rotate([0, side * 5, 0])\n        cylinder(h=12, r=3.5);\n        \n        // Back foot\n        translate([side * 8, 8, 8])\n        scale([1.3, 1, 0.5])\n        sphere(3.5);\n    }\n}\n\nmodule horns() {\n    color(\"orangered\")\n    union() {\n        // Main horn\n        translate([0, 0, 54])\n        rotate([0, 0, 0])\n        cylinder(h=12, r1=3, r2=1);\n        \n        // Side horns\n        for(side = [-1, 1]) {\n            translate([side * 5, 0, 52])\n            rotate([0, 0, side * 15])\n            cylinder(h=8, r1=2, r2=0.5);\n        }\n        \n        // Horn tips - glowing\n        color(\"yellow\")\n        translate([0, 0, 66])\n        sphere(1.5);\n    }\n}\n\nmodule ember_details() {\n    // Glowing ember spots along spine\n    color(\"yellow\")\n    for(i = [0:3]) {\n        translate([0, 0, 35 - i * 8])\n        sphere(2);\n    }\n    \n    // Eye embers\n    color(\"yellow\")\n    for(side = [-1, 1]) {\n        translate([side * 3, 4, 50])\n        sphere(1.5);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    wings();\n    tail();\n    legs();\n    horns();\n    ember_details();\n}",
    "renders": true
  },
  {
    "mythical_creature": "frostglen",
    "openscad_code": "// Frostglen - Ice Phoenix Dragon Hybrid\n// Realistic style with medium complexity\n// Wingspan: 80mm, Length: 60mm, Height: 45mm\n\ncolor(\"lightskyblue\") {\n    union() {\n        // Main body\n        translate([0, 0, 20]) {\n            difference() {\n                // Torso\n                scale([1.2, 0.8, 1]) sphere(15);\n                \n                // Neck cavity\n                translate([0, 15, 10]) rotate([90, 0, 0]) \n                    cylinder(h=20, r=6);\n                \n                // Tail cavity\n                translate([0, -20, -5]) rotate([90, 0, 0]) \n                    cylinder(h=25, r=4);\n            }\n        }\n        \n        // Neck\n        rotate([20, 0, 0]) {\n            translate([0, 15, 30]) {\n                cylinder(h=25, r=6);\n            }\n        }\n        \n        // Head\n        translate([0, 15, 55]) {\n            scale([0.8, 0.7, 1]) sphere(12);\n            \n            // Snout\n            translate([0, 12, -2]) {\n                scale([0.6, 1.2, 0.4]) sphere(8);\n            }\n            \n            // Horns - frost crystal formations\n            for(i = [0:30:150]) {\n                rotate([0, 0, i]) {\n                    translate([10, 5, 8]) {\n                        rotate([30, 0, 0]) {\n                            cylinder(h=8, r1=2, r2=0.5);\n                        }\n                    }\n                }\n            }\n            \n            // Eyes - glowing ice orbs\n            translate([5, 8, 2]) {\n                color(\"cyan\") sphere(2);\n            }\n            translate([-5, 8, 2]) {\n                color(\"cyan\") sphere(2);\n            }\n        }\n        \n        // Wings - phoenix-style frost wings\n        module wing() {\n            translate([-30, 0, 30]) {\n                rotate([0, 0, -20]) {\n                    // Main wing membrane\n                    scale([2, 0.1, 1.5]) sphere(10);\n                    \n                    // Wing feathers\n                    for(i = [0:3]) {\n                        translate([-10, 0, i*8-12]) {\n                            rotate([0, 0, i*5]) {\n                                scale([0.8, 0.05, 0.3]) sphere(8);\n                            }\n                        }\n                    }\n                    \n                    // Wing bones\n                    translate([-5, 0, 0]) {\n                        rotate([0, 60, 0]) {\n                            cylinder(h=20, r=1.5);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Left wing\n        wing();\n        \n        // Right wing\n        mirror([1, 0, 0]) wing();\n        \n        // Tail - dragon tail with frost crystals\n        translate([0, -20, 15]) {\n            rotate([90, 0, 0]) {\n                for(i = [0:5]) {\n                    translate([0, 0, i*5]) {\n                        scale([1 - i*0.1, 1 - i*0.1, 1]) {\n                            sphere(4);\n                        }\n                    }\n                }\n                \n                // Frost crystal spikes along tail\n                for(i = [1:5]) {\n                    rotate([0, 0, i*45]) {\n                        translate([0, 0, i*5]) {\n                            rotate([0, 30, 0]) {\n                                cylinder(h=3, r1=1, r2=0.2);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Legs\n        module leg(side) {\n            translate([side*8, 0, 10]) {\n                rotate([0, 30*side, 0]) {\n                    // Upper leg\n                    cylinder(h=12, r=3);\n                    \n                    // Lower leg\n                    translate([0, 0, -12]) {\n                        rotate([0, -30, 0]) {\n                            cylinder(h=10, r=2.5);\n                            \n                            // Foot with claws\n                            translate([0, 0, -10]) {\n                                scale([1.5, 0.8, 0.5]) sphere(4);\n                                \n                                // Claws\n                                for(j = [-1:1]) {\n                                    translate([j*2, 2, -2]) {\n                                        rotate([0, 0, j*20]) {\n                                            cylinder(h=3, r1=1, r2=0.3);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Front legs\n        leg(1);\n        leg(-1);\n        \n        // Frost aura around body\n        translate([0, 0, 30]) {\n            color(\"white\", 0.3) {\n                sphere(25);\n            }\n        }\n        \n        // Chest scales\n        for(i = [0:4]) {\n            translate([0, 10 - i*2, 20 - i*3]) {\n                rotate([0, 90, 0]) {\n                    scale([1, 0.3, 0.5]) sphere(3);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "glimmerthorn",
    "openscad_code": "// Glimmerthorn - a crystalline deer-like creature with glowing antlers and ethereal wings\n// Designed for 3D printing with no overhangs >45 degrees\n\n// Main scale factor for easy sizing\nscale_factor = 1;\n\n// Colors\nbody_color = \"Silver\";\nhorn_color = \"Gold\";\nwing_color = \"LightBlue\";\neye_color = \"Red\";\n\n// Body module\nmodule body() {\n    color(body_color)\n    union() {\n        // Main torso - elongated ellipsoid\n        scale([1.2, 0.8, 1.5]) sphere(d=30);\n        \n        // Neck connection\n        translate([0, 0, 20]) rotate([15, 0, 0])\n            scale([0.7, 0.7, 1.2]) sphere(d=15);\n            \n        // Legs - simple cylinders for printability\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([side * 10, 12, -15])\n                rotate([15, 0, side * -5])\n                cylinder(h=25, d1=8, d2=6, $fn=8);\n            \n            // Back legs\n            translate([side * 8, -12, -15])\n                rotate([15, 0, side * 5])\n                cylinder(h=25, d1=8, d2=6, $fn=8);\n        }\n    }\n}\n\n// Head module\nmodule head() {\n    color(body_color)\n    translate([0, 22, 25]) rotate([15, 0, 0])\n    union() {\n        // Main head shape\n        scale([0.8, 0.6, 1]) sphere(d=20);\n        \n        // Snout\n        translate([0, 12, -2])\n            scale([0.4, 0.8, 0.5]) sphere(d=15);\n            \n        // Eyes - glowing crystals\n        color(eye_color) {\n            for(side = [-1, 1])\n                translate([side * 6, 8, 3])\n                    sphere(d=3);\n        }\n        \n        // Ears\n        for(side = [-1, 1]) {\n            translate([side * 6, 3, 8]) rotate([0, side * 15, 0])\n                cylinder(h=10, d1=3, d2=5, $fn=6);\n        }\n    }\n}\n\n// Crystalline antlers\nmodule antlers() {\n    color(horn_color)\n    translate([0, 22, 35]) rotate([15, 0, 0])\n    union() {\n        // Base antler structure\n        for(angle = [0, 120, 240]) {\n            rotate([0, 0, angle])\n            translate([0, 0, 0])\n            union() {\n                // Main branch\n                rotate([20, 0, 0])\n                    cylinder(h=15, d1=4, d2=2, $fn=6);\n                    \n                // Secondary branches\n                translate([0, 5, 10]) rotate([40, 0, 30])\n                    cylinder(h=10, d1=2, d2=1, $fn=6);\n                translate([0, -5, 10]) rotate([40, 0, -30])\n                    cylinder(h=10, d1=2, d2=1, $fn=6);\n                    \n                // Crystal points\n                translate([0, 0, 15])\n                    scale([0.3, 0.3, 1.5])\n                    sphere(d=3, $fn=6);\n            }\n        }\n    }\n}\n\n// Ethereal wings with membrane structure\nmodule wings() {\n    color(wing_color, 0.6)\n    for(side = [-1, 1]) {\n        translate([side * 15, -5, 15]) rotate([0, side * 20, 0])\n        union() {\n            // Wing arm\n            rotate([0, 90, 0])\n                cylinder(h=20, d1=4, d2=2, $fn=8);\n                \n            // Wing membrane - simplified for printing\n            translate([0, -10, 0]) rotate([-20, 0, 0])\n                scale([1, 0.1, 1])\n                difference() {\n                    // Main wing shape\n                    scale([1, 1, 0.5]) sphere(d=25);\n                    \n                    // Cutouts for ethereal pattern\n                    for(i = [1:3]) {\n                        translate([i * 5, 0, 0])\n                            scale([0.5, 1, 0.5]) sphere(d=5);\n                    }\n                }\n                \n            // Wing supports\n            for(i = [1:3]) {\n                rotate([0, 0, i * 30])\n                    translate([0, 0, -i * 3])\n                    cylinder(h=15 - i * 3, d1=2, d2=1, $fn=6);\n            }\n        }\n    }\n}\n\n// Magical tail with crystal tip\nmodule tail() {\n    color(body_color)\n    translate([0, -20, 5])\n    union() {\n        // Tail base\n        rotate([45, 0, 0])\n            cylinder(h=20, d1=10, d2=4, $fn=8);\n            \n        // Crystal tail tip\n        color(horn_color)\n        translate([0, -15, -10])\n            scale([0.8, 0.8, 1.5])\n            sphere(d=8, $fn=8);\n    }\n}\n\n// Assemble the creature\nscale(scale_factor)\nunion() {\n    body();\n    head();\n    antlers();\n    wings();\n    tail();\n    \n    // Ground base for stability\n    color(\"DarkGray\")\n    translate([0, 0, -20])\n        scale([2, 2.5, 0.5])\n        cylinder(h=2, d=30, $fn=32);\n}",
    "renders": true
  },
  {
    "mythical_creature": "hollowsprite",
    "openscad_code": "// Hollowsprite - A mystical forest spirit with crystal wings and hollow body\n// Wingspan: 80mm, Height: 65mm, Wall thickness: 1.5mm\n\n$fn = 32;\n\n// Main module for the complete hollowsprite\nmodule hollowsprite() {\n    // Body shell\n    difference() {\n        // Outer body\n        color(\"limegreen\") body_shell();\n        \n        // Inner hollow space\n        translate([0, 0, 1.5]) scale([0.85, 0.85, 0.85]) body_shell();\n    }\n    \n    // Crystal wings\n    color(\"azure\") wings();\n    \n    // Head with features\n    color(\"forestgreen\") head();\n    \n    // Mystical tail\n    color(\"limegreen\") tail();\n    \n    // Magical horns\n    color(\"gold\") horns();\n}\n\n// Body shell - hollow egg shape\nmodule body_shell() {\n    scale([1.2, 1, 1.4]) sphere(d = 25);\n}\n\n// Head module with facial features\nmodule head() {\n    translate([0, 0, 18]) {\n        // Main head sphere\n        sphere(d = 18);\n        \n        // Eyes - glowing crystals\n        translate([-6, 8, 3]) sphere(d = 3);\n        translate([6, 8, 3]) sphere(d = 3);\n        \n        // Snout\n        translate([0, 10, -2]) scale([0.8, 1.2, 0.8]) sphere(d = 8);\n    }\n}\n\n// Crystal wings with hollow structure\nmodule wings() {\n    // Left wing\n    translate([-15, 0, 8]) rotate([0, 0, 45]) wing_half();\n    \n    // Right wing\n    translate([15, 0, 8]) mirror([1, 0, 0]) rotate([0, 0, 45]) wing_half();\n}\n\n// Single wing half with hollow veins\nmodule wing_half() {\n    // Main wing membrane\n    difference() {\n        // Outer wing shape\n        linear_extrude(height = 1.5, convexity = 10) wing_outline();\n        \n        // Inner hollow veins pattern\n        translate([0, 0, -0.1]) linear_extrude(height = 1.7, convexity = 10) wing_veins();\n    }\n    \n    // Wing veins structure for 3D printing support\n    for(i = [0:3]) {\n        rotate([90, 0, i * 30]) \n            translate([0, 0, 0.75]) \n            cylinder(h = 1.5, d1 = 2, d2 = 1);\n    }\n}\n\n// Wing outline shape\nmodule wing_outline() {\n    polygon(points = [\n        [0, 0], [5, 15], [15, 25], [25, 20], [30, 10], \n        [28, -5], [20, -15], [10, -10], [0, 0]\n    ]);\n}\n\n// Wing veins pattern\nmodule wing_veins() {\n    difference() {\n        wing_outline();\n        \n        // Hollow vein pattern\n        for(i = [1:3]) {\n            offset(r = -i * 3) wing_outline();\n        }\n        \n        // Structural holes\n        for(i = [1:3]) {\n            translate([i * 8, 5, 0]) circle(r = 2);\n            translate([i * 8, -3, 0]) circle(r = 1.5);\n        }\n    }\n}\n\n// Mystical tail with spiral pattern\nmodule tail() {\n    translate([0, 0, -15]) {\n        for(i = [0:20]) {\n            rotate([0, 0, i * 15]) \n                translate([0, -i * 0.8, -i * 1.2]) \n                scale([1 - i * 0.02, 1 - i * 0.02, 1]) \n                sphere(d = 6 - i * 0.2);\n        }\n    }\n}\n\n// Magical horns with spiral texture\nmodule horns() {\n    // Left horn\n    translate([-5, 5, 25]) {\n        rotate([30, 0, -30]) horn();\n    }\n    \n    // Right horn\n    translate([5, 5, 25]) {\n        rotate([30, 0, 30]) horn();\n    }\n}\n\n// Single horn with spiral ridges\nmodule horn() {\n    difference() {\n        // Main horn cone\n        cylinder(h1 = 1, h2 = 0.5, h = 12);\n        \n        // Spiral hollow pattern\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60]) \n                translate([-0.5, 0, i * 2]) \n                cube([1, 2, 1.5]);\n        }\n    }\n}\n\n// Generate the complete model\nhollowsprite();",
    "renders": true
  },
  {
    "mythical_creature": "icespar",
    "openscad_code": "// Icespar - A mythical ice phoenix-like creature with crystalline wings and tail\n// Overall dimensions: ~80mm wingspan, ~60mm length\n\n// Main colors\nIceBlue = [180/255, 220/255, 255/255];\nCrystalWhite = [240/255, 250/255, 255/255];\nFrostSilver = [200/255, 210/255, 220/255];\n\n// Main body module\nmodule icespar_body() {\n    color(IceBlue)\n    union() {\n        // Main torso\n        translate([0, 0, 10])\n            scale([1.2, 0.8, 1])\n            sphere(r=8, $fn=20);\n        \n        // Chest plate\n        translate([0, 0, 15])\n            scale([1.4, 1, 0.5])\n            sphere(r=6, $fn=16);\n        \n        // Lower body\n        translate([0, 0, 2])\n            scale([0.8, 0.6, 1.2])\n            sphere(r=7, $fn=18);\n    }\n}\n\n// Crystalline wings\nmodule icespar_wing() {\n    color(CrystalWhite)\n    union() {\n        // Main wing structure\n        translate([0, 0, 0])\n            rotate([0, 0, 15])\n            scale([1, 0.2, 0.1])\n            cube([20, 30, 3]);\n        \n        // Wing feathers - crystal formations\n        for(i = [0:3]) {\n            translate([5 + i*4, -5 - i*2, 0])\n                rotate([0, 0, -10 - i*5])\n                scale([0.8 - i*0.1, 0.1, 0.8 - i*0.1])\n                cube([12 - i*2, 8, 2]);\n        }\n        \n        // Wing tip crystal\n        translate([18, -12, 0])\n            scale([1.5, 1.5, 2])\n            cylinder(r1=3, r2=0, h=6, $fn=6);\n    }\n}\n\n// Head with beak and crest\nmodule icespar_head() {\n    color(IceBlue)\n    union() {\n        // Main head\n        translate([0, 0, 25])\n            scale([0.8, 0.7, 0.9])\n            sphere(r=7, $fn=16);\n        \n        // Beak\n        color(FrostSilver)\n        translate([0, -8, 25])\n            rotate([0, 90, 0])\n            cylinder(r1=3, r2=1, h=10, $fn=8);\n        \n        // Crest crystals\n        color(CrystalWhite)\n        for(i = [0:2]) {\n            translate([0, -2, 30 + i*2])\n                rotate([0, 0, i*15])\n                scale([0.5, 0.5, 1])\n                cylinder(r=1.5, h=4, $fn=6);\n        }\n        \n        // Eyes\n        color([0.2, 0.3, 0.8])\n        translate([3, -5, 26])\n            sphere(r=1.2, $fn=8);\n        translate([-3, -5, 26])\n            sphere(r=1.2, $fn=8);\n    }\n}\n\n// Crystalline tail\nmodule icespar_tail() {\n    color(CrystalWhite)\n    union() {\n        // Tail base\n        translate([0, 8, 8])\n            scale([0.8, 1, 0.8])\n            cylinder(r=4, h=15, $fn=12);\n        \n        // Tail crystals\n        for(i = [0:4]) {\n            translate([sin(i*45)*3, 15 + i*3, 8 - i*2])\n                rotate([0, 0, i*30])\n                scale([1 - i*0.1, 1 - i*0.1, 1.5])\n                cylinder(r1=2 - i*0.2, r2=0, h=6, $fn=6);\n        }\n    }\n}\n\n// Legs with claws\nmodule icespar_leg() {\n    color(IceBlue)\n    union() {\n        // Upper leg\n        translate([0, 0, 0])\n            rotate([0, 15, 0])\n            scale([0.4, 0.4, 1])\n            cylinder(r=2, h=8, $fn=8);\n        \n        // Lower leg\n        translate([0, 0, -8])\n            rotate([0, -15, 0])\n            scale([0.3, 0.3, 0.8])\n            cylinder(r=1.5, h=6, $fn=8);\n        \n        // Foot with claws\n        color(FrostSilver)\n        translate([0, 0, -14])\n            rotate([0, 90, 0])\n            union() {\n                cube([4, 2, 1]);\n                for(j = [0:2]) {\n                    translate([j*1.5 - 1.5, 1, 0])\n                        cylinder(r=0.5, h=2, $fn=8);\n                }\n            }\n    }\n}\n\n// Assemble the complete icespar\nunion() {\n    // Main body\n    icespar_body();\n    \n    // Head\n    icespar_head();\n    \n    // Wings - left and right\n    translate([10, 0, 18])\n        rotate([0, 0, -20])\n        icespar_wing();\n    translate([-10, 0, 18])\n        mirror([1, 0, 0])\n        rotate([0, 0, -20])\n        icespar_wing();\n    \n    // Tail\n    icespar_tail();\n    \n    // Legs\n    translate([4, 4, 0])\n        icespar_leg();\n    translate([-4, 4, 0])\n        scale([-1, 1, 1])\n        icespar_leg();\n}",
    "renders": true
  },
  {
    "mythical_creature": "juniperwhirl",
    "openscad_code": "// Juniperwhirl - Mythical creature with swirling juniper branches for wings and tail\n// Realistic style, medium complexity\n\n// Overall dimensions: ~80mm tall, 60mm wide\n\n$fn = 32;\n\n// Main colors\nbody_color = \"#2F4F2F\";      // Deep forest green\nbranch_color = \"#228B22\";    // Juniper branch green\nglow_color = \"#E6E6FA\";      // Soft magical glow\neye_color = \"#8A2BE2\";       // Mystical purple\n\n// Main module\nmodule juniperwhirl() {\n    color(body_color) {\n        // Body - elongated teardrop shape\n        rotate([0, 0, 0]) {\n            union() {\n                // Main body\n                scale([1, 0.8, 1.5]) sphere(10);\n                \n                // Neck\n                translate([0, 0, 18]) {\n                    rotate([0, 0, 0]) {\n                        cylinder(h=8, r1=5, r2=4);\n                    }\n                }\n                \n                // Head\n                translate([0, 0, 26]) {\n                    scale([0.8, 0.7, 1]) sphere(6);\n                }\n                \n                // Chest ridge\n                translate([0, 5, 10]) {\n                    cube([2, 3, 15], center=true);\n                }\n            }\n        }\n    }\n    \n    // Wings - swirling juniper branches\n    color(branch_color) {\n        for(side = [-1, 1]) {\n            mirror([side, 0, 0]) {\n                // Left wing\n                translate([-8, 0, 15]) {\n                    rotate([0, 0, -20]) {\n                        // Main branch structure\n                        cylinder(h=25, r=1.5);\n                        \n                        // Branch offshoots\n                        for(i = [0:3]) {\n                            rotate([0, 0, i * 45]) {\n                                translate([0, 0, i * 6]) {\n                                    rotate([0, 90, 15 + i * 5]) {\n                                        cylinder(h=15 - i * 2, r=1);\n                                    }\n                                }\n                            }\n                        }\n                        \n                        // Leaf clusters\n                        for(pos = [5, 10, 15, 20]) {\n                            translate([0, 0, pos]) {\n                                for(angle = [0:60:359]) {\n                                    rotate([0, 0, angle]) {\n                                        translate([3, 0, 0]) {\n                                            scale([0.5, 1, 0.3]) sphere(2);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Tail - spiral juniper branch\n    color(branch_color) {\n        translate([0, 0, -15]) {\n            rotate([0, 0, 0]) {\n                // Spiral tail\n                for(i = [0:20]) {\n                    rotate([0, 0, i * 18]) {\n                        translate([0, 3 + i * 0.5, -i * 1.2]) {\n                            cylinder(h=2, r=1.2 - i * 0.03);\n                        }\n                    }\n                }\n                \n                // Tail leaves\n                for(i = [0:5:20]) {\n                    rotate([0, 0, i * 18]) {\n                        translate([0, 3 + i * 0.5, -i * 1.2]) {\n                            for(angle = [0:72:359]) {\n                                rotate([0, 0, angle]) {\n                                    translate([2, 0, 0]) {\n                                        scale([0.4, 0.8, 0.2]) sphere(1.5);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs - root-like structures\n    color(branch_color) {\n        for(side = [-1, 1]) {\n            translate([side * 5, 0, -8]) {\n                rotate([0, 0, side * 10]) {\n                    // Upper leg\n                    cylinder(h=8, r=2);\n                    \n                    // Lower leg\n                    translate([0, 0, -8]) {\n                        rotate([side * 15, 0, 0]) {\n                            cylinder(h=8, r=1.5);\n                            \n                            // Foot\n                            translate([0, 0, -8]) {\n                                scale([1.5, 2, 0.5]) sphere(2);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Eyes - glowing orbs\n    color(glow_color) {\n        translate([2.5, 3, 28]) {\n            sphere(1.5);\n        }\n        translate([-2.5, 3, 28]) {\n            sphere(1.5);\n        }\n    }\n    \n    color(eye_color) {\n        translate([2.5, 3.5, 29]) {\n            sphere(0.8);\n        }\n        translate([-2.5, 3.5, 29]) {\n            sphere(0.8);\n        }\n    }\n    \n    // Antlers - juniper berry clusters\n    color(branch_color) {\n        for(side = [-1, 1]) {\n            translate([side * 3, 0, 30]) {\n                rotate([0, 0, side * 30]) {\n                    cylinder(h=8, r=0.8);\n                    \n                    // Berry clusters\n                    for(pos = [2, 4, 6]) {\n                        translate([0, 0, pos]) {\n                            for(angle = [0:45:359]) {\n                                rotate([0, 0, angle]) {\n                                    translate([1.5, 0, 0]) {\n                                        color(\"#4B0082\") sphere(0.8);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Magical aura emanating from chest\n    color(glow_color) {\n        translate([0, 6, 10]) {\n            scale([1, 1, 1.5]) sphere(3);\n        }\n    }\n}\n\n// Create the creature centered at origin\njuniperwhirl();",
    "renders": true
  },
  {
    "mythical_creature": "kindlethorn",
    "openscad_code": "// Kindlethorn - Mythical fire-plant dragon hybrid\n// Medium complexity realistic creature for 3D printing\n\n$fn = 32;\n\n// Main colors\nbody_color = \"#2D5016\";    // Deep forest green\nthorn_color = \"#8B4513\";   // Brown thorns\nfire_color = \"#FF4500\";    // Fiery orange-red\nglow_color = \"#FFD700\";    // Golden magical glow\n\n// Overall scale factor\nscale_factor = 0.4;\n\nmodule kindlethorn() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main body - bulbous plant-like core\n        color(body_color) \n        translate([0, 0, 5])\n        scale([1.2, 1, 1])\n        sphere(r=15);\n        \n        // Thorn spine along back\n        for(i = [-12:3:12]) {\n            color(thorn_color)\n            translate([0, 0, 5+i])\n            rotate([0, i*2, 0])\n            scale([0.3, 0.3, 1.5])\n            cylinder(r1=2, r2=0.5, h=8);\n        }\n        \n        // Wings - leaf-like with fire veins\n        module wing(side) {\n            mirror([side, 0, 0]) {\n                color(body_color)\n                translate([-15, 0, 15])\n                rotate([0, 0, -20])\n                scale([1, 0.3, 0.1])\n                sphere(r=20);\n                \n                // Fire veins on wings\n                for(i = [0:20:80]) {\n                    color(fire_color)\n                    translate([-15-i/5, 0, 15])\n                    rotate([0, 0, -20-i/10])\n                    scale([0.8, 0.05, 0.05])\n                    sphere(r=20-i/4);\n                }\n            }\n        }\n        \n        wing(1);\n        wing(-1);\n        \n        // Head - dragon-like with thorn crown\n        color(body_color)\n        translate([0, 0, 25])\n        scale([0.8, 0.7, 0.9])\n        sphere(r=10);\n        \n        // Thorn crown\n        for(i = [0:30:330]) {\n            color(thorn_color)\n            translate([0, 0, 32])\n            rotate([0, 0, i])\n            translate([7, 0, 0])\n            cylinder(r1=1.5, r2=0.5, h=6);\n        }\n        \n        // Eyes - glowing ember orbs\n        color(glow_color)\n        translate([4, -4, 27])\n        sphere(r=2);\n        translate([4, 4, 27])\n        sphere(r=2);\n        \n        // Snout with thorn nostrils\n        color(thorn_color)\n        translate([8, 0, 25])\n        cylinder(r=2, h=3);\n        translate([9, -1.5, 25])\n        cylinder(r=0.5, h=2);\n        translate([9, 1.5, 25])\n        cylinder(r=0.5, h=2);\n        \n        // Legs - root-like structures\n        module leg(x, y, angle) {\n            color(body_color)\n            translate([x, y, 0])\n            rotate([0, 0, angle])\n            scale([0.4, 0.4, 1])\n            cylinder(r=5, h=12);\n            \n            // Root tendrils\n            for(i = [-30:15:30]) {\n                color(thorn_color)\n                translate([x, y, 0])\n                rotate([0, 0, angle+i])\n                translate([8, 0, 0])\n                scale([0.1, 0.1, 1])\n                cylinder(r=3, h=15);\n            }\n        }\n        \n        leg(-8, -8, 45);\n        leg(8, -8, -45);\n        leg(-8, 8, 135);\n        leg(8, 8, -135);\n        \n        // Tail - vine-like with thorn segments\n        color(body_color)\n        translate([0, 0, 0])\n        rotate([0, 0, 180])\n        scale([0.6, 0.6, 1])\n        cylinder(r=6, h=25);\n        \n        // Thorn segments on tail\n        for(i = [5:3:25]) {\n            color(thorn_color)\n            translate([0, 0, -i])\n            rotate([0, i*10, 0])\n            scale([0.4, 0.4, 1])\n            cylinder(r=6, h=3);\n        }\n        \n        // Fire core - magical flame at center\n        color(fire_color, 0.7)\n        translate([0, 0, 5])\n        sphere(r=8);\n        \n        // Glowing sparks around fire core\n        for(i = [0:45:315]) {\n            color(glow_color)\n            translate([0, 0, 5])\n            rotate([0, i, 0])\n            translate([10, 0, 0])\n            sphere(r=1);\n        }\n    }\n}\n\n// Create the creature\nkindlethorn();",
    "renders": true
  },
  {
    "mythical_creature": "lunargleam",
    "openscad_code": "// Lunargleam - Moonlight Dragon\n// A mythical creature with glowing scales and ethereal wings\n\n$fn = 50;\n\n// Main body module\nmodule lunargleam() {\n    // Body core\n    color([0.8, 0.9, 1]) {\n        translate([0, 0, 10]) {\n            scale([1.2, 0.8, 1]) sphere(d=20);\n        }\n    }\n    \n    // Head\n    color([0.7, 0.85, 0.95]) {\n        translate([12, 0, 22]) {\n            rotate([-30, 0, 0]) {\n                scale([1.3, 1, 1.1]) sphere(d=15);\n            }\n        }\n    }\n    \n    // Snout\n    color([0.65, 0.8, 0.9]) {\n        translate([20, 0, 22]) {\n            rotate([-30, 0, 0]) {\n                cylinder(h=8, d1=10, d2=5);\n            }\n        }\n    }\n    \n    // Horns - crescent moon shaped\n    color([0.9, 0.9, 1]) {\n        translate([10, 0, 28]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h=15, d=3);\n                    translate([0, -2, 0]) cube([6, 4, 15], center=true);\n                }\n            }\n        }\n        translate([10, 0, 28]) {\n            rotate([0, -90, 0]) {\n                difference() {\n                    cylinder(h=15, d=3);\n                    translate([0, -2, 0]) cube([6, 4, 15], center=true);\n                }\n            }\n        }\n    }\n    \n    // Eyes - glowing orbs\n    color([1, 1, 0.8]) {\n        translate([17, 5, 24]) sphere(d=3);\n        translate([17, -5, 24]) sphere(d=3);\n    }\n    \n    // Wings - ethereal membrane\n    color([0.7, 0.85, 1, 0.7]) {\n        // Left wing\n        translate([-10, 15, 25]) {\n            rotate([0, 0, 30]) {\n                scale([1, 0.3, 1]) sphere(d=30);\n                translate([0, 0, -5]) {\n                    scale([0.8, 0.2, 0.8]) sphere(d=20);\n                }\n            }\n        }\n        \n        // Right wing\n        translate([-10, -15, 25]) {\n            rotate([0, 0, -30]) {\n                scale([1, 0.3, 1]) sphere(d=30);\n                translate([0, 0, -5]) {\n                    scale([0.8, 0.2, 0.8]) sphere(d=20);\n                }\n            }\n        }\n    }\n    \n    // Tail - segmented with glowing tips\n    color([0.75, 0.9, 1]) {\n        for(i = [0:3]) {\n            translate([-5 - i*5, 0, 15 - i*3]) {\n                scale([1 - i*0.15, 1 - i*0.15, 1]) sphere(d=10 - i*2);\n            }\n            \n            // Glowing tail tip\n            if(i == 3) {\n                color([1, 1, 0.9]) {\n                    translate([-5 - i*5, 0, 15 - i*3]) {\n                        sphere(d=6);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs\n    module leg(offset) {\n        color([0.7, 0.85, 0.95]) {\n            translate([5, offset*8, 5]) {\n                cylinder(h=15, d=6);\n                translate([0, 0, -7.5]) {\n                    sphere(d=8);\n                }\n            }\n        }\n    }\n    \n    leg(1);\n    leg(-1);\n    \n    // Arms\n    color([0.75, 0.9, 1]) {\n        translate([8, 8, 15]) {\n            rotate([0, 0, 45]) {\n                cylinder(h=12, d=4);\n            }\n        }\n        translate([8, -8, 15]) {\n            rotate([0, 0, -45]) {\n                cylinder(h=12, d=4);\n            }\n        }\n    }\n    \n    // Moon scales pattern\n    color([0.85, 0.95, 1]) {\n        for(angle = [0:60:300]) {\n            rotate([0, 0, angle]) {\n                translate([0, 8, 18]) {\n                    scale([1, 0.3, 0.5]) sphere(d=4);\n                }\n            }\n        }\n    }\n}\n\n// Create the lunargleam\nlunargleam();",
    "renders": true
  },
  {
    "mythical_creature": "mosswhisper",
    "openscad_code": "// Mosswhisper - A mystical forest guardian with moss-like wings and crystal horns\n// Size: ~75mm height, 3D printable with no overhangs\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    color([0.4, 0.6, 0.3]) {\n        // Torso - elongated oval shape\n        translate([0, 0, 20])\n            scale([1.2, 0.8, 1.5])\n            sphere(10);\n        \n        // Lower body\n        translate([0, 0, 10])\n            scale([1, 0.7, 1.2])\n            cylinder(h=10, r=8);\n    }\n}\n\n// Head with crystal-like features\nmodule head() {\n    color([0.5, 0.7, 0.4]) {\n        // Main head sphere\n        translate([0, 0, 40])\n            sphere(8);\n        \n        // Snout\n        translate([0, 9, 38])\n            scale([0.8, 1.2, 0.8])\n            sphere(5);\n        \n        // Crystal horns - magical growths\n        color([0.8, 0.9, 1]) {\n            // Left horn\n            translate([-5, 0, 47])\n                rotate([0, 15, -20])\n                scale([0.5, 0.5, 2])\n                cylinder(h=8, r=1.5);\n            \n            // Right horn\n            translate([5, 0, 47])\n                rotate([0, 15, 20])\n                scale([0.5, 0.5, 2])\n                cylinder(h=8, r=1.5);\n            \n            // Central crystal\n            translate([0, 3, 50])\n                scale([0.7, 0.7, 1.2])\n                rotate([0, 0, 45])\n                cube([3, 3, 6], center=true);\n        }\n    }\n    \n    // Eyes - glowing emeralds\n    color([0.2, 1, 0.2]) {\n        translate([-3, 6, 40])\n            sphere(1.2);\n        translate([3, 6, 40])\n            sphere(1.2);\n    }\n}\n\n// Moss-like wings with organic patterns\nmodule wings() {\n    color([0.3, 0.5, 0.2]) {\n        // Left wing\n        translate([-12, 0, 35])\n            rotate([0, 0, -30])\n            scale([0.8, 2, 0.3])\n            sphere(10);\n        \n        // Right wing\n        translate([12, 0, 35])\n            rotate([0, 0, 30])\n            scale([0.8, 2, 0.3])\n            sphere(10);\n        \n        // Wing membrane details\n        for(i = [1:3]) {\n            color([0.2, 0.4, 0.1]) {\n                translate([-12 - i*2, -5 + i*3, 35])\n                    scale([0.5, 0.1, 0.2])\n                    sphere(6);\n                translate([12 + i*2, -5 + i*3, 35])\n                    scale([0.5, 0.1, 0.2])\n                    sphere(6);\n            }\n        }\n    }\n}\n\n// Legs with mossy texture\nmodule legs() {\n    color([0.35, 0.5, 0.25]) {\n        // Left leg\n        translate([-5, 0, 15])\n            rotate([0, 10, 0])\n            cylinder(h=15, r=2.5);\n        translate([-5, 0, 0])\n            scale([1, 1.2, 0.5])\n            sphere(3);\n        \n        // Right leg\n        translate([5, 0, 15])\n            rotate([0, -10, 0])\n            cylinder(h=15, r=2.5);\n        translate([5, 0, 0])\n            scale([1, 1.2, 0.5])\n            sphere(3);\n    }\n}\n\n// Tail with vine-like segments\nmodule tail() {\n    color([0.3, 0.45, 0.2]) {\n        union() {\n            // Base segment\n            translate([0, -12, 15])\n                rotate([90, 0, 0])\n                cylinder(h=8, r=3);\n            \n            // Segments decreasing in size\n            for(i = [1:5]) {\n                translate([0, -12 - i*4, 15 - i*1.5])\n                    rotate([90 - i*5, 0, 0])\n                    scale([1 - i*0.1, 1 - i*0.1, 1])\n                    cylinder(h=6, r=3 - i*0.3);\n            }\n        }\n    }\n}\n\n// Magical aura particles\nmodule aura() {\n    color([0.6, 0.8, 0.4, 0.6]) {\n        // Floating spores around the creature\n        for(i = [1:8]) {\n            rotate([0, 0, i*45])\n            translate([15, 0, 30 + sin(i*30)*5])\n                sphere(1);\n        }\n    }\n}\n\n// Assemble the Mosswhisper\nunion() {\n    body();\n    head();\n    wings();\n    legs();\n    tail();\n    aura();\n}",
    "renders": true
  },
  {
    "mythical_creature": "nimblesprite",
    "openscad_code": "// Nimblesprite - A swift woodland spirit with butterfly wings and antlers\n// Overall height: 80mm, wingspan: 90mm\n\n// Base color definitions\nsprite_green = [0.2, 0.8, 0.3];\nsprite_gold = [1, 0.8, 0.2];\nsprite_brown = [0.5, 0.3, 0.1];\nsprite_purple = [0.6, 0.2, 0.9];\n\n// Main body\nmodule sprite_body() {\n    color(sprite_green)\n    union() {\n        // Torso\n        translate([0, 0, 20])\n            scale([1.2, 0.8, 1.5])\n            sphere(d = 20, $fn = 32);\n        \n        // Chest plate\n        translate([0, 8, 25])\n            scale([1, 0.6, 0.8])\n            sphere(d = 15, $fn = 24);\n    }\n}\n\n// Head with elfin features\nmodule sprite_head() {\n    color(sprite_green)\n    union() {\n        // Main head\n        translate([0, 0, 45])\n            scale([0.8, 0.7, 1])\n            sphere(d = 18, $fn = 32);\n        \n        // Snout\n        translate([0, 12, 43])\n            scale([0.6, 0.8, 0.6])\n            sphere(d = 10, $fn = 24);\n        \n        // Eyes\n        for(x = [-5, 5]) {\n            color([0, 0, 0])\n            translate([x, 8, 48])\n                sphere(d = 3, $fn = 16);\n        }\n    }\n}\n\n// Antlers - branching tree-like structures\nmodule antler_branch(len, ang, level) {\n    if(level > 0) {\n        rotate([0, 0, ang])\n            translate([0, len/2, 0])\n                cylinder(h = len, d = len/3, $fn = 8);\n        \n        if(level > 1) {\n            translate([0, len, 0])\n                union() {\n                    antler_branch(len * 0.7, 30, level - 1);\n                    antler_branch(len * 0.7, -30, level - 1);\n                }\n        }\n    }\n}\n\nmodule sprite_antlers() {\n    color(sprite_brown)\n    union() {\n        // Left antler\n        translate([-8, 0, 55])\n            rotate([0, 90, 0])\n                antler_branch(15, 0, 3);\n        \n        // Right antler\n        translate([8, 0, 55])\n            mirror([1, 0, 0])\n                rotate([0, 90, 0])\n                    antler_branch(15, 0, 3);\n    }\n}\n\n// Butterfly-like wings with vein patterns\nmodule wing() {\n    color(sprite_purple)\n    difference() {\n        // Main wing shape\n        translate([0, 0, 35])\n            scale([1, 2, 0.1])\n            sphere(d = 40, $fn = 32);\n        \n        // Cut wing shape\n        translate([-5, -30, 35])\n            cube([10, 60, 2]);\n    }\n    \n    // Wing veins\n    color(sprite_gold)\n    for(i = [0:30:120]) {\n        rotate([0, 0, i])\n            translate([0, 10, 36])\n                scale([0.1, 0.8, 1])\n                cylinder(h = 25, d = 1, $fn = 8);\n    }\n}\n\nmodule sprite_wings() {\n    union() {\n        // Left wing\n        translate([-12, -5, 30])\n            rotate([0, 30, -20])\n                wing();\n        \n        // Right wing\n        translate([12, -5, 30])\n            mirror([1, 0, 0])\n                rotate([0, 30, 20])\n                    wing();\n    }\n}\n\n// Arms and hands\nmodule sprite_arms() {\n    color(sprite_green)\n    for(side = [-1, 1]) {\n        translate([side * 12, 5, 35])\n            rotate([0, 0, side * 20])\n                cylinder(h = 15, d = 4, $fn = 16);\n        \n        translate([side * 18, 5, 35])\n            sphere(d = 5, $fn = 16);\n    }\n}\n\n// Legs and feet\nmodule sprite_legs() {\n    color(sprite_green)\n    for(side = [-1, 1]) {\n        translate([side * 6, 0, 15])\n            cylinder(h = 20, d = 5, $fn = 16);\n        \n        translate([side * 6, 5, 5])\n            scale([1.2, 2, 0.5])\n            sphere(d = 8, $fn = 16);\n    }\n}\n\n// Magical sparkles around the sprite\nmodule sparkles() {\n    color(sprite_gold)\n    for(i = [0:45:360]) {\n        rotate([0, 0, i])\n            translate([25, 0, 40])\n                sphere(d = 2, $fn = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    sprite_body();\n    sprite_head();\n    sprite_antlers();\n    sprite_wings();\n    sprite_arms();\n    sprite_legs();\n    sparkles();\n}",
    "renders": true
  },
  {
    "mythical_creature": "oakwhirl",
    "openscad_code": "// Oakwhirl - Mythical tree spirit with swirling oak features\n// Size: 80mm tall, designed for 3D printing\n\nmodule oakwhirl_body() {\n    // Main wooden trunk body\n    color([0.4, 0.25, 0.1])\n    union() {\n        // Central trunk\n        cylinder(h=40, d1=20, d2=15, $fn=8);\n        \n        // Lower bulbous section\n        translate([0, 0, -5])\n            sphere(d=25, $fn=12);\n    }\n}\n\nmodule oakwhirl_head() {\n    color([0.45, 0.3, 0.15])\n    union() {\n        // Head shape\n        translate([0, 0, 42])\n            sphere(d=18, $fn=12);\n            \n        // Snout\n        translate([0, 8, 40])\n            scale([1, 1.5, 0.8])\n            sphere(d=8, $fn=8);\n            \n        // Eyes (glowing green)\n        color([0.2, 0.8, 0.2])\n        translate([5, 12, 44])\n            sphere(d=3, $fn=6);\n        translate([-5, 12, 44])\n            sphere(d=3, $fn=6);\n    }\n}\n\nmodule oakwhirl_horns() {\n    color([0.35, 0.2, 0.08])\n    for(i=[-1, 1]) {\n        // Curved horns\n        translate([i*8, 5, 52])\n            rotate([0, 20*i, i*30])\n            cylinder(h=15, d1=6, d2=3, $fn=6);\n    }\n}\n\nmodule oakwhirl_wings() {\n    color([0.3, 0.5, 0.2])\n    for(side=[-1, 1]) {\n        translate([side*12, 0, 35])\n            rotate([0, 0, side*20])\n            scale([1, 0.3, 1])\n            difference() {\n                // Wing shape\n                sphere(d=25, $fn=8);\n                // Cut wing shape\n                translate([0, -10, 0])\n                    cube([30, 20, 30], center=true);\n            }\n    }\n}\n\nmodule oakwhirl_roots() {\n    color([0.3, 0.2, 0.08])\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([8, 0, -10])\n            rotate([90, 0, 0])\n            cylinder(h=12, d1=4, d2=2, $fn=6);\n    }\n}\n\nmodule oakwhirl_leaves() {\n    color([0.2, 0.6, 0.1])\n    for(angle=[0:60:300]) {\n        rotate([0, 0, angle])\n        translate([0, 0, 48])\n            rotate([30, 0, 0])\n            scale([0.4, 1, 0.1])\n            sphere(d=8, $fn=8);\n    }\n}\n\nmodule oakwhirl_swirls() {\n    color([0.6, 0.4, 0.2])\n    for(i=[0:30:150]) {\n        rotate([0, 0, i])\n        translate([0, 0, 20])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h=25, d=3, $fn=8);\n                translate([0, 0, -1])\n                    cube([6, 6, 27], center=true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    oakwhirl_body();\n    oakwhirl_head();\n    oakwhirl_horns();\n    oakwhirl_wings();\n    oakwhirl_roots();\n    oakwhirl_leaves();\n    oakwhirl_swirls();\n}",
    "renders": true
  },
  {
    "mythical_creature": "pearlshade",
    "openscad_code": "// Pearlshade Dragon - A mystical creature with pearl-like scales and ethereal wings\n// Size: 80mm wingspan, 60mm length, optimized for 3D printing\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Main colors for the pearlshade\npearl = [0.95, 0.95, 0.85];\nsilver = [0.75, 0.75, 0.8];\nglow = [0.6, 0.8, 1.0];\n\n// Main assembly\nmodule pearlshade_dragon() {\n    union() {\n        // Central body\n        translate([0, 0, 5]) body();\n        \n        // Wings with membrane structure\n        translate([0, 0, 25]) wings();\n        \n        // Head with pearl horns\n        translate([0, -30, 15]) head();\n        \n        // Tail with pearl segments\n        translate([0, 35, 10]) tail();\n        \n        // Legs\n        translate([-8, 0, 0]) leg();\n        translate([8, 0, 0]) mirror([1,0,0]) leg();\n        \n        // Pearl clusters on back\n        for(i = [-15:5:15]) {\n            translate([i, 0, 20]) pearl_cluster();\n        }\n    }\n}\n\n// Dragon body - elongated egg shape\nmodule body() {\n    color(pearl) {\n        difference() {\n            scale([1, 1.5, 0.8]) sphere(10);\n            // Hollow interior for printing\n            scale([0.8, 1.3, 0.6]) sphere(9);\n        }\n        \n        // Scale texture using small spheres\n        for(i = [0:30:359]) {\n            rotate([0, 0, i]) {\n                translate([0, 12, 0]) {\n                    scale([0.3, 0.3, 0.2]) sphere(1.5);\n                }\n            }\n        }\n    }\n}\n\n// Ethereal wings with membrane support\nmodule wings() {\n    color(glow) difference() {\n        // Left wing\n        translate([-20, 0, 0]) {\n            rotate([0, 0, 30]) {\n                scale([1.5, 2, 0.1]) sphere(8);\n            }\n            // Wing membrane supports\n            for(i = [0:20:80]) {\n                rotate([0, 0, i]) {\n                    translate([-15, 0, 0]) {\n                        rotate([90, 0, 0]) cylinder(h=25, r=0.5);\n                    }\n                }\n            }\n        }\n        \n        // Right wing (mirrored)\n        mirror([1,0,0]) {\n            translate([-20, 0, 0]) {\n                rotate([0, 0, 30]) {\n                    scale([1.5, 2, 0.1]) sphere(8);\n                }\n            }\n        }\n    }\n}\n\n// Dragon head with pearl horns\nmodule head() {\n    color(pearl) {\n        union() {\n            // Snout\n            scale([0.8, 1.2, 0.8]) sphere(8);\n            \n            // Horns with pearl tips\n            translate([0, -10, 8]) {\n                cylinder(h=12, r=2);\n                translate([0, 0, 12]) scale([1.5,1.5,1.5]) sphere(2);\n            }\n            translate([-5, -8, 8]) {\n                rotate([10, 0, -20]) cylinder(h=10, r=1.5);\n                translate([0, 0, 10]) scale([1.2,1.2,1.2]) sphere(1.5);\n            }\n            translate([5, -8, 8]) {\n                rotate([10, 0, 20]) cylinder(h=10, r=1.5);\n                translate([0, 0, 10]) scale([1.2,1.2,1.2]) sphere(1.5);\n            }\n            \n            // Eyes - glowing orbs\n            color(glow) {\n                translate([-4, -6, 4]) sphere(2);\n                translate([4, -6, 4]) sphere(2);\n            }\n        }\n    }\n}\n\n// Segmented tail with pearl accents\nmodule tail() {\n    color(pearl) {\n        union() {\n            for(i = [0:4]) {\n                translate([0, i*8, -i*2]) {\n                    scale([1 - i*0.15, 1 - i*0.1, 1 - i*0.1]) sphere(6 - i);\n                }\n            }\n            \n            // Pearl segments along tail\n            for(i = [0.5:1:4.5]) {\n                translate([0, i*8, -i*2 + 3]) {\n                    color(silver) sphere(1.5);\n                }\n            }\n        }\n    }\n}\n\n// Dragon legs with claws\nmodule leg() {\n    color(silver) {\n        union() {\n            // Upper leg\n            translate([-2, 0, 0]) rotate([0, 30, 0]) cylinder(h=8, r=2);\n            \n            // Lower leg\n            translate([-2, 0, -8]) rotate([0, -30, 0]) cylinder(h=8, r=1.5);\n            \n            // Foot\n            translate([-2, 0, -16]) {\n                scale([2, 1, 0.5]) sphere(2);\n                \n                // Claws\n                for(j = [-1.5, 0, 1.5]) {\n                    translate([j, 2, -1]) {\n                        rotate([-30, 0, 0]) cylinder(h=3, r=0.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Pearl clusters for magical effect\nmodule pearl_cluster() {\n    color([0.9, 0.9, 0.95]) {\n        for(i = [0:20:340]) {\n            rotate([0, 0, i]) {\n                translate([2, 0, 0]) sphere(1 + sin(i)*0.3);\n            }\n        }\n    }\n}\n\n// Generate the complete model\npearlshade_dragon();",
    "renders": true
  },
  {
    "mythical_creature": "quicksylv",
    "openscad_code": "// Quicksylv - Swift forest dragon with antlers and glowing runes\n// Designed for 3D printing - 80mm wingspan, 60mm length\n\n$fa = 2;\n$fs = 0.5;\n\n// Main colors\ncolor(\"darkolivegreen\") \nunion() {\n    \n    // Body - elongated oval\n    translate([0, 0, 10])\n    scale([1.5, 1, 0.8])\n    sphere(10);\n    \n    // Neck\n    translate([12, 0, 18])\n    rotate([0, -15, 0])\n    cylinder(h = 12, r1 = 6, r2 = 4, center = true);\n    \n    // Head\n    translate([22, 0, 22])\n    scale([1.2, 0.8, 0.7])\n    sphere(6);\n    \n    // Snout\n    translate([29, 0, 22])\n    scale([0.8, 0.6, 0.5])\n    sphere(4);\n    \n    // Tail segments - decreasing size\n    for (i = [1:5]) {\n        translate([-i*6 - 6, 0, 10 - i])\n        scale([1 - i*0.15, 1 - i*0.1, 1 - i*0.1])\n        sphere(8 - i);\n    }\n    \n    // Legs - four legs with paws\n    module leg(angle, offset) {\n        rotate([0, 0, angle])\n        translate([offset, 0, 8])\n        rotate([0, 10, 0])\n        union() {\n            cylinder(h = 8, r = 2.5);\n            translate([0, 0, -4])\n            sphere(3);\n        }\n    }\n    \n    leg(45, 8);\n    leg(-45, 8);\n    leg(135, 8);\n    leg(-135, 8);\n    \n    // Wings - membrane with bone structure\n    module wing(side) {\n        mirror([side, 0, 0])\n        translate([5, 0, 18])\n        rotate([0, 15, -20])\n        color(\"forestgreen\")\n        union() {\n            // Wing membrane\n            difference() {\n                scale([2, 1.2, 0.2])\n                sphere(10);\n                \n                // Cutouts for webbing effect\n                for (j = [1:3]) {\n                    translate([j*5 - 5, 0, 0])\n                    scale([0.8, 0.6, 1])\n                    sphere(3);\n                }\n            }\n            \n            // Wing bones\n            for (k = [0:2]) {\n                translate([k*6, 0, 1])\n                rotate([0, 0, k*10])\n                cylinder(h = 12 - k*2, r = 0.5);\n            }\n        }\n    }\n    \n    wing(1);\n    wing(-1);\n    \n    // Antlers - branching structure\n    module antler(angle) {\n        rotate([0, 0, angle])\n        translate([25, 0, 28])\n        rotate([0, -30, 0])\n        union() {\n            cylinder(h = 10, r = 0.8);\n            translate([0, 0, 5])\n            rotate([30, 0, 0])\n            cylinder(h = 6, r = 0.6);\n            translate([0, 0, 8])\n            rotate([60, 0, 0])\n            cylinder(h = 4, r = 0.4);\n        }\n    }\n    \n    antler(20);\n    antler(-20);\n    \n    // Eye ridges\n    translate([26, 3, 24])\n    rotate([0, -30, 0])\n    scale([0.5, 0.3, 0.3])\n    sphere(2);\n    \n    translate([26, -3, 24])\n    rotate([0, 30, 0])\n    scale([0.5, 0.3, 0.3])\n    sphere(2);\n    \n    // Eyes - glowing amber\n    color(\"darkorange\")\n    translate([27, 2.5, 22])\n    sphere(1);\n    translate([27, -2.5, 22])\n    sphere(1);\n    \n    // Scales along spine\n    color(\"darkgreen\")\n    for (s = [1:10]) {\n        translate([-s*3 + 15, 0, 18 - s*0.5])\n        rotate([0, 90, 0])\n        scale([0.5, 0.3, 0.2])\n        cylinder(h = 2, r1 = 2, r2 = 0.5);\n    }\n    \n    // Magical runes on wings\n    color(\"gold\")\n    for (r = [1:4]) {\n        translate([5 + r*3, 0, 19])\n        scale([0.3, 0.3, 0.3])\n        sphere(0.5);\n    }\n    \n    // Claws\n    color(\"dimgray\")\n    module claw(pos) {\n        translate(pos)\n        rotate([0, 45, 0])\n        cylinder(h = 2, r1 = 1, r2 = 0.2);\n    }\n    \n    claw([8, 2, 0]);\n    claw([8, -2, 0]);\n    claw([-8, 2, 0]);\n    claw([-8, -2, 0]);\n}",
    "renders": true
  },
  {
    "mythical_creature": "rivershade",
    "openscad_code": "// Rivershade - a mythical river spirit that appears as a translucent water-dragon\n// with flowing fins and bioluminescent patterns. Medium complexity, realistic style.\n\nmodule head() {\n    color(\"DeepSkyBlue\", 0.6)\n    union() {\n        // Main head sphere\n        sphere(8);\n        \n        // Snout extension\n        translate([0, -6, 0])\n            scale([0.8, 1.2, 0.8])\n            sphere(6);\n        \n        // Eye ridges\n        for(side = [-1, 1])\n            translate([side * 3, -2, 3])\n                rotate([0, side * 15, 0])\n                scale([0.5, 1.5, 0.5])\n                sphere(2);\n        \n        // Eyes (glowing)\n        color(\"Cyan\", 1.0)\n        for(side = [-1, 1])\n            translate([side * 3.5, -3, 3])\n                sphere(1.2);\n        \n        // Gills\n        color(\"RoyalBlue\", 0.8)\n        for(side = [-1, 1])\n            for(i = [0:2])\n                translate([side * 6, -1 - i * 1.5, -2])\n                    rotate([0, side * 30, 0])\n                    cylinder(h=0.5, r1=1.5, r2=0.5);\n    }\n}\n\nmodule neck() {\n    color(\"DeepSkyBlue\", 0.5)\n    difference() {\n        cylinder(h=15, r1=6, r2=4, $fn=8);\n        \n        // Neck segments\n        for(i = [1:3])\n            translate([0, 0, i * 4])\n                rotate([0, 0, i * 30])\n                cube([9, 9, 1], center=true);\n    }\n}\n\nmodule body() {\n    color(\"DeepSkyBlue\", 0.4)\n    union() {\n        // Main body\n        scale([1, 2, 0.6])\n        sphere(12);\n        \n        // Rib rings\n        color(\"RoyalBlue\", 0.6)\n        for(i = [0:3])\n            translate([0, -8 + i * 6, 0])\n                scale([1.2, 0.3, 0.8])\n                rotate([90, 0, 0])\n                cylinder(h=15, r1=10, r2=8, $fn=16);\n    }\n}\n\nmodule fins() {\n    color(\"LightCyan\", 0.7)\n    union() {\n        // Dorsal fin\n        for(i = [0:5])\n            translate([0, -10 + i * 3, 6 + sin(i * 30) * 2])\n                rotate([sin(i * 30) * 10, 0, 0])\n                scale([0.3, 0.5, 1])\n                cylinder(h=6, r1=0.5, r2=3);\n        \n        // Pectoral fins\n        for(side = [-1, 1])\n            translate([side * 12, 0, -2])\n                rotate([0, 0, side * 45])\n                scale([side * 1, 1, 1])\n                linear_extrude(height=0.5)\n                polygon(points=[[0,0], [8,0], [6,-4], [2,-6]]);\n    }\n}\n\nmodule tail() {\n    color(\"DeepSkyBlue\", 0.3)\n    union() {\n        // Tail segments\n        for(i = [0:4]) {\n            translate([0, 20 + i * 8, 0])\n                scale([1 - i * 0.15, 1, 1 - i * 0.15])\n                sphere(8 - i * 1.5);\n            \n            // Tail fins\n            color(\"LightCyan\", 0.6)\n            translate([0, 22 + i * 8, 0])\n                rotate([0, 0, i * 15])\n                scale([0.5, 2, 0.1])\n                cylinder(h=8, r1=2, r2=0.5);\n        }\n        \n        // Tail fluke\n        translate([0, 55, 0])\n            rotate([90, 0, 0])\n            scale([1, 0.3, 1])\n            sphere(10);\n    }\n}\n\nmodule bioluminescent_patterns() {\n    color(\"Cyan\", 0.9)\n    union() {\n        // Head patterns\n        for(i = [0:3])\n            translate([0, -2 - i * 2, 5 - i])\n                sphere(0.5);\n        \n        // Body dots\n        for(i = [0:5])\n            for(j = [0:3])\n                translate([sin(i * 60) * 8, -5 + i * 5, cos(j * 45) * 4])\n                    sphere(0.3);\n    }\n}\n\n// Main assembly\nrotate([0, -10, 0]) {\n    union() {\n        head();\n        translate([0, 8, 0]) neck();\n        translate([0, 15, 0]) body();\n        translate([0, 15, 0]) fins();\n        translate([0, 15, 0]) tail();\n        bioluminescent_patterns();\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "siltgleam",
    "openscad_code": "// Siltgleam - A mythical dragon-fish hybrid that glides through silt and glows with aquatic magic\n// Realistic style, medium complexity\n\n$fn = 48;\n\n// Main body module\nmodule siltgleam_body() {\n    color(\"DarkSlateGray\") {\n        // Main fish-like body\n        translate([0, 0, 10]) \n            scale([1.5, 0.8, 1]) \n                sphere(12);\n        \n        // Tail section\n        translate([0, 0, -8]) \n            scale([0.8, 0.4, 2]) \n                cylinder(h=20, r1=10, r2=2);\n    }\n}\n\n// Dragon head with whiskers\nmodule head() {\n    color(\"DarkSlateGray\") {\n        // Main head shape\n        translate([0, 0, 25]) \n            rotate([0, -20, 0]) \n                scale([1.2, 0.9, 0.7]) \n                    sphere(8);\n        \n        // Snout\n        translate([0, 0, 35]) \n            rotate([0, -20, 0]) \n                scale([1.5, 0.6, 0.5]) \n                    cylinder(h=8, r1=4, r2=2);\n    }\n    \n    // Whiskers\n    color(\"LightSteelBlue\") \n        for(i = [0:1]) {\n            translate([0, i ? 5 : -5, 30]) \n                rotate([0, 0, i ? 30 : -30]) \n                    cylinder(h=15, r=0.5);\n            translate([0, i ? 5 : -5, 30]) \n                rotate([0, 0, i ? 45 : -45]) \n                    cylinder(h=12, r=0.4);\n        }\n}\n\n// Luminescent fins\nmodule fins() {\n    color(\"LightBlue\") {\n        // Top dorsal fin\n        for(i = [0:3]) {\n            translate([0, 0, 20 - i*5]) \n                rotate([0, 0, 0]) \n                    scale([0.3, 1, 0.1]) \n                        cylinder(h=8, r1=1, r2=4);\n        }\n        \n        // Side fins\n        for(side = [0,1]) {\n            translate([0, side ? 8 : -8, 15]) \n                rotate([0, side ? 30 : -30, 0]) \n                    scale([0.5, 1, 0.1]) \n                        cylinder(h=10, r1=2, r2=6);\n        }\n    }\n}\n\n// Dragon wings adapted for underwater gliding\nmodule wings() {\n    color(\"SteelBlue\") {\n        for(side = [0,1]) {\n            translate([0, side ? 12 : -12, 18]) {\n                rotate([0, side ? -30 : 30, 0]) {\n                    // Wing membrane\n                    difference() {\n                        scale([2, 1, 0.2]) \n                            sphere(8);\n                        translate([8, 0, 0]) \n                            scale([0.8, 0.8, 2]) \n                                sphere(7);\n                    }\n                    \n                    // Wing support bones\n                    for(i = [0:2]) {\n                        rotate([0, 0, i*30 - 30]) \n                            cylinder(h=12, r=0.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Luminescent scales pattern\nmodule scales() {\n    color(\"PowderBlue\") {\n        for(i = [0:5]) {\n            for(j = [0:8]) {\n                translate([j*2 - 8, cos(j*45)*2, 10 + i*3]) \n                    scale([0.5, 0.5, 0.2]) \n                        sphere(1.5);\n            }\n        }\n    }\n}\n\n// Magical glow spots\nmodule glow_spots() {\n    color(\"Cyan\") {\n        translate([0, 0, 15]) sphere(2);\n        translate([5, 3, 12]) sphere(1.5);\n        translate([-5, -3, 12]) sphere(1.5);\n        translate([0, 6, 8]) sphere(1.2);\n        translate([0, -6, 8]) sphere(1.2);\n    }\n}\n\n// Eyes\nmodule eyes() {\n    color(\"DeepSkyBlue\") {\n        for(side = [0,1]) {\n            translate([3, side ? 4 : -4, 28]) \n                rotate([0, -20, 0]) \n                    sphere(1.5);\n            translate([3.5, side ? 4.5 : -4.5, 28.5]) \n                color(\"White\") \n                    sphere(0.8);\n        }\n    }\n}\n\n// Assemble the complete siltgleam\nunion() {\n    siltgleam_body();\n    head();\n    fins();\n    wings();\n    scales();\n    glow_spots();\n    eyes();\n}",
    "renders": true
  },
  {
    "mythical_creature": "thornwhisper",
    "openscad_code": "// Thornwhisper - A mythical forest guardian with thorny wings and whispering vines\n// Overall size: 80mm tall, 60mm wide, 50mm deep\n\n// Main body color - deep forest green\ncolor([0.1, 0.4, 0.1]) {\n    // Central body - bulbous seed-like core\n    translate([0, 0, 20]) {\n        scale([1.2, 1, 1.5]) sphere(d=25);\n    }\n    \n    // Thorax connection\n    translate([0, 0, 32]) {\n        cylinder(h=15, d1=20, d2=15);\n    }\n}\n\n// Head with thorn crown\ncolor([0.15, 0.35, 0.1]) {\n    // Main head\n    translate([0, 0, 45]) {\n        scale([0.8, 0.9, 1.2]) sphere(d=20);\n    }\n    \n    // Snout\n    translate([0, 12, 45]) {\n        rotate([90, 0, 0]) cylinder(h=8, d1=12, d2=8);\n    }\n}\n\n// Thorn crown - array of curved thorns\nmodule thorn_crown() {\n    for(i = [0:30:330]) {\n        rotate([0, 0, i]) {\n            translate([0, 10, 55]) {\n                rotate([30, 0, 0]) {\n                    scale([0.3, 0.3, 1]) sphere(d=8);\n                }\n            }\n        }\n    }\n}\n\ncolor([0.2, 0.5, 0.1]) thorn_crown();\n\n// Thorny wings - segmented with thorns\nmodule wing_segment(angle, length, width) {\n    translate([0, 0, 35]) {\n        rotate([0, 0, angle]) {\n            translate([15, 0, 0]) {\n                scale([length/20, width/20, 0.5]) sphere(d=20);\n                \n                // Add thorns along wing edge\n                for(i = [0:3:15]) {\n                    translate([i+5, 0, 3]) {\n                        rotate([90, 0, 0]) {\n                            scale([0.4, 0.4, 1.5]) cylinder(h=3, d1=1, d2=0.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Left wing\ncolor([0.05, 0.3, 0.05]) {\n    wing_segment(-30, 25, 15);\n    wing_segment(-50, 20, 12);\n    wing_segment(-70, 15, 8);\n}\n\n// Right wing\ncolor([0.05, 0.3, 0.05]) {\n    wing_segment(30, 25, 15);\n    wing_segment(50, 20, 12);\n    wing_segment(70, 15, 8);\n}\n\n// Whispering vines - tentacle-like appendages\nmodule vine(twist, height) {\n    color([0.2, 0.6, 0.15]) {\n        translate([0, 0, 20]) {\n            for(i = [0:5:height]) {\n                translate([sin(twist + i*2) * 3, cos(twist + i*2) * 3, -i]) {\n                    sphere(d=4);\n                }\n            }\n        }\n    }\n}\n\n// Generate 4 vines at cardinal directions\nvine(0, 25);\nvine(90, 30);\nvine(180, 28);\nvine(270, 32);\n\n// Legs - root-like structures\nmodule leg(angle, length) {\n    color([0.2, 0.3, 0.1]) {\n        translate([0, 0, 10]) {\n            rotate([0, 0, angle]) {\n                translate([10, 0, 0]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=length, d1=6, d2=4);\n                        \n                        // Root endings\n                        translate([0, 0, length]) {\n                            sphere(d=5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Four legs\nleg(-45, 15);\nleg(-135, 18);\nleg(45, 15);\nleg(135, 18);\n\n// Glowing runes on body\nmodule glowing_rune(x, y, z) {\n    color([0.4, 0.9, 0.3]) {\n        translate([x, y, z]) {\n            cube([2, 2, 0.5], center=true);\n        }\n    }\n}\n\n// Place glowing runes in spiral pattern\nfor(i = [0:30:360]) {\n    angle = i;\n    radius = 8 + sin(i*3) * 3;\n    x = cos(angle) * radius;\n    y = sin(angle) * radius;\n    glowing_rune(x, y, 25 + i/30);\n}\n\n// Eyes - deep amber\ncolor([0.8, 0.4, 0.1]) {\n    translate([-4, 8, 48]) sphere(d=3);\n    translate([4, 8, 48]) sphere(d=3);\n}\n\n// Thorn tail - segmented\ncolor([0.1, 0.35, 0.1]) {\n    translate([0, -5, 15]) {\n        for(i = [0:5:25]) {\n            translate([0, -sin(i*2)*2, -i]) {\n                scale([1 - i/50, 1 - i/50, 1]) sphere(d=8 - i/3);\n            }\n        }\n        \n        // Tail thorns\n        for(i = [0:5:20]) {\n            rotate([0, 0, i*15]) {\n                translate([0, -i/2, -i]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=3, d1=1.5, d2=0.5);\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "umberwisp",
    "openscad_code": "// Umberwisp - Mythical Shadow Elemental\n// A shadowy creature with ethereal wings and glowing core\n\n$fn = 32;\n\n// Main module\nmodule umberwisp() {\n    // Color: Dark shadowy purple-black with glowing core\n    color([0.15, 0.05, 0.25]) {\n        union() {\n            // Central core body\n            core_body();\n            \n            // Ethereal wings\n            wings();\n            \n            // Shadow tendrils\n            tendrils();\n            \n            // Glowing eye orbs\n            eyes();\n        }\n    }\n}\n\n// Central glowing core\nmodule core_body() {\n    // Main spherical core with slight flattening\n    translate([0, 0, 10]) {\n        scale([1, 1, 0.8]) {\n            sphere(d = 25);\n        }\n    }\n    \n    // Inner glow\n    color([0.8, 0.4, 1.0, 0.6]) {\n        translate([0, 0, 10]) {\n            sphere(d = 15);\n        }\n    }\n    \n    // Hexagonal plates around core\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([12, 0, 10]) {\n                rotate([45, 0, 0]) {\n                    scale([1, 0.5, 0.2]) {\n                        cylinder(h = 8, r1 = 3, r2 = 4);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Ethereal wings with membrane structure\nmodule wings() {\n    left_wing();\n    mirror([1, 0, 0]) left_wing();\n}\n\nmodule left_wing() {\n    color([0.1, 0.03, 0.2, 0.7]) {\n        // Wing base structure\n        translate([-15, 0, 15]) {\n            rotate([0, -30, 0]) {\n                // Main wing frame\n                for (i = [0:3]) {\n                    rotate([0, 0, i * 25]) {\n                        translate([-i*8, 0, -i*3]) {\n                            scale([1, 0.3, 0.1]) {\n                                cylinder(h = 20 - i*3, r1 = 1.5, r2 = 1);\n                            }\n                        }\n                    }\n                }\n                \n                // Wing membrane\n                hull() {\n                    translate([-5, 0, 0]) {\n                        sphere(d = 3);\n                    }\n                    translate([-25, -10, -5]) {\n                        sphere(d = 2);\n                    }\n                    translate([-30, 0, -8]) {\n                        sphere(d = 2);\n                    }\n                    translate([-25, 10, -5]) {\n                        sphere(d = 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Shadow tendrils extending from base\nmodule tendrils() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([0, 0, 5]) {\n                rotate([90 + i*5, 0, 0]) {\n                    // Tendril segments\n                    for (j = [0:2]) {\n                        translate([0, 0, -j*8]) {\n                            rotate([j*10, 0, 0]) {\n                                scale([0.4, 0.4, 1]) {\n                                    cylinder(h = 8, r = 2 - j*0.5);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Glowing eyes\nmodule eyes() {\n    color([0.9, 0.7, 1.0]) {\n        // Left eye\n        translate([-8, 5, 15]) {\n            sphere(d = 4);\n        }\n        \n        // Right eye\n        translate([-8, -5, 15]) {\n            sphere(d = 4);\n        }\n    }\n    \n    // Eye sockets\n    color([0, 0, 0.1]) {\n        translate([-10, 5, 15]) {\n            sphere(d = 5);\n        }\n        translate([-10, -5, 15]) {\n            sphere(d = 5);\n        }\n    }\n}\n\n// Create the umberwisp\numberwisp();",
    "renders": true
  },
  {
    "mythical_creature": "verdantling",
    "openscad_code": "// Verdantling - A mythical forest spirit creature\n// Body size: ~80mm tall, designed for 3D printing\n\n$fn = 32;\n\nmodule verdantling() {\n    // Main body - organic torso shape\n    color([0.2, 0.6, 0.3]) {\n        union() {\n            // Central torso\n            translate([0, 0, 15]) \n                scale([1.2, 1, 1.5]) \n                    sphere(12);\n            \n            // Lower abdomen\n            translate([0, 0, 5]) \n                scale([1, 0.8, 1.2]) \n                    sphere(10);\n        }\n    }\n    \n    // Head with leafy features\n    color([0.15, 0.5, 0.25]) {\n        translate([0, -8, 30]) {\n            // Main head sphere\n            sphere(8);\n            \n            // Snout\n            translate([0, -6, -2]) \n                scale([0.8, 1.2, 0.8]) \n                    sphere(5);\n            \n            // Leaf-like ears\n            for(side = [-1, 1]) {\n                translate([side * 6, -3, 2]) \n                    rotate([0, side * 20, 0]) \n                        scale([0.3, 1, 0.8]) \n                            sphere(6);\n            }\n        }\n    }\n    \n    // Eyes - glowing amber\n    color([1, 0.6, 0.2]) {\n        for(side = [-1, 1]) {\n            translate([side * 3, -12, 30]) \n                sphere(1.5);\n        }\n    }\n    \n    // Branch-like arms\n    color([0.3, 0.4, 0.2]) {\n        for(side = [-1, 1]) {\n            translate([side * 12, 0, 22]) {\n                rotate([0, 0, side * 30]) {\n                    // Upper arm\n                    cylinder(h = 15, r1 = 4, r2 = 3);\n                    \n                    // Lower arm\n                    translate([0, 12, 0]) {\n                        rotate([0, 0, side * -20]) {\n                            cylinder(h = 12, r1 = 3, r2 = 2);\n                            \n                            // Hand with leafy fingers\n                            translate([0, 10, 0]) {\n                                sphere(2.5);\n                                for(i = [0:2]) {\n                                    rotate([0, 0, (i - 1) * 30]) \n                                        translate([0, 3, 0]) \n                                            scale([0.5, 1.5, 0.2]) \n                                                sphere(2.5);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Root-like legs\n    color([0.25, 0.35, 0.15]) {\n        for(side = [-1, 1]) {\n            translate([side * 6, 0, 8]) {\n                rotate([25, 0, 0]) {\n                    cylinder(h = 18, r1 = 4, r2 = 5);\n                    \n                    // Feet with root details\n                    translate([0, 0, -10]) {\n                        difference() {\n                            sphere(5);\n                            translate([0, 0, -3]) \n                                cube([8, 8, 6], center = true);\n                        }\n                        \n                        // Root tendrils\n                        for(i = [0:3]) {\n                            rotate([0, 0, i * 90]) \n                                translate([3, 0, -5]) \n                                    cylinder(h = 4, r1 = 1.5, r2 = 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Wing-like leaf structures\n    color([0.1, 0.5, 0.2]) {\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, 25]) {\n                rotate([0, -20, side * -20]) {\n                    scale([0.2, 1, 0.8]) \n                        sphere(15);\n                    \n                    // Vein details\n                    for(i = [-1, 0, 1]) {\n                        rotate([0, i * 15, 0]) \n                            cylinder(h = 12, r = 0.5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Tail with leaf fronds\n    color([0.15, 0.45, 0.25]) {\n        translate([0, 8, 10]) {\n            rotate([30, 0, 0]) {\n                cylinder(h = 20, r1 = 4, r2 = 2);\n                \n                // Leaf clusters\n                for(i = [0:3]) {\n                    rotate([0, 0, i * 90]) \n                        translate([0, 8, -i * 3]) {\n                            rotate([15, 0, 0]) \n                                scale([0.3, 1, 0.5]) \n                                    sphere(6);\n                        }\n                }\n            }\n        }\n    }\n    \n    // Magical glow orbs\n    color([0.4, 0.9, 0.3]) {\n        translate([0, 0, 40]) \n            sphere(2);\n        translate([0, -5, 35]) \n            sphere(1.5);\n    }\n}\n\n// Create and position the verdantling\nverdantling();",
    "renders": true
  },
  {
    "mythical_creature": "whippoorwill",
    "openscad_code": "// Mythical Whippoorwill - Realistic Style (Medium Complexity)\n// Features glowing runes, ethereal wings, and night-hunting adaptations\n\n$fa = 2;\n$fs = 0.5;\n\n// Main colors\ncolor_body = [0.15, 0.12, 0.25];      // Deep twilight purple\ncolor_wings = [0.25, 0.20, 0.4];     // Translucent wing membrane\ncolor_runes = [0.5, 0.8, 1];        // Soft blue glow\ncolor_eyes = [1, 1, 0];             // Golden hunter's eyes\ncolor_beak = [0.3, 0.2, 0.1];       // Dark horn color\ncolor_moon = [0.9, 0.9, 0.7];       // Moonstone accent\n\n// Scale factor for 3D printing (target ~75mm width)\nscale_factor = 1;\n\nmodule whippoorwill() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        // Main body assembly\n        union() {\n            // Body\n            translate([0, 0, 5])\n                body();\n            \n            // Head\n            translate([8, 0, 12])\n                rotate([0, -20, 0])\n                head();\n            \n            // Wings\n            translate([-2, 0, 10])\n                wings();\n            \n            // Tail feathers with magical runes\n            translate([-12, 0, 5])\n                tail();\n            \n            // Ethereal moon crown\n            translate([10, 0, 18])\n                moon_crown();\n        }\n    }\n}\n\nmodule body() {\n    color(color_body) {\n        // Main torso - elongated oval\n        scale([1.5, 1, 1])\n            sphere(r=6);\n        \n        // Feather texture layers\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([0, 4.5, -1])\n                    scale([2, 0.5, 0.3])\n                        cube([6, 3, 1], center=true);\n        }\n        \n        // Magical rune circle on chest\n        rotate([90, 0, 0])\n            translate([0, 0, 5.5])\n                rune_circle();\n    }\n}\n\nmodule head() {\n    color(color_body) {\n        // Main head shape\n        scale([1.2, 1, 1.1])\n            sphere(r=4);\n        \n        // Beak\n        color(color_beak) {\n            translate([4, 0, 0])\n                rotate([0, -30, 0])\n                    scale([1, 0.5, 0.3])\n                        cylinder(h=6, r1=2, r2=0.5);\n        }\n        \n        // Eyes\n        color(color_eyes) {\n            translate([2.5, 2, 1])\n                sphere(r=0.8);\n            translate([2.5, -2, 1])\n                sphere(r=0.8);\n        }\n        \n        // Ear tufts\n        translate([0, 3.5, 2])\n            rotate([0, 30, 45])\n                scale([0.3, 0.3, 1])\n                    cylinder(h=3, r=1);\n        translate([0, -3.5, 2])\n            rotate([0, 30, -45])\n                scale([0.3, 0.3, 1])\n                    cylinder(h=3, r=1);\n    }\n}\n\nmodule wings() {\n    color(color_wings, 0.6) {\n        // Left wing\n        translate([0, 6, 0]) {\n            rotate([0, 0, 10])\n                wing_half();\n            // Wing runes\n            translate([-2, 2, 0.5])\n                rotate([90, 0, 0])\n                    rune_circle();\n        }\n        \n        // Right wing\n        mirror([0, 1, 0])\n            translate([0, 6, 0]) {\n                rotate([0, 0, 10])\n                    wing_half();\n                translate([-2, 2, 0.5])\n                    rotate([90, 0, 0])\n                        rune_circle();\n            }\n    }\n}\n\nmodule wing_half() {\n    // Main wing structure\n    translate([0, -2, 0])\n        scale([3, 2, 0.2])\n            sphere(r=4);\n    \n    // Primary feathers\n    for(i = [0:4]) {\n        rotate([0, 0, -i*15-5])\n            translate([8-i*1.5, -2-i*0.5, 0])\n                scale([1.5, 0.3, 0.1])\n                    cylinder(h=4, r=1);\n    }\n}\n\nmodule tail() {\n    color(color_body) {\n        // Central tail\n        rotate([0, 20, 0])\n            scale([1, 0.3, 0.2])\n                cylinder(h=12, r1=3, r2=1);\n        \n        // Feather pairs\n        for(i = [0:2]) {\n            rotate([0, 0, i*120])\n                translate([-10, 0, 0])\n                    scale([0.8, 0.2, 0.1])\n                        cylinder(h=8, r1=2, r2=0.5);\n            \n            rotate([0, 0, i*120+60])\n                translate([-10, 0, 0])\n                    scale([0.6, 0.15, 0.08])\n                        cylinder(h=6, r1=1.5, r2=0.3);\n        }\n        \n        // Rune trail\n        for(i = [0:5]) {\n            translate([-8-i*1.5, 0, 0.5])\n                rotate([90, 0, 0])\n                    scale([0.3, 0.3, 1])\n                        rune();\n        }\n    }\n}\n\nmodule moon_crown() {\n    color(color_moon) {\n        // Crescent moon\n        difference() {\n            sphere(r=2);\n            translate([0, 0, -1])\n                sphere(r=1.8);\n        }\n        \n        // Moon phases\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([2.5, 0, 0])\n                    sphere(r=0.3);\n        }\n    }\n}\n\nmodule rune_circle() {\n    color(color_runes, 0.8) {\n        // Outer circle\n        rotate_extrude(angle=360)\n            translate([3, 0, 0])\n                circle(r=0.2);\n        \n        // Inner runes\n        for(i = [0:7]) {\n            rotate([0, 0, i*45])\n                translate([2, 0, 0])\n                    rune();\n        }\n    }\n}\n\nmodule rune() {\n    // Simple mystical rune symbol\n    union() {\n        cube([0.1, 1, 0.1], center=true);\n        cube([1, 0.1, 0.1], center=true);\n        translate([0.3, 0.3, 0])\n            sphere(r=0.2);\n    }\n}\n\n// Render the complete creature\nwhippoorwill();",
    "renders": true
  },
  {
    "mythical_creature": "xerowhirl",
    "openscad_code": "// Xerowhirl - Mythical wind spirit with crystalline wings and ethereal form\n// Wings fold forward for printability, 0.8mm walls throughout\n\n$fn = 32;\n\n// Main body module\nmodule xerowhirl() {\n    // Body core - crystalline center\n    translate([0, 0, 8]) {\n        color([0.7, 0.8, 1.0, 0.8]) {\n            difference() {\n                sphere(d = 15);\n                translate([0, 0, -8]) cube([20, 20, 16], center = true);\n            }\n        }\n    }\n    \n    // Upper torso\n    translate([0, 0, 12]) {\n        color([0.6, 0.7, 0.9, 0.9]) {\n            cylinder(h = 12, d1 = 12, d2 = 8);\n        }\n    }\n    \n    // Head with horn-like structures\n    translate([0, 0, 22]) {\n        color([0.8, 0.9, 1.0, 0.7]) {\n            sphere(d = 10);\n            \n            // Curved horns\n            for (i = [0:1]) {\n                rotate([0, 0, i * 180]) {\n                    translate([4, 0, 2]) {\n                        rotate([30, 0, 0]) {\n                            cylinder(h = 8, d1 = 2, d2 = 1);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Crystalline wings - forward-folded for printing\n    wing();\n    \n    // Lower whirling tail\n    tail();\n    \n    // Floating crystal shards\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([12, 0, 15]) {\n                color([0.5, 0.7, 1.0, 0.6]) {\n                    rotate([30, 0, 0]) {\n                        cube([2, 4, 1], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wing module - two crystalline wings\nmodule wing() {\n    color([0.4, 0.6, 0.9, 0.5]) {\n        // Left wing\n        translate([-5, 0, 16]) {\n            rotate([0, -20, -30]) {\n                difference() {\n                    cube([20, 2, 35]);\n                    // Cutout patterns\n                    for (j = [0:3]) {\n                        translate([2 + j * 4, 0, 5 + j * 8]) {\n                            sphere(d = 3);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Right wing\n        translate([5, 0, 16]) {\n            mirror([1, 0, 0]) {\n                rotate([0, -20, -30]) {\n                    difference() {\n                        cube([20, 2, 35]);\n                        for (j = [0:3]) {\n                            translate([2 + j * 4, 0, 5 + j * 8]) {\n                                sphere(d = 3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Whirling tail module\nmodule tail() {\n    color([0.3, 0.5, 0.8, 0.7]) {\n        // Spiral segments\n        for (i = [0:8]) {\n            rotate([0, 0, i * 45]) {\n                translate([0, 0, 6 - i * 1.5]) {\n                    scale([1 - i * 0.08, 1 - i * 0.08, 1]) {\n                        sphere(d = 10 - i);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Base platform for stability\ntranslate([0, 0, 0]) {\n    color([0.2, 0.3, 0.5, 0.3]) {\n        cylinder(h = 2, d = 30);\n    }\n}\n\n// Generate the creature\nxerowhirl();",
    "renders": true
  },
  {
    "mythical_creature": "yearnling",
    "openscad_code": "// Yearnling - A tiny dragon that embodies longing and desire\n// Small enough to perch on your shoulder, it has crystalline wings and a heart that glows with eternal yearning\n\n// Main module\nmodule yearnling() {\n    // Set overall scale - approximately 75mm tall\n    scale([1,1,1]) {\n        union() {\n            // Body - slightly elongated tear shape\n            color(\"DarkGreen\") \n            translate([0,0,20])\n            scale([1.2,1,1.5])\n            sphere(d=25, $fn=32);\n            \n            // Head with snout\n            color(\"ForestGreen\")\n            translate([0,-12,42])\n            rotate([0,15,0])\n            union() {\n                sphere(d=18, $fn=32);\n                translate([0,-8,0])\n                scale([0.7,1.2,0.8])\n                sphere(d=12, $fn=16);\n            }\n            \n            // Horns - spiral yearning horns\n            color(\"Goldenrod\")\n            for(side = [-1, 1]) {\n                translate([side*8, -15, 50])\n                rotate([0,0,side*30])\n                cylinder(h=15, d1=3, d2=1, $fn=8);\n                translate([side*8, -15, 63])\n                rotate([0,0,side*45])\n                cylinder(h=8, d1=1, d2=2, $fn=8);\n            }\n            \n            // Wings - crystalline, translucent\n            color(\"LightBlue\", 0.6)\n            for(side = [-1, 1]) {\n                translate([side*15, 0, 35])\n                rotate([0,side*30,0])\n                difference() {\n                    scale([1,2,0.5])\n                    sphere(d=20, $fn=3);\n                    translate([side*5, -5, 0])\n                    scale([0.8,1.5,0.3])\n                    sphere(d=15, $fn=3);\n                }\n                // Wing veins\n                color(\"SkyBlue\", 0.8)\n                for(i = [1:3]) {\n                    translate([side*12, -5+i*6, 33])\n                    rotate([0,side*30,i*5])\n                    cylinder(h=15, d=0.5, $fn=4);\n                }\n            }\n            \n            // Legs - small but sturdy\n            color(\"DarkGreen\")\n            for(side = [-1, 1]) {\n                // Front legs\n                translate([side*10, 8, 15])\n                rotate([0,side*10,0])\n                cylinder(h=12, d=4, $fn=8);\n                translate([side*10, 8, 3])\n                sphere(d=5, $fn=8);\n                \n                // Back legs\n                translate([side*8, -8, 10])\n                rotate([0,side*15,0])\n                cylinder(h=15, d=5, $fn=8);\n                translate([side*8, -8, -5])\n                sphere(d=6, $fn=8);\n            }\n            \n            // Tail - long and expressive, curled with yearning\n            color(\"DarkGreen\")\n            for(i = [0:5]) {\n                rotate([0,0,-i*15])\n                translate([-sin(i*15)*20, -cos(i*15)*20, 20-i*2])\n                sphere(d=max(8-i,3), $fn=12);\n            }\n            \n            // Heart crystal - glowing with desire\n            color(\"DeepPink\", 0.9)\n            translate([0, 0, 25])\n            scale([1,0.7,1.2])\n            sphere(d=6, $fn=16);\n            \n            // Eyes - large and wistful\n            color(\"Purple\")\n            for(side = [-1, 1]) {\n                translate([side*6, -18, 45])\n                scale([1,1.2,0.8])\n                sphere(d=5, $fn=16);\n                // Pupils\n                color(\"Black\")\n                translate([side*6.5, -20, 46])\n                sphere(d=2, $fn=8);\n            }\n            \n            // Scales - tiny overlapping scales of yearning\n            color(\"MediumSeaGreen\")\n            for(i = [0:10]) {\n                for(j = [0:5]) {\n                    angle = i * 36;\n                    radius = 10 + j * 2;\n                    height = 20 + j * 2.5;\n                    translate([cos(angle)*radius, sin(angle)*radius, height])\n                    sphere(d=2, $fn=6);\n                }\n            }\n            \n            // Whiskers - sensing the desires of others\n            color(\"Silver\")\n            for(side = [-1, 1]) {\n                for(angle = [-30, 0, 30]) {\n                    translate([side*12, -15, 42])\n                    rotate([0,angle,side*15])\n                    cylinder(h=8, d=0.5, $fn=4);\n                }\n            }\n        }\n    }\n}\n\n// Create the yearnling\nyearnling();",
    "renders": true
  },
  {
    "mythical_creature": "zephyrgleam",
    "openscad_code": "// Zephyrgleam - A wind-elemental dragon-horse hybrid with luminescent wings\n// Medium complexity, realistic style, 3D printable\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    color(\"lightblue\") {\n        // Torso - elongated cylinder\n        translate([0, 0, 15]) {\n            scale([1.2, 0.8, 1.5])\n                rotate([90, 0, 0])\n                    cylinder(h=20, d=15);\n        }\n        \n        // Chest bulge\n        translate([0, -8, 12]) {\n            scale([1.3, 1, 1])\n                sphere(d=12);\n        }\n    }\n}\n\n// Head with snout and horns\nmodule head() {\n    color(\"skyblue\") {\n        union() {\n            // Main head\n            translate([0, -25, 18]) {\n                scale([0.8, 1.2, 0.9])\n                    sphere(d=15);\n            }\n            \n            // Snout\n            translate([0, -32, 16]) {\n                scale([0.6, 0.8, 0.5])\n                    rotate([10, 0, 0])\n                        cylinder(h=10, d=8);\n            }\n            \n            // Horns - spiral wind horns\n            for(i = [0:1]) {\n                translate([i ? 4 : -4, -28, 22]) {\n                    rotate([0, i ? -20 : -20, 0]) {\n                        union() {\n                            for(j = [0:3]) {\n                                translate([0, 0, j*2])\n                                    scale([0.3, 0.3, 1])\n                                        rotate([0, 0, j*45])\n                                            cylinder(h=2, d=3-j*0.5);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Luminescent wings with ethereal membrane\nmodule wings() {\n    color(\"cyan\") {\n        for(side = [0,1]) {\n            mirror([side, 0, 0]) {\n                // Wing base\n                translate([-5, 0, 25]) {\n                    rotate([0, 0, -30]) {\n                        rotate([0, 20, 0]) {\n                            // Primary wing structure\n                            difference() {\n                                // Main wing shape\n                                translate([0, 0, 0]) {\n                                    scale([1, 2, 0.2])\n                                        rotate([0, 90, 0])\n                                            cylinder(h=30, d=5);\n                                }\n                                \n                                // Cutout patterns for ethereal look\n                                for(i = [1:3]) {\n                                    translate([0, i*8, 0]) {\n                                        scale([0.8, 0.3, 1])\n                                            rotate([0, 90, 0])\n                                                cylinder(h=25, d=3);\n                                    }\n                                }\n                            }\n                            \n                            // Wing veins\n                            color(\"white\") {\n                                for(i = [0:5]) {\n                                    rotate([0, 0, i*15-30]) {\n                                        translate([0, 5, 0]) {\n                                            scale([0.1, 1, 0.1])\n                                                cylinder(h=20);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wind-swirling tail\nmodule tail() {\n    color(\"lightcyan\") {\n        hull() {\n            // Tail segments in ascending spiral\n            for(i = [0:5]) {\n                translate([sin(i*30)*2, 10 + i*8, 15 - i*2]) {\n                    scale([1-i*0.1, 1-i*0.1, 1])\n                        sphere(d=8-i);\n                }\n            }\n        }\n    }\n}\n\n// Legs with wind-swept appearance\nmodule legs() {\n    color(\"steelblue\") {\n        for(side = [0,1]) {\n            mirror([side, 0, 0]) {\n                // Front legs\n                translate([6, -10, 8]) {\n                    rotate([0, 0, -10]) {\n                        cylinder(h=12, d=4);\n                        translate([0, 0, -8]) {\n                            scale([1.2, 0.8, 0.8])\n                                sphere(d=6);\n                        }\n                    }\n                }\n                \n                // Back legs\n                translate([5, 10, 8]) {\n                    rotate([0, 0, 10]) {\n                        cylinder(h=12, d=4);\n                        translate([0, 0, -8]) {\n                            scale([1.2, 0.8, 0.8])\n                                sphere(d=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Magical wind aura particles\nmodule aura() {\n    color(\"azure\") {\n        for(i = [0:7]) {\n            rotate([0, 0, i*45]) {\n                translate([15, 0, 20]) {\n                    scale([0.3, 0.3, 0.3])\n                        sphere(d=3);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the complete creature\nunion() {\n    body();\n    head();\n    wings();\n    tail();\n    legs();\n    aura();\n}",
    "renders": true
  },
  {
    "mythical_creature": "amberwhirl",
    "openscad_code": "// Amberwhirl - Mythical wind dragon with amber crystal core\n// Size: 80mm wingspan, 3D printable with no overhangs\n\n// Main color scheme - amber and gold tones\ncolor([0.9, 0.6, 0.1]) amber() children(0);\ncolor([0.8, 0.5, 0.05]) darker_amber() children(0);\ncolor([1, 0.8, 0.2]) gold() children(0);\n\n// Crystal core module with faceted amber\nmodule crystal_core() {\n    // Central amber crystal\n    amber() rotate([0, 0, 45]) cube([8, 8, 12], center=true);\n    \n    // Crystal facets\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) \n            translate([0, 4, 0])\n            darker_amber() cube([2, 8, 10], center=true);\n    }\n}\n\n// Wing membrane with reinforced edges\nmodule wing() {\n    // Main wing membrane\n    gold() linear_extrude(height=1.5) \n        polygon(points=[[0, 0], [20, 15], [35, 5], [40, 0], [35, -5], [20, -15]]);\n    \n    // Wing reinforcement struts\n    for(i = [0:2]) {\n        translate([10 + i*10, 0, 0])\n            rotate([90, 0, 0])\n            cylinder(h=0.8, r=0.5);\n    }\n}\n\n// Dragon body with scales\nmodule body() {\n    // Main torso\n    amber() scale([1, 0.8, 1.2]) sphere(d=15);\n    \n    // Scales along back\n    for(i = [0:4]) {\n        translate([0, 0, 7 - i*3])\n            rotate([0, 0, i*15])\n            darker_amber() scale([1, 0.7, 1]) cube([3, 2, 1.5]);\n    }\n}\n\n// Head with horns and snout\nmodule head() {\n    // Snout\n    amber() translate([6, 0, 2]) rotate([0, -15, 0]) cylinder(h=8, r1=3, r2=2);\n    \n    // Main head\n    amber() sphere(d=10);\n    \n    // Horns\n    for(side = [-1, 1]) {\n        translate([0, side*3, 5])\n            rotate([0, side*20, 0])\n            darker_amber() cylinder(h=6, r=1.5);\n    }\n    \n    // Eyes\n    gold() translate([4, 2, 2]) sphere(d=2);\n    gold() translate([4, -2, 2]) sphere(d=2);\n}\n\n// Tail with spiral pattern\nmodule tail() {\n    for(i = [0:8]) {\n        translate([-5 - i*4, 0, -2 + sin(i*45)*2])\n            rotate([0, 0, i*30])\n            amber() scale([1 - i*0.08, 1 - i*0.08, 1]) sphere(d=4);\n    }\n}\n\n// Legs with claws\nmodule leg() {\n    union() {\n        // Upper leg\n        amber() rotate([0, 45, 0]) cylinder(h=6, r=2);\n        \n        // Lower leg\n        translate([0, 0, -4])\n            rotate([0, -30, 0])\n            amber() cylinder(h=5, r=1.5);\n        \n        // Foot\n        translate([0, 0, -8])\n            amber() scale([1.5, 0.8, 0.5]) sphere(d=4);\n        \n        // Claws\n        for(claw = [-1, 0, 1]) {\n            translate([claw*1.2, -2, -8.5])\n                rotate([0, 0, claw*10])\n                darker_amber() cylinder(h=2, r=0.3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Body centered\n    translate([0, 0, 10]) body();\n    \n    // Head at front\n    translate([10, 0, 16]) head();\n    \n    // Crystal core in chest\n    translate([0, 0, 12]) crystal_core();\n    \n    // Wings attached to shoulders\n    for(side = [-1, 1]) {\n        translate([5, side*8, 15])\n            rotate([0, 0, side*30])\n            wing();\n    }\n    \n    // Tail extending back\n    translate([-10, 0, 10]) tail();\n    \n    // Legs underneath\n    for(side = [-1, 1]) {\n        translate([3, side*5, 5])\n            leg();\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "briarshade",
    "openscad_code": "// Briarshade - Thorn-wolf mythical creature\n// Realistic style, medium complexity\n\n$fn = 60;\n\n// Main color scheme\nbriar_green = [34/255, 139/255, 34/255];\nshadow_gray = [45/255, 45/255, 45/255];\nthorn_gold = [218/255, 165/255, 32/255];\n\nmodule briarshade_body() {\n    color(briar_green) {\n        // Main torso\n        union() {\n            // Chest and ribcage\n            difference() {\n                scale([1.2, 0.8, 1.5]) sphere(15);\n                translate([0, 0, 10]) scale([0.8, 0.6, 0.8]) sphere(15);\n            }\n            \n            // Abdomen\n            translate([0, 0, -15]) scale([0.9, 0.7, 1.2]) sphere(12);\n            \n            // Shoulder muscles\n            translate([12, 0, 8]) rotate([0, 20, 0]) scale([0.8, 0.6, 0.8]) sphere(8);\n            translate([-12, 0, 8]) rotate([0, -20, 0]) scale([0.8, 0.6, 0.8]) sphere(8);\n            \n            // Hip muscles\n            translate([8, 0, -18]) rotate([0, -30, 0]) scale([0.6, 0.5, 0.7]) sphere(10);\n            translate([-8, 0, -18]) rotate([0, 30, 0]) scale([0.6, 0.5, 0.7]) sphere(10);\n        }\n    }\n}\n\nmodule briarshade_head() {\n    color(briar_green) {\n        union() {\n            // Main skull\n            translate([0, 0, 25]) scale([0.8, 0.6, 1.1]) sphere(12);\n            \n            // Snout\n            translate([0, 17, 20]) scale([0.4, 1.2, 0.5]) sphere(10);\n            \n            // Lower jaw\n            translate([0, 22, 15]) rotate([15, 0, 0]) scale([0.35, 1, 0.3]) cube([7, 12, 6], center=true);\n            \n            // Eyes\n            color(shadow_gray) {\n                translate([6, 12, 28]) sphere(2.5);\n                translate([-6, 12, 28]) sphere(2.5);\n            }\n            \n            // Thorn crown\n            color(thorn_gold) {\n                for(i = [0:30:359]) {\n                    rotate([0, 0, i]) translate([10, 0, 35]) rotate([15, 0, 0]) cylinder(8, 1, 0.5);\n                }\n            }\n            \n            // Ear tufts\n            color(briar_green) {\n                translate([8, -2, 35]) rotate([0, 30, 30]) scale([0.3, 0.2, 0.8]) sphere(5);\n                translate([-8, -2, 35]) rotate([0, 30, -30]) scale([0.3, 0.2, 0.8]) sphere(5);\n            }\n        }\n    }\n}\n\nmodule briarshade_legs() {\n    color(briar_green) {\n        // Front legs\n        translate([15, 0, 0]) rotate([0, -30, 15]) leg_assembly();\n        translate([-15, 0, 0]) rotate([0, -30, -15]) leg_assembly();\n        \n        // Rear legs\n        translate([12, 0, -25]) rotate([0, 30, 10]) leg_assembly();\n        translate([-12, 0, -25]) rotate([0, 30, -10]) leg_assembly();\n    }\n}\n\nmodule leg_assembly() {\n    // Upper leg\n    translate([0, 0, 0]) rotate([45, 0, 0]) scale([0.4, 0.4, 1.2]) sphere(8);\n    \n    // Lower leg\n    translate([0, 0, -15]) rotate([-30, 0, 0]) scale([0.3, 0.3, 1]) sphere(7);\n    \n    // Paw\n    translate([0, 0, -25]) scale([0.6, 0.5, 0.3]) sphere(6);\n    \n    // Thorn claws\n    color(thorn_gold) {\n        for(i = [-2:1:2]) {\n            translate([i*2, 0, -28]) rotate([0, 0, 0]) cylinder(3, 1, 0.3);\n        }\n    }\n}\n\nmodule briarshade_tail() {\n    color(briar_green) {\n        // Tail segments\n        for(i = [0:4]) {\n            rotate([0, 10*i, 5*i]) translate([0, 0, -30 - i*8]) scale([0.9 - i*0.15, 0.9 - i*0.15, 1]) sphere(10 - i*2);\n        }\n        \n        // Thorn spikes along tail\n        color(thorn_gold) {\n            for(i = [1:4]) {\n                for(j = [0:45:315]) {\n                    rotate([0, 10*i, 5*i + j]) translate([0, 0, -30 - i*8]) rotate([30, 0, 0]) cylinder(4 - i*0.5, 1, 0.5);\n                }\n            }\n        }\n    }\n}\n\nmodule briarshade_wings() {\n    color([briar_green[0]*0.8, briar_green[1]*0.8, briar_green[2]*0.8]) {\n        // Left wing\n        translate([20, -5, 5]) rotate([0, 0, -20]) wing_half();\n        \n        // Right wing\n        mirror([1, 0, 0]) translate([20, -5, 5]) rotate([0, 0, -20]) wing_half();\n    }\n}\n\nmodule wing_half() {\n    // Wing membrane supports\n    for(i = [0:30:150]) {\n        rotate([0, 0, i]) translate([0, 0, 0]) scale([0.2, 0.2, 1]) cylinder(25, 2, 1);\n    }\n    \n    // Membrane webbing (thin)\n    difference() {\n        translate([0, 0, 12.5]) scale([0.01, 1, 0.5]) cube([50, 25, 25]);\n        \n        // Cut holes for webbing effect\n        for(i = [1:4]) {\n            translate([i*6, 0, 12.5]) sphere(3);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    briarshade_body();\n    briarshade_head();\n    briarshade_legs();\n    briarshade_tail();\n    briarshade_wings();\n    \n    // Ground base for printing support\n    color(shadow_gray) {\n        translate([0, 0, -35]) scale([1.5, 2, 0.2]) cylinder(20, 20, 20);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "cinderwhisper",
    "openscad_code": "// Cinderwhisper - mythical fire spirit dragon\n// Features: ember wings, smoke tail, glowing core, scale armor\n\n// Main body\nmodule cinderwhisper() {\n    color(\"darkorange\") {\n        // Core body sphere\n        translate([0, 0, 15]) sphere(12);\n        \n        // Chest armor plates\n        for(i=[0:30:150]) {\n            rotate([0, 0, i]) \n            translate([0, 13, 15]) \n            scale([1, 0.7, 0.5]) sphere(3);\n        }\n    }\n    \n    // Head\n    color(\"orangered\") {\n        translate([0, 0, 35]) {\n            // Snout\n            cylinder(h=15, r1=8, r2=5);\n            // Horns\n            translate([4, 0, 5]) rotate([0, 25, 0]) cylinder(h=12, r1=2, r2=1);\n            translate([-4, 0, 5]) rotate([0, -25, 0]) cylinder(h=12, r1=2, r2=1);\n            // Eyes\n            translate([3, -5, 8]) sphere(2);\n            translate([-3, -5, 8]) sphere(2);\n        }\n    }\n    \n    // Wings - ember style\n    color(\"gold\") {\n        // Left wing\n        translate([12, 0, 25]) {\n            rotate([0, 0, -30]) {\n                difference() {\n                    scale([3, 0.5, 2]) sphere(6);\n                    // Wing membrane holes\n                    for(x=[-4:2:4]) {\n                        for(y=[-3:2:3]) {\n                            translate([x, 0, y]) sphere(1);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Right wing\n        mirror([1, 0, 0]) {\n            translate([12, 0, 25]) {\n                rotate([0, 0, -30]) {\n                    difference() {\n                        scale([3, 0.5, 2]) sphere(6);\n                        for(x=[-4:2:4]) {\n                            for(y=[-3:2:3]) {\n                                translate([x, 0, y]) sphere(1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs\n    color(\"saddlebrown\") {\n        // Front legs\n        translate([6, 8, 10]) {\n            cylinder(h=12, r1=3, r2=2);\n            translate([0, 0, -6]) sphere(3);\n        }\n        translate([-6, 8, 10]) {\n            cylinder(h=12, r1=3, r2=2);\n            translate([0, 0, -6]) sphere(3);\n        }\n        \n        // Back legs\n        translate([8, -8, 10]) {\n            cylinder(h=12, r1=3, r2=2);\n            translate([0, 0, -6]) sphere(3);\n        }\n        translate([-8, -8, 10]) {\n            cylinder(h=12, r1=3, r2=2);\n            translate([0, 0, -6]) sphere(3);\n        }\n    }\n    \n    // Smoke tail\n    color(\"dimgray\") {\n        translate([0, -15, 12]) {\n            for(i=[0:5:35]) {\n                rotate([0, i/2, 0]) {\n                    translate([0, -i, 0]) {\n                        scale([1-i/40, 1-i/40, 1-i/50]) sphere(4);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Glowing core\n    color(\"yellow\") {\n        translate([0, 0, 15]) sphere(5);\n    }\n    \n    // Scale details on back\n    color(\"firebrick\") {\n        for(i=[-15:5:15]) {\n            translate([i, 0, 25]) {\n                scale([1, 0.5, 0.3]) sphere(3);\n            }\n        }\n    }\n}\n\n// Generate the creature\ncinderwhisper();",
    "renders": true
  },
  {
    "mythical_creature": "driftgleam",
    "openscad_code": "// Driftgleam - Mythical creature with luminescent wings and crystalline body\n// 3D printable model with realistic styling\n\n// Color definitions\ncolor_crystal = [0.8, 0.9, 1.0, 0.7];      // Translucent blue-white crystal\ncolor_glow = [0.3, 0.7, 1.0, 0.8];         // Bright blue glow\ncolor_core = [0.1, 0.2, 0.5, 0.9];         // Deep blue core\n\n// Overall scale for 3D printing\noverall_scale = 0.8;\n\nmodule driftgleam() {\n    scale(overall_scale) union() {\n        // Main crystalline body\n        color(color_crystal)\n        translate([0, 0, 5])\n        scale([1, 0.6, 1.2])\n        sphere(10);\n        \n        // Core glow sphere\n        color(color_core)\n        translate([0, 0, 8])\n        sphere(4);\n        \n        // Wings - two pairs\n        // Upper wings\n        for(angle = [0, 180]) rotate([0, angle, 0]) {\n            color(color_glow)\n            translate([-5, 0, 15])\n            rotate([0, 30, 10])\n            scale([1.5, 0.5, 0.1])\n            sphere(8);\n            \n            // Wing membrane details\n            for(i = [0:3]) {\n                color(color_crystal)\n                translate([-8 - i*2, 0, 15 + i*2])\n                rotate([0, 30, 5 + i*3])\n                scale([0.3, 0.1, 0.05])\n                sphere(3);\n            }\n        }\n        \n        // Lower wings\n        for(angle = [0, 180]) rotate([0, angle, 0]) {\n            color(color_glow)\n            translate([-3, 0, 8])\n            rotate([0, 20, 5])\n            scale([1.2, 0.4, 0.08])\n            sphere(6);\n        }\n        \n        // Head with horn\n        color(color_crystal)\n        translate([0, 0, 25])\n        scale([0.6, 0.6, 0.8])\n        sphere(6);\n        \n        // Horn spiral\n        color(color_glow)\n        for(i = [0:20]) {\n            translate([0, 0, 25 + i*0.3])\n            rotate([0, 0, i*30])\n            translate([0, 1.5 + i*0.1, 0])\n            scale([0.2 - i*0.005, 0.2 - i*0.005, 0.3])\n            cylinder(h=0.5, r=0.5);\n        }\n        \n        // Tail segments\n        color(color_crystal)\n        for(i = [0:5]) {\n            translate([0, 0, -i*3 - 5])\n            scale([1 - i*0.15, 1 - i*0.15, 0.8])\n            sphere(5 - i*0.5);\n        }\n        \n        // Crystalline spikes on back\n        for(i = [0:4]) {\n            angle = i * 45;\n            color(color_glow)\n            translate([sin(angle) * 5, cos(angle) * 3, 10 + i*2])\n            rotate([15, 0, angle])\n            scale([0.3, 0.3, 1])\n            cylinder(h=4, r=0.5);\n        }\n        \n        // Floating crystal fragments around body\n        for(i = [0:7]) {\n            angle = i * 51.4;\n            height = 8 + sin(i*2) * 5;\n            radius = 12 + cos(i*3) * 3;\n            \n            color(color_crystal)\n            translate([sin(angle) * radius, cos(angle) * radius, height])\n            scale([0.5, 0.5, 0.8])\n            sphere(1.5);\n        }\n        \n        // Leg supports for 3D printing\n        color(color_crystal)\n        for(x = [-4, 4]) {\n            translate([x, 0, 0])\n            rotate([30, 0, x > 0 ? 15 : -15])\n            scale([0.5, 0.5, 1])\n            cylinder(h=6, r=1.5);\n        }\n    }\n}\n\n// Base platform for stability\ncolor([0.4, 0.4, 0.5, 0.3])\ntranslate([0, 0, -1])\ncylinder(h=2, r=15);\n\n// Render the driftgleam\ndriftgleam();",
    "renders": true
  },
  {
    "mythical_creature": "emberwhirl",
    "openscad_code": "// Emberwhirl - A phoenix-like fire elemental creature\n// Features: burning wings, swirling flame tail, ember core body, horn-like crest\n\n// Main creature module\nmodule emberwhirl() {\n    color(\"orangered\") {\n        // Central ember core body\n        difference() {\n            // Main torso with ember-like texture\n            union() {\n                sphere(d=20, $fn=32);\n                // Ember protrusions\n                for(i = [0:7]) {\n                    rotate([0, 0, i*45]) \n                        translate([8, 0, 5]) \n                            sphere(d=8, $fn=16);\n                }\n            }\n            // Hollow center for material savings\n            sphere(d=15, $fn=32);\n        }\n        \n        // Head with crest\n        translate([0, 0, 25]) {\n            sphere(d=12, $fn=24);\n            // Flame crest horns\n            for(i = [0:3]) {\n                rotate([0, 0, i*90]) \n                    translate([6, 0, 8]) \n                        cylinder(h=15, r1=3, r2=0.5, $fn=8);\n            }\n        }\n        \n        // Wings - layered flame feathers\n        for(side = [0, 1]) {\n            mirror([side, 0, 0]) {\n                translate([-10, 0, 15]) {\n                    rotate([0, -20, -30]) {\n                        // Primary wing structure\n                        color(\"darkorange\") \n                            cube([25, 3, 8], center=true);\n                        \n                        // Flame feathers\n                        for(i = [0:4]) {\n                            color(\"gold\") {\n                                translate([i*5, 0, 4-i]) \n                                    rotate([0, i*10, 0]) \n                                        cube([8, 1, 6-i], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Swirling flame tail\n        translate([0, 0, -20]) {\n            color(\"yellow\") {\n                for(i = [0:5]) {\n                    rotate([0, 0, i*60]) \n                        translate([0, i*3, -i*2]) \n                            scale([1, 1, 0.8]) \n                                cylinder(h=8, r1=6-i, r2=4-i, $fn=12);\n                }\n            }\n        }\n        \n        // Legs with ember claws\n        for(side = [0, 1]) {\n            mirror([side, 0, 0]) {\n                translate([6, 0, -8]) {\n                    color(\"red\") {\n                        cylinder(h=12, r=2.5, $fn=12);\n                        // Claws\n                        for(claw = [0:2]) {\n                            rotate([0, 0, claw*120-60]) \n                                translate([2.5, 0, -12]) \n                                    cylinder(h=4, r1=1, r2=0.5, $fn=6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the creature centered at origin\nemberwhirl();",
    "renders": true
  },
  {
    "mythical_creature": "frostwhisper",
    "openscad_code": "// Frostwhisper - Ice Dragon of the North Winds\n// A medium-detail, realistic style mythical creature\n\n// Overall size: ~80mm wingtip to wingtip\n$fn=32;\n\n// Main colors\ncolor_frost = [0.85, 0.9, 1.0];\ncolor_ice = [0.7, 0.85, 0.95];\ncolor_shadow = [0.5, 0.55, 0.65];\n\n// Main body module\nmodule frostwhisper_body() {\n    union() {\n        // Central torso\n        color(color_frost)\n        translate([0, 0, 5])\n        scale([1.2, 0.8, 1.5])\n        sphere(r=8);\n        \n        // Neck base\n        color(color_ice)\n        translate([0, 0, 15])\n        rotate([15, 0, 0])\n        cylinder(h=12, r1=6, r2=4);\n        \n        // Tail segments\n        for(i=[0:3]) {\n            translate([0, 0, -i*6-3])\n            rotate([i*10, 0, 0])\n            scale([1-0.1*i, 1-0.1*i, 1])\n            sphere(r=7-i);\n        }\n    }\n}\n\n// Head module with ice crown\nmodule frostwhisper_head() {\n    union() {\n        // Main head\n        color(color_frost)\n        translate([0, 0, 28])\n        rotate([30, 0, 0])\n        scale([0.8, 0.6, 1.2])\n        sphere(r=7);\n        \n        // Snout\n        color(color_ice)\n        translate([0, 0, 35])\n        rotate([45, 0, 0])\n        cylinder(h=8, r1=4, r2=2);\n        \n        // Ice crown horns\n        for(angle=[0:120:240]) {\n            color(color_ice)\n            translate([0, 0, 34])\n            rotate([0, angle, 0])\n            translate([0, 6, 0])\n            rotate([15, 0, 0])\n            cylinder(h=10, r1=1.5, r2=0.5);\n        }\n        \n        // Eyes - glowing blue crystals\n        color([0.2, 0.4, 0.9])\n        for(side=[-1:2:1]) {\n            translate([side*3, 5, 33])\n            rotate([30, 0, 0])\n            sphere(r=1.5);\n        }\n    }\n}\n\n// Wing module with ice membrane\nmodule frostwhisper_wing(side=1) {\n    union() {\n        // Wing arm\n        color(color_shadow)\n        translate([0, side*8, 18])\n        rotate([0, 0, side*20])\n        rotate([0, 30, 0])\n        cylinder(h=20, r1=2, r2=1.5);\n        \n        // Wing fingers with membrane\n        for(i=[0:2]) {\n            color(color_ice)\n            translate([0, side*8, 18])\n            rotate([0, 0, side*(20+i*15)])\n            rotate([0, 30-i*10, 0])\n            translate([0, 0, 15+i*5])\n            difference() {\n                union() {\n                    // Finger bone\n                    cylinder(h=15-i*3, r1=1.5, r2=0.8);\n                    // Membrane segment\n                    translate([0, side*(8-i*2), 5])\n                    rotate([90, 0, 90])\n                    scale([1, 0.2, 0.05])\n                    cylinder(h=10-i*2, r=8-i*2);\n                }\n                // Cut membrane for realism\n                translate([0, side*5, 3])\n                rotate([90, 0, 0])\n                cylinder(h=10, r=0.5);\n            }\n        }\n    }\n}\n\n// Leg modules\nmodule frostwhisper_leg(side=1, front=1) {\n    translate([side*5, 0, 10-front*5]) {\n        // Upper leg\n        color(color_shadow)\n        rotate([0, side*15, 0])\n        cylinder(h=8, r=2, r2=1.5);\n        \n        // Lower leg\n        translate([0, 0, 8])\n        rotate([0, side*(-20), 0])\n        cylinder(h=6, r=1.5, r2=1);\n        \n        // Foot with claws\n        translate([0, 0, 14])\n        rotate([0, side*(-30), 0])\n        union() {\n            color(color_ice)\n            cube([3, 1, 1], center=true);\n            // Claws\n            for(i=[-1:1]) {\n                color(color_ice)\n                translate([i, 0.5, -0.5])\n                rotate([45, 0, 0])\n                cylinder(h=2, r1=0.3, r2=0.1);\n            }\n        }\n    }\n}\n\n// Ice crystal formations on back\nmodule ice_spikes() {\n    for(pos=[[0, 0, 20], [2, 2, 18], [-2, -2, 19], [0, 3, 17]]) {\n        color(color_ice)\n        translate(pos)\n        rotate([0, 45, 0])\n        cylinder(h=5+rand(3), r1=1.5, r2=0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    frostwhisper_body();\n    frostwhisper_head();\n    \n    // Wings\n    frostwhisper_wing(1);\n    frostwhisper_wing(-1);\n    \n    // Legs\n    frostwhisper_leg(1, 1);  // Front left\n    frostwhisper_leg(-1, 1); // Front right\n    frostwhisper_leg(1, 0);  // Back left\n    frostwhisper_leg(-1, 0); // Back right\n    \n    // Ice formations\n    ice_spikes();\n}",
    "renders": true
  },
  {
    "mythical_creature": "glimmershade",
    "openscad_code": "// Glimmershade - ethereal shadow dragon with crystalline wings\n// Medium complexity realistic style - 3D printable\n\n// Overall dimensions: 80mm wingspan, 60mm length, 45mm height\n\n// Main body module\nmodule glimmershade_body() {\n    color(\"dimgray\")\n    union() {\n        // Torso - elongated teardrop shape\n        translate([0, 0, 15])\n        scale([1.2, 1, 1.5])\n        sphere(12, $fn=32);\n        \n        // Chest plate\n        translate([0, 5, 12])\n        rotate([90, 0, 0])\n        cylinder(h=8, r1=8, r2=6, $fn=16);\n        \n        // Tail segments - decreasing size\n        for(i = [0:3]) {\n            translate([-15 - i*8, 0, 15 - i*3])\n            scale([1 - i*0.2, 1 - i*0.2, 1 - i*0.15])\n            sphere(8 - i*2, $fn=20);\n        }\n        \n        // Neck\n        translate([12, 0, 25])\n        rotate([-30, 0, 0])\n        cylinder(h=15, r1=5, r2=4, $fn=16);\n        \n        // Head\n        translate([25, 0, 30])\n        scale([1.3, 0.9, 1.1])\n        sphere(8, $fn=24);\n    }\n}\n\n// Crystalline wing module\nmodule wing(left=true) {\n    color(\"mediumslateblue\", 0.7)\n    translate([0, left ? 15 : -15, 25])\n    rotate([0, left ? 20 : -20, 0])\n    union() {\n        // Main wing membrane\n        linear_extrude(height=1)\n        polygon([\n            [0, 0],\n            [30, 5],\n            [40, 0],\n            [35, -5],\n            [25, 0],\n            [15, -3],\n            [5, 0]\n        ]);\n        \n        // Wing bones/crystalline structures\n        for(i = [0:2]) {\n            translate([15 + i*10, 0, 0])\n            rotate([0, 0, i*15])\n            scale([0.5, 0.2, 5])\n            cube([1, 1, 1], center=true);\n        }\n    }\n}\n\n// Horn module\nmodule horns() {\n    color(\"darkslategray\")\n    union() {\n        // Main horns\n        translate([28, 3, 35])\n        rotate([0, -10, 20])\n        cylinder(h=12, r1=3, r2=1, $fn=8);\n        \n        translate([28, -3, 35])\n        rotate([0, -10, -20])\n        cylinder(h=12, r1=3, r2=1, $fn=8);\n        \n        // Secondary horns\n        for(i = [0:1]) {\n            translate([26, i*6 - 3, 33])\n            rotate([0, -20, i*30 - 15])\n            cylinder(h=8, r1=2, r2=0.5, $fn=6);\n        }\n    }\n}\n\n// Leg module\nmodule leg(front=true, left=true) {\n    color(\"dimgray\")\n    translate([front ? 8 : -8, left ? 8 : -8, 0])\n    union() {\n        // Upper leg\n        translate([0, 0, 10])\n    rotate([0, 0, left ? 15 : -15])\n    cylinder(h=12, r1=4, r2=3, $fn=12);\n        \n        // Lower leg\n        translate([0, 0, 3])\n        rotate([0, 0, left ? -20 : 20])\n        cylinder(h=10, r1=3, r2=2, $fn=10);\n        \n        // Foot\n        translate([0, 0, -2])\n        scale([2, 1, 0.5])\n        sphere(3, $fn=12);\n    }\n}\n\n// Magical glimmer effect\nmodule glimmer_spots() {\n    color(\"lavender\", 0.8)\n    for(i = [0:8]) {\n        angle = i * 45;\n        radius = 15 + sin(i*2)*5;\n        translate([\n            cos(angle) * radius,\n            sin(angle) * radius,\n            20 + sin(i*3)*3\n        ])\n        sphere(1 + sin(i*4)*0.5, $fn=16);\n    }\n}\n\n// Assemble the glimmershade\nglimmershade_body();\nwing(true);\nwing(false);\nhorns();\n\n// Legs\nleg(true, true);\nleg(true, false);\nleg(false, true);\nleg(false, false);\n\n// Magical glimmer effects\nglimmer_spots();\n\n// Base for stability\ncolor(\"black\", 0.3)\ntranslate([0, 0, -3])\ncylinder(h=3, r=25, $fn=64);",
    "renders": true
  },
  {
    "mythical_creature": "hollowgleam",
    "openscad_code": "// Hollowgleam Dragon - Realistic Medium Complexity\n// A translucent dragon with glowing core elements\n\n$fn = 32;\nwall_thickness = 1.2;\n\n// Main body module\nmodule dragon_body() {\n    // Torso - hollow egg shape\n    difference() {\n        scale([1.2, 1, 0.8]) sphere(20);\n        scale([1.15, 0.95, 0.75]) sphere(19);\n    }\n}\n\n// Head module with snout and horns\nmodule dragon_head() {\n    translate([0, 25, 15]) {\n        difference() {\n            // Main head shape\n            union() {\n                scale([0.8, 1.2, 0.9]) sphere(15);\n                // Snout\n                translate([0, 12, -3]) scale([0.6, 0.7, 0.4]) sphere(12);\n            }\n            // Hollow interior\n            scale([0.75, 1.15, 0.85]) sphere(14);\n        }\n        \n        // Horns\n        for(i = [-1, 1]) {\n            translate([i*8, 5, 10]) rotate([30*i, 0, 45*i]) {\n                cylinder(h1 = 12, h2 = 0, r1 = 3, r2 = 1);\n            }\n        }\n        \n        // Eyes - glowing spheres\n        color(\"cyan\") {\n            translate([6, 8, 5]) sphere(2.5);\n            translate([-6, 8, 5]) sphere(2.5);\n        }\n    }\n}\n\n// Wing module with membrane structure\nmodule dragon_wing(side) {\n    translate([0, 0, 10]) rotate([0, 0, 30*side]) {\n        translate([side*15, -5, 0]) rotate([0, 90, 0]) {\n            // Wing bones\n            for(i = [0:30:120]) {\n                rotate([0, 0, i]) translate([0, 0, 0]) {\n                    hull() {\n                        translate([0, 0, 0]) sphere(wall_thickness);\n                        translate([0, 40, 0]) sphere(wall_thickness);\n                    }\n                }\n            }\n            \n            // Wing membrane - thin hollow structure\n            difference() {\n                scale([0.1, 1, 1]) cylinder(h = 40, r = 30);\n                scale([0.05, 0.95, 0.95]) cylinder(h = 40, r = 29);\n            }\n        }\n    }\n}\n\n// Tail module with segments\nmodule dragon_tail() {\n    translate([0, -25, 0]) {\n        for(i = [0:15:120]) {\n            rotate([0, 0, -i/2]) {\n                translate([0, -i/2, 0]) {\n                    scale([1-i/200, 1-i/200, 0.8-i/200]) {\n                        difference() {\n                            sphere(10-i/15);\n                            scale([0.9, 0.9, 0.7]) sphere(9-i/15);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leg module\nmodule dragon_leg(position) {\n    translate([position*8, -5, -15]) {\n        // Upper leg\n        rotate([45, 0, 0]) {\n            cylinder(h = 12, r = 4, r2 = 3);\n            translate([0, 0, 12]) cylinder(h = 10, r = 3, r2 = 2);\n            translate([0, 0, 22]) cube([3, 6, 6], center = true);\n        }\n    }\n}\n\n// Core glow elements\nmodule core_glow() {\n    color(\"lightblue\") {\n        translate([0, 0, 0]) sphere(8);\n        translate([0, 15, 5]) sphere(5);\n        translate([0, -15, -5]) sphere(5);\n    }\n}\n\n// Scale texture\nmodule scales() {\n    for(y = [-20:5:20]) {\n        for(x = [-15:5:15]) {\n            translate([x, y, 20*sin(x/5) + 15]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h = 2, r = 2.5);\n                        translate([0, 0, -1]) cylinder(h = 4, r = 2);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\ncolor(\"silver\") {\n    union() {\n        dragon_body();\n        dragon_head();\n        dragon_wing(1);\n        dragon_wing(-1);\n        dragon_tail();\n        \n        // Legs\n        dragon_leg(1);\n        dragon_leg(-1);\n        translate([5, -5, -15]) dragon_leg(1);\n        translate([-5, -5, -15]) dragon_leg(-1);\n        \n        // Scale details\n        scales();\n    }\n}\n\n// Internal glow\ncore_glow();",
    "renders": true
  },
  {
    "mythical_creature": "icewhirl",
    "openscad_code": "// IceWhirl - Mythical Arctic Creature\n// A swirling elemental of frost and wind with crystalline wings\n\n// Overall scale\nscale_factor = 0.4;\n\nmodule icewhirl() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        \n        // Main body - swirling vortex core\n        color(\"LightBlue\") union() {\n            // Central vortex body\n            for (i = [0:15:180]) {\n                rotate([0, 0, i]) \n                translate([0, 0, i/3])\n                scale([1 - i/400, 1 - i/400, 0.5])\n                sphere(d=30 - i/10, $fn=8);\n            }\n        }\n        \n        // Crystalline wings\n        color(\"DeepSkyBlue\") {\n            // Left wing cluster\n            translate([-20, 0, 30]) rotate([0, 30, -30]) wing_cluster();\n            // Right wing cluster  \n            translate([20, 0, 30]) mirror([1, 0, 0]) wing_cluster();\n        }\n        \n        // Frost tendrils\n        color(\"AliceBlue\") {\n            for (angle = [0:60:359]) {\n                rotate([0, 0, angle]) \n                translate([15, 0, 5])\n                rotate([angle/3, 0, 0])\n                tendril();\n            }\n        }\n        \n        // Ice horn crown\n        color(\"LightCyan\") {\n            for (h = [0:40:320]) {\n                rotate([0, 0, h]) \n                translate([0, 0, 45])\n                rotate([0, 20, 0])\n                ice_horn();\n            }\n        }\n        \n        // Eye - glowing core\n        color(\"White\") difference() {\n            sphere(d=8, $fn=16);\n            translate([0, 0, 4]) sphere(d=6, $fn=16);\n        }\n        color(\"DarkBlue\") sphere(d=4, $fn=12);\n    }\n}\n\n// Wing crystal structure\nmodule wing_cluster() {\n    for (i = [0:20:120]) {\n        rotate([0, i/2, i]) \n        translate([i/4, 0, i/8])\n        scale([1 - i/200, 0.2, 1 - i/200])\n        difference() {\n            cube([15, 2, 25], center=true);\n            translate([0, 0, 10]) rotate([0, 30, 0]) cube([12, 3, 15], center=true);\n        }\n    }\n}\n\n// Frost tendril\nmodule tendril() {\n    for (seg = [0:5:25]) {\n        translate([0, 0, seg])\n        scale([1 - seg/40, 1 - seg/40, 1])\n        rotate([0, 0, seg*5])\n        cylinder(h=3, d1=4-seg/10, d2=3-seg/10, $fn=6);\n    }\n}\n\n// Ice horn\nmodule ice_horn() {\n    cylinder(h=12, d1=3, d2=1, $fn=6);\n    translate([0, 0, 12]) sphere(d=2, $fn=8);\n}\n\n// Render the complete creature\ntranslate([0, 0, 10]) icewhirl();",
    "renders": true
  },
  {
    "mythical_creature": "jadegleam",
    "openscad_code": "// Jadegleam - A mystical serpentine dragon with glowing jade scales\n// Realistic style, medium complexity, 3D-printable\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    color(\"darkgreen\") {\n        // Torso segment 1\n        translate([0, 0, 10]) {\n            scale([1, 0.6, 0.6]) sphere(8);\n        }\n        \n        // Torso segment 2\n        translate([0, 0, 5]) {\n            scale([0.9, 0.5, 0.5]) sphere(7);\n        }\n        \n        // Tail segments using loop\n        for(i = [1:5]) {\n            translate([0, 0, 10 - i * 3]) {\n                scale([1 - i * 0.15, 0.5 - i * 0.08, 0.5 - i * 0.08]) \n                sphere(6 - i);\n            }\n        }\n    }\n}\n\n// Head with snout and horns\nmodule head() {\n    color(\"seagreen\") {\n        // Main head sphere\n        translate([0, 0, 18]) {\n            scale([1.2, 0.8, 0.8]) sphere(6);\n        }\n        \n        // Snout\n        translate([5, 0, 17]) {\n            scale([1.5, 0.4, 0.4]) sphere(4);\n        }\n        \n        // Jade horns (3)\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle]) {\n                translate([3, 0, 22]) {\n                    rotate([30, 0, 0]) {\n                        scale([0.3, 0.3, 1.2]) cylinder(5, 2, 0.5);\n                    }\n                }\n            }\n        }\n        \n        // Eyes (glowing)\n        color(\"lime\") {\n            translate([3.5, 2.5, 19]) sphere(1.2);\n            translate([3.5, -2.5, 19]) sphere(1.2);\n        }\n    }\n}\n\n// Wings with membrane structure\nmodule wings() {\n    color(\"darkolivegreen\") {\n        // Left wing\n        translate([0, 6, 15]) {\n            rotate([0, 0, 90]) {\n                // Main wing bone\n                rotate([30, 0, 0]) {\n                    scale([0.3, 0.3, 1]) cylinder(12, 2, 1);\n                }\n                \n                // Wing membrane segments\n                for(i = [0:2]) {\n                    rotate([20 + i * 15, 0, 0]) {\n                        translate([0, 0, 8 + i * 2]) {\n                            difference() {\n                                scale([0.2, 0.1, 1]) cylinder(8 - i * 2, 2, 0.5);\n                                translate([0, 0, -1]) cube([4, 4, 1], center = true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Right wing (mirror of left)\n        mirror([0, 1, 0]) {\n            translate([0, 6, 15]) {\n                rotate([0, 0, 90]) {\n                    rotate([30, 0, 0]) {\n                        scale([0.3, 0.3, 1]) cylinder(12, 2, 1);\n                    }\n                    \n                    for(i = [0:2]) {\n                        rotate([20 + i * 15, 0, 0]) {\n                            translate([0, 0, 8 + i * 2]) {\n                                difference() {\n                                    scale([0.2, 0.1, 1]) cylinder(8 - i * 2, 2, 0.5);\n                                    translate([0, 0, -1]) cube([4, 4, 1], center = true);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Legs with claws\nmodule legs() {\n    color(\"forestgreen\") {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([2, side * 3, 8]) {\n                rotate([0, side * 15, 0]) {\n                    // Upper leg\n                    scale([0.4, 0.4, 0.8]) cylinder(5, 2, 1.5);\n                    \n                    // Lower leg\n                    translate([0, 0, -5]) {\n                        rotate([30, 0, 0]) {\n                            scale([0.3, 0.3, 0.8]) cylinder(4, 1.5, 1);\n                            \n                            // Claws\n                            for(claw = [-0.8, 0, 0.8]) {\n                                translate([claw, 0, -4]) {\n                                    scale([0.2, 0.2, 0.8]) cylinder(2, 0.5, 0.2);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Back legs\n        for(side = [-1, 1]) {\n            translate([-2, side * 2, 3]) {\n                rotate([0, side * 20, 0]) {\n                    scale([0.35, 0.35, 0.7]) cylinder(4, 1.8, 1.3);\n                    \n                    translate([0, 0, -4]) {\n                        rotate([20, 0, 0]) {\n                            scale([0.3, 0.3, 0.7]) cylinder(3, 1.3, 0.8);\n                            \n                            for(claw = [-0.6, 0, 0.6]) {\n                                translate([claw, 0, -3]) {\n                                    scale([0.2, 0.2, 0.7]) cylinder(1.5, 0.4, 0.2);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Jade scales decoration\nmodule scales() {\n    color(\"jade\") {\n        // Scales along back\n        for(i = [0:3]) {\n            translate([0, 0, 15 - i * 3]) {\n                scale([1.2, 0.8, 0.3]) sphere(2);\n            }\n        }\n        \n        // Side scales\n        for(side = [-1, 1]) {\n            for(i = [0:4]) {\n                translate([i * 1.5 - 3, side * 2, 12 - i * 2]) {\n                    scale([0.8, 0.5, 0.2]) sphere(1.5);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the creature\nunion() {\n    body();\n    head();\n    wings();\n    legs();\n    scales();\n}",
    "renders": true
  },
  {
    "mythical_creature": "kindlewhirl",
    "openscad_code": "// Kindlewhirl - Mythical fire-spiral dragon\n// Realistic style, medium complexity\n// 3D printable with no overhangs\n\n$fa = 2;\n$fs = 0.5;\n\nmodule kindlewhirl() {\n    color(\"orangered\") union() {\n        // Main body - elongated spiral\n        translate([0, 0, 10]) rotate([90, 0, 0]) {\n            for(i = [0:5:180]) {\n                rotate([0, 0, i*2]) \n                    translate([i*0.15, 0, i*0.1]) \n                        scale([1, 1, 1.2]) \n                            sphere(d = 12 - i*0.05);\n            }\n        }\n        \n        // Head assembly\n        translate([0, 0, 45]) rotate([0, 0, 0]) {\n            // Snout\n            color(\"darkorange\") \n                translate([8, 0, -2]) \n                    scale([1.5, 1, 1]) \n                        sphere(d = 10);\n            \n            // Main head\n            color(\"orangered\") \n                sphere(d = 15);\n            \n            // Horns - curved back\n            for(side = [-1, 1]) {\n                color(\"goldenrod\") \n                    translate([6, side*5, 8]) \n                        rotate([0, side*20, -30]) \n                            scale([0.3, 0.3, 1]) \n                                cylinder(h = 12, d1 = 4, d2 = 1);\n            }\n            \n            // Eyes - glowing\n            for(side = [-1, 1]) {\n                color(\"yellow\") \n                    translate([7, side*4, 2]) \n                        sphere(d = 2);\n            }\n        }\n        \n        // Wings - flame-shaped\n        for(side = [-1, 1]) {\n            color(\"orangered\") \n                translate([0, side*8, 25]) \n                    rotate([0, 0, side*30]) {\n                        // Upper wing segment\n                        translate([5, 0, 5]) \n                            rotate([0, -20, 0]) \n                                scale([1.5, 0.2, 1]) \n                                    sphere(d = 12);\n                        \n                        // Lower wing segment\n                        translate([8, 0, -3]) \n                            rotate([0, 20, 0]) \n                                scale([1.2, 0.2, 0.8]) \n                                    sphere(d = 10);\n                        \n                        // Wing membrane support\n                        for(j = [0:2]) {\n                            translate([j*3 + 3, 0, 2 - j*2]) \n                                rotate([0, -j*15, 0]) \n                                    cylinder(h = 8, d = 1.5);\n                        }\n                    }\n        }\n        \n        // Tail - spiraling flame\n        color(\"orangered\") \n            translate([-25, 0, 5]) {\n                for(i = [0:10:120]) {\n                    rotate([0, 0, -i]) \n                        translate([-i*0.2, 0, -i*0.05]) \n                            scale([1 - i*0.003, 1 - i*0.005, 1 - i*0.002]) \n                                sphere(d = 8 - i*0.05);\n                }\n            }\n        \n        // Legs - sturdy for printing\n        for(side = [-1, 1]) {\n            color(\"darkred\") \n                translate([-5, side*6, 0]) {\n                    // Upper leg\n                    rotate([0, -30, 0]) \n                        cylinder(h = 8, d = 6);\n                    \n                    // Lower leg\n                    translate([0, 0, -8]) \n                        rotate([0, 20, 0]) \n                            cylinder(h = 10, d1 = 6, d2 = 4);\n                    \n                    // Foot\n                    translate([3, 0, -17]) \n                        scale([1.5, 1, 0.5]) \n                            sphere(d = 6);\n                }\n        }\n        \n        // Flame ridges along spine\n        color(\"goldenrod\") \n            for(i = [0:15:180]) {\n                rotate([0, 0, i]) \n                    translate([25 - i*0.2, 0, 10 + i*0.08]) \n                        scale([0.5, 0.5, 1]) \n                            sphere(d = 4);\n            }\n        \n        // Ember scales\n        color(\"red\") \n            for(i = [0:20:360]) {\n                for(j = [0:10:40]) {\n                    rotate([0, 0, i]) \n                        translate([j - 10, 0, 5 + j*0.5]) \n                            sphere(d = 1.5);\n                }\n            }\n    }\n}\n\n// Create the kindlewhirl\nkindlewhirl();",
    "renders": true
  },
  {
    "mythical_creature": "lunarwhirl",
    "openscad_code": "// LunarWhirl - A mystical moon-phase dragon with swirling mane and crescent wings\n// Designed for 3D printing with no overhangs >45° and 1.2mm wall thickness\n\ncolor(\"LightSteelBlue\") difference() {\n    union() {\n        // Central body with moon crater pattern\n        body();\n        \n        // Crescent wings on sides\n        translate([-20, 0, 5]) rotate([0, 0, -30]) crescent_wing();\n        translate([20, 0, 5]) mirror([1, 0, 0]) rotate([0, 0, -30]) crescent_wing();\n        \n        // Swirling mane around neck\n        translate([0, -12, 12]) rotate([90, 0, 0]) swirl_mane();\n        \n        // Lunar tail with phase rings\n        translate([0, 18, 5]) rotate([90, 0, 0]) lunar_tail();\n        \n        // Four legs with moon boots\n        translate([-8, 8, 0]) leg();\n        translate([8, 8, 0]) leg();\n        translate([-8, -8, 0]) leg();\n        translate([8, -8, 0]) leg();\n        \n        // Horns with star tips\n        translate([-5, -15, 15]) horn();\n        translate([5, -15, 15]) mirror([1, 0, 0]) horn();\n    }\n    \n    // Eye sockets\n    translate([-5, -16, 10]) sphere(d=3);\n    translate([5, -16, 10]) sphere(d=3);\n}\n\n// Main body with crater texture\nmodule body() {\n    difference() {\n        color(\"Gainsboro\") scale([1.3, 1, 1]) sphere(d=25);\n        \n        // Crater details\n        for(i=[0:5]) {\n            rotate([0, 0, i*60]) \n            translate([8, 0, 5]) \n            sphere(d=3);\n        }\n        \n        // Neck cavity\n        translate([0, -12, 5]) \n        rotate([15, 0, 0]) \n        cylinder(h=15, d=10);\n    }\n}\n\n// Crescent wing with moon phase cutouts\nmodule crescent_wing() {\n    difference() {\n        union() {\n            // Main crescent\n            color(\"Silver\") \n            scale([1, 0.3, 0.1]) \n            rotate([0, 90, 0]) \n            cylinder(h=25, d=20);\n            \n            // Wing membrane support ribs\n            for(i=[0:3]) {\n                rotate([0, 0, i*30-45]) \n                translate([7, 0, 1]) \n                cube([15, 0.5, 2]);\n            }\n        }\n        \n        // Crescent cutout\n        color(\"LightSteelBlue\") \n        scale([1, 0.25, 0.1]) \n        rotate([0, 90, 0]) \n        translate([2, 0, 0]) \n        cylinder(h=30, d=15);\n    }\n}\n\n// Swirling mane with star patterns\nmodule swirl_mane() {\n    color(\"GhostWhite\") \n    for(i=[0:8]) {\n        rotate([0, 0, i*45]) \n        translate([0, i*1.5, 0]) \n        rotate([0, 0, i*20]) \n        scale([1, 0.2, 1]) \n        sphere(d=6);\n    }\n}\n\n// Lunar tail with phase rings\nmodule lunar_tail() {\n    color(\"Silver\") \n    union() {\n        // Main tail segments\n        for(i=[0:5]) {\n            translate([0, 0, -i*5]) \n            scale([1-i*0.1, 1-i*0.1, 1]) \n            cylinder(h=4, d=6);\n            \n            // Phase rings\n            color(\"DimGray\") \n            translate([0, 0, -i*5-2]) \n            cylinder(h=0.5, d=8-i, $fn=32);\n        }\n    }\n}\n\n// Leg with moon boot foot\nmodule leg() {\n    color(\"LightSlateGray\") \n    union() {\n        // Upper leg\n        cylinder(h=12, d1=6, d2=4);\n        \n        // Lower leg\n        translate([0, 0, -12]) \n        cylinder(h=10, d1=4, d2=5);\n        \n        // Moon boot foot\n        translate([0, 0, -22]) \n        sphere(d=8);\n    }\n}\n\n// Horn with star tip\nmodule horn() {\n    color(\"AliceBlue\") \n    union() {\n        // Main horn\n        cylinder(h=10, d1=3, d2=1);\n        \n        // Star tip\n        translate([0, 0, 10]) \n        scale([1, 1, 0.3]) \n        sphere(d=3);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "mossgleam",
    "openscad_code": "// Mossgleam - a luminous forest spirit with crystalline wings and mossy features\n// Realistic style, medium complexity, 3D printable\n\n// Scale factor for easy resizing\nscale_factor = 0.8;\n\n// Main module\nmodule mossgleam() {\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Main body - rounded torso with moss texture\n        color([0.2, 0.4, 0.1]) \n        translate([0, 0, 15])\n        sphere(d=35, $fn=32);\n        \n        // Head - slightly elongated with crystalline features\n        color([0.3, 0.5, 0.2])\n        translate([0, 0, 35])\n        scale([0.8, 0.9, 1.2])\n        sphere(d=20, $fn=32);\n        \n        // Eyes - glowing orbs\n        for(x = [-6, 6]) {\n            color([0.8, 1, 0.4])\n            translate([x, -8, 38])\n            sphere(d=4, $fn=16);\n        }\n        \n        // Antler-like crystalline horns\n        module horn() {\n            color([0.6, 0.9, 1])\n            union() {\n                cylinder(h=25, d1=3, d2=1, $fn=8);\n                translate([0, 0, 20])\n                sphere(d=4, $fn=8);\n            }\n        }\n        \n        // Left horn\n        translate([-12, -5, 45])\n        rotate([0, 20, -30])\n        horn();\n        \n        // Right horn\n        translate([12, -5, 45])\n        mirror([1, 0, 0])\n        rotate([0, 20, -30])\n        horn();\n        \n        // Wings - crystalline membrane structure\n        module wing() {\n            color([0.7, 0.95, 1, 0.7])\n            difference() {\n                // Main wing shape\n                translate([-20, 0, 0])\n                scale([2, 1, 0.5])\n                sphere(d=30, $fn=16);\n                \n                // Cutouts for membrane pattern\n                for(i = [1:3]) {\n                    translate([-25 + i*8, -5 + i*2, 0])\n                    rotate([0, 0, i*15])\n                    scale([0.3, 0.8, 1])\n                    cylinder(h=15, d=8, $fn=6);\n                }\n            }\n        }\n        \n        // Left wing\n        translate([-5, 20, 28])\n        rotate([0, 0, 90])\n        rotate([0, -20, 0])\n        wing();\n        \n        // Right wing\n        translate([5, 20, 28])\n        mirror([1, 0, 0])\n        rotate([0, 0, 90])\n        rotate([0, -20, 0])\n        wing();\n        \n        // Legs - moss-covered with small feet\n        module leg() {\n            color([0.25, 0.35, 0.15])\n            union() {\n                cylinder(h=20, d=6, $fn=12);\n                translate([0, 0, -10])\n                sphere(d=8, $fn=12);\n            }\n        }\n        \n        // Front legs\n        for(x = [-10, 10]) {\n            translate([x, 0, 15])\n            leg();\n        }\n        \n        // Back legs\n        for(x = [-8, 8]) {\n            translate([x, 15, 15])\n            rotate([10, 0, 0])\n            leg();\n        }\n        \n        // Tail - segmented mossy appendage\n        color([0.2, 0.45, 0.1])\n        for(i = [1:5]) {\n            translate([0, 20 + i*5, 15 - i*2])\n            rotate([i*5, 0, 0])\n            sphere(d=7 - i, $fn=12);\n        }\n        \n        // Bioluminescent spots on body\n        for(i = [1:8]) {\n            angle = i * 45;\n            radius = 15;\n            color([0.7, 1, 0.5])\n            translate([cos(angle) * radius, sin(angle) * radius, 20])\n            sphere(d=2, $fn=8);\n        }\n        \n        // Chest crystal\n        color([0.8, 1, 1])\n        translate([0, 5, 25])\n        scale([1, 1.2, 0.8])\n        rotate([0, 0, 45])\n        cube([6, 6, 3], center=true);\n    }\n}\n\n// Render the creature\nmossgleam();",
    "renders": true
  },
  {
    "mythical_creature": "nimbuswhirl",
    "openscad_code": "// Nimbuswhirl - Mythical Storm Spirit\n// A swirling cloud-like creature with wings and lightning patterns\n\n// Overall scale factor for printing\nscale_factor = 0.4;\n\n// Main body - swirling cloud mass\nmodule body() {\n    color([0.85, 0.85, 0.9]) {\n        difference() {\n            union() {\n                // Central cloud sphere\n                sphere(15);\n                \n                // Swirling cloud extensions\n                for(i = [0:45:315]) {\n                    rotate([0, 0, i])\n                    translate([10, 0, 5])\n                    scale([1.5, 0.8, 0.6])\n                    sphere(8);\n                }\n                \n                for(i = [22.5:45:337.5]) {\n                    rotate([0, 0, i])\n                    translate([8, 0, -3])\n                    scale([1.2, 0.7, 0.5])\n                    sphere(6);\n                }\n            }\n            \n            // Hollow out for printing\n            translate([0, 0, -5])\n            sphere(12);\n        }\n    }\n}\n\n// Lightning bolt element\nmodule lightning_bolt(x, y, z, rot) {\n    color([1, 1, 0.3]) {\n        translate([x, y, z])\n        rotate([0, 0, rot]) {\n            // Main bolt\n            cube([2, 1, 8]);\n            translate([1, 0, 4])\n            cube([3, 1, 6]);\n            translate([0, 0, 9])\n            cube([2, 1, 5]);\n            \n            // Side branches\n            translate([0.5, 0, 2])\n            rotate([0, 30, 0])\n            cube([1, 1, 4]);\n            translate([1.5, 0, 7])\n            rotate([0, -30, 0])\n            cube([1, 1, 3]);\n        }\n    }\n}\n\n// Wings - cloud-like with lightning veins\nmodule wing(side) {\n    color([0.8, 0.8, 0.95]) {\n        mirror([side, 0, 0]) {\n            translate([-5, 0, 5])\n            rotate([0, -20, 0]) {\n                // Main wing shape\n                difference() {\n                    hull() {\n                        translate([-2, 0, 0])\n                        sphere(3);\n                        translate([-8, 0, 15])\n                        sphere(2);\n                        translate([-12, 0, 25])\n                        sphere(1.5);\n                        translate([-5, 0, 20])\n                        sphere(2);\n                    }\n                    \n                    // Wing membrane hollow\n                    translate([-6, -1, 10])\n                    scale([0.6, 0.5, 0.8])\n                    cube([10, 3, 15]);\n                }\n                \n                // Lightning veins in wings\n                lightning_bolt(-6, 0.5, 10, 20);\n                lightning_bolt(-8, 0.5, 18, 35);\n                lightning_bolt(-4, 0.5, 15, -10);\n            }\n        }\n    }\n}\n\n// Storm cloud tail\nmodule tail() {\n    color([0.75, 0.75, 0.85]) {\n        union() {\n            for(i = [0:30:120]) {\n                rotate([0, 0, -i])\n                translate([-15 - i*0.3, 0, -5 - i*0.2])\n                scale([1 - i*0.005, 1 - i*0.005, 1 - i*0.005])\n                sphere(5 - i*0.03);\n            }\n            \n            // Lightning sparks from tail\n            lightning_bolt(-25, 0, -15, 45);\n            lightning_bolt(-28, 2, -18, -30);\n        }\n    }\n}\n\n// Eyes - glowing storm orbs\nmodule eyes() {\n    color([0.3, 0.3, 1]) {\n        // Left eye\n        translate([5, 6, 5])\n        sphere(2);\n        \n        // Right eye\n        translate([5, -6, 5])\n        sphere(2);\n        \n        // Eye glow\n        color([0.5, 0.5, 1, 0.5]) {\n            translate([6, 6, 5])\n            sphere(1.5);\n            translate([6, -6, 5])\n            sphere(1.5);\n        }\n    }\n}\n\n// Horn - crystallized lightning\nmodule horn() {\n    color([0.9, 0.9, 1]) {\n        translate([0, 0, 15])\n        rotate([0, 0, 0]) {\n            cylinder(h1 = 1, h2 = 0, r1 = 2, r2 = 0.5);\n            translate([0, 0, 1])\n            cylinder(h1 = 2, h2 = 0, r1 = 1.5, r2 = 0.3);\n            translate([0, 0, 3])\n            cylinder(h1 = 2, h2 = 0, r1 = 1, r2 = 0.1);\n        }\n    }\n}\n\n// Assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        body();\n        wing(1);\n        wing(-1);\n        tail();\n        eyes();\n        horn();\n        \n        // Floating cloud wisps\n        for(i = [0:60:359]) {\n            rotate([0, 0, i])\n            translate([18, 0, sin(i*3)*3])\n            color([0.9, 0.9, 0.95, 0.7])\n            sphere(1.5);\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "oakgleam",
    "openscad_code": "// Oakgleam - A mythical forest spirit that protects ancient oak groves\n// Features: deer-like body, glowing antlers, leaf wings, bark texture\n\n// Colors\n$fa = 8;\n$fs = 0.5;\n\n// Main body module\nmodule oakgleam_body() {\n    // Torso - deer-like body\n    color([0.4, 0.25, 0.15]) {\n        // Main torso\n        cube([35, 20, 25], center = true);\n        \n        // Rump\n        translate([15, 0, -5])\n            scale([1.2, 1.1, 0.8])\n                sphere(10);\n        \n        // Chest\n        translate([-15, 0, -3])\n            scale([0.9, 1.1, 1.2])\n                sphere(10);\n    }\n}\n\n// Head module\nmodule oakgleam_head() {\n    color([0.35, 0.22, 0.13]) {\n        // Head base\n        translate([-25, 0, 15])\n            rotate([0, -10, 0])\n                scale([1.5, 1, 1.2])\n                    sphere(8);\n        \n        // Snout\n        translate([-35, 0, 13])\n            scale([0.8, 0.6, 0.6])\n                sphere(5);\n    }\n}\n\n// Glowing antlers module\nmodule antlers() {\n    // Left antler\n    color([0.8, 0.9, 0.3]) {\n        translate([-25, 6, 23]) {\n            rotate([0, -20, -20])\n                cylinder(h = 15, r1 = 2, r2 = 1);\n            translate([0, 0, 12])\n                rotate([0, 20, 45])\n                    cylinder(h = 8, r1 = 1.5, r2 = 0.5);\n            translate([5, 0, 8])\n                rotate([0, 10, 30])\n                    cylinder(h = 6, r1 = 1, r2 = 0.5);\n        }\n    }\n    \n    // Right antler (mirrored)\n    mirror([0, 1, 0])\n        antlers();\n}\n\n// Leaf wings module\nmodule leaf_wings() {\n    color([0.2, 0.4, 0.1]) {\n        // Left wing\n        translate([0, 12, 15]) {\n            rotate([0, 30, -30])\n                scale([1.5, 0.8, 0.1])\n                    sphere(15);\n            \n            // Wing veins\n            for(i = [0:30:120]) {\n                rotate([0, 0, i])\n                    translate([5, 0, 0])\n                        scale([0.1, 8, 0.05])\n                            cube([20, 1, 1], center = true);\n            }\n        }\n        \n        // Right wing\n        mirror([0, 1, 0])\n            leaf_wings();\n    }\n}\n\n// Leg module\nmodule leg(side = 1, front_back = 1) {\n    color([0.3, 0.2, 0.12]) {\n        // Upper leg\n        translate([front_back * 10, side * 8, -12]) {\n            rotate([0, 10 * front_back, 0])\n                cylinder(h = 15, r1 = 3, r2 = 2.5);\n            \n            // Lower leg\n            translate([0, 0, -8])\n                rotate([0, 5 * front_back, 0])\n                    cylinder(h = 12, r1 = 2.5, r2 = 2);\n            \n            // Hoof\n            translate([0, 0, -15])\n                scale([0.8, 0.8, 1.5])\n                    cylinder(h = 5, r1 = 2.2, r2 = 2);\n        }\n    }\n}\n\n// Bark texture module\nmodule bark_texture() {\n    // Add small bumps for bark texture\n    color([0.25, 0.15, 0.1]) {\n        for(i = [-20:5:20]) {\n            for(j = [-10:5:10]) {\n                translate([i, j, 12.5])\n                    sphere(0.5);\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color([0.3, 0.18, 0.12]) {\n        translate([22, 0, 0]) {\n            rotate([0, 30, 0])\n                scale([0.3, 0.3, 2])\n                    cylinder(h = 15, r1 = 4, r2 = 0);\n            \n            // Leaf tuft\n            color([0.2, 0.5, 0.1])\n                translate([5, 0, 12])\n                    scale([1, 1, 0.1])\n                        sphere(6);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    oakgleam_body();\n    oakgleam_head();\n    antlers();\n    leaf_wings();\n    tail();\n    bark_texture();\n    \n    // Legs\n    for(side = [-1, 1]) {\n        for(front_back = [-1, 1]) {\n            leg(side, front_back);\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "pearlwhirl",
    "openscad_code": "// Pearlwhirl - Mystical Spiral Dragon of the Depths\n// Realistic style with medium complexity\n\n// Main module for the complete creature\nmodule pearlwhirl() {\n    color(\"LightBlue\") {\n        // Main body spiral\n        union() {\n            // Head\n            translate([0, 0, 25]) pearlwhirl_head();\n            \n            // Spiral body\n            pearlwhirl_body();\n            \n            // Tail\n            translate([0, 0, -15]) pearlwhirl_tail();\n            \n            // Wings\n            translate([0, 8, 15]) rotate([0, 30, 0]) pearlwhirl_wing();\n            translate([0, -8, 15]) rotate([0, -30, 0]) mirror([0, 1, 0]) pearlwhirl_wing();\n            \n            // Pearl glow\n            translate([0, 0, 28]) pearlwhirl_pearl();\n        }\n    }\n}\n\n// Head with horns and facial features\nmodule pearlwhirl_head() {\n    // Main head sphere\n    sphere(6, $fn=32);\n    \n    // Snout\n    translate([5, 0, -1]) \n        scale([1.5, 0.8, 0.8]) sphere(3, $fn=24);\n    \n    // Horns - curved spiral horns\n    for(i = [0:1]) {\n        mirror([0, i*2-1, 0]) {\n            translate([2, 3, 3]) rotate([0, 0, 30]) \n                scale([0.3, 0.3, 1]) cylinder(8, 2, 0.5, $fn=12);\n            translate([3, 2, 5]) rotate([0, 0, 60]) \n                scale([0.3, 0.3, 0.8]) cylinder(6, 1.5, 0.3, $fn=12);\n        }\n    }\n    \n    // Eyes\n    color(\"DeepSkyBlue\") {\n        for(i = [0:1]) {\n            mirror([0, i*2-1, 0]) {\n                translate([4, 1.5, 1]) sphere(1, $fn=16);\n            }\n        }\n    }\n}\n\n// Spiral body with scales\nmodule pearlwhirl_body() {\n    // Create spiral body using loop\n    for(i = [0:15:360]) {\n        rotate([0, 0, i]) \n        translate([8 * sin(i/2), 8 * cos(i/2), 20 - i/15]) {\n            // Body segment\n            scale([1, 1, 0.8]) sphere(4 - i/100, $fn=24);\n            \n            // Scales\n            color(\"Azure\") {\n                for(j = [0:45:315]) {\n                    rotate([0, 0, j]) \n                    translate([3, 0, 0]) \n                    scale([0.8, 0.3, 0.3]) sphere(1, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Fan-like tail\nmodule pearlwhirl_tail() {\n    color(\"PowderBlue\") {\n        // Tail segments\n        for(i = [0:3]) {\n            translate([0, 0, -i*4]) \n            scale([1 - i*0.2, 1 - i*0.2, 1]) \n            sphere(3 - i*0.5, $fn=24);\n        }\n        \n        // Tail fins\n        for(i = [0:1]) {\n            mirror([0, i*2-1, 0]) {\n                translate([0, 3, -6]) \n                rotate([0, 0, -i*30]) \n                scale([2, 1, 0.2]) \n                cube([6, 4, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Wing with membrane structure\nmodule pearlwhirl_wing() {\n    color(\"LightCyan\") {\n        // Wing arm\n    translate([0, 0, 0]) \n    rotate([0, 0, -30]) \n    scale([0.5, 0.5, 4]) cylinder(12, 1, 0.5, $fn=12);\n    \n    // Wing membrane\n    hull() {\n        translate([0, 0, 0]) sphere(0.5);\n        translate([0, 10, 5]) sphere(0.5);\n        translate([0, 8, 10]) sphere(0.5);\n        translate([0, 0, 12]) sphere(0.5);\n        translate([0, -5, 8]) sphere(0.5);\n    }\n    \n    // Wing ribs\n    for(i = [1:3]) {\n        translate([0, i*2.5, i*3]) \n        rotate([0, 0, -i*10]) \n        scale([0.3, 0.3, 2]) cylinder(8 - i*2, 0.5, 0.2, $fn=8);\n    }\n    }\n}\n\n// Magical pearl with glow effect\nmodule pearlwhirl_pearl() {\n    color(\"GhostWhite\") {\n        sphere(2.5, $fn=32);\n    }\n    \n    // Inner glow\n    color(\"White\") {\n        translate([0, 0, 0.5]) sphere(2, $fn=32);\n    }\n}\n\n// Generate the creature\npearlwhirl();",
    "renders": true
  },
  {
    "mythical_creature": "quartzwhirl",
    "openscad_code": "// Quartzwhirl - Mythical crystal dragon with swirling energy\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Main body color - translucent quartz\ncolor([0.9, 0.85, 0.95, 0.8]) {\n    union() {\n        // Central crystal body\n        rotate([0, 0, 45]) {\n            difference() {\n                // Main hexagonal prism body\n                cylinder(h = 40, r1 = 15, r2 = 12, $fn = 6);\n                \n                // Hollow center for energy\n                translate([0, 0, 5]) {\n                    cylinder(h = 30, r = 8, $fn = 6);\n                }\n            }\n        }\n        \n        // Head formation\n        translate([0, 0, 42]) {\n            rotate([0, 0, 45]) {\n                difference() {\n                    cylinder(h = 20, r1 = 12, r2 = 8, $fn = 6);\n                    // Eye sockets\n                    translate([6, 0, 15]) sphere(r = 2);\n                    translate([-6, 0, 15]) sphere(r = 2);\n                }\n                \n                // Snout\n                translate([0, 12, 10]) {\n                    cube([8, 8, 6], center = true);\n                }\n            }\n        }\n        \n        // Wings - crystalline formations\n        module wing() {\n            difference() {\n                // Main wing crystal\n                scale([1, 2, 0.5]) {\n                    sphere(r = 20);\n                }\n                \n                // Wing membrane holes\n                for(i = [1:3]) {\n                    translate([0, i*8 - 12, 0]) {\n                        sphere(r = 3);\n                    }\n                }\n            }\n        }\n        \n        // Left wing\n        translate([0, 15, 25]) {\n            rotate([0, 15, -30]) {\n                wing();\n            }\n        }\n        \n        // Right wing\n        translate([0, -15, 25]) {\n            rotate([0, 15, 30]) {\n                mirror([0, 1, 0]) {\n                    wing();\n                }\n            }\n        }\n        \n        // Tail segments\n        module tail_segment(size) {\n            sphere(r = size);\n        }\n        \n        // Swirling tail\n        for(i = [0:5]) {\n            angle = i * 45;\n            radius = 15 - i * 2;\n            translate([\n                sin(angle) * radius,\n                cos(angle) * radius,\n                -i * 8\n            ]) {\n                tail_segment(8 - i);\n            }\n        }\n        \n        // Leg formations\n        module leg() {\n            difference() {\n                // Upper leg\n                cylinder(h = 15, r1 = 6, r2 = 4, $fn = 6);\n                \n                // Joint detail\n                translate([0, 0, 7]) {\n                    sphere(r = 3);\n                }\n                \n                // Lower leg\n                translate([0, 0, -10]) {\n                    cylinder(h = 12, r1 = 4, r2 = 3, $fn = 6);\n                }\n                \n                // Foot\n                translate([0, 2, -20]) {\n                    cube([8, 4, 3], center = true);\n                }\n            }\n        }\n        \n        // Front legs\n        translate([8, 8, 0]) {\n            rotate([0, 15, 0]) {\n                leg();\n            }\n        }\n        \n        translate([-8, 8, 0]) {\n            rotate([0, 15, 0]) {\n                leg();\n            }\n        }\n        \n        // Back legs\n        translate([8, -8, -10]) {\n            rotate([0, -15, 0]) {\n                leg();\n            }\n        }\n        \n        translate([-8, -8, -10]) {\n            rotate([0, -15, 0]) {\n                leg();\n            }\n        }\n        \n        // Horn formations\n        module horn() {\n            color([0.7, 0.6, 0.8, 0.9]) {\n                for(i = [0:2]) {\n                    translate([0, 0, i * 3]) {\n                        rotate([0, 0, i * 30]) {\n                            cylinder(h = 5, r1 = 3 - i, r2 = 2 - i*0.5, $fn = 6);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Head horns\n        translate([0, 0, 55]) {\n            horn();\n        }\n        \n        translate([5, 0, 55]) {\n            rotate([0, 10, 15]) {\n                horn();\n            }\n        }\n        \n        translate([-5, 0, 55]) {\n            rotate([0, 10, -15]) {\n                horn();\n            }\n        }\n        \n        // Energy core - glowing center\n        color([0.5, 0.3, 1, 0.9]) {\n            translate([0, 0, 20]) {\n                sphere(r = 5);\n            }\n            \n            // Energy tendrils\n            for(i = [0:5]) {\n                angle = i * 60;\n                translate([\n                    sin(angle) * 3,\n                    cos(angle) * 3,\n                    20\n                ]) {\n                    cylinder(h = 10, r1 = 1, r2 = 0.5);\n                }\n            }\n        }\n    }\n}\n\n// Base platform for stability\ncolor([0.6, 0.6, 0.7]) {\n    translate([0, 0, -30]) {\n        cylinder(h = 3, r = 25);\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "rimegleam",
    "openscad_code": "// Rimegleam - Ice Dragon of the North\n// A crystalline ice dragon with glowing frost patterns and translucent wings\n\n$fn = 32;\nscale_factor = 0.8;\n\nmodule rimegleam_body() {\n    // Main body - elongated ice crystal shape\n    color([0.85, 0.95, 1.0, 0.9])\n    union() {\n        // Upper torso\n        translate([0, 0, 8])\n            scale([1.2, 0.8, 1.5])\n            sphere(8);\n        \n        // Main body segment\n        translate([0, 0, 0])\n            scale([1.5, 1, 1])\n            cylinder(h=15, r1=6, r2=4);\n        \n        // Tail segments\n        for(i = [0:3]) {\n            translate([0, 0, -18 - i*6])\n                scale([1 - i*0.15, 1 - i*0.15, 1])\n                cylinder(h=6, r1=4 - i*0.8, r2=3.5 - i*0.8);\n        }\n    }\n}\n\nmodule rimegleam_head() {\n    color([0.8, 0.9, 1.0, 0.85])\n    translate([0, 0, 22])\n    union() {\n        // Snout\n        translate([0, 6, 0])\n            rotate([45, 0, 0])\n            scale([0.8, 0.8, 1.2])\n            cylinder(h=8, r1=4, r2=2);\n        \n        // Head base\n        scale([1, 1.2, 1])\n            sphere(6);\n        \n        // Ice horns\n        for(angle = [0:120:359]) {\n            rotate([0, 0, angle])\n            translate([5, 0, 3])\n                rotate([30, 0, 0])\n                scale([0.3, 0.3, 1])\n                cylinder(h=8, r1=2, r2=0.5);\n        }\n        \n        // Eyes - glowing frost cores\n        color([0.5, 0.8, 1, 0.9])\n        for(x = [-2.5, 2.5]) {\n            translate([x, 4, 1])\n                sphere(1.2);\n        }\n    }\n}\n\nmodule rimegleam_wings() {\n    // Translucent ice wings with frost patterns\n    color([0.7, 0.9, 1, 0.6])\n    union() {\n        // Left wing\n        translate([-10, 0, 12])\n        rotate([0, 30, -20])\n        union() {\n            // Main wing membrane\n            scale([2, 1, 0.1])\n                sphere(8);\n            \n            // Wing struts\n            for(i = [0:2]) {\n                rotate([0, 0, i*20 - 20])\n                translate([-2 - i*3, 0, 0])\n                    scale([0.3, 1, 0.1])\n                    cylinder(h=10 - i*2, r=0.5);\n            }\n        }\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0])\n        translate([-10, 0, 12])\n        rotate([0, 30, -20])\n        union() {\n            scale([2, 1, 0.1])\n                sphere(8);\n            \n            for(i = [0:2]) {\n                rotate([0, 0, i*20 - 20])\n                translate([-2 - i*3, 0, 0])\n                    scale([0.3, 1, 0.1])\n                    cylinder(h=10 - i*2, r=0.5);\n            }\n        }\n    }\n}\n\nmodule rimegleam_legs() {\n    // Crystalline legs with ice talons\n    color([0.75, 0.85, 0.95, 0.95])\n    union() {\n        for(side = [-1, 1]) {\n            // Front legs\n            translate([side * 4, 2, 2])\n                rotate([30, 0, side * 10])\n                union() {\n                    cylinder(h=8, r=1.5);\n                    translate([0, 0, -8])\n                        scale([1.5, 0.8, 0.5])\n                        sphere(2);\n                }\n            \n            // Rear legs\n            translate([side * 3, -2, -5])\n                rotate([50, 0, side * 15])\n                union() {\n                    cylinder(h=7, r=1.8);\n                    translate([0, 0, -7])\n                        scale([1.8, 1, 0.6])\n                        sphere(2.2);\n                }\n        }\n    }\n}\n\nmodule rimegleam_spikes() {\n    // Icy spine spikes along back\n    color([0.9, 1, 1, 0.8])\n    for(i = [0:5]) {\n        translate([0, 0, 12 - i*4])\n            rotate([0, 0, i*10])\n            scale([0.8 - i*0.1, 0.5 - i*0.05, 1 + i*0.2])\n            cylinder(h=3, r1=1.5, r2=0.5);\n    }\n}\n\n// Assemble the complete Rimegleam\nscale([scale_factor, scale_factor, scale_factor])\nunion() {\n    rimegleam_body();\n    rimegleam_head();\n    rimegleam_wings();\n    rimegleam_legs();\n    rimegleam_spikes();\n}",
    "renders": true
  },
  {
    "mythical_creature": "sablewhirl",
    "openscad_code": "// Sablewhirl - A mythical wind spirit resembling a sable with swirling wind patterns\n// Medium complexity, realistic style, 3D printable\n\nmodule sablewhirl_body() {\n    // Main body - elongated sable-like form\n    color(\"saddlebrown\")\n    union() {\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1])\n            sphere(15, $fn=32);\n        \n        // Neck extension\n        translate([0, 20, 25])\n            scale([0.6, 0.4, 1.5])\n            cylinder(h=20, r=8, $fn=16);\n        \n        // Head\n        translate([0, 35, 28])\n            scale([0.8, 1, 0.7])\n            sphere(12, $fn=32);\n    }\n}\n\nmodule sablewhirl_legs() {\n    // Four legs with paw pads\n    color(\"saddlebrown\")\n    for(i=[-1, 1]) {\n        // Front legs\n        translate([i*12, 15, 0])\n            rotate([0, -10, i*5])\n            cylinder(h=20, r=3, $fn=12);\n        \n        // Back legs\n        translate([i*12, -15, 0])\n            rotate([0, 10, i*5])\n            cylinder(h=20, r=3, $fn=12);\n        \n        // Paw pads\n        translate([i*12, 15, -5])\n            sphere(4, $fn=12);\n        translate([i*12, -15, -5])\n            sphere(4, $fn=12);\n    }\n}\n\nmodule sablewhirl_tail() {\n    // Swirling tail with wind patterns\n    color(\"saddlebrown\")\n    union() {\n        // Tail base\n        translate([0, -25, 20])\n            rotate([45, 0, 0])\n            scale([1, 0.8, 0.6])\n            cylinder(h=30, r=6, $fn=12);\n        \n        // Wind swirl elements\n        for(i=[0:30:270]) {\n            rotate([0, 0, i])\n            translate([-5, -35, 15 - i/10])\n                rotate([0, 90, 0])\n                scale([0.3, 0.3, 1])\n                cylinder(h=15, r=3, $fn=8);\n        }\n    }\n}\n\nmodule sablewhirl_wings() {\n    // Translucent wind wings\n    color(\"skyblue\", 0.6)\n    for(side=[-1, 1]) {\n        translate([side*20, 10, 35])\n            rotate([0, 0, side*20])\n            scale([1, 1.5, 0.1])\n            sphere(20, $fn=24);\n        \n        // Wing support structures\n        color(\"darkslateblue\")\n        for(i=[0:60:120]) {\n            rotate([0, 0, side*i])\n            translate([side*25, 5, 30])\n                rotate([0, 90, 0])\n                scale([0.5, 0.5, 1])\n                cylinder(h=25, r=1.5, $fn=8);\n        }\n    }\n}\n\nmodule sablewhirl_ears() {\n    // Pointed ears\n    color(\"saddlebrown\")\n    for(side=[-1, 1]) {\n        translate([side*8, 38, 32])\n            rotate([0, 0, side*30])\n            scale([0.5, 0.3, 1.5])\n            sphere(5, $fn=8);\n    }\n}\n\nmodule sablewhirl_eyes() {\n    // Glowing eyes\n    color(\"gold\")\n    for(side=[-1, 1]) {\n        translate([side*5, 40, 30])\n            sphere(2, $fn=12);\n    }\n}\n\nmodule sablewhirl_wind_patterns() {\n    // Swirling wind patterns on body\n    color(\"lightblue\", 0.7)\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n        translate([0, 0, 20])\n            scale([0.3, 0.3, 1])\n            cylinder(h=15, r=8, $fn=6);\n    }\n}\n\n// Main assembly\nunion() {\n    sablewhirl_body();\n    sablewhirl_legs();\n    sablewhirl_tail();\n    sablewhirl_wings();\n    sablewhirl_ears();\n    sablewhirl_eyes();\n    sablewhirl_wind_patterns();\n}",
    "renders": true
  },
  {
    "mythical_creature": "thistlegleam",
    "openscad_code": "// Thistlegleam - A mystical creature with crystalline wings and plant-like features\n// Wingspan ~70mm, height ~55mm - suitable for FDM printing with minimal supports\n\nuse <colors.scad>\n\nmodule thistlegleam() {\n    color(\"MediumSeaGreen\")\n    \n    // Main body - bulbous thorax with segmented texture\n    union() {\n        // Central thorax\n        translate([0, 0, 25])\n        scale([1.2, 1, 1.5])\n        sphere(8, $fn=32);\n        \n        // Segmented abdomen\n        for (i = [0:3]) {\n            translate([0, 0, 15-i*3])\n            scale([1.1-0.1*i, 0.9-0.1*i, 0.8])\n            sphere(6, $fn=24);\n        }\n    }\n    \n    // Head with crystalline features\n    translate([0, 13, 35])\n    union() {\n        // Main head sphere\n        scale([0.8, 1.2, 0.9])\n        sphere(6, $fn=32);\n        \n        // Crystalline crown formations\n        for (angle = [0:60:300]) {\n            rotate([0, 0, angle])\n            translate([0, 7, 2])\n            rotate([15, 0, 0])\n            scale([0.3, 0.3, 1.5])\n            cylinder(5, 2, 0.5, $fn=6);\n        }\n    }\n    \n    // Compound eyes\n    color(\"Gold\")\n    for (side = [-1, 1]) {\n        translate([side*4, 17, 36])\n        sphere(2.5, $fn=16);\n    }\n    \n    // Crystalline wings with thistle pattern\n    color(\"MediumPurple\")\n    for (side = [-1, 1]) {\n        translate([side*15, 0, 30])\n        rotate([0, side*10, 0])\n        union() {\n            // Main wing structure\n            difference() {\n                // Wing membrane\n                scale([1, 2.5, 0.2])\n                sphere(10, $fn=3);\n                \n                // Thistle cutouts\n                for (i = [0:2]) {\n                    for (j = [0:3]) {\n                        translate([side*(3-i*2), 5-j*3, 0])\n                        scale([0.5, 0.5, 2])\n                        cylinder(1, 2, 2, $fn=6);\n                    }\n                }\n            }\n            \n            // Wing veins\n            color(\"DarkViolet\")\n            for (angle = [0:30:150]) {\n                rotate([0, 0, angle])\n                translate([0, 5, 0.5])\n                scale([0.1, 12, 0.1])\n                cube([1, 1, 1]);\n            }\n        }\n    }\n    \n    // Six articulated legs with thistle joints\n    color(\"ForestGreen\")\n    for (side = [-1, 1]) {\n        for (i = [0:2]) {\n            angle = 45 + i*30;\n            translate([side*8, 0, 25-i*5])\n            rotate([0, 0, side*angle])\n            union() {\n                // Upper leg segment\n                translate([6, 0, 0])\n                rotate([0, 0, -30])\n                scale([0.3, 0.3, 6])\n                cylinder(1, 1, 1, $fn=8);\n                \n                // Thistle joint\n                translate([9, 0, -2])\n                scale([1, 1, 0.5])\n                cylinder(2, 1.5, 1.5, $fn=12);\n                \n                // Lower leg segment\n                translate([10, 0, -4])\n                rotate([0, 0, 30])\n                scale([0.25, 0.25, 5])\n                cylinder(1, 1, 0.8, $fn=8);\n                \n                // Foot with thistle pattern\n                translate([13, 0, -6])\n                union() {\n                    sphere(1.2, $fn=12);\n                    for (j = [0:5]) {\n                        rotate([0, 0, j*60])\n                        translate([1.2, 0, 0])\n                        scale([0.2, 0.2, 0.8])\n                        cylinder(1, 0.5, 0, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Antennae with luminescent tips\n    color(\"YellowGreen\")\n    for (side = [-1, 1]) {\n        translate([side*3, 12, 40])\n        rotate([30, 0, side*15])\n        union() {\n            // Main antenna\n            scale([0.3, 0.3, 8])\n            cylinder(1, 1, 0.5, $fn=8);\n            \n            // Luminescent orb\n            translate([0, 0, 8.5])\n            color(\"Gold\")\n            sphere(1.2, $fn=16);\n        }\n    }\n    \n    // Thistle tail with segmented crystal structure\n    color(\"DarkOliveGreen\")\n    union() {\n        for (i = [0:5]) {\n            translate([0, -12-i*3, 22-i*2])\n            rotate([0, 0, 15*i])\n            scale([1-0.1*i, 1-0.1*i, 1])\n            union() {\n                // Tail segment\n                sphere(3-i*0.3, $fn=16);\n                \n                // Thistle spines\n                color(\"SeaGreen\")\n                for (angle = [0:45:315]) {\n                    rotate([0, 0, angle])\n                    translate([0, -3+i*0.3, 0])\n                    scale([0.3, 0.3, 1.5])\n                    cylinder(1, 1-i*0.1, 0, $fn=6);\n                }\n            }\n        }\n        \n        // Crystal stinger tip\n        color(\"MediumPurple\")\n        translate([0, -30, 10])\n        rotate([0, 0, 90])\n        scale([0.8, 0.8, 2])\n        cylinder(1, 2, 0, $fn=6);\n    }\n    \n    // Magical glow effects (subtle ridges)\n    color(\"Lavender\")\n    for (i = [0:8]) {\n        rotate([0, 0, i*45])\n        translate([0, 0, 25])\n        scale([1.3, 1.3, 0.1])\n        sphere(8, $fn=32);\n    }\n}\n\n// Render the creature\nthistlegleam();",
    "renders": true
  },
  {
    "mythical_creature": "umbralwhirl",
    "openscad_code": "// UmbralWhirl - Shadow Dragon Creature\n// A serpentine dragon that embodies swirling shadows and starlight\n\n$fn = 32;\n\n// Main color scheme\nbody_color = [0.1, 0.1, 0.15];  // Deep shadow purple\naccent_color = [0.3, 0.2, 0.5]; // Lighter purple accents\nstar_color = [0.8, 0.8, 1.0];   // Starlight white\neye_color = [0.9, 0.2, 0.9];    // Magenta eyes\n\n// Scale module for repetitive dragon scales\nmodule scale_element() {\n    difference() {\n        sphere(d=3);\n        translate([0,0,-1.5]) sphere(d=2.8);\n    }\n}\n\n// Body segment module\nmodule body_segment(length, radius, rotation) {\n    color(body_color) {\n        rotate([0, 0, rotation]) {\n            // Main body cylinder\n            cylinder(h=length, r1=radius, r2=radius*0.9, center=false);\n            \n            // Add scales along the body\n            for(i = [0:3]) {\n                rotate([0, 0, i*90]) {\n                    translate([0, radius-1, length/2]) scale_element();\n                }\n            }\n        }\n    }\n}\n\n// Wing module\nmodule wing() {\n    color(accent_color) {\n        // Wing membrane\n        hull() {\n            translate([0,0,0]) sphere(d=2);\n            translate([15,0,0]) sphere(d=1);\n            translate([12,0,-8]) sphere(d=1);\n            translate([8,0,-12]) sphere(d=0.5);\n        }\n        \n        // Wing bones\n        linear_extrude(height=1) {\n            polygon(points=[[0,0],[15,0],[12,-8],[8,-12]]);\n        }\n        \n        // Wing spikes\n        for(i = [0:2]) {\n            translate([5+i*5, 0, -i*3]) \n                rotate([90,0,0]) cylinder(h=3, r1=1, r2=0.5);\n        }\n    }\n}\n\n// Head module\nfunction head() {\n    color(body_color) {\n        union() {\n            // Main head\n            translate([0,0,5]) sphere(d=10);\n            \n            // Snout\n            translate([7,0,3]) sphere(d=6);\n            \n            // Horns\n            color(accent_color) {\n                translate([-3,4,8]) rotate([-30,0,45]) cylinder(h=8, r1=2, r2=1);\n                translate([-3,-4,8]) rotate([30,0,-45]) cylinder(h=8, r1=2, r1=1);\n            }\n            \n            // Eyes - glowing orbs\n            color(star_color) {\n                translate([5,2.5,6]) sphere(d=2);\n                translate([5,-2.5,6]) sphere(d=2);\n            }\n            color(eye_color) {\n                translate([6,2.5,6]) sphere(d=1);\n                translate([6,-2.5,6]) sphere(d=1);\n            }\n            \n            // Shadow wisps around head\n            for(i = [0:5]) {\n                rotate([0, i*60, 0]) {\n                    color([0.2, 0.15, 0.3, 0.6]) {\n                        translate([5*cos(i*60), 5*sin(i*60), 8]) sphere(d=1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail module\nmodule tail() {\n    color(body_color) {\n        // Create swirling tail\n        for(i = [0:10]) {\n            rotate([0, 0, i*20]) {\n                translate([0, 0, -i*4]) {\n                    body_segment(5, 6-i*0.4, i*30);\n                }\n            }\n        }\n        \n        // Tail fin\n        translate([0,0,-45]) rotate([0,0,180]) {\n            color(accent_color) {\n                rotate([0,30,0]) {\n                    difference() {\n                        cylinder(h=8, r1=8, r2=0);\n                        translate([0,0,-1]) cylinder(h=10, r1=6, r2=0);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Star clusters along body\nmodule star_cluster(position) {\n    color(star_color) {\n        translate(position) {\n            for(i = [0:3]) {\n                rotate([0, 0, i*90]) {\n                    translate([4, 0, 0]) sphere(d=0.5);\n                }\n            }\n            sphere(d=0.8);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Head\n    translate([0,0,0]) head();\n    \n    // Body\n    for(i = [0:8]) {\n        translate([0,0,-8-i*6]) {\n            body_segment(6, 6-i*0.3, i*15);\n        }\n    }\n    \n    // Wings\n    translate([-2,6,2]) rotate([0,0,-20]) wing();\n    translate([-2,-6,2]) mirror([0,1,0]) rotate([0,0,-20]) wing();\n    \n    // Tail\n    translate([0,0,-55]) tail();\n    \n    // Star clusters\n    star_cluster([0,0,-10]);\n    star_cluster([0,0,-20]);\n    star_cluster([3,3,-30]);\n    \n    // Shadow tendrils\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([0,0,-15]) {\n                color([0.15, 0.1, 0.25, 0.7]) {\n                    rotate([0, -30, 0]) \n                        cylinder(h=12, r1=2, r2=0.5);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "verdantwhirl",
    "openscad_code": "// VerdantWhirl - mythical wind-spirit of living vines and leaves\n// Realistic style, medium complexity, 3D-printable\n\n$fn=32;\nscale(0.4) union() {\n\n    // Main serpentine body – whirling vine core\n    color(\"darkgreen\")\n    rotate([90,0,0])\n        cylinder(h=80, d1=12, d2=18, center=true);\n\n    // Head: leafy dragon-like snout\n    translate([0,40,0])\n    color(\"forestgreen\")\n    union() {\n        sphere(d=16);\n        // Snout\n        translate([0,8,0])\n            scale([1,1.5,0.8])\n                sphere(d=12);\n        // Horns – twin vine-curls\n        for(a=[-30,30])\n            rotate([0,0,a])\n            translate([0,6,7])\n                rotate([90,0,0])\n                color(\"darkolivegreen\")\n                    cylinder(h=20, d1=5, d2=2);\n    }\n\n    // Eyes\n    for(side=[-1,1])\n        translate([side*5,45,5])\n        color(\"limegreen\")\n            sphere(d=4);\n\n    // Whirling leaf-wings (no overhangs, vertical supports)\n    module leaf() {\n        color(\"springgreen\")\n        intersection() {\n            scale([1,0.3,1])\n                sphere(d=30);\n            translate([0,-15,0])\n                cube([30,30,2], center=true);\n        }\n    }\n\n    for(a=[0:120:359])\n        rotate([0,0,a])\n        translate([0,0,-10])\n            leaf();\n\n    // Segmented vine rings along body\n    for(i=[-30:15:30])\n        translate([0,i,0])\n        rotate([0,90,0])\n        color(\"darkgreen\")\n            difference() {\n                cylinder(h=18, d=18, center=true);\n                cylinder(h=20, d=14, center=true);\n            }\n\n    // Tail curl – widening vine spiral\n    module tailSegment(r) {\n        color(\"green\")\n        rotate([90,0,0])\n            cylinder(h=6, d=12+2*r/10, center=true);\n    }\n    for(t=[0:10:120]) {\n        a = t*3;\n        r = 15 + t/3;\n        translate([r*cos(a), -40 - t*0.8, r*sin(a)])\n            tailSegment(t);\n    }\n\n    // Tiny leaf scales\n    module scale() {\n        color(\"lime\")\n        rotate([0,90,0])\n            scale([0.7,0.3,0.7])\n                sphere(d=4);\n    }\n    for(i=[-25:5:25])\n        for(j=[0:45:315]) {\n            rotate([0,j,0])\n            translate([8*cos(j),i,8*sin(j)])\n                scale();\n        }\n}",
    "renders": true
  },
  {
    "mythical_creature": "whisperwhirl",
    "openscad_code": "// Whisperwhirl - A mystical wind spirit creature\n// Features ethereal wings, spiral horns, and flowing tail\n\n// Overall scale factor\n$fn = 32;\nscale_factor = 0.5;\n\n// Main body module\nmodule whisperwhirl_body() {\n    color(\"GhostWhite\")\n    scale([scale_factor, scale_factor, scale_factor])\n    union() {\n        // Central body - elongated teardrop shape\n        translate([0, 0, 10])\n        scale([1.2, 0.8, 2])\n        sphere(r=10);\n        \n        // Chest ridge\n        translate([0, -5, 15])\n        scale([0.8, 0.3, 1.5])\n        rotate([30, 0, 0])\n        cube([15, 5, 8], center=true);\n    }\n}\n\n// Spiral horn module\nmodule spiral_horn(height, radius, twists) {\n    color(\"Ivory\")\n    for(i = [0:5:height*10]) {\n        translate([\n            radius * cos(i * twists * 0.1), \n            radius * sin(i * twists * 0.1), \n            i/5\n        ])\n        rotate([0, 0, i * twists * 5.7])\n        scale([0.8, 0.8, 0.8])\n        sphere(r=2 - (i/50));\n    }\n}\n\n// Wing membrane with support structures\nmodule wing() {\n    color(\"LightCyan\")\n    union() {\n        // Main wing membrane\n        translate([0, 0, 5])\n        scale([1, 0.3, 1])\n        rotate([0, 30, 0])\n        cylinder(h=25, r1=15, r2=5);\n        \n        // Wing support struts\n        for(i = [0:30:120]) {\n            rotate([0, 0, i])\n            translate([10, 0, 5])\n            scale([0.2, 0.2, 1])\n            rotate([0, 30, 0])\n            cylinder(h=20, r=1);\n        }\n    }\n}\n\n// Ethereal tail segments\nmodule tail_segment(pos, scale_factor) {\n    color(\"LightBlue\")\n    translate(pos)\n    scale([scale_factor, scale_factor, scale_factor])\n    sphere(r=5);\n}\n\n// Generate flowing tail\nmodule whisperwhirl_tail() {\n    for(i = [0:10]) {\n        angle = i * 15;\n        radius = i * 2;\n        tail_segment([\n            radius * cos(angle),\n            radius * sin(angle),\n            -i * 3 - 10\n        ], 1 - i * 0.08);\n    }\n}\n\n// Eye detail\nmodule eye() {\n    color(\"DeepSkyBlue\")\n    union() {\n        sphere(r=1.5);\n        color(\"Black\")\n        translate([0.5, 0, 0.8])\n        sphere(r=0.8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    whisperwhirl_body();\n    \n    // Head with horns\n    translate([0, 0, 25])\n    union() {\n        // Head\n        color(\"GhostWhite\")\n        scale([0.8, 0.7, 0.9])\n        sphere(r=8);\n        \n        // Left horn\n        translate([-3, 0, 5])\n        rotate([0, -20, -30])\n        spiral_horn(15, 2, 3);\n        \n        // Right horn\n        translate([3, 0, 5])\n        rotate([0, 20, 30])\n        spiral_horn(15, 2, 3);\n        \n        // Eyes\n        translate([-3, -5, 2])\n        eye();\n        translate([3, -5, 2])\n        eye();\n    }\n    \n    // Wings\n    translate([-10, 0, 15])\n    rotate([0, 0, -30])\n    wing();\n    \n    translate([10, 0, 15])\n    mirror([1, 0, 0])\n    rotate([0, 0, -30])\n    wing();\n    \n    // Tail\n    translate([0, 0, 0])\n    whisperwhirl_tail();\n    \n    // Legs (simple tapered cylinders)\n    color(\"LightSteelBlue\")\n    translate([-5, 0, 0])\n    rotate([0, -30, 0])\n    cylinder(h=10, r1=3, r2=2);\n    \n    translate([5, 0, 0])\n    rotate([0, 30, 0])\n    cylinder(h=10, r1=3, r2=2);\n}",
    "renders": true
  },
  {
    "mythical_creature": "xylogleam",
    "openscad_code": "// XYLOGLEAM - Wood-spirit dragon with crystalline wings\n// Medium complexity, realistic style, 3D-printable\n\n$fn = 32;\n\nmodule xylogleam() {\n    // Body trunk - 40mm long\n    color(\"saddlebrown\")\n    union() {\n        translate([0, 0, 20])\n        scale([1, 0.8, 1.2])\n        sphere(d = 20);\n        \n        // Neck\n        translate([0, 0, 35])\n        rotate([0, 20, 0])\n        cylinder(h = 15, d1 = 12, d2 = 8);\n        \n        // Head\n        translate([0, 0, 52])\n        sphere(d = 12);\n    }\n    \n    // Snout\n    color(\"peru\")\n    translate([0, 0, 58])\n    rotate([0, 20, 0])\n    cylinder(h = 10, d1 = 8, d2 = 4);\n    \n    // Horns - spiral wooden horns\n    color(\"sienna\")\n    for (side = [-1, 1]) {\n        translate([side * 6, 0, 55])\n        rotate([0, side * 10, 0])\n        cylinder(h = 15, d1 = 4, d2 = 2);\n    }\n    \n    // Eyes - amber gems\n    color(\"gold\")\n    for (side = [-1, 1]) {\n        translate([side * 4, 4, 54])\n        sphere(d = 3);\n    }\n    \n    // Wings - crystalline panels\n    module wing() {\n        color(\"lightblue\", 0.7)\n        translate([0, 0, 5])\n        difference() {\n            // Main wing panel\n            translate([0, 0, 0])\n            cube([25, 2, 18], center = true);\n            \n            // Wing holes\n            for (i = [0:2]) {\n                translate([-10 + i * 8, 0, -5 + i * 5])\n                sphere(d = 4);\n            }\n        }\n    }\n    \n    // Left wing\n    translate([-10, -2, 35])\n    rotate([0, 0, 30])\n    wing();\n    \n    // Right wing\n    translate([10, -2, 35])\n    rotate([0, 0, -30])\n    mirror([1, 0, 0])\n    wing();\n    \n    // Legs\n    color(\"saddlebrown\")\n    for (leg = [0, 1]) {\n        x = leg ? 8 : -8;\n        translate([x, 0, 15])\n        rotate([0, 0, leg ? 10 : -10])\n        cylinder(h = 12, d = 6);\n        \n        // Feet\n        translate([x, 0, 2])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d1 = 6, d2 = 8);\n    }\n    \n    // Tail\n    color(\"saddlebrown\")\n    translate([0, 0, 5])\n    rotate([0, 180, 0])\n    cylinder(h = 25, d1 = 15, d2 = 4);\n    \n    // Tail crystal tip\n    color(\"lightblue\", 0.7)\n    translate([0, 0, -15])\n    sphere(d = 5);\n    \n    // Back scales\n    color(\"forestgreen\")\n    for (i = [1:4]) {\n        translate([0, 0, 25 + i * 4])\n        rotate([0, 0, i * 15])\n        cube([12, 3, 2], center = true);\n    }\n    \n    // Chest crystal\n    color(\"lightblue\", 0.8)\n    translate([0, 6, 30])\n    sphere(d = 6);\n}\n\n// Create the xylogleam at origin\nxylogleam();",
    "renders": true
  },
  {
    "mythical_creature": "yearnwhirl",
    "openscad_code": "// Yearnwhirl - A mythical wind spirit that eternally spins in longing for the sky\n// Realistic style, medium complexity, 3D printable\n\n// Main body parameters\nbody_radius = 12;\nbody_height = 25;\nneck_length = 8;\nhead_size = 8;\n\n// Wing parameters\nwing_span = 40;\nwing_width = 15;\nfeather_count = 5;\n\n// Tail parameters\ntail_length = 30;\ntail_segments = 6;\n\n// Color scheme\n$fa = 2;\n$fs = 1;\n\nmodule body() {\n    color([0.8, 0.7, 0.9]) {\n        // Torso - elongated sphere\n        translate([0, 0, body_height/2])\n            scale([1, 0.8, 1.2])\n                sphere(r=body_radius);\n        \n        // Chest ridge\n        translate([0, 0, body_height/2 + 5])\n            rotate([90, 0, 0])\n                cylinder(h=10, r1=body_radius-5, r2=body_radius-8);\n    }\n}\n\nmodule head() {\n    color([0.9, 0.8, 1.0]) {\n        // Head - elongated sphere\n        translate([0, 0, body_height + neck_length + head_size/2])\n            scale([0.7, 0.6, 1])\n                sphere(r=head_size);\n        \n        // Snout\n        translate([0, -6, body_height + neck_length + head_size/2])\n            rotate([90, 0, 0])\n                cylinder(h=8, r1=3, r2=1);\n        \n        // Eyes - glowing orbs\n        color([0.3, 0.6, 1.0, 0.8])\n            for(side = [-1, 1])\n                translate([side*3, -4, body_height + neck_length + head_size])\n                    sphere(r=1.5);\n    }\n}\n\nmodule neck() {\n    color([0.85, 0.75, 0.95]) {\n        // Flexible neck with spiral texture\n        for(i = [0:neck_length/2-1]) {\n            translate([0, 0, body_height + i*2])\n                rotate([0, 0, i*45])\n                    cylinder(h=2, r1=4.5-i*0.2, r2=4.3-i*0.2);\n        }\n    }\n}\n\nmodule wings() {\n    color([0.7, 0.6, 0.9, 0.8]) {\n        for(side = [-1, 1]) {\n            // Wing base\n            translate([side*body_radius*0.8, 0, body_height*0.7])\n                rotate([0, side*20, -30])\n                    difference() {\n                        // Main wing membrane\n                        scale([1, wing_width/wing_span, 1])\n                            sphere(r=wing_span/2);\n                        \n                        // Cut wing shape\n                        translate([wing_span/4, 0, 0])\n                            cube([wing_span/2, wing_width+2, wing_width+2], center=true);\n                        \n                        // Feather details\n                        for(f = [1:feather_count]) {\n                            rotate([0, 0, f*15-30])\n                                translate([wing_span/4, 0, 0])\n                                    cube([wing_span/3, 1, wing_width+2], center=true);\n                        }\n                    }\n        }\n    }\n}\n\nmodule tail() {\n    color([0.75, 0.65, 0.9]) {\n        // Spiral tail with decreasing segments\n        for(i = [0:tail_segments-1]) {\n            rotate([0, 0, i*60])\n                translate([0, -i*4, -i*5])\n                    rotate([i*10, 0, 0])\n                        cylinder(h=tail_length/tail_segments, \n                                r1=4-i*0.5, \n                                r2=3.5-i*0.5);\n        }\n        \n        // Tail tip - magical orb\n        color([0.5, 0.7, 1.0, 0.9])\n            translate([0, -tail_length-5, -tail_length/2])\n                sphere(r=3);\n    }\n}\n\nmodule legs() {\n    color([0.8, 0.7, 0.9]) {\n        for(side = [-1, 1]) {\n            // Front leg\n            translate([side*5, 0, 0])\n                rotate([0, side*10, 0])\n                    cylinder(h=12, r1=2, r2=1.5);\n            \n            // Rear leg\n            translate([side*4, -8, 0])\n                rotate([0, side*15, 0])\n                    cylinder(h=10, r1=2.2, r2=1.8);\n        }\n    }\n}\n\nmodule horns() {\n    color([0.9, 0.85, 1.0]) {\n        // Curved horns\n        for(side = [-1, 1]) {\n            translate([side*2, -2, body_height + neck_length + head_size])\n                rotate([0, side*30, 0])\n                    rotate([0, 0, side*45])\n                        cylinder(h=6, r1=1.5, r2=0.5);\n        }\n    }\n}\n\nmodule wind_spirals() {\n    color([0.6, 0.8, 1.0, 0.3]) {\n        // Ethereal wind currents around the body\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([body_radius+8, 0, body_height/2])\n                    rotate_extrude(angle=360, $fn=20)\n                        translate([2, 0, 0])\n                            circle(r=1);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    head();\n    wings();\n    tail();\n    legs();\n    horns();\n    wind_spirals();\n}",
    "renders": true
  },
  {
    "mythical_creature": "zephyrwhirl",
    "openscad_code": "// Zephyrwhirl - Wind Elemental Dragon\n// A serpentine dragon with crystalline wings and swirling wind patterns\n\n// Overall dimensions: 80mm length, 40mm wingspan\n\n$fn = 32;\n\n// Main module\nmodule zephyrwhirl() {\n    color(\"LightBlue\") {\n        union() {\n            // Body - serpentine form\n            body();\n            \n            // Wings - crystalline formations\n            wings();\n            \n            // Head with wind horns\n            head();\n            \n            // Tail with spiral fins\n            tail();\n            \n            // Wind effect elements\n            wind_swirls();\n        }\n    }\n}\n\n// Serpentine body\nmodule body() {\n    // Create curved body using hull of spheres\n    for(i = [0:10]) {\n        rotate([0, i*6, 0]) \n        translate([i*6, 0, sin(i*30)*3]) \n        sphere(d=8 - i*0.3);\n    }\n}\n\n// Crystalline wings\nmodule wings() {\n    // Left wing\n    translate([-5, 0, 8]) rotate([0, 10, -20]) \n    wing();\n    \n    // Right wing\n    translate([-5, 0, 8]) mirror([0,1,0]) rotate([0, 10, 20]) \n    wing();\n}\n\nmodule wing() {\n    difference() {\n        // Main wing blade\n        scale([1, 2.5, 0.3]) \n        rotate([0, 0, 30]) \n        cylinder(h=15, d1=12, d2=3);\n        \n        // Cut crystal facets\n        for(i = [1:3]) {\n            translate([i*2, i*3, -1]) \n            rotate([0, 0, i*25]) \n            cube([10, 2, 3], center=true);\n        }\n    }\n}\n\n// Dragon head\nmodule head() {\n    translate([-8, 0, 12]) rotate([0, 30, 0]) {\n        // Main head shape\n        scale([1.2, 0.8, 0.8]) sphere(d=10);\n        \n        // Snout\n        translate([5, 0, -2]) \n        scale([1.5, 0.6, 0.6]) sphere(d=6);\n        \n        // Wind horns - curved\n        for(side = [-1, 1]) {\n            translate([2, side*3, 3]) rotate([0, 0, side*30]) \n            rotate_extrude(angle=90) \n            translate([0, 0, 0]) \n            polygon(points=[[0,0],[2,0],[1,5],[0,5]]);\n        }\n        \n        // Eyes\n        color(\"DeepSkyBlue\") {\n            translate([3, 2.5, 1]) sphere(d=1.5);\n            translate([3, -2.5, 1]) sphere(d=1.5);\n        }\n    }\n}\n\n// Spiral tail\nmodule tail() {\n    for(i = [11:20]) {\n        rotate([0, i*8, i*15]) \n        translate([i*5, 0, sin(i*45)*2]) {\n            sphere(d=7 - (i-10)*0.5);\n            \n            // Tail fins\n            if(i % 3 == 0) {\n                rotate([0, 0, 90]) \n                scale([0.3, 1.5, 1]) \n                translate([0, 4, 0]) \n                cylinder(h=6, d1=4, d2=1);\n            }\n        }\n    }\n}\n\n// Wind swirl effects\nmodule wind_swirls() {\n    color(\"Azure\") {\n        for(i = [0:5]) {\n            rotate([0, i*60, 0]) {\n                translate([15, 0, 8]) \n                rotate_extrude(angle=360, $fn=16) \n                translate([8 + sin(i*30)*2, 0, 0]) \n                circle(r=0.8);\n            }\n        }\n    }\n}\n\n// Generate the creature\nzephyrwhirl();",
    "renders": true
  },
  {
    "mythical_creature": "amberglow",
    "openscad_code": "// Amberglow Dragon - Realistic Medium Complexity\n// A mystical dragon with glowing amber accents and crystalline wings\n\n// Main color scheme\ncolor_amber = [255/255, 191/255, 0/255];\ncolor_dark = [20/255, 20/255, 20/255];\ncolor_glow = [255/255, 220/255, 100/255];\n\n// Overall scale\nscale_factor = 1.5;\n\nmodule dragon_body() {\n    color(color_dark) {\n        // Main torso\n        translate([0, 0, 15])\n            scale([1.2, 0.8, 1.5])\n            sphere(10);\n        \n        // Chest segment\n        translate([0, 0, 5])\n            scale([1.6, 1, 1.2])\n            sphere(8);\n        \n        // Lower body\n        translate([0, 0, 25])\n            scale([0.8, 0.6, 1.2])\n            sphere(8);\n    }\n}\n\nmodule dragon_head() {\n    color(color_dark) {\n        // Main head\n        translate([-20, 0, 20])\n            rotate([0, -10, 0])\n            scale([1.5, 1, 1.2])\n            sphere(8);\n        \n        // Snout\n        translate([-28, 0, 20])\n            scale([0.8, 0.6, 0.6])\n            sphere(6);\n        \n        // Jaw\n        translate([-28, 0, 16])\n            scale([0.7, 0.5, 0.3])\n            sphere(5);\n    }\n    \n    // Amber eye glow\n    color(color_glow) {\n        translate([-26, -4, 22])\n            sphere(2);\n        translate([-26, 4, 22])\n            sphere(2);\n    }\n    \n    // Amber horns\n    color(color_amber) {\n        for(i = [-1, 1]) {\n            translate([-18, i*5, 28])\n                rotate([0, i*15, 0])\n                cylinder(6, 1.5, 0.5);\n        }\n    }\n}\n\nmodule dragon_wings() {\n    color(color_amber, 0.7) {\n        // Left wing\n        translate([0, -15, 25]) {\n            rotate([0, 0, -20])\n            scale([1, 0.1, 1])\n            difference() {\n                // Main wing membrane\n                scale([25, 1, 20])\n                sphere(1);\n                \n                // Wing holes for membrane effect\n                for(i = [1:4]) {\n                    translate([i*4, 0, i*3])\n                        scale([2, 1, 1.5])\n                        sphere(1);\n                }\n            }\n            \n            // Wing bones\n            for(i = [1:3]) {\n                rotate([0, 0, i*30])\n                translate([i*6, 0, i*3])\n                    cylinder(25-i*3, 1, 0.5);\n            }\n        }\n        \n        // Right wing - mirrored\n        mirror([0, 1, 0])\n        translate([0, -15, 25]) {\n            rotate([0, 0, -20])\n            scale([1, 0.1, 1])\n            difference() {\n                scale([25, 1, 20])\n                sphere(1);\n                \n                for(i = [1:4]) {\n                    translate([i*4, 0, i*3])\n                        scale([2, 1, 1.5])\n                        sphere(1);\n                }\n            }\n            \n            for(i = [1:3]) {\n                rotate([0, 0, i*30])\n                translate([i*6, 0, i*3])\n                    cylinder(25-i*3, 1, 0.5);\n            }\n        }\n    }\n}\n\nmodule dragon_legs() {\n    color(color_dark) {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([-5, side*8, 10]) {\n                // Upper leg\n                rotate([0, side*15, 0])\n                cylinder(8, 2.5, 2);\n                \n                // Lower leg\n                translate([0, 0, -8])\n                    rotate([0, side*30, 0])\n                    cylinder(6, 2, 1.5);\n                \n                // Foot\n                translate([0, 0, -14])\n                    scale([1.2, 1, 0.5])\n                    sphere(2.5);\n            }\n        }\n        \n        // Hind legs\n        for(side = [-1, 1]) {\n            translate([8, side*6, 8]) {\n                // Upper leg\n                rotate([0, side*(-20), 0])\n                cylinder(10, 3, 2.5);\n                \n                // Lower leg\n                translate([0, 0, -10])\n                    rotate([0, side*(-35), 0])\n                    cylinder(8, 2.5, 2);\n                \n                // Foot\n                translate([0, 0, -18])\n                    scale([1.5, 1.2, 0.6])\n                    sphere(3);\n            }\n        }\n    }\n}\n\nmodule dragon_tail() {\n    color(color_dark) {\n        // Tail segments getting smaller\n        for(i = [0:5]) {\n            translate([i*4 + 8, 0, 20 - i*1.5])\n                scale([1 - i*0.15, 1 - i*0.15, 1 - i*0.1])\n                sphere(8 - i*1.2);\n        }\n    }\n    \n    // Amber spikes along tail\n    color(color_amber) {\n        for(i = [0:3]) {\n            translate([i*5 + 10, 0, 25 - i*1.5])\n                rotate([0, 0, 180])\n                cylinder(3, 1, 0);\n        }\n    }\n}\n\nmodule amberglow_crystal() {\n    color(color_glow, 0.8) {\n        // Central amber crystal\n        translate([-5, 0, 35])\n            rotate([0, 45, 45])\n            scale([1, 1, 1.5])\n            sphere(5);\n        \n        // Crystal shards\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([0, 6, 35])\n                rotate([45, 0, 0])\n                scale([0.3, 0.3, 1])\n                cylinder(8, 2, 0);\n        }\n    }\n}\n\n// Assemble the dragon\nscale([scale_factor, scale_factor, scale_factor]) {\n    dragon_body();\n    dragon_head();\n    dragon_wings();\n    dragon_legs();\n    dragon_tail();\n    amberglow_crystal();\n}",
    "renders": true
  },
  {
    "mythical_creature": "briarglow",
    "openscad_code": "// Briarglow - A mystical forest dragon with bioluminescent thorns\n// Wings fold for 3D printing, no overhangs, 75mm tall\n\n$fn = 24;\n\n// Main color scheme\ncolor(\"darkolivegreen\") union() {\n    \n    // Head module\n    module head() {\n        // Skull base\n        translate([0, 0, 54]) union() {\n            // Snout\n            cube([8, 6, 12], center=true);\n            // Main head\n            translate([0, 0, 6]) sphere(6);\n            // Horns - curved back\n            translate([4, 0, 8]) rotate([0, 30, 0]) cylinder(8, 2, 1);\n            translate([-4, 0, 8]) rotate([0, -30, 0]) cylinder(8, 2, 1);\n            \n            // Eyes - glowing\n            color(\"lime\") union() {\n                translate([3, 2, 6]) sphere(1);\n                translate([-3, 2, 6]) sphere(1);\n            }\n            \n            // Thorn scales along snout\n            for(i = [0:2]) {\n                translate([0, -3, 50 + i*3]) rotate([0, 0, 0]) \n                    cylinder(2, 0.5, 0);\n            }\n        }\n    }\n    \n    // Neck\n    translate([0, 0, 42]) cylinder(12, 3, 4);\n    \n    // Body\n    translate([0, 0, 25]) union() {\n        // Torso\n        scale([1.2, 0.8, 1]) sphere(10);\n        \n        // Thorn ridge along spine\n        for(i = [0:5]) {\n            translate([0, 0, 15 - i*3]) \n                rotate([0, 0, 0]) cylinder(2, 0.8, 0);\n        }\n        \n        // Wings - folded against body for printing\n        module wing() {\n            // Wing base\n            translate([0, -8, 5]) rotate([0, 0, 0]) \n                cube([20, 2, 12], center=true);\n            \n            // Wing membrane segments\n            for(i = [0:3]) {\n                translate([5 + i*4, -8, 5]) \n                    cube([2, 0.5, 10 - i*2], center=true);\n            }\n            \n            // Glowing wing veins\n            color(\"forestgreen\") \n                translate([10, -7.5, 5]) rotate([0, 90, 0]) \n                    cylinder(8, 0.3, 0.3);\n        }\n        \n        // Left wing\n        translate([10, 0, 0]) wing();\n        \n        // Right wing (mirrored)\n        mirror([1, 0, 0]) translate([10, 0, 0]) wing();\n    }\n    \n    // Tail\n    translate([0, 0, 10]) {\n        for(i = [0:4]) {\n            translate([0, 0, -i*5]) \n                scale([1 - i*0.15, 1 - i*0.15, 1]) \n                sphere(4 + i*0.5);\n            \n            // Glowing tail thorns\n            if(i % 2 == 0) {\n                color(\"lime\") \n                    translate([0, 3, -i*5]) \n                    cylinder(1.5, 0.5, 0);\n            }\n        }\n    }\n    \n    // Legs\n    module leg() {\n        // Upper leg\n        translate([0, 0, 0]) cylinder(8, 2, 1.5);\n        \n        // Lower leg\n        translate([0, 0, -8]) rotate([30, 0, 0]) \n            cylinder(8, 1.5, 1);\n        \n        // Foot\n        translate([0, 0, -16]) rotate([60, 0, 0]) \n            cube([3, 2, 1], center=true);\n    }\n    \n    // Front legs\n    translate([5, 0, 20]) leg();\n    translate([-5, 0, 20]) leg();\n    \n    // Back legs\n    translate([4, 0, 10]) leg();\n    translate([-4, 0, 10]) leg();\n    \n    // Bioluminescent chest pattern\n    color(\"lime\") \n        translate([0, 5, 25]) \n        for(i = [0:2]) {\n            translate([i*2 - 2, 0, 0]) \n                sphere(0.8);\n            translate([i*2 - 2, 0, -2]) \n                sphere(0.8);\n        }\n}\n\n// Final positioning for printing\nrotate([0, 180, 0]) translate([0, 0, 0]) head();",
    "renders": true
  },
  {
    "mythical_creature": "cinderglow",
    "openscad_code": "// CinderGlow - A mythical phoenix-like creature born from embers\n// Wings glow with internal fire, ash-covered body with ember details\n\n// Main body parameters\nbody_len = 40;\nbody_wid = 25;\nbody_hgt = 30;\n\nmodule cinderglow() {\n    color([0.2, 0.2, 0.2]) {\n        // Main torso - elongated oval shape\n        union() {\n            translate([0, 0, body_hgt/2])\n                scale([1, 0.7, 1.2])\n                sphere(d=body_wid, $fn=32);\n            \n            // Tail base extension\n            translate([-body_len/2 - 5, 0, body_hgt/2 - 5])\n                scale([2, 0.5, 0.3])\n                sphere(d=15, $fn=16);\n        }\n        \n        // Head with beak\n        union() {\n            translate([body_len/2 + 5, 0, body_hgt/2 + 5])\n                scale([0.8, 0.6, 0.8])\n                sphere(d=15, $fn=24);\n            \n            // Beak\n            translate([body_len/2 + 12, 0, body_hgt/2 + 5])\n                rotate([0, -20, 0])\n                scale([1.5, 0.3, 0.3])\n                cylinder(h=8, d1=5, d2=0, $fn=8);\n        }\n        \n        // Neck connector\n        translate([body_len/2, 0, body_hgt/2 + 2])\n            scale([0.5, 0.4, 0.5])\n            cylinder(h=10, d=8, $fn=16);\n    }\n    \n    // Wings - glowing ember membranes\n    color([0.9, 0.3, 0.1]) {\n        for (side = [-1, 1]) {\n            // Upper wing\n            translate([0, side*body_wid/2, body_hgt/2 + 10])\n                rotate([0, 0, side*20])\n                rotate([20, 0, 0])\n                scale([1.5, 0.1, 1])\n                difference() {\n                    sphere(d=30, $fn=16);\n                    translate([0, -5, -5])\n                        cube([40, 10, 10], center=true);\n                }\n            \n            // Lower wing segment\n            translate([-10, side*body_wid/2 + side*5, body_hgt/2 + 5])\n                rotate([0, 0, side*30])\n                rotate([10, 0, 0])\n                scale([1.2, 0.1, 0.8])\n                sphere(d=20, $fn=12);\n        }\n    }\n    \n    // Legs with talons\n    color([0.15, 0.15, 0.15]) {\n        for (side = [-1, 1]) {\n            translate([body_len/4, side*body_wid/3, 0])\n                rotate([10, 0, 0])\n                cylinder(h=15, d=3, $fn=8);\n            \n            // Talons\n            translate([body_len/4, side*body_wid/3, -7])\n                rotate([90, 0, 0])\n                union() {\n                    cylinder(h=5, d=2, $fn=6);\n                    for (angle = [0:120:240])\n                        rotate([0, 0, angle])\n                        translate([1.5, 0, -2])\n                            cylinder(h=3, d1=1.5, d2=0, $fn=4);\n                }\n        }\n    }\n    \n    // Tail feathers - ash-covered with glowing tips\n    color([0.25, 0.25, 0.25]) {\n        for (i = [0:30:150]) {\n            rotate([0, 0, 180-i])\n            translate([-body_len/2 - 10, 0, body_hgt/2 - 5])\n                rotate([10 + i/10, 0, 0])\n                scale([0.3, 0.1, 1])\n                cylinder(h=20, d=8, $fn=6);\n        }\n    }\n    \n    // Ember details on body\n    color([0.8, 0.2, 0]) {\n        for (pos = [[10, 5, 20], [-5, -8, 25], [15, -3, 15], [0, 7, 18]]) {\n            translate(pos)\n                sphere(d=2, $fn=8);\n        }\n    }\n    \n    // Horns/crown feathers\n    color([0.1, 0.1, 0.1]) {\n        for (angle = [0:60:300]) {\n            rotate([0, 0, angle])\n            translate([body_len/2 + 5, 0, body_hgt/2 + 12])\n                rotate([0, 90-angle/3, 0])\n                cylinder(h=8, d1=2, d2=1, $fn=6);\n        }\n    }\n}\n\n// Render the cinderglow\ncinderglow();",
    "renders": true
  },
  {
    "mythical_creature": "driftglow",
    "openscad_code": "// Driftglow - Mythical winged serpent with bioluminescent patterns\n// Realistic style, medium complexity, 3D printable\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    color(\"darkslateblue\")\n    union() {\n        // Torso\n        translate([0, 0, 15])\n        scale([1.2, 0.8, 1])\n        sphere(8);\n        \n        // Lower body\n        translate([0, 0, 5])\n        scale([0.8, 0.6, 1.2])\n        cylinder(10, 8, 6);\n        \n        // Tail\n        translate([0, 0, -5])\n        rotate([0, 10, 0])\n        scale([0.8, 0.8, 1])\n        cylinder(15, 6, 2);\n    }\n}\n\n// Head with serpentine features\nmodule head() {\n    color(\"midnightblue\")\n    union() {\n        // Main head shape\n        translate([0, 0, 28])\n        scale([0.8, 0.6, 1])\n        sphere(6);\n        \n        // Snout\n        translate([0, 0, 32])\n        scale([0.6, 0.4, 0.8])\n        sphere(4);\n        \n        // Horns\n        for(i = [-1, 1]) {\n            translate([i * 3, 0, 30])\n            rotate([0, i * 20, 0])\n            cylinder(8, 1.5, 0.5);\n        }\n    }\n}\n\n// Bioluminescent ridge\nmodule ridge() {\n    color(\"cyan\")\n    for(i = [0:5]) {\n        translate([0, 0, 20 + i * 3])\n        scale([0.3, 0.3, 0.3])\n        sphere(3);\n    }\n}\n\n// Wings with membrane structure\nmodule wings() {\n    color(\"darkslateblue\")\n    difference() {\n        // Main wing membrane\n        for(side = [-1, 1]) {\n            translate([side * 15, 0, 22])\n            rotate([0, side * 10, 0])\n            scale([side * 1, 0.1, 1])\n            cylinder(20, 12, 8);\n            \n            // Wing bones\n            for(i = [0:2]) {\n                translate([side * (15 + i * 6), 0, 22 + i * 3])\n                rotate([0, side * (10 + i * 5), 0])\n                scale([side * 1, 0.1, 1])\n                cylinder(15 - i * 3, 2, 1);\n            }\n        }\n        \n        // Wing cutouts\n        for(side = [-1, 1]) {\n            for(j = [0:1]) {\n                translate([side * (15 + j * 8), 0, 24 + j * 4])\n                scale([side * 0.8, 0.2, 0.8])\n                sphere(6 - j * 2);\n            }\n        }\n    }\n}\n\n// Legs with claws\nmodule legs() {\n    color(\"midnightblue\")\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([side * 4, 0, 12])\n        rotate([0, side * 10, 0])\n        cylinder(8, 2, 1.5);\n        \n        // Lower leg\n        translate([side * 5, 0, 4])\n        rotate([0, side * -10, 0])\n        cylinder(6, 1.5, 1);\n        \n        // Foot with claws\n        translate([side * 6, 0, 1])\n        scale([1.5, 0.5, 0.5])\n        sphere(2);\n        \n        // Claws\n        for(k = [-1, 0, 1]) {\n            translate([side * 6.5, k * 1, -0.5])\n            rotate([0, 0, 90])\n            cylinder(2, 0.5, 0.2);\n        }\n    }\n}\n\n// Bioluminescent spots\nmodule spots() {\n    color(\"deepskyblue\")\n    for(i = [0:8]) {\n        angle = i * 45;\n        radius = 8;\n        translate([cos(angle) * radius, sin(angle) * radius, 15 + sin(i * 2) * 3])\n        sphere(1);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    head();\n    ridge();\n    wings();\n    legs();\n    spots();\n}",
    "renders": true
  },
  {
    "mythical_creature": "frostglow",
    "openscad_code": "// Frostglow Dragon - Realistic Style, Medium Complexity\n// A crystalline ice dragon with glowing runes on its wings\n\n// Color definitions\nice_blue = [173, 216, 230];\nglow_blue = [0, 191, 255];\nwhite = [255, 255, 255];\n\n// Overall scale factor\nscale_factor = 0.8;\n\n// Main dragon body\nmodule frostglow_dragon() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Central body\n            color(ice_blue)\n            translate([0, 0, 15])\n            scale([1.2, 0.8, 1.5])\n            sphere(8, $fn=32);\n            \n            // Head\n            color(ice_blue)\n            translate([12, 0, 18])\n            scale([1.5, 1.2, 1.3])\n            sphere(6, $fn=32);\n            \n            // Snout\n            color(ice_blue)\n            translate([18, 0, 18])\n            scale([1, 0.7, 0.8])\n            sphere(4, $fn=32);\n            \n            // Horns\n            for(i = [-1, 1]) {\n                color(white)\n                translate([10, i*3, 24])\n                rotate([0, 30*i, -20*i])\n                scale([0.3, 0.3, 1])\n                cylinder(h=8, r1=2, r2=1, $fn=8);\n            }\n            \n            // Neck\n            color(ice_blue)\n            translate([8, 0, 18])\n            scale([0.8, 0.8, 1.2])\n            rotate([0, 15, 0])\n            cylinder(h=8, r1=4, r2=3.5, $fn=16);\n            \n            // Tail\n            color(ice_blue)\n            for(i = [0:8]) {\n                translate([-i*3 - 5, 0, 15 - i*1.5])\n                scale([1 - i*0.08, 1 - i*0.08, 0.8])\n                sphere(5 - i*0.3, $fn=24);\n            }\n            \n            // Legs\n            for(side = [-1, 1]) {\n                color(ice_blue)\n                translate([3, side*6, 8])\n                rotate([0, 0, -30*side])\n                scale([0.4, 0.4, 1])\n                cylinder(h=8, r1=3, r2=2.5, $fn=8);\n                \n                color(ice_blue)\n                translate([3, side*8, 3])\n                scale([0.8, 0.5, 0.5])\n                sphere(3, $fn=12);\n            }\n            \n            // Wings\n            for(side = [-1, 1]) {\n                color(ice_blue)\n                translate([0, side*8, 20])\n                rotate([0, 0, 45*side])\n                scale([1, 0.5, 0.1])\n                sphere(10, $fn=4);\n                \n                // Wing membrane supports\n                for(j = [0:3]) {\n                    color(white)\n                    translate([j*2 - 5, side*(8 + j*2), 20 - j*1.5])\n                    rotate([0, 30 - j*15, 45*side])\n                    cylinder(h=12 - j*2, r=0.5, $fn=6);\n                }\n                \n                // Glowing runes on wings\n                for(k = [0:5]) {\n                    color(glow_blue)\n                    translate([-3 + k*2, side*(10 + sin(k*60)*2), 19.5])\n                    scale([0.3, 0.3, 0.2])\n                    sphere(1, $fn=6);\n                }\n            }\n            \n            // Eyes\n            for(side = [-1, 1]) {\n                color(glow_blue)\n                translate([15, side*2.5, 20])\n                scale([0.8, 0.3, 0.3])\n                sphere(1.5, $fn=8);\n            }\n            \n            // Spine crystals\n            for(i = [0:6]) {\n                color(white)\n                translate([-i*3, 0, 20 + i*0.5])\n                rotate([0, 0, 45])\n                scale([0.3, 0.3, 1])\n                cube([2, 2, 3], center=true);\n            }\n        }\n    }\n}\n\n// Create the dragon\nfrostglow_dragon();",
    "renders": true
  },
  {
    "mythical_creature": "glimmerglow",
    "openscad_code": "// Glimmerglow - A radiant moth-like mythical creature with crystalline wings\n// Size: ~80mm wingspan, designed for 3D printing\n\n$fn=32;\n\n// Main body colors\nbody_color = \"DarkSlateBlue\";\nwing_color = \"MediumPurple\";\nglow_color = \"Gold\";\n\n// Body module - central thorax and abdomen\nmodule body() {\n    color(body_color)\n    union() {\n        // Thorax - main body segment\n        translate([0, 0, 8])\n            scale([1, 1.2, 1.5])\n            sphere(6);\n        \n        // Abdomen - tapered rear section\n        translate([0, 0, 2])\n            cylinder(h=10, r1=5, r2=3);\n        \n        // Head with eye sockets\n        translate([0, 0, 15])\n            sphere(4);\n    }\n}\n\n// Crystalline wing with realistic venation\nmodule wing() {\n    color(wing_color)\n    difference() {\n        // Main wing shape\n        translate([0, 0, 0])\n            scale([1, 0.3, 1])\n            sphere(25);\n        \n        // Wing cutouts for realistic appearance\n        for(i = [0:2]) {\n            rotate([0, 0, i * 45 + 15])\n                translate([8, 0, 5])\n                    scale([0.5, 1, 0.3])\n                    sphere(10);\n        }\n        \n        // Vein cutouts\n        for(i = [0:3]) {\n            rotate([0, 0, i * 30 - 30])\n                translate([12, 0, 0])\n                    scale([0.1, 0.05, 0.01])\n                    cube([20, 2, 1]);\n        }\n    }\n    \n    // Glowing spots on wings\n    color(glow_color)\n    for(pos = [[5, 8, 2], [10, 12, 1], [15, 5, 2]]) {\n        translate(pos)\n            sphere(1.5);\n    }\n}\n\n// Antennae with feathery feelers\nmodule antennae() {\n    color(body_color)\n    union() {\n        // Left antenna\n        translate([-2, 0, 17])\n            rotate([30, 0, -30])\n            cylinder(h=8, r=0.5);\n        \n        // Right antenna  \n        translate([2, 0, 17])\n            rotate([30, 0, 30])\n            cylinder(h=8, r=0.5);\n        \n        // Feathery tips\n        for(i = [0:3]) {\n            translate([-2 - i*0.5, 0, 17 + 8 + i*0.5])\n                rotate([0, 0, -45])\n                scale([0.8, 0.1, 0.1])\n                cube([2, 0.5, 0.5]);\n                \n            translate([2 + i*0.5, 0, 17 + 8 + i*0.5])\n                rotate([0, 0, 45])\n                scale([0.8, 0.1, 0.1])\n                cube([2, 0.5, 0.5]);\n        }\n    }\n}\n\n// Legs - six jointed legs\nmodule legs() {\n    color(body_color)\n    for(side = [-1, 1]) {\n        for(pos = [0, 1, 2]) {\n            translate([side * 3, 0, 10 - pos * 3])\n                rotate([90, 0, side * 20])\n                cylinder(h=6, r=0.4);\n            \n            // Feet\n            translate([side * 3, 0, 4 - pos * 3])\n                rotate([90, 0, side * 20])\n                sphere(0.6);\n        }\n    }\n}\n\n// Magical glow aura\nmodule glow_aura() {\n    color(glow_color, 0.3)\n    union() {\n        // Body glow\n        translate([0, 0, 8])\n            sphere(12);\n        \n        // Wing edge glow\n        for(angle = [0:30:330]) {\n            rotate([0, 0, angle])\n                translate([20, 0, 5])\n                    sphere(2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Central glow\n    glow_aura();\n    \n    // Body parts\n    body();\n    antennae();\n    legs();\n    \n    // Wings - positioned for printing\n    translate([0, 0, 10])\n        rotate([0, 90, 0])\n        wing();\n    \n    translate([0, 0, 10])\n        rotate([0, 90, 180])\n        wing();\n}",
    "renders": true
  },
  {
    "mythical_creature": "hollowglow",
    "openscad_code": "// Hollowglow Dragon - Mythical creature with luminous hollow body\n// Medium complexity realistic style\n\n$fn = 32;\n\n// Main body parameters\nbody_length = 60;\nbody_width = 25;\nbody_height = 30;\nwall_thickness = 2;\n\n// Wing parameters\nwing_span = 80;\nwing_depth = 35;\n\n// Head parameters\nhead_radius = 12;\n\n// Tail parameters\ntail_length = 45;\ntail_segments = 8;\n\n// Horn parameters\nhorn_length = 15;\nhorn_segments = 6;\n\n// Color definitions\nbody_color = [0.2, 0.3, 0.8, 0.6];\nglow_color = [0.8, 0.9, 1, 0.4];\naccent_color = [0.1, 0.1, 0.3];\n\n// Main dragon assembly\nmodule hollowglow_dragon() {\n    color(body_color) {\n        // Central body - hollow ellipsoid\n        difference() {\n            scale([1, 0.8, 0.6]) sphere(r=body_length/2);\n            scale([1, 0.8, 0.6]) sphere(r=body_length/2 - wall_thickness);\n        }\n        \n        // Head\n        translate([body_length/2 + 5, 0, body_height/4]) {\n            difference() {\n                sphere(r=head_radius);\n                sphere(r=head_radius - wall_thickness);\n            }\n            \n            // Snout\n            translate([head_radius, 0, -head_radius/3]) {\n                rotate([0, -10, 0]) {\n                    difference() {\n                        scale([1.5, 0.6, 0.6]) sphere(r=head_radius/2);\n                        scale([1.5, 0.6, 0.6]) sphere(r=head_radius/2 - wall_thickness);\n                    }\n                }\n            }\n            \n            // Horns\n            for(i = [-30, 30]) {\n                rotate([0, 0, i]) translate([0, head_radius * 0.7, head_radius * 0.8]) {\n                    rotate([0, 90 - i/2, 0]) horn();\n                }\n            }\n            \n            // Eyes - glowing hollow spheres\n            color(glow_color) {\n                for(side = [-1, 1]) {\n                    translate([head_radius * 0.7, side * head_radius * 0.6, head_radius * 0.2]) {\n                        difference() {\n                            sphere(r=2);\n                            sphere(r=1.5);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Wings\n        for(side = [-1, 1]) {\n            translate([body_length/4, side * body_width/2, body_height/3]) {\n                rotate([0, 0, side * 20]) {\n                    wing(side);\n                }\n            }\n        }\n        \n        // Tail segments\n        translate([-body_length/2, 0, -body_height/4]) {\n            tail();\n        }\n        \n        // Legs\n        for(side = [-1, 1]) {\n            translate([body_length/4, side * body_width/2, -body_height/2]) {\n                leg();\n            }\n        }\n        \n        // Luminous spine ridges\n        color(glow_color) {\n            for(pos = [-20:10:20]) {\n                translate([pos, 0, body_height/2 - 2]) {\n                    rotate([90, 0, 0]) {\n                        difference() {\n                            cylinder(h=5, r1=3, r2=1);\n                            cylinder(h=5, r1=2, r2=0);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wing module with membrane structure\nmodule wing(side) {\n    color(body_color) {\n        // Main wing arm\n        translate([0, 0, 0]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h=wing_depth/2, r=2);\n                    cylinder(h=wing_depth/2, r=1);\n                }\n            }\n        }\n        \n        // Wing membrane - hollow framework\n        for(i = [0:30:120]) {\n            rotate([0, 0, i * side]) {\n                translate([wing_depth/2, 0, 0]) {\n                    scale([1, 0.1, 0.8]) {\n                        difference() {\n                            sphere(r=wing_span/3 - i/3);\n                            sphere(r=wing_span/3 - i/3 - wall_thickness);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Wing struts\n        for(strut = [30, 60, 90]) {\n            rotate([0, 0, strut * side]) {\n                translate([wing_depth/4, 0, 0]) {\n                    rotate([0, 90, 0]) {\n                        difference() {\n                            cylinder(h=wing_span/3 - strut/3, r=1);\n                            cylinder(h=wing_span/3 - strut/3, r=0.5);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tail module with segmented structure\nmodule tail() {\n    color(body_color) {\n        for(i = [0:tail_segments-1]) {\n            translate([-i * tail_length/tail_segments, 0, 0]) {\n                rotate([0, 0, sin(i * 15) * 10]) {\n                    scale([1 - i * 0.08, 1 - i * 0.08, 1 - i * 0.08]) {\n                        difference() {\n                            sphere(r=body_width/3 - i);\n                            sphere(r=body_width/3 - i - wall_thickness);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Horn module with spiral texture\nmodule horn() {\n    color(accent_color) {\n        difference() {\n            cylinder(h=horn_length, r1=2, r2=0.5);\n            cylinder(h=horn_length, r1=1.5, r2=0);\n        }\n        \n        // Spiral ridges\n        for(i = [0:30:360]) {\n            rotate([0, 0, i]) {\n                translate([1.8, 0, i/360 * horn_length]) {\n                    difference() {\n                        cube([0.4, 0.2, horn_length/12]);\n                        cube([0.3, 0.1, horn_length/12]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leg module\nmodule leg() {\n    color(body_color) {\n        // Upper leg\n        difference() {\n            cylinder(h=body_height/2, r=3);\n            cylinder(h=body_height/2, r=2);\n        }\n        \n        // Lower leg\n        translate([0, 0, -body_height/2]) {\n            rotate([15, 0, 0]) {\n                difference() {\n                    cylinder(h=body_height/3, r=2.5);\n                    cylinder(h=body_height/3, r=1.5);\n                }\n            }\n        }\n        \n        // Foot\n        translate([0, 0, -body_height/2 - body_height/3]) {\n            difference() {\n                scale([1.5, 1, 0.5]) sphere(r=3);\n                scale([1.5, 1, 0.5]) sphere(r=2);\n            }\n            \n            // Claws\n            for(claw = [-1, 0, 1]) {\n                translate([claw * 2, 0, -1]) {\n                    rotate([0, 0, claw * 15]) {\n                        difference() {\n                            cylinder(h=3, r1=0.8, r2=0.3);\n                            cylinder(h=3, r1=0.5, r2=0);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Create the dragon\nhollowglow_dragon();",
    "renders": true
  },
  {
    "mythical_creature": "iceglow",
    "openscad_code": "// Iceglow Dragon - Realistic Medium Complexity\n// A crystalline ice dragon with glowing magical ice formations\n\n// Overall dimensions: ~80mm long, ~60mm tall, ~70mm wingspan\n// Designed for 3D printing with no overhangs >45 degrees\n\n// Main dragon body module\nmodule dragon_body() {\n    color(\"LightBlue\")\n    union() {\n        // Central torso\n        translate([0, 0, 15])\n            scale([1, 0.6, 0.8])\n            sphere(r=15, $fn=32);\n        \n        // Neck\n        translate([0, 0, 30])\n            rotate([0, 10, 0])\n            scale([0.5, 0.5, 1.2])\n            cylinder(r1=8, r2=6, h=20, $fn=32);\n        \n        // Head\n        translate([0, 0, 50])\n            rotate([0, 10, 0])\n            scale([0.8, 0.7, 1])\n            sphere(r=10, $fn=32);\n        \n        // Tail\n        translate([0, 0, 10])\n            rotate([0, -10, 0])\n            scale([1, 1, 2])\n            cylinder(r1=10, r2=3, h=30, $fn=32);\n    }\n}\n\n// Crystal ice spikes along back\nmodule ice_spikes() {\n    color(\"DeepSkyBlue\")\n    for(i = [0:3]) {\n        translate([-15 + i * 10, 0, 35 + i * 2])\n            rotate([0, -10, 0])\n            scale([1, 1, 1.5])\n            cylinder(r1=3, r2=1, h=8, $fn=6);\n    }\n}\n\n// Wings with crystalline structure\nmodule wings() {\n    color(\"LightCyan\")\n    union() {\n        // Left wing\n        translate([-10, 0, 35])\n            rotate([0, 0, -30])\n            scale([1, 0.1, 1])\n            sphere(r=25, $fn=32);\n        \n        // Right wing\n        translate([10, 0, 35])\n            rotate([0, 0, 30])\n            scale([1, 0.1, 1])\n            sphere(r=25, $fn=32);\n        \n        // Wing membrane supports\n        for(i = [0:2]) {\n            // Left wing ribs\n            translate([-25 + i * 8, 0, 35 + i * 5])\n                rotate([0, -20, -30])\n                cylinder(r=1, h=20, $fn=8);\n            \n            // Right wing ribs\n            translate([25 - i * 8, 0, 35 + i * 5])\n                rotate([0, -20, 30])\n                cylinder(r=1, h=20, $fn=8);\n        }\n    }\n}\n\n// Legs with clawed feet\nmodule legs() {\n    color(\"LightBlue\")\n    union() {\n        // Front left leg\n        translate([-8, 0, 20])\n            rotate([0, -30, 0])\n            cylinder(r=3, h=15, $fn=16);\n        \n        // Front left foot\n        translate([-10, 0, 5])\n            union() {\n                sphere(r=4, $fn=16);\n                for(i = [-1, 0, 1]) {\n                    translate([i * 2, 0, -2])\n                        rotate([0, 0, i * 15])\n                        cylinder(r=0.8, h=4, $fn=8);\n                }\n            }\n        \n        // Front right leg\n        translate([8, 0, 20])\n            rotate([0, 30, 0])\n            cylinder(r=3, h=15, $fn=16);\n        \n        // Front right foot\n        translate([10, 0, 5])\n            union() {\n                sphere(r=4, $fn=16);\n                for(i = [-1, 0, 1]) {\n                    translate([i * 2, 0, -2])\n                        rotate([0, 0, i * 15])\n                        cylinder(r=0.8, h=4, $fn=8);\n                }\n            }\n        \n        // Back left leg\n        translate([-5, 0, 10])\n            rotate([0, -30, 0])\n            cylinder(r=3.5, h=12, $fn=16);\n        \n        // Back left foot\n        translate([-7, 0, 0])\n            union() {\n                sphere(r=4.5, $fn=16);\n                for(i = [-1, 0, 1]) {\n                    translate([i * 2.2, 0, -2])\n                        rotate([0, 0, i * 15])\n                        cylinder(r=1, h=4, $fn=8);\n                }\n            }\n        \n        // Back right leg\n        translate([5, 0, 10])\n            rotate([0, 30, 0])\n            cylinder(r=3.5, h=12, $fn=16);\n        \n        // Back right foot\n        translate([7, 0, 0])\n            union() {\n                sphere(r=4.5, $fn=16);\n                for(i = [-1, 0, 1]) {\n                    translate([i * 2.2, 0, -2])\n                        rotate([0, 0, i * 15])\n                        cylinder(r=1, h=4, $fn=8);\n                }\n            }\n    }\n}\n\n// Horns with ice crystal texture\nmodule horns() {\n    color(\"Azure\")\n    union() {\n        // Left horn\n        translate([-5, 0, 58])\n            rotate([0, -20, -20])\n            cylinder(r1=3, r2=1, h=12, $fn=8);\n        \n        // Right horn\n        translate([5, 0, 58])\n            rotate([0, -20, 20])\n            cylinder(r1=3, r2=1, h=12, $fn=8);\n        \n        // Horn crystals\n        for(i = [0:2]) {\n            translate([-5 - i * 1, 0, 60 + i * 3])\n                rotate([0, -20 + i * 10, -20])\n                scale([0.3, 0.3, 1])\n                cylinder(r=2, h=3, $fn=6);\n            \n            translate([5 + i * 1, 0, 60 + i * 3])\n                rotate([0, -20 + i * 10, 20])\n                scale([0.3, 0.3, 1])\n                cylinder(r=2, h=3, $fn=6);\n        }\n    }\n}\n\n// Glowing ice crystals on body\nmodule glowing_crystals() {\n    color(\"Cyan\")\n    for(i = [0:5]) {\n        angle = i * 60;\n        radius = 12;\n        \n        translate([cos(angle) * radius, sin(angle) * radius, 25])\n            rotate([0, 0, angle])\n            scale([1, 1, 1.5])\n            sphere(r=2, $fn=6);\n    }\n    \n    // Larger chest crystal\n    translate([0, 5, 25])\n        scale([1.2, 1.2, 1.8])\n        sphere(r=3, $fn=8);\n}\n\n// Eyes with magical glow\nmodule eyes() {\n    color(\"White\")\n    union() {\n        // Left eye socket\n        translate([-3, -5, 52])\n            sphere(r=2, $fn=16);\n        \n        // Right eye socket\n        translate([3, -5, 52])\n            sphere(r=2, $fn=16);\n        \n        // Glowing pupils\n        color(\"Cyan\")\n        translate([-3, -6, 52])\n            sphere(r=1, $fn=8);\n        \n        translate([3, -6, 52])\n            sphere(r=1, $fn=8);\n    }\n}\n\n// Assemble the complete Iceglow Dragon\ntranslate([0, 0, 0])\n    union() {\n        dragon_body();\n        ice_spikes();\n        wings();\n        legs();\n        horns();\n        glowing_crystals();\n        eyes();\n    }",
    "renders": true
  },
  {
    "mythical_creature": "jadeglow",
    "openscad_code": "// Jadeglow - A mythical serpentine dragon of jade essence\n// Dimensions: ~80mm long, 30mm tall\n// Realistic style with medium complexity\n\n// Color definitions\njade_color = [0.2, 0.8, 0.4, 0.9];  // Translucent jade green\nglow_color = [0.5, 1.0, 0.6, 0.6];  // Soft inner glow\naccent_color = [0.1, 0.3, 0.2, 1.0]; // Darker jade accents\n\n// Main body module\nmodule jadeglow_body() {\n    union() {\n        // Head\n        translate([0, 0, 15]) {\n            color(jade_color) {\n                sphere(8, $fn=32);\n                \n                // Snout\n                translate([7, 0, -1]) {\n                    scale([1.5, 0.8, 0.8]) sphere(5, $fn=24);\n                }\n                \n                // Horns\n                for(i = [-1, 1]) {\n                    translate([3, 4*i, 6]) {\n                        rotate([0, 15*i, 0]) {\n                            scale([0.3, 0.3, 1]) cylinder(h=8, r1=2, r2=0.5, $fn=8);\n                        }\n                    }\n                }\n            }\n            \n            // Eyes\n            for(i = [-1, 1]) {\n                translate([5, 3*i, 2]) {\n                    color(glow_color) sphere(1.5, $fn=16);\n                }\n            }\n        }\n        \n        // Neck\n        translate([-5, 0, 12]) {\n            color(jade_color) {\n                rotate([0, 10, 0]) {\n                    cylinder(h=10, r1=6, r2=4, $fn=24);\n                }\n            }\n        }\n        \n        // Torso segments\n        for(i = [0:3]) {\n            translate([-15 - i*10, 0, 12 - i*2]) {\n                color(jade_color) {\n                    rotate([0, -5*i, 0]) {\n                        sphere(6 - i*0.5, $fn=24);\n                    }\n                }\n                \n                // Scales\n                for(j = [0:5]) {\n                    rotate([0, 0, j*60]) {\n                        translate([0, 4, 0]) {\n                            color(accent_color) {\n                                scale([1, 0.5, 0.3]) sphere(1, $fn=6);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Tail\n        for(i = [0:5]) {\n            translate([-45 - i*6, 0, 8 - i*1.5]) {\n                color(jade_color) {\n                    scale([1 - i*0.1, 1 - i*0.1, 1 - i*0.1]) {\n                        sphere(5 - i*0.5, $fn=16);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wings module\nmodule jadeglow_wings() {\n    union() {\n        for(side = [-1, 1]) {\n            translate([-20, side*12, 18]) {\n                rotate([0, 0, side*20]) {\n                    color(jade_color) {\n                        // Main wing structure\n                        difference() {\n                            scale([1.5, 1, 0.1]) sphere(10, $fn=32);\n                            translate([8, 0, -1]) cube([20, 20, 2], center=true);\n                        }\n                        \n                        // Wing bones\n                        for(i = [0:2]) {\n                            rotate([0, 0, i*45*side]) {\n                                translate([5, 0, 0]) {\n                                    color(accent_color) {\n                                        scale([0.2, 0.2, 1]) cylinder(h=15, r1=1, r2=0.5, $fn=8);\n                                    }\n                                }\n                            }\n                        }\n                        \n                        // Wing membrane details\n                        for(i = [0:3]) {\n                            rotate([0, 0, i*30*side]) {\n                                translate([8, side*3*i, 0]) {\n                                    color(glow_color) {\n                                        sphere(1, $fn=8);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Legs module\nmodule jadeglow_legs() {\n    union() {\n        for(side = [-1, 1]) {\n            translate([-25, side*8, 5]) {\n                color(jade_color) {\n                    // Upper leg\n                    rotate([0, 0, side*30]) {\n                        cylinder(h=10, r1=2, r2=1.5, $fn=12);\n                    }\n                    \n                    // Lower leg\n                    translate([-8, side*5, -5]) {\n                        rotate([30, 0, side*20]) {\n                            cylinder(h=8, r1=1.5, r2=1, $fn=12);\n                        }\n                    }\n                    \n                    // Foot\n                    translate([-12, side*7, -10]) {\n                        scale([1.5, 1, 0.5]) sphere(2, $fn=12);\n                        \n                        // Claws\n                        for(claw = [-1, 0, 1]) {\n                            translate([1, claw*0.8, -1]) {\n                                color(accent_color) {\n                                    rotate([-30, 0, 0]) {\n                                        cylinder(h=3, r1=0.5, r2=0.2, $fn=6);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Magical glow orbs along body\nmodule glow_orbs() {\n    for(i = [0:7]) {\n        translate([-10 - i*7, 0, 12 - abs(i-3.5)*1.5]) {\n            color(glow_color) {\n                sphere(1.5, $fn=16);\n            }\n        }\n    }\n}\n\n// Main assembly\nscale(0.8) {\n    union() {\n        jadeglow_body();\n        jadeglow_wings();\n        jadeglow_legs();\n        glow_orbs();\n    }\n}",
    "renders": true
  },
  {
    "mythical_creature": "kindleglow",
    "openscad_code": "// Kindleglow - A mythical fire spirit phoenix-dragon hybrid\n// Medium complexity realistic style with 3D printable features\n\n$fa = 2;\n$fs = 0.5;\n\n// Overall dimensions (mm)\ncreature_length = 80;\ncreature_height = 45;\ncreature_width = 35;\n\n// Wing parameters\nwing_span = 60;\nwing_thickness = 2;\n\n// Main body module\nmodule kindleglow_body() {\n    color(\"darkorange\") {\n        // Main torso - elongated egg shape\n        scale([1.2, 0.8, 0.6]) sphere(d = 30);\n        \n        // Chest ridge\n        translate([5, 0, 8]) rotate([0, 90, 0]) \n            cylinder(h = 15, r1 = 3, r2 = 1);\n        \n        // Hip section\n        translate([-15, 0, -2]) scale([0.8, 0.7, 0.5]) sphere(d = 25);\n    }\n}\n\n// Head with phoenix features\nmodule kindleglow_head() {\n    color(\"orangered\") {\n        // Main head shape\n        translate([20, 0, 12]) rotate([0, -10, 0]) \n            scale([1.3, 0.9, 0.8]) sphere(d = 18);\n        \n        // Beak-like snout\n        translate([30, 0, 12]) rotate([0, -20, 0])\n            cylinder(h = 12, r1 = 4, r2 = 0);\n        \n        // Eye sockets\n        translate([25, 5, 14]) sphere(d = 3);\n        translate([25, -5, 14]) sphere(d = 3);\n        \n        // Phoenix crest\n        for(i = [0:30:150]) {\n            rotate([0, 0, i]) translate([15, 0, 22])\n                cylinder(h = 8, r1 = 0.5, r2 = 2);\n        }\n    }\n}\n\n// Dragon wings with membrane structure\nmodule kindleglow_wing(left = true) {\n    color(\"orange\") {\n        // Wing arm\n        mirror([left ? 0 : 1, 0, 0]) {\n            translate([0, 15, 10]) rotate([0, -20, -30]) {\n                // Main wing bone\n                cylinder(h = 25, r1 = 2, r2 = 1);\n                \n                // Wing membrane segments\n                for(i = [0:2]) {\n                    rotate([0, i * 15, 0]) {\n                        translate([0, 0, -i * 3]) {\n                            difference() {\n                                // Membrane\n                                translate([10, 0, 0]) \n                                    rotate([0, 90, 0])\n                                    scale([0.8, 0.3, 1]) \n                                    sphere(d = wing_span - i * 10);\n                                \n                                // Cut holes for realistic membrane\n                                for(j = [1:3]) {\n                                    translate([5, j * 3 - 6, 0])\n                                        cylinder(h = 10, r = 0.8);\n                                }\n                            }\n                        }\n                    }\n                }\n                \n                // Wing claw\n                translate([25, 0, 0])\n                    rotate([0, 90, 0])\n                    cylinder(h = 5, r1 = 1.5, r2 = 0.5);\n            }\n        }\n    }\n}\n\n// Tail with flame segments\nmodule kindleglow_tail() {\n    color(\"red\") {\n        // Tail segments\n        for(i = [0:4]) {\n            translate([-20 - i * 8, 0, -5 + i * 2]) {\n                scale([1 - i * 0.15, 1 - i * 0.15, 1 - i * 0.1])\n                    sphere(d = 12 - i * 2);\n            }\n        }\n        \n        // Flame trail effect\n        color(\"yellow\") {\n            for(i = [0:3]) {\n                rotate([0, 0, i * 120])\n                    translate([-45, 0, 5])\n                    scale([0.3, 0.3, 1.5])\n                    sphere(d = 8);\n            }\n        }\n    }\n}\n\n// Legs with claws\nmodule kindleglow_legs() {\n    color(\"darkred\") {\n        // Front legs\n        for(side = [-1, 1]) {\n            translate([10, side * 8, -5]) {\n                // Upper leg\n                rotate([45, 0, side * 15])\n                    cylinder(h = 12, r1 = 2.5, r2 = 2);\n                \n                // Lower leg\n                translate([8, 0, -8]) rotate([90, 0, 0])\n                    cylinder(h = 10, r1 = 2, r2 = 1.5);\n                \n                // Foot\n                translate([8, 0, -13]) {\n                    scale([1.5, 0.8, 0.5]) sphere(d = 6);\n                    \n                    // Claws\n                    for(claw = [-1, 0, 1]) {\n                        translate([3, claw * 2, -1]) rotate([0, -30, 0])\n                            cylinder(h = 4, r1 = 1, r2 = 0.5);\n                    }\n                }\n            }\n        }\n        \n        // Rear legs\n        for(side = [-1, 1]) {\n            translate([-10, side * 6, -3]) {\n                rotate([30, 0, side * 20])\n                    cylinder(h = 10, r1 = 2.5, r2 = 2);\n                \n                translate([7, 0, -6]) rotate([90, 0, 0])\n                    cylinder(h = 8, r1 = 2, r2 = 1.5);\n                \n                translate([7, 0, -10]) {\n                    scale([1.3, 0.7, 0.4]) sphere(d = 5);\n                }\n            }\n        }\n    }\n}\n\n// Flame aura around body\nmodule kindleglow_flame_aura() {\n    color(\"gold\", 0.3) {\n        difference() {\n            scale([1.1, 1.1, 1.1]) sphere(d = 40);\n            sphere(d = 38);\n        }\n        \n        // Floating embers\n        for(i = [0:8]) {\n            rotate([i * 45, i * 20, 0])\n                translate([20, 0, 5 + sin(i * 45) * 5])\n                sphere(d = 1.5);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    kindleglow_body();\n    kindleglow_head();\n    kindleglow_wing(true);\n    kindleglow_wing(false);\n    kindleglow_tail();\n    kindleglow_legs();\n    kindleglow_flame_aura();\n}",
    "renders": true
  }
]