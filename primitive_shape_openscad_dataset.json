[
  {
    "primitive_shape": "triangle",
    "openscad_code": "module triangle_rounded(h = 30, r = 3, w = 100) {\n    // equilateral triangle with rounded corners\n    p = [\n        [0, w * sqrt(3)/3],           // top\n        [-w/2, -w * sqrt(3)/6],       // bottom left\n        [ w/2, -w * sqrt(3)/6]        // bottom right\n    ];\n\n    // offset inward then outward to round corners\n    linear_extrude(height = h)\n        offset(r = r)\n            offset(r = -r)\n                polygon(points = p);\n}\n\ntriangle_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "triangle_equilateral",
    "openscad_code": "module triangle_equilateral(h = 10, side = 60, r = 3) {\n    // 2D rounded equilateral triangle\n    a = side;\n    h_tri = sqrt(3)/2 * a;\n    x1 = -a/2;\n    y1 = -h_tri/3;\n    x2 = a/2;\n    y2 = -h_tri/3;\n    x3 = 0;\n    y3 = 2*h_tri/3;\n\n    // Offset points for rounded corners\n    offset = r * tan(30);\n    \n    triangle_pts = [\n        [x1 + offset, y1],\n        [x2 - offset, y1],\n        [x2, y1 + offset],\n        [x2 - offset/sqrt(3), y3 - offset],\n        [x3, y3 - offset],\n        [x1 + offset/sqrt(3), y3 - offset],\n        [x1, y1 + offset]\n    ];\n\n    linear_extrude(height = h)\n        polygon(points = triangle_pts);\n}\n\ntriangle_equilateral();",
    "renders": true
  },
  {
    "primitive_shape": "triangle_isosceles",
    "openscad_code": "module triangle_isosceles(base=80, height=60, thickness=10, radius=5) {\n    // 2D triangle with rounded corners\n    p = [\n        [-base/2, -height/3],\n        [0, height*2/3],\n        [base/2, -height/3]\n    ];\n    \n    // Offset for rounded corners then extrude\n    offset(r=radius)\n        polygon(p);\n    \n    linear_extrude(height=thickness, center=true)\n        offset(r=radius)\n            polygon(p);\n}\n\ntriangle_isosceles();",
    "renders": true
  },
  {
    "primitive_shape": "triangle_right",
    "openscad_code": "module triangle_right(h = 20, a = 60, b = 80, r = 5) {\n    // 2D right-triangle profile with rounded corner\n    offset(r = r) polygon([[0,0], [a,0], [0,b]]);\n    \n    // Extrude to 3D\n    linear_extrude(height = h, center = true)\n        offset(r = r) polygon([[0,0], [a,0], [0,b]]);\n}\n\n// Render\ntriangle_right();",
    "renders": true
  },
  {
    "primitive_shape": "triangle_acute",
    "openscad_code": "module triangle_acute(h = 20, r = 5, center = false) {\n    // Define an acute triangle (all angles < 90°)\n    pts = [\n        [0, 0],\n        [100, 0],\n        [70, 80]   // Acute top vertex\n    ];\n\n    // Rounded 2D outline\n    offset(r = r) polygon(pts);\n\n    // Extrude to 3D\n    linear_extrude(height = h, center = center, convexity = 10)\n        offset(r = -r) polygon(pts);\n}\n\ntriangle_acute();",
    "renders": true
  },
  {
    "primitive_shape": "triangle_obtuse",
    "openscad_code": "module triangle_obtuse(h = 20, round = 3) {\n    // obtuse triangle profile (base 90, height 60, obtuse angle ~120°)\n    pts = [\n        [0, 0],\n        [90, 0],\n        [15, 60]\n    ];\n\n    // 2D rounded triangle\n    offset(r = round) polygon(pts);\n\n    // extrude to 3D with rounded top edges\n    linear_extrude(height = h, center = true, convexity = 10)\n        offset(r = round) polygon(pts);\n}\n\ntriangle_obtuse();",
    "renders": true
  },
  {
    "primitive_shape": "triangle_3_4_5",
    "openscad_code": "module triangle_3_4_5(h = 20, r = 2) {\n    // 3-4-5 triangle points in XY plane\n    points = [[0, 0], [60, 0], [0, 80]];\n    \n    // Offset polygon for rounded edges\n    offset_polygon = offset(points, r);\n    \n    // Extrude with rounded top via offset\n    linear_extrude(height = h, convexity = 10)\n        offset_polygon;\n}\n\n// Helper module to create offset polygon with rounded corners\nmodule offset(points, r) {\n    // Create offset polygon by shrinking and expanding\n    offset1 = offset(r = -r, $fn = 16) polygon(points);\n    offset2 = offset(r = r, $fn = 16) offset1;\n    offset2;\n}\n\ntriangle_3_4_5();",
    "renders": true
  },
  {
    "primitive_shape": "triangle_scalene",
    "openscad_code": "module triangle_scalene(h = 20, r = 3) {\n    // scalene triangle points (base 80 mm, height 60 mm)\n    points = [\n        [0, 0],    // A\n        [80, 0],   // B\n        [25, 60]   // C\n    ];\n\n    // rounded extrusion using offset + minkowski\n    linear_extrude(height = h)\n        offset(r = r)\n            polygon(points = points);\n}\n\ntriangle_scalene();",
    "renders": true
  },
  {
    "primitive_shape": "triangle_inscribed",
    "openscad_code": "// triangle_inscribed.scad\n// Medium-complexity triangle with rounded vertices\n\nmodule triangle_inscribed(r=60, thickness=12, fillet=8) {\n    // equilateral triangle vertices inscribed in circle radius r\n    pts = [\n        [0, r],\n        [r*sin(120), -r*cos(120)],\n        [-r*sin(120), -r*cos(120)]\n    ];\n\n    // rounded corners via offset\n    offset_shape = offset(delta=fillet, $fn=20, $fa=2, $fs=0.5) polygon(pts);\n    \n    // extrude to 3D\n    linear_extrude(height=thickness, center=true)\n        offset_shape;\n}\n\ntriangle_inscribed();",
    "renders": true
  },
  {
    "primitive_shape": "triangle_rounded",
    "openscad_code": "// triangle_rounded.scad\n// rounded equilateral triangle prism, 100 mm side, 20 mm thick\n\nmodule triangle_rounded(height = 20, side = 100, r = 8) {\n    h = side * sqrt(3)/2;                 // triangle height\n    corner = [[0, 0], [r, 0], [0, r]];    // quarter-circle template\n    \n    points = [\n        [r, r],                           // bottom-left arc start\n        [side/2, r],                      // bottom edge\n        [side - r, r],                    // bottom-right arc start\n        for(i = [0:10:90]) [              // bottom-right corner arc\n            side - r + r*cos(i),\n            r + r*sin(i)\n        ],\n        [side - r, h - r],                // right edge\n        for(i = [90:10:180]) [            // top corner arc\n            side/2 + r*cos(i),\n            h - r + r*sin(i)\n        ],\n        [r, h - r],                       // left edge\n        for(i = [180:10:270]) [           // bottom-left corner arc\n            r + r*cos(i),\n            r + r*sin(i)\n        ]\n    ];\n    \n    linear_extrude(height = height, center = true)\n        polygon(points = points);\n}\n\ntriangle_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "square",
    "openscad_code": "// Square with rounded top edges\nmodule rounded_square(size = 80, height = 20, radius = 10) {\n    $fn = 32;\n    \n    // 2D profile of rounded-top square\n    profile = [\n        [-size/2, -size/2],\n        [-size/2, size/2 - radius],\n        [-size/2 + radius, size/2],\n        [size/2 - radius, size/2],\n        [size/2, size/2 - radius],\n        [size/2, -size/2]\n    ];\n    \n    linear_extrude(height = height) {\n        polygon(points = profile);\n    }\n}\n\nrounded_square();",
    "renders": true
  },
  {
    "primitive_shape": "square_small",
    "openscad_code": "module square_small(radius=2, size=80) {\n    // rounded square base profile\n    points = [\n        [0, radius],\n        [radius, 0],\n        [size-radius, 0],\n        [size, radius],\n        [size, size-radius],\n        [size-radius, size],\n        [radius, size],\n        [0, size-radius]\n    ];\n    \n    // simple rounded corner arcs\n    arc = [\n        for(i=[0:3]) each\n        let(a=i*90, n=5)\n        [size-radius + radius*cos(a+90/n), radius + radius*sin(a+90/n)],\n        for(i=[1:n-1]) [size-radius + radius*cos(a+90*i/n), radius + radius*sin(a+90*i/n)]\n    ];\n    \n    polygon(concat(points, arc));\n}\n\nlinear_extrude(height=20, center=true)\n    square_small();",
    "renders": true
  },
  {
    "primitive_shape": "square_large",
    "openscad_code": "module square_large_rounded() {\n    size = 100;\n    radius = 15;\n    height = 20;\n    \n    points = [\n        [radius, 0],\n        [size - radius, 0],\n        [size, radius],\n        [size, size - radius],\n        [size - radius, size],\n        [radius, size],\n        [0, size - radius],\n        [0, radius]\n    ];\n    \n    paths = [\n        [0, 1, 2, 3, 4, 5, 6, 7]\n    ];\n    \n    difference() {\n        linear_extrude(height = height, center = true)\n            offset(r = radius)\n                polygon(points = paths[0], paths = [paths[0]]);\n        \n        translate([0, 0, -height/2 - 1])\n            cube([size - 2*radius, size - 2*radius, height + 2], center = true);\n    }\n}\n\nsquare_large_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "square_unit",
    "openscad_code": "// Square with rounded edges\nmodule square_unit(size = 80, radius = 8, height = 12) {\n    // Define 2D rounded square profile\n    corner = [\n        for (a = [0:5:90]) [radius - radius*cos(a), radius - radius*sin(a)]\n    ];\n    \n    profile = [\n        [radius, 0],\n        [size - radius, 0],\n        each [for (p = corner) [size - p[1], p[0]]],\n        [size, size - radius],\n        each [for (p = corner) [size - p[0], size - p[1]]],\n        [radius, size],\n        each [for (p = corner) [p[1], size - p[0]]],\n        [0, radius],\n        each [for (p = corner) [p[0], p[1]]]\n    ];\n    \n    linear_extrude(height = height, center = true)\n        polygon(profile);\n}\n\nsquare_unit();",
    "renders": true
  },
  {
    "primitive_shape": "square_with_hole",
    "openscad_code": "module square_with_hole(size = 80, thickness = 12, fillet = 6, hole_d = 30) {\n    // Outer square with rounded corners\n    r = fillet;\n    s = size/2 - r;\n    outer = [\n        [-s, -s-r], [-s-r, -s], [-s-r,  s],\n        [-s,  s+r], [ s,  s+r], [ s+r,  s],\n        [ s+r, -s], [ s, -s-r]\n    ];\n    \n    difference() {\n        linear_extrude(height = thickness)\n            offset(r = r)\n                polygon(points = outer);\n        \n        // Centered cylindrical hole\n        translate([0, 0, -1])\n            cylinder(h = thickness + 2, d = hole_d, $fn = 32);\n    }\n}\n\nsquare_with_hole();",
    "renders": true
  },
  {
    "primitive_shape": "square_rounded",
    "openscad_code": "module square_rounded(size = 80, thickness = 10, radius = 8) {\n    // rounded square base\n    w = size / 2 - radius;\n    pts = [\n        [-w, -w],\n        [-w,  w],\n        [ w,  w],\n        [ w, -w]\n    ];\n    offset_pts = [\n        for (p = pts) let(a = atan2(p.y, p.x))\n            [p.x + radius * cos(a), p.y + radius * sin(a)]\n    ];\n    polygon(\n        concat(\n            for (i = [0:3])\n                let(a0 = 90 * i, a1 = 90 * (i + 1))\n                [for (a = [a0:2:a1]) [radius * cos(a), radius * sin(a)] + offset_pts[i]]\n        )\n    );\n}\n\nlinear_extrude(height = 10)\nsquare_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "square_rotated",
    "openscad_code": "module square_rotated(height = 20, side = 60, chamfer = 4, angle = 45) {\n    // 2D profile: square with 45° rotation and chamfered corners\n    rotate([0, 0, angle])\n        polygon(\n            points = [\n                [-side/2 + chamfer, -side/2],      // bottom-left\n                [ side/2 - chamfer, -side/2],      // bottom-right\n                [ side/2, -side/2 + chamfer],      // bottom-right chamfer\n                [ side/2,  side/2 - chamfer],      // top-right chamfer\n                [ side/2 - chamfer,  side/2],      // top-right\n                [-side/2 + chamfer,  side/2],      // top-left\n                [-side/2,  side/2 - chamfer],      // top-left chamfer\n                [-side/2, -side/2 + chamfer]       // bottom-left chamfer\n            ]\n        );\n\n    // Extrude to 3D\n    linear_extrude(height = height, center = true)\n        rotate([0, 0, angle])\n            polygon(\n                points = [\n                    [-side/2 + chamfer, -side/2],\n                    [ side/2 - chamfer, -side/2],\n                    [ side/2, -side/2 + chamfer],\n                    [ side/2,  side/2 - chamfer],\n                    [ side/2 - chamfer,  side/2],\n                    [-side/2 + chamfer,  side/2],\n                    [-side/2,  side/2 - chamfer],\n                    [-side/2, -side/2 + chamfer]\n                ]\n            );\n}\n\nsquare_rotated();",
    "renders": true
  },
  {
    "primitive_shape": "square_star_pattern",
    "openscad_code": "// square_star_pattern.scad\nmodule square_star_pattern(h = 8, r = 50) {\n    // Star with square tips\n    pts = [\n        [0, r],                // top\n        [0.35*r, 0.35*r],      // top-right square corner\n        [r, 0],                // right\n        [0.35*r, -0.35*r],     // bottom-right square corner\n        [0, -r],               // bottom\n        [-0.35*r, -0.35*r],    // bottom-left square corner\n        [-r, 0],               // left\n        [-0.35*r, 0.35*r]      // top-left square corner\n    ];\n    \n    linear_extrude(height = h, center = true)\n        polygon(points = pts);\n}\n\nsquare_star_pattern();",
    "renders": true
  },
  {
    "primitive_shape": "rectangle",
    "openscad_code": "// Rounded-edge rectangle plate\nmodule rounded_rectangle(x=100, y=60, r=8, h=5) {\n    // 2D outline with rounded corners\n    polygon(\n        points=[\n            [r,0], [x-r,0],           // bottom edge\n            [x,r], [x,y-r],           // right edge\n            [x-r,y], [r,y],           // top edge\n            [0,y-r], [0,r]            // left edge\n        ],\n        paths=[[\n            0,1,2,3,4,5,6,7           // single closed path\n        ]],\n        convexity=10\n    );\n    linear_extrude(height=h, convexity=10);\n}\n\nrounded_rectangle();",
    "renders": true
  },
  {
    "primitive_shape": "rectangle_golden",
    "openscad_code": "// rectangle_golden - golden-ratio rectangle with rounded corners\nmodule rectangle_golden(h = 8) {\n    phi = 1.6180339887;\n    w = 100;\n    d = w / phi;\n    r = 8;\n\n    // rounded-corner rectangle profile\n    points = [\n        [r, 0],\n        [w - r, 0],\n        [w, r],\n        [w, d - r],\n        [w - r, d],\n        [r, d],\n        [0, d - r],\n        [0, r]\n    ];\n    paths = [[0, 1, 2, 3, 4, 5, 6, 7]];\n\n    linear_extrude(height = h)\n        polygon(points = points, paths = paths);\n}\n\nrectangle_golden();",
    "renders": true
  },
  {
    "primitive_shape": "rectangle_2_1",
    "openscad_code": "module rectangle_2_1() {\n    w = 100;\n    h = 50;\n    r = 8;\n\n    // Rounded rectangle profile\n    points = [\n        [r, 0],\n        [w-r, 0],\n        [w, r],\n        [w, h-r],\n        [w-r, h],\n        [r, h],\n        [0, h-r],\n        [0, r]\n    ];\n\n    // Arc segments for rounded corners\n    corner = 8;\n    for (a = [0:90/corner:90-90/corner]) {\n        points = concat(points, [[w-r + r*cos(a), r + r*sin(a)]]);\n    }\n    for (a = [90:90/corner:180-90/corner]) {\n        points = concat(points, [[w-r + r*cos(a), h-r + r*sin(a)]]);\n    }\n    for (a = [180:90/corner:270-90/corner]) {\n        points = concat(points, [[r + r*cos(a), h-r + r*sin(a)]]);\n    }\n    for (a = [270:90/corner:360-90/corner]) {\n        points = concat(points, [[r + r*cos(a), r + r*sin(a)]]);\n    }\n\n    // Close polygon\n    points = concat(points, [[r, 0]]);\n\n    linear_extrude(height = 10)\n        polygon(points = points);\n}\n\nrectangle_2_1();",
    "renders": true
  },
  {
    "primitive_shape": "rectangle_3_1",
    "openscad_code": "module rectangle_3_1() {\n    // rounded rectangle 80x40 mm with 8 mm corners\n    corner_r = 8;\n    w = 80;\n    h = 40;\n    t = 10;\n    \n    points = [\n        [corner_r, 0],\n        [w - corner_r, 0],\n        [w, corner_r],\n        [w, h - corner_r],\n        [w - corner_r, h],\n        [corner_r, h],\n        [0, h - corner_r],\n        [0, corner_r]\n    ];\n    \n    linear_extrude(height = t)\n        offset(r = corner_r)\n            polygon(points = points);\n}\n\nrectangle_3_1();",
    "renders": true
  },
  {
    "primitive_shape": "rectangle_4_1",
    "openscad_code": "module rectangle_4_1() {\n    // rounded rectangle with 4:1 aspect ratio\n    width = 100;\n    height = 25;\n    corner_r = 5;\n    thickness = 10;\n\n    // rounded rectangle profile\n    points = [\n        [corner_r, 0],\n        [width - corner_r, 0],\n        [width, corner_r],\n        [width, height - corner_r],\n        [width - corner_r, height],\n        [corner_r, height],\n        [0, height - corner_r],\n        [0, corner_r]\n    ];\n\n    // rounded rectangle profile with arcs\n    profile = [\n        for (i = [0:7]) points[i],\n        for (a = [0:5:90]) [width - corner_r + corner_r * cos(a), corner_r + corner_r * sin(a)],\n        for (a = [90:5:180]) [width - corner_r + corner_r * cos(a), height - corner_r + corner_r * sin(a)],\n        for (a = [180:5:270]) [corner_r + corner_r * cos(a), height - corner_r + corner_r * sin(a)],\n        for (a = [270:5:360]) [corner_r + corner_r * cos(a), corner_r + corner_r * sin(a)]\n    ];\n\n    linear_extrude(height = thickness)\n        polygon(profile);\n}\n\nrectangle_4_1();",
    "renders": true
  },
  {
    "primitive_shape": "rectangle_wide",
    "openscad_code": "// rectangle_wide with rounded edges\nmodule rectangle_wide() {\n    width = 80;\n    height = 40;\n    thickness = 8;\n    radius = 6;\n    \n    points = [\n        [radius, 0],\n        [width - radius, 0],\n        [width, radius],\n        [width, height - radius],\n        [width - radius, height],\n        [radius, height],\n        [0, height - radius],\n        [0, radius]\n    ];\n    \n    paths = [[0, 1, 2, 3, 4, 5, 6, 7]];\n    \n    linear_extrude(height = thickness) {\n        offset(r = radius) offset(r = -radius) polygon(points = points, paths = paths);\n    }\n}\n\nrectangle_wide();",
    "renders": true
  },
  {
    "primitive_shape": "rectangle_tall",
    "openscad_code": "module rectangle_tall(w = 40, h = 100, r = 8) {\n    // 2D profile with rounded corners\n    polygon(\n        points = [\n            [r, 0], [w - r, 0], [w, r], [w, h - r],\n            [w - r, h], [r, h], [0, h - r], [0, r]\n        ],\n        paths = [[0, 1, 2, 3, 4, 5, 6, 7]]\n    );\n}\n\n// Extrude to 3D\nlinear_extrude(height = 20)\nrectangle_tall();",
    "renders": true
  },
  {
    "primitive_shape": "rectangle_rounded",
    "openscad_code": "module rectangle_rounded(w = 100, h = 70, r = 10, t = 15) {\n    // corner points for rounded rectangle\n    points = [\n        [r, 0],\n        [w - r, 0],\n        [w, r],\n        [w, h - r],\n        [w - r, h],\n        [r, h],\n        [0, h - r],\n        [0, r]\n    ];\n    // rounded corner arcs\n    paths = [\n        [0, 1, 2, 3, 4, 5, 6, 7]\n    ];\n    linear_extrude(height = t)\n        polygon(points, paths);\n}\n\nrectangle_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "rectangle_with_hole",
    "openscad_code": "module rectangle_with_hole(w = 80, h = 50, t = 8, r = 6, hr = 12) {\n    // outer rounded rectangle points\n    points = [\n        [r, 0], [w - r, 0], [w, r], [w, h - r],\n        [w - r, h], [r, h], [0, h - r], [0, r]\n    ];\n    \n    // outer path\n    outer = concat(\n        [for (i = [0:7]) points[i]],\n        [[r, 0]]\n    );\n    \n    // inner hole path\n    hole = [\n        [w/2 - hr, h/2],\n        [w/2, h/2 - hr],\n        [w/2 + hr, h/2],\n        [w/2, h/2 + hr]\n    ];\n    \n    linear_extrude(height = t)\n    difference() {\n        polygon(points = outer, paths = [range(0, len(outer) - 1)]);\n        polygon(points = hole, paths = [[0, 1, 2, 3]]);\n    }\n}\n\nrectangle_with_hole();",
    "renders": true
  },
  {
    "primitive_shape": "pentagon",
    "openscad_code": "module pentagon(r = 50, h = 10, fillet = 3) {\n    // Outer pentagon points\n    a = 360/5;\n    pts = [for(i=[0:4]) [r*cos(i*a-90), r*sin(i*a-90)]];\n    \n    // Filleted inner pentagon (offset inwards)\n    r2 = r - fillet;\n    pts2 = [for(i=[0:4]) [r2*cos(i*a-90), r2*sin(i*a-90)]];\n    \n    // Build shape\n    difference() {\n        linear_extrude(height = h)\n            polygon(pts);\n        \n        // Round top edges\n        translate([0, 0, h - fillet])\n            linear_extrude(height = fillet + 0.01)\n                polygon(pts2);\n        \n        // Round bottom edges\n        translate([0, 0, -0.01])\n            linear_extrude(height = fillet + 0.01)\n                polygon(pts2);\n    }\n}\n\npentagon();",
    "renders": true
  },
  {
    "primitive_shape": "pentagon_regular",
    "openscad_code": "module pentagon_regular(height = 20, radius = 50, fillet = 3) {\n    sides = 5;\n    a = 360 / sides;\n    pts = [for(i=[0:sides-1]) \n            [radius * cos(i*a), radius * sin(i*a)]\n          ];\n    \n    // outer shell\n    difference() {\n        linear_extrude(height = height, convexity = 5)\n            offset(r = fillet) \n                polygon(points = pts);\n        \n        // inner shell for rounded edge\n        linear_extrude(height = height + 0.1, convexity = 5)\n            offset(r = fillet - 1.5) \n                polygon(points = pts);\n    }\n}\n\npentagon_regular();",
    "renders": true
  },
  {
    "primitive_shape": "pentagon_irregular",
    "openscad_code": "// pentagon_irregular - irregular pentagon prism with rounded top edges\nmodule pentagon_irregular(height=20, radius=60) {\n    // irregular pentagon points\n    pts = [\n        [0, 45],\n        [40, 20],\n        [25, -35],\n        [-25, -35],\n        [-40, 20]\n    ];\n    \n    // extrude the base shape\n    linear_extrude(height=height, $fn=32)\n        polygon(pts);\n    \n    // add rounded top edges\n    translate([0, 0, height])\n        linear_extrude(height=3, $fn=32)\n            offset(r=3)\n                polygon(pts);\n}\n\npentagon_irregular();",
    "renders": true
  },
  {
    "primitive_shape": "pentagon_star",
    "openscad_code": "module pentagon_star(height = 10, r_outer = 50, r_inner = 25) {\n    // 5-point star vertices\n    pts = [\n        for (i = [0:9])\n            let (\n                angle = i * 36,\n                r = (i % 2 == 0) ? r_outer : r_inner\n            )\n            [r * cos(angle), r * sin(angle)]\n    ];\n    \n    linear_extrude(height = height)\n        polygon(points = pts);\n}\n\npentagon_star();",
    "renders": true
  },
  {
    "primitive_shape": "pentagon_star_5_point",
    "openscad_code": "module pentagon_star_5_point(h = 8, r_out = 50, r_in = 20) {\n    // outer pentagon vertices\n    pts_out = [\n        for(i = [0:4])\n            [r_out * cos( 72*i + 90 ),\n             r_out * sin( 72*i + 90 )]\n    ];\n\n    // inner star points\n    pts_in = [\n        for(i = [0:4])\n            [r_in * cos( 72*i + 90 + 36 ),\n             r_in * sin( 72*i + 90 + 36 )]\n    ];\n\n    // interleave outer and inner points\n    star_pts = [\n        for(i = [0:4]) pts_out[i],\n        for(i = [0:4]) pts_in[i]\n    ];\n\n    // 2D star shape with rounded edges\n    offset(r = 2)\n        polygon(star_pts);\n\n    // extrude to 3D\n    linear_extrude(height = h, center = true)\n        offset(r = 2)\n            polygon(star_pts);\n}\n\npentagon_star_5_point();",
    "renders": true
  },
  {
    "primitive_shape": "pentagon_rounded",
    "openscad_code": "module pentagon_rounded(r = 50, h = 20, fillet = 5) {\n    sides = 5;\n    angle_step = 360 / sides;\n    \n    // outer pentagon\n    outer_pts = [for (i = [0:sides-1])\n        r * [cos(i*angle_step), sin(i*angle_step)]\n    ];\n    \n    // inner pentagon offset for rounding\n    inner_pts = [for (i = [0:sides-1])\n        (r - fillet) * [cos(i*angle_step), sin(i*angle_step)]\n    ];\n    \n    // prepare rounded polygon\n    offset(r = fillet) offset(r = -fillet)\n        polygon(outer_pts);\n    \n    // extrude\n    linear_extrude(height = h, center = true)\n        offset(r = fillet) offset(r = -fillet)\n            polygon(outer_pts);\n}\n\npentagon_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "pentagon_hollow",
    "openscad_code": "module pentagon_hollow(r=35, h=10, wall=4) {\n    outer_pts = [\n        for(a=[0:72:360-72])\n            [r*cos(a), r*sin(a)]\n    ];\n    \n    inner_pts = [\n        for(a=[0:72:360-72])\n            [(r-wall)*cos(a), (r-wall)*sin(a)]\n    ];\n    \n    difference() {\n        linear_extrude(height=h, center=true)\n            polygon(outer_pts);\n            \n        linear_extrude(height=h+0.1, center=true)\n            polygon(inner_pts);\n    }\n}\n\npentagon_hollow();",
    "renders": true
  },
  {
    "primitive_shape": "hexagon",
    "openscad_code": "module hexagon_rounded(h = 10, side = 40, r = 3, center = true) {\n    // outer radius for pointy-top orientation\n    or = side;\n    step = 360/6;\n    pts = [for (a = [0:step:359]) or*[cos(a), sin(a)]];\n    \n    linear_extrude(height = h, center = center, convexity = 10)\n        offset(r = r) polygon(pts);\n}\n\nhexagon_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "hexagon_regular",
    "openscad_code": "module hexagon_regular(r=50, h=10, rounding=2) {\n    sides = 6;\n    angle_step = 360 / sides;\n    \n    // sharp hexagon points\n    pts = [for(i=[0:sides-1]) \n           [r*cos(i*angle_step), r*sin(i*angle_step)]];\n    \n    // offset inwards for rounded edges\n    offset_pts = [for(p=pts) \n                  [p.x-rounding, p.y-rounding]];\n    \n    // 2D rounded hexagon\n    linear_extrude(height=h, center=true, convexity=5)\n        offset(r=rounding) polygon(pts);\n}\n\nhexagon_regular();",
    "renders": true
  },
  {
    "primitive_shape": "hexagon_long",
    "openscad_code": "module hexagon_long(r=30, h=80, fillet=3) {\n    sides = 6;\n    angle = 360 / sides;\n\n    // sharp outer points\n    pts = [for(i=[0:sides-1]) r*[cos(i*angle), sin(i*angle)]];\n\n    // rounded profile using offset\n    offset_profile = offset(delta=-fillet, $fn=32) polygon(pts);\n\n    linear_extrude(height=h, center=true)\n        offset_profile;\n}\n\nhexagon_long();",
    "renders": true
  },
  {
    "primitive_shape": "hexagon_wide",
    "openscad_code": "module hexagon_wide(radius=40, thickness=8, fillet=3)\n{\n    sides = 6;\n    angle_step = 360 / sides;\n    pts = [for(a=[0:sides-1]) [radius*cos(a*angle_step),\n                               radius*sin(a*angle_step)*0.65]];\n    \n    linear_extrude(height=thickness, convexity=10, $fn=fillet)\n    offset(r=fillet) polygon(pts);\n}\n\nhexagon_wide();",
    "renders": true
  },
  {
    "primitive_shape": "hexagon_honeycomb",
    "openscad_code": "module hexagon_honeycomb(h = 10, size = 5, wall = 1.2) {\n    flat = 0.866025; // cos(30°)\n    step = size * 2 * flat;\n    hex_pts = [\n        [size, 0],\n        [size/2, size*flat],\n        [-size/2, size*flat],\n        [-size, 0],\n        [-size/2, -size*flat],\n        [size/2, -size*flat]\n    ];\n    \n    for (dx = [-step, 0, step])\n        for (dy = [-step, 0, step])\n            translate([dx, dy, 0])\n                linear_extrude(height = h, center = true)\n                    difference() {\n                        polygon(points = hex_pts);\n                        polygon(points = [for (p = hex_pts) p * (1 - wall/size)]);\n                    }\n}\n\nhexagon_honeycomb();",
    "renders": true
  },
  {
    "primitive_shape": "hexagon_rounded",
    "openscad_code": "module hexagon_rounded(r=30, h=10, fillet=3, $fn=32) {\n    // 2D rounded hexagon profile\n    pts = [\n        for(a=[0:60:359]) \n            let(r_eff = a%120==0 ? r-fillet : r)\n            [r_eff*cos(a), r_eff*sin(a)]\n    ];\n\n    // Create 2D shape\n    polygon(points=pts);\n\n    // Extrude to 3D\n    linear_extrude(height=h, center=true)\n        polygon(points=pts);\n}\n\nhexagon_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "hexagon_with_hole",
    "openscad_code": "module hexagon_with_hole(\n    outer_radius = 40,\n    inner_radius = 15,\n    height = 10,\n    fillet = 3\n) {\n    // hexagon points\n    hex_pts = [\n        for (i = [0:5])\n            let (a = 60*i)\n            [outer_radius*cos(a), outer_radius*sin(a)]\n    ];\n\n    // inner circle points\n    circle_pts = [\n        for (i = [0:35])\n            let (a = 10*i)\n            [inner_radius*cos(a), inner_radius*sin(a)]\n    ];\n\n    // rounded hexagon profile\n    difference() {\n        offset(r = fillet) polygon(hex_pts);\n        offset(r = fillet) polygon(circle_pts);\n    }\n    linear_extrude(height = height) {\n        difference() {\n            polygon(hex_pts);\n            polygon(circle_pts);\n        }\n    }\n}\n\nhexagon_with_hole();",
    "renders": true
  },
  {
    "primitive_shape": "heptagon",
    "openscad_code": "// Heptagonal prism with rounded top edges\nmodule heptagon_primitive(r=45, h=20, fillet=3) {\n    // Generate 7 points for regular heptagon\n    pts = [for(i=[0:6]) [r*cos(i*360/7), r*sin(i*360/7)]];\n    \n    // Main body\n    linear_extrude(height=h-fillet) polygon(pts);\n    \n    // Rounded top edge\n    translate([0,0,h-fillet]) \n        linear_extrude(height=fillet, scale=0.85) polygon(pts);\n}\n\nheptagon_primitive();",
    "renders": true
  },
  {
    "primitive_shape": "heptagon_regular",
    "openscad_code": "// Heptagonal prism with rounded top edges\n$fn = 50;\n\nmodule heptagon_prism(r=30, h=20, fillet=3) {\n    // Generate regular heptagon points\n    pts = [for(i=[0:6]) \n        [r*cos(i*360/7), r*sin(i*360/7)]\n    ];\n    \n    difference() {\n        // Main prism\n        linear_extrude(height=h) polygon(points=pts);\n        \n        // Rounded top edges via negative mold\n        translate([0,0,h-fillet])\n            minkowski() {\n                linear_extrude(height=fillet+0.01) \n                    offset(r=-fillet) polygon(points=pts);\n                cylinder(h=0.01, r=fillet);\n            }\n    }\n}\n\nheptagon_prism();",
    "renders": true
  },
  {
    "primitive_shape": "heptagon_rounded",
    "openscad_code": "module heptagon_rounded(r=40, h=10, rounding=3, center=false) {\n    sides = 7;\n    angle_step = 360/sides;\n    points = [for(i=[0:sides-1]) r * [cos(i*angle_step), sin(i*angle_step)]];\n    \n    offset(r=rounding) polygon(points);\n    \n    linear_extrude(height=h, center=center) {\n        offset(r=rounding) polygon(points);\n    }\n}\n\nheptagon_rounded(r=40, h=10, rounding=3);",
    "renders": true
  },
  {
    "primitive_shape": "octagon",
    "openscad_code": "module octagon_rounded(h = 20, r = 40, corner_r = 5, center = true) {\n    sides = 8;\n    astep = 360 / sides;\n    pts = [for (i = [0 : sides - 1]) \n        [r * cos(i * astep), r * sin(i * astep)]];\n    \n    offset(r = corner_r) {\n        polygon(pts);\n    }\n    \n    linear_extrude(height = h, center = center) {\n        offset(r = corner_r) {\n            polygon(pts);\n        }\n    }\n}\n\noctagon_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "octagon_regular",
    "openscad_code": "// Regular octagon with rounded top edges\nmodule octagon_regular(height = 20, side = 40, radius = 3) {\n    // 2D octagon points\n    oct_pts = [\n        for(i = [0:7]) [\n            side * cos(i * 45 - 22.5), \n            side * sin(i * 45 - 22.5)\n        ]\n    ];\n    \n    // Rounded top via Minkowski\n    linear_extrude(height - radius)\n        polygon(oct_pts);\n    \n    translate([0, 0, height - radius])\n        minkowski() {\n            polygon(oct_pts);\n            cylinder(h = 0.01, r = radius, $fn = 30);\n        }\n}\n\noctagon_regular();",
    "renders": true
  },
  {
    "primitive_shape": "octagon_rounded",
    "openscad_code": "module octagon_rounded(height = 30, radius = 50, r = 8) {\n    sides = 8;\n    da = 360 / sides;\n    pts = [\n        for (i = [0 : sides - 1])\n            let (a = i * da + 22.5)\n            [radius * cos(a), radius * sin(a)]\n    ];\n    offset(r = r) polygon(pts);\n    linear_extrude(height = height) offset(r = r) polygon(pts);\n}\n\noctagon_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "octagon_with_hole",
    "openscad_code": "module octagon_with_hole(height = 10, outer = 50, inner = 20, rounding = 2) {\n    outer_r = outer / 2;\n    inner_r = inner / 2;\n    \n    // Octagon points\n    oct_pts = [\n        for (i = [0:7]) [\n            outer_r * cos(45 * i + 22.5),\n            outer_r * sin(45 * i + 22.5)\n        ]\n    ];\n    \n    // Create outer octagon with rounded edges\n    difference() {\n        linear_extrude(height = height) {\n            offset(r = rounding) {\n                polygon(points = oct_pts);\n            }\n        }\n        \n        // Central hole\n        translate([0, 0, -1])\n            cylinder(h = height + 2, r = inner_r, $fn = 64);\n    }\n}\n\noctagon_with_hole();",
    "renders": true
  },
  {
    "primitive_shape": "nonagon",
    "openscad_code": "module nonagon(radius=50, height=20, edge_radius=3) {\n    sides = 9;\n    angle_step = 360 / sides;\n    \n    // Generate nonagon points\n    points = [for(i=[0:sides-1]) \n        [radius * cos(i*angle_step), radius * sin(i*angle_step)]\n    ];\n    \n    // Create rounded 2D nonagon\n    offset(r=edge_radius) polygon(points);\n    \n    // Extrude to 3D\n    linear_extrude(height=height, center=true) \n        offset(r=edge_radius) polygon(points);\n}\n\nnonagon();",
    "renders": true
  },
  {
    "primitive_shape": "nonagon_regular",
    "openscad_code": "module nonagon_regular(h = 20, r = 40, fillet = 2) {\n    sides = 9;\n    angles = [for(i = [0:sides-1]) i*360/sides];\n    pts = [for(a = angles) [r*cos(a), r*sin(a)]];\n    \n    difference() {\n        linear_extrude(height = h, center = true, convexity = 10)\n            offset(r = fillet) polygon(pts);\n        \n        // center hole\n        hole_r = 8;\n        translate([0,0,-h/2-1])\n            cylinder(r = hole_r, h = h+2, $fn = 32);\n    }\n}\n\nnonagon_regular();",
    "renders": true
  },
  {
    "primitive_shape": "decagon",
    "openscad_code": "module decagon_prism(r=40, h=20, cr=2) {\n    sides = 10;\n    angle_step = 360/sides;\n    \n    // outer decagon points\n    outer_pts = [for(i=[0:sides-1]) [\n        r*cos(i*angle_step),\n        r*sin(i*angle_step)\n    ]];\n    \n    // inner chamfered decagon points\n    inner_pts = [for(i=[0:sides-1]) [\n        (r-cr)*cos(i*angle_step),\n        (r-cr)*sin(i*angle_step)\n    ]];\n    \n    // build shape with rounded top and bottom edges\n    difference() {\n        linear_extrude(height=h, convexity=10)\n            polygon(outer_pts);\n        \n        translate([0,0,-0.1])\n        linear_extrude(height=h+0.2, convexity=10)\n            polygon(inner_pts);\n    }\n}\n\n// render\ndecagon_prism();",
    "renders": true
  },
  {
    "primitive_shape": "decagon_regular",
    "openscad_code": "// Regular decagon prism with rounded top edges\nmodule decagon_regular(h=20, r=50, edge_r=2) {\n    sides = 10;\n    angle = 360 / sides;\n\n    // Generate vertex list for a regular decagon\n    pts = [for (i = [0:sides-1])\n        [r * cos(i*angle), r * sin(i*angle)]\n    ];\n\n    // 2D base shape\n    base_shape = polygon(pts);\n\n    // Extrude with rounded top\n    linear_extrude(height=h, convexity=10) offset(r=edge_r) base_shape;\n}\n\ndecagon_regular();",
    "renders": true
  },
  {
    "primitive_shape": "decagon_rounded",
    "openscad_code": "module decagon_rounded(r = 50, h = 20, fillet = 5, center = false) {\n    sides = 10;\n    angle_step = 360 / sides;\n    \n    // outer vertices\n    outer_pts = [for (i = [0:sides-1]) \n        [r * cos(i*angle_step), r * sin(i*angle_step)]];\n    \n    // inner vertices for rounded edges\n    inner_pts = [for (i = [0:sides-1]) \n        [(r - fillet) * cos(i*angle_step + angle_step/2), \n         (r - fillet) * sin(i*angle_step + angle_step/2)]];\n    \n    // build polygon with rounded edges\n    polygon_pts = [];\n    for (i = [0:sides-1]) {\n        next_i = (i + 1) % sides;\n        polygon_pts = concat(polygon_pts, [\n            outer_pts[i],\n            inner_pts[i],\n            outer_pts[next_i]\n        ]);\n    }\n    \n    linear_extrude(height = h, center = center)\n        polygon(polygon_pts);\n}\n\ndecagon_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "polygon_11_sides",
    "openscad_code": "// Regular 11-gon prism with rounded top edges\nmodule polygon_11_sides(h = 20, r = 50, rf = 2) {\n    sides = 11;\n    a_step = 360 / sides;\n    pts = [for(i = [0:sides-1]) [r*cos(i*a_step), r*sin(i*a_step)]];\n    \n    difference() {\n        linear_extrude(height = h) polygon(pts);\n        \n        // Rounded top edges via chamfer subtraction\n        translate([0,0,h-rf])\n            linear_extrude(height = rf + 0.1)\n                offset(delta = -rf) polygon(pts);\n    }\n}\n\npolygon_11_sides();",
    "renders": true
  },
  {
    "primitive_shape": "polygon_12_sides",
    "openscad_code": "module polygon_12_sides(h = 30, r = 50, fillet = 3)\n{\n    // generate 12 outer vertices\n    outer_pts = [for(i = [0:11]) \n        [r * cos(i * 30), r * sin(i * 30)]];\n\n    // generate 12 inner vertices for fillet\n    inner_pts = [for(i = [0:11]) \n        [(r - fillet) * cos(i * 30 + 15), (r - fillet) * sin(i * 30 + 15)]];\n\n    // interleave outer and inner points for star polygon\n    full_pts = [for(i = [0:23]) \n        (i % 2 == 0) ? outer_pts[i/2] : inner_pts[(i-1)/2]];\n\n    linear_extrude(height = h, center = true, convexity = 10)\n        polygon(points = full_pts);\n}\n\npolygon_12_sides();",
    "renders": true
  },
  {
    "primitive_shape": "polygon_13_sides",
    "openscad_code": "module polygon_13_sides(h = 20, r = 50, fillet = 2) {\n    n = 13;\n    pts = [\n        for (i = [0 : n - 1])\n            let (a = 360 / n * i)\n            [r * cos(a), r * sin(a)]\n    ];\n\n    // Main body\n    linear_extrude(height = h) {\n        offset(r = fillet) offset(r = -fillet)\n            polygon(pts);\n    }\n}\n\npolygon_13_sides();",
    "renders": true
  },
  {
    "primitive_shape": "polygon_14_sides",
    "openscad_code": "module polygon_14_sides(h = 20, r_outer = 50, r_inner = 45) {\n    // 14-sided polygon with rounded edges\n    sides = 14;\n    angle = 360 / sides;\n    \n    // Generate points for outer and inner radii\n    outer_pts = [for (i = [0 : sides - 1]) \n        [r_outer * cos(i * angle), r_outer * sin(i * angle)]];\n    \n    inner_pts = [for (i = [0 : sides - 1]) \n        [r_inner * cos(i * angle + angle/2), r_inner * sin(i * angle + angle/2)]];\n    \n    // Combine points for star-like rounded polygon\n    all_pts = [for (i = [0 : sides - 1]) each [\n        outer_pts[i], inner_pts[i]\n    ]];\n    \n    linear_extrude(height = h)\n        polygon(points = all_pts);\n}\n\npolygon_14_sides();",
    "renders": true
  },
  {
    "primitive_shape": "polygon_15_sides",
    "openscad_code": "module polygon_15_sides(height = 20, radius = 50, fillet = 3) {\n    sides = 15;\n    angles = [for (i = [0:sides-1]) i * 360 / sides];\n    outer_pts = [for (a = angles) [radius * cos(a), radius * sin(a)]];\n    \n    // inner circle for rounded edges\n    inner_r = radius - fillet;\n    mid_pts = [for (a = angles) [inner_r * cos(a), inner_r * sin(a)]];\n    \n    // build polygon with rounded corners\n    poly_pts = concat(\n        [for (i = [0:sides-1]) outer_pts[i]],\n        [for (i = [sides-1:-1:0]) mid_pts[i]]\n    );\n    \n    linear_extrude(height)\n        polygon(points = poly_pts);\n}\n\npolygon_15_sides();",
    "renders": true
  },
  {
    "primitive_shape": "polygon_16_sides",
    "openscad_code": "// 16-sided prism with rounded edges\nmodule polygon_16_sides(h = 20, r = 40, r_fillet = 3) {\n    // Base polygon with rounded vertices\n    polygon(\n        [\n            for(i = [0:15]) \n                let(a = i*22.5)\n                    [r*cos(a), r*sin(a)]\n        ],\n        convexity = 4\n    );\n}\n\n// Extrude with rounded top and bottom\nlinear_extrude(height = 20, convexity = 4) \n    offset(r = -2) offset(delta = 2) \n        polygon_16_sides();",
    "renders": true
  },
  {
    "primitive_shape": "polygon_17_sides",
    "openscad_code": "// PRIMITIVE SHAPE: polygon_17_sides (heptadecagon)\n// 3D form with rounded top and straight sides\nmodule polygon_17_sides(h = 40, r = 50, fillet = 3) {\n    // generate 17-gon points\n    sides = 17;\n    angle_step = 360 / sides;\n    points = [for(i = [0:sides-1]) \n        [r * cos(i*angle_step), r * sin(i*angle_step)]\n    ];\n    \n    // main body\n    linear_extrude(height = h - fillet, center = false)\n        polygon(points);\n    \n    // rounded top via second extrusion with fillet\n    translate([0,0,h - fillet])\n        linear_extrude(height = fillet, center = false, convexity = 10)\n            offset(r = fillet) \n                polygon(points);\n}\n\npolygon_17_sides();",
    "renders": true
  },
  {
    "primitive_shape": "polygon_18_sides",
    "openscad_code": "// 18-sided polygon prism with rounded top and bottom edges\nmodule polygon_18_sides() {\n    // Generate 18-gon points\n    r = 30; // radius\n    n = 18;\n    points = [for (i=[0:n-1]) [r*cos(i*360/n), r*sin(i*360/n)]];\n\n    // Main body\n    linear_extrude(height=50, center=true) {\n        polygon(points=points);\n    }\n\n    // Rounded top edge\n    translate([0,0,25])\n    linear_extrude(height=2, center=true)\n    offset(r=2)\n    polygon(points=points);\n\n    // Rounded bottom edge\n    translate([0,0,-25])\n    linear_extrude(height=2, center=true)\n    offset(r=2)\n    polygon(points=points);\n}\n\npolygon_18_sides();",
    "renders": true
  },
  {
    "primitive_shape": "polygon_19_sides",
    "openscad_code": "module polygon_19_sides(height = 20, radius = 50, chamfer = 2) {\n    // 19-gon base points\n    pts = [for (i = [0:18]) \n        [radius * cos(i*360/19), radius * sin(i*360/19)]\n    ];\n    \n    // Main body\n    linear_extrude(height = height) \n        polygon(pts);\n    \n    // Rounded top edge via chamfer\n    translate([0, 0, height])\n        linear_extrude(height = chamfer, scale = 0.95)\n            polygon(pts);\n}\n\npolygon_19_sides();",
    "renders": true
  },
  {
    "primitive_shape": "polygon_20_sides",
    "openscad_code": "module polygon_20_sides(r = 50, h = 20, fillet = 2) {\n    // generate 20 vertices on a circle\n    pts = [for(i=[0:19]) [\n        r * cos(i*18),\n        r * sin(i*18)\n    ]];\n\n    // offset for rounded corners\n    offset_pts = offset(pts, r = -fillet);\n\n    // extrude the rounded polygon\n    linear_extrude(height = h, center = true, convexity = 10)\n        polygon(offset_pts);\n}\n\npolygon_20_sides();",
    "renders": true
  },
  {
    "primitive_shape": "polygon_24_sides",
    "openscad_code": "module polygon_24_sides(h = 10, r = 50, fillet = 2) {\n    n = 24;\n    angle_step = 360 / n;\n    \n    points = [\n        for (i = [0:n-1])\n            let (a = i * angle_step)\n            [r * cos(a), r * sin(a)]\n    ];\n    \n    offset(r = fillet)\n        polygon(points);\n    \n    linear_extrude(height = h, center = true)\n        offset(r = fillet)\n            polygon(points);\n}\n\npolygon_24_sides();",
    "renders": true
  },
  {
    "primitive_shape": "polygon_36_sides",
    "openscad_code": "// 36-sided polygon with rounded top edge\nheight = 20;\nradius = 60;\n\n// Generate 36-sided polygon points\npoints = [for(i=[0:35]) [radius*cos(i*10), radius*sin(i*10)]];\n\n// Create rounded top using offset and difference\nmodule polygon_36_rounded() {\n    linear_extrude(height = height) {\n        difference() {\n            offset(r = 3) polygon(points);\n            offset(r = 1.5) polygon(points);\n        }\n    }\n}\n\npolygon_36_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "polygon_48_sides",
    "openscad_code": "// 48-sided polygon with rounded top (medium complexity)\nmodule polygon_48_sides(height = 30, radius = 40, fillet = 5) {\n    sides = 48;\n    angle_step = 360/sides;\n    \n    // 2D profile with rounded top\n    linear_extrude(height = height, convexity = 10)\n    union() {\n        // Main 48-sided base\n        circle(r = radius, $fn = sides);\n        \n        // Rounded top edge\n        difference() {\n            translate([0, 0, 0])\n            offset(r = fillet)\n            circle(r = radius - fillet, $fn = sides);\n            \n            offset(r = -2)\n            circle(r = radius, $fn = sides);\n        }\n    }\n}\n\npolygon_48_sides();",
    "renders": true
  },
  {
    "primitive_shape": "polygon_60_sides",
    "openscad_code": "module polygon_60_sides(h = 20, r = 50, r_fillet = 2) {\n    n = 60;\n    da = 360 / n;\n\n    // outer circle vertices\n    outer = [for(i = [0 : n-1])\n             r * [cos(i*da), sin(i*da)]];\n\n    // inner circle vertices (for rounded edges)\n    inner = [for(i = [0 : n-1])\n             (r - r_fillet) * [cos(i*da + da/2), sin(i*da + da/2)]];\n\n    // build alternating outer/inner points for rounded edge pattern\n    points = [for(i = [0 : n-1]) outer[i],\n              for(i = [0 : n-1]) inner[i]];\n\n    // indices for outer vertices\n    idx = [for(i = [0 : n-1]) i];\n\n    // 2D shape with rounded edges\n    linear_extrude(height = h, center = true)\n        polygon(points = points, paths = [idx]);\n}\n\npolygon_60_sides();",
    "renders": true
  },
  {
    "primitive_shape": "circle",
    "openscad_code": "module rounded_disk(d=80, h=10, r=2) {\n    // 2D rounded disk profile\n    profile = [\n        [0,0],\n        [d/2-r,0],\n        for(a=[0:5:90]) [d/2-r+r*cos(a), r-r*sin(a)],\n        [d/2, h-r],\n        for(a=[90:5:180]) [d/2-r+r*cos(a), h-r+r*sin(a)],\n        [r,h],\n        for(a=[180:5:270]) [r-r*cos(a), h-r+r*sin(a)],\n        [0,r]\n    ];\n    \n    rotate_extrude()\n        polygon(profile);\n}\n\nrounded_disk();",
    "renders": true
  },
  {
    "primitive_shape": "circle_unit",
    "openscad_code": "// circle_unit.scad – rounded-edge disk primitive\nmodule circle_unit(r=25, t=3, chamfer=1) {\n    // 2D profile: rectangle with 45° chamfers\n    h = t - 2*chamfer;\n    profile = [\n        [0, 0],\n        [r, 0],\n        [r, chamfer],\n        [r-chamfer, t],\n        [chamfer, t],\n        [0, chamfer]\n    ];\n    linear_extrude(height = 0.01, center = true)\n        polygon(profile);\n    \n    // main disk\n    translate([0, 0, -t/2])\n        cylinder(h = t - 2*chamfer, r = r - chamfer, center = true);\n    \n    // top chamfer ring\n    translate([0, 0, t/2 - chamfer])\n        cylinder(h = chamfer, r1 = r - chamfer, r2 = r, center = false);\n    \n    // bottom chamfer ring\n    translate([0, 0, -t/2])\n        cylinder(h = chamfer, r1 = r, r2 = r - chamfer, center = false);\n}\n\ncircle_unit();",
    "renders": true
  },
  {
    "primitive_shape": "circle_small",
    "openscad_code": "module small_circle_rounded(height = 8, radius = 40, fillet = 2) {\n    // rounded edge profile\n    profile = [\n        for (i = [0:5:90]) [radius - fillet + fillet * cos(i), fillet * sin(i)],\n        [radius, height - fillet],\n        for (i = [90:5:180]) [radius - fillet + fillet * cos(i), height - fillet + fillet * sin(i)],\n        [radius - fillet, height],\n        [0, height],\n        [0, 0]\n    ];\n\n    rotate_extrude($fn = 64)\n        polygon(profile);\n}\n\nsmall_circle_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "circle_large",
    "openscad_code": "module circle_large() {\n    // Basic circle with rounded edge profile\n    outer_r = 60;\n    inner_r = 50;\n    thickness = 10;\n    edge_r = 2;\n    \n    // Main disk body\n    translate([0, 0, edge_r]) \n        cylinder(h = thickness - 2*edge_r, r = outer_r - edge_r, $fn = 64);\n    \n    // Top rounded edge\n    translate([0, 0, thickness - edge_r])\n        cylinder(h = edge_r, r1 = outer_r - edge_r, r2 = outer_r, $fn = 64);\n    \n    // Bottom rounded edge\n    cylinder(h = edge_r, r1 = outer_r, r2 = outer_r - edge_r, $fn = 64);\n}\n\ncircle_large();",
    "renders": true
  },
  {
    "primitive_shape": "circle_with_hole",
    "openscad_code": "// circle_with_hole.scad\n// 2D circle with rounded center hole, extruded into 3D\n\nmodule circle_with_hole(h = 8, r = 40, hr = 10, cr = 1.5) {\n    difference() {\n        // outer disk\n        linear_extrude(height = h)\n            circle(r = r);\n        \n        // center hole with chamfer\n        translate([0, 0, -0.01])\n            cylinder(h = h + 0.02, r = hr, $fn = 64);\n        \n        // top chamfer\n        translate([0, 0, h - cr])\n            cylinder(h = cr, r1 = hr, r2 = hr + cr, $fn = 64);\n        \n        // bottom chamfer\n            cylinder(h = cr, r1 = hr + cr, r2 = hr, $fn = 64);\n    }\n}\n\ncircle_with_hole();",
    "renders": true
  },
  {
    "primitive_shape": "circle_donut",
    "openscad_code": "// Circle donut (torus) primitive with rounded edges\n// Outer diameter 80 mm, inner diameter 40 mm, thickness 20 mm\n\n$fn = 64;\n\nmodule circle_donut() {\n    // Create rounded cross-section\n    difference() {\n        // Main ring\n        rotate_extrude(angle = 360)\n            translate([30, 0, 0])\n                circle(d = 20);\n        \n        // Inner edge softening\n        rotate_extrude(angle = 360)\n            translate([30, 0, 0])\n                circle(d = 18);\n    }\n}\n\ncircle_donut();",
    "renders": true
  },
  {
    "primitive_shape": "circle_arc_90",
    "openscad_code": "// 90-degree circle arc with rounded outer edge\nmodule circle_arc_90(radius = 40, thickness = 10, fillet = 2) {\n    inner = radius - thickness/2;\n    outer = radius + thickness/2;\n    steps = 32;\n    \n    // outer arc points with fillet\n    outer_pts = [for(i=[0:steps/4]) \n        [outer*cos(i*90/steps), outer*sin(i*90/steps)]];\n    \n    // inner arc points\n    inner_pts = [for(i=[steps/4:-1:0]) \n        [inner*cos(i*90/steps), inner*sin(i*90/steps)]];\n    \n    // fillet corners\n    outer_pts[0] = [outer, fillet];\n    outer_pts[len(outer_pts)-1] = [fillet, outer];\n    \n    linear_extrude(height = 15)\n        polygon(concat(outer_pts, inner_pts));\n}\n\ncircle_arc_90();",
    "renders": true
  },
  {
    "primitive_shape": "circle_arc_180",
    "openscad_code": "module circle_arc_180(r = 50, h = 10, fillet = 3, $fn = 64) {\n    // outer arc points\n    outer = [for(a=[0:180]) [r*cos(a), r*sin(a)]];\n    \n    // inner arc points (for rounded edge)\n    inner = [for(a=[0:180]) [(r-fillet)*cos(a), (r-fillet)*sin(a)]];\n    \n    // build 2D shape with rounded edges\n    polygon(\n        concat(\n            [[0, 0]],               // center\n            [[r-fillet, 0]],        // inner start\n            inner,                  // inner arc\n            [[-r+fillet, 0]],       // inner end\n            [[-r, 0]],              // outer start\n            outer,                  // outer arc\n            [[r, 0]]                // outer end\n        )\n    );\n    \n    // extrude to 3D\n    linear_extrude(height = h, center = true)\n        circle(r = r, $fn = 64);\n    \n    // remove bottom half to create 180° arc\n    difference() {\n        linear_extrude(height = h, center = true)\n            polygon(concat([[0, 0]], outer));\n        translate([0, -r-1, -h/2-1])\n            cube([r*2+2, r+1, h+2], center = false);\n    }\n}\n\ncircle_arc_180();",
    "renders": true
  },
  {
    "primitive_shape": "circle_arc_270",
    "openscad_code": "module circle_arc_270(h = 20, r = 50, t = 4, fn = 32) {\n    // outer arc points\n    outer_pts = [for(a = [0:270/fn:270]) r * [cos(a), sin(a)]];\n    \n    // inner arc points\n    inner_pts = [for(a = [270:-270/fn:0]) (r - t) * [cos(a), sin(a)]];\n    \n    // full 2D profile\n    profile = concat(outer_pts, inner_pts);\n    \n    // extrude\n    linear_extrude(height = h)\n        polygon(points = profile);\n}\n\ncircle_arc_270();",
    "renders": true
  },
  {
    "primitive_shape": "ellipse",
    "openscad_code": "// Elliptical disk with a rounded top edge (medium complexity)\nmodule rounded_ellipse(width=80, height=50, thickness=6, radius=2) {\n    // Ellipse profile\n    ellipse_pts = [\n        for (a = [0:5:360]) [width/2*cos(a), height/2*sin(a)]\n    ];\n    \n    // Base ellipse\n    linear_extrude(thickness - radius) polygon(ellipse_pts);\n    \n    // Rounded top edge\n    translate([0,0,thickness - radius])\n        linear_extrude(height=radius, scale=1.3)\n            polygon(ellipse_pts);\n}\n\nrounded_ellipse();",
    "renders": true
  },
  {
    "primitive_shape": "ellipse_2_1",
    "openscad_code": "// ellipse_2_1 primitive with rounded edges\n\nmodule ellipse_2_1() {\n    // 2:1 ellipse parameters\n    a = 50;    // semi-major axis (horizontal)\n    b = 25;    // semi-minor axis (vertical)\n    \n    // generate smooth ellipse points\n    $fn = 48;\n    ellipse_points = [for(i=[0:$fn-1]) [a*cos(i*360/$fn), b*sin(i*360/$fn)]];\n    \n    // create base ellipse with rounded top edge\n    linear_extrude(height=20, convexity=10)\n        offset(r=2)\n            polygon(ellipse_points);\n}\n\n// render the shape\nellipse_2_1();",
    "renders": true
  },
  {
    "primitive_shape": "ellipse_3_1",
    "openscad_code": "module ellipse_3_1() {\n    // 3:1 ellipse with 3mm rounded edge ring\n    rx = 45; ry = 15;  // ellipse 3:1 ratio\n    h = 8;            // thickness\n    \n    // outer ellipse\n    outer = [for(a=[0:5:360]) [rx*cos(a), ry*sin(a)]];\n    \n    // inner ellipse (offset by 3mm)\n    inner = [for(a=[0:5:360]) [(rx-3)*cos(a), (ry-3)*sin(a)]];\n    \n    difference() {\n        linear_extrude(height=h) polygon(outer);\n        translate([0,0,-0.1]) \n            linear_extrude(height=h+0.2) polygon(inner);\n    }\n}\n\nellipse_3_1();",
    "renders": true
  },
  {
    "primitive_shape": "ellipse_4_1",
    "openscad_code": "module ellipse_4_1() {\n    // 4:1 elliptical disk with rounded rim (medium complexity)\n    $fn = 60;\n    \n    // Main ellipse\n    linear_extrude(height = 10) {\n        scale([4, 1, 1])\n            circle(d = 50);\n    }\n    \n    // Rounded top edge\n    translate([0, 0, 10])\n        rotate_extrude() {\n            // Quarter-circle profile\n            translate([25, 0, 0])\n                circle(r = 2);\n        }\n}\n\nellipse_4_1();",
    "renders": true
  },
  {
    "primitive_shape": "ellipse_wide",
    "openscad_code": "// Medium-complexity wide ellipse with rounded edges\nmodule ellipse_wide(h = 10, a = 60, b = 30, r = 3, fn = 64) {\n    // Create rounded profile: rectangle with semicircles on ends\n    w = 2*a - 2*r;\n    h_rect = 2*b - 2*r;\n    \n    // Half-profile points\n    points = concat(\n        // Bottom semicircle\n        [for(i=[0:fn/4]) [r*cos(180 + i*180/(fn/4)) + r, \n                         r*sin(180 + i*180/(fn/4)) - b + r]],\n        // Right straight edge\n        [[a - r, -b + r], [a - r, b - r]],\n        // Top semicircle\n        [for(i=[0:fn/4]) [r*cos(i*180/(fn/4)) + a - r, \n                         r*sin(i*180/(fn/4)) + b - r]],\n        // Left straight edge\n        [[r, b - r], [r, -b + r]]\n    );\n    \n    linear_extrude(height = h, center = true, convexity = 4)\n        polygon(points);\n}\n\nellipse_wide();",
    "renders": true
  },
  {
    "primitive_shape": "ellipse_narrow",
    "openscad_code": "module ellipse_narrow(thickness=6, major=100, minor=40, rounding=3) {\n    // generate the half-ellipse profile\n    sides = 32;\n    step = 180 / (sides - 1);\n    points = [ for (a = [0 : step : 180]) \n               [ major * cos(a), minor * sin(a) ] ];\n    \n    // 2D rounded closed shape\n    offset(r = rounding) polygon(points);\n\n    // extrude to 3D\n    linear_extrude(height = thickness, center = true)\n        offset(r = rounding) polygon(points);\n}\n\nellipse_narrow();",
    "renders": true
  },
  {
    "primitive_shape": "ellipse_squashed",
    "openscad_code": "module ellipse_squashed(h = 30, rx = 50, ry = 30, r = 5, fn = 48) {\n    // outer ellipse profile\n    outer = [\n        for(i = [0:fn]) [ rx * cos(i * 360 / fn),\n                           ry * sin(i * 360 / fn) ]\n    ];\n\n    // rounded base\n    difference() {\n        linear_extrude(height = h)\n            polygon(outer);\n\n        // top chamfer\n        translate([0, 0, h - r])\n            cylinder(h = r + 1, r1 = rx - r, r2 = rx, $fn = fn);\n\n        // bottom chamfer\n        translate([0, 0, -1])\n            cylinder(h = r + 1, r1 = rx, r2 = rx - r, $fn = fn);\n    }\n}\n\nellipse_squashed();",
    "renders": true
  },
  {
    "primitive_shape": "ellipse_elongated",
    "openscad_code": "module elongated_ellipse(h = 30, a = 25, b = 45, fillet = 4) {\n    // 2D profile with rounded ends\n    $fn = 64;\n    difference() {\n        offset(r = fillet) offset(r = -fillet) \n            polygon([[-a, -b], [a, -b], [a, b], [-a, b]]);\n        // Center hollow ellipse\n        scale([0.6, 0.6, 1])\n            polygon([[-a, -b], [a, -b], [a, b], [-a, b]]);\n    }\n    \n    linear_extrude(height = h, center = true, convexity = 10)\n        offset(r = fillet) offset(r = -fillet) \n            polygon([[-a, -b], [a, -b], [a, b], [-a, b]]);\n}\n\nelongated_ellipse();",
    "renders": true
  },
  {
    "primitive_shape": "star",
    "openscad_code": "module star_2d(points=5, r_outer=50, r_inner=20) {\n    pts = [\n        for (i = [0 : 2*points-1])\n            let (angle = 360*i/(2*points))\n            let (r = (i%2==0) ? r_outer : r_inner)\n            [r*cos(angle), r*sin(angle)]\n    ];\n    polygon(pts);\n}\n\nmodule star_primitive(h=10, r=50) {\n    linear_extrude(height=h, center=true, convexity=10)\n        star_2d(5, r, r/2.5);\n}\n\nstar_primitive();",
    "renders": true
  },
  {
    "primitive_shape": "star_4_point",
    "openscad_code": "module star_4_point(r=50, h=10, fillet=2) {\n    // 4-point star polygon\n    a = 360/8;\n    pts = [\n        for(i=[0:7]) \n            let(t=i*a)\n            r * [(i%2?0.5:1)*cos(t), (i%2?0.5:1)*sin(t)]\n    ];\n    \n    // 2D star with rounded corners\n    offset(fillet) polygon(pts);\n    \n    // Extrude to 3D\n    linear_extrude(height=h, center=true, convexity=10)\n        offset(fillet) polygon(pts);\n}\n\nstar_4_point();",
    "renders": true
  },
  {
    "primitive_shape": "star_5_point",
    "openscad_code": "module star_5_point(height = 10, outer = 50, inner = 25)\n{\n    // 10-point polygon (5 outer + 5 inner)\n    a = 0;\n    step = 360 / 5;\n    pts = [\n        for (i = [0:9])\n            let(\n                r = (i % 2 == 0) ? outer : inner,\n                ang = (i * step / 2) - 90\n            )\n            [r * cos(ang), r * sin(ang)]\n    ];\n\n    // 2D star with rounded edges\n    offset(1.5)\n    polygon(pts);\n\n    // Extrude to 3D\n    linear_extrude(height = height, center = true, convexity = 10)\n    offset(1.5)\n    polygon(pts);\n}\n\nstar_5_point();",
    "renders": true
  },
  {
    "primitive_shape": "star_6_point",
    "openscad_code": "// 6-point star with rounded tips\nmodule star_6_point(h = 8, r = 50, r_in = 20, tip_r = 3) {\n    pts = [\n        for(a = [0:60:359])\n        let(outer = [r*cos(a), r*sin(a)])\n        let(inner = [r_in*cos(a+30), r_in*sin(a+30)])\n        each [outer, inner]\n    ];\n    \n    polygon(pts, convexity=4);\n    linear_extrude(height = h, convexity=4) {\n        offset(r = tip_r) offset(delta = -tip_r) polygon(pts, convexity=4);\n    }\n}\n\nstar_6_point();",
    "renders": true
  },
  {
    "primitive_shape": "star_8_point",
    "openscad_code": "module star_8_point(r=50, h=8, fillet=2) {\n    pts = [\n        for (a = [0:45:359])\n        let (r_outer = r,\n             r_inner = r * 0.4)\n        [r_outer * cos(a), r_outer * sin(a)],\n        [r_inner * cos(a + 22.5), r_inner * sin(a + 22.5)]\n    ];\n    \n    minkowski() {\n        linear_extrude(height = h, center = true)\n            polygon(pts);\n        cylinder(h = h*2, r = fillet, center = true);\n    }\n}\n\nstar_8_point();",
    "renders": true
  },
  {
    "primitive_shape": "star_12_point",
    "openscad_code": "module star_12_point(h = 10, r_out = 50, r_in = 25) {\n    // 12-point star with rounded tips\n    pts = [\n        for (i = [0:23])\n            let (a = i * 15,\n                 r = (i % 2 == 0) ? r_out : r_in)\n            [r * cos(a), r * sin(a)]\n    ];\n    \n    linear_extrude(height = h, convexity = 5)\n        offset(r = 2)\n            polygon(pts);\n}\n\nstar_12_point();",
    "renders": true
  },
  {
    "primitive_shape": "star_sharp",
    "openscad_code": "// Star primitive with rounded tips\nmodule star_sharp(r=60, h=10, points=5, iratio=0.4){\n    // Generate star points\n    pts = [\n        for(i=[0:2*points-1])\n            let(\n                a = i * 180/points,\n                r_actual = (i%2==0 ? r : r*iratio)\n            )\n            [r_actual*cos(a), r_actual*sin(a)]\n    ];\n    \n    // Extrude 2D star into 3D\n    linear_extrude(height=h, center=true)\n        polygon(pts);\n}\n\nstar_sharp();",
    "renders": true
  },
  {
    "primitive_shape": "star_shallow",
    "openscad_code": "module star_sharp(r=50, h=10, points=5, inner_ratio=0.4){\n    step = 360 / points;\n    pts = [ for (a = [0 : step : 360-step]) \n            [ r * cos(a),          r * sin(a)         ],\n            [ r * inner_ratio * cos(a+step/2), \n              r * inner_ratio * sin(a+step/2) ] ];\n    linear_extrude(height = h, center = true, convexity = 10)\n        polygon(pts);\n}\n\nstar_sharp();",
    "renders": true
  },
  {
    "primitive_shape": "star_rounded",
    "openscad_code": "module star_rounded(r_outer=50, r_inner=25, thickness=8, n=5, fillet=3) {\n    // Generate points for star with rounded tips\n    pts = [\n        for (i=[0:2*n-1])\n            let (a = 90 + i*180/n)\n            let (r = (i%2==0) ? r_outer : r_inner)\n            r * [cos(a), sin(a)]\n    ];\n    \n    // 2D star shape\n    difference() {\n        offset(fillet) polygon(points=pts);\n        offset(-fillet) polygon(points=pts);\n    }\n    \n    // Extrude to 3D\n    linear_extrude(height=thickness, center=true)\n        offset(fillet) polygon(points=pts);\n}\n\nstar_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "star_hollow",
    "openscad_code": "module star_hollow(\n    outer_r = 50,\n    inner_r = 25,\n    thickness = 8,\n    points = 5,\n    chamfer = 2\n){\n    outer_pts = [\n        for (i = [0:points*2-1])\n            let (ang = i*360/(points*2))\n            [outer_r*cos(ang), outer_r*sin(ang)]\n    ];\n\n    inner_pts = [\n        for (i = [0:points*2-1])\n            let (ang = (i+0.5)*360/(points*2))\n            [inner_r*cos(ang), inner_r*sin(ang)]\n    ];\n\n    difference(){\n        linear_extrude(height = thickness, chamfer = chamfer){\n            polygon(concat(outer_pts, [[0,0]]));\n        }\n        translate([0,0,-0.1]) linear_extrude(height = thickness+0.2, chamfer = chamfer){\n            polygon(concat(inner_pts, [[0,0]]));\n        }\n    }\n}\n\nstar_hollow();",
    "renders": true
  },
  {
    "primitive_shape": "cross",
    "openscad_code": "module rounded_cross(w = 80, h = 12, r = 6) {\n    // 2D cross profile with rounded corners\n    pts = [\n        [-w/2, -r], [-w/2, -w/2], [-r, -w/2],\n        [-r, -w/2 + r], [r, -w/2 + r], [r, -w/2],\n        [w/2, -w/2], [w/2, -r], [w/2 - r, -r],\n        [w/2 - r, r], [w/2, r], [w/2, w/2],\n        [r, w/2], [r, w/2 - r], [-r, w/2 - r],\n        [-r, w/2], [-w/2, w/2], [-w/2, r],\n        [-w/2 + r, r], [-w/2 + r, -r]\n    ];\n    linear_extrude(height = h, center = true, convexity = 10)\n        polygon(pts);\n}\n\nrounded_cross();",
    "renders": true
  },
  {
    "primitive_shape": "cross_latin",
    "openscad_code": "module cross_latin() {\n    // cross-latin primitive (rounded edges, 100 mm tall)\n    thickness = 10;\n    width = 100;\n    height = 100;\n    radius = 5;\n\n    // 2D cross outline with rounded corners\n    pts = [\n        [radius, 0],\n        [width/2 - radius, 0],\n        [width/2, radius],\n        [width/2, width/3 - radius],\n        [width/2 - radius, width/3],\n        [radius, width/3],\n        [0, width/3 - radius],\n        [0, radius],\n    ];\n    \n    // mirror to complete the cross\n    linear_extrude(height = thickness)\n    polygon(concat(\n        pts,\n        mirror([1, 0]) pts,\n        mirror([0, 1]) pts,\n        mirror([-1, 0]) mirror([0, 1]) pts\n    ));\n}\n\ncross_latin();",
    "renders": true
  },
  {
    "primitive_shape": "cross_greek",
    "openscad_code": "module cross_greek() {\n    // 2D cross profile with rounded ends\n    points = [\n        [-15,-5], [-15,5], [-5,5], [-5,15], [5,15], [5,5], [15,5], [15,-5],\n        [5,-5], [5,-15], [-5,-15], [-5,-5]\n    ];\n    \n    // Rounded corners via offset\n    offset(r=3) {\n        polygon(points);\n    }\n    \n    // Extrude to 3D\n    linear_extrude(height=8, center=true, convexity=10) {\n        offset(r=3) {\n            polygon(points);\n        }\n    }\n}\n\ncross_greek();",
    "renders": true
  },
  {
    "primitive_shape": "cross_maltese",
    "openscad_code": "module cross_maltese(h = 10, r = 40, fillet = 3, center = true) {\n    // define the 8-point maltese cross profile\n    pts = [\n        [0, r],                // top\n        [r/3, r/3],            // top-inner\n        [r, 0],                // right\n        [r/3, -r/3],           // right-inner\n        [0, -r],               // bottom\n        [-r/3, -r/3],          // bottom-inner\n        [-r, 0],               // left\n        [-r/3, r/3]            // left-inner\n    ];\n\n    // simple rounded corners via offset\n    offset(fillet)\n        polygon(pts);\n\n    // extrude\n    linear_extrude(height = h, center = center)\n        offset(fillet)\n            polygon(pts);\n}\n\ncross_maltese();",
    "renders": true
  },
  {
    "primitive_shape": "cross_rounded",
    "openscad_code": "module cross_rounded(w = 80, h = 20, r = 8) {\n    arm = w * 0.4;\n    pts = [\n        [-arm/2, -w/2],\n        [ arm/2, -w/2],\n        [ arm/2, -arm/2],\n        [ w/2, -arm/2],\n        [ w/2,  arm/2],\n        [ arm/2,  arm/2],\n        [ arm/2,  w/2],\n        [-arm/2,  w/2],\n        [-arm/2,  arm/2],\n        [-w/2,  arm/2],\n        [-w/2, -arm/2],\n        [-arm/2, -arm/2]\n    ];\n    offset(r = r) polygon(pts);\n    linear_extrude(height = h, center = true) offset(r = r) polygon(pts);\n}\n\ncross_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "cross_hollow",
    "openscad_code": "module cross_hollow(height = 40, arm = 50, thickness = 8, radius = 4) {\n    arm2 = arm / 2;\n    thick2 = thickness / 2;\n    offset = arm2 - thick2;\n\n    points = [\n        [-arm2, -thick2], [-thick2, -thick2], [-thick2, -arm2],\n        [ thick2, -arm2], [ thick2, -thick2], [ arm2, -thick2],\n        [ arm2,  thick2], [ thick2,  thick2], [ thick2,  arm2],\n        [-thick2,  arm2], [-thick2,  thick2], [-arm2,  thick2]\n    ];\n\n    linear_extrude(height = height, center = true, convexity = 10)\n        minkowski() {\n            polygon(points = points);\n            circle(r = radius);\n        }\n}\n\ncross_hollow();",
    "renders": true
  },
  {
    "primitive_shape": "plus",
    "openscad_code": "module plus_primitive(size = 100, thickness = 10, radius = 5) {\n    bar_w = size / 3.5;\n    half = size / 2;\n    hw = bar_w / 2;\n    \n    pts = [\n        [-hw, -half],\n        [hw, -half],\n        [hw, -hw],\n        [half, -hw],\n        [half, hw],\n        [hw, hw],\n        [hw, half],\n        [-hw, half],\n        [-hw, hw],\n        [-half, hw],\n        [-half, -hw],\n        [-hw, -hw]\n    ];\n    \n    linear_extrude(height = thickness) {\n        offset(r = radius) polygon(pts);\n    }\n}\n\nplus_primitive();",
    "renders": true
  },
  {
    "primitive_shape": "plus_wide",
    "openscad_code": "module plus_wide() {\n    // 2D plus outline with rounded ends\n    pts = [\n        [-25, -10], [-10, -10], [-10, -25], [10, -25],\n        [10, -10], [25, -10], [25, 10], [10, 10],\n        [10, 25], [-10, 25], [-10, 10], [-25, 10]\n    ];\n    linear_extrude(height = 10, center = true)\n        polygon(pts);\n}\n\nplus_wide();",
    "renders": true
  },
  {
    "primitive_shape": "plus_narrow",
    "openscad_code": "module plus_narrow(r = 40, t = 8) {\n    // narrow arms, rounded ends\n    arm = r * 0.85;\n    w   = t / 2;\n    \n    pts = [\n        [-w,  arm],          // top\n        [-w,   w],\n        [-arm, w],           // left\n        [-arm,-w],\n        [-w,  -w],\n        [-w, -arm],          // bottom\n        [ w, -arm],\n        [ w, -w],\n        [ arm,-w],           // right\n        [ arm, w],\n        [ w,  w],\n        [ w,  arm]\n    ];\n    \n    linear_extrude(height = t, center = true, convexity = 10)\n        polygon(pts);\n}\n\nplus_narrow();",
    "renders": true
  },
  {
    "primitive_shape": "plus_rounded",
    "openscad_code": "module plus_rounded(size = 60, thickness = 10, radius = 8) {\n    arm = size / 2;\n    r = radius;\n    w = arm - r;\n\n    points = [\n        [-w, -arm], [ w, -arm],\n        [ w, -w],   [ arm, -w],\n        [ arm,  w],  [ w,  w],\n        [ w,  arm], [-w,  arm],\n        [-w,  w],  [-arm,  w],\n        [-arm, -w], [-w, -w]\n    ];\n\n    offset(r = r)\n        polygon(points);\n\n    linear_extrude(height = thickness)\n        offset(r = r)\n            polygon(points);\n}\n\nplus_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "plus_thick",
    "openscad_code": "module plus_thick() {\n    // Cross shape profile with rounded ends\n    profile = [\n        [-15, -5],  // bottom-left\n        [-15, 5],   // top-left\n        [-5, 5],    // inner-left\n        [-5, 15],   // top-center-left\n        [5, 15],    // top-center-right\n        [5, 5],     // inner-right-top\n        [15, 5],    // top-right\n        [15, -5],   // bottom-right\n        [5, -5],    // inner-right-bottom\n        [5, -15],   // bottom-center-right\n        [-5, -15],  // bottom-center-left\n        [-5, -5]    // inner-left-bottom\n    ];\n    \n    linear_extrude(height = 20, center = true)\n        polygon(points = profile);\n}\n\nplus_thick();",
    "renders": true
  },
  {
    "primitive_shape": "plus_thin",
    "openscad_code": "module plus_thin(thickness = 4, width = 50, arm_ratio = 0.35, fillet = 3) {\n    arm = width * arm_ratio;\n    half = width / 2;\n    r = fillet;\n\n    pts = [\n        [-half, -arm/2],\n        [-arm/2 - r, -arm/2],\n        [-arm/2, -half],\n        [ arm/2, -half],\n        [ arm/2, -arm/2 - r],\n        [ half, -arm/2],\n        [ half,  arm/2],\n        [ arm/2 + r,  arm/2],\n        [ arm/2,  half],\n        [-arm/2,  half],\n        [-arm/2,  arm/2 + r],\n        [-half,  arm/2]\n    ];\n\n    linear_extrude(height = thickness, center = true, convexity = 2)\n        polygon(points = pts);\n}\n\nplus_thin();",
    "renders": true
  },
  {
    "primitive_shape": "plus_hollow",
    "openscad_code": "module plus_hollow(size = 60, thickness = 6, hole = 30, r = 4) {\n    bar = size/2 - thickness/2;\n    pts = [\n        [-bar, -thickness/2], [-bar, thickness/2], [-thickness/2, thickness/2],\n        [-thickness/2, bar], [thickness/2, bar], [thickness/2, thickness/2],\n        [bar, thickness/2], [bar, -thickness/2], [thickness/2, -thickness/2],\n        [thickness/2, -bar], [-thickness/2, -bar], [-thickness/2, -thickness/2]\n    ];\n    offset(r = r) {\n        difference() {\n            polygon(pts);\n            circle(d = hole);\n        }\n    }\n    linear_extrude(height = thickness) children();\n}\n\nplus_hollow();",
    "renders": true
  },
  {
    "primitive_shape": "minus",
    "openscad_code": "module minus_shape() {\n    // 2D minus shape with rounded corners\n    p = [\n        [-50, 0],   // left stem\n        [-50, -10],\n        [-10, -10],\n        [-10, -50], // bottom arm\n        [10, -50],\n        [10, -10],\n        [50, -10],  // right stem\n        [50, 10],\n        [10, 10],\n        [10, 50],   // top arm\n        [-10, 50],\n        [-10, 10]\n    ];\n    \n    // Offset to round corners\n    offset(r = 5)\n        polygon(p);\n}\n\nlinear_extrude(height = 10, center = true)\n    minus_shape();",
    "renders": true
  },
  {
    "primitive_shape": "minus_wide",
    "openscad_code": "module minus_wide() {\n    // 2D minus symbol outline with rounded ends\n    p = [\n        [0, 10], [5, 10], [5, 15], [15, 15], [15, 10],\n        [45, 10], [50, 10], [50, 0], [45, 0], [15, 0],\n        [15, -5], [5, -5], [5, 0], [0, 0]\n    ];\n    \n    linear_extrude(height = 8)\n        polygon(p);\n}\n\nminus_wide();",
    "renders": true
  },
  {
    "primitive_shape": "minus_narrow",
    "openscad_code": "// minus_narrow: a narrow rectangular bar with rounded ends\n// medium complexity via chamfered edges\n\nmodule minus_narrow(\n    length = 100,\n    width  = 12,\n    thick  = 6,\n    chamf  = 1\n){\n    // 2D profile of the rounded rectangle\n    profile = [\n        for(a=[0:5:180]) [length/2 - width/2 + (width/2)*cos(a), (width/2)*sin(a)],\n        for(a=[180:5:360]) [-length/2 + width/2 + (width/2)*cos(a), (width/2)*sin(a)]\n    ];\n\n    // extrude profile to thickness with chamfered top & bottom\n    linear_extrude(height = thick, center = true, scale = [1-chamf/thick, 1-chamf/thick])\n        polygon(profile);\n}\n\nminus_narrow();",
    "renders": true
  },
  {
    "primitive_shape": "minus_long",
    "openscad_code": "module minus_long() {\n    // 2D profile of a horizontal minus sign with rounded ends\n    width = 100;\n    height = 30;\n    radius = height / 2;\n    \n    points = [\n        [radius, 0],\n        [width - radius, 0],\n        [width, radius],\n        [width, height - radius],\n        [width - radius, height],\n        [radius, height],\n        [0, height - radius],\n        [0, radius]\n    ];\n    \n    linear_extrude(height = 20, center = true)\n        polygon(points = points);\n}\n\nminus_long();",
    "renders": true
  },
  {
    "primitive_shape": "minus_short",
    "openscad_code": "module minus_short() {\n    // 2D outline of a short dash\n    pts = [\n        [-20, -5],\n        [ 20, -5],\n        [ 20,  5],\n        [-20,  5]\n    ];\n    \n    // Rounded corners via offset\n    offset(r = 3) {\n        polygon(pts);\n    }\n}\n\nlinear_extrude(height = 8, center = true)\n    minus_short();",
    "renders": true
  },
  {
    "primitive_shape": "diamond",
    "openscad_code": "module diamond(h = 40, r = 50, fillet = 3) {\n    // Octagon profile with filleted edges\n    n = 8;\n    a = 360 / n;\n    pts = [\n        for (i = [0:n-1])\n            let (ang = i * a)\n            [r * cos(ang), r * sin(ang)]\n    ];\n\n    // Offset inwards for fillet\n    offset_pts = offset(delta = -fillet, $fn = 32) polygon(pts);\n\n    // Extrude and add slight top/bottom rounding\n    linear_extrude(height = h, scale = [0.7, 0.7], convexity = 10)\n        offset_pts;\n}\n\nrotate([90, 0, 0])\n    diamond();",
    "renders": true
  },
  {
    "primitive_shape": "diamond_square",
    "openscad_code": "module diamond_square(size = 80, thickness = 12, radius = 8) {\n    r = size/2;\n    s = r * cos(45);\n    \n    points = [\n        [s, s],\n        [-s, s],\n        [-s, -s],\n        [s, -s]\n    ];\n    \n    linear_extrude(height = thickness, center = true, convexity = 10)\n        offset(r = radius)\n            polygon(points = points);\n}\n\ndiamond_square();",
    "renders": true
  },
  {
    "primitive_shape": "diamond_wide",
    "openscad_code": "module diamond_wide(h = 20, w = 100, t = 60) {\n    // 2D rounded diamond profile\n    offset = w * 0.2;\n    points = [\n        [0, w/2 - offset],        // top\n        [t/2 - offset, 0],        // right\n        [0, -w/2 + offset],       // bottom\n        [-t/2 + offset, 0]        // left\n    ];\n\n    // Rounded edges via hull of circles\n    hull() {\n        for (p = points) translate(p) circle(offset);\n    }\n}\n\n// Extrude the rounded diamond\nlinear_extrude(height = 20, center = true, convexity = 10)\n    diamond_wide();",
    "renders": true
  },
  {
    "primitive_shape": "diamond_narrow",
    "openscad_code": "module diamond_narrow(h = 8, w = 60, l = 100, r = 3) {\n    // 2D profile of a narrow diamond with rounded tips\n    pts = [\n        [0, 0],\n        [w/2 - r, r],\n        [w/2 - r, l/2 - r],\n        [r, l/2 - r],\n        [r, l/2 + r],\n        [w/2 - r, l/2 + r],\n        [w/2 - r, l - r],\n        [0, l],\n        [-w/2 + r, l - r],\n        [-w/2 + r, l/2 + r],\n        [-r, l/2 + r],\n        [-r, l/2 - r],\n        [-w/2 + r, l/2 - r],\n        [-w/2 + r, r],\n        [0, 0]\n    ];\n    \n    // Simple extrusion to create the 3D diamond\n    linear_extrude(height = h, center = true, convexity = 4)\n        offset(r = r)\n            polygon(pts);\n}\n\n// Render the primitive\ndiamond_narrow();",
    "renders": true
  },
  {
    "primitive_shape": "diamond_rotated",
    "openscad_code": "module diamond_rotated(h = 40, r = 50, fillet = 3) {\n    // 2D diamond profile with rounded corners\n    points = [\n        [0, r],\n        [r, 0],\n        [0, -r],\n        [-r, 0]\n    ];\n    \n    // Fillet radii for each corner\n    rads = [fillet, fillet, fillet, fillet];\n    \n    linear_extrude(height = h, center = true, twist = 15)\n        offset(r = rads)\n            polygon(points);\n}\n\ndiamond_rotated();",
    "renders": true
  },
  {
    "primitive_shape": "diamond_rounded",
    "openscad_code": "module diamond_rounded(h = 20, r = 40) {\n    // 2D diamond outline with rounded corners\n    $fn = 32;\n    angle_step = 360 / 8;\n    \n    // Generate diamond points with rounded corners\n    points = [\n        for (i = [0:7])\n            let (a = i * angle_step)\n            r * [cos(a) * (i % 2 ? 1 : 0.7), sin(a) * (i % 2 ? 0.7 : 1)]\n    ];\n    \n    // Create rounded 2D shape\n    offset(r = 5) \n        polygon(points = points);\n    \n    // Extrude to 3D\n    linear_extrude(height = h, center = true)\n        offset(r = 5) \n            polygon(points = points);\n}\n\n// Render the diamond\ndiamond_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "diamond_elongated",
    "openscad_code": "module diamond_elongated(h = 80, w = 50, t = 12, r = 4) {\n    // diamond profile points\n    pts = [\n        [0, w/2],\n        [w/3, w/4],\n        [w/2, 0],\n        [w/3, -w/4],\n        [0, -w/2],\n        [-w/3, -w/4],\n        [-w/2, 0],\n        [-w/3, w/4]\n    ];\n    \n    // extrude with rounded top & bottom\n    linear_extrude(height = h, center = true, convexity = 10, twist = 5)\n        offset(r = r) polygon(pts);\n}\n\ndiamond_elongated();",
    "renders": true
  },
  {
    "primitive_shape": "trapezoid",
    "openscad_code": "// Trapezoid prism with rounded top edges\nmodule trapezoid(h = 30, w_bottom = 100, w_top = 60, depth = 40, r = 5) {\n    // 2D profile for rounded top\n    profile = [\n        [0, 0],\n        [w_bottom, 0],\n        [w_top - r, h - r],\n        [w_top - r, h],\n        [r, h],\n        [r, h - r]\n    ];\n    \n    // Extrude the profile\n    linear_extrude(height = depth, center = true)\n        polygon(profile);\n}\n\ntrapezoid();",
    "renders": true
  },
  {
    "primitive_shape": "trapezoid_isosceles",
    "openscad_code": "module trapezoid_isosceles(h=20, a=80, b=40, c=60, r=3) {\n    // compute the height of the trapezoid\n    y = sqrt(c*c - pow((a - b)/2, 2));\n\n    // 2D profile with rounded corners\n    offset(r) polygon([\n        [-a/2, 0],\n        [a/2, 0],\n        [b/2, y],\n        [-b/2, y]\n    ]);\n\n    // extrude to 3D\n    linear_extrude(height = h, center = true)\n        offset(r) polygon([\n            [-a/2, 0],\n            [a/2, 0],\n            [b/2, y],\n            [-b/2, y]\n        ]);\n}\n\ntrapezoid_isosceles();",
    "renders": true
  },
  {
    "primitive_shape": "trapezoid_right",
    "openscad_code": "module trapezoid_right(h = 30, base = 80, top = 40, height = 60, r = 3) {\n    // 2D trapezoid with rounded right-angle corners\n    off = 0.01;  // small offset to avoid z-fighting\n    points = [\n        [r, 0],\n        [base - r, 0],\n        [base, r],\n        [base, height - r],\n        [top + r, height - r],\n        [top, height - r + r],\n        [top, height],\n        [r, height],\n        [0, height - r],\n        [0, r]\n    ];\n    paths = [\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    ];\n    linear_extrude(height = h, center = true, convexity = 10)\n        offset(r = r)\n            polygon(points = points, paths = paths);\n}\n\ntrapezoid_right();",
    "renders": true
  },
  {
    "primitive_shape": "trapezoid_slanted",
    "openscad_code": "module trapezoid_slanted(h = 20, top = 40, base = 80, height = 60, radius = 5) {\n    // 2D profile with rounded corners\n    p = [\n        [radius, 0],\n        [base - radius, 0],\n        [base - radius, 0],\n        [base, radius],\n        [base, height - radius],\n        [base - radius, height],\n        [top + radius, height],\n        [top, height - radius],\n        [top, radius],\n        [top - radius, 0]\n    ];\n    \n    // Extrude the profile\n    linear_extrude(height = h, convexity = 10)\n        polygon(points = p);\n}\n\ntrapezoid_slanted();",
    "renders": true
  },
  {
    "primitive_shape": "trapezoid_wide_base",
    "openscad_code": "module trapezoid_wide_base(h = 20, r = 2) {\n    // 2D profile with rounded bottom corners\n    top_w = 100;\n    bot_w = 140;\n    depth = 60;\n    profile = [\n        [-bot_w/2, 0],\n        [-bot_w/2 + r, r],\n        [-top_w/2 + r, depth - r],\n        [-top_w/2, depth],\n        [ top_w/2, depth],\n        [ top_w/2 - r, depth - r],\n        [ bot_w/2 - r, r],\n        [ bot_w/2, 0]\n    ];\n    \n    // rounded bottom edge\n    difference() {\n        linear_extrude(height = h, center = true) polygon(profile);\n        // remove bottom edge to round it\n        translate([0, -r, -h/2 - 0.1])\n            cube([bot_w + 1, r, h + 0.2], center = true);\n    }\n    \n    // add cylinder to round bottom\n    translate([0, 0, -h/2])\n        cube([bot_w, r*2, r*2], center = true);\n}\n\ntrapezoid_wide_base();",
    "renders": true
  },
  {
    "primitive_shape": "trapezoid_narrow_base",
    "openscad_code": "module trapezoid_narrow_base(h = 20, r = 3) {\n    top_w = 30;\n    bot_w = 60;\n    depth = 80;\n    \n    points = [\n        [0, 0],\n        [bot_w, 0],\n        [bot_w - r, r],\n        [top_w/2 + r, depth - r],\n        [top_w/2, depth],\n        [-top_w/2, depth],\n        [-top_w/2 - r, depth - r],\n        [r, r]\n    ];\n    \n    difference() {\n        linear_extrude(height = h, center = true, convexity = 4)\n            polygon(points);\n            \n        for(i = [0:1])\n            translate([0, depth/2 + h/2 - 2, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = depth + 4, r = 2, $fn = 16);\n    }\n}\n\ntrapezoid_narrow_base();",
    "renders": true
  },
  {
    "primitive_shape": "trapezoid_rounded",
    "openscad_code": "module trapezoid_rounded(\n    w_bottom = 80,\n    w_top    = 40,\n    height   = 30,\n    thick    = 10,\n    r        = 5\n){\n    // 2D profile of the trapezoid with rounded top corners\n    off = r * (1 - cos(45));        // corner offset for tangency\n    polygon([\n        [0,         0],\n        [w_bottom,  0],\n        [w_bottom,  height - r],\n        [w_bottom - r, height],\n        [w_top + r,  height],\n        [w_top,      height - r],\n        [w_top,      0]\n    ]);\n\n    // Extrude to 3D\n    linear_extrude(thick)\n        polygon([\n            [0,         0],\n            [w_bottom,  0],\n            [w_bottom,  height - r],\n            [w_bottom - off, height - off],\n            [w_top  + off, height - off],\n            [w_top,      height - r],\n            [w_top,      0]\n        ]);\n}\n\ntrapezoid_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "parallelogram",
    "openscad_code": "// Parallelogram prism with rounded top edges\nmodule parallelogram_prism(\n    length = 80,\n    width = 50,\n    height = 20,\n    angle = 30,\n    radius = 3\n) {\n    shear = tan(angle) * width;\n    \n    // 2D base profile\n    profile = [\n        [0, 0],\n        [length, 0],\n        [length + shear, width],\n        [shear, width]\n    ];\n    \n    // Extrude with rounded top edges\n    linear_extrude(height = height, convexity = 10)\n        offset(r = -radius)\n            offset(r = radius)\n                polygon(points = profile);\n}\n\nparallelogram_prism();",
    "renders": true
  },
  {
    "primitive_shape": "parallelogram_square",
    "openscad_code": "module parallelogram_square(h = 20, side = 80, shear = 30, r = 5) {\n    pts = [\n        [r, 0],\n        [side - r, 0],\n        [side - r + shear, side],\n        [r + shear, side]\n    ];\n    difference() {\n        linear_extrude(height = h, convexity = 10)\n            offset(r = r)\n                polygon(concat(\n                    [[0, 0]],\n                    arc(pts[0], pts[1], r, 0),\n                    [[side, 0]],\n                    arc(pts[1], pts[2], r, 90),\n                    [[side + shear, side]],\n                    arc(pts[2], pts[3], r, 180),\n                    [[shear, side]],\n                    arc(pts[3], pts[0], r, 270),\n                    [[0, 0]]\n                ));\n        translate([0, 0, -1])\n            linear_extrude(height = h + 2)\n                offset(r = -r)\n                    polygon(pts);\n    }\n}\n\nmodule arc(p1, p2, r, a) = let(\n    steps = 4,\n    da = 90 / steps\n) [for(i = [0 : steps]) \n    p2 + [r * cos(a + i * da), r * sin(a + i * da)]\n];\n\nparallelogram_square();",
    "renders": true
  },
  {
    "primitive_shape": "parallelogram_rectangular",
    "openscad_code": "module parallelogram_rectangular(\n    base   = 80,   // length of the bottom edge\n    top    = 80,   // length of the top edge\n    height = 50,   // vertical distance between base and top\n    width  = 12,   // extrusion thickness\n    fillet = 3     // corner radius\n){\n    shear = (base - top)/2;           // horizontal offset between top & bottom\n    \n    // rounded parallelogram profile\n    profile = [\n        [0,          0],\n        [base,       0],\n        [base + shear, height],\n        [shear,      height]\n    ];\n    \n    // create 2D shape with rounded corners (simple offset trick)\n    offset(r = fillet) offset(r = -fillet)\n        polygon(profile);\n    \n    linear_extrude(height = width, center = true)\n        offset(r = fillet) offset(r = -fillet)\n            polygon(profile);\n}\n\nparallelogram_rectangular();",
    "renders": true
  },
  {
    "primitive_shape": "parallelogram_rotated",
    "openscad_code": "// Parallelogram with rounded top edges (medium complexity)\nmodule parallelogram_rotated(\n    width = 80,      // base width\n    height = 50,     // height\n    thickness = 12,  // extrusion depth\n    skew = 20,       // horizontal skew\n    radius = 4       // rounding radius\n) {\n    // 2D profile with rounded top two corners\n    profile = [\n        [0, 0],\n        [width, 0],\n        [width + skew, height - radius],\n        for(a = [0:5:90]) [width + skew - radius*sin(a), height - radius + radius*cos(a)],\n        [skew + radius, height],\n        for(a = [90:5:180]) [skew + radius*sin(a), height - radius + radius*cos(a)],\n        [0, radius],\n        for(a = [180:5:270]) [radius - radius*sin(a), radius - radius*cos(a)]\n    ];\n    \n    linear_extrude(height = thickness, center = true)\n        polygon(points = profile);\n}\n\nparallelogram_rotated();",
    "renders": true
  },
  {
    "primitive_shape": "parallelogram_rounded",
    "openscad_code": "module parallelogram_rounded(w = 80, h = 50, thickness = 12, r = 6, angle = 30) {\n    shear = h * tan(angle);\n    points = [\n        [r, 0],\n        [w - r, 0],\n        [w, r],\n        [w + shear - r, h],\n        [shear + r, h],\n        [shear, h - r],\n        [shear, r],\n        [0, r]\n    ];\n    \n    difference() {\n        linear_extrude(height = thickness) {\n            offset(r = r) offset(r = -r) polygon(points);\n        }\n    }\n}\n\nparallelogram_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "rhombus",
    "openscad_code": "// Rhombus with rounded edges (medium complexity)\n\nmodule rounded_rhombus(width = 100, height = 60, thickness = 10, radius = 5) {\n    // Calculate rhombus corner positions\n    w2 = width / 2;\n    h2 = height / 2;\n    \n    // Create outer rhombus polygon with rounded edges\n    outer_points = [\n        [0, h2],\n        [w2, 0],\n        [0, -h2],\n        [-w2, 0]\n    ];\n    \n    // Create inner offset polygon for rounded edges\n    inner_points = [\n        [0, h2 - radius],\n        [w2 - radius, 0],\n        [0, -h2 + radius],\n        [-w2 + radius, 0]\n    ];\n    \n    // Generate the shape with rounded edges\n    minkowski() {\n        polygon(points = inner_points);\n        circle(r = radius, $fn = 16);\n    }\n    \n    // Extrude to 3D\n    linear_extrude(height = thickness, center = true)\n        minkowski() {\n            polygon(points = inner_points);\n            circle(r = radius, $fn = 16);\n        }\n}\n\n// Generate the rhombus\nrounded_rhombus();",
    "renders": true
  },
  {
    "primitive_shape": "rhombus_square",
    "openscad_code": "// rhombus_square primitive – extruded rhombus with rounded edges\nmodule rhombus_square(height=10, side=50, corner_r=4) {\n    a = side * cos(30);          // half-diagonals for 60° internal angles\n    b = side * sin(30);\n    \n    // 2D outline with rounded corners\n    offset(r=-corner_r)\n    offset(r=corner_r)\n        polygon(points=[[0, b], [a, 0], [0, -b], [-a, 0]]);\n    \n    linear_extrude(height=height, center=true)\n        offset(r=-corner_r)\n        offset(r=corner_r)\n            polygon(points=[[0, b], [a, 0], [0, -b], [-a, 0]]);\n}\n\nrhombus_square();",
    "renders": true
  },
  {
    "primitive_shape": "rhombus_elongated",
    "openscad_code": "module rhombus_elongated(h = 20, a = 60, b = 30, r = 5) {\n    // 2D rhombus with rounded corners\n    points = [\n        [0, b],\n        [a, 0],\n        [0, -b],\n        [-a, 0]\n    ];\n    \n    offset(r = r) polygon(points);\n    \n    linear_extrude(height = h, center = true) {\n        offset(r = r) polygon(points);\n    }\n}\n\nrhombus_elongated();",
    "renders": true
  },
  {
    "primitive_shape": "rhombus_rotated",
    "openscad_code": "module rhombus_rotated(h = 20, side = 60, corner_r = 5) {\n    // rotated so one diagonal is horizontal\n    a = side / 2;                    // half of diagonal\n    b = sqrt(side*side - a*a);       // other half-diagonal\n    \n    // rounded corners via minkowski\n    linear_extrude(height = h, center = true)\n    minkowski() {\n        polygon(points = [\n            [ 0,  b],\n            [ a,  0],\n            [ 0, -b],\n            [-a,  0]\n        ]);\n        circle(r = corner_r, $fn = 16);\n    }\n}\n\nrhombus_rotated();",
    "renders": true
  },
  {
    "primitive_shape": "rhombus_rounded",
    "openscad_code": "module rhombus_rounded(size = 60, thickness = 10, radius = 6) {\n    w = size / 2;\n    pts = [\n        [-w, 0],\n        [0, -w],\n        [w, 0],\n        [0, w]\n    ];\n    \n    offset(r = radius) offset(r = -radius) polygon(pts);\n}\n\nlinear_extrude(height = 10)\n    rhombus_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "kite",
    "openscad_code": "module kite_primitive(h = 5, r = 2){\n    // kite profile points (top, right, bottom-right, center, bottom-left, left)\n    points = [[0,30], [24,0], [12,-30], [0,-18], [-12,-30], [-24,0]];\n    // rounded edges via offset\n    offset(r = r)\n        polygon(points);\n    linear_extrude(height = h, center = true)\n        offset(r = r)\n            polygon(points);\n}\n\nkite_primitive();",
    "renders": true
  },
  {
    "primitive_shape": "kite_tall",
    "openscad_code": "// kite_tall primitive – simple kite-shaped prism with rounded corners\nmodule kite_tall(h = 8) {\n    points = [\n        [0, 50],      // top\n        [30, 0],      // upper right\n        [10, -40],    // lower right\n        [-10, -40],   // lower left\n        [-30, 0]      // upper left\n    ];\n\n    // build 2-D kite then extrude\n    linear_extrude(height = h, center = true, convexity = 4)\n        offset(r = 2) polygon(points);\n}\n\nkite_tall();",
    "renders": true
  },
  {
    "primitive_shape": "kite_wide",
    "openscad_code": "module kite_wide() {\n    // wide kite profile with rounded edges\n    linear_extrude(height = 4, center = true) {\n        offset(r = 3) offset(r = -3) polygon(points = [\n            [0, 50],\n            [40, 0],\n            [0, -30],\n            [-40, 0]\n        ]);\n    }\n}\n\nkite_wide();",
    "renders": true
  },
  {
    "primitive_shape": "kite_sharp",
    "openscad_code": "module kite_sharp(height = 5, width = 80, stretch = 1.2) {\n    // kite cross-section with gentle rounded edges\n    offset(r = 2)\n        polygon(points=[\n            [0,           width/2],       // top\n            [width*stretch, 0],          // right\n            [0,          -width/2],      // bottom\n            [-width*stretch, 0]          // left\n        ]);\n}\n\nlinear_extrude(height = 5)\n    kite_sharp();",
    "renders": true
  },
  {
    "primitive_shape": "kite_rounded",
    "openscad_code": "module kite_rounded(h = 8, w = 50, r = 3) {\n    // half-widths\n    hw = w/2;\n    hh = w/1.5;\n    \n    // corners with radius\n    pts = [\n        [0, hh - r],           // top\n        [r, hh - r],\n        [hw - r, r],\n        [hw - r, 0],           // right\n        [hw - r, -r],\n        [r, -hh + r],\n        [0, -hh + r],          // bottom\n        [-r, -hh + r],\n        [-hw + r, -r],\n        [-hw + r, 0],          // left\n        [-hw + r, r],\n        [-r, hh - r]\n    ];\n\n    // extrude the rounded kite\n    linear_extrude(height = h, center = true, convexity = 10)\n        polygon(points = pts);\n}\n\nkite_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "arrow",
    "openscad_code": "// Arrow primitive – extruded 2D profile with rounded tail\nmodule arrow(l = 100, w = 12, h = 6) {\n    tip = l * 0.25;\n    shaft = l - tip;\n\n    profile = [\n        [0, 0],                // tail center\n        [0, w/2],              // tail outer\n        [shaft, w/2],          // shaft top\n        [shaft, w],            // arrowhead base top\n        [l, 0],                // arrow tip\n        [shaft, -w],           // arrowhead base bottom\n        [shaft, -w/2],         // shaft bottom\n        [0, -w/2]              // tail outer bottom\n    ];\n\n    linear_extrude(height = h, center = true, convexity = 10)\n        polygon(profile);\n}\n\narrow();",
    "renders": true
  },
  {
    "primitive_shape": "arrow_simple",
    "openscad_code": "module arrow_simple(h=8, r=3, head_l=15, head_r=7) {\n    shaft_l = 50;\n    // 2D profile\n    profile = [\n        [0, -r], [shaft_l, -r], [shaft_l, -head_r],\n        [shaft_l + head_l, 0],\n        [shaft_l,  head_r], [shaft_l,  r],\n        [0,  r]\n    ];\n    linear_extrude(height = h, center = true, convexity = 10)\n        polygon(points = profile);\n}\n\narrow_simple();",
    "renders": true
  },
  {
    "primitive_shape": "arrow_double",
    "openscad_code": "module arrow_double(h = 8, r = 30, stem = 20, tip = 15) {\n    pts = [\n        [0, 0],\n        [r, 0],\n        [r, h/2],\n        [stem, h/2],\n        [stem, tip],\n        [0, tip/2],\n        [-stem, tip],\n        [-stem, h/2],\n        [-r, h/2],\n        [-r, 0]\n    ];\n    linear_extrude(height = h, center = true) polygon(pts);\n}\n\narrow_double();",
    "renders": true
  },
  {
    "primitive_shape": "arrow_wide",
    "openscad_code": "// arrow_wide primitive shape\nmodule arrow_wide(width = 80, shaft_len = 120, head_len = 60, thickness = 10, radius = 3) {\n    w2 = width / 2;\n    // 2D arrow profile\n    points = [\n        [0, 0],                      // tip\n        [head_len, w2],              // top right head\n        [head_len, w2 - 15],         // inner top right head\n        [shaft_len, w2 - 15],        // top right shaft\n        [shaft_len, -(w2 - 15)],     // bottom right shaft\n        [head_len, -(w2 - 15)],      // inner bottom right head\n        [head_len, -w2],             // bottom right head\n    ];\n    // Close polygon\n    polygon(concat(points, [[0, 0]]));\n    \n    // 3D extrusion with rounded edges\n    linear_extrude(height = thickness, center = true, convexity = 10)\n        offset(r = radius) polygon(concat(points, [[0, 0]]));\n}\n\narrow_wide();",
    "renders": true
  },
  {
    "primitive_shape": "arrow_narrow",
    "openscad_code": "module arrow_narrow() {\n    // 2D arrow profile with rounded tail\n    profile = [\n        [ 0,   0],   // tail center\n        [-5, -15],   // tail left\n        [45, -15],   // shaft bottom\n        [45, -25],   // arrowhead bottom\n        [80,   0],   // arrowhead tip\n        [45,  25],   // arrowhead top\n        [45,  15],   // shaft top\n        [-5,  15]    // tail right\n    ];\n\n    linear_extrude(height = 3, center = true, convexity = 10)\n        polygon(points = profile);\n}\n\narrow_narrow();",
    "renders": true
  },
  {
    "primitive_shape": "arrow_long",
    "openscad_code": "module arrow_long() {\n    // 2D arrow profile with rounded head\n    arrow_pts = [\n        [0, 0],          // tail inside left\n        [5, -4],         // tail outside left\n        [80, -4],        // shaft bottom left\n        [80, -10],       // head bottom\n        [100, 0],        // tip\n        [80, 10],        // head top\n        [80, 4],         // shaft top right\n        [5, 4],          // tail outside right\n        [0, 0]           // tail inside right (close)\n    ];\n    \n    linear_extrude(height = 8, center = true, convexity = 4)\n        polygon(arrow_pts);\n}\n\narrow_long();",
    "renders": true
  },
  {
    "primitive_shape": "arrow_short",
    "openscad_code": "module arrow_short(height = 10, width = 40, thickness = 5) {\n    head_len = width * 0.4;\n    shaft_len = width - head_len;\n    half_h = height * 0.5;\n    \n    pts = [\n        [0, 0],                       // arrow tip\n        [head_len, half_h * 0.6],     // upper head edge\n        [head_len, half_h * 0.2],     // upper shaft edge\n        [shaft_len, half_h * 0.2],    // shaft upper right\n        [shaft_len, -half_h * 0.2],   // shaft lower right\n        [head_len, -half_h * 0.2],    // lower shaft edge\n        [head_len, -half_h * 0.6],    // lower head edge\n        [0, 0]                        // close polygon\n    ];\n    \n    linear_extrude(height = thickness, center = true)\n        polygon(points = pts);\n}\n\narrow_short();",
    "renders": true
  },
  {
    "primitive_shape": "arrow_rounded",
    "openscad_code": "module arrow_rounded() {\n    // 2D profile of a rounded arrow\n    polygon(points=[\n        [0, 0],          // tail inside left\n        [0, 8],          // tail outside left\n        [35, 8],         // shaft top left\n        [35, 12],        // shaft top right\n        [0, 12],         // tail outside right\n        [0, 20],         // tail inside right\n        [50, 20],        // arrow tip\n        [40, 10],        // arrow right wing\n        [42, 8],         // arrow right curve\n        [50, 0]          // arrow bottom tip\n    ]);\n}\n\nlinear_extrude(height = 5, center = true)\n    arrow_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "heart",
    "openscad_code": "module heart_primitive(h = 20, r = 50, fillet = 5) {\n    // heart profile\n    heart_pts = [\n        [0, -r * 0.65],\n        [r * 0.35, -r],\n        [r * 0.9, -r * 0.5],\n        [r * 0.9,  r * 0.3],\n        [r * 0.5,  r * 0.9],\n        [0,  r],\n        [-r * 0.5,  r * 0.9],\n        [-r * 0.9,  r * 0.3],\n        [-r * 0.9, -r * 0.5],\n        [-r * 0.35, -r]\n    ];\n    \n    // rounded extrusion\n    linear_extrude(height = h, center = true, convexity = 4, $fn = 32) {\n        offset(r = fillet) polygon(heart_pts);\n    }\n}\n\nheart_primitive();",
    "renders": true
  },
  {
    "primitive_shape": "heart_simple",
    "openscad_code": "// heart_simple - medium complexity rounded heart primitive\nmodule heart_simple(h = 10, r = 25) {\n    // heart polygon with rounded top lobes\n    polygon(points = [\n        [0, -r*1.2],\n        [r*0.5, -r*0.6],\n        [r*0.8, -r*0.6],\n        [r, -r*0.3],\n        [r*0.7, r*0.4],\n        [0, r*0.7],\n        [-r*0.7, r*0.4],\n        [-r, -r*0.3],\n        [-r*0.8, -r*0.6],\n        [-r*0.5, -r*0.6]\n    ]);\n}\n\n// extrude to 3D with slight rounding on edges\nlinear_extrude(height = 10, center = true, convexity = 10, $fn = 64)\n    offset(r = 1.5) offset(r = -1.5) heart_simple();",
    "renders": true
  },
  {
    "primitive_shape": "heart_rounded",
    "openscad_code": "module heart_rounded(h = 20, r = 1) {\n    pts = [\n        [0, 0],\n        [-40, -35], [-25, -50], [0, -60],\n        [25, -50],  [40, -35],  [0, 0]\n    ];\n    \n    difference() {\n        offset(r = r) polygon(pts);\n        offset(r = -r) polygon(pts);\n    }\n    linear_extrude(height = h, convexity = 4) offset(r = r) polygon(pts);\n}\n\nheart_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "heart_elongated",
    "openscad_code": "module heart_elongated(height = 60, width = 100, thickness = 30) {\n    // Define heart profile points\n    points = [\n        [0, -50],          // bottom point\n        [-20, -30],        // left bottom curve\n        [-50, -15],        // left side\n        [-50, 30],         // left top\n        [-25, 50],         // left lobe top\n        [0, 40],           // center dip\n        [25, 50],          // right lobe top\n        [50, 30],          // right top\n        [50, -15],         // right side\n        [20, -30]          // right bottom curve\n    ];\n\n    // 2D heart shape\n    heart_2d = polygon(points);\n\n    // Elongated via linear extrude\n    linear_extrude(height = thickness, center = true, convexity = 10)\n        scale([width/100, width/100, 1])\n        heart_2d;\n}\n\nheart_elongated();",
    "renders": true
  },
  {
    "primitive_shape": "crescent",
    "openscad_code": "// Crescent primitive with rounded inner and outer edges\nmodule crescent(outer_radius = 50, inner_radius = 40, thickness = 10, width = 70) {\n    // Calculate positions for the inner circle offset\n    offset = outer_radius - width/2;\n    \n    // Create outer circle\n    outer = circle(r = outer_radius, $fn = 64);\n    \n    // Create offset inner circle\n    translate([offset, 0, 0])\n        inner = circle(r = inner_radius, $fn = 64);\n    \n    // Difference to create crescent shape\n    crescent_2d = difference() {\n        outer;\n        inner;\n    };\n    \n    // Extrude to 3D\n    linear_extrude(height = thickness)\n        crescent_2d;\n}\n\n// Render the crescent\ncrescent();",
    "renders": true
  },
  {
    "primitive_shape": "crescent_wide",
    "openscad_code": "module crescent_wide() {\n    // Crescent parameters\n    outer_r = 40;\n    inner_r = 30;\n    width = 20;\n    angle = 60;  // opening angle\n    \n    // 2D crescent profile\n    difference() {\n        // Outer circle\n        circle(r = outer_r, $fn = 64);\n        \n        // Inner circle offset\n        translate([outer_r - inner_r + 5, 0, 0])\n            circle(r = inner_r, $fn = 64);\n    }\n    \n    // Extrude to 3D\n    linear_extrude(height = width, center = true) {\n        // Crescent polygon with rounded edges\n        polygon(\n            points = concat(\n                // Outer arc\n                [for(i = [-angle:-2:angle]) [outer_r * cos(i), outer_r * sin(i)]],\n                // Inner arc (reversed)\n                [for(i = [angle:-2:-angle]) [inner_r * cos(i) + (outer_r - inner_r + 5), inner_r * sin(i)]]\n            )\n        );\n    }\n}\n\ncrescent_wide();",
    "renders": true
  },
  {
    "primitive_shape": "crescent_narrow",
    "openscad_code": "module crescent_narrow(r_outer = 50, r_inner = 40, thickness = 8, angle = 60) {\n    // Crescent as difference of two offset circles\n    difference() {\n        // Outer circle segment\n        rotate([0, 0, -angle/2])\n            linear_extrude(height = thickness)\n                circle(r = r_outer);\n\n        // Inner circle segment (offset creates narrow crescent)\n        translate([r_outer - r_inner, 0, 0])\n            rotate([0, 0, -angle/2])\n                linear_extrude(height = thickness)\n                    circle(r = r_inner);\n    }\n}\n\n// Render the crescent\ncrescent_narrow();",
    "renders": true
  },
  {
    "primitive_shape": "crescent_rounded",
    "openscad_code": "module crescent_rounded(r = 25, thickness = 10, gap = 15, round_r = 3) {\n    inner_r = r - gap;\n    outer_pts = [\n        [r, 0],\n        for(a = [5:5:175]) [r*cos(a), r*sin(a)],\n        [-r, 0],\n        [r, 0]\n    ];\n    inner_pts = [\n        [inner_r, 0],\n        for(a = [5:5:175]) [inner_r*cos(a), inner_r*sin(a)],\n        [-inner_r, 0],\n        [inner_r, 0]\n    ];\n    \n    difference() {\n        offset(delta = round_r) polygon(outer_pts);\n        offset(delta = round_r) polygon(inner_pts);\n    }\n    linear_extrude(height = thickness) {\n        difference() {\n            offset(delta = round_r) polygon(outer_pts);\n            offset(delta = round_r) polygon(inner_pts);\n        }\n    }\n}\n\ncrescent_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "crescent_thick",
    "openscad_code": "module crescent_thick(r_outer = 40, r_inner = 30, thickness = 10, offset = 15) {\n    // Crescent profile\n    difference() {\n        circle(r_outer);\n        translate([offset, 0, 0])\n            circle(r_inner);\n    }\n}\n\nlinear_extrude(height = thickness)\n    crescent_thick();",
    "renders": true
  },
  {
    "primitive_shape": "crescent_thin",
    "openscad_code": "module crescent_thin(thickness = 3) {\n    outer_r = 50;\n    inner_r = 40;\n    offset_x = 15;\n    \n    points = [\n        for(a = [0:5:180]) [outer_r*cos(a), outer_r*sin(a)],\n        for(a = [180:-5:0]) [inner_r*cos(a)+offset_x, inner_r*sin(a)]\n    ];\n    \n    linear_extrude(height = thickness)\n        polygon(points);\n}\n\ncrescent_thin();",
    "renders": true
  },
  {
    "primitive_shape": "oval",
    "openscad_code": "module oval_primitive(h = 20, rx = 35, ry = 20, fillet = 5) {\n    // 2D rounded oval\n    $fn = 48;\n    oval_pts = [\n        for(a = [0:1:$fn-1])\n        let(ang = a*360/$fn)\n        [rx*cos(ang) - (abs(cos(ang)) < 0.01 ? 0 : (cos(ang) > 0 ? fillet : -fillet)),\n         ry*sin(ang) - (abs(sin(ang)) < 0.01 ? 0 : (sin(ang) > 0 ? fillet : -fillet))]\n    ];\n    linear_extrude(height = h)\n        offset(r = fillet)\n            polygon(points = oval_pts);\n}\n\noval_primitive();",
    "renders": true
  },
  {
    "primitive_shape": "oval_wide",
    "openscad_code": "module oval_wide() {\n    // Rounded wide oval with subtle top curvature\n    width = 80;\n    height = 40;\n    thickness = 12;\n\n    // Oval profile with rounded ends\n    points = [\n        for (a = [0:5:360])\n        let (rx = width/2, ry = height/2)\n        [rx * cos(a), ry * sin(a)]\n    ];\n\n    // Create base oval\n    linear_extrude(height = thickness * 0.8, convexity = 10)\n        polygon(points);\n\n    // Slightly domed top\n    translate([0, 0, thickness * 0.8])\n        scale([1, 1, 0.2])\n            linear_extrude(height = thickness * 0.4, convexity = 10)\n                polygon(points);\n}\n\noval_wide();",
    "renders": true
  },
  {
    "primitive_shape": "oval_narrow",
    "openscad_code": "module oval_narrow(height = 20) {\n    // Define oval profile with rounded ends\n    a = 60;  // major radius\n    b = 25;  // minor radius\n    steps = 32;\n    \n    points = [\n        for (i = [0:steps-1])\n            let (angle = i * 360 / steps)\n            [a * cos(angle), b * sin(angle)]\n    ];\n    \n    linear_extrude(height = height, center = true, convexity = 10)\n        polygon(points);\n}\n\noval_narrow();",
    "renders": true
  },
  {
    "primitive_shape": "oval_elongated",
    "openscad_code": "module oval_elongated(h = 30, rx = 60, ry = 35, r = 8, fn = 64) {\n    // 2D profile: rounded rectangle (elongated oval)\n    pts = [\n        for (a = [0:fn-1])\n        let (angle = 180 * a / (fn-1))\n        [rx - r + r * cos(angle), ry - r + r * sin(angle)],   // top right corner\n        for (a = [fn:2*fn-1])\n        let (angle = 180 * a / (fn-1))\n        [-(rx - r) + r * cos(angle), ry - r + r * sin(angle)], // top left corner\n        for (a = [2*fn:3*fn-1])\n        let (angle = 180 * a / (fn-1))\n        [-(rx - r) + r * cos(angle), -(ry - r) + r * sin(angle)], // bottom left corner\n        for (a = [3*fn:4*fn-1])\n        let (angle = 180 * a / (fn-1))\n        [rx - r + r * cos(angle), -(ry - r) + r * sin(angle)]   // bottom right corner\n    ];\n    linear_extrude(height = h, center = true)\n        polygon(points = pts);\n}\n\noval_elongated();",
    "renders": true
  },
  {
    "primitive_shape": "oval_squashed",
    "openscad_code": "module oval_squashed(h = 20, major = 80, minor = 40) {\n    // rounded ends: two half-circles + straight sides\n    segments = 32;\n    half = segments / 2;\n    angle = 180 / half;\n\n    // left half-circle\n    for (i = [0 : half]) {\n        a = i * angle;\n        x = -major/2 + minor/2 * cos(a);\n        y = minor/2 * sin(a);\n        pts = concat(pts, [[x, y]]);\n    }\n\n    // right half-circle\n    for (i = [0 : half]) {\n        a = 180 + i * angle;\n        x =  major/2 - minor/2 * cos(a);\n        y =  minor/2 * sin(a);\n        pts = concat(pts, [[x, y]]);\n    }\n\n    // straight top & bottom\n    pts = [\n        [-major/2 + minor/2,  minor/2],\n        [ major/2 - minor/2,  minor/2],\n        [ major/2 - minor/2, -minor/2],\n        [-major/2 + minor/2, -minor/2]\n    ];\n\n    rounded_pts = [\n        for (a = [0 : segments-1])\n            let (ang = a * 360 / segments)\n            [ (major/2 - minor/2) * cos(ang) + minor/2 * cos(ang),\n              minor/2 * sin(ang) ]\n    ];\n\n    linear_extrude(height = h)\n        polygon(rounded_pts);\n}\n\noval_squashed();",
    "renders": true
  },
  {
    "primitive_shape": "gear",
    "openscad_code": "module gear_teeth_profile(teeth=20, module=3, pressure_angle=20) {\n    pitch_diameter = teeth * module;\n    base_diameter = pitch_diameter * cos(pressure_angle);\n    outer_diameter = pitch_diameter + 2 * module;\n    root_diameter = pitch_diameter - 2.5 * module;\n    half_thick = 180 / teeth;\n    \n    points = [\n        [0, 0],\n        for(a=[-half_thick:0.5:half_thick])\n            let(t = a)\n            let(r = base_diameter/2)\n            [r*cos(t), r*sin(t)],\n        [0, 0]\n    ];\n    polygon(points);\n}\n\nmodule medium_gear() {\n    teeth = 30;\n    module = 2;\n    thickness = 8;\n    \n    difference() {\n        linear_extrude(height=thickness, center=true)\n            gear_teeth_profile(teeth, module);\n        \n        cylinder(h=thickness+0.1, d=10, center=true);\n    }\n}\n\nmedium_gear();",
    "renders": true
  },
  {
    "primitive_shape": "gear_small",
    "openscad_code": "module gear_small(teeth = 12, mod = 3, thickness = 6, round = 1) {\n    pitch = teeth * mod;\n    r_out = pitch / 2 + mod;\n    r_root = pitch / 2 - 1.25 * mod;\n    r_base = pitch / 2 * cos(20);\n\n    pa = 20;\n    step = 360 / teeth;\n    \n    pts = [for (i = [0:teeth-1])\n        for (a = [0, 1])\n            let(angle = (i + a/2) * step)\n            [r_out * cos(angle),\n             r_out * sin(angle)],\n        for (i = [0:teeth-1])\n            let(angle = (i + 0.5) * step)\n            [r_root * cos(angle),\n             r_root * sin(angle)]\n    ];\n\n    linear_extrude(height = thickness, center = true)\n        offset(r = round)\n            circle(r = 4, $fn = 6);\n    \n    linear_extrude(height = thickness + 0.1, center = true)\n        offset(r = -round)\n            polygon(concat(\n                [for (i = [0:teeth-1])\n                    let(a = i * step)\n                    [r_base * cos(a), r_base * sin(a)]],\n                [for (i = [teeth-1:-1:0])\n                    let(a = (i + 0.5) * step)\n                    [r_root * cos(a), r_root * sin(a)]]\n            ));\n}\n\ngear_small();",
    "renders": true
  },
  {
    "primitive_shape": "gear_large",
    "openscad_code": "module gear_large(teeth = 20, m = 2, h = 8) {\n    // involute approximation via circular arcs\n    pitch = m * teeth;\n    r_pitch = pitch / 2;\n    r_base = r_pitch * cos(20); // pressure angle 20°\n    r_add = r_pitch + m;\n    r_ded = r_pitch - 1.25 * m;\n    \n    // tooth profile points\n    angle_step = 360 / teeth;\n    profile = [\n        for (i = [0 : 3 : teeth * 3])\n            let (a = i * angle_step / 3)\n            let (r = (i % 3 == 1) ? r_add : \n                      (i % 3 == 2) ? r_pitch : r_ded)\n            [r * cos(a), r * sin(a)]\n    ];\n    \n    // full gear\n    polygon(\n        concat(\n            [[0,0]],\n            [for (i = [0 : teeth - 1])\n                for (p = profile)\n                    [p[0] * cos(i*angle_step) - p[1] * sin(i*angle_step),\n                     p[0] * sin(i*angle_step) + p[1] * cos(i*angle_step)]\n            ]\n        )\n    );\n    linear_extrude(height = h, center = true);\n}\n\ngear_large();",
    "renders": true
  },
  {
    "primitive_shape": "gear_6_teeth",
    "openscad_code": "module gear_6_teeth(height = 10, outer_d = 60, bore_d = 6) {\n    // basic parameters\n    teeth = 6;\n    pitch = outer_d / 2;\n    tooth_height = pitch * 0.15;\n    root = pitch - tooth_height;\n    \n    // helper for involute-like tooth flank\n    function tooth_angle(i) = i * 360 / teeth;\n    \n    // build one tooth profile\n    module single_tooth(a) {\n        rotate(a)\n        translate([0, 0, 0])\n        polygon([\n            [0, 0],\n            [root * cos(-25), root * sin(-25)],\n            [pitch * cos(-12), pitch * sin(-12)],\n            [pitch * cos( 12), pitch * sin( 12)],\n            [root * cos( 25), root * sin( 25)]\n        ]);\n    }\n    \n    // full gear profile\n    union() {\n        for (i = [0 : teeth - 1])\n            single_tooth(tooth_angle(i));\n    }\n}\n\n// extrude 2D profile into 3D\nlinear_extrude(height = 10)\ngear_6_teeth();",
    "renders": true
  },
  {
    "primitive_shape": "gear_12_teeth",
    "openscad_code": "module gear_12_teeth(\n    outer_d = 80,\n    root_d = 65,\n    base_d = 50,\n    thickness = 10,\n    rounds = 2\n){\n    teeth = 12;\n    pitch = 360/teeth;\n\n    profile = [\n        for(a = [0:1:360]) let(\n            i = (a + pitch/4) % pitch,\n            r = (i < pitch/2) ?\n                root_d/2 + (outer_d/2 - root_d/2) * sin(i*180/(pitch/2)) :\n                base_d/2\n        )\n        [r * cos(a), r * sin(a)]\n    ];\n\n    linear_extrude(height = thickness, convexity = 10)\n        offset(r = rounds)\n            polygon(profile);\n}\n\ngear_12_teeth();",
    "renders": true
  },
  {
    "primitive_shape": "gear_24_teeth",
    "openscad_code": "module gear_24_teeth(h = 8, d = 80, r_hub = 10) {\n    teeth = 24;\n    pitch = d/2;\n    addendum = 0.3 * (pitch/teeth);\n    dedendum = 0.35 * (pitch/teeth);\n    pa = 20; // pressure angle\n\n    // involute profile of one tooth\n    function involute(b) = [\n        pitch * (cos(b) + b * sin(b)),\n        pitch * (sin(b) - b * cos(b))\n    ];\n\n    // generate half-tooth profile points\n    step = 0.5;\n    tooth_pts = [\n        for (a = [0:step:15]) involute(a * PI/180)\n    ];\n\n    // mirror and shift to pitch circle\n    full_tooth = [\n        [pitch - addendum, 0],\n        each tooth_pts,\n        [pitch * cos(15*PI/180), pitch * sin(15*PI/180)],\n        [pitch * cos(360/teeth/2*PI/180), pitch * sin(360/teeth/2*PI/180)],\n        [pitch * cos(360/teeth/2*PI/180), -pitch * sin(360/teeth/2*PI/180)],\n        [pitch * cos(15*PI/180), -pitch * sin(15*PI/180)],\n        each [for (p = reverse(tooth_pts)) [p.x, -p.y]],\n        [pitch - addendum, 0]\n    ];\n\n    // rotate tooth around center\n    gear_2d = [\n        for (i = [0:teeth-1])\n            each [\n                for (p = full_tooth)\n                    [\n                        p.x * cos(i*360/teeth*PI/180) - p.y * sin(i*360/teeth*PI/180),\n                        p.x * sin(i*360/teeth*PI/180) + p.y * cos(i*360/teeth*PI/180)\n                    ]\n            ]\n    ];\n\n    // create 2D gear shape and extrude\n    linear_extrude(height = h, center = true)\n        polygon(concat([[0,0]], gear_2d, [[r_hub,0]]));\n}\n\ngear_24_teeth();",
    "renders": true
  },
  {
    "primitive_shape": "gear_36_teeth",
    "openscad_code": "module gear_36_teeth(h = 8, d = 80, r_hub = 8) {\n    pitch = d / 2;\n    teeth = 36;\n    pa = 20; // pressure angle\n    m = d / teeth;\n\n    // involute profile\n    inv = function(t) [t * cos(t), t * sin(t)];\n    r_base = pitch * cos(pa);\n\n    pts = [\n        for(i = [0:teeth-1])\n        let(a = 360 * i / teeth)\n        [\n            [0, 0],\n            for(t = [0:0.1:1.5])\n                let(p = inv(t))\n                [r_base * (cos(a + degrees(p[0])) + p[1] * sin(a + degrees(p[0]))/p[0]),\n                 r_base * (sin(a + degrees(p[0])) - p[1] * cos(a + degrees(p[0]))/p[0])],\n            let(p = inv(1.5))\n            [r_base * (cos(a + 360/teeth - degrees(p[0])) - p[1] * sin(a + 360/teeth - degrees(p[0]))/p[0]),\n             r_base * (sin(a + 360/teeth - degrees(p[0])) + p[1] * cos(a + 360/teeth - degrees(p[0]))/p[0])]\n        ]\n    ];\n\n    linear_extrude(height = h, center = true, convexity = 10)\n    union() {\n        for(pt = pts)\n            polygon(concat(pt, [[r_hub, 0]]));\n        circle(r = r_hub);\n    }\n}\n\ngear_36_teeth();",
    "renders": true
  },
  {
    "primitive_shape": "gear_thick",
    "openscad_code": "// gear_thick primitive\nmodule gear_thick(\n    teeth = 20,\n    pitch = 5,\n    thickness = 8,\n    pressure_angle = 20,\n    clearance = 0.1\n) {\n    // basic involute gear parameters\n    module involute_gear_2d() {\n        pitch_radius = teeth * pitch / 2 / PI;\n        base_radius = pitch_radius * cos(pressure_angle);\n        root_radius = pitch_radius - 1.25 * pitch / 2;\n        outside_radius = pitch_radius + pitch / 2;\n\n        // generate single tooth profile\n        module tooth_profile() {\n            // approximate involute curve with polygon\n            $fn = 32;\n            difference() {\n                circle(r = outside_radius, $fn = teeth * 2);\n                circle(r = root_radius, $fn = teeth * 2);\n            }\n            intersection() {\n                circle(r = outside_radius, $fn = teeth * 2);\n                for (i = [0:1:teeth-1]) {\n                    rotate([0, 0, i * 360 / teeth])\n                        translate([base_radius, 0, 0])\n                            square([outside_radius - base_radius, pitch], center = true);\n                }\n            }\n        }\n\n        // create full gear 2D profile\n        for (i = [0:1:teeth-1]) {\n            rotate([0, 0, i * 360 / teeth])\n                tooth_profile();\n        }\n    }\n\n    // extrude 2D profile to 3D\n    linear_extrude(height = thickness, center = true, convexity = 10)\n        involute_gear_2d();\n}\n\n// render gear with medium complexity\ngear_thick();",
    "renders": true
  },
  {
    "primitive_shape": "gear_thin",
    "openscad_code": "module gear_thin(\n  teeth = 20,\n  pitch = 4,\n  thickness = 5,\n  bore = 6,\n  pressure_angle = 20\n) {\n  $fn = 32;\n  module tooth_profile() {\n    difference() {\n      circle(d = pitch * 2);\n      translate([0, pitch / 2, 0])\n        square([pitch, pitch / 2], center = true);\n      translate([0, -pitch / 2, 0])\n        square([pitch, pitch / 2], center = true);\n    }\n  }\n  module tooth() {\n    linear_extrude(height = thickness)\n      tooth_profile();\n  }\n  module gear_body() {\n    difference() {\n      circle(d = pitch * teeth / pi);\n      circle(d = bore);\n    }\n  }\n  linear_extrude(height = thickness)\n    gear_body();\n  for (i = [0:teeth - 1])\n    rotate([0, 0, i * 360 / teeth])\n      translate([pitch * teeth / pi / 2, 0, 0])\n        tooth();\n}\n\ngear_thin();",
    "renders": true
  },
  {
    "primitive_shape": "gear_internal",
    "openscad_code": "module gear_internal(teeth = 20, module = 3, height = 10, clearance = 0.2) {\n    pitch = teeth * module;\n    pa = 20; // pressure angle\n    r_pitch = pitch / 2;\n    r_base = r_pitch * cos(pa);\n    r_add = r_pitch + module;\n    r_ded = r_pitch - 1.25 * module - clearance;\n\n    // involute profile\n    function involute(a) = [r_base * (cos(a) + a * sin(a)), \n                            r_base * (sin(a) - a * cos(a))];\n\n    // tooth points\n    pts = [\n        for (i = [0:teeth-1])\n        let (a = i * 360 / teeth)\n        for (p = [involute(0.1), involute(0.5), involute(1.0), \n                  [-r_ded * sin(a), r_ded * cos(a)], \n                  [r_ded * sin(a), r_ded * cos(a)], \n                  involute(1.0), involute(0.5), involute(0.1)])\n        let (pt = [p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a)])\n        pt\n    ];\n\n    // center hole\n    difference() {\n        linear_extrude(height = height)\n            polygon(concat([[0,0]], pts));\n        cylinder(h = height + 1, r = r_ded * 0.3, $fn = 32);\n    }\n}\n\ngear_internal();",
    "renders": true
  },
  {
    "primitive_shape": "gear_external",
    "openscad_code": "module gear_external(\n    teeth = 20,\n    pitch_radius = 40,\n    tooth_height = 8,\n    thickness = 6,\n    pressure_angle = 20\n) {\n    // involute curve approximation with straight flanks\n    tooth_angle = 360 / teeth;\n    base_radius = pitch_radius - tooth_height / 2;\n    \n    // single tooth profile\n    tooth_profile = [\n        [0, base_radius],\n        [tooth_height * 0.3, pitch_radius + tooth_height * 0.7],\n        [-tooth_height * 0.3, pitch_radius + tooth_height * 0.7]\n    ];\n    \n    // full gear 2D profile\n    gear_2d = [\n        for (i = [0:teeth-1]) \n            each [\n                for (p = tooth_profile) \n                    [p.x * cos(i*tooth_angle) - p.y * sin(i*tooth_angle),\n                     p.x * sin(i*tooth_angle) + p.y * cos(i*tooth_angle)]\n            ]\n    ];\n    \n    linear_extrude(height = thickness)\n        polygon(points = gear_2d);\n}\n\ngear_external();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_square",
    "openscad_code": "module rounded_square(size = 60, corner_r = 8, height = 10) {\n    // 2D rounded square profile\n    polygon(\n        points = [\n            [corner_r, 0],\n            [size - corner_r, 0],\n            [size, corner_r],\n            [size, size - corner_r],\n            [size - corner_r, size],\n            [corner_r, size],\n            [0, size - corner_r],\n            [0, corner_r]\n        ],\n        paths = [\n            [0, 1, 2, 3, 4, 5, 6, 7]\n        ]\n    );\n    \n    // Extrude to 3D\n    linear_extrude(height = height)\n        polygon(\n            points = [\n                [corner_r, 0],\n                [size - corner_r, 0],\n                [size, corner_r],\n                [size, size - corner_r],\n                [size - corner_r, size],\n                [corner_r, size],\n                [0, size - corner_r],\n                [0, corner_r]\n            ],\n            paths = [\n                [0, 1, 2, 3, 4, 5, 6, 7]\n            ]\n        );\n}\n\nrounded_square();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_square_2mm",
    "openscad_code": "module rounded_square_2mm(size = 100, radius = 10, height = 2) {\n    // corner points\n    pts = [\n        [radius, 0],\n        [size - radius, 0],\n        [size, radius],\n        [size, size - radius],\n        [size - radius, size],\n        [radius, size],\n        [0, size - radius],\n        [0, radius]\n    ];\n    \n    // arc points for corners\n    arc = [\n        for(a = [0:5:90]) [radius * cos(a), radius * sin(a)],\n        for(a = [90:5:180]) [size - radius + radius * cos(a), radius * sin(a)],\n        for(a = [180:5:270]) [size - radius + radius * cos(a), size - radius + radius * sin(a)],\n        for(a = [270:5:360]) [radius * cos(a), size - radius + radius * sin(a)]\n    ];\n    \n    linear_extrude(height = height)\n        polygon(concat(pts, arc));\n}\n\nrounded_square_2mm();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_square_3mm",
    "openscad_code": "// rounded_square_3mm.scad\n// Medium-complexity rounded square primitive (3 mm thick)\n\nmodule rounded_square_3mm(size = 100, radius = 10, thickness = 3) {\n    // Quarter-circle segments for smooth rounded corners\n    $fn = 32;\n    \n    // Define rounded-square 2D outline\n    polygon(\n        points = [\n            // Bottom-left corner\n            [-size/2 + radius, -size/2],\n            [ size/2 - radius, -size/2],\n            [ size/2, -size/2 + radius],\n            [ size/2,  size/2 - radius],\n            [ size/2 - radius,  size/2],\n            [-size/2 + radius,  size/2],\n            [-size/2,  size/2 - radius],\n            [-size/2, -size/2 + radius]\n        ],\n        paths = [\n            [0, 1, 2, 3, 4, 5, 6, 7]\n        ]\n    );\n    \n    linear_extrude(height = thickness, center = true);\n}\n\nrounded_square_3mm();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_square_5mm",
    "openscad_code": "module rounded_square_5mm(size=100, r=5, h=5) {\n    // 2D rounded square\n    corner = [\n        for (a=[0:90:359]) [cos(a)*r, sin(a)*r]\n    ];\n    \n    points = [\n        [r, 0], [size-r, 0],\n        [size-r, 0] + corner[0],\n        [size, r], [size, size-r],\n        [size, size-r] + corner[1],\n        [size-r, size], [r, size],\n        [r, size] + corner[2],\n        [0, size-r], [0, r],\n        [0, r] + corner[3]\n    ];\n    \n    linear_extrude(height=h)\n        polygon(points);\n}\n\nrounded_square_5mm();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_rectangle",
    "openscad_code": "module rounded_rectangle(width = 80, height = 50, radius = 8, thickness = 10) {\n    // Create 2D rounded rectangle profile\n    x = width / 2 - radius;\n    y = height / 2 - radius;\n    \n    polygon(points = [\n        [-x, -y - radius],\n        [x, -y - radius],\n        [x + radius, -y],\n        [x + radius, y],\n        [x, y + radius],\n        [-x, y + radius],\n        [-x - radius, y],\n        [-x - radius, -y]\n    ], paths = [\n        [0, 1, 2, 3, 4, 5, 6, 7]\n    ]);\n    \n    linear_extrude(height = thickness, center = true) {\n        polygon(points = [\n            [-x, -y - radius],\n            [x, -y - radius],\n            [x + radius, -y],\n            [x + radius, y],\n            [x, y + radius],\n            [-x, y + radius],\n            [-x - radius, y],\n            [-x - radius, -y]\n        ], paths = [\n            [0, 1, 2, 3, 4, 5, 6, 7]\n        ]);\n    }\n}\n\nrounded_rectangle();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_rectangle_large",
    "openscad_code": "module rounded_rectangle_large(width = 100, height = 60, radius = 10, thickness = 8) {\n    $fn = 32;\n    points = [\n        [radius, 0],\n        [width - radius, 0],\n        [width, radius],\n        [width, height - radius],\n        [width - radius, height],\n        [radius, height],\n        [0, height - radius],\n        [0, radius]\n    ];\n    difference() {\n        linear_extrude(height = thickness)\n            offset(r = radius) offset(r = -radius)\n                polygon(points = points);\n        translate([width/2, height/2, -1])\n            cylinder(h = thickness + 2, r = 3, $fn = 32);\n    }\n}\n\nrounded_rectangle_large();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_rectangle_small",
    "openscad_code": "module rounded_rectangle_small(width = 60, height = 40, thickness = 10, radius = 5, $fn = 32) {\n    // 2D rounded rectangle profile\n    profile = [\n        for (i = [0:1:90]) [width/2 - radius + radius * cos(i), height/2 - radius + radius * sin(i)],\n        for (i = [90:1:180]) [-width/2 + radius + radius * cos(i), height/2 - radius + radius * sin(i)],\n        for (i = [180:1:270]) [-width/2 + radius + radius * cos(i), -height/2 + radius + radius * sin(i)],\n        for (i = [270:1:360]) [width/2 - radius + radius * cos(i), -height/2 + radius + radius * sin(i)]\n    ];\n    \n    // Extrude the profile\n    linear_extrude(height = thickness, center = true)\n        polygon(profile);\n}\n\n// Render the shape\nrounded_rectangle_small();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_triangle",
    "openscad_code": "// Rounded triangle primitive\n// Medium complexity: rounded corners via circle subtraction\n\nmodule rounded_triangle(height = 20, side = 100, radius = 10) {\n    // Triangle points\n    tri_pts = [\n        [0, side * sqrt(3)/3],          // top vertex\n        [-side/2, -side * sqrt(3)/6],   // bottom left\n        [side/2, -side * sqrt(3)/6]     // bottom right\n    ];\n    \n    // Generate rounded corners by subtracting circles\n    offset_pts = [\n        for(i = [0:2]) \n            let(p = tri_pts[i], \n                prev = tri_pts[(i+2)%3], \n                next = tri_pts[(i+1)%3],\n                v1 = p - prev,\n                v2 = p - next,\n                n1 = v1 / norm(v1),\n                n2 = v2 / norm(v2),\n                bisect = normalize(n1 + n2),\n                offset = bisect * (radius / sin(acos(dot(n1, bisect))))\n            ) p - offset\n    ];\n    \n    linear_extrude(height = height, center = true)\n        polygon(points = offset_pts);\n}\n\nrounded_triangle();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_pentagon",
    "openscad_code": "module rounded_pentagon(height = 20, radius = 50, rounding = 8, $fn = 32) {\n    // Pentagonal base points\n    pts = [\n        for (i = [0:4]) [\n            radius * cos(72 * i + 90),\n            radius * sin(72 * i + 90)\n        ]\n    ];\n\n    // 2D rounded pentagon\n    linear_extrude(height = height)\n        offset(r = rounding) polygon(pts);\n}\n\nrounded_pentagon();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_hexagon",
    "openscad_code": "// Rounded hexagon primitive\nmodule rounded_hexagon(height = 10, side = 20, radius = 4) {\n    // Hexagon corners at 100mm across flats\n    hex_pts = [\n        for (i = [0:5])\n            [side * cos(i*60), side * sin(i*60)]\n    ];\n    \n    // Offset segments for rounded corners\n    offset(r = radius, $fn = 32) {\n        polygon(points = hex_pts);\n    }\n    \n    // Extrude to 3D\n    linear_extrude(height = height) {\n        offset(r = radius, $fn = 32) {\n            polygon(points = hex_pts);\n        }\n    }\n}\n\nrounded_hexagon(height = 20, side = 30, radius = 6);",
    "renders": true
  },
  {
    "primitive_shape": "rounded_octagon",
    "openscad_code": "module rounded_octagon(height = 20, flat = 50, radius = 8) {\n    sides = 8;\n    angle = 360 / sides;\n    orad = flat / 2 / cos(angle / 2);\n\n    points = [\n        for (i = [0 : sides - 1])\n            let (a = i * angle - 90)\n            [orad * cos(a), orad * sin(a)]\n    ];\n\n    offset(r = radius) offset(r = -radius) polygon(points);\n    linear_extrude(height = height, center = true) {\n        offset(r = radius) offset(r = -radius) polygon(points);\n    }\n}\n\nrounded_octagon();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_star",
    "openscad_code": "module rounded_star(h = 20, r = 40, points = 5, fillet = 4, center = true) {\n    // star outer & inner radii\n    or = r;\n    ir = r * 0.4;\n\n    // generate star polygon with rounded tips via circle approximation\n    star_pts = [\n        for (i = [0 : 2 * points - 1]) \n            let (a = i * 180 / points)\n            let (rad = (i % 2 == 0) ? or : ir)\n            [rad * cos(a), rad * sin(a)]\n    ];\n\n    offset(fillet) offset(-fillet) polygon(star_pts);\n    linear_extrude(height = h, center = center) offset(fillet) offset(-fillet) polygon(star_pts);\n}\n\nrounded_star();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_circle",
    "openscad_code": "module extruded_circle(r=30, h=15, fillet=3) {\n    // 2D profile with rounded top edge\n    profile = [\n        [0, 0],\n        [r, 0],\n        [r, h - fillet],\n        for(a = [0:5:90]) [r - fillet + fillet*cos(a), h - fillet + fillet*sin(a)],\n        [0, h],\n        for(a = [90:5:180]) [fillet - fillet*cos(a), h - fillet + fillet*sin(a)],\n        [-r, h - fillet],\n        [-r, 0]\n    ];\n    \n    // Extrude the profile in a circle\n    rotate_extrude(angle=360, $fn=64)\n        polygon(profile);\n}\n\nextruded_circle();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_square",
    "openscad_code": "module extruded_square() {\n    // Rounded-square profile with 5 mm corner radius\n    corner = 5;\n    side = 80;\n    profile = [\n        [corner, 0],\n        [side - corner, 0],\n        [side, corner],\n        [side, side - corner],\n        [side - corner, side],\n        [corner, side],\n        [0, side - corner],\n        [0, corner]\n    ];\n\n    linear_extrude(height = 20, center = true, convexity = 10)\n        polygon(points = profile);\n}\n\nextruded_square();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_triangle",
    "openscad_code": "module rounded_triangle_extrusion(\n    width = 80,\n    height = 70,\n    thickness = 25,\n    radius = 8\n) {\n    // Define the three corner points (isosceles triangle)\n    hw = width / 2;\n    p1 = [0, height];\n    p2 = [-hw, 0];\n    p3 = [hw, 0];\n    \n    // Create a 2D rounded triangle using offset\n    linear_extrude(thickness) {\n        offset(r = radius) offset(delta = -radius) polygon(points = [p1, p2, p3]);\n    }\n}\n\nrounded_triangle_extrusion();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_rectangle",
    "openscad_code": "// extruded_rectangle: rounded rectangular prism\nmodule extruded_rectangle(w = 60, h = 40, r = 8, t = 20) {\n    // 2D rounded rectangle profile\n    polygon(\n        points = [\n            [r, 0], [w - r, 0],\n            [w, r], [w, h - r],\n            [w - r, h], [r, h],\n            [0, h - r], [0, r]\n        ],\n        paths = [\n            [0, 1, 2, 3, 4, 5, 6, 7]\n        ]\n    );\n}\n\n// extrude to 3D\nlinear_extrude(height = 20)\n    extruded_rectangle();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_pentagon",
    "openscad_code": "module extruded_pentagon(height = 40, radius = 50, fillet = 4) {\n    sides = 5;\n    angle_step = 360 / sides;\n    points = [\n        for (i = [0 : sides - 1])\n            let (a = i * angle_step)\n            [radius * cos(a), radius * sin(a)]\n    ];\n    \n    difference() {\n        linear_extrude(height = height, convexity = 10)\n            offset(r = fillet) offset(r = -fillet)\n                polygon(points = points);\n                \n        // Top edge fillet\n        translate([0, 0, height - fillet])\n            linear_extrude(height = fillet + 0.1, convexity = 10)\n                offset(r = -fillet) offset(delta = fillet)\n                    polygon(points = points);\n    }\n}\n\nextruded_pentagon();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_hexagon",
    "openscad_code": "module extruded_hexagon(height = 20, side = 50, radius = 8) {\n    // Calculate hexagon points with rounded corners\n    function hex_points(s, r) = [\n        for (i = [0:5])\n            let (\n                angle = i * 60,\n                x = s * cos(angle),\n                y = s * sin(angle),\n                next_angle = ((i + 1) % 6) * 60,\n                x2 = s * cos(next_angle),\n                y2 = s * sin(next_angle)\n            )\n            [\n                [x, y],\n                [x + r * (cos(next_angle) - cos(angle)), y + r * (sin(next_angle) - sin(angle))],\n                [x2 + r * (cos(angle) - cos(next_angle)), y2 + r * (sin(angle) - sin(next_angle))]\n            ]\n    ];\n\n    hexagon = [for (pts = hex_points(side, radius)) for (p = pts) p];\n\n    linear_extrude(height = height, $fn = 48)\n        polygon(points = hexagon);\n}\n\nextruded_hexagon();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_octagon",
    "openscad_code": "module extruded_octagon(height = 25, radius = 50, fillet = 3) {\n    oct_pts = [\n        for (i = [0:7]) \n            let (a = 45*i)\n            [radius*cos(a), radius*sin(a)]\n    ];\n    \n    difference() {\n        linear_extrude(height = height)\n            offset(r = fillet)\n                polygon(oct_pts);\n                \n        // light chamfer on top and bottom edges\n        translate([0,0,-0.01])\n            linear_extrude(height = height + 0.02)\n                offset(r = -fillet)\n                    polygon(oct_pts);\n    }\n}\n\nextruded_octagon();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_star",
    "openscad_code": "module extruded_star(\n    outer_radius = 50,\n    inner_radius = 25,\n    height       = 8,\n    points       = 5,\n    fillet       = 1.5\n){\n    difference(){\n        linear_extrude(height)\n            offset(r = fillet)\n                polygon(\n                    star_points(outer_radius, inner_radius, points)\n                );\n                \n        translate([0,0,-1])\n            linear_extrude(height + 2)\n                offset(r = -fillet + 0.05)\n                    polygon(\n                        star_points(outer_radius, inner_radius, points)\n                    );\n    }\n}\n\nfunction star_points(outer, inner, n) = \n    [ for (i = [0:2*n-1]) \n        let (a = 360 / (2*n) * i)\n        (i%2==0 ? outer : inner) * [cos(a), sin(a)]\n    ];\n\nextruded_star();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_cross",
    "openscad_code": "module extruded_cross() {\n    // Cross profile with rounded ends\n    thickness = 5;\n    arm = 40;\n    width = 12;\n    radius = width/2;\n\n    points = [\n        [-arm, -radius],\n        [-radius, -radius],\n        [-radius, -arm],\n        [ radius, -arm],\n        [ radius, -radius],\n        [ arm, -radius],\n        [ arm,  radius],\n        [ radius,  radius],\n        [ radius,  arm],\n        [-radius,  arm],\n        [-radius,  radius],\n        [-arm,  radius]\n    ];\n\n    linear_extrude(height = thickness, center = true)\n        polygon(points);\n}\n\nextruded_cross();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_plus",
    "openscad_code": "module extruded_plus(w = 80, h = 20, r = 5) {\n    bar = w / 2 - r;\n    pts = [\n        [-bar, -r], [-r, -r], [-r, -bar],\n        [ r, -bar], [ r, -r], [ bar, -r],\n        [ bar,  r], [ r,  r], [ r,  bar],\n        [-r,  bar], [-r,  r], [-bar,  r]\n    ];\n    difference() {\n        linear_extrude(height = h)\n            offset(r = r) polygon(points = pts);\n        translate([0, 0, -1])\n            linear_extrude(height = h + 2)\n                offset(r = r - 1) polygon(points = pts);\n    }\n}\n\nextruded_plus();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_arrow",
    "openscad_code": "module extruded_arrow(height = 10, shaft_w = 20, head_w = 40, head_l = 30, shaft_l = 70, fillet = 3) {\n    points = [\n        [0, 0],                 // tail center\n        [-head_w/2, 0],         // tail left\n        [-shaft_w/2, 0],        // shaft start left\n        [-shaft_w/2, shaft_l],  // shaft end left\n        [0, shaft_l + head_l],  // tip\n        [shaft_w/2, shaft_l],   // shaft end right\n        [shaft_w/2, 0],         // shaft start right\n        [head_w/2, 0]           // tail right\n    ];\n    \n    // Add small fillets\n    fillet_points = [\n        for (i = [0:len(points)-1])\n            let (p = points[i])\n            let (n = points[(i+1)%len(points)])\n            let (prev = points[(i-1+len(points))%len(points)])\n            p\n    ];\n    \n    linear_extrude(height = height, center = true, convexity = 4)\n        polygon(fillet_points);\n}\n\nextruded_arrow();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_heart",
    "openscad_code": "// extruded_heart.scad\nmodule extruded_heart(h = 10, r = 25, fillet = 3) {\n    // heart polygon with rounded top lobes and sharp bottom\n    points = [\n        [0, 2*r],                    // top center\n        [-r, 1.2*r],                 // left lobe peak\n        [-0.6*r, 0.3*r],             // left shoulder\n        [-0.2*r, 0],                 // left side\n        [0, -r],                     // bottom tip\n        [0.2*r, 0],                  // right side\n        [0.6*r, 0.3*r],              // right shoulder\n        [r, 1.2*r]                   // right lobe peak\n    ];\n\n    // simple linear extrusion with slight rounding via Minkowski\n    linear_extrude(height = h) offset(r = fillet) polygon(points);\n}\n\nextruded Heart();\ntranslate([60, 0, 0]) extruded_heart(h = 8, r = 20, fillet = 2);",
    "renders": true
  },
  {
    "primitive_shape": "extruded_tall",
    "openscad_code": "module extruded_tall() {\n    // rounded square profile with chamfered top\n    points = [\n        [0, 0], [40, 0], [40, 40], [0, 40],      // base\n        [5, 5], [35, 5], [35, 35], [5, 35]       // inset for chamfer\n    ];\n\n    paths = [\n        [0, 1, 2, 3],      // outer\n        [4, 5, 6, 7]       // inner\n    ];\n\n    linear_extrude(height = 100, convexity = 10) {\n        polygon(points = points, paths = paths);\n    }\n}\n\nextruded_tall();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_short",
    "openscad_code": "module extruded_short() {\n    // Rounded rectangle shape\n    height = 25;\n    width = 100;\n    depth = 60;\n    radius = 12;\n    \n    // Create rounded rectangle profile\n    points = [\n        [radius, 0],\n        [width - radius, 0],\n        [width, radius],\n        [width, depth - radius],\n        [width - radius, depth],\n        [radius, depth],\n        [0, depth - radius],\n        [0, radius]\n    ];\n    \n    // Rounded corner arcs\n    corner_points = 8;\n    for (i = [0:corner_points-1]) {\n        angle = 90 * i / (corner_points - 1);\n        x = cos(angle) * radius;\n        y = sin(angle) * radius;\n        points = concat(points, [[x, y]]);\n    }\n    \n    linear_extrude(height = height, center = true)\n        polygon(points);\n}\n\nextruded_short();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_thick",
    "openscad_code": "module extruded_thick_rounded_square(height = 20, side = 80, radius = 8) {\n    // 2D rounded square profile\n    profile = [\n        for (i = [0:3])  // 4 corners\n        let (a = i*90)\n        [side/2*cos(a), side/2*sin(a)],\n        \n        for (i = [0:3])  // 4 rounded corners\n        let (a = i*90+45)\n        [side/2*cos(a)+radius*cos(a), side/2*sin(a)+radius*sin(a)],\n        \n        for (i = [0:3])  // 4 sides\n        let (a = i*90+90)\n        [side/2*cos(a), side/2*sin(a)]\n    ];\n    \n    linear_extrude(height = height, center = true, convexity = 10)\n        polygon(points = profile);\n}\n\nextruded_thick_rounded_square();",
    "renders": true
  },
  {
    "primitive_shape": "extruded_thin",
    "openscad_code": "module extruded_thin() {\n    // rounded rectangle profile with slight taper\n    width = 80;\n    height = 60;\n    corner = 12;\n    thickness = 3.5;\n\n    points = [\n        [corner, 0],\n        [width - corner, 0],\n        [width, corner],\n        [width, height - corner],\n        [width - corner, height],\n        [corner, height],\n        [0, height - corner],\n        [0, corner]\n    ];\n\n    // use circle segments for rounded corners\n    difference() {\n        linear_extrude(height = thickness, scale = 0.92, center = true)\n            polygon(points = points, convexity = 10);\n        \n        // subtle inner cutout\n        translate([0, 0, -thickness/2 - 0.1])\n            linear_extrude(height = thickness + 0.2, center = false)\n                offset(r = -6)\n                    polygon(points = points, convexity = 10);\n    }\n}\n\nextruded_thin();",
    "renders": true
  },
  {
    "primitive_shape": "linear_extrusion_straight",
    "openscad_code": "module rounded_star_prism() {\n    // 5-point star with rounded tips\n    pts = [\n        for (a = [0:72:360]) \n        let(r = a%144 ? 30 : 15)  // alternating radii\n        [r*cos(a), r*sin(a)]\n    ];\n    \n    linear_extrude(height = 25, center = true)\n        offset(r = 3)  // rounding\n            polygon(pts);\n}\n\nrounded_star_prism();",
    "renders": true
  },
  {
    "primitive_shape": "linear_extrusion_twisted_10",
    "openscad_code": "// linear_extrusion_twisted_10 primitive shape\nmodule twisted_10() {\n    points = [\n        [0, 0],\n        [20, 0],\n        [25, 15],\n        [15, 25],\n        [0, 20],\n        [-10, 10]\n    ];\n    \n    linear_extrude(height = 50, twist = 360, slices = 20) {\n        polygon(points);\n    }\n}\n\ntwisted_10();",
    "renders": true
  },
  {
    "primitive_shape": "linear_extrusion_twisted_20",
    "openscad_code": "module linear_extrusion_twisted_20() {\n    sides = 6;\n    r = 25;\n    twist = 20;\n    height = 40;\n    fillet = 3;\n\n    points = [\n        for (i = [0:sides-1])\n            let (a = 360/sides*i)\n            [r*cos(a), r*sin(a)]\n    ];\n\n    linear_extrude(height = height, twist = twist, $fn = 60)\n        offset(r = fillet)\n            polygon(points);\n}\n\nlinear_extrusion_twisted_20();",
    "renders": true
  },
  {
    "primitive_shape": "linear_extrusion_twisted_30",
    "openscad_code": "module linear_extrusion_twisted_30() {\n    // Rounded rectangle profile\n    rr = 8;  // corner radius\n    w = 60;\n    h = 40;\n    pts = [\n        [rr,  0],\n        [w-rr, 0],\n        [w,   rr],\n        [w,   h-rr],\n        [w-rr, h],\n        [rr,  h],\n        [0,   h-rr],\n        [0,   rr]\n    ];\n    \n    // 2D rounded rectangle\n    rounded_rect = offset(r=rr, $fn=20) polygon(points=pts);\n    \n    // Twisted extrusion 30° over 30 mm height\n    linear_extrude(height=30, twist=30, $fn=40)\n        rounded_rect;\n}\n\n// Render\nlinear_extrusion_twisted_30();",
    "renders": true
  },
  {
    "primitive_shape": "linear_extrusion_twisted_45",
    "openscad_code": "module twisted_45_profile() {\n    polygon(points=[\n        [0,0],\n        [40,0],\n        [35,15],\n        [20,20],\n        [5,15]\n    ]);\n}\n\nlinear_extrude(height=80, twist=45, slices=30)\n    twisted_45_profile();",
    "renders": true
  },
  {
    "primitive_shape": "linear_extrusion_twisted_90",
    "openscad_code": "module twisted_90_rounded_square(size = 60, height = 30, radius = 8, twist = 90) {\n    // 2D rounded square profile\n    profile = [\n        for (i = [0:3]) let(\n            a = i*90,\n            dx = cos(a)*radius,\n            dy = sin(a)*radius,\n            cx = ((i==0||i==3)?-1:1)*(size/2-radius),\n            cy = ((i==1||i==2)?-1:1)*(size/2-radius)\n        ) [cx+dx, cy+dy],\n        for (i = [0:3]) let(\n            a = (i*90)+90,\n            dx = cos(a)*radius,\n            dy = sin(a)*radius,\n            cx = ((i==0||i==3)?-1:1)*(size/2-radius),\n            cy = ((i==1||i==2)?-1:1)*(size/2-radius)\n        ) [cx+dx, cy+dy],\n        for (i = [0:3]) let(\n            a = (i*90)+180,\n            dx = cos(a)*radius,\n            dy = sin(a)*radius,\n            cx = ((i==0||i==3)?-1:1)*(size/2-radius),\n            cy = ((i==1||i==2)?-1:1)*(size/2-radius)\n        ) [cx+dx, cy+dy],\n        for (i = [0:3]) let(\n            a = (i*90)+270,\n            dx = cos(a)*radius,\n            dy = sin(a)*radius,\n            cx = ((i==0||i==3)?-1:1)*(size/2-radius),\n            cy = ((i==1||i==2)?-1:1)*(size/2-radius)\n        ) [cx+dx, cy+dy]\n    ];\n    \n    linear_extrude(height = height, twist = twist, convexity = 10) {\n        polygon(points = profile);\n    }\n}\n\ntwisted_90_rounded_square();",
    "renders": true
  },
  {
    "primitive_shape": "linear_extrusion_twisted_180",
    "openscad_code": "module linear_extrusion_twisted_180() {\n    // rounded rectangle profile\n    rr = 5;  // corner radius\n    w = 40;\n    h = 20;\n    points = [\n        [-w/2+rr, -h/2],\n        [ w/2-rr, -h/2],\n        [ w/2, -h/2+rr],\n        [ w/2,  h/2-rr],\n        [ w/2-rr,  h/2],\n        [-w/2+rr,  h/2],\n        [-w/2,  h/2-rr],\n        [-w/2, -h/2+rr]\n    ];\n    linear_extrude(height = 60, twist = 180, $fn = 32)\n        polygon(points = points);\n}\n\nlinear_extrusion_twisted_180();",
    "renders": true
  },
  {
    "primitive_shape": "linear_extrusion_twisted_360",
    "openscad_code": "// Twisted 360-degree extruded rounded hexagon with slight taper\nmodule twisted_hexagon(height = 60, radius = 25, twist = 360) {\n    // Define 6-point rounded hexagon profile\n    points = [\n        for (a = [0:60:359]) [radius * cos(a), radius * sin(a)]\n    ];\n    \n    linear_extrude(height = height, twist = twist, slices = 60, scale = 0.85) {\n        offset(r = 3) offset(r = -3) polygon(points);\n    }\n}\n\ntwisted_hexagon();",
    "renders": true
  },
  {
    "primitive_shape": "linear_extrusion_scaled_start",
    "openscad_code": "module scaled_extrusion_shape() {\n    // 2D base profile with rounded top\n    points = [\n        [0, 0],      // bottom left\n        [80, 0],     // bottom right\n        [80, 60],    // right side\n        [70, 70],    // rounded corner\n        [40, 80],    // top center\n        [10, 70],    // rounded corner\n        [0, 60]      // left side\n    ];\n    \n    // Linear extrusion with scale taper\n    linear_extrude(\n        height = 40,\n        scale = [0.4, 0.4],\n        center = false,\n        $fn = 32\n    ) {\n        polygon(points);\n    }\n}\n\nscaled_extrusion_shape();",
    "renders": true
  },
  {
    "primitive_shape": "linear_extrusion_scaled_end",
    "openscad_code": "// linear_extrusion_scaled_end primitive: rounded-edge rectangle that tapers\nmodule rounded_tapered_bar(w=60, h=20, l=100, r=5) {\n    // 2D profile with rounded top and bottom\n    profile = [\n        [r, 0],\n        [w-r, 0],\n        [w, r],\n        [w, h-r],\n        [w-r, h],\n        [r, h],\n        [0, h-r],\n        [0, r]\n    ];\n    \n    // linear extrude with end-scale to 70 % width\n    linear_extrude(height=l, scale=[0.7, 1], convexity=4)\n        polygon(points=profile);\n}\n\nrounded_tapered_bar();",
    "renders": true
  },
  {
    "primitive_shape": "linear_extrusion_scaled_both",
    "openscad_code": "module linear_extrusion_scaled_both() {\n    points = [\n        [0, 0],\n        [30, 0],\n        [40, 20],\n        [20, 30],\n        [0, 25]\n    ];\n    \n    linear_extrude(\n        height = 50,\n        scale = [0.4, 0.4],\n        center = false\n    ) {\n        polygon(points);\n    }\n}\n\nlinear_extrusion_scaled_both();",
    "renders": true
  },
  {
    "primitive_shape": "linear_extrusion_tapered",
    "openscad_code": "// tapered linear extrusion of a rounded rectangle\nmodule tapered_round_rect(\n        width=60,\n        depth=30,\n        height=40,\n        radius=8,\n        taper=0.3) {\n    // rounded rectangle profile\n    profile = [\n        for(a=[0:90:360]) let(r=radius)\n            [cos(a)*r, sin(a)*r],\n        [width/2, 0],\n        [width/2, depth-radius],\n        [width/2-radius, depth],\n        [-width/2+radius, depth],\n        [-width/2, depth-radius],\n        [-width/2, 0],\n        [-width/2, -depth+radius],\n        [-width/2+radius, -depth],\n        [width/2-radius, -depth],\n        [width/2, -depth+radius],\n        [width/2, 0]\n    ];\n    linear_extrude(height=height, scale=1-taper, convexity=4)\n        polygon(profile);\n}\n\ntapered_round_rect();",
    "renders": true
  },
  {
    "primitive_shape": "linear_extrusion_bulged",
    "openscad_code": "module linear_extrusion_bulged(height = 40, width = 80, bulge = 8) {\n    // 2D profile with centered bulge\n    polygon(points = [\n        [-width/2, 0],\n        [ width/2, 0],\n        [ width/2 - 10, height],\n        [ 0, height + bulge],\n        [-width/2 + 10, height]\n    ]);\n}\n\nlinear_extrude(height = 30, center = true, convexity = 4)\nlinear_extrusion_bulged();",
    "renders": true
  },
  {
    "primitive_shape": "rotate_extrusion_circle",
    "openscad_code": "module rotate_extrusion_circle() {\n    // Define the profile to be rotated\n    profile = [\n        [0, 30],      // Center bottom\n        [5, 30],      // Small radius start\n        [15, 25],     // Inward curve\n        [20, 15],     // Mid point\n        [15, 5],      // Outward curve\n        [5, 0],       // Small radius end\n        [0, 0]        // Center top\n    ];\n    \n    // Rotate the profile around Z-axis to create the shape\n    rotate_extrude($fn=64)\n        polygon(profile);\n}\n\n// Render the shape\nrotate_extrusion_circle();",
    "renders": true
  },
  {
    "primitive_shape": "rotate_extrusion_square",
    "openscad_code": "module rotate_extrusion_square() {\n    // rounded square profile for rotate_extrude\n    profile = [\n        [0, 0],           // inner corner\n        [20, 0],          // bottom edge\n        [20, 5],          // bottom-right corner\n        [25, 5],          // right edge\n        [25, 20],         // top-right corner\n        [20, 20],         // top edge\n        [20, 25],         // top-left corner\n        [5, 25],          // left edge\n        [5, 20],          // bottom-left corner\n        [0, 20],          // inner top\n    ];\n\n    rotate_extrude(angle = 360, $fn = 64)\n        polygon(profile);\n}\n\nrotate_extrusion_square();",
    "renders": true
  },
  {
    "primitive_shape": "rotate_extrusion_triangle",
    "openscad_code": "module rotate_extrusion_triangle(\n    base = 80,          // base width (mm)\n    height = 60,        // height of triangle profile (mm)\n    thickness = 30,     // extrusion thickness (mm)\n    fillet = 3          // corner fillet radius (mm)\n) {\n    // 2D triangle profile with rounded corners\n    polygon(\n        points = [\n            [0, 0],\n            [base/2, height],\n            [base, 0],\n            [base - fillet, 0],\n            [base/2, height - fillet],\n            [fillet, 0]\n        ],\n        paths = [[0, 1, 2], [3, 4, 5, 3]]\n    );\n}\n\n// Rotate extrude the triangle profile\nrotate_extrude(angle = 360, $fn = 64)\nrotate_extrusion_triangle();",
    "renders": true
  },
  {
    "primitive_shape": "rotate_extrusion_rectangular",
    "openscad_code": "// rotate_extrusion_rectangular: medium-complexity rectangular profile with rounded corners\nmodule rotate_extrusion_rectangular(h = 80, r = 3) {\n    $fn = 32;\n    // 2D profile: rectangle with rounded corners\n    polygon(\n        points = [\n            [0, 0],\n            [0, 10],\n            [0, 30 - r], [r, 30 - r], [30 - r, 30], [30, 30 - r],\n            [30, 10], [30, 0]\n        ]\n    );\n}\n\nrotate_extrude() rotate_extrusion_rectangular();",
    "renders": true
  },
  {
    "primitive_shape": "rotate_extrusion_gear",
    "openscad_code": "// rotate_extrusion_gear.scad\n// Simple 12-tooth gear created with rotate_extrude\n\nmodule rotate_extrusion_gear(\n    outer_radius = 30,\n    inner_radius = 10,\n    height = 20,\n    teeth = 12\n) {\n    // One tooth profile\n    angle_step = 360 / teeth;\n    half_tooth = angle_step / 4;\n    \n    // Define 2D profile for one tooth segment\n    profile = [\n        [0, 0],                                   // center\n        [inner_radius, 0],                        // inner circle\n        [inner_radius * 1.2, 0],                  // start of tooth base\n        [outer_radius * 0.9, -half_tooth * 0.8],  // tooth flank\n        [outer_radius, -half_tooth],              // tooth tip\n        [outer_radius * 0.9, -half_tooth * 1.2],  // tooth flank\n        [inner_radius * 1.2, -angle_step],        // end of tooth base\n        [inner_radius, -angle_step],              // inner circle\n        [0, -angle_step]                          // center\n    ];\n    \n    rotate_extrude($fn = teeth * 8)\n        polygon(profile);\n}\n\nrotate_extrusion_gear();",
    "renders": true
  },
  {
    "primitive_shape": "rotate_extrusion_star",
    "openscad_code": "// rotate_extrusion_star.scad\nmodule rotate_extrusion_star(\n    outer_r = 60,\n    inner_r = 30,\n    points  = 5,\n    twist   = 45,\n    height  = 20\n){\n    // 2D star profile\n    star_pts = [\n        for (i = [0 : 2*points-1])\n            let (a = i*180/points)\n            (i%2 ? inner_r : outer_r) * [cos(a), sin(a)]\n    ];\n\n    rotate_extrude(angle = twist, $fn = 60)\n        polygon(star_pts);\n}\n\nrotate_extrusion_star();",
    "renders": true
  },
  {
    "primitive_shape": "rotate_extrusion_bow_tie",
    "openscad_code": "// Bow-tie primitive via rotate_extrude of a rounded-edge cross-section\nmodule rotate_extrusion_bow_tie() {\n    // 2D profile: symmetrical bow-tie outline with rounded inner edges\n    profile = [\n        [0, 0],             // center\n        [25, 0],            // outer right\n        [25, 8],            // right top\n        [10, 12],           // inner curve\n        [0, 15],            // center top\n        [-10, 12],          // inner curve mirrored\n        [-25, 8],           // left top\n        [-25, 0]            // outer left\n    ];\n    rotate_extrude($fn = 64)\n        polygon(profile);\n}\n\nrotate_extrusion_bow_tie();",
    "renders": true
  },
  {
    "primitive_shape": "rotate_extrusion_hollow",
    "openscad_code": "module rotate_extrusion_hollow() {\n    wall = 2;\n    ri = 20;            // inner radius\n    ro = 30;            // outer radius\n    h  = 60;            // height\n    \n    // profile for a rounded-top hollow ring\n    points = [\n        [ri, 0],\n        [ro, 0],\n        [ro, h-wall],\n        [ro-wall, h-wall],\n        [ro-wall, h-2*wall],\n        [ri+wall, h-2*wall],\n        [ri+wall, h-wall],\n        [ri, h-wall]\n    ];\n    \n    rotate_extrude()\n        polygon(points);\n}\n\nrotate_extrusion_hollow();",
    "renders": true
  },
  {
    "primitive_shape": "rotate_extrusion_with_hole",
    "openscad_code": "module rotate_extrusion_with_hole() {\n    difference() {\n        rotate_extrude($fn=64)\n            polygon(points=[\n                [20, 0],\n                [30, 0],\n                [30, 15],\n                [25, 25],\n                [20, 30],\n                [15, 25],\n                [10, 15],\n                [10, 0]\n            ]);\n        translate([0, 0, -1])\n            rotate_extrude($fn=64)\n                polygon(points=[\n                    [0, 0],\n                    [12, 0],\n                    [12, 2],\n                    [0, 2]\n                ]);\n    }\n}\n\nrotate_extrusion_with_hole();",
    "renders": true
  },
  {
    "primitive_shape": "hull_two_circles",
    "openscad_code": "// hull_two_circles.scad\n// Medium-complexity primitive: convex hull of two offset circles\n\nmodule hull_two_circles(h = 30, r1 = 25, r2 = 15, gap = 45) {\n    // generate circle points for polygon\n    pts = concat(\n        [for(i=[0:20]) [r1*cos(i*360/21), r1*sin(i*360/21)]],\n        [for(i=[0:20]) [gap + r2*cos(i*360/21), r2*sin(i*360/21)]]\n    );\n    \n    // convex hull polygon\n    polygon(hull(pts));\n    \n    // slight rounding via extrusion\n    linear_extrude(height = h, center = true, scale = 0.9, slices = 20);\n}\n\nhull_two_circles();",
    "renders": true
  },
  {
    "primitive_shape": "hull_three_circles",
    "openscad_code": "module hull_three_circles(h = 30, r = 20, d = 50) {\n    // 2D hull of three tangent circles\n    pts = [\n        [-d/2, 0],          // left circle center\n        [ d/2, 0],          // right circle center\n        [ 0,   d*sqrt(3)/2] // top circle center\n    ];\n    \n    hull() {\n        for(p = pts) translate(p) circle(r);\n    }\n}\n\n// Extrude the 2D hull into 3D\nlinear_extrude(height = 30, center = true)\n    hull_three_circles();\n    \n// Optional: add slight rounding to edges via minkowski\n// minkowski() {\n//     linear_extrude(height = 30 - 2, center = true)\n//         hull_three_circles();\n//     sphere(1);\n// }",
    "renders": true
  },
  {
    "primitive_shape": "hull_four_circles",
    "openscad_code": "module hull_four_circles() {\n    // Four circles forming a convex hull shape\n    $fn = 32;\n    \n    // Define 4 circles in 2D\n    circle1 = [0, 0];\n    circle2 = [40, 0];\n    circle3 = [10, 35];\n    circle4 = [30, 30];\n    \n    // Generate hull points\n    hull_points = [\n        circle1,\n        circle2,\n        circle3,\n        circle4\n    ];\n    \n    // Create 2D hull shape\n    color(\"gold\") \n    linear_extrude(height = 20, center = true)\n    offset(r = 8) \n    polygon(hull_points);\n}\n\n// Render the shape\nhull_four_circles();",
    "renders": true
  },
  {
    "primitive_shape": "hull_square_circle",
    "openscad_code": "module hull_square_circle(r=30, h=20, fillet=4) {\n    // 2D rounded square\n    offset(r=fillet)\n        square([r*2, r*2], center=true);\n    \n    // 2D circle\n    translate([0, 0, 0.1])  // slight offset to avoid z-fighting\n        circle(r=r*0.8);\n    \n    // Hull the two 2D shapes together\n    linear_extrude(height=h, center=true, convexity=10)\n        hull() {\n            offset(r=fillet)\n                square([r*2, r*2], center=true);\n            circle(r=r*0.8);\n        }\n}\n\nhull_square_circle();",
    "renders": true
  },
  {
    "primitive_shape": "hull_triangle_square",
    "openscad_code": "module hull_triangle_square() {\n    // rounded triangular prism with square base\n    linear_extrude(height = 50, center = true)\n        offset(r = 3)\n            polygon(points = [\n                [ 0,  0],\n                [60,  0],\n                [30, 52]\n            ]);\n}\n\nhull_triangle_square();",
    "renders": true
  },
  {
    "primitive_shape": "hull_pentagon_hexagon",
    "openscad_code": "module hull_pentagon_hexagon(h = 30, r = 50) {\n    pent = [\n        for(i = [0:4])\n        [ r * cos(72*i - 90), r * sin(72*i - 90) ]\n    ];\n    hex = [\n        for(i = [0:5])\n        [ r * cos(60*i), r * sin(60*i) ]\n    ];\n    \n    linear_extrude(height = h, twist = 30, slices = 50)\n        hull() {\n            polygon(pent);\n            translate([r*0.3, 0]) polygon(hex);\n        }\n}\n\nhull_pentagon_hexagon();",
    "renders": true
  },
  {
    "primitive_shape": "hull_two_squares",
    "openscad_code": "module hull_two_squares() {\n    // Two offset squares joined by hull()\n    linear_extrude(height = 30)\n        hull() {\n            translate([-20, -20]) square(40, center = true);\n            translate([20, 20]) square(40, center = true);\n        }\n}\n\nhull_two_squares();",
    "renders": true
  },
  {
    "primitive_shape": "hull_three_squares",
    "openscad_code": "module hull_three_squares(h = 30, r = 5, s = 40) {\n    // bottom square\n    translate([0, 0, 0])\n        linear_extrude(h/3, center = true)\n            offset(r = r)\n                square(s, center = true);\n    \n    // middle square rotated 45°\n    translate([0, 0, h/3])\n        linear_extrude(h/3, center = true)\n            rotate([0, 0, 45])\n                offset(r = r)\n                    square(s * 0.707, center = true);\n    \n    // top square\n    translate([0, 0, 2*h/3])\n        linear_extrude(h/3, center = true)\n            offset(r = r)\n                square(s, center = true);\n    \n    // hull everything together\n    hull() {\n        translate([0, 0, 0])\n            cylinder(h = 0.1, r = r, center = true);\n        translate([0, 0, h])\n            cylinder(h = 0.1, r = r, center = true);\n    }\n}\n\nhull_three_squares();",
    "renders": true
  },
  {
    "primitive_shape": "hull_four_squares",
    "openscad_code": "module hull_four_squares(h = 20, r = 5) {\n    pts = [\n        [0,  0],\n        [60, 0],\n        [60, 60],\n        [0,  60],\n        [15, 15],\n        [45, 15],\n        [45, 45],\n        [15, 45]\n    ];\n\n    linear_extrude(height = h, convexity = 10)\n        offset(r = r)\n            hull() {\n                for (p = pts)\n                    translate(p)\n                        square(1, center = true);\n            }\n}\n\nhull_four_squares();",
    "renders": true
  },
  {
    "primitive_shape": "hull_circle_square_triangle",
    "openscad_code": "module hull_circle_square_triangle(h = 30, r = 40) {\n    difference() {\n        hull() {\n            circle(r, $fn = 48);\n            square(r * 2, center = true);\n            translate([r * 1.5, -r * 0.866])\n                polygon([[0, 0], [r, 0], [r * 0.5, r * 0.866]]);\n        }\n        linear_extrude(height = h, center = true)\n            offset(r = -r * 0.2)\n            polygon([\n                [r * 2, 0],\n                [r * -1, r * 1.732],\n                [r * -1, r * -1.732]\n            ]);\n    }\n}\n\nhull_circle_triangle();",
    "renders": true
  },
  {
    "primitive_shape": "minkowski_sphere_square",
    "openscad_code": "module minkowski_sphere_square() {\n    // 2D rounded square profile\n    linear_extrude(height = 50, center = true)\n    offset(r = 10)\n    square([60, 60], center = true);\n    \n    // Spheres at corners for minkowski rounding\n    translate([30, 30, 25]) sphere(r = 10);\n    translate([-30, 30, 25]) sphere(r = 10);\n    translate([30, -30, 25]) sphere(r = 10);\n    translate([-30, -30, 25]) sphere(r = 10);\n    translate([30, 30, -25]) sphere(r = 10);\n    translate([-30, 30, -25]) sphere(r = 10);\n    translate([30, -30, -25]) sphere(r = 10);\n    translate([-30, -30, -25]) sphere(r = 10);\n}\n\nminkowski_sphere_square();",
    "renders": true
  },
  {
    "primitive_shape": "minkowski_sphere_circle",
    "openscad_code": "module minkowski_sphere_circle(height = 50, radius = 25, fillet = 5) {\n    // disk body\n    linear_extrude(height = height - 2 * fillet)\n        circle(r = radius);\n\n    // rounded top\n    translate([0, 0, height - fillet])\n        minkowski() {\n            cylinder(h = 0.01, r = radius - fillet);\n            sphere(fillet);\n        }\n\n    // rounded bottom\n    mirror([0, 0, 1])\n        translate([0, 0, height - fillet])\n            minkowski() {\n                cylinder(h = 0.01, r = radius - fillet);\n                sphere(fillet);\n            }\n}\n\nminkowski_sphere_circle();",
    "renders": true
  },
  {
    "primitive_shape": "minkowski_cylinder_circle",
    "openscad_code": "module minkowski_cylinder_circle(h = 30, r = 20, cr = 3, fn = 32) {\n    // main body cylinder\n    linear_extrude(height = h)\n        offset(r = cr)\n            circle(r = r, $fn = fn);\n}\n\n// render\nminkowski_cylinder_circle();",
    "renders": true
  },
  {
    "primitive_shape": "minkowski_cylinder_square",
    "openscad_code": "module minkowski_cylinder_square(h = 40, r = 25, sh = 5, sw = 5) {\n    // Build rounded cylinder via Minkowski of a square and a cylinder\n    linear_extrude(height = h - 2*sh)\n        minkowski() {\n            circle(r = sw, $fn = 32);\n            square([2*(r - sw), 2*(r - sw)], center = true);\n        }\n}\n\nminkowski_cylinder_square();",
    "renders": true
  },
  {
    "primitive_shape": "minkowski_box_sphere",
    "openscad_code": "module minkowski_box_sphere(size = 50, radius = 8) {\n    // 2D rounded square profile\n    linear_extrude(height = size, center = true)\n        offset(r = radius)\n            square(size - 2*radius, center = true);\n}\n\n// Render the shape\nminkowski_box_sphere(60, 6);",
    "renders": true
  },
  {
    "primitive_shape": "minkowski_box_circle",
    "openscad_code": "module minkowski_box_circle(r = 5, h = 40, box = [60, 40, 20]) {\n    minkowski() {\n        cube(box, center = true);\n        cylinder(h = h, r = r, center = true);\n    }\n}\n\nminkowski_box_circle();",
    "renders": true
  },
  {
    "primitive_shape": "offset_circle_outward",
    "openscad_code": "module offset_circle_outward(r=40, t=3, h=10, segments=64){\n    // outer ring\n    outer_pts = [for(i=[0:segments]) [r*cos(i*360/segments), r*sin(i*360/segments)]];\n    // inner ring offset inwards\n    inner_pts = [for(i=[0:segments]) [(r-t)*cos(i*360/segments), (r-t)*sin(i*360/segments)]];\n\n    difference(){\n        linear_extrude(height=h)\n            polygon(outer_pts);\n\n        linear_extrude(height=h+1)  // slight over-cut\n            polygon(inner_pts);\n    }\n}\n\n// usage\noffset_circle_outward();",
    "renders": true
  },
  {
    "primitive_shape": "offset_circle_inward",
    "openscad_code": "// offset_circle_inward\nmodule offset_circle_inward(h = 10, r = 40, offset_dist = 8, sides = 48) {\n    outer_pts = [for (i = [0:sides-1]) \n        [r*cos(i*360/sides), r*sin(i*360/sides)]];\n    inner_pts = [for (i = [0:sides-1]) \n        [(r-offset_dist)*cos(i*360/sides), (r-offset_dist)*sin(i*360/sides)]];\n    \n    difference() {\n        linear_extrude(height = h)\n            polygon(points = outer_pts);\n        translate([0, 0, -1])\n            linear_extrude(height = h + 2)\n                polygon(points = inner_pts);\n    }\n}\n\noffset_circle_inward();",
    "renders": true
  },
  {
    "primitive_shape": "offset_square_outward",
    "openscad_code": "module offset_square_outward(h = 20, side = 80, inset = 10, r = 5) {\n    s = side/2;\n    pts = [\n        [-s+r, -s],\n        [ s-r, -s],\n        [ s, -s+r],\n        [ s,  s-r],\n        [ s-r,  s],\n        [-s+r,  s],\n        [-s,  s-r],\n        [-s, -s+r]\n    ];\n    linear_extrude(height = h)\n        offset(r = r)\n            polygon(pts);\n}\n\noffset_square_outward();",
    "renders": true
  },
  {
    "primitive_shape": "offset_square_inward",
    "openscad_code": "module offset_square_inward(h = 20, side = 100, inset = 15, r = 8) {\n    s = side / 2;\n    i = s - inset;\n    \n    points = [\n        [-s, -s], [ s, -s], [ s,  s], [-s,  s],  // outer square\n        [-i, -i], [ i, -i], [ i,  i], [-i,  i]   // inner square\n    ];\n    \n    paths = [\n        [0, 1, 5, 4],  // bottom\n        [1, 2, 6, 5],  // right\n        [2, 3, 7, 6],  // top\n        [3, 0, 4, 7]   // left\n    ];\n    \n    linear_extrude(height = h)\n        offset(r = r)  // rounded edges\n            polygon(points = points, paths = paths);\n}\n\noffset_square_inward();",
    "renders": true
  },
  {
    "primitive_shape": "offset_star_outward",
    "openscad_code": "// offset_star_outward – star whose tips bulge slightly outward\nmodule offset_star_outward(\n    outer_r = 30,      // tip radius\n    inner_r = 15,      // valley radius\n    n = 5,             // number of points\n    h   = 8,           // thickness\n    bulge = 3          // outward bulge amount\n){\n    pts = [for (i=[0:2*n-1])\n           let(a = 360*i/(2*n))\n           let(r = (i%2==0 ? outer_r : inner_r) + bulge)\n           [r*cos(a), r*sin(a)]\n          ];\n\n    linear_extrude(height = h)\n        polygon(pts);\n}\n\noffset_star_outward();",
    "renders": true
  },
  {
    "primitive_shape": "offset_star_inward",
    "openscad_code": "module offset_star_inward(h = 10, r_outer = 50, r_inner = 20, points = 5, offset = 3) {\n    // Generate star points\n    star_pts = [\n        for (i = [0 : 2 * points - 1])\n            let (\n                angle = i * 180 / points,\n                r = (i % 2 == 0) ? r_outer : r_inner\n            )\n            [r * cos(angle), r * sin(angle)]\n    ];\n    \n    // Offset polygon inward\n    offset_polygon = offset(delta = -offset, $fn = 32) polygon(star_pts);\n    \n    // Extrude into 3D\n    linear_extrude(height = h, center = true) offset_polygon;\n}\n\n// Render the star\noffset_star_inward();",
    "renders": true
  },
  {
    "primitive_shape": "offset_triangle_outward",
    "openscad_code": "module offset_triangle_outward(h = 10, side = 60, offset = 8) {\n    // base triangle points\n    p1 = [-side/2, 0];\n    p2 = [ side/2, 0];\n    p3 = [0, side*sqrt(3)/2];\n\n    // outward offset points (simple radial expansion)\n    r = offset;\n    // direction vectors scaled by offset\n    q1 = p1 - [r*cos(30), r*sin(30)];\n    q2 = p2 + [r*cos(30), r*sin(30)];\n    q3 = p3 + [0, r];\n\n    linear_extrude(height = h)\n        polygon(points = [q1, q2, q3]);\n}\n\noffset_triangle_outward();",
    "renders": true
  },
  {
    "primitive_shape": "offset_hexagon_outward",
    "openscad_code": "module offset_hexagon_outward(height = 10, radius = 50, offset = 5) {\n    // hexagon points\n    pts = [\n        for (a = [0:60:359])\n        [radius * cos(a), radius * sin(a)]\n    ];\n    \n    // offset outline\n    offset_pts = [\n        for (a = [0:60:359])\n        [(radius + offset) * cos(a), (radius + offset) * sin(a)]\n    ];\n    \n    // combined shape with rounded edges\n    linear_extrude(height = height)\n    offset(r = 2) {\n        polygon(concat(offset_pts, [[0,0]], pts));\n    }\n}\n\noffset_hexagon_outward();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_box_2mm",
    "openscad_code": "module rounded_box_2mm(w=60, h=40, d=30, r=2) {\n    // 2D profile with rounded corners\n    offset(r = r) {\n        offset(delta = -r) {\n            square([w - 2*r, h - 2*r], center = true);\n        }\n    }\n}\n\n// Extrude the 2D profile to create 3D rounded box\nlinear_extrude(height = 30, center = true)\n    rounded_box_2mm();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_box_3mm",
    "openscad_code": "module rounded_box_3mm(w=60, h=40, d=30, r=3) {\n    // 2D rounded rectangle profile\n    difference() {\n        offset(r=r) offset(-r) square([w, h], center=true);\n        offset(r=r-3) offset(-(r-3)) square([w-6, h-6], center=true);\n    }\n    linear_extrude(height=d, center=true, convexity=10) {\n        // Rounded corners profile\n        hull() {\n            for(xy=[[r,r], [w-r,r], [w-r,h-r], [r,h-r]]) {\n                translate(xy) circle(r=r, $fn=16);\n            }\n        }\n        // Cut center to create rounded edges\n        offset(-r) square([w-2*r, h-2*r], center=true);\n    }\n}\n\nrounded_box_3mm();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_box_5mm",
    "openscad_code": "module rounded_box_5mm() {\n    // 2D profile with rounded corners\n    profile = [\n        [0, 5], [5, 5], [5, 0], [45, 0], [50, 5], [50, 45], [45, 50], [5, 50], [0, 45]\n    ];\n\n    // Extrude the profile to 5mm height\n    linear_extrude(height = 5) {\n        polygon(points = profile);\n    }\n}\n\nrounded_box_5mm();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_box_10mm",
    "openscad_code": "module rounded_box_10mm(size = [60, 40, 30], r = 5) {\n    // 2D profile of rounded rectangle\n    x = size[0]/2 - r;\n    y = size[1]/2 - r;\n    profile = [\n        [x, y],\n        [x, -y],\n        [-x, -y],\n        [-x, y]\n    ];\n    \n    // Rounded corners via offset\n    offset_profile = offset(r = r, $fn = 16) polygon(profile);\n    \n    // Extrude with top/bottom rounding via hull of cylinders\n    linear_extrude(height = size[2] - 2*r) offset_profile;\n    \n    translate([0, 0, size[2] - r])\n        cylinder(h = r*2, r1 = r, r2 = 0, $fn = 16);\n    \n    mirror([0, 0, 1])\n        translate([0, 0, size[2] - r])\n            cylinder(h = r*2, r1 = r, r2 = 0, $fn = 16);\n}\n\nrounded_box_10mm();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_cube_large",
    "openscad_code": "module rounded_cube_large(size = 80, radius = 10, center = true) {\n    minkowski() {\n        cube(size - 2 * radius, center = center);\n        sphere(r = radius, $fn = 32);\n    }\n}\n\nrounded_cube_large();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_cube_small",
    "openscad_code": "module rounded_cube_small(size = 60, r = 5) {\n    // 2D profile with rounded corners\n    h = size - 2 * r;\n    polygon([\n        [0, r], [r, 0],\n        [h + r, 0], [size, r],\n        [size, h + r], [h + r, size],\n        [r, size], [0, h + r]\n    ]);\n}\n\nlinear_extrude(height = 60)\n    offset(r = 5)\n        rounded_cube_small();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_cube_tall",
    "openscad_code": "module rounded_cube_tall(w=60, d=60, h=100, r=8) {\n    // 2D profile with rounded corners\n    profile = [\n        [r, 0],\n        [w-r, 0],\n        [w, r],\n        [w, d-r],\n        [w-r, d],\n        [r, d],\n        [0, d-r],\n        [0, r]\n    ];\n    \n    // Extrude the profile upward\n    linear_extrude(height=h, center=true)\n        polygon(profile);\n}\n\nrounded_cube_tall();",
    "renders": true
  },
  {
    "primitive_shape": "rounded_cube_wide",
    "openscad_code": "module rounded_cube_wide(w=80, d=50, h=30, r=8) {\n    // 2D profile with rounded corners\n    points = [\n        [r, 0],\n        [w - r, 0],\n        [w, r],\n        [w, h - r],\n        [w - r, h],\n        [r, h],\n        [0, h - r],\n        [0, r]\n    ];\n    \n    polygon(points, paths=[[0,1,2,3,4,5,6,7]]);\n    \n    linear_extrude(height=d, center=true, convexity=10) \n        polygon(points, paths=[[0,1,2,3,4,5,6,7]]);\n}\n\nrounded_cube_wide();",
    "renders": true
  },
  {
    "primitive_shape": "pipe_straight",
    "openscad_code": "// pipe_straight.scad\n// Medium complexity straight pipe with rounded ends\n\nmodule pipe_straight(ID = 20, OD = 25, L = 80, r = 2, $fn = 32) {\n    difference() {\n        // outer cylinder with rounded ends\n        hull() {\n            translate([0, 0, r]) cylinder(h = L - 2*r, d = OD, center = true);\n            translate([0, 0, r]) sphere(d = OD);\n            translate([0, 0, L - r]) sphere(d = OD);\n        }\n\n        // inner bore with rounded ends\n        hull() {\n            translate([0, 0, r]) cylinder(h = L - 2*r, d = ID, center = true);\n            translate([0, 0, r]) sphere(d = ID);\n            translate([0, 0, L - r]) sphere(d = ID);\n        }\n    }\n}\n\npipe_straight();",
    "renders": true
  },
  {
    "primitive_shape": "pipe_curved",
    "openscad_code": "// pipe_curved.scad – 90° sweep, outer Ø60, inner Ø40\nmodule pipe_curved(or=30, ir=20, sweep=90, fn=32){\n    difference(){\n        rotate_extrude(angle=sweep, $fn=fn)\n            translate([or,0]) circle(r=or/10,$fn=fn);   // rounded outer edge\n        \n        rotate_extrude(angle=sweep, $fn=fn)\n            translate([ir,0]) circle(r=ir/10,$fn=fn);   // rounded inner edge\n    }\n}\n\npipe_curved();",
    "renders": true
  },
  {
    "primitive_shape": "pipe_bent",
    "openscad_code": "module pipe_bent(r = 10, wall = 2, bend = 60, straight = 30) {\n    // 2D cross-section: thin-walled circle\n    difference() {\n        circle(r = r);\n        circle(r = r - wall);\n    }\n\n    // extrude along a 90° arc path\n    rotate_extrude(angle = 90, $fn = 64)\n    translate([r + bend, 0, 0])\n    square([wall, straight], center = true);\n}\n\npipe_bent();",
    "renders": true
  },
  {
    "primitive_shape": "pipe_bent_90",
    "openscad_code": "module pipe_bent_90(outer=20, wall=3, radius=35) {\n    inner = outer - wall;\n    torus(outer, radius);\n    difference() {\n        torus(outer, radius);\n        torus(inner, radius + wall);\n    }\n}\n\nmodule torus(r, R) {\n    rotate_extrude(angle=90, $fn=64)\n        translate([R, 0, 0])\n            circle(r, $fn=32);\n}\n\npipe_bent_90();",
    "renders": true
  },
  {
    "primitive_shape": "pipe_bent_45",
    "openscad_code": "module pipe_bent_45(outer=20, wall=2, leg=40, bend=45) {\n    inner = outer - 2*wall;\n    r_mid = leg * 0.6;\n    \n    // straight segment 1\n    translate([0, 0, leg])\n        cylinder(h=leg, r1=outer/2, r2=outer/2);\n    translate([0, 0, leg])\n        cylinder(h=leg, r1=inner/2, r2=inner/2);\n    \n    // 45° bend via rotate_extrude\n    translate([0, 0, leg])\n    rotate([90, 0, 0])\n    rotate_extrude(angle=bend, $fn=32)\n    translate([r_mid, 0, 0])\n    square([outer/2, outer], center=true);\n    \n    translate([0, 0, leg])\n    rotate([90, 0, 0])\n    rotate_extrude(angle=bend, $fn=32)\n    translate([r_mid, 0, 0])\n    square([inner/2, inner], center=true);\n    \n    // straight segment 2\n    translate([r_mid*(1-cos(bend)), -r_mid*sin(bend), leg-r_mid*sin(bend)])\n    rotate([0, bend, 0])\n        cylinder(h=leg, r1=outer/2, r2=outer/2);\n    translate([r_mid*(1-cos(bend)), -r_mid*sin(bend), leg-r_mid*sin(bend)])\n    rotate([0, bend, 0])\n        cylinder(h=leg, r1=inner/2, r2=inner/2);\n}\n\ndifference() {\n    pipe_bent_45();\n}",
    "renders": true
  },
  {
    "primitive_shape": "pipe_with_flange",
    "openscad_code": "// pipe_with_flange primitive\n// medium: pipe + rounded flange with bolt pattern\n\nmodule pipe_with_flange(od=20, id=15, h=40, fl_d=60, fl_t=8, bolts=4, bolt_d=5) {\n    // pipe\n    difference() {\n        cylinder(d=od, h=h, $fn=32);\n        cylinder(d=id, h=h+1, $fn=32);\n    }\n    \n    // flange base\n    translate([0,0,-fl_t])\n        cylinder(d=fl_d, h=fl_t, $fn=64);\n    \n    // bolt holes\n    for(a=[0:360/bolts:360-360/bolts])\n        rotate([0,0,a])\n            translate([fl_d/2-8,0,-fl_t-0.1])\n                cylinder(d=bolt_d, h=fl_t+0.2, $fn=12);\n    \n    // rounded outer edge\n    translate([0,0,-fl_t])\n        rotate_extrude($fn=64)\n            polygon(points=[\n                [fl_d/2-2, 0],\n                [fl_d/2, 2],\n                [fl_d/2, fl_t],\n                [od/2, fl_t],\n                [od/2, 0]\n            ]);\n}\n\npipe_with_flange();",
    "renders": true
  },
  {
    "primitive_shape": "pipe_with_collar",
    "openscad_code": "module pipe_with_collar(od=40, id=30, h=60, collar_h=10, collar_od=50, r=2) {\n    difference() {\n        // outer body with rounded top\n        union() {\n            translate([0, 0, collar_h])\n                cylinder(h=h-collar_h, d=od, center=false, $fn=60);\n            minkowski() {\n                cylinder(h=collar_h, d=collar_od, center=false, $fn=60);\n                sphere(r);\n            }\n        }\n        // inner bore\n        translate([0, 0, -1])\n            cylinder(h=h+collar_h+2, d=id, center=false, $fn=60);\n    }\n}\n\npipe_with_collar();",
    "renders": true
  },
  {
    "primitive_shape": "slot_rectangular",
    "openscad_code": "module slot_rectangular(len=80, wid=40, thick=5, r=4) {\n    // 2D profile with rounded ends\n    profile = [\n        [r, 0], [len-r, 0],\n        [len, r], [len, wid-r],\n        [len-r, wid], [r, wid],\n        [0, wid-r], [0, r]\n    ];\n    \n    // Extrude into 3D\n    linear_extrude(height = thick)\n        polygon(profile);\n}\n\nslot_rectangular();",
    "renders": true
  },
  {
    "primitive_shape": "slot_rounded",
    "openscad_code": "module slot_rounded(w = 60, h = 30, t = 8, r = 4) {\n    $fn = 30;\n    \n    // 2D outline of slot with rounded ends\n    polygon(\n        concat(\n            // Bottom half-circle\n            [for(a = [180:5:360]) [w/2 - r + r*cos(a), h/2 - r + r*sin(a)]],\n            // Bottom straight\n            [w/2 - r, -h/2 + r],\n            // Left half-circle\n            [for(a = [270:5:450]) [-w/2 + r + r*cos(a), -h/2 + r + r*sin(a)]],\n            // Top straight\n            [-w/2 + r, h/2 - r],\n            // Top half-circle\n            [for(a = [0:5:180]) [w/2 - r + r*cos(a), h/2 - r + r*sin(a)]]\n        )\n    );\n}\n\nlinear_extrude(height = 8)\n    slot_rounded();",
    "renders": true
  },
  {
    "primitive_shape": "slot_long",
    "openscad_code": "module slot_long(w = 80, h = 12, t = 3, r = 2) {\n    // 2D profile with rounded ends\n    x = w/2;\n    y = h/2;\n    profile = [\n        [-x + r,  y],\n        [ x - r,  y],\n        [ x,      y - r],\n        [ x,     -y + r],\n        [ x - r, -y],\n        [-x + r, -y],\n        [-x,     -y + r],\n        [-x,      y - r]\n    ];\n    \n    // Generate smooth rounded ends\n    difference() {\n        linear_extrude(height = t, center = true)\n            polygon(profile);\n        \n        // Cut the slot through the center\n        translate([0, 0, -t/2 - 0.1])\n            cube([w * 1.1, h - 2*t, t + 0.2], center = true);\n    }\n}\n\nslot_long();",
    "renders": true
  },
  {
    "primitive_shape": "slot_wide",
    "openscad_code": "module slot_wide() {\n    // Overall dimensions\n    width = 80;\n    height = 40;\n    thickness = 12;\n    \n    // Corner radius\n    r = 6;\n    \n    // Slot width\n    slot_w = 20;\n    \n    // Create 2D profile of slot with rounded ends\n    polygon([\n        [0, r],\n        [0, height - r],\n        [r, height],\n        [width - r, height],\n        [width, height - r],\n        [width, r],\n        [width - r, 0],\n        [width/2 + slot_w/2, 0],\n        [width/2 + slot_w/2, height],\n        [width/2 - slot_w/2, height],\n        [width/2 - slot_w/2, 0],\n        [r, 0]\n    ]);\n}\n\nlinear_extrude(height = 12)\nslot_wide();",
    "renders": true
  },
  {
    "primitive_shape": "slot_narrow",
    "openscad_code": "module slot_narrow(w = 80, h = 20, t = 3, r = 2) {\n    // 2D profile with rounded ends\n    xoff = w/2 - r;\n    profile = [\n        [-xoff, -h/2],\n        [ xoff, -h/2],\n        [ w/2, -h/2 + r],\n        [ w/2,  h/2 - r],\n        [ xoff,  h/2],\n        [-xoff,  h/2],\n        [-w/2,  h/2 - r],\n        [-w/2, -h/2 + r]\n    ];\n    \n    linear_extrude(height = t, center = true)\n        polygon(\n            points = profile,\n            paths = [each [0:len(profile)-1]]\n        );\n}\n\nslot_narrow();",
    "renders": true
  },
  {
    "primitive_shape": "groove_circular",
    "openscad_code": "module groove_circular(r = 30, depth = 10, groove_r = 3, groove_n = 12) {\n    difference() {\n        // Main disk\n        cylinder(h = depth, r = r, $fn = 64);\n        \n        // Circular grooves\n        for (i = [1:1:groove_n]) {\n            rotate([0, 0, i * 360 / groove_n])\n                translate([r - groove_r, 0, -1])\n                    cube([groove_r * 2, groove_r * 2, depth + 2], center = true);\n        }\n        \n        // Center hole\n        cylinder(h = depth + 2, r = 5, center = true, $fn = 32);\n    }\n}\n\ngroove_circular();",
    "renders": true
  },
  {
    "primitive_shape": "groove_rectangular",
    "openscad_code": "module groove_rectangular(width = 80, height = 50, depth = 10, groove_depth = 4, groove_width = 30, corner_r = 6) {\n    difference() {\n        linear_extrude(height = depth)\n            offset(r = corner_r)\n                offset(r = -corner_r)\n                    square([width, height], center = true);\n\n        translate([0, 0, -0.01])\n            linear_extrude(height = groove_depth + 0.02)\n                square([groove_width, height + 2], center = true);\n    }\n}\n\ngroove_rectangular();",
    "renders": true
  },
  {
    "primitive_shape": "groove_v_shaped",
    "openscad_code": "module groove_v_shaped(height = 12, width = 80, depth = 80, angle = 60){\n    // V-groove profile\n    profile = [\n        [0, 0],\n        [width, 0],\n        [width/2 + depth*tan(angle/2)/2, height],\n        [width/2 - depth*tan(angle/2)/2, height]\n    ];\n    \n    // Rounded top corners (2mm radius)\n    round_r = 2;\n    top_left = [width/2 - depth*tan(angle/2)/2, height];\n    top_right = [width/2 + depth*tan(angle/2)/2, height];\n    \n    rounded_profile = [\n        [0, 0],\n        [width, 0],\n        [top_right[0] - round_r, top_right[1]],\n        [width/2, top_right[1] + round_r],\n        [top_left[0] + round_r, top_left[1]]\n    ];\n    \n    linear_extrude(height = depth)\n        polygon(rounded_profile);\n}\n\ngroove_v_shaped();",
    "renders": true
  },
  {
    "primitive_shape": "groove_u_shaped",
    "openscad_code": "module groove_u_shaped(h=40, w=60, d=50, wall=4, radius=8) {\n    rw = w/2 - wall - radius;\n    rd = d/2 - wall - radius;\n    points = [\n        [w/2 - wall, d/2],\n        [w/2 - wall, d/2 - wall - radius],\n        [w/2 - wall - radius, d/2 - wall],\n        [-(w/2 - wall - radius), d/2 - wall],\n        [-(w/2 - wall), d/2 - wall - radius],\n        [-(w/2 - wall), d/2],\n        [-w/2, d/2],\n        [-w/2, -d/2],\n        [w/2, -d/2]\n    ];\n    difference() {\n        linear_extrude(height=h, convexity=10)\n            polygon(points=points);\n        translate([0, 0, -1])\n            linear_extrude(height=h+2, convexity=10)\n                offset(r=-wall)\n                    polygon(points=points);\n    }\n}\n\ngroove_u_shaped();",
    "renders": true
  },
  {
    "primitive_shape": "slot_circular",
    "openscad_code": "// slot_circular primitive – circular disk with a centered slot\n// outer diameter 80 mm, thickness 8 mm, slot 4 mm wide × 40 mm long\n\nmodule slot_circular() {\n    // 2D profile: circle with central horizontal slot\n    linear_extrude(height = 8)\n        difference() {\n            circle(d = 80, $fn = 64);\n            translate([0, 0, 0])\n                square([40, 4], center = true);\n        }\n}\n\nslot_circular();",
    "renders": true
  },
  {
    "primitive_shape": "slot_rounded_ends",
    "openscad_code": "module slot_rounded_ends(\n    length = 80,\n    width  = 20,\n    thick  = 8,\n    r      = 10   // end radius\n){\n    half = length/2 - r;\n    polygon(\n        points = [\n            [-half, -width/2],\n            [ half, -width/2],\n            [ half + r, 0],\n            [ half,  width/2],\n            [-half,  width/2],\n            [-half - r, 0]\n        ]\n    );\n    linear_extrude(height = thick, center = true);\n}\n\nslot_rounded_ends();",
    "renders": true
  },
  {
    "primitive_shape": "notch_square",
    "openscad_code": "module notch_square(size = 60, notch_depth = 10, radius = 6, height = 15) {\n    s = size / 2;\n    d = notch_depth;\n    r = radius;\n\n    points = [\n        [-s, -s],\n        [ s - d, -s],\n        [ s - d, -s + d],\n        [ s, -s + d],\n        [ s,  s],\n        [-s,  s]\n    ];\n\n    rounded = [\n        for (i = [0:len(points) - 1])\n            let (p0 = points[i],\n                 p1 = points[(i + 1) % len(points)],\n                 p2 = points[(i + 2) % len(points)])\n            [p1[0] + r * (p0[0] - p1[0]) / norm(p0 - p1),\n             p1[1] + r * (p0[1] - p1[1]) / norm(p0 - p1)]\n    ];\n\n    linear_extrude(height = height, convexity = 4)\n        polygon(points = rounded);\n}\n\nnotch_square();",
    "renders": true
  },
  {
    "primitive_shape": "notch_round",
    "openscad_code": "module notch_round(w = 60, h = 30, r = 10, t = 8) {\n    // 2D profile with rounded ends\n    profile = [\n        [0, 0],\n        [w - r, 0],\n        [w, r],\n        [w, h - t],\n        [w - t + r, h - t],\n        [w - t, h - t + r],\n        [w - t, h],\n        [r, h],\n        [0, h - r]\n    ];\n\n    // Offset for rounded corners\n    offset_profile = offset(delta = r, $fn = 32, profile);\n\n    linear_extrude(height = 20) offset_profile;\n}\n\nnotch_round();",
    "renders": true
  },
  {
    "primitive_shape": "notch_trapezoid",
    "openscad_code": "module notch_trapezoid(\n    base = 60,\n    top = 40,\n    height = 50,\n    thickness = 15,\n    notch_depth = 8,\n    notch_width = 12,\n    r = 3\n) {\n    half = base / 2;\n    notch_y = height - (top / 2) - notch_depth;\n    \n    profile = [\n        [-half, 0, r],\n        [half - r, 0, r],\n        [half, r, r],\n        [top/2 - r, height - r, r],\n        [top/2, height, r],\n        [-top/2 + r, height, r],\n        [-top/2, height - r, r],\n        [-half + r, r, r],\n        [-half + r, notch_y, r],\n        [-half + r + notch_width, notch_y, r],\n        [-half + r + notch_width, notch_y + notch_depth, r],\n        [-half + r, notch_y + notch_depth, r],\n        [-half, notch_y + notch_depth, r]\n    ];\n    \n    linear_extrude(height = thickness, center = true)\n        offset(r = r)\n            polygon([for (p = profile) [p.x, p.y]]);\n}\n\nnotch_trapezoid();",
    "renders": true
  },
  {
    "primitive_shape": "channel_rectangular",
    "openscad_code": "module channel_rectangular(\n    length = 100,\n    width  = 40,\n    height = 20,\n    wall   = 4,\n    radius = 3\n){\n    outer_pts = [\n        [0, 0],\n        [length, 0],\n        [length, width],\n        [0, width]\n    ];\n\n    inner_pts = [\n        [wall + radius, wall + radius],\n        [length - wall - radius, wall + radius],\n        [length - wall - radius, width - wall - radius],\n        [wall + radius, width - wall - radius]\n    ];\n\n    difference(){\n        linear_extrude(height)\n            offset(r = radius) polygon(outer_pts);\n\n        translate([0, 0, wall])\n            linear_extrude(height)\n                offset(r = radius - 0.01) polygon(inner_pts);\n    }\n}\n\nchannel_rectangular();",
    "renders": true
  },
  {
    "primitive_shape": "channel_circular",
    "openscad_code": "module channel_circular(r = 25, h = 30, wall = 3, fillet = 2) {\n    outer = r;\n    inner = r - wall;\n    \n    // 2D profile with rounded bottom edges\n    difference() {\n        union() {\n            // outer half-circle\n            offset(r = fillet) offset(r = -fillet)\n                circle(r = outer, $fn = 60);\n            // rectangular top extension\n            translate([0, outer - fillet])\n                square([outer*2, fillet], center = true);\n        }\n        // inner recess\n        offset(r = fillet) offset(r = -fillet)\n            circle(r = inner, $fn = 60);\n    }\n}\n\nlinear_extrude(height = 30)\nchannel_circular();",
    "renders": true
  },
  {
    "primitive_shape": "channel_u_shaped",
    "openscad_code": "module channel_u_shaped(height = 40, width = 80, thickness = 4, radius = 6) {\n    outer_w = width/2;\n    inner_w = outer_w - thickness;\n    depth = width/2;\n\n    // 2D profile for the U-channel\n    polygon(points=[\n        [-outer_w, 0],                    // BL\n        [-outer_w, depth],                // TL\n        [-inner_w, depth],                // TR inner\n        [-inner_w, radius],               // UR inner\n        [-radius, radius],                // UR arc start\n        [-radius, thickness],             // BR arc start\n        [ radius, thickness],             // BL arc end\n        [ radius, radius],                // BR arc end\n        [ inner_w, radius],               // UL inner\n        [ inner_w, depth],                // TL inner\n        [ outer_w, depth],                // TR outer\n        [ outer_w, 0]                     // BR outer\n    ]);\n\n    // extrude the profile upward\n    linear_extrude(height = height, center = true) \n        channel_u_shaped();\n}\n\nchannel_u_shaped();",
    "renders": true
  },
  {
    "primitive_shape": "channel_v_shaped",
    "openscad_code": "module channel_v_shaped(\n    length = 100,\n    width  = 40,\n    depth  = 20,\n    fillet = 3\n){\n    half_w = width/2;\n    profile = [\n        [-half_w, 0],\n        [-half_w + fillet, fillet],\n        [0, depth - fillet],\n        [half_w - fillet, fillet],\n        [half_w, 0]\n    ];\n    linear_extrude(height = length, center = true)\n        polygon(points = profile);\n}\n\nchannel_v_shaped();",
    "renders": true
  },
  {
    "primitive_shape": "fillet_square",
    "openscad_code": "module fillet_square(size = 80, thickness = 10, radius = 8) {\n    s = size / 2 - radius;\n    a = 2 * radius;\n    linear_extrude(height = thickness)\n        polygon(\n            concat(\n                [\n                    [-s, -size/2],\n                    [ s, -size/2],\n                    [ size/2, -s],\n                    [ size/2,  s],\n                    [ s,  size/2],\n                    [-s,  size/2],\n                    [-size/2,  s],\n                    [-size/2, -s]\n                ],\n                arc(s, -s,  270, 360, radius),\n                arc(s,  s,    0,  90, radius),\n                arc(-s,  s,   90, 180, radius),\n                arc(-s, -s,  180, 270, radius)\n            )\n        );\n}\n\nfunction arc(cx, cy, start, end, r, n = 8) = [\n    for (a = [start : (end - start) / n : end]) [cx + r * cos(a), cy + r * sin(a)]\n];\n\nfillet_square();",
    "renders": false
  },
  {
    "primitive_shape": "fillet_circular",
    "openscad_code": "module fillet_circular(r = 40, h = 20, r_fillet = 5, $fn = 64) {\n    // 2D profile: rectangle with rounded top corners\n    step = r_fillet;\n    pts = [\n        [-r, -h/2],\n        [ r, -h/2],\n        [ r,  h/2 - r_fillet],\n        [ r - r_fillet,  h/2 - r_fillet],\n        [ r - r_fillet,  h/2],\n        [-r + r_fillet,  h/2],\n        [-r + r_fillet,  h/2 - r_fillet],\n        [-r,  h/2 - r_fillet]\n    ];\n    path = [0,1,2,3,4,5,6,7];\n    linear_extrude(height = r_fillet, center = true, convexity = 10)\n        polygon(points = pts, paths = [path]);\n}\n\nfillet_circular();",
    "renders": false
  },
  {
    "primitive_shape": "fillet_concave",
    "openscad_code": "module fillet_concave(r=50, h=20, fillet=8, $fn=64){\n    // 2D profile: outer square with concave fillet corners\n    outer = r;\n    inner = outer - fillet;\n    a = outer;\n    b = inner;\n    polygon([\n        [a, -a],    // bottom-right\n        [a, -b],    // start of fillet\n        [b, -a],    // fillet end\n        [b, -b],    // inner corner\n        [-b, -b],\n        [-b, -a],\n        [-a, -b],\n        [-a, -a],\n        [-a, b],\n        [-b, a],\n        [-b, b],\n        [b, b],\n        [b, a],\n        [a, b],\n        [a, -a]\n    ]);\n    linear_extrude(height=h, center=true);\n}\n\nfillet_concave();",
    "renders": false
  },
  {
    "primitive_shape": "fillet_convex",
    "openscad_code": "module fillet_convex(r=25, h=30, fillet=5) {\n    profile = [\n        [0, 0],\n        [r, 0],\n        [r, h - fillet],\n        [r - fillet, h],\n        [fillet, h],\n        [0, h - fillet]\n    ];\n    polygon(profile);\n}\n\nlinear_extrude(height = 2) fillet_convex();",
    "renders": false
  },
  {
    "primitive_shape": "chamfer_square",
    "openscad_code": "// chamfer_square.scad\n// 80 mm square with 5 mm chamfers on upper edges\n\nmodule chamfer_square(size = 80, height = 15, chamfer = 5) {\n    // 2D profile: square with top edges chamfered\n    profile = [\n        [0, 0],\n        [size, 0],\n        [size, height - chamfer],\n        [size - chamfer, height],\n        [chamfer, height],\n        [0, height - chamfer]\n    ];\n\n    linear_extrude(height = 1, scale = 1)\n        polygon(points = profile);\n}\n\nchamfer_square();",
    "renders": false
  },
  {
    "primitive_shape": "chamfer_45",
    "openscad_code": "module chamfer_45(h=40, size=50) {\n    s = size;\n    h2 = h/2;\n    points = [\n        [0, 0],\n        [s, 0],\n        [s, s-h2],\n        [s-h2, s],\n        [0, s]\n    ];\n    linear_extrude(height=h, chamfer=true, $fn=8) polygon(points);\n}\n\nchamfer_45();",
    "renders": false
  },
  {
    "primitive_shape": "chamfer_wider",
    "openscad_code": "module chamfer_wider(h = 40, w = 80, chamfer = 8) {\n    // 2D profile with chamfered top and bottom edges\n    polygon(points = [\n        [0, 0],\n        [w, 0],\n        [w - chamfer, chamfer],\n        [w - chamfer, h - chamfer],\n        [w, h],\n        [0, h],\n        [chamfer, h - chamfer],\n        [chamfer, chamfer]\n    ]);\n}\n\nlinear_extrude(height = 20)\n    chamfer_wider();",
    "renders": false
  },
  {
    "primitive_shape": "dovetail",
    "openscad_code": "module dovetail(width = 60, height = 30, tail_angle = 15, thickness = 12, round_r = 2) {\n    tail_offset = height * tan(tail_angle);\n    pts = [\n        [0, 0],\n        [width, 0],\n        [width - tail_offset, height],\n        [tail_offset, height]\n    ];\n    \n    linear_extrude(height = thickness, convexity = 4)\n        offset(r = round_r)\n            polygon(pts);\n}\n\ndovetail();",
    "renders": false
  },
  {
    "primitive_shape": "dovetail_male",
    "openscad_code": "module dovetail_male(\n    length = 80,\n    width = 40,\n    height = 20,\n    tail_angle = 15,\n    fillet_r = 2\n) {\n    tail_height = height * 0.7;\n    tail_width = width - 2 * tail_height * tan(tail_angle);\n\n    points = [\n        [0, 0],\n        [width, 0],\n        [width, tail_height - fillet_r],\n        [width - fillet_r, tail_height],\n        [tail_width/2 + fillet_r, tail_height],\n        [tail_width/2, tail_height - fillet_r],\n        [-tail_width/2, tail_height - fillet_r],\n        [-tail_width/2 - fillet_r, tail_height],\n        [fillet_r, tail_height],\n        [0, tail_height - fillet_r]\n    ];\n\n    linear_extrude(height = length, center = true)\n        polygon(points = points);\n}\n\ndovetail_male();",
    "renders": false
  },
  {
    "primitive_shape": "dovetail_female",
    "openscad_code": "module dovetail_female(\n    width=60,\n    height=30,\n    depth=40,\n    angle=10,\n    fillet=2\n){\n    ta = tan(angle);\n    y1 = height/2 - ta*width/2;\n    y2 = height/2 + ta*width/2;\n    \n    points = [\n        [-width/2, -height/2],\n        [-width/2, -y1],\n        [-width/2+fillet, -y1+fillet],\n        [-width/2+fillet,  y1-fillet],\n        [-width/2,  y1],\n        [-width/2,  height/2],\n        [ width/2,  height/2],\n        [ width/2,  y1],\n        [ width/2-fillet,  y1-fillet],\n        [ width/2-fillet, -y1+fillet],\n        [ width/2, -y1],\n        [ width/2, -height/2]\n    ];\n    \n    linear_extrude(depth)\n        polygon(points);\n}\n\ndovetail_female();",
    "renders": false
  },
  {
    "primitive_shape": "dovetail_steep",
    "openscad_code": "module dovetail_steep(h = 40, w = 60, tail_angle = 75, thickness = 8) {\n    // half-width and height for trig\n    hw = w/2;\n    alpha = tail_angle;\n    dx = thickness * tan(90 - alpha);\n\n    // 2D dovetail profile with rounded top\n    profile = [\n        [-hw, 0],\n        [-hw + dx, thickness],\n        [hw - dx, thickness],\n        [hw, 0],\n        [hw - dx, -thickness],\n        [-hw + dx, -thickness]\n    ];\n\n    // extrude to height, rounded ends via hull of spheres\n    hull() {\n        translate([0, 0, -h/2]) sphere(d = 1.5 * thickness, $fn = 16);\n        translate([0, 0,  h/2]) sphere(d = 1.5 * thickness, $fn = 16);\n        linear_extrude(height = h, center = true, convexity = 4)\n            polygon(profile);\n    }\n}\n\ndovetail_steep();",
    "renders": false
  },
  {
    "primitive_shape": "dovetail_shallow",
    "openscad_code": "module dovetail_shallow(h = 12, l = 80, w = 50, angle = 15, r = 2) {\n    a = tan(angle);\n    p = l/2;\n    y1 = w/2;\n    y2 = w/2 - h*a;\n    \n    points = [\n        [-p,  y1],\n        [ p,  y1],\n        [ p,  y2],\n        [-p,  y2]\n    ];\n    \n    linear_extrude(height = h, convexity = 4)\n        offset(r = r)\n            polygon(points);\n}\n\ndovetail_shallow();",
    "renders": false
  },
  {
    "primitive_shape": "teeth_external",
    "openscad_code": "module teeth_external(\n    outer_radius = 25,\n    inner_radius = 20,\n    height = 8,\n    teeth_count = 20,\n    tooth_depth = 3,\n    fillet = 1\n){\n    // one tooth profile\n    function tooth_points() = \n        let(\n            a_tooth = 360 / teeth_count,\n            a_half = a_tooth / 2,\n            r_outer = outer_radius + tooth_depth,\n            r_inner = outer_radius\n        ) [\n            [0, r_inner],\n            [r_inner * sin(a_half * 0.3), r_inner * cos(a_half * 0.3)],\n            [r_outer * sin(a_half * 0.5), r_outer * cos(a_half * 0.5)],\n            [r_outer * sin(a_half), r_outer * cos(a_half)]\n        ];\n\n    // mirrored tooth for full segment\n    full_tooth = concat(\n        tooth_points(),\n        [\n            [tooth_points()[len(tooth_points())-1][0], tooth_points()[len(tooth_points())-1][1]],\n            [tooth_points()[len(tooth_points())-2][0], tooth_points()[len(tooth_points())-2][1]],\n            [tooth_points()[len(tooth_points())-3][0], -tooth_points()[len(tooth_points())-3][1]],\n            [0, inner_radius]\n        ]\n    );\n\n    // base circle arc\n    arc_points = [\n        for(i = [0:5])\n            let(a = (360 / teeth_count) * i / 5)\n            [inner_radius * sin(a), inner_radius * cos(a)]\n    ];\n\n    // full segment polygon\n    segment_polygon = concat(full_tooth, arc_points);\n\n    linear_extrude(height = height, convexity = 10)\n        union() {\n            // main toothed ring\n            for(i = [0:teeth_count-1])\n                rotate(i * 360 / teeth_count)\n                    polygon(segment_polygon);\n            \n            // center circle with fillet\n            difference() {\n                circle(r = inner_radius, $fn = 64);\n                circle(r = inner_radius - fillet, $fn = 64);\n            }\n        }\n}\n\nteeth_external();",
    "renders": false
  },
  {
    "primitive_shape": "teeth_internal",
    "openscad_code": "module teeth_internal(\n    teeth = 16,\n    outer_d = 100,\n    inner_d = 80,\n    height = 12,\n    taper = 0.8,\n    chamfer = 1\n){\n    tooth_angle = 360 / teeth;\n    r_out = outer_d / 2;\n    r_in  = inner_d / 2;\n    r_mid = r_in + (r_out - r_in) * taper;\n    \n    points = [\n        for (i = [0 : teeth - 1])\n        let (a = i * tooth_angle)\n        each [\n            [r_mid * cos(a), r_mid * sin(a)],\n            [r_out * cos(a - 0.4), r_out * sin(a - 0.4)],\n            [r_out * cos(a + 0.4), r_out * sin(a + 0.4)]\n        ]\n    ];\n    \n    union() {\n        linear_extrude(height = height, center = true)\n            difference() {\n                circle(r = r_out + 0.01, $fn = teeth * 3);\n                circle(r = r_in, $fn = teeth * 3);\n            }\n        \n        linear_extrude(height = height, center = true, convexity = 10)\n            polygon(points);\n    }\n}\n\nteeth_internal();",
    "renders": false
  },
  {
    "primitive_shape": "keyway_rectangular",
    "openscad_code": "// keyway_rectangular.scad\n// Rectangular prism with rounded keyway cut along Z axis\n\nmodule keyway_rectangular(w=40, h=30, d=20, kw=10, kd=5, r=2) {\n    // outer rectangle with rounded edges\n    difference() {\n        rounded_box(w, h, d, r);\n        \n        // keyway slot\n        translate([0, -h/2 - 1, d/2])\n            rotate([90, 0, 0])\n                cylinder(h=h+2, r=kw/2, $fn=32);\n    }\n}\n\nmodule rounded_box(w, h, d, r) {\n    linear_extrude(height=d, center=true)\n        offset(r=r)\n            offset(-r)\n                polygon([\n                    [-w/2, -h/2],\n                    [ w/2, -h/2],\n                    [ w/2,  h/2],\n                    [-w/2,  h/2]\n                ]);\n}\n\n// render\nkeyway_rectangular();",
    "renders": false
  },
  {
    "primitive_shape": "keyway_square",
    "openscad_code": "module keyway_square(size = 60, keyw = 8, keyh = 4, r = 3, h = 10){\n    // 2D profile with rounded corners and keyway\n    polygon(\n        concat(\n            // bottom-left corner\n            arc_points(r, r, r, 180, 270, 8),\n            // bottom edge\n            [[r, 0], [size/2 - keyw/2, 0]],\n            // keyway bottom\n            [[size/2 - keyw/2, -keyh], [size/2 + keyw/2, -keyh]],\n            [[size/2 + keyw/2, 0], [size - r, 0]],\n            // bottom-right corner\n            arc_points(size - r, r, r, 270, 360, 8),\n            // right edge\n            [[size, r], [size, size - r]],\n            // top-right corner\n            arc_points(size - r, size - r, r, 0, 90, 8),\n            // top edge\n            [[size - r, size], [r, size]],\n            // top-left corner\n            arc_points(r, size - r, r, 90, 180, 8),\n            // left edge\n            [[0, size - r], [0, r]]\n        )\n    );\n    \n    // helper for rounded corners\n    function arc_points(cx, cy, r, a0, a1, n) = \n        [for(i = [0:n]) [cx + r*cos(a0 + (a1-a0)*i/n), cy + r*sin(a0 + (a1-a0)*i/n)]];\n    \n    linear_extrude(height = h, center = false)\n        children();\n}\n\nkeyway_square();",
    "renders": false
  },
  {
    "primitive_shape": "keyway_rounded",
    "openscad_code": "module keyway_rounded(h = 10, d = 40, w = 10, r = 2){\n    sh = d/2 - w/2;\n    pts = [\n        [0, -d/2],\n        [sh - r, -d/2],\n        [sh, -d/2 + r],\n        [sh, d/2 - r],\n        [sh - r, d/2],\n        [0, d/2],\n        [-sh + r, d/2],\n        [-sh, d/2 - r],\n        [-sh, -d/2 + r],\n        [-sh + r, -d/2]\n    ];\n    linear_extrude(height = h)\n        offset(r = r)\n            polygon(pts);\n}\n\nkeyway_rounded();",
    "renders": false
  },
  {
    "primitive_shape": "serration_square",
    "openscad_code": "module serration_square(size = 80, teeth = 12, tooth_depth = 5, height = 15, fillet = 2) {\n    side = size / 2;\n    step = size / teeth;\n\n    points = concat(\n        [-side, -side],\n        [for (i = [0:teeth]) \n            let(x = -side + i*step)\n            [x, -side + ((i%2==0)?0:tooth_depth)]],\n        [side, -side],\n        [side, side],\n        [for (i = [teeth:-1:0]) \n            let(x = side - i*step)\n            [x, side - ((i%2==0)?0:tooth_depth)]],\n        [-side, side]\n    );\n\n    linear_extrude(height = height, convexity = 10) \n        offset(r = fillet) polygon(points);\n}\n\nserration_square();",
    "renders": false
  },
  {
    "primitive_shape": "serration_round",
    "openscad_code": "module serration_round(d=60, h=15, teeth=24, tooth_depth=2, fillet=1) {\n    r = d/2;\n    pts = [\n        for (i=[0:teeth-1])\n        let (\n            a1 = 360/teeth*i,\n            a2 = 360/teeth*(i+0.5),\n            a3 = 360/teeth*(i+1),\n            r_inner = r - tooth_depth,\n            p1 = [r*cos(a1), r*sin(a1)],\n            p2 = [r_inner*cos(a2), r_inner*sin(a2)],\n            p3 = [r*cos(a3), r*sin(a3)]\n        ) [p1, p2, p3]\n    ];\n    \n    difference() {\n        linear_extrude(height=h, center=true)\n            polygon([for (ring=pts) for (pt=ring) pt]);\n        \n        // Rounded top edges\n        translate([0,0,h/2-fillet])\n            minkowski() {\n                linear_extrude(height=0.01)\n                    offset(-fillet) polygon([for (ring=pts) for (pt=ring) pt]);\n                sphere(fillet);\n            }\n    }\n}\n\nserration_round();",
    "renders": false
  },
  {
    "primitive_shape": "serration_fine",
    "openscad_code": "module serration_fine(h = 10, teeth = 24, outer = 60, inner = 45) {\n    step = 360 / teeth;\n    small = 0.15 * step;\n    \n    points = [\n        for (a = [0 : step : 360 - step])\n        [\n            [inner * cos(a + small), inner * sin(a + small)],\n            [outer * cos(a + step/2), outer * sin(a + step/2)],\n            [inner * cos(a + step - small), inner * sin(a + step - small)]\n        ]\n    ];\n    \n    polygon(concat([for (p = points) each p]));\n}\n\nlinear_extrude(height = 10)\n    serration_fine();",
    "renders": false
  },
  {
    "primitive_shape": "serration_coarse",
    "openscad_code": "module serration_coarse(h=8, teeth=12, outer=50, inner=30, r_fillet=1.5) {\n    step = 360/teeth;\n    pts = [\n        for(a=[0:step:359.9]) \n        let(r = (floor(a/step)%2==0) ? outer : inner)\n        [r*cos(a), r*sin(a)]\n    ];\n    \n    difference() {\n        linear_extrude(height = h) polygon(pts);\n        for(a=[step/2:step:360]) \n            translate([inner*cos(a), inner*sin(a), -0.1]) \n                cylinder(h=h+0.2, r=r_fillet, $fn=8);\n    }\n}\n\nserration_coarse();",
    "renders": false
  },
  {
    "primitive_shape": "spur_square",
    "openscad_code": "module rounded_square(w = 60, h = 10, r = 8) {\n    rr = min(r, w/2 - 0.01);\n    pts = [\n        [rr, 0],\n        [w - rr, 0],\n        [w, rr],\n        [w, h - rr],\n        [w - rr, h],\n        [rr, h],\n        [0, h - rr],\n        [0, rr]\n    ];\n    path = [\n        [0, 1, 2, 3, 4, 5, 6, 7]\n    ];\n    linear_extrude(height = 10)\n        offset(rr) offset(-rr) polygon(pts);\n}\n\nrounded_square();",
    "renders": false
  },
  {
    "primitive_shape": "spur_round",
    "openscad_code": "module spur_round(r=60, teeth=20, thickness=5, pressure_angle=20, backlash=0.2) {\n    $fn = 50;\n    inv = 20; // involute resolution\n    \n    module tooth_profile() {\n        pa = pressure_angle;\n        m = r * 2 / teeth;\n        \n        // base circle\n        rb = r * cos(pa);\n        \n        // involute points\n        function involute(t) = \n            [ rb * (cos(t) + t * sin(t)),\n              rb * (sin(t) - t * cos(t)) ];\n        \n        // generate tooth profile\n        points = concat(\n            [ for(i=[0:inv]) involute(i*0.15) ],\n            [ [r+backlash, -m/4], [r+backlash, m/4] ],\n            [ for(i=[inv:-1:0]) let(p = involute(i*0.15)) [p.x, -p.y] ]\n        );\n        polygon(points);\n    }\n    \n    // gear body\n    rotate_extrude()\n    union() {\n        for(i=[0:teeth-1]) rotate(i*360/teeth) tooth_profile();\n    }\n    \n    // center hole\n    rotate_extrude() translate([r/3,0]) circle(d=10);\n}\n\nspur_round();",
    "renders": false
  },
  {
    "primitive_shape": "spur_tapered",
    "openscad_code": "module spur_tapered(\n    outer_radius = 40,\n    inner_radius = 20,\n    height = 30,\n    teeth = 12,\n    pressure_angle = 20,\n    taper = 0.6\n) {\n    tooth_angle = 360/teeth;\n    inv = pressure_angle;\n\n    module tooth_profile(r, h, taper) {\n        r_top = r * (1 - taper * h/height);\n        points = [\n            [r * cos(-inv), r * sin(-inv)],\n            [r_top * cos(-inv), r_top * sin(-inv)],\n            [r_top * cos(inv), r_top * sin(inv)],\n            [r * cos(inv), r * sin(inv)]\n        ];\n        polygon(points);\n    }\n\n    linear_extrude(height = height, scale = [1, 1], center = true)\n    union() {\n        difference() {\n            circle(r = outer_radius, $fn = teeth * 4);\n            circle(r = inner_radius, $fn = teeth * 4);\n        }\n        for (i = [0:1:teeth-1])\n            rotate(i * tooth_angle)\n                tooth_profile(outer_radius, height, taper);\n    }\n}\n\nspur_tapered();",
    "renders": false
  },
  {
    "primitive_shape": "rebate_square",
    "openscad_code": "module rebate_square(size = 60, rebate = 8, height = 12, radius = 3) {\n    side = size - 2*rebate;\n    points = [\n        [rebate, 0],\n        [size - rebate, 0],\n        [size, rebate],\n        [size, size - rebate],\n        [size - rebate, size],\n        [rebate, size],\n        [0, size - rebate],\n        [0, rebate]\n    ];\n\n    difference() {\n        linear_extrude(height = height, center = false, convexity = 10)\n            polygon(points = points, convexity = 10);\n\n        translate([radius, radius, -1])\n            cylinder(h = height + 2, r = radius, center = false, $fn = 16);\n\n        translate([size - radius, radius, -1])\n            cylinder(h = height + 2, r = radius, center = false, $fn = 16);\n\n        translate([size - radius, size - radius, -1])\n            cylinder(h = height + 2, r = radius, center = false, $fn = 16);\n\n        translate([radius, size - radius, -1])\n            cylinder(h = height + 2, r = radius, center = false, $fn = 16);\n    }\n}\n\nrebate_square();",
    "renders": false
  },
  {
    "primitive_shape": "rebate_round",
    "openscad_code": "module rebate_round(r = 40, h = 20, rebate = 5) {\n    difference() {\n        cylinder(r = r, h = h, $fn = 64);\n        translate([0, 0, -1]) \n            cylinder(r = r - rebate, h = h + 2, $fn = 64);\n    }\n}\n\nrebate_round();",
    "renders": false
  },
  {
    "primitive_shape": "lap_joint",
    "openscad_code": "module lap_joint(w = 60, h = 20, t = 6, r = 3) {\n    // 2D profile with rounded corners\n    profile = [\n        [0, 0],\n        [w - t, 0],\n        [w - t, r],\n        [w - r, r],\n        [w - r, h - r],\n        [w - t, h - r],\n        [w - t, h],\n        [0, h],\n        [0, 0]\n    ];\n    \n    // Extrude to thickness\n    linear_extrude(height = t)\n        offset(r = r)\n            polygon(points = profile);\n}\n\nlap_joint();",
    "renders": false
  },
  {
    "primitive_shape": "lap_joint_square",
    "openscad_code": "module lap_joint_square(size = 40, thickness = 8, notch = 0.4) {\n    s = size;\n    t = thickness;\n    n = s * notch;\n    h = t / 2;\n\n    points = [\n        [0, 0],\n        [s, 0],\n        [s, s - n],\n        [s - n, s - n],\n        [s - n, s],\n        [0, s]\n    ];\n\n    difference() {\n        linear_extrude(height = t)\n            polygon(points = points);\n\n        translate([s - n, s - n, -1])\n            cube([n + 2, n + 2, t + 2]);\n    }\n}\n\nlap_joint_square();",
    "renders": false
  },
  {
    "primitive_shape": "mortise",
    "openscad_code": "module mortise() {\n    // 2D profile of a rounded rectangular mortise\n    w = 40;   // width\n    h = 80;   // height\n    r = 5;    // corner radius\n    d = 40;   // depth\n\n    profile = [\n        [r, 0],\n        [w - r, 0],\n        [w, r],\n        [w, h - r],\n        [w - r, h],\n        [r, h],\n        [0, h - r],\n        [0, r]\n    ];\n\n    // Extrude the profile to create the 3D mortise primitive\n    linear_extrude(height = d, center = true, convexity = 10)\n        polygon(points = profile);\n}\n\nmortise();",
    "renders": false
  },
  {
    "primitive_shape": "mortise_square",
    "openscad_code": "module mortise_square(size = 50, depth = 25, radius = 5) {\n    // Outer square with rounded corners\n    difference() {\n        linear_extrude(height = depth, center = true, convexity = 10)\n            offset(r = radius)\n                square([size, size], center = true);\n        \n        // Center square mortise\n        linear_extrude(height = depth + 1, center = true)\n            square([size/2, size/2], center = true);\n    }\n}\n\nmortise_square();",
    "renders": false
  },
  {
    "primitive_shape": "mortise_round",
    "openscad_code": "module mortise_round(h=20, d=50, r=4, center=false) {\n    // 2D footprint of a rounded rectangle mortise\n    w = d/2;\n    offset = center ? [0,0,0] : [0,0,h/2];\n    \n    points = [\n        [-w+r, -d/2],\n        [ w-r, -d/2],\n        [ w,   -d/2+r],\n        [ w,    d/2-r],\n        [ w-r,  d/2],\n        [-w+r,  d/2],\n        [-w,    d/2-r],\n        [-w,   -d/2+r]\n    ];\n    \n    translate(offset)\n        linear_extrude(height=h, center=center)\n            polygon(points=points, convexity=4);\n}\n\nmortise_round();",
    "renders": false
  },
  {
    "primitive_shape": "mortise_wide",
    "openscad_code": "module mortise_wide() {\n    // Parameters\n    length = 80;\n    width = 20;\n    depth = 40;\n    fillet = 3;\n\n    // 2D profile with rounded ends\n    profile = [\n        [fillet, 0],\n        [length - fillet, 0],\n        [length, fillet],\n        [length, width - fillet],\n        [length - fillet, width],\n        [fillet, width],\n        [0, width - fillet],\n        [0, fillet]\n    ];\n\n    // Extrude to create the mortise\n    linear_extrude(height = depth, center = true)\n        polygon(points = profile);\n}\n\nmortise_wide();",
    "renders": false
  },
  {
    "primitive_shape": "mortise_narrow",
    "openscad_code": "module mortise_narrow(h = 60) {\n    // 2D profile of a narrow mortise with rounded ends and straight sides\n    profile = [\n        [0, 5],\n        [40, 5],\n        [40, 15],\n        [0, 15],\n        [0, 5]   // close profile\n    ];\n\n    // Extrude the profile to height h\n    linear_extrude(height = h, center = true)\n        polygon(points = profile);\n}\n\n// Render the shape\nmortise_narrow();",
    "renders": false
  },
  {
    "primitive_shape": "tenon",
    "openscad_code": "module tenon(w=60, h=30, t=20, r=3) {\n    // 2D profile with rounded shoulders\n    profile = [\n        [0, 0],\n        [w, 0],\n        [w, h - r],\n        [w - r, h],\n        [r, h],\n        [0, h - r]\n    ];\n    \n    // Extrude the tenon\n    linear_extrude(height = t, center = true)\n        polygon(points = profile);\n}\n\ntenon();",
    "renders": false
  },
  {
    "primitive_shape": "tenon_square",
    "openscad_code": "// tenon_square.scad\n// Simple square tenon with rounded edges\n\nmodule tenon_square(size = 40, tenon = 20, height = 30, r = 2) {\n    // Main square base\n    linear_extrude(height = height) {\n        offset(r = r) {\n            polygon(points = [\n                [0, 0],\n                [size, 0],\n                [size, size],\n                [0, size]\n            ]);\n        }\n    }\n    \n    // Tenon protrusion\n    translate([0, 0, height]) {\n        linear_extrude(height = tenon) {\n            offset(r = r) {\n                polygon(points = [\n                    [size/4, size/4],\n                    [3*size/4, size/4],\n                    [3*size/4, 3*size/4],\n                    [size/4, 3*size/4]\n                ]);\n            }\n        }\n    }\n}\n\ntenon_square();",
    "renders": false
  },
  {
    "primitive_shape": "tenon_round",
    "openscad_code": "module tenon_round(\n    body_d = 20,\n    body_h = 60,\n    head_d = 35,\n    head_h = 10,\n    fillet_r = 3,\n    $fn = 32\n){\n    // 2D profile\n    profile = [\n        [0,0],                                    // bottom center\n        [body_d/2,0],                             // bottom right\n        [body_d/2, body_h - fillet_r],            // start fillet\n        [body_d/2 - fillet_r, body_h],            // end fillet\n        [head_d/2, body_h],                       // head lower edge\n        [head_d/2, body_h + head_h],              // head upper edge\n        [0, body_h + head_h]                      // top center\n    ];\n    mirror([1,0])  // complete profile\n    polygon(profile);\n    linear_extrude(height = 0.01, center = true)\n    polygon(profile);\n    \n    // 3D body\n    rotate_extrude($fn = $fn)\n    polygon(profile);\n}\n\ntenon_round();",
    "renders": false
  },
  {
    "primitive_shape": "tenon_wide",
    "openscad_code": "// tenon_wide primitive – a wide tenon with rounded ends\n//        width = 60 mm\n//        thickness = 12 mm\n//        length = 50 mm (extrusion)\nmodule tenon_wide() {\n    // 2-D profile: rectangle with semicircular ends\n    w = 60;\n    t = 12;\n    r = t / 2;\n\n    points = [\n        [ -w/2 + r, -r ],\n        [  w/2 - r, -r ],\n        [  w/2,     -r ],\n        [  w/2,      r ],\n        [  w/2 - r,  r ],\n        [ -w/2 + r,  r ],\n        [ -w/2,      r ],\n        [ -w/2,     -r ]\n    ];\n\n    paths = [ [0,1,2,3,4,5,6,7] ];\n\n    linear_extrude(height = 50, center = true)\n        polygon(points = points, paths = paths);\n}\n\ntenon_wide();",
    "renders": false
  },
  {
    "primitive_shape": "tenon_narrow",
    "openscad_code": "module tenon_narrow(h = 30, w = 40, t = 10, r = 2) {\n    pts = [\n        [-w/2, 0],\n        [-w/2, h - r],\n        [-w/2 + r, h],\n        [ w/2 - r, h],\n        [ w/2, h - r],\n        [ w/2, 0],\n        [ t/2, 0],\n        [ t/2, h - t],\n        [ t/2 - r, h - t + r],\n        [-t/2 + r, h - t + r],\n        [-t/2, h - t],\n        [-t/2, 0]\n    ];\n    linear_extrude(height = t, center = true)\n        polygon(pts);\n}\n\ntenon_narrow();",
    "renders": false
  },
  {
    "primitive_shape": "relief_square",
    "openscad_code": "module relief_square(size = 80, height = 5, rounds = 3) {\n    s = size/2;\n    r = rounds;\n\n    points = [\n        [-s+r,-s],\n        [ s-r,-s],\n        [ s,-s+r],\n        [ s, s-r],\n        [ s-r, s],\n        [-s+r, s],\n        [-s, s-r],\n        [-s,-s+r]\n    ];\n\n    paths = [\n        [0,1,2,3,4,5,6,7]\n    ];\n\n    linear_extrude(height = height, convexity = 10)\n        polygon(points, paths);\n}\n\nrelief_square();",
    "renders": false
  },
  {
    "primitive_shape": "relief_round",
    "openscad_code": "module relief_round(r=50, h=10, step=5, depth=2) {\n    // generate star-like rounded polygon\n    n = 8;\n    angles = [for(i=[0:n-1]) i*360/n];\n    \n    outer = [for(a=angles) [r*cos(a), r*sin(a)]];\n    inner = [for(a=angles) [(r-step)*cos(a+180/n), (r-step)*sin(a+180/n)]];\n    \n    points = [for(i=[0:n-1]) each [outer[i], inner[i]]];\n    \n    linear_extrude(height=h, convexity=10)\n        offset(r=depth)\n            polygon(points);\n}\n\nrelief_round();",
    "renders": false
  },
  {
    "primitive_shape": "relief_flat",
    "openscad_code": "module relief_flat() {\n    // Rounded-corner rectangular relief\n    width = 80;\n    height = 50;\n    corner_r = 8;\n    thickness = 3;\n    \n    points = [\n        [corner_r, 0],\n        [width-corner_r, 0],\n        [width, corner_r],\n        [width, height-corner_r],\n        [width-corner_r, height],\n        [corner_r, height],\n        [0, height-corner_r],\n        [0, corner_r]\n    ];\n    \n    paths = [\n        [0,1,2,3,4,5,6,7]\n    ];\n    \n    linear_extrude(height=thickness) {\n        offset(r=corner_r) offset(r=-corner_r) polygon(points=points, paths=paths);\n    }\n}\n\nrelief_flat();",
    "renders": false
  },
  {
    "primitive_shape": "groove_round",
    "openscad_code": "module groove_round(r_outer = 40, r_inner = 20, h = 30, fillet = 5){\n    difference(){\n        linear_extrude(height = h)\n            circle(r = r_outer, $fn = 64);\n        translate([0, 0, -0.01])\n            linear_extrude(height = h + 0.02)\n                circle(r = r_inner, $fn = 64);\n    }\n    translate([0, 0, fillet])\n        difference(){\n            linear_extrude(height = h - 2*fillet)\n                circle(r = r_outer - fillet, $fn = 64);\n            translate([0, 0, -0.01])\n                linear_extrude(height = h - 2*fillet + 0.02)\n                    circle(r = r_inner + fillet, $fn = 64);\n        }\n    for(z = [0, h - fillet]){\n        translate([0, 0, z])\n            difference(){\n                cylinder(h = fillet, r1 = r_outer - fillet, r2 = r_outer, $fn = 64);\n                translate([0, 0, -0.01])\n                    cylinder(h = fillet + 0.02, r1 = r_inner + fillet, r2 = r_inner, $fn = 64);\n            }\n    }\n}\n\ngroove_round();",
    "renders": false
  },
  {
    "primitive_shape": "groove_square",
    "openscad_code": "module groove_square(size = 80, depth = 10, groove_w = 8, groove_d = 4, r = 5) {\n    s2 = size/2;\n    g2 = groove_w/2;\n    \n    points = [\n        [-s2+r, -s2], [s2-r, -s2], [s2, -s2+r], [s2, s2-r],\n        [s2-r, s2], [-s2+r, s2], [-s2, s2-r], [-s2, -s2+r]\n    ];\n    \n    linear_extrude(height = depth) {\n        difference() {\n            offset(r = r) offset(r = -r) polygon(points = points);\n            for(x = [-1, 1])\n            translate([x*(s2 - groove_w), 0])\n                square([groove_w, size], center = true);\n        }\n    }\n    \n    translate([0, 0, depth])\n    linear_extrude(height = groove_d) {\n        for(x = [-1, 1])\n        translate([x*(s2 - groove_w), 0])\n            square([groove_w, size], center = true);\n    }\n}\n\ngroove_square();",
    "renders": false
  },
  {
    "primitive_shape": "groove_v",
    "openscad_code": "// Groove V primitive – a V-shaped groove with rounded bottom\nmodule groove_v(depth=10, width=20, length=50, radius=3) {\n    half = width/2;\n    offs = depth - radius;\n    pts = [\n        [-half, 0],\n        [-half, -offs],\n        [-radius, -offs],\n        [0, -depth],\n        [ radius, -offs],\n        [ half, -offs],\n        [ half, 0]\n    ];\n    linear_extrude(height=length)\n        polygon(pts);\n}\n\ngroove_v();",
    "renders": false
  },
  {
    "primitive_shape": "tongue",
    "openscad_code": "module tongue() {\n    // 2D tongue profile with rounded tip\n    profile = [\n        [0, 0],\n        [5, 10],\n        [25, 15],\n        [45, 12],\n        [55, 5],\n        [60, 0],\n        [55, -5],\n        [45, -12],\n        [25, -15],\n        [5, -10],\n        [0, 0]\n    ];\n\n    linear_extrude(height = 20, center = true)\n        polygon(profile);\n}\n\ntongue();",
    "renders": false
  },
  {
    "primitive_shape": "tongue_square",
    "openscad_code": "module tongue_square() {\n    // tongue-shaped square with rounded edges and slight taper\n    $fn = 32;\n    \n    len = 100;\n    wid = 60;\n    thick = 15;\n    \n    points = [\n        [-wid/2, -len/2],       // bottom left\n        [ wid/2, -len/2],       // bottom right\n        [ wid/2,  len/2 - 20],  // top right before curve\n        [ wid/4,  len/2 - 10],  // control point\n        [ 0,       len/2],      // top center\n        [-wid/4,  len/2 - 10],  // control point\n        [-wid/2,  len/2 - 20]   // top left before curve\n    ];\n    \n    linear_extrude(height = thick, convexity = 10)\n        polygon(points = points);\n}\n\ntongue_square();",
    "renders": false
  },
  {
    "primitive_shape": "tongue_round",
    "openscad_code": "// tongue_round.scad – rounded tongue-like primitive\n\nmodule tongue_round(\n        length  = 80,   // overall length\n        width   = 40,   // widest point\n        thick   = 12,   // thickness\n        radius  = 6     // rounding radius\n    ){\n    // 2D profile: rounded rectangular base tapering to rounded tip\n    h = width/2;\n    r = radius;\n    profile = [\n        [0,        -h+r],           // start left\n        [r,        -h],             // bottom-left corner\n        [length-r, -h],             // bottom taper\n        [length,   0],              // rounded tip\n        [length-r,  h],             // top taper\n        [r,         h],             // top-right corner\n        [0,         h-r]            // back to left\n    ];\n    \n    linear_extrude(height = thick, center = true, convexity = 4)\n        polygon(profile);\n}\n\ntongue_round();",
    "renders": false
  },
  {
    "primitive_shape": "shaft_round",
    "openscad_code": "// shaft_round.scad\n// Rounded cylindrical shaft primitive\n\nmodule shaft_round(\n    length = 80,\n    radius = 15,\n    fillet = 3\n) {\n    difference() {\n        // Main shaft body\n        linear_extrude(height = length, center = true)\n            offset(delta = radius)\n                circle(d = 1);\n\n        // Top rounded edge\n        translate([0, 0, length/2 - fillet])\n            rotate_extrude(angle = 90, $fn = 32)\n                translate([radius, 0, 0])\n                    circle(r = fillet);\n\n        // Bottom rounded edge\n        translate([0, 0, -length/2 + fillet])\n            rotate_extrude(angle = 90, $fn = 32)\n                translate([radius, 0, 0])\n                    circle(r = fillet);\n    }\n}\n\nshaft_round();",
    "renders": false
  },
  {
    "primitive_shape": "shaft_square",
    "openscad_code": "module shaft_square(size = 40, height = 80, fillet = 6) {\n    r = fillet;\n    s = size/2;\n    h = height/2;\n\n    profile = [\n        [-s+r, -s],\n        [ s-r, -s], [ s, -s+r],\n        [ s,  s-r], [ s-r,  s],\n        [-s+r,  s], [-s,  s-r],\n        [-s, -s+r], [-s+r, -s]\n    ];\n\n    linear_extrude(height = height, center = true, convexity = 10)\n        polygon(points = profile);\n}\n\nshaft_square();",
    "renders": false
  },
  {
    "primitive_shape": "shaft_hexagonal",
    "openscad_code": "module shaft_hexagonal(h=60, across_flats=20, fillet_r=2) {\n    // hexagon points (across flats = distance between two opposite sides)\n    radius = across_flats / 2 / cos(30);\n    points = [\n        for (i=[0:5]) [\n            radius * cos(i*60),\n            radius * sin(i*60)\n        ]\n    ];\n\n    // extruded hexagon with rounded top and bottom\n    translate([0,0,h/2])\n        minkowski() {\n            linear_extrude(height=h-2*fillet_r, center=true)\n                polygon(points);\n            sphere(fillet_r);\n        }\n}\n\nshaft_hexagonal();",
    "renders": false
  },
  {
    "primitive_shape": "shaft_splined",
    "openscad_code": "module shaft_splined(\n    length = 80,\n    major_d = 30,\n    minor_d = 26,\n    teeth = 6,\n    radius = 2,\n    center = false\n){\n    // Generate one tooth profile\n    theta = 360/teeth;\n    r1 = major_d/2;\n    r2 = minor_d/2;\n    step = 360/(teeth*32);\n\n    points = concat(\n        // Outer arc\n        [for(a=[0:step:theta/2]) [r1*cos(a), r1*sin(a)]],\n        // Transition arc\n        [for(a=[theta/2:step:theta]) [r2*cos(a)+radius, r2*sin(a)+radius]],\n        // Inner arc\n        [for(a=[theta:step:3*theta/2]) [r2*cos(a), r2*sin(a)]],\n        // Transition arc\n        [for(a=[3*theta/2:step:2*theta]) [r1*cos(a)-radius, r1*sin(a)-radius]]\n    );\n\n    // Create full profile\n    full_profile = [\n        for(i=[0:teeth-1])\n            [for(p=points) [\n                p.x*cos(i*theta) - p.y*sin(i*theta),\n                p.x*sin(i*theta) + p.y*cos(i*theta)\n            ]]\n    ];\n\n    // Flatten points\n    flat_points = [for(group=full_profile) for(p=group) p];\n\n    // Extrude\n    linear_extrude(height=length, center=center)\n        polygon(points=flat_points);\n}\n\n// Example usage\nshaft_splined();",
    "renders": false
  },
  {
    "primitive_shape": "shaft_tapered",
    "openscad_code": "module shaft_tapered(h=80, base_d=20, top_d=12, fillet_r=3, $fn=64){\n    difference(){\n        linear_extrude(height=h, scale=top_d/base_d){\n            offset(r=fillet_r){\n                circle(d=base_d-2*fillet_r);\n            }\n        }\n        translate([0,0,h-2*fillet_r])\n            cylinder(h=2*fillet_r, d1=top_d, d2=top_d-2*fillet_r, center=true);\n        translate([0,0,2*fillet_r])\n            cylinder(h=2*fillet_r, d1=base_d-2*fillet_r, d2=base_d, center=true);\n    }\n}\n\nshaft_tapered();",
    "renders": false
  },
  {
    "primitive_shape": "bore_through",
    "openscad_code": "module bore_through() {\n    // 2D profile: rectangle with rounded ends\n    width = 60;\n    height = 40;\n    radius = 10;\n    \n    points = [\n        [0, radius],\n        [0, height - radius],\n        [radius, height],\n        [width - radius, height],\n        [width, height - radius],\n        [width, radius],\n        [width - radius, 0],\n        [radius, 0]\n    ];\n    \n    paths = [0, 1, 2, 3, 4, 5, 6, 7];\n    \n    // Extrude the shape\n    linear_extrude(height = 120, center = true, convexity = 10) {\n        polygon(points = points, paths = [paths]);\n    }\n    \n    // Bore through hole\n    translate([width/2, height/2, 0])\n        rotate([90, 0, 0])\n        cylinder(h = width + 1, r = 8, center = true, $fn = 32);\n}\n\nbore_through();",
    "renders": false
  },
  {
    "primitive_shape": "bore_blind",
    "openscad_code": "module bore_blind(d=40, depth=30, wall=3, fillet=2, taper=1) {\n    // 2D profile of a blind hole with filleted edge and slight taper\n    od = d + 2*wall;\n    profile = [\n        [0,0],\n        [0,depth],\n        [d/2 - taper, depth],\n        [d/2, depth - fillet],\n        [d/2, fillet],\n        [d/2 - fillet, 0],\n        [od/2 - fillet, 0],\n        [od/2, fillet],\n        [od/2, depth - fillet],\n        [od/2 - fillet, depth],\n        [0, depth]\n    ];\n    rotate_extrude()\n        polygon(profile);\n}\n\nbore_blind();",
    "renders": false
  },
  {
    "primitive_shape": "bore_counter",
    "openscad_code": "module bore_counter(d=100, h=20, bore=12) {\n    difference() {\n        // Main disc with rounded top edge\n        minkowski() {\n            linear_extrude(height=h-2)\n                circle(d=d-4);\n            cylinder(h=2, r=2);\n        }\n        \n        // Central bore with chamfer\n        translate([0, 0, -1])\n            cylinder(h=h+2, r=bore/2, $fn=32);\n        \n        translate([0, 0, -1])\n            cylinder(h=2, r1=bore/2+1, r2=bore/2, $fn=32);\n        \n        // Three counter-bores 120° apart\n        for(a=[0,120,240])\n            rotate(a)\n                translate([d/3, 0, -1])\n                    cylinder(h=h+2, r=4, $fn=16);\n    }\n}\n\nbore_counter();",
    "renders": false
  },
  {
    "primitive_shape": "bore_counter_sunk",
    "openscad_code": "module bore_counter_sunk(d=20, d2=10, h=8, angle=90) {\n    // calculate countersink height from angle\n    cs_h = (d-d2)/2 / tan(angle/2);\n    \n    // profile: top flat + countersink cone + bore cylinder\n    profile = [\n        [d2/2, 0],                    // bottom bore edge\n        [d2/2, h-cs_h],               // bore top\n        [d/2, h-cs_h],                // countersink start\n        [d/2, h],                     // top face\n        [-d/2, h],                    // mirror\n        [-d/2, h-cs_h],\n        [-d2/2, h-cs_h],\n        [-d2/2, 0]\n    ];\n    \n    linear_extrude(height=0.1, center=true)\n        polygon(points=profile);\n}\n\nbore_counter_sunk();",
    "renders": false
  },
  {
    "primitive_shape": "bore_tapped",
    "openscad_code": "module bore_tapped(od=20, id=10, h=15, tpi=24, lead=0.8) {\n    // 2D profile with rounded top edge\n    profile = [\n        [id/2, 0],\n        [od/2, 0],\n        [od/2, h-1],\n        [od/2-1, h],\n        [id/2, h]\n    ];\n    \n    // Main body with rounded edge\n    linear_extrude(height=h) polygon(profile);\n    \n    // Tapped hole threads approximation\n    threads = floor(tpi * h / 25.4);\n    for(i=[0:threads-1]) {\n        translate([0, 0, i * 25.4/tpi + 25.4/tpi/2])\n        cylinder(h=25.4/tpi/2, d1=id+lead, d2=id, $fn=6);\n    }\n}\n\n// Render\nbore_tapped();",
    "renders": false
  },
  {
    "primitive_shape": "boss_square",
    "openscad_code": "module boss_square(size = 40, height = 12, radius = 6) {\n    // 2D profile with rounded corners\n    corner = [\n        [0, radius],\n        [radius, 0],\n        [size - radius, 0],\n        [size, radius],\n        [size, size - radius],\n        [size - radius, size],\n        [radius, size],\n        [0, size - radius]\n    ];\n    \n    polygon(\n        points = [\n            [0, 0],\n            [size, 0],\n            [size, size],\n            [0, size]\n        ],\n        paths = [\n            [0, 1, 2, 3],\n            corner\n        ]\n    );\n    \n    // Extrude the profile\n    linear_extrude(height = height, center = true)\n    offset(r = radius)\n    offset(r = -radius)\n    square([size, size], center = true);\n}\n\nboss_square();",
    "renders": false
  },
  {
    "primitive_shape": "boss_round",
    "openscad_code": "module boss_round(h = 12, d = 30, r = 2, center = false) {\n    od = d + 2 * r;\n    id = d - 2 * r;\n    height = h + r;\n    $fn = 32;\n\n    difference() {\n        minkowski() {\n            cylinder(h = h, d = d, center = center);\n            sphere(r = r);\n        }\n        translate([0, 0, height])\n            cylinder(h = r, d1 = od, d2 = id, center = false);\n    }\n}\n\nboss_round();",
    "renders": false
  },
  {
    "primitive_shape": "boss_tall",
    "openscad_code": "module boss_tall(h = 50, r = 25, r_top = 15, r_base = 30, fillet = 3) {\n    // 2D profile with rounded top and bottom\n    profile = [\n        [r_base, 0],\n        [r_base, h - fillet],\n        for(a = [0:10:90]) [r - (r - r_top) * sin(a), h - fillet * (1 - cos(a))],\n        [r_top, h],\n        for(a = [90:10:180]) [r_top * cos(a - 90), h - r_top * sin(a - 90)],\n        [0, h - r_top],\n        [0, r_base],\n        for(a = [180:10:270]) [r_base * (1 - cos(a - 180)), r_base * sin(a - 180)]\n    ];\n    rotate_extrude()\n        polygon(profile);\n}\n\nboss_tall();",
    "renders": false
  },
  {
    "primitive_shape": "boss_short",
    "openscad_code": "// boss_short.scad\nmodule boss_short(h=12, r=20, fillet=3) {\n    // 2D profile with rounded top\n    offset = 0.1;\n    profile = [\n        [0, 0],\n        [r, 0],\n        [r, h - fillet],\n        [r - fillet, h],\n        [0, h]\n    ];\n    \n    // Smooth arc for rounded top\n    for (a = [0:5:90]) {\n        profile = concat(profile, [[\n            (r - fillet) + fillet * cos(a),\n            (h - fillet) + fillet * sin(a)\n        ]]);\n    }\n    \n    linear_extrude(height = 1, center = true)\n        polygon(points = profile);\n}\n\nboss_short();",
    "renders": false
  },
  {
    "primitive_shape": "pocket_square",
    "openscad_code": "module pocket_square() {\n    // Rounded square plate with slight taper\n    thickness = 4;\n    base = 60;\n    top = 58;\n    radius = 8;\n\n    difference() {\n        linear_extrude(height = thickness, scale = top/base)\n            offset(r = radius)\n                offset(delta = -radius)\n                    square(base, center = true);\n        \n        translate([0, 0, -0.01])\n            linear_extrude(height = thickness + 0.02, scale = (top - 2)/(base - 2))\n                offset(r = radius - 1)\n                    offset(delta = -(radius - 1))\n                        square(base - 2, center = true);\n    }\n}\n\npocket_square();",
    "renders": false
  },
  {
    "primitive_shape": "pocket_round",
    "openscad_code": "module pocket_round(r=50, depth=10, wall=3, fillet=2) {\n    outer = r;\n    inner = r - wall;\n    h = depth - fillet;\n\n    difference() {\n        linear_extrude(depth) {\n            difference() {\n                circle(r=outer, $fn=60);\n                offset(-wall) circle(r=outer, $fn=60);\n            }\n        }\n        \n        translate([0,0,h])\n        linear_extrude(fillet+0.01) {\n            difference() {\n                offset(-fillet) circle(r=outer, $fn=60);\n                offset(-wall) circle(r=outer, $fn=60);\n            }\n        }\n    }\n}\n\npocket_round();",
    "renders": false
  },
  {
    "primitive_shape": "pocket_deep",
    "openscad_code": "module pocket_deep(h = 20, r = 40, d = 8, f = 6) {\n    // 2D profile: rounded rectangle with a centered pocket\n    difference() {\n        offset(r = 5)\n            polygon([\n                [0, 0],\n                [r*2, 0],\n                [r*2, r],\n                [0, r]\n            ]);\n        translate([r, r/2, 0])\n            circle(d = d, $fn = f);\n    }\n    linear_extrude(height = h, center = false, convexity = 10);\n}\n\npocket_deep();",
    "renders": false
  },
  {
    "primitive_shape": "pocket_shallow",
    "openscad_code": "module pocket_shallow() {\n    // outer rounded rectangle profile\n    outer = [\n        [0, 10], [90, 10], [100, 20],\n        [100, 80], [90, 90], [0, 90],\n        [-10, 80], [-10, 20], [0, 10]\n    ];\n\n    // inner offset for shallow cavity\n    inner = [\n        [10, 20], [80, 20], [90, 30],\n        [90, 70], [80, 80], [10, 80],\n        [0, 70], [0, 30], [10, 20]\n    ];\n\n    difference() {\n        linear_extrude(height = 10)\n            polygon(outer);\n\n        translate([0, 0, 1])\n            linear_extrude(height = 9)\n                polygon(inner);\n    }\n}\n\npocket_shallow();",
    "renders": false
  },
  {
    "primitive_shape": "slot_through",
    "openscad_code": "module slot_through(r=30, w=12, h=10, fillet=3) {\n    d = 2*r;\n    // 2D profile with rounded ends\n    offset(r = fillet) offset(r = -fillet)\n        polygon([\n            [-w/2, -r],\n            [w/2, -r],\n            [w/2,  r],\n            [-w/2,  r]\n        ]);\n}\n\n// Extrude the 2D slot into 3D\nlinear_extrude(height = 10)\n    slot_through();",
    "renders": false
  },
  {
    "primitive_shape": "slot_blind",
    "openscad_code": "module slot_blind(h = 8, w = 60, d = 20, r = 3)\n{\n    difference()\n    {\n        // main block\n        linear_extrude(height = h)\n            offset(r = r)\n                square([w, d], center = true);\n        \n        // blind slot\n        linear_extrude(height = h + 0.01)\n            polygon(points = [\n                [-w/2 + 2*r,  -d/2 + r],\n                [ w/2 - 2*r,  -d/2 + r],\n                [ w/2 - 2*r,   d/2 - r],\n                [-w/2 + 2*r,   d/2 - r]\n            ]);\n    }\n}\n\nslot_blind();",
    "renders": false
  },
  {
    "primitive_shape": "slot_t_slot",
    "openscad_code": "module slot_t_slot(h = 10, w = 20, slot_w = 6, slot_h = 3, r = 2) {\n    pts = [\n        [0, 0],\n        [w, 0],\n        [w, h],\n        [w/2 + slot_w/2, h],\n        [w/2 + slot_w/2, h - slot_h],\n        [w/2 - slot_w/2, h - slot_h],\n        [w/2 - slot_w/2, h],\n        [0, h]\n    ];\n    offset(r = r)\n        polygon(pts);\n    linear_extrude(height = 20, center = true)\n        offset(r = r)\n            polygon(pts);\n}\n\nslot_t_slot();",
    "renders": false
  },
  {
    "primitive_shape": "tab_square",
    "openscad_code": "module tab_square(size = 60, thickness = 6, radius = 4) {\n    s = size / 2;\n    linear_extrude(height = thickness)\n        offset(r = radius)\n            polygon([\n                [-s, -s],\n                [ s, -s],\n                [ s,  s],\n                [-s,  s]\n            ]);\n}\n\ntab_square();",
    "renders": false
  },
  {
    "primitive_shape": "tab_round",
    "openscad_code": "module tab_round(r=40, h=10, notch=5, fillet=2) {\n    $fn = 64;\n    \n    // 2D profile with rounded top and notch\n    profile = [\n        [0, 0],\n        [r, 0],\n        [r, h - fillet],\n        [r - fillet, h],\n        [notch + fillet, h],\n        [notch, h - fillet],\n        [notch, 0]\n    ];\n    \n    // Generate arc points for rounded top\n    for(i=[0:4]) {\n        angle = 90 - i * 90/4;\n        x = r - fillet + fillet * cos(angle);\n        y = h - fillet + fillet * sin(angle);\n        profile = concat(profile, [[x, y]]);\n    }\n    \n    // Mirror to complete shape\n    mirror_profile = [\n        for(i=[len(profile)-2:0:-1]) [-profile[i][0], profile[i][1]]\n    ];\n    \n    full_profile = concat(profile, mirror_profile);\n    \n    linear_extrude(height=3)\n        polygon(points=full_profile);\n}\n\ntab_round();",
    "renders": false
  },
  {
    "primitive_shape": "tab_tall",
    "openscad_code": "// tab_tall – a tall, rounded rectangle with a shallow central slot\nmodule tab_tall(w = 20, h = 80, t = 6, r = 4, slot_w = 8, slot_h = 3) {\n    // 2D profile with rounded top and bottom\n    offset_profile = [\n        [-w/2 + r, -h/2],\n        [ w/2 - r, -h/2],\n        [ w/2,     -h/2 + r],\n        [ w/2,      h/2 - r],\n        [ w/2 - r,  h/2],\n        [-w/2 + r,  h/2],\n        [-w/2,      h/2 - r],\n        [-w/2,     -h/2 + r]\n    ];\n\n    linear_extrude(height = t)\n        offset(r = r) polygon(points = offset_profile);\n\n    // shallow slot across the top face\n    translate([0, h/2 - slot_h/2, t/2])\n        cube([slot_w, slot_h, t + 0.01], center = true);\n}\n\ntab_tall();",
    "renders": false
  },
  {
    "primitive_shape": "tab_short",
    "openscad_code": "module tab_short() {\n    // 2D profile with rounded top corners\n    profile = [\n        [0, 0],\n        [40, 0],\n        [40, 15],\n        [35, 20],\n        [5, 20],\n        [0, 15]\n    ];\n    \n    // Extrude the profile to 8 mm thickness\n    linear_extrude(height = 8) {\n        polygon(points = profile);\n    };\n}\n\ntab_short();",
    "renders": false
  },
  {
    "primitive_shape": "web_thin",
    "openscad_code": "// web_thin primitive: thin hexagonal web with rounded outer edges\nmodule web_thin() {\n    r_outer = 40;          // outer radius\n    r_inner = 30;          // inner radius\n    t = 2;                 // thickness\n    n = 6;                 // hexagon sides\n    fillet = 3;            // outer edge fillet radius\n    \n    // inner hexagon points\n    inner_pts = [for(i=[0:n-1]) \n        [r_inner*cos(i*360/n), r_inner*sin(i*360/n)]\n    ];\n    \n    // outer hexagon points with rounded corners via offset\n    outer_shape = offset(\n        [for(i=[0:n-1]) \n            [r_outer*cos(i*360/n), r_outer*sin(i*360/n)]\n        ], \n        r=fillet\n    );\n    \n    difference() {\n        linear_extrude(height=t) polygon(outer_shape);\n        linear_extrude(height=t+0.1) polygon(inner_pts);\n    }\n}\n\nweb_thin();",
    "renders": false
  },
  {
    "primitive_shape": "web_thick",
    "openscad_code": "module web_thick(h = 8, r = 40, thick = 3, spokes = 6) {\n    step = 360 / spokes;\n    for (i = [0 : spokes - 1]) {\n        rotate([0, 0, i * step])\n            linear_extrude(height = h, center = true)\n                polygon(\n                    points = [\n                        [0, 0],\n                        [r - thick, -thick / 2],\n                        [r, 0],\n                        [r - thick, thick / 2]\n                    ]\n                );\n    }\n    rotate([0, 0, 0])\n        linear_extrude(height = h, center = true)\n            circle(d = thick * 2);\n}\n\nweb_thick();",
    "renders": false
  },
  {
    "primitive_shape": "web_tall",
    "openscad_code": "module web_tall(h = 80, r = 25, thick = 3, n = 6) {\n    outer = [for(i=[0:n-1]) [r*cos(i*360/n), r*sin(i*360/n)]];\n    inner = [for(i=[0:n-1]) [(r-thick)*cos(i*360/n+180/n), (r-thick)*sin(i*360/n+180/n)]];\n    points = concat(outer, inner);\n    faces = [for(i=[0:n-1]) [i, (i+1)%n, n+(i+1)%n, n+i]];\n    linear_extrude(height = h, center = true, convexity = 10)\n        polygon(points = points, paths = faces);\n}\n\nweb_tall();",
    "renders": false
  },
  {
    "primitive_shape": "web_short",
    "openscad_code": "module web_short() {\n  // 2D profile\n  profile = [\n    [0, 0],\n    [40, 0],\n    [40, 8],\n    [35, 12],\n    [28, 12],\n    [28, 8],\n    [18, 8],\n    [18, 12],\n    [12, 12],\n    [12, 8],\n    [5, 8],\n    [5, 12],\n    [0, 12]\n  ];\n\n  // Rounding radius\n  r = 2;\n\n  // Extrude with rounded top using offset\n  linear_extrude(height = 20, convexity = 4)\n    offset(r = r)\n      polygon(profile);\n}\n\nweb_short();",
    "renders": false
  },
  {
    "primitive_shape": "gusset_triangular",
    "openscad_code": "module gusset_triangular(h = 8, r = 4, w = 60) {\n    // 2D profile of a right-angle triangular gusset with rounded corners\n    d = w * 0.7;                 // triangle hypotenuse inset\n    pts = [\n        [0, 0],                  // corner 1\n        [w, 0],                  // corner 2\n        [0, w],                  // corner 3\n        [r, r],                  // fillet start 1\n        [w - r, r],              // fillet start 2\n        [r, w - r]               // fillet start 3\n    ];\n    paths = [[0, 3, 4, 1, 2, 5, 0]];\n    linear_extrude(height = h, center = true)\n        polygon(points = pts, paths = paths);\n}\n\ngusset_triangular();",
    "renders": false
  },
  {
    "primitive_shape": "gusset_rounded",
    "openscad_code": "module gusset_rounded(th = 5, h = 60, w = 60, r = 8) {\n    pts = [\n        [0, 0],\n        [w - r, 0],\n        [w, r],\n        [w, h],\n        [0, h]\n    ];\n    fillet = [\n        for (a = [0 : 5 : 90]) [w - r + r * cos(a), r - r * sin(a)]\n    ];\n    p = concat([pts[0]], fillet, pts[3:5], [pts[0]]);\n    linear_extrude(height = th) polygon(points = p);\n}\n\ngusset_rounded();",
    "renders": false
  },
  {
    "primitive_shape": "gusset_large",
    "openscad_code": "module gusset_large() {\n    thick = 8;\n    w = 100;\n    h = 80;\n    r = 10;\n\n    // 2D gusset outline with rounded corner\n    polygon([\n        [0, 0],\n        [w - r, 0],\n        [w, r],\n        [w, h],\n        [0, h]\n    ]);\n\n    // Extrude\n    linear_extrude(height = thick, center = true)\n        offset(r = r) offset(delta = -r)\n            polygon([\n                [0, 0],\n                [w, 0],\n                [w, h],\n                [0, h]\n            ]);\n}\n\ngusset_large();",
    "renders": false
  },
  {
    "primitive_shape": "gusset_small",
    "openscad_code": "module gusset_small(h=6, r=3, w=40, l=45){\n    // 2D profile with rounded corner\n    polygon([\n        [0, 0],\n        [w-r, 0],\n        [w, r],\n        [w, l],\n        [0, l]\n    ]);\n    \n    // extrude and round the top edge\n    linear_extrude(height = h, convexity = 10){\n        offset(r = r) offset(delta = -r) polygon([\n            [0, 0],\n            [w-r, 0],\n            [w, r],\n            [w, l],\n            [0, l]\n        ]);\n    }\n}\n\ngusset_small();",
    "renders": false
  }
]