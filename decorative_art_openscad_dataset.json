[
  {
    "decorative_art": "vase",
    "openscad_code": "// Realistic Vase Furniture Piece\n// Medium complexity with decorative elements and structural details\n\n// Parameters for sizing and proportions\nvase_height = 120;\nbase_width = 60;\ntop_width = 45;\nwall_thickness = 2;\n\n// Base module with decorative feet\nmodule vase_base() {\n    // Main base cylinder\n    difference() {\n        cylinder(h=15, d=base_width, $fn=64);\n        cylinder(h=16, d=base_width-wall_thickness*2, $fn=64);\n    }\n    \n    // Decorative feet - 4 evenly spaced\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n        translate([base_width/2 - 8, 0, 0])\n        difference() {\n            cube([16, 8, 5], center=true);\n            translate([0, 0, -1])\n            cube([14, 6, 7], center=true);\n        }\n    }\n}\n\n// Decorative ring detail\nmodule decorative_ring(height, diameter) {\n    difference() {\n        cylinder(h=4, d=diameter, $fn=64);\n        cylinder(h=5, d=diameter-wall_thickness*2, $fn=64);\n    }\n}\n\n// Main vase body with curved profile\nmodule vase_body() {\n    // Create curved profile using hull of cylinders\n    difference() {\n        // Outer shell\n        union() {\n            // Bottom section\n            cylinder(h=vase_height*0.3, d1=base_width*0.9, d2=base_width*1.1, $fn=64);\n            \n            // Middle bulge\n            translate([0, 0, vase_height*0.3])\n            cylinder(h=vase_height*0.4, d1=base_width*1.1, d2=base_width*1.3, $fn=64);\n            \n            // Neck transition\n            translate([0, 0, vase_height*0.7])\n            cylinder(h=vase_height*0.3, d1=base_width*1.3, d2=top_width, $fn=64);\n        }\n        \n        // Inner cavity\n        translate([0, 0, -1])\n        cylinder(h=vase_height+2, d1=base_width*0.9-wall_thickness*2, d2=top_width-wall_thickness*2, $fn=64);\n    }\n}\n\n// Decorative band with embossed pattern\nmodule decorative_band() {\n    band_height = 8;\n    band_diameter = base_width*1.25;\n    \n    // Main band\n    translate([0, 0, vase_height*0.5])\n    difference() {\n        cylinder(h=band_height, d=band_diameter, $fn=64);\n        cylinder(h=band_height+1, d=band_diameter-wall_thickness*2, $fn=64);\n    }\n    \n    // Embossed decorative elements\n    for(i=[0:11]) {\n        rotate([0, 0, i*30])\n        translate([band_diameter/2 - wall_thickness - 2, 0, vase_height*0.5 + band_height/2])\n        scale([1, 0.5, 1])\n        sphere(d=4, $fn=16);\n    }\n}\n\n// Top rim with furniture-style edge detail\nmodule top_rim() {\n    difference() {\n        // Outer rim\n        union() {\n            cylinder(h=6, d=top_width+4, $fn=64);\n            translate([0, 0, 3])\n            cylinder(h=3, d=top_width, $fn=64);\n        }\n        \n        // Inner cutout\n        cylinder(h=10, d=top_width-wall_thickness*2, $fn=64);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    vase_base();\n    \n    // Body\n    translate([0, 0, 15])\n    vase_body();\n    \n    // Decorative band\n    decorative_band();\n    \n    // Top rim\n    translate([0, 0, vase_height+15])\n    top_rim();\n}",
    "renders": true
  },
  {
    "decorative_art": "sculpture",
    "openscad_code": "// Sculpture \"Geometric Chair\" - modern art furniture piece\n// Overall dimensions: 80mm x 80mm x 120mm\n\n// Wall thickness\nwall = 2;\n\n// Main chair module\nmodule chair_sculpture() {\n    // Base platform\n    translate([0, 0, 0])\n        cube([80, 80, 5], center = true);\n    \n    // Back support structure\n    translate([0, -30, 60])\n        cube([70, 8, 120], center = true);\n    \n    // Seat surface\n    translate([0, 0, 30])\n        cube([75, 75, 4], center = true);\n    \n    // Front legs - cylindrical\n    for(x = [-25, 25]) {\n        translate([x, 25, 15])\n            cylinder(h = 30, r = 3, center = true);\n    }\n    \n    // Back legs - cylindrical\n    for(x = [-25, 25]) {\n        translate([x, -25, 15])\n            cylinder(h = 30, r = 3, center = true);\n    }\n    \n    // Decorative backrest pattern\n    for(i = [-3:1:3]) {\n        translate([i * 10, -30, 70])\n            cube([4, 4, 40], center = true);\n    }\n    \n    // Armrest supports\n    translate([35, 0, 50])\n        rotate([90, 0, 0])\n            cylinder(h = 30, r = 2, center = true);\n    \n    translate([-35, 0, 50])\n        rotate([90, 0, 0])\n            cylinder(h = 30, r = 2, center = true);\n    \n    // Armrests\n    translate([35, 0, 65])\n        cube([4, 60, 4], center = true);\n    \n    translate([-35, 0, 65])\n        cube([4, 60, 4], center = true);\n    \n    // Decorative geometric spheres on back\n    for(i = [-2:1:2]) {\n        for(j = [0:1:2]) {\n            translate([i * 15, -30, 90 + j * 15])\n                sphere(r = 3);\n        }\n    }\n    \n    // Seat support beams\n    translate([0, 0, 15])\n        cube([70, 70, 3], center = true);\n    \n    // Cross bracing\n    translate([0, 0, 10])\n        rotate([0, 0, 45])\n            cube([60, 3, 3], center = true);\n    \n    translate([0, 0, 10])\n        rotate([0, 0, -45])\n            cube([60, 3, 3], center = true);\n    \n    // Decorative front apron\n    translate([0, 35, 15])\n        difference() {\n            cube([70, 4, 20], center = true);\n            for(i = [-3:1:3]) {\n                translate([i * 10, 0, 0])\n                    cube([6, 6, 24], center = true);\n            }\n        }\n}\n\n// Create the sculpture\nchair_sculpture();",
    "renders": true
  },
  {
    "decorative_art": "statue",
    "openscad_code": "// Statue Furniture - Art Deco Style Decorative Column\n// Realistic style with medium complexity\n// Dimensions: 120mm tall x 40mm x 40mm base\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main module\nmodule statue_column() {\n    // Base platform\n    translate([0, 0, 0])\n        cube([40, 40, 5], center = true);\n    \n    // Decorative base with stepped design\n    for (i = [0:3]) {\n        translate([0, 0, 5 + i * 5])\n            cube([40 - i * 6, 40 - i * 6, 5], center = true);\n    }\n    \n    // Main column body\n    difference() {\n        // Outer cylinder\n        cylinder(h = 80, r1 = 15, r2 = 12, center = false, $fn = 32);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h = 82, r1 = 13, r2 = 10, center = false, $fn = 32);\n    }\n    \n    // Decorative rings around column\n    for (i = [0:2]) {\n        translate([0, 0, 25 + i * 20])\n            cylinder(h = 3, r = 16, center = false, $fn = 32);\n    }\n    \n    // Capital (top decorative element)\n    difference() {\n        // Main capital block\n        translate([0, 0, 80])\n            cube([30, 30, 10], center = true);\n        \n        // Rounded corners\n        translate([10, 10, 80])\n            cylinder(h = 10, r = 5, center = false, $fn = 16);\n        translate([-10, 10, 80])\n            cylinder(h = 10, r = 5, center = false, $fn = 16);\n        translate([10, -10, 80])\n            cylinder(h = 10, r = 5, center = false, $fn = 16);\n        translate([-10, -10, 80])\n            cylinder(h = 10, r = 5, center = false, $fn = 16);\n    }\n    \n    // Statue figure (simplified human form)\n    union() {\n        // Torso\n        translate([0, 0, 95])\n            scale([0.6, 0.4, 1])\n                cylinder(h = 15, r = 8, center = false, $fn = 16);\n        \n        // Head\n        translate([0, 0, 110])\n            sphere(r = 5, $fn = 16);\n        \n        // Arms\n        rotate([0, 0, -30])\n            translate([0, 0, 100])\n                scale([0.3, 2, 0.3])\n                    rotate([90, 0, 0])\n                        cylinder(h = 8, r = 2, center = false, $fn = 8);\n        \n        rotate([0, 0, 30])\n            translate([0, 0, 100])\n                scale([0.3, 2, 0.3])\n                    rotate([90, 0, 0])\n                        cylinder(h = 8, r = 2, center = false, $fn = 8);\n    }\n    \n    // Decorative relief patterns on base\n    for (i = [0:3]) {\n        angle = i * 90;\n        rotate([0, 0, angle])\n            translate([15, 0, 2.5])\n                linear_extrude(height = 2.5)\n                    square([8, 2], center = true);\n    }\n    \n    // Vertical fluting on column\n    for (i = [0:15]) {\n        angle = i * 24;\n        rotate([0, 0, angle])\n            translate([14, 0, 45])\n                cube([2, 1, 80], center = true);\n    }\n    \n    // Support brackets\n    difference() {\n        // Bracket body\n        rotate([0, 45, 0])\n            translate([0, 0, 20])\n                cube([10, 5, 60], center = true);\n        \n        // Lightening hole\n        rotate([0, 45, 0])\n            translate([0, 0, 20])\n                cube([6, 5.1, 56], center = true);\n    }\n    \n    // Second bracket (mirrored)\n    difference() {\n        rotate([0, -45, 0])\n            translate([0, 0, 20])\n                cube([10, 5, 60], center = true);\n        \n        rotate([0, -45, 0])\n            translate([0, 0, 20])\n                cube([6, 5.1, 56], center = true);\n    }\n}\n\n// Render the statue\nstatue_column();",
    "renders": true
  },
  {
    "decorative_art": "figurine",
    "openscad_code": "// Realistic figurine furniture: Miniature Baroque-style armchair\n// Designed for 3D printing, 100mm height, 2mm wall thickness\n\nchair_width = 45;\nchair_depth = 40;\nchair_height = 100;\nleg_height = 50;\nseat_thickness = 5;\nback_height = 50;\n\n// Main module\nmodule armchair() {\n    // Chair legs with decorative fluting\n    for(x=[-1,1]) for(z=[-1,1]) {\n        translate([x*chair_width/2 - 5, z*chair_depth/2 - 5, 0]) {\n            leg();\n            leg_fluting();\n        }\n    }\n    \n    // Seat frame\n    translate([0, 0, leg_height]) {\n        difference() {\n            cube([chair_width, chair_depth, seat_thickness], center=true);\n            cube([chair_width-4, chair_depth-4, seat_thickness+2], center=true);\n        }\n        \n        // Decorative seat panel\n        translate([0, 0, -seat_thickness/2]) {\n            difference() {\n                cube([chair_width-8, chair_depth-8, 1], center=true);\n                for(i=[-1,0,1]) for(j=[-1,0,1]) {\n                    translate([i*10, j*8, -0.5]) cylinder(h=2, r=2, $fn=16);\n                }\n            }\n        }\n    }\n    \n    // Backrest with curved top\n    translate([0, -chair_depth/2 + 5, leg_height + seat_thickness/2]) {\n        backrest();\n    }\n    \n    // Armrests\n    for(x=[-1,1]) {\n        translate([x*chair_width/2 - 10, 0, leg_height + seat_thickness/2 + 15]) {\n            armrest(x);\n        }\n    }\n}\n\n// Decorative chair leg\nmodule leg() {\n    difference() {\n        cylinder(h=leg_height, r1=4, r2=3, $fn=16);\n        cylinder(h=leg_height, r1=3, r2=2, $fn=16);\n    }\n}\n\n// Leg fluting detail\nmodule leg_fluting() {\n    for(i=[0:11]) {\n        rotate([0, 0, i*30]) {\n            translate([3.5, 0, 0]) {\n                cube([1, 0.5, leg_height]);\n            }\n        }\n    }\n}\n\n// Curved backrest with decorative elements\nmodule backrest() {\n    // Main back panel\n    translate([0, 0, back_height/2]) {\n        difference() {\n            cube([chair_width-10, 5, back_height], center=true);\n            translate([0, 2, 0]) cube([chair_width-14, 7, back_height-4], center=true);\n        }\n    }\n    \n    // Curved top rail\n    translate([0, -2.5, back_height]) {\n        difference() {\n            scale([1, 0.3, 1]) sphere(r=chair_width/2 - 5, $fn=32);\n            translate([0, 0, -5]) cube([chair_width, 10, 10], center=true);\n        }\n    }\n    \n    // Decorative vertical slats\n    for(x=[-15, -7.5, 0, 7.5, 15]) {\n        translate([x, 0, back_height/2]) {\n            cube([3, 4, back_height-8]);\n        }\n    }\n}\n\n// Armrest with support\nmodule armrest(side) {\n    // Horizontal arm\n    rotate([0, 30*side, 0]) {\n        translate([0, 0, 0]) {\n            cube([20, 6, 4]);\n        }\n    }\n    \n    // Support post\n    translate([5*side, 0, -15]) {\n        cylinder(h=20, r=2, $fn=16);\n    }\n    \n    // Decorative ball on armrest\n    translate([10*side, 0, 2]) {\n        sphere(r=2.5, $fn=16);\n    }\n}\n\n// Generate the chair\narmchair();",
    "renders": true
  },
  {
    "decorative_art": "ornament",
    "openscad_code": "// Ornate Jewelry Box - Decorative Furniture Ornament\n// Dimensions: 80mm x 50mm x 45mm\n\n$fn = 32;\n\n// Main body dimensions\nbody_w = 80;\nbody_d = 50;\nbody_h = 35;\n\n// Leg dimensions\nleg_h = 10;\nleg_r = 3;\n\n// Decorative elements\nbezel_h = 3;\npattern_h = 1;\n\nmodule ornate_box() {\n    // Main body with rounded top\n    difference() {\n        // Main body block\n        union() {\n            // Base box\n            translate([0, 0, body_h/2])\n                cube([body_w, body_d, body_h], center=true);\n            \n            // Rounded top\n            translate([0, 0, body_h])\n                scale([body_w*0.9, body_d*0.9, 1])\n                    sphere(bezel_h);\n        }\n        \n        // Hollow interior\n        translate([0, 0, body_h/2 + 2])\n            cube([body_w - 4, body_d - 4, body_h - 2], center=true);\n    }\n    \n    // Decorative legs\n    for(x = [-body_w/2 + 10, body_w/2 - 10])\n        for(y = [-body_d/2 + 10, body_d/2 - 10])\n            translate([x, y, leg_h/2])\n                cylinder(h=leg_h, r=leg_r);\n    \n    // Ornate front panel with carved pattern\n    translate([0, body_d/2 + 0.5, body_h/2])\n        cube([body_w - 20, 1, body_h - 10], center=true);\n    \n    // Decorative rosettes on corners\n    module rosette() {\n        difference() {\n            cylinder(h=pattern_h, r=5);\n            cylinder(h=pattern_h + 0.1, r=3);\n        }\n        for(i = [0:45:315])\n            rotate([0, 0, i])\n                translate([4, 0, 0])\n                    cube([2, 1, pattern_h], center=true);\n    }\n    \n    // Place rosettes on front\n    for(x = [-body_w/2 + 15, body_w/2 - 15])\n        translate([x, body_d/2 + 1, body_h/2])\n            rosette();\n    \n    // Hinged lid detail\n    translate([0, -body_d/2, body_h + bezel_h])\n        cube([body_w - 10, 3, 2], center=true);\n    \n    // Ornate keyhole detail\n    translate([0, body_d/2 + 1, body_h/2 - 5])\n        union() {\n            cube([4, 1, 6], center=true);\n            translate([0, 0, -3])\n                cylinder(h=1, r=1.5);\n        }\n    \n    // Side decorative panels\n    module side_panel() {\n        difference() {\n            cube([2, body_d - 20, body_h - 15], center=true);\n            for(i = [-1:1])\n                translate([0, i * 10, 0])\n                    cube([3, 5, body_h - 20], center=true);\n        }\n    }\n    \n    // Left panel\n    translate([-body_w/2 - 1, 0, body_h/2])\n        side_panel();\n    \n    // Right panel\n    translate([body_w/2 + 1, 0, body_h/2])\n        side_panel();\n    \n    // Top decorative molding\n    translate([0, 0, body_h + bezel_h + 1])\n        difference() {\n            cube([body_w - 5, body_d - 5, 2], center=true);\n            cube([body_w - 15, body_d - 15, 3], center=true);\n        }\n}\n\n// Render the complete ornament\nornate_box();",
    "renders": true
  },
  {
    "decorative_art": "lamp",
    "openscad_code": "// Realistic Table Lamp - OpenSCAD\n// Overall height: 120mm, Base diameter: 70mm, Shade: 60mm tall, 80mm top diameter\n\n$fn = 64;  // Smooth curves\n\n// Lamp base assembly\nmodule lamp_base() {\n    // Main base cylinder\n    cylinder(h = 8, d = 70);\n    \n    // Decorative base ring (stepped)\n    translate([0, 0, 8])\n        cylinder(h = 3, d1 = 70, d2 = 65);\n    \n    // Center column\n    translate([0, 0, 11])\n        cylinder(h = 40, d = 12);\n    \n    // Decorative ring at column top\n    translate([0, 0, 51])\n        cylinder(h = 4, d = 18);\n}\n\n// Lamp arm assembly\nmodule lamp_arm() {\n    // Lower arm segment\n    translate([0, 0, 55])\n        rotate([15, 0, 0])\n            cylinder(h = 35, d = 10);\n    \n    // Joint sphere\n    translate([0, 0, 90])\n        sphere(d = 12);\n    \n    // Upper arm segment\n    translate([0, 0, 96])\n        rotate([-30, 0, 0])\n            cylinder(h = 20, d = 8);\n}\n\n// Lamp shade assembly\nmodule lamp_shade() {\n    // Shade cone\n    translate([0, 0, 116])\n        cylinder(h = 60, d1 = 80, d2 = 60);\n    \n    // Shade ring detail at bottom\n    translate([0, 0, 116])\n        cylinder(h = 2, d = 82);\n    \n    // Shade ring detail at top\n    translate([0, 0, 176])\n        cylinder(h = 2, d = 62);\n}\n\n// Light bulb detail\nmodule light_bulb() {\n    // Bulb socket\n    translate([0, 0, 114])\n        cylinder(h = 8, d = 14);\n    \n    // Bulb\n    translate([0, 0, 122])\n        sphere(d = 20);\n}\n\n// Power cord detail\nmodule power_cord() {\n    // Cord exit\n    translate([0, 0, 11])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 5);\n    \n    // Cord\n    translate([0, -15, 11])\n        rotate([90, 0, 0])\n            cylinder(h = 30, d = 3);\n}\n\n// Base decorative pattern\nmodule base_pattern() {\n    for (i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([30, 0, 0])\n                cube([2, 2, 8], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    difference() {\n        lamp_base();\n        // Hollow base for weight reduction\n        translate([0, 0, 2])\n            cylinder(h = 6, d = 66);\n    }\n    \n    base_pattern();\n    lamp_arm();\n    \n    difference() {\n        lamp_shade();\n        // Hollow shade\n        translate([0, 0, 118])\n            cylinder(h = 56, d1 = 76, d2 = 56);\n    }\n    \n    light_bulb();\n    power_cord();\n}",
    "renders": true
  },
  {
    "decorative_art": "table_lamp",
    "openscad_code": "// Table Lamp - Realistic style, medium complexity\n// 2 mm wall thickness for 3D printing, approx 120 mm tall\n\n// Overall dimensions\nlamp_height = 120;\nbase_dia = 70;\nshade_dia_top = 80;\nshade_dia_bottom = 60;\nshade_height = 50;\n\n// Base module with decorative ring pattern\nmodule lamp_base() {\n    difference() {\n        // Main base disc\n        cylinder(h = 8, d = base_dia, $fn = 60);\n\n        // Recessed center\n        translate([0, 0, 4])\n            cylinder(h = 4.5, d = 40, $fn = 40);\n\n        // Decorative concentric rings (subtractive)\n        for (i = [1:3]) {\n            translate([0, 0, 2])\n                cylinder(h = 2, d = base_dia - i * 12, $fn = 60);\n        }\n    }\n}\n\n// Central stem with joint detail\nmodule stem() {\n    // Lower shaft\n    cylinder(h = 35, d = 12, $fn = 32);\n\n    // Decorative joint collar\n    translate([0, 0, 35])\n        cylinder(h = 8, d = 16, $fn = 32);\n\n    // Upper shaft (slightly thinner)\n    translate([0, 0, 43])\n        cylinder(h = 25, d = 10, $fn = 32);\n}\n\n// Lamp shade with realistic flared shape\nmodule shade() {\n    difference() {\n        // Main shade shell (conical)\n        union() {\n            // Outer shell\n            cylinder(h = shade_height, d1 = shade_dia_bottom, d2 = shade_dia_top, $fn = 60);\n            \n            // Bottom rim detail\n            translate([0, 0, -2])\n                cylinder(h = 4, d = shade_dia_bottom + 4, $fn = 60);\n        }\n\n        // Hollow interior\n        translate([0, 0, 2])\n            cylinder(h = shade_height + 2, d1 = shade_dia_bottom - 4, d2 = shade_dia_top - 4, $fn = 60);\n    }\n}\n\n// Bulb socket detail\nmodule socket() {\n    translate([0, 0, -8]) {\n        // Socket housing\n        cylinder(h = 12, d = 15, $fn = 32);\n        \n        // Thread detail\n        difference() {\n            cylinder(h = 8, d = 14, $fn = 32);\n            for (i = [0:5]) {\n                rotate([0, 0, i * 60])\n                    translate([7, 0, 1])\n                        cube([14, 1, 6], center = true);\n            }\n        }\n    }\n}\n\n// Power cord detail\nmodule cord() {\n    // Entry point\n    translate([base_dia/2 - 5, 0, 4])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 4, $fn = 16);\n    \n    // Cord\n    translate([base_dia/2 - 5, 7.5, 4])\n        rotate([0, 90, 0])\n            cylinder(h = 30, d = 3, $fn = 8);\n}\n\n// Assembly\nunion() {\n    // Base\n    lamp_base();\n    \n    // Stem starting from base top\n    translate([0, 0, 8])\n        stem();\n    \n    // Socket at stem top\n    translate([0, 0, 8 + 35 + 8 + 25])\n        socket();\n    \n    // Shade attached above socket\n    translate([0, 0, 8 + 35 + 8 + 25 + 4])\n        shade();\n    \n    // Power cord\n    cord();\n}",
    "renders": true
  },
  {
    "decorative_art": "floor_lamp",
    "openscad_code": "// Realistic Floor Lamp – OpenSCAD\n// Medium-complexity decorative model, 3D-printable (2 mm walls, no overhangs)\n\n// General dimensions\nlamp_height  = 140;   // total height\nbase_d       = 60;    // base diameter\npole_h       = 110;   // pole height\nshade_h      = 30;    // lampshade height\nshade_d      = 45;    // lampshade bottom diameter\nwall_t       = 2;     // wall thickness for 3D printing\n\n// Base\nmodule round_base(d, h) {\n    difference() {\n        cylinder(h = h, d1 = d, d2 = d*0.85); // slight taper\n        cylinder(h = h+0.1, d = d - 2*wall_t); // hollow\n    }\n}\n\n// Decorative ring (for pole joint and accent)\nmodule ring(od, id, h) {\n    difference() {\n        cylinder(h = h, d = od);\n        translate([0,0,-0.1]) cylinder(h = h+0.2, d = id);\n    }\n}\n\n// Stem/pole with subtle detail\nmodule pole(h, d) {\n    difference() {\n        cylinder(h = h, d = d);\n        translate([0,0,-0.1]) cylinder(h = h+0.2, d = d - 2*wall_t);\n    }\n}\n\n// Lampshade – flared cylinder with decorative cutouts\nmodule shade(h, d_bottom, d_top, wall_t) {\n    difference() {\n        cylinder(h = h, d1 = d_bottom, d2 = d_top);\n        // hollow\n        translate([0,0,-0.1]) cylinder(h = h+0.2, d1 = d_bottom - 2*wall_t, d2 = d_top - 2*wall_t);\n        \n        // decorative vertical slots (avoid overhangs)\n        for (i = [0:30:360]) {\n            rotate([0,0,i])\n                translate([0, d_bottom/2 - wall_t - 2, -0.2])\n                    cube([wall_t, 4, h+0.4]);\n        }\n    }\n}\n\n// Bulb placeholder\nmodule bulb() {\n    sphere(d = 8);\n}\n\n// Assembly\nunion() {\n    // Base\n    round_base(base_d, 8);\n    \n    // Pole\n    translate([0,0,8])\n        pole(pole_h, 10);\n    \n    // Decorative rings\n    translate([0,0,8])\n        ring(18, 14, 4);\n    \n    translate([0,0,8+pole_h-4])\n        ring(18, 14, 4);\n    \n    // Lampshade\n    translate([0,0,8+pole_h])\n        shade(shade_h, shade_d, shade_d*0.7, wall_t);\n    \n    // Bulb\n    translate([0,0,8+pole_h+shade_h/2])\n        bulb();\n}",
    "renders": true
  },
  {
    "decorative_art": "wall_lamp",
    "openscad_code": "// Wall Lamp - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm width x 150mm height x 70mm depth\n\n// Wall plate thickness\nwall_thickness = 2;\n\n// Back plate that mounts to wall\nmodule wall_mount() {\n    difference() {\n        // Main back plate\n        translate([-5, 0, 0])\n            cube([10, 140, 100], center=false);\n        \n        // Screw holes for mounting\n        for (y = [20, 120]) {\n            translate([0, y, 50])\n                rotate([90, 0, 0])\n                    cylinder(h=10, d=4, center=true);\n        }\n        \n        // Wire channel\n        translate([2, 70, 0])\n            cube([6, 10, 100], center=false);\n    }\n}\n\n// Decorative frame around the lamp\nmodule lamp_frame() {\n    // Outer frame\n    difference() {\n        translate([5, 5, 0])\n            cube([110, 140, 10], center=false);\n        \n        // Inner cutout\n        translate([15, 15, -1])\n            cube([90, 120, 12], center=false);\n    }\n    \n    // Decorative corners\n    for (x = [5, 105]) {\n        for (y = [5, 125]) {\n            translate([x, y, 0])\n                cylinder(h=10, d=15, center=false);\n        }\n    }\n}\n\n// Lamp shade support arms\nmodule support_arms() {\n    // Left arm\n    translate([20, 70, 10])\n        rotate([0, -30, 0])\n            cube([40, 8, 8], center=false);\n    \n    // Right arm\n    translate([90, 70, 10])\n        rotate([0, 30, 0])\n            cube([40, 8, 8], center=false);\n}\n\n// Lamp shade\nmodule lamp_shade() {\n    // Main shade body\n    difference() {\n        translate([35, 55, 40])\n            rotate([0, 0, 0])\n                cylinder(h=40, d1=50, d2=40, center=false);\n        \n        // Light bulb cavity\n        translate([60, 75, 50])\n            sphere(d=30, center=true);\n    }\n    \n    // Shade trim ring\n    translate([35, 55, 78])\n        cylinder(h=5, d=52, center=false);\n    \n    // Ventilation holes\n    for (angle = [0:45:315]) {\n        translate([60, 75, 60])\n            rotate([0, 0, angle])\n                translate([20, 0, 0])\n                    cylinder(h=5, d=3, center=true);\n    }\n}\n\n// Switch housing\nmodule switch_housing() {\n    translate([55, 10, 15])\n        cube([10, 20, 25], center=false);\n    \n    // Switch button\n    translate([60, 15, 35])\n        sphere(d=8, center=true);\n}\n\n// Decorative pattern on frame\nmodule frame_pattern() {\n    for (x = [25:10:95]) {\n        for (y = [25:10:115]) {\n            translate([x, y, 9])\n                sphere(d=3, center=true);\n        }\n    }\n}\n\n// Assemble the complete wall lamp\nunion() {\n    wall_mount();\n    \n    translate([0, 0, 70])\n        lamp_frame();\n    \n    translate([0, 0, 70])\n        frame_pattern();\n    \n    translate([0, 0, 70])\n        support_arms();\n    \n    translate([0, 0, 70])\n        lamp_shade();\n    \n    translate([0, 0, 70])\n        switch_housing();\n}",
    "renders": true
  },
  {
    "decorative_art": "candle_holder",
    "openscad_code": "// Realistic Candle Holder - Medium Complexity\n// Dimensions: 100mm x 100mm x 75mm (L x W x H)\n\n// Base parameters\nbase_width = 100;\nbase_depth = 100;\nbase_height = 8;\nwall_thickness = 2;\n\n// Candle platform parameters\nplatform_width = 85;\nplatform_depth = 85;\nplatform_height = 5;\nplatform_offset = 25;\n\n// Post parameters\npost_diameter = 15;\npost_height = 35;\n\n// Candle hole parameters\ncandle_diameter = 22;\ncandle_depth = 18;\n\n// Decorative elements\nleg_size = 8;\nleg_height = 30;\ndecorative_ridge_height = 3;\nnum_ridges = 8;\n\n// Base module with decorative legs\nmodule base_with_legs() {\n    difference() {\n        // Main base\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Chamfer bottom edges\n        translate([0, 0, -base_height/2 - 0.1])\n            cube([base_width - wall_thickness, base_depth - wall_thickness, base_height], center=true);\n    }\n    \n    // Decorative legs at corners\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (base_width/2 - leg_size/2), y * (base_depth/2 - leg_size/2), leg_height/2 - base_height/2])\n                cube([leg_size, leg_size, leg_height], center=true);\n        }\n    }\n}\n\n// Platform with decorative ridges\nmodule platform() {\n    difference() {\n        // Main platform\n        translate([0, 0, platform_offset + platform_height/2])\n            cube([platform_width, platform_depth, platform_height], center=true);\n        \n        // Bottom chamfer\n        translate([0, 0, platform_offset - 0.1])\n            cube([platform_width - wall_thickness, platform_depth - wall_thickness, platform_height + 0.2], center=true);\n    }\n    \n    // Decorative ridges\n    for(i = [0:num_ridges-1]) {\n        angle = i * 360/num_ridges;\n        radius = platform_width/2 - 10;\n        rotate([0, 0, angle])\n            translate([radius, 0, platform_offset + platform_height])\n                cube([15, wall_thickness, decorative_ridge_height], center=true);\n    }\n}\n\n// Central post with candle holder\nmodule candle_post() {\n    // Main post\n    cylinder(h=post_height, d=post_diameter, center=false, $fn=32);\n    \n    // Candle holder cup\n    translate([0, 0, post_height])\n        difference() {\n            // Outer cup\n            cylinder(h=candle_depth + 3, d=candle_diameter + wall_thickness*2, center=false, $fn=32);\n            \n            // Inner hole for candle\n            translate([0, 0, 3])\n                cylinder(h=candle_depth, d=candle_diameter, center=false, $fn=32);\n        }\n    \n    // Decorative rings\n    translate([0, 0, post_height * 0.3])\n        cylinder(h=wall_thickness, d=post_diameter + 6, center=true, $fn=32);\n    translate([0, 0, post_height * 0.7])\n        cylinder(h=wall_thickness, d=post_diameter + 6, center=true, $fn=32);\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base_with_legs();\n    \n    // Platform\n    platform();\n    \n    // Central post with candle holder\n    translate([0, 0, base_height/2 + leg_height])\n        candle_post();\n    \n    // Side supports\n    for(angle = [0, 90, 180, 270]) {\n        rotate([0, 0, angle])\n            translate([0, platform_width/2 - wall_thickness/2, base_height/2 + leg_height + post_height/2])\n                cube([wall_thickness, 15, post_height], center=true);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "candelabra",
    "openscad_code": "// Realistic Candelabra - Medium Complexity\n// Size: ~100mm height, 3D printable with 2mm walls\n\n// Overall dimensions\nheight = 100;\nbase_d = 80;\narm_length = 35;\n\n// Base module\nmodule base() {\n    // Main base disc\n    cylinder(h=8, d=base_d, $fn=60);\n    \n    // Decorative ring on base\n    translate([0, 0, 8])\n        difference() {\n            cylinder(h=3, d=base_d - 4, $fn=60);\n            cylinder(h=3.5, d=base_d - 8, $fn=60);\n        }\n}\n\n// Central stem\nmodule stem() {\n    // Lower decorative section\n    for(i=[0:2:10]) {\n        translate([0, 0, 8 + i*1.5])\n            scale([1 - i*0.02, 1 - i*0.02, 1])\n                cylinder(h=1.5, d=20 - i*0.5, $fn=32);\n    }\n    \n    // Main stem\n    translate([0, 0, 23])\n        cylinder(h=35, d1=16, d2=12, $fn=32);\n    \n    // Upper decorative collar\n    translate([0, 0, 58])\n        cylinder(h=5, d1=12, d2=16, $fn=32);\n}\n\n// Candle holder with realistic drip details\nmodule candle_holder(height=20) {\n    // Cup for candle\n    difference() {\n        cylinder(h=height, d=12, $fn=32);\n        translate([0, 0, 1])\n            cylinder(h=height, d=10, $fn=32);\n    }\n    \n    // Wax drips\n    for(a=[0:60:300]) {\n        rotate([0, 0, a])\n            translate([5, 0, height - 3])\n                scale([0.8, 0.4, 1])\n                    sphere(d=4, $fn=12);\n    }\n    \n    // Candle stub\n    translate([0, 0, height])\n        cylinder(h=8, d=8, $fn=16);\n}\n\n// Decorative arm structure\nmodule arm(pos_angle, height_offset) {\n    rotate([0, 0, pos_angle])\n        translate([0, 0, height_offset]) {\n            // Arm base\n            translate([0, 0, 0])\n                cylinder(h=5, d1=12, d2=8, $fn=32);\n            \n            // Curved arm\n            difference() {\n                hull() {\n                    translate([0, arm_length/3, 2.5])\n                        sphere(d=6, $fn=16);\n                    translate([0, arm_length, 10])\n                        sphere(d=6, $fn=16);\n                }\n                translate([0, arm_length/3, 2.5])\n                    sphere(d=2, $fn=16);\n                translate([0, arm_length, 10])\n                    sphere(d=2, $fn=16);\n            }\n            \n            // Candle holder on arm\n            translate([0, arm_length, 10])\n                candle_holder(15);\n        }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Central stem\n    stem();\n    \n    // Central candle holder\n    translate([0, 0, 63])\n        candle_holder(20);\n    \n    // Three decorative arms\n    for(i=[0:120:240]) {\n        arm(i, 63);\n    }\n    \n    // Decorative finial\n    translate([0, 0, 83])\n        difference() {\n            cylinder(h=12, d1=12, d2=8, $fn=32);\n            translate([0, 0, 10])\n                sphere(d=8, $fn=32);\n        }\n    \n    // Support ribs between arms\n    for(i=[0:120:240]) {\n        rotate([0, 0, i + 60])\n            translate([0, 0, 63])\n                difference() {\n                    cube([2, arm_length - 5, 3], center=true);\n                    translate([0, arm_length/2 - 2.5, 1.5])\n                        sphere(d=2, $fn=12);\n                }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "picture_frame",
    "openscad_code": "// Realistic Picture Frame - Medium Complexity\n// Overall size: 100x70x15mm (fits 60x40mm photo)\n// 2mm wall thickness for 3D printing\n\nframe_width = 100;\nframe_height = 70;\nframe_depth = 15;\nphoto_width = 60;\nphoto_height = 40;\nwall_thickness = 2;\n\n// Main frame body with beveled edges\nmodule frame_body() {\n    difference() {\n        // Outer frame with rounded edges\n        union() {\n            // Main frame block\n            cube([frame_width, frame_height, frame_depth]);\n            \n            // Rounded top edge\n            translate([wall_thickness, wall_thickness, frame_depth])\n                cube([frame_width-2*wall_thickness, frame_height-2*wall_thickness, 2]);\n            \n            // Rounded bottom edge\n            translate([wall_thickness, wall_thickness, -2])\n                cube([frame_width-2*wall_thickness, frame_height-2*wall_thickness, 2]);\n        }\n        \n        // Photo opening\n        translate([(frame_width-photo_width)/2, (frame_height-photo_height)/2, -1])\n            cube([photo_width, photo_height, frame_depth+2]);\n            \n        // Back recess for photo insertion\n        translate([(frame_width-photo_width)/2-2, (frame_height-photo_height)/2-2, -1])\n            cube([photo_width+4, photo_height+4, 3]);\n    }\n}\n\n// Decorative corner brackets\nmodule corner_bracket(x, y) {\n    translate([x, y, frame_depth-4]) {\n        // Main bracket body\n        cube([8, 8, 4]);\n        \n        // Decorative ridge\n        for(i = [1:3]) {\n            translate([i, i, 3.5])\n                cube([8-2*i, 8-2*i, 0.5]);\n        }\n    }\n}\n\n// Ornate top detail\nmodule top_detail() {\n    translate([frame_width/2-15, frame_height-8, frame_depth-6]) {\n        // Base\n        cube([30, 8, 6]);\n        \n        // Curved detail\n        for(i = [0:5]) {\n            translate([i*5, -1, 6])\n                cylinder(h=3, r1=3, r2=2);\n            translate([i*5, 9, 6])\n                cylinder(h=3, r1=3, r2=2);\n        }\n    }\n}\n\n// Back stand support\nmodule back_stand() {\n    translate([frame_width-25, 5, -wall_thickness]) {\n        difference() {\n            // Stand body\n            rotate([0, -15, 0])\n                cube([20, 3, 15]);\n                \n            // Lightening holes\n            translate([5, 0, 5])\n                cylinder(h=5, r=1.5);\n            translate([15, 0, 5])\n                cylinder(h=5, r=1.5);\n        }\n    }\n}\n\n// Hanger mounting points\nmodule hanger_mounts() {\n    // Top center hanger\n    translate([frame_width/2-3, -1, frame_depth/2]) {\n        cube([6, 2, 4]);\n        translate([3, 1, 2])\n            rotate([90, 0, 0])\n                cylinder(h=6, r=2);\n    }\n    \n    // Side hangers\n    translate([-1, frame_height/2-3, frame_depth/2]) {\n        cube([2, 6, 4]);\n        translate([1, 3, 2])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=2);\n    }\n    translate([frame_width-1, frame_height/2-3, frame_depth/2]) {\n        cube([2, 6, 4]);\n        translate([1, 3, 2])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=2);\n    }\n}\n\n// Assembly\nunion() {\n    frame_body();\n    \n    // Add corner brackets\n    corner_bracket(0, 0);\n    corner_bracket(frame_width-8, 0);\n    corner_bracket(0, frame_height-8);\n    corner_bracket(frame_width-8, frame_height-8);\n    \n    // Add top ornament\n    top_detail();\n    \n    // Add back stand\n    back_stand();\n    \n    // Add hanger mounts\n    hanger_mounts();\n}",
    "renders": true
  },
  {
    "decorative_art": "photo_frame",
    "openscad_code": "// Photo Frame - Realistic Style, Medium Complexity\n// External dimensions: 100x80x15 mm (fits 4x3 inch photo)\n// Wall thickness: 2mm for 3D printing\n// Includes decorative corners and stand\n\nmodule frame_profile() {\n    difference() {\n        // Outer frame\n        cube([100, 80, 15], center=true);\n        \n        // Inner cutout for photo\n        translate([0, 0, 2])\n            cube([86, 66, 16], center=true);\n    }\n}\n\nmodule decorative_corner() {\n    // Corner decoration with spherical accent\n    translate([0, 0, 7.5])\n    union() {\n        // Base pyramid shape\n        for (i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([5, 5, 0])\n            rotate([0, 0, 45])\n            cube([7, 7, 8], center=true);\n        }\n        \n        // Center sphere\n        sphere(r=3, $fn=16);\n    }\n}\n\nmodule corners() {\n    // Position decorative corners at frame edges\n    for (pos = [[-42, -32, 0], [42, -32, 0], [42, 32, 0], [-42, 32, 0]]) {\n        translate(pos)\n        decorative_corner();\n    }\n}\n\nmodule stand_support() {\n    // Hinged stand support on back\n    translate([0, 35, -7.5])\n    rotate([90, 0, 0])\n    union() {\n        // Main support leg\n        translate([0, 0, 15])\n        cube([40, 2, 25], center=true);\n        \n        // Hinge pins\n        for (x = [-15, 15]) {\n            translate([x, 0, 15])\n            cylinder(h=3, r=2, center=true);\n        }\n    }\n}\n\nmodule back_panel() {\n    // Removable back panel with photo retention\n    translate([0, 0, -7.5])\n    difference() {\n        // Main back panel\n        cube([86, 66, 2], center=true);\n        \n        // Finger grip cutout\n        translate([0, -30, 0])\n        cube([20, 5, 3], center=true);\n        \n        // Stand clearance\n        translate([0, 35, 0])\n        cube([40, 10, 4], center=true);\n    }\n}\n\nmodule photo_window() {\n    // Actual photo viewing window with bevel\n    translate([0, 0, 6])\n    difference() {\n        cylinder(h=2, r=43, $fn=64);\n        cylinder(h=3, r=41, $fn=64);\n    }\n}\n\n// Main assembly\nunion() {\n    // Frame body\n    frame_profile();\n    \n    // Decorative corners\n    corners();\n    \n    // Photo window detail\n    photo_window();\n    \n    // Stand assembly (print separately)\n    translate([0, 0, 30])  // Offset for separate printing\n    stand_support();\n    \n    // Back panel (print separately)\n    translate([0, 0, 45])  // Offset for separate printing\n    back_panel();\n}",
    "renders": true
  },
  {
    "decorative_art": "mirror",
    "openscad_code": "// Medium-complexity realistic mirror furniture\n// Overall size ~100 mm wide, ~140 mm tall, ~15 mm deep\n// Wall thickness = 2 mm for 3D printing\n\n// Parameters\nmirror_width  = 100;\nmirror_height = 120;\nmirror_thick  = 2;\n\nframe_face_w  = 8;\nframe_depth   = 12;\nframe_thick   = 2;\n\nbase_w        = 80;\nbase_h        = 12;\nbase_d        = 15;\nstand_h       = 15;\n\n// Mirror glass\nmodule mirror_glass() {\n    translate([0, 0, frame_depth/2 - mirror_thick/2])\n        cube([mirror_width, mirror_height, mirror_thick], center=true);\n}\n\n// Bevelled frame profile\nmodule frame_profile() {\n    difference() {\n        // Outer frame block\n        cube([frame_face_w, frame_face_w, frame_depth], center=true);\n        // Inner bevel cut\n        translate([0, 0, frame_depth/2 - 1])\n            cube([frame_face_w - 2*frame_thick, frame_face_w - 2*frame_thick, 2], center=true);\n    }\n}\n\n// Full frame assembly\nmodule frame() {\n    // Top\n    translate([0,  mirror_height/2 + frame_face_w/2, 0])\n        frame_profile();\n    // Bottom\n    translate([0, -mirror_height/2 - frame_face_w/2, 0])\n        frame_profile();\n    // Left\n    rotate([0,0,90])\n    translate([0,  mirror_width/2 + frame_face_w/2, 0])\n        frame_profile();\n    // Right\n    rotate([0,0,90])\n    translate([0, -mirror_width/2 - frame_face_w/2, 0])\n        frame_profile();\n}\n\n// Ornamental corner scrolls\nmodule corner_scroll() {\n    for (a=[0:90:270]) {\n        rotate([0,0,a])\n        translate([mirror_width/2 + frame_face_w/2 - 2, mirror_height/2 + frame_face_w/2 - 2, 0])\n        rotate([90,0,0])\n        cylinder(h=frame_face_w/2, r1=3, r2=1, $fn=16);\n    }\n}\n\n// Base stand\nmodule base_stand() {\n    difference() {\n        // Main base\n        translate([0, -mirror_height/2 - stand_h - base_h/2, frame_depth/2 - base_d/2])\n            cube([base_w, base_h, base_d], center=true);\n        // Lightening cut\n        translate([0, -mirror_height/2 - stand_h - base_h/2, frame_depth/2 - base_d/2 + 2])\n            cube([base_w - 2*frame_thick, base_h - 2*frame_thick, base_d - 4], center=true);\n    }\n    // Support strut\n    translate([0, -mirror_height/2 - stand_h/2, 0])\n        cube([frame_face_w*2, stand_h, frame_thick], center=true);\n}\n\n// Back brace\nmodule back_brace() {\n    translate([0, -mirror_height/4, -frame_depth/2 + 1])\n        rotate([90,0,0])\n        cylinder(h=base_w/2, r=2, $fn=12);\n}\n\n// Assembly\nunion() {\n    mirror_glass();\n    frame();\n    corner_scroll();\n    base_stand();\n    back_brace();\n}",
    "renders": true
  },
  {
    "decorative_art": "decorative_mirror",
    "openscad_code": "// Decorative Wall Mirror - Realistic Style\n// Overall dimensions: 120mm width x 140mm height x 15mm depth\n\n$fn = 32;\n\n// Main mirror glass\nmodule mirror_glass() {\n    difference() {\n        // Mirror surface\n        translate([0, 0, 13])\n            cube([80, 100, 2], center=true);\n        \n        // Beveled edge detail\n        translate([0, 0, 13.5])\n            cube([76, 96, 2], center=true);\n    }\n}\n\n// Ornate frame with floral patterns\nmodule decorative_frame() {\n    // Outer frame\n    difference() {\n        // Main frame body\n        translate([0, 0, 7.5])\n            cube([100, 120, 15], center=true);\n        \n        // Inner cutout\n        translate([0, 0, 7.5])\n            cube([84, 104, 16], center=true);\n    }\n    \n    // Decorative corners\n    for(x = [-40, 40])\n    for(y = [-50, 50]) {\n        translate([x, y, 12])\n            rotate([0, 0, x > 0 ? 0 : 180])\n            rotate([0, 0, y > 0 ? 90 : -90])\n            corner_detail();\n    }\n    \n    // Side decorations\n    for(pos = [-40, 40]) {\n        // Left/right decorations\n        translate([pos, 0, 12])\n            rotate([0, 0, pos > 0 ? 90 : -90])\n            side_decoration();\n        \n        // Top/bottom decorations\n        translate([0, pos + 10*sign(pos), 12])\n            rotate([0, 0, pos > 0 ? 0 : 180])\n            side_decoration();\n    }\n}\n\n// Corner floral detail\nmodule corner_detail() {\n    difference() {\n        union() {\n            // Main corner piece\n            translate([35, 45, 0])\n                cylinder(h=5, r1=12, r2=8);\n            \n            // Petal details\n            for(i = [0:45:315]) {\n                rotate([0, 0, i])\n                translate([42, 45, 2.5])\n                    scale([1.5, 0.8, 1])\n                    cylinder(h=5, r1=6, r2=0);\n            }\n        }\n        \n        // Center hole\n        translate([35, 45, -1])\n            cylinder(h=7, r=3);\n    }\n}\n\n// Side decoration pattern\nmodule side_decoration() {\n    // Base scroll\n    translate([0, 0, 0])\n        scale([1.2, 0.6, 1])\n        cylinder(h=5, r1=25, r2=20);\n    \n    // Decorative beads\n    for(i = [-15:7.5:15]) {\n        translate([i, 0, 3])\n            sphere(d=5);\n    }\n}\n\n// Back mounting bracket\nmodule mounting_bracket() {\n    // Main bracket\n    translate([0, 40, 0])\n        cube([40, 8, 10], center=true);\n    \n    // Keyhole slots for wall mounting\n    for(x = [-15, 15]) {\n        translate([x, 40, 5])\n            cube([6, 8, 10], center=true);\n    }\n    \n    // Support ribs\n    for(x = [-30, 30]) {\n        translate([x, 20, 5])\n            cube([2, 40, 10], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Mirror components\n    mirror_glass();\n    decorative_frame();\n    \n    // Back structure\n    mounting_bracket();\n}\n\n// Print orientation marker (remove before printing)\n%translate([0, 0, -5])\n    cube([120, 140, 0.5], center=true);",
    "renders": true
  },
  {
    "decorative_art": "wall_art",
    "openscad_code": "// Wall-mounted decorative shelf unit - realistic style\n// Overall dimensions: 120mm wide x 80mm tall x 25mm deep\n\n$fn = 32;\n\n// Main parameters\nwidth = 120;\nheight = 80;\ndepth = 25;\nwall_thickness = 2;\nshelf_thickness = 3;\n\n// Wall mounting plate\nmodule mounting_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, depth/2 - wall_thickness/2])\n            cube([width, height, wall_thickness], center=true);\n        \n        // Keyhole mounting slots (2)\n        for(x = [-40, 40]) {\n            translate([x, height/2 - 15, depth/2 - wall_thickness/2 + 1])\n                rotate([90, 0, 0])\n                    cylinder(h=10, d1=8, d2=4);\n        }\n    }\n}\n\n// Decorative frame border\nmodule frame() {\n    // Top horizontal piece\n    translate([0, height/2 - wall_thickness/2, depth/2])\n        cube([width + wall_thickness*2, wall_thickness*2, depth], center=true);\n    \n    // Bottom horizontal piece\n    translate([0, -height/2 + wall_thickness/2, depth/2])\n        cube([width + wall_thickness*2, wall_thickness*2, depth], center=true);\n    \n    // Left vertical piece\n    translate([-width/2 - wall_thickness/2, 0, depth/2])\n        cube([wall_thickness*2, height + wall_thickness*2, depth], center=true);\n    \n    // Right vertical piece\n    translate([width/2 + wall_thickness/2, 0, depth/2])\n        cube([wall_thickness*2, height + wall_thickness*2, depth], center=true);\n}\n\n// Decorative shelves\nmodule shelves() {\n    // Top shelf (decorative ledge)\n    translate([0, height/2 - 10, depth - shelf_thickness/2])\n        cube([width - 20, shelf_thickness, shelf_thickness], center=true);\n    \n    // Middle shelf (functional)\n    translate([0, 0, depth - shelf_thickness/2])\n        cube([width - 30, shelf_thickness, shelf_thickness], center=true);\n    \n    // Bottom shelf (decorative ledge)\n    translate([0, -height/2 + 10, depth - shelf_thickness/2])\n        cube([width - 20, shelf_thickness, shelf_thickness], center=true);\n}\n\n// Decorative back panel with carved pattern\nmodule back_panel() {\n    difference() {\n        // Main back panel\n        translate([0, 0, wall_thickness + 1])\n            cube([width - wall_thickness*4, height - wall_thickness*4, 1], center=true);\n        \n        // Carved circular pattern\n        for(i = [-1, 1]) {\n            for(j = [-1, 1]) {\n                translate([i*30, j*20, wall_thickness + 1.5])\n                    cylinder(h=2, r=8);\n            }\n        }\n        \n        // Center diamond pattern\n        translate([0, 0, wall_thickness + 1.5])\n            rotate([0, 0, 45])\n                cube([15, 15, 2], center=true);\n    }\n}\n\n// Side brackets for structural support\nmodule brackets() {\n    // Left bracket\n    translate([-width/2 + 10, 0, depth/2])\n        rotate([0, 45, 0])\n            cube([wall_thickness*3, height - 20, wall_thickness*3]);\n    \n    // Right bracket\n    translate([width/2 - 10, 0, depth/2])\n        rotate([0, -45, 0])\n            cube([wall_thickness*3, height - 20, wall_thickness*3]);\n}\n\n// Assembly\nunion() {\n    // Mounting system\n    mounting_plate();\n    \n    // Decorative frame\n    frame();\n    \n    // Shelves\n    shelves();\n    \n    // Back panel decoration\n    back_panel();\n    \n    // Support brackets\n    brackets();\n    \n    // Small decorative spheres at corners\n    translate([width/2 - 5, height/2 - 5, depth - 2])\n        sphere(r=2);\n    translate([-width/2 + 5, height/2 - 5, depth - 2])\n        sphere(r=2);\n    translate([width/2 - 5, -height/2 + 5, depth - 2])\n        sphere(r=2);\n    translate([-width/2 + 5, -height/2 + 5, depth - 2])\n        sphere(r=2);\n}",
    "renders": true
  },
  {
    "decorative_art": "painting_frame",
    "openscad_code": "// Realistic Painting Frame - Medium Complexity\n// Overall dimensions: 120mm x 90mm x 15mm (frame thickness)\n\nframe_width = 120;\nframe_height = 90;\nframe_depth = 15;\nwall_thickness = 2;\nmat_width = 5;\n\n// Outer frame profile\nmodule frame_profile(width, height, depth, thickness) {\n    difference() {\n        // Main frame body\n        cube([width, height, depth], center=true);\n        \n        // Inner cutout for picture\n        translate([0, 0, -1])\n            cube([width - thickness*2, height - thickness*2, depth + 2], center=true);\n    }\n}\n\n// Decorative bead along frame edge\nmodule decorative_bead(length, is_horizontal) {\n    bead_size = 2;\n    count = floor(length / 8);\n    \n    for(i = [0:count-1]) {\n        pos = (i - count/2 + 0.5) * 8;\n        translate(is_horizontal ? [pos, 0, frame_depth/2] : [0, pos, frame_depth/2])\n            sphere(bead_size/2, $fn=16);\n    }\n}\n\n// Corner ornament\nmodule corner_ornament(x, y) {\n    translate([x, y, frame_depth/2 - 1]) {\n        // Base cylinder\n        cylinder(h=2, r=3, $fn=32);\n        \n        // Decorative sphere on top\n        translate([0, 0, 2])\n            sphere(2.5, $fn=32);\n    }\n}\n\n// Back support bracket\nmodule back_support() {\n    // Triangular support\n    translate([0, -frame_height/2 + 10, -frame_depth/2]) {\n        linear_extrude(height=wall_thickness)\n            polygon(points=[[-5, 0], [5, 0], [0, -8]]);\n    }\n}\n\n// Picture mat\nmodule picture_mat() {\n    mat_inner_width = frame_width - wall_thickness*2 - mat_width*2;\n    mat_inner_height = frame_height - wall_thickness*2 - mat_width*2;\n    \n    difference() {\n        // Outer mat\n        cube([mat_inner_width + mat_width*2, mat_inner_height + mat_width*2, wall_thickness], center=true);\n        \n        // Inner opening\n        cube([mat_inner_width, mat_inner_height, wall_thickness + 1], center=true);\n    }\n}\n\n// Hanging wire mounts\nmodule wire_mounts() {\n    // Left mount\n    translate([-frame_width/2 + 10, frame_height/2 - wall_thickness, -frame_depth/2 + 2])\n        cylinder(h=4, r=2, $fn=16);\n    \n    // Right mount\n    translate([frame_width/2 - 10, frame_height/2 - wall_thickness, -frame_depth/2 + 2])\n        cylinder(h=4, r=2, $fn=16);\n}\n\n// Main assembly\nunion() {\n    // Frame body with slight bevel\n    difference() {\n        // Outer frame\n        frame_profile(frame_width, frame_height, frame_depth, wall_thickness*3);\n        \n        // Bevel inner edge\n        translate([0, 0, -frame_depth/2 + 2])\n            cube([frame_width - wall_thickness*4, frame_height - wall_thickness*4, 4], center=true);\n    }\n    \n    // Add decorative beads along edges\n    translate([0, frame_height/2 - wall_thickness*1.5, 0])\n        decorative_bead(frame_width - 20, true);\n    translate([0, -frame_height/2 + wall_thickness*1.5, 0])\n        decorative_bead(frame_width - 20, true);\n    translate([frame_width/2 - wall_thickness*1.5, 0, 0])\n        decorative_bead(frame_height - 20, false);\n    translate([-frame_width/2 + wall_thickness*1.5, 0, 0])\n        decorative_bead(frame_height - 20, false);\n    \n    // Corner ornaments\n    corner_ornament(frame_width/2 - wall_thickness*2, frame_height/2 - wall_thickness*2);\n    corner_ornament(-frame_width/2 + wall_thickness*2, frame_height/2 - wall_thickness*2);\n    corner_ornament(frame_width/2 - wall_thickness*2, -frame_height/2 + wall_thickness*2);\n    corner_ornament(-frame_width/2 + wall_thickness*2, -frame_height/2 + wall_thickness*2);\n    \n    // Picture mat (recessed)\n    translate([0, 0, -frame_depth/2 + wall_thickness])\n        picture_mat();\n    \n    // Back supports\n    back_support();\n    translate([frame_width/2 - 20, 0, 0])\n        mirror([1, 0, 0])\n            back_support();\n    \n    // Hanging wire mounts\n    wire_mounts();\n}",
    "renders": true
  },
  {
    "decorative_art": "sculpture_base",
    "openscad_code": "// Sculpture Base - Modern Art Display Stand\n// Realistic style, medium complexity\n// 110mm x 110mm x 65mm overall dimensions\n\n// Base parameters\nbase_width = 110;\nbase_depth = 110;\nbase_height = 65;\nwall_thickness = 2;\n\n// Main base module\nmodule sculpture_base() {\n    // Bottom platform with decorative edge\n    difference() {\n        // Main platform\n        cube([base_width, base_depth, 8], center=true);\n        \n        // Chamfered edges\n        translate([0, 0, 4])\n        cube([base_width-4, base_depth-4, 8], center=true);\n        \n        // Center cutout for weight reduction\n        translate([0, 0, -1])\n        cube([base_width-20, base_depth-20, 10], center=true);\n    }\n    \n    // Middle support column with decorative rings\n    translate([0, 0, 8])\n    union() {\n        // Main column\n        cylinder(h=45, r1=25, r2=20, center=false);\n        \n        // Decorative rings\n        for(i = [1:3]) {\n            translate([0, 0, i*12])\n            cylinder(h=3, r1=26, r2=26, center=false);\n        }\n        \n        // Vertical fluting details\n        for(angle = [0:30:330]) {\n            rotate([0, 0, angle])\n            translate([22, 0, 0])\n            cube([wall_thickness, 4, 45], center=true);\n        }\n    }\n    \n    // Top display platform\n    translate([0, 0, 53])\n    union() {\n        // Main top surface\n        cube([80, 80, 6], center=true);\n        \n        // Raised edge lip\n        difference() {\n            translate([0, 0, 3])\n            cube([82, 82, 4], center=true);\n            translate([0, 0, 3])\n            cube([76, 76, 4], center=true);\n        }\n        \n        // Corner reinforcements\n        for(x = [-1:2:1]) {\n            for(y = [-1:2:1]) {\n                translate([x*35, y*35, 0])\n                cube([6, 6, 6], center=true);\n            }\n        }\n    }\n    \n    // Decorative corner brackets\n    for(x = [-1:2:1]) {\n        for(y = [-1:2:1]) {\n            translate([x*50, y*50, 4])\n            rotate([0, 0, (x*y > 0) ? 45 : -45])\n            cube([wall_thickness, 15, 6], center=true);\n        }\n    }\n    \n    // Hidden cable management hole\n    translate([0, 0, 57])\n    cylinder(h=15, r1=8, r2=8, center=false);\n}\n\n// Generate the complete base\nsculpture_base();",
    "renders": true
  },
  {
    "decorative_art": "pedestal",
    "openscad_code": "// Pedestal.scad\n// A medium-complexity realistic pedestal for 3-D printing\n// Overall height 120 mm, base footprint 60 mm, top 40 mm\n// Wall thickness ≥2 mm, no overhangs >45°\n\n// Parameters\nbase_d = 60;          // base diameter\ntop_d = 40;           // platform diameter\nh_total = 120;        // total height\nwall = 2.4;           // wall thickness\npillar_h = 80;        // height of fluted pillar section\nfillet = 3;           // small chamfers / fillets\n\n// Render quality\n$fn = 48;\n\n// ---- Main model ----\nunion() {\n    // 1. Octagonal stepped base\n    translate([0,0,0])\n        stepped_base();\n\n    // 2. Fluted column\n    translate([0,0,10])       // sits on stepped base\n        fluted_column();\n\n    // 3. Circular top platform\n    translate([0,0,h_total-10])\n        top_platform();\n}\n\n// ---- Module definitions ----\n\nmodule stepped_base() {\n    // Two octagonal layers with rounded edges\n    difference() {\n        cylinder(d1 = base_d, d2 = base_d*0.9, h = 10, center = false);\n        cylinder(d1 = base_d-wall*2, d2 = base_d*0.9-wall*2, h = 10, center = false);\n    }\n    // Add subtle bottom bevel for printability\n    translate([0,0,-0.01])\n        cylinder(d1 = base_d+0.2, d2 = base_d, h = 0.5, center = false);\n}\n\nmodule fluted_column() {\n    // Central hollow pipe\n    difference() {\n        cylinder(d = base_d*0.9, h = pillar_h, center = false);\n        cylinder(d = base_d*0.9-wall*2, h = pillar_h+0.2, center = false);\n    }\n    // Decorative vertical flutes\n    for (i = [0:11]) {\n        rotate([0,0,i*30])\n            translate([base_d*0.9/2 - wall, -1.5, 0])\n                cube([wall, 3, pillar_h], center = false);\n    }\n}\n\nmodule top_platform() {\n    // Circular platform with slight lip\n    difference() {\n        cylinder(d = top_d, h = 10, center = false);\n        cylinder(d = top_d-wall*2, h = 10, center = false);\n    }\n    // Add a shallow recess for display items\n    translate([0,0,1])\n        cylinder(d = top_d-wall*3, h = 2, center = false);\n}",
    "renders": true
  },
  {
    "decorative_art": "bookend",
    "openscad_code": "// Realistic Bookend Furniture Item - Medium Complexity\n// A decorative bookend with wooden frame and metal accents\n\n// Overall dimensions\nbookend_width = 120;\nbookend_height = 150;\nbookend_depth = 100;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main base - wooden platform\nmodule base() {\n    difference() {\n        // Main base\n        cube([bookend_width, bookend_depth, 15]);\n        \n        // Lighten the base with internal cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([bookend_width-wall_thickness*2, bookend_depth-wall_thickness*2, 15-wall_thickness]);\n        \n        // Decorative grooves on top\n        for (x = [20:20:bookend_width-20]) {\n            translate([x, 5, 12])\n                cube([2, bookend_depth-10, 3]);\n        }\n    }\n}\n\n// Vertical back support - main structure\nmodule back_support() {\n    // Main back panel\n    difference() {\n        cube([bookend_width, 15, bookend_height]);\n        \n        // Internal hollow for material saving\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([bookend_width-wall_thickness*2, 15-wall_thickness, bookend_height-wall_thickness]);\n    }\n    \n    // Reinforcement ribs\n    for (x = [20:25:bookend_width-20]) {\n        translate([x, 15, 0])\n            cube([2, 8, bookend_height/2]);\n    }\n}\n\n// Side decorative panel with cutout pattern\nmodule decorative_panel() {\n    // Main panel\n    difference() {\n        translate([0, 15, 0])\n            cube([15, bookend_depth-15, bookend_height]);\n        \n        // Internal hollow\n        translate([wall_thickness, 15+wall_thickness, wall_thickness])\n            cube([15-wall_thickness*2, bookend_depth-15-wall_thickness*2, bookend_height-wall_thickness*2]);\n        \n        // Decorative circles pattern\n        for (y = [25:25:bookend_depth-40]) {\n            for (z = [25:25:bookend_height-40]) {\n                translate([7.5, 15+y, z])\n                    rotate([90, 0, 0])\n                        cylinder(h=15, r=8, $fn=20);\n            }\n        }\n    }\n}\n\n// Metal accent strips\nmodule metal_accents() {\n    // Top metal strip\n    translate([-2, -2, bookend_height-3])\n        cube([bookend_width+4, bookend_depth+4, 3]);\n    \n    // Front metal strip\n    translate([-2, bookend_depth-3, 0])\n        cube([bookend_width+4, 3, bookend_height]);\n}\n\n// Support feet\nmodule feet() {\n    foot_size = 8;\n    foot_height = 5;\n    \n    // Four feet at corners\n    for (x = [10, bookend_width-10-8]) {\n        for (y = [10, bookend_depth-10-8]) {\n            translate([x, y, -foot_height])\n                cylinder(h=foot_height, r=foot_size/2, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main wooden structure\n    base();\n    \n    translate([0, 0, 15])\n        back_support();\n    \n    translate([bookend_width-15, 0, 15])\n        decorative_panel();\n    \n    // Metal accents in dark color\n    %metal_accents();\n    \n    // Support feet\n    feet();\n}",
    "renders": true
  },
  {
    "decorative_art": "paperweight",
    "openscad_code": "// Paperweight Furniture: Miniature Writing Desk with Drawers\n// Dimensions: 100mm x 60mm x 35mm (ideal for paperweight use)\n\n// Overall desk dimensions\ndesk_width = 100;\ndesk_depth = 60;\ndesk_height = 35;\n\n// Wall thickness for 3D printing\nwall_th = 2;\n\n// Desk top\nmodule desk_top() {\n    difference() {\n        // Main top surface\n        cube([desk_width, desk_depth, 4]);\n        \n        // Rounded front edge - create chamfer\n        translate([0, -0.1, 3.5])\n            cube([desk_width, desk_depth + 0.2, 1]);\n    }\n}\n\n// Desk legs (4 legs with stretchers)\nmodule desk_legs() {\n    leg_size = 6;\n    leg_height = desk_height - 4;\n    \n    // Generate 4 legs\n    for (x = [0, desk_width - leg_size]) {\n        for (y = [0, desk_depth - leg_size]) {\n            translate([x, y, 0]) {\n                difference() {\n                    cube([leg_size, leg_size, leg_height]);\n                    \n                    // Taper legs slightly\n                    translate([0.5, 0.5, 0])\n                        cube([leg_size - 1, leg_size - 1, leg_height - 0.5]);\n                }\n            }\n        }\n    }\n    \n    // Front and back stretchers\n    stretcher_height = 3;\n    for (z = [0, desk_depth - leg_size]) {\n        translate([leg_size, z, leg_height/2 - stretcher_height/2])\n            cube([desk_width - leg_size*2, wall_th, stretcher_height]);\n    }\n    \n    // Side stretchers\n    for (z = [0, desk_width - leg_size]) {\n        translate([z, leg_size, leg_height/2 - stretcher_height/2])\n            cube([wall_th, desk_depth - leg_size*2, stretcher_height]);\n    }\n}\n\n// Drawer bank with 3 drawers\nmodule drawers() {\n    drawer_bank_width = desk_width * 0.7;\n    drawer_bank_height = desk_height * 0.6;\n    drawer_front_height = (drawer_bank_height - 4*wall_th)/3;\n    \n    // Drawer frame\n    translate([(desk_width - drawer_bank_width)/2, \n               (desk_depth - 15)/2, \n               4]) {\n        difference() {\n            // Main drawer bank box\n            cube([drawer_bank_width, 15, drawer_bank_height]);\n            \n            // Hollow out for drawers\n            translate([wall_th, wall_th, wall_th])\n                cube([drawer_bank_width - wall_th*2, \n                      15 - wall_th*2, \n                      drawer_bank_height - wall_th*2]);\n        }\n        \n        // Three drawers\n        for (i = [0:2]) {\n            drawer_y = wall_th + i*(drawer_front_height + wall_th);\n            translate([wall_th + 1, wall_th/2, drawer_y + 0.5]) {\n                difference() {\n                    // Drawer front\n                    cube([drawer_bank_width - wall_th*2 - 2, \n                          15 - wall_th, \n                          drawer_front_height - 1]);\n                    \n                    // Drawer pull (simple circular)\n                    translate([(drawer_bank_width - wall_th*2 - 2)/2, \n                              -wall_th/2 - 0.5, \n                              drawer_front_height/2])\n                        cylinder(h=3, r=2, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Decorative back panel with cutout pattern\nmodule back_panel() {\n    panel_width = desk_width * 0.8;\n    panel_height = desk_height - 8;\n    \n    translate([(desk_width - panel_width)/2, \n               desk_depth - 3, \n               4]) {\n        difference() {\n            // Main panel\n            cube([panel_width, 3, panel_height]);\n            \n            // Decorative cutouts - oval shapes\n            for (x = [panel_width*0.25, panel_width*0.5, panel_width*0.75]) {\n                translate([x, 1.5, panel_height*0.5])\n                    scale([1, 0.6, 1])\n                        sphere(r=5, $fn=32);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main desk structure\n    desk_top();\n    desk_legs();\n    drawers();\n    back_panel();\n    \n    // Small decorative items on top\n    // Tiny inkwell\n    translate([desk_width*0.7, desk_depth*0.7, 4.5]) {\n        cylinder(h=3, r=4, $fn=16);\n        translate([0, 0, 3])\n            cylinder(h=1, r=2, $fn=16);\n    }\n    \n    // Miniature book stack\n    for (i = [0:2]) {\n        translate([desk_width*0.3, desk_depth*0.6 + i*2, 4.5]) {\n            cube([8, 3, 1.5]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "decoration",
    "openscad_code": "// Decorative Jewelry Box / Keepsake Chest (Medium Complexity, Realistic Style)\n// Overall size: 100 mm wide × 70 mm deep × 60 mm high\n// Wall thickness: 2 mm throughout for 3D-printability\n\n$fn = 50;  // Smooth curves for realism\n\nmodule chest_body() {\n    difference() {\n        // Outer shell\n        cube([100, 70, 60], center = true);\n        // Hollow interior\n        translate([0, 0, 2])\n            cube([96, 66, 58], center = true);\n    }\n}\n\nmodule feet() {\n    // Four turned-style feet\n    for (x = [-45, 45])\n        for (y = [-30, 30])\n            translate([x, y, -30.5])\n                cylinder(h = 5, d1 = 10, d2 = 6);\n}\n\nmodule lid() {\n    difference() {\n        // Lid shell\n        translate([0, 0, 30])\n            cube([100, 70, 12], center = true);\n        // Inner recess for nesting\n        translate([0, 0, 30])\n            cube([96, 66, 8], center = true);\n    }\n    // Gentle dome top for realism\n    translate([0, 0, 37])\n        scale([1, 0.7, 0.3])\n            sphere(d = 100);\n}\n\nmodule decorative_bands() {\n    // Front and back ornamental strips\n    for (z = [-20, 20]) {\n        translate([0, 35, z])\n            cube([90, 2, 4], center = true);\n        translate([0, -35, z])\n            cube([90, 2, 4], center = true);\n    }\n    // Side ornamental strips\n    for (z = [-20, 20]) {\n        translate([50, 0, z])\n            cube([2, 66, 4], center = true);\n        translate([-50, 0, z])\n            cube([2, 66, 4], center = true);\n    }\n}\n\nmodule corner_reinforcements() {\n    // Decorative corner braces\n    for (x = [-48, 48])\n        for (y = [-33, 33])\n            translate([x, y, 0])\n                cube([4, 4, 60], center = true);\n}\n\nmodule hinge_detail() {\n    // Two rear hinges\n    for (x = [-30, 30])\n        translate([x, 34, 36])\n            rotate([90, 0, 0])\n                cylinder(h = 8, d = 4);\n}\n\nmodule front_latch() {\n    translate([0, 35, 36])\n        rotate([90, 0, 0])\n            cylinder(h = 8, d1 = 8, d2 = 4);\n    // Latch plate on body\n    translate([0, 35, 28])\n        cube([12, 2, 6], center = true);\n}\n\nunion() {\n    chest_body();\n    feet();\n    lid();\n    decorative_bands();\n    corner_reinforcements();\n    hinge_detail();\n    front_latch();\n}",
    "renders": true
  },
  {
    "decorative_art": "centerpiece",
    "openscad_code": "// Centerpiece Furniture: Decorative Plant Stand with Lattice Sides\n// Dimensions: 120mm wide x 120mm deep x 80mm tall\n\n// Overall dimensions\nstand_width = 120;\nstand_depth = 120;\nstand_height = 80;\nwall_thickness = 2;\n\n// Base thickness\nbase_thickness = 8;\n\n// Top frame dimensions\ntop_frame_width = 4;\n\n// Lattice bar dimensions\nlattice_width = 2;\nlattice_height = stand_height - base_thickness - top_frame_width;\nlattice_spacing = 12;\n\n// Top inner diameter for plant pot\ntop_inner_diameter = 90;\n\n// Module for creating a single lattice bar\nmodule lattice_bar(length, width, height) {\n    cube([length, width, height], center = true);\n}\n\n// Module for creating side lattice panel\nmodule lattice_panel(width, height, bar_width, spacing) {\n    num_bars = floor(width / spacing);\n    union() {\n        for (i = [0 : num_bars]) {\n            translate([i * spacing - width/2, 0, 0])\n                lattice_bar(bar_width, bar_width, height);\n        }\n        for (i = [0 : num_bars]) {\n            translate([0, i * spacing - width/2, 0])\n                rotate([0, 0, 90])\n                    lattice_bar(bar_width, bar_width, height);\n        }\n    }\n}\n\n// Create the base\nmodule base() {\n    // Main base platform\n    difference() {\n        cube([stand_width, stand_depth, base_thickness], center = true);\n        // Optional: Add decorative bevel on bottom edges\n        translate([0, 0, -base_thickness/2 + 1])\n            cube([stand_width - 4, stand_depth - 4, 2], center = true);\n    }\n}\n\n// Create the top frame\nmodule top_frame() {\n    difference() {\n        // Outer frame\n        cube([stand_width, stand_depth, top_frame_width], center = true);\n        // Hollow center for plant pot\n        cylinder(h = top_frame_width + 1, r = top_inner_diameter/2, center = true);\n        // Corner cutouts for aesthetics\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x * (stand_width/2 - 8), y * (stand_depth/2 - 8), 0])\n                    cube([10, 10, top_frame_width + 2], center = true);\n            }\n        }\n    }\n}\n\n// Create legs with lattice sides\nmodule legs() {\n    leg_offset = stand_width/2 - wall_thickness;\n    lattice_panel_size = stand_width - 2 * wall_thickness - 2 * lattice_width;\n    \n    // Four sides with lattice\n    for (side = [0 : 3]) {\n        rotate([0, 0, side * 90])\n        translate([0, stand_depth/2 - wall_thickness/2, \n                   base_thickness/2 + lattice_height/2])\n            cube([stand_width - 2 * wall_thickness, wall_thickness, lattice_height], center = true);\n        \n        rotate([0, 0, side * 90])\n        translate([0, stand_depth/2 - wall_thickness - lattice_width/2, \n                   base_thickness/2 + lattice_height/2])\n            lattice_panel(lattice_panel_size, lattice_height, lattice_width, lattice_spacing);\n    }\n}\n\n// Assembly\ntranslate([0, 0, stand_height/2]) {\n    union() {\n        // Base\n        translate([0, 0, -stand_height/2 + base_thickness/2])\n            base();\n        \n        // Legs with lattice\n        legs();\n        \n        // Top frame\n        translate([0, 0, stand_height/2 - top_frame_width/2])\n            top_frame();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "flower_arrangement",
    "openscad_code": "// Flower Arrangement Furniture - Decorative Plant Stand with Vase and Flowers\n// Realistic style, medium complexity, 3D printable\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main dimensions\nbase_width = 80;\nbase_depth = 80;\nbase_height = 15;\nleg_height = 120;\nleg_size = 12;\ntop_width = 70;\ntop_depth = 70;\ntop_thickness = 4;\n\n// Vase dimensions\nvase_base = 45;\nvase_top = 35;\nvase_height = 35;\nvase_wall = 2;\n\n// Flower dimensions\nstem_height = 25;\nstem_diameter = 2;\nflower_diameter = 12;\nflower_height = 8;\n\nmodule flower_stand() {\n    // Base with decorative edge\n    difference() {\n        union() {\n            cube([base_width, base_depth, base_height], center=true);\n            // Decorative bevel on base\n            translate([0, 0, base_height/2 - 2])\n                cylinder(h=4, r1=base_width/2 - 2, r2=base_width/2 - 6, center=true);\n        }\n        // Hollow bottom for material saving\n        translate([0, 0, -base_height/2 + 2])\n            cube([base_width - 8, base_depth - 8, base_height - 2], center=true);\n    }\n    \n    // Four decorative legs with fluting\n    for(i = [0:3]) {\n        angle = i * 90;\n        translate([cos(angle) * (base_width/2 - leg_size/2 - 5), \n                  sin(angle) * (base_depth/2 - leg_size/2 - 5), 0])\n            rotate([0, 0, angle])\n            leg();\n    }\n    \n    // Top platform\n    translate([0, 0, leg_height + base_height/2])\n        difference() {\n            cube([top_width, top_depth, top_thickness], center=true);\n            // Central hole for vase\n            translate([0, 0, -top_thickness/2])\n                cylinder(h=top_thickness + 1, r=vase_base/2 + 1, center=true);\n        }\n}\n\nmodule leg() {\n    // Tapered leg with decorative rings\n    union() {\n        // Main leg\n        translate([0, 0, leg_height/2 + base_height/2])\n            cylinder(h=leg_height, r1=leg_size/2, r2=leg_size/2 - 2, center=true);\n        \n        // Decorative rings\n        for(h = [0.2, 0.4, 0.6, 0.8]) {\n            translate([0, 0, base_height/2 + leg_height * h])\n                cylinder(h=3, r=leg_size/2 + 1, center=true);\n        }\n    }\n}\n\nmodule vase() {\n    // Decorative vase with curved profile\n    difference() {\n        union() {\n            // Main vase body\n            translate([0, 0, vase_height/2])\n                cylinder(h=vase_height, r1=vase_base/2, r2=vase_top/2, center=true);\n            // Decorative rim\n            translate([0, 0, vase_height - 1])\n                cylinder(h=3, r1=vase_top/2 + 2, r2=vase_top/2 + 1, center=true);\n        }\n        // Hollow interior\n        translate([0, 0, -1])\n            cylinder(h=vase_height + 2, r=vase_base/2 - vase_wall, center=true);\n    }\n}\n\nmodule flower(stem_h, angle) {\n    // Individual flower with stem and petals\n    translate([0, 0, stem_h])\n        rotate([angle, 0, 0])\n        union() {\n            // Stem\n            translate([0, 0, stem_h/2])\n                cylinder(h=stem_h, d=stem_diameter, center=true);\n            \n            // Flower head\n            translate([0, 0, stem_h])\n                union() {\n                    // Petals\n                    for(i = [0:7]) {\n                        rotate([0, 0, i * 45])\n                            translate([flower_diameter/3, 0, 0])\n                                scale([1, 0.7, 0.3])\n                                sphere(d=flower_diameter);\n                    }\n                    // Center\n                    sphere(d=flower_diameter * 0.6);\n                }\n        }\n}\n\n// Assembly\nflower_stand();\n\n// Position vase on top\ntranslate([0, 0, base_height/2 + leg_height + top_thickness])\n    vase();\n\n// Add flowers in vase\nfor(i = [0:4]) {\n    angle = i * 72;\n    r = vase_top/2 * 0.7;\n    translate([cos(angle) * r, sin(angle) * r, \n              base_height/2 + leg_height + top_thickness + vase_height])\n        rotate([0, 0, angle])\n        flower(stem_height + rand(-3, 3), rand(-10, 10));\n}\n\n// Central tall flower\ntranslate([0, 0, base_height/2 + leg_height + top_thickness + vase_height])\n    flower(stem_height + 8, 0);",
    "renders": true
  },
  {
    "decorative_art": "ceramic_vase",
    "openscad_code": "$fa = 1;\n$fs = 0.4;\n\n// Vase parameters\nvase_height = 120;\nbase_d = 60;\nmid_d = 80;\ntop_d = 40;\nwall_thick = 2;\n\n// Base module\nmodule vase_base() {\n    difference() {\n        cylinder(h=15, d=base_d, $fn=100);\n        translate([0,0,-1])\n            cylinder(h=17, d=base_d-2*wall_thick, $fn=100);\n    }\n}\n\n// Decorative ring pattern\nmodule ring_pattern(height, diameter, count) {\n    step = height / count;\n    for (i=[0:count-1]) {\n        translate([0,0,i*step+step/2])\n            difference() {\n                cylinder(h=step*0.6, d=diameter, $fn=100);\n                translate([0,0,-0.1])\n                    cylinder(h=step*0.8, d=diameter-2*wall_thick, $fn=100);\n            }\n    }\n}\n\n// Curved body using stacked cylinders\nmodule vase_body() {\n    segments = 10;\n    for (i=[0:segments-1]) {\n        h = (vase_height-30)/segments;\n        z = 15 + i*h;\n        t = i/(segments-1);\n        d = base_d + (mid_d-base_d)*sin(t*180);\n        difference() {\n            cylinder(h=h+0.1, d=d, $fn=100);\n            translate([0,0,z-0.1])\n                cylinder(h=h+0.3, d=d-2*wall_thick, $fn=100);\n        }\n    }\n}\n\n// Neck transition\nmodule vase_neck() {\n    segments = 8;\n    for (i=[0:segments-1]) {\n        h = 15/segments;\n        z = vase_height-15 + i*h;\n        t = i/(segments-1);\n        d = mid_d - (mid_d-top_d)*t;\n        difference() {\n            cylinder(h=h+0.1, d=d, $fn=100);\n            translate([0,0,z-0.1])\n                cylinder(h=h+0.3, d=d-2*wall_thick, $fn=100);\n        }\n    }\n}\n\n// Rim detail\nmodule vase_rim() {\n    difference() {\n        cylinder(h=5, d=top_d+6, $fn=100);\n        translate([0,0,-1])\n            cylinder(h=7, d=top_d, $fn=100);\n    }\n}\n\n// Decorative handles\nmodule handles() {\n    handle_width = 20;\n    handle_thick = 4;\n    \n    for (side=[-1,1]) {\n        translate([side*(mid_d/2-5), 0, vase_height/2]) {\n            rotate([0,90,0])\n                difference() {\n                    cylinder(h=handle_width, d=handle_thick, $fn=20);\n                    translate([0,side*handle_width/2,0])\n                        rotate([90,0,0])\n                            cube([handle_thick+1, handle_thick+1, handle_width], center=true);\n                }\n        }\n    }\n}\n\n// Surface texture pattern\nmodule surface_texture() {\n    pattern_height = 1;\n    pattern_depth = 0.5;\n    bands = 3;\n    \n    for (band=[0:bands-1]) {\n        z = 20 + band*(vase_height-40)/bands;\n        for (angle=[0:30:359]) {\n            rotate([0,0,angle])\n                translate([base_d/2-wall_thick, 0, z])\n                    cube([pattern_depth, 2, pattern_height], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    vase_base();\n    vase_body();\n    vase_neck();\n    vase_rim();\n    handles();\n    surface_texture();\n}",
    "renders": true
  },
  {
    "decorative_art": "glass_vase",
    "openscad_code": "// Realistic Glass Vase – OpenSCAD\n// Height ≈ 120 mm, Ø 75 mm, wall thickness 2 mm\n\n$fn = 50; // smooth curves\n\n// overall scale factor for easy resizing\nscale_factor = 1;\n\n// main body shell\nmodule vase_shell(h = 120, r_base = 35, r_mid = 40, r_top = 30){\n    difference(){\n        // outer profile (rotated spline)\n        rotate_extrude(){\n            offset(delta = 0)\n            polygon(points=[\n                [0,0],                 // base center\n                [r_base,0],            // base corner\n                [r_mid, h*0.40],       // widest point\n                [r_top, h*0.85],       // neck start\n                [r_top*0.75, h]        // lip\n            ]);\n        }\n        // inner hollow (offset inward 2 mm)\n        rotate_extrude(){\n            offset(delta = -2)\n            polygon(points=[\n                [0,0],\n                [r_base-2,0],\n                [r_mid-2, h*0.40],\n                [r_top-2, h*0.85],\n                [r_top*0.75-2, h-2]\n            ]);\n        }\n    }\n}\n\n// decorative horizontal ridges spaced every 10 mm\nmodule ridges(h = 120, r_base = 35, r_mid = 40, r_top = 30){\n    for(i=[1:10:h-5]){\n        // radius at height i\n        r = (i < h*0.40) ? r_base + (r_mid - r_base)*(i/(h*0.40)) :\n             (i < h*0.85) ? r_mid + (r_top - r_mid)*((i - h*0.40)/(h*0.45)) :\n             r_top + (r_top*0.75 - r_top)*((i - h*0.85)/(h*0.15));\n        translate([0,0,i])\n            rotate_extrude()\n                polygon(points=[\n                    [r-0.5,0], [r+0.5,0], [r+0.5,2], [r-0.5,2]\n                ]);\n    }\n}\n\n// stable circular base plate (prints flat)\nmodule base_plate(){\n    difference(){\n        cylinder(h=4, r1=38, r2=38, center=false);\n        cylinder(h=4.2, r1=36, r2=36, center=false);\n    }\n}\n\n// simple petal pattern engraved on neck\nmodule petal_engrave(){\n    for(a=[0:30:359]){\n        rotate([0,0,a])\n            translate([r_top-1,0,102])\n                rotate([90,0,0])\n                    cylinder(h=15, r1=2, r2=0.5, $fn=6);\n    }\n}\n\n// assembly\nscale([scale_factor,scale_factor,scale_factor]){\n    union(){\n        base_plate();\n        vase_shell();\n        ridges();\n        petal_engrave();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "bowl",
    "openscad_code": "// Realistic medium-complexity decorative bowl furniture item\n// Wall thickness: 2 mm, printable without supports\n\n$fn = 64;          // Smooth curves\nwall = 2;          // 2 mm wall thickness\nbase_d = 120;      // Base outer diameter (mm)\ntop_d = 160;       // Top outer diameter (mm)\nheight = 80;       // Overall height (mm)\nfoot_h = 8;        // Foot height\nbowl_h = height - foot_h;\n\nmodule bowl_shell() {\n    difference() {\n        // Outer shell\n        cylinder(h = bowl_h, d1 = base_d, d2 = top_d, center = false);\n        \n        // Hollow inside\n        translate([0, 0, wall])\n        cylinder(h = bowl_h - wall, d1 = base_d - 2*wall, d2 = top_d - 2*wall, center = false);\n    }\n}\n\nmodule decorative_rim() {\n    // Top rim with subtle bead\n    translate([0, 0, bowl_h - wall])\n    difference() {\n        cylinder(h = wall*2, d = top_d + 4, center = false);\n        cylinder(h = wall*2 + 0.1, d = top_d, center = false);\n    }\n}\n\nmodule foot_base() {\n    // Stable circular foot with slight taper\n    cylinder(h = foot_h, d1 = base_d + 8, d2 = base_d, center = false);\n}\n\nmodule reinforcement_ring() {\n    // Hidden internal ring for strength\n    translate([0, 0, foot_h + wall])\n    difference() {\n        cylinder(h = 6, d = base_d - 4, center = false);\n        cylinder(h = 6.1, d = base_d - 4 - 2*wall, center = false);\n    }\n}\n\nmodule decorative_pattern() {\n    // Subtle vertical fluting around upper rim\n    for(i = [0:11]) {\n        rotate([0, 0, i*30])\n        translate([top_d/2 - 8, -1.5, bowl_h - 15])\n        cube([4, 3, 15]);\n    }\n}\n\nmodule bowl_assembly() {\n    union() {\n        foot_base();\n        translate([0, 0, foot_h])\n        bowl_shell();\n        decorative_rim();\n        reinforcement_ring();\n        translate([0, 0, bowl_h - 15])\n        decorative_pattern();\n    }\n}\n\n// Main model\nbowl_assembly();",
    "renders": true
  },
  {
    "decorative_art": "decorative_bowl",
    "openscad_code": "// Decorative Bowl - Medium Complexity\n// Realistic style with furniture characteristics\n\n$fn = 50;  // Smooth curves\n\n// Main bowl body\nmodule bowl_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = 40, r1 = 60, r2 = 45, center = false);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n        cylinder(h = 38, r1 = 58, r2 = 43, center = false);\n    }\n}\n\n// Decorative base ring\nmodule base_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h = 8, r1 = 65, r2 = 65, center = false);\n        \n        // Inner cutout\n        translate([0, 0, -0.1])\n        cylinder(h = 8.2, r1 = 60, r2 = 60, center = false);\n    }\n}\n\n// Support legs\nmodule legs() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([50, 0, 0])\n        rotate([0, 15, 0])\n        cube([4, 4, 15], center = true);\n    }\n}\n\n// Decorative rim pattern\nmodule rim_pattern() {\n    for(i = [0:35]) {\n        rotate([0, 0, i * 10])\n        translate([55, 0, 40])\n        cube([2, 3, 2], center = true);\n    }\n}\n\n// Inner texture rings\nmodule texture_rings() {\n    for(i = [1:8]) {\n        translate([0, 0, i * 4])\n        difference() {\n            cylinder(h = 0.5, r1 = 58 - (i * 1.5), r2 = 57 - (i * 1.5), center = false);\n            cylinder(h = 0.5, r1 = 55 - (i * 1.5), r2 = 54 - (i * 1.5), center = false);\n        }\n    }\n}\n\n// Side decorative panels\nmodule side_panels() {\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([40, 0, 20])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h = 15, r1 = 3, r2 = 3, center = true);\n            translate([0, 0, -8])\n            cube([6, 6, 16], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    translate([0, 0, 0])\n    base_ring();\n    \n    // Legs\n    translate([0, 0, 4])\n    legs();\n    \n    // Main bowl\n    translate([0, 0, 15])\n    bowl_body();\n    \n    // Rim decoration\n    translate([0, 0, 0])\n    rim_pattern();\n    \n    // Inner texture\n    translate([0, 0, 15])\n    texture_rings();\n    \n    // Side decorations\n    translate([0, 0, 20])\n    side_panels();\n}",
    "renders": true
  },
  {
    "decorative_art": "platter",
    "openscad_code": "// Realistic Platter Furniture Item - Medium Complexity\n// Decorative serving platter with stand and ornate details\n\n// Overall dimensions\nplatter_diameter = 120;\nplatter_height = 8;\nstand_height = 25;\nbase_diameter = 60;\nwall_thickness = 2;\n\n// Main platter body\nmodule platter_body() {\n    difference() {\n        // Outer platter shape\n        cylinder(h=platter_height, d=platter_diameter, $fn=100);\n        \n        // Hollow center\n        translate([0, 0, -0.1])\n            cylinder(h=platter_height+0.2, d=platter_diameter-wall_thickness*2, $fn=100);\n        \n        // Inner recess for food\n        translate([0, 0, wall_thickness])\n            cylinder(h=platter_height-wall_thickness, d=platter_diameter-wall_thickness*4, $fn=100);\n    }\n}\n\n// Decorative rim pattern\nmodule rim_pattern() {\n    for(i=[0:15:359]) {\n        rotate([0, 0, i])\n            translate([platter_diameter/2-3, 0, platter_height/2])\n                scale([1.5, 0.8, 1])\n                    sphere(d=2, $fn=20);\n    }\n}\n\n// Central decorative medallion\nmodule medallion() {\n    translate([0, 0, wall_thickness+0.1]) {\n        // Base disc\n        cylinder(h=1.5, d=20, $fn=50);\n        \n        // Raised center\n        translate([0, 0, 1.5])\n            cylinder(h=2, d=12, $fn=50);\n        \n        // Top sphere\n        translate([0, 0, 3.5])\n            sphere(d=6, $fn=25);\n    }\n}\n\n// Support stand with three legs\nmodule stand() {\n    // Central column\n    cylinder(h=stand_height-wall_thickness, d=base_diameter/3, $fn=50);\n    \n    // Three decorative legs\n    for(i=[0:120:240]) {\n        rotate([0, 0, i])\n            translate([base_diameter/4, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=stand_height-wall_thickness, d=wall_thickness*2, $fn=20);\n    }\n}\n\n// Base plate\nmodule base() {\n    difference() {\n        cylinder(h=wall_thickness, d=base_diameter, $fn=100);\n        \n        // Decorative cutouts in base\n        for(i=[0:45:315]) {\n            rotate([0, 0, i])\n                translate([base_diameter/3, 0, -0.1])\n                    cube([base_diameter/6, wall_thickness*1.5, wall_thickness+0.2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Platter top\n    platter_body();\n    \n    // Decorative rim\n    rim_pattern();\n    \n    // Central decoration\n    medallion();\n    \n    // Support structure\n    translate([0, 0, -stand_height])\n        union() {\n            stand();\n            translate([0, 0, -wall_thickness])\n                base();\n        }\n}",
    "renders": true
  },
  {
    "decorative_art": "serving_tray",
    "openscad_code": "// Realistic Serving Tray - Medium Complexity\n// Includes decorative edge profile, handles, and bottom ribs for strength\n\n// Overall dimensions\nlength = 140;\nwidth = 90;\nheight = 20;\nwall_thickness = 2;\nhandle_length = 25;\n\n// Decorative edge profile\nmodule edge_profile() {\n    difference() {\n        // Main tray body\n        cube([length, width, height], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, wall_thickness])\n        cube([length - 2*wall_thickness, width - 2*wall_thickness, height], center=true);\n    }\n    \n    // Add decorative top edge chamfer\n    difference() {\n        translate([0, 0, height/2 - 1])\n        cube([length, width, 2], center=true);\n        \n        translate([0, 0, height/2])\n        cube([length - 2*wall_thickness, width - 2*wall_thickness, 2], center=true);\n    }\n}\n\n// Handle module with ergonomic grip\nmodule handle() {\n    // Handle base\n    translate([length/2 - 5, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=handle_length, r1=6, r2=4, center=true);\n    \n    // Handle grip detail\n    translate([length/2 + handle_length/2 - 5, 0, 0])\n    rotate([0, 90, 0])\n    cylinder(h=10, r1=3, r2=3, center=true);\n    \n    // Decorative end cap\n    translate([length/2 + handle_length - 5, 0, 0])\n    sphere(r=4);\n}\n\n// Bottom reinforcement ribs\nmodule ribs() {\n    for(i = [-width/3, 0, width/3]) {\n        translate([0, i, -height/2 + wall_thickness/2])\n        cube([length - 20, wall_thickness, 3], center=true);\n    }\n}\n\n// Corner radius details\nmodule corner_details() {\n    for(x = [-length/2 + 5, length/2 - 5]) {\n        for(y = [-width/2 + 5, width/2 - 5]) {\n            translate([x, y, height/2 - 5])\n            cylinder(h=10, r=3, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main tray\n    edge_profile();\n    \n    // Handles on both ends\n    handle();\n    mirror([1, 0, 0]) handle();\n    \n    // Bottom ribs for strength\n    ribs();\n    \n    // Decorative corner posts\n    corner_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "tray",
    "openscad_code": "// Realistic Medium-Complexity Decorative Serving Tray\n// Overall dimensions: 220mm x 140mm x 25mm (fits on most printers diagonally)\n\n$fn = 32;  // Smooth curves\n\n// Main tray body\nmodule tray_body() {\n    difference() {\n        // Outer tray shell\n        cube([220, 140, 25], center=true);\n        \n        // Hollow out interior with 2mm walls\n        translate([0, 0, 2])\n            cube([216, 136, 25], center=true);\n    }\n}\n\n// Rounded corners using cylinders\nmodule rounded_corners() {\n    // Corner radius 10mm\n    corner_radius = 10;\n    \n    // Bottom corner rounding\n    for (x = [-110, 110])\n        for (y = [-70, 70]) {\n            translate([x, y, 0])\n                cylinder(r=corner_radius, h=2, center=true);\n            \n            // Top corner rounding\n            translate([x, y, 25-2])\n                cylinder(r=corner_radius, h=2, center=true);\n        }\n}\n\n// Side handles\nmodule handles() {\n    module handle() {\n        // Handle grip\n        translate([0, 0, 12.5])\n            rotate([90, 0, 0])\n                difference() {\n                    // Main handle body\n                    translate([0, 0, 15])\n                        cylinder(h=30, r=8);\n                    \n                    // Grip hole\n                    cylinder(h=30, r=5);\n                    \n                    // Finger grooves\n                    for (i = [-2:2])\n                        translate([0, i*5, 0])\n                            cube([2, 3, 30], center=true);\n                }\n        \n        // Mounting bracket\n        translate([0, 0, 12.5])\n            cube([16, 4, 25], center=true);\n    }\n    \n    // Left handle\n    translate([-110-15, 0, 0])\n        handle();\n    \n    // Right handle\n    translate([110+15, 0, 0])\n        mirror([1, 0, 0])\n            handle();\n}\n\n// Decorative bottom pattern\nmodule bottom_pattern() {\n    pattern_spacing = 20;\n    \n    // Diamond pattern grid\n    for (x = [-100:pattern_spacing:100])\n        for (y = [-60:pattern_spacing:60]) {\n            translate([x, y, 0.5])\n                rotate([0, 0, 45])\n                    cube([8, 8, 1], center=true);\n        }\n}\n\n// Raised rim detail\nmodule rim_detail() {\n    // Top rim lip\n    translate([0, 0, 25-1])\n        difference() {\n            cube([220, 140, 2], center=true);\n            cube([216, 136, 2], center=true);\n        }\n    \n    // Interior rim fillet\n    translate([0, 0, 23])\n        difference() {\n            cube([216, 136, 2], center=true);\n            cube([212, 132, 2], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    tray_body();\n    rounded_corners();\n    handles();\n    \n    // Add bottom pattern\n    difference() {\n        translate([0, 0, -12.5])\n            cube([220, 140, 1], center=true);\n        bottom_pattern();\n    }\n    \n    rim_detail();\n}",
    "renders": true
  },
  {
    "decorative_art": "decorative_box",
    "openscad_code": "// Decorative Box - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm x 60mm x 45mm\n\n// Wall thickness\nwall = 2;\n\n// Main box body\nmodule box_body() {\n    difference() {\n        // Outer shell\n        cube([80, 60, 45]);\n        \n        // Inner cavity\n        translate([wall, wall, wall])\n            cube([80-2*wall, 60-2*wall, 45-wall]);\n    }\n}\n\n// Decorative top rim with rounded edges\nmodule top_rim() {\n    translate([0, 0, 45-wall])\n        difference() {\n            // Top frame\n            cube([80, 60, wall]);\n            \n            // Inner cutout\n            translate([wall, wall, 0])\n                cube([80-2*wall, 60-2*wall, wall]);\n            \n            // Rounded corners by subtracting spheres\n            for (x = [wall, 80-wall]) {\n                for (y = [wall, 60-wall]) {\n                    translate([x, y, wall/2])\n                        sphere(r=wall, $fn=8);\n                }\n            }\n        }\n}\n\n// Ornate corner posts\nmodule corner_post(x, y) {\n    translate([x, y, 0]) {\n        // Main post body\n        cylinder(h=45, r=4, $fn=12);\n        \n        // Decorative rings\n        for (h = [10, 20, 30, 40]) {\n            translate([0, 0, h])\n                cylinder(h=2, r=5, $fn=12);\n        }\n    }\n}\n\n// Side panel decorations\nmodule side_decoration() {\n    // Left side pattern\n    for (i = [1:3]) {\n        translate([wall/2, 15*i, 15])\n            rotate([0, 90, 0])\n                cylinder(h=wall, r=3, $fn=6);\n    }\n    \n    // Right side pattern\n    for (i = [1:3]) {\n        translate([80-wall/2, 15*i, 15])\n            rotate([0, 90, 0])\n                cylinder(h=wall, r=3, $fn=6);\n    }\n    \n    // Front pattern\n    for (i = [1:4]) {\n        translate([i*16, wall/2, 15])\n            rotate([90, 0, 0])\n                cylinder(h=wall, r=3, $fn=6);\n    }\n    \n    // Back pattern\n    for (i = [1:4]) {\n        translate([i*16, 60-wall/2, 15])\n            rotate([90, 0, 0])\n                cylinder(h=wall, r=3, $fn=6);\n    }\n}\n\n// Hinge detail on back\nmodule hinge() {\n    translate([20, 60, 40]) {\n        cylinder(h=10, r=2, $fn=8);\n    }\n    translate([60, 60, 40]) {\n        cylinder(h=10, r=2, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    box_body();\n    top_rim();\n    \n    // Corner posts\n    corner_post(4, 4);\n    corner_post(76, 4);\n    corner_post(4, 56);\n    corner_post(76, 56);\n    \n    side_decoration();\n    hinge();\n}",
    "renders": true
  },
  {
    "decorative_art": "jewelry_box",
    "openscad_code": "// Realistic Jewelry Box - Medium Complexity\n// External dimensions: 80mm x 60mm x 45mm\n\n$fn = 50;\n\n// Main parameters\nbox_width = 80;\nbox_depth = 60;\nbox_height = 45;\nwall_thickness = 2;\nlid_clearance = 0.2;\n\n// Base with feet\nmodule box_base() {\n    difference() {\n        // Main base block\n        cube([box_width, box_depth, box_height/4]);\n        \n        // Hollow out interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([box_width-2*wall_thickness, box_depth-2*wall_thickness, box_height/4]);\n        \n        // Decorative base molding\n        for(x = [wall_thickness:10:box_width-wall_thickness]) {\n            translate([x, wall_thickness, box_height/4-3])\n                cube([1, box_depth-2*wall_thickness, 3]);\n        }\n    }\n    \n    // Four feet\n    for(x = [5, box_width-5]) {\n        for(y = [5, box_depth-5]) {\n            translate([x-2, y-2, -3])\n                cylinder(h=3, r1=3, r2=2);\n        }\n    }\n}\n\n// Main body with compartments\nmodule box_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, box_height/4])\n            cube([box_width, box_depth, box_height*3/4]);\n        \n        // Interior cavity\n        translate([wall_thickness, wall_thickness, box_height/4+wall_thickness])\n            cube([box_width-2*wall_thickness, box_depth-2*wall_thickness, box_height*3/4-2*wall_thickness]);\n        \n        // Ring holder slots\n        for(i = [0:3]) {\n            translate([box_width/2-10+i*5, box_depth*2/3, box_height/4+wall_thickness])\n                cube([1, box_depth/3-2*wall_thickness, 10]);\n        }\n    }\n    \n    // Front decorative panel\n    translate([wall_thickness, wall_thickness, box_height/4+wall_thickness])\n        cube([box_width-2*wall_thickness, 3, box_height*3/4-2*wall_thickness]);\n}\n\n// Hinged lid with mirror\nmodule box_lid() {\n    // Lid frame\n    difference() {\n        translate([0, 0, box_height-lid_clearance])\n            cube([box_width, box_depth, box_height/4]);\n        \n        // Hollow lid\n        translate([wall_thickness, wall_thickness, box_height-lid_clearance+wall_thickness])\n            cube([box_width-2*wall_thickness, box_depth-2*wall_thickness, box_height/4-2*wall_thickness]);\n        \n        // Mirror recess\n        translate([wall_thickness*2, wall_thickness*2, box_height-lid_clearance+wall_thickness])\n            cube([box_width-4*wall_thickness, box_depth-4*wall_thickness, 1]);\n    }\n    \n    // Mirror insert\n    translate([wall_thickness*2+0.5, wall_thickness*2+0.5, box_height-lid_clearance+wall_thickness+0.5])\n        cube([box_width-5*wall_thickness, box_depth-5*wall_thickness, 0.5]);\n    \n    // Hinge pins\n    for(y = [box_depth/3, box_depth*2/3]) {\n        translate([box_width/2-2, y, box_height-lid_clearance])\n            cylinder(h=4, r=1.5);\n    }\n}\n\n// Decorative elements\nmodule decorative_details() {\n    // Side panels pattern\n    for(i = [0:2]) {\n        for(j = [0:1]) {\n            translate([wall_thickness+5+i*20, wall_thickness+5+j*20, box_height/4+wall_thickness+2])\n                cube([3, 3, 2]);\n        }\n    }\n    \n    // Front ornament\n    translate([box_width/2, wall_thickness/2, box_height/2])\n        rotate([90, 0, 0])\n        cylinder(h=wall_thickness, r=3);\n    \n    // Top handle\n    translate([box_width/2, box_depth/2, box_height+box_height/4-lid_clearance-3])\n        difference() {\n            cylinder(h=5, r1=8, r2=3);\n            translate([0, 0, 2])\n                cylinder(h=5, r=2);\n        }\n}\n\n// Assembly\nunion() {\n    box_base();\n    box_body();\n    box_lid();\n    decorative_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "keepsake_box",
    "openscad_code": "// Keepsake Box – OpenSCAD\n// Overall size: 80 x 50 x 45 mm  (L x W x H)\n// Wall thickness: 2 mm\n// Hinged lid with lip, decorative feet, corner braces, and front clasp\n\n// Configuration\nbox_l = 80;\nbox_w = 50;\nbox_h = 30;\nlid_h  = 12;\nwall_t = 2;\nfoot_h = 5;\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // outer block\n        cube([box_l, box_w, box_h]);\n        // hollow cavity\n        translate([wall_t, wall_t, wall_t])\n            cube([box_l - 2*wall_t, box_w - 2*wall_t, box_h - wall_t]);\n    }\n}\n\n// Lid with lip and hinge pins\nmodule lid() {\n    difference() {\n        // lid plate\n        translate([0, 0, box_h])\n            cube([box_l, box_w, lid_h]);\n        // recessed top\n        translate([wall_t, wall_t, box_h + wall_t])\n            cube([box_l - 2*wall_t, box_w - 2*wall_t, lid_h - wall_t]);\n    }\n    // lip for alignment\n    translate([wall_t, wall_t, box_h])\n        cube([box_l - 2*wall_t, box_w - 2*wall_t, 1]);\n}\n\n// Ornamental feet (simple ogee-style)\nmodule foot() {\n    difference() {\n        cylinder(h = foot_h, r1 = 4, r2 = 3, $fn = 32);\n        translate([0, 0, -0.1])\n            cylinder(h = foot_h + 0.2, r1 = 1.5, r2 = 1.5, $fn = 32);\n    }\n}\n\n// Corner braces for realism and strength\nmodule corner_brace() {\n    cube([wall_t + 2, wall_t + 2, box_h]);\n}\n\n// Decorative clasp on front\nmodule clasp() {\n    union() {\n        // plate\n        translate([box_l/2 - 4, 0, -0.1])\n            cube([8, 3, 2]);\n        // knob\n        translate([box_l/2, 1.5, 1])\n            sphere(r = 2, $fn = 20);\n    }\n}\n\n// Main assembly\nunion() {\n    // body\n    body_shell();\n\n    // lid\n    lid();\n\n    // four feet\n    for(x = [wall_t + 3, box_l - wall_t - 3])\n        for(y = [wall_t + 3, box_w - wall_t - 3])\n            translate([x, y, -foot_h])\n                foot();\n\n    // four corner braces (subtractive for groove look)\n    difference() {\n        // invisible placeholder to trigger difference\n        translate([0, 0, 0]) cube([0.1, 0.1, 0.1]);\n        for(x = [0, box_l - wall_t - 2])\n            for(y = [0, box_w - wall_t - 2])\n                translate([x, y, 0])\n                    corner_brace();\n    }\n\n    // front clasp\n    translate([0, box_w, box_h + lid_h/2])\n        rotate([90, 0, 0])\n            clasp();\n}",
    "renders": true
  },
  {
    "decorative_art": "trinket_box",
    "openscad_code": "// Realistic trinket box with hinged lid and decorative paneling\n// Outer dimensions: 60 x 40 x 35 mm\n\n$fn = 50;  // Smooth curves\n\nmodule trinket_box() {\n    difference() {\n        union() {\n            // Main body shell\n            body();\n\n            // Hinged lid assembly\n            translate([0, 0, 30])\n            rotate([0, -20, 0])  // Opens 20 degrees for display\n            lid();\n\n            // Decorative feet\n            feet();\n        }\n\n        // Interior cavity\n        translate([5, 5, 5])\n        cube([50, 30, 30], center = false);\n    }\n}\n\nmodule body() {\n    difference() {\n        // Main box frame\n        cube([60, 40, 35], center = false);\n\n        // Rounded top edge\n        translate([2, 2, 33])\n        minkowski() {\n            cube([56, 36, 2], center = false);\n            cylinder(h = 0.5, r = 2);\n        }\n\n        // Decorative panel recesses on sides\n        for (side = [0, 1]) {\n            translate([side ? 58 : 0, 5, 5])\n            rotate([0, side ? 0 : 90, 0])\n            cube([2, 30, 25], center = false);\n        }\n\n        // Front and back panel recesses\n        for (side = [0, 1]) {\n            translate([5, side ? 38 : 0, 5])\n            rotate([90, 0, 0])\n            cube([50, 2, 25], center = false);\n        }\n    }\n\n    // Add decorative raised panels\n    for (x = [10, 30, 50]) {\n        translate([x - 5, 2, 10])\n        cube([10, 36, 15]);\n    }\n\n    // Back hinge supports\n    translate([5, 38, 30])\n    cube([50, 2, 5], center = false);\n}\n\nmodule lid() {\n    difference() {\n        // Lid top\n        translate([0, 0, 0])\n        cube([60, 40, 5], center = false);\n\n        // Rounded top surface\n        translate([2, 2, 5])\n        minkowski() {\n            cube([56, 36, 0.5], center = false);\n            cylinder(h = 0.5, r = 2);\n        }\n\n        // Finger notch for opening\n        translate([25, 0, 2])\n        cube([10, 3, 3], center = false);\n    }\n\n    // Hinge pins\n    translate([2, 38, -2])\n    cylinder(h = 6, r = 2);\n\n    translate([58, 38, -2])\n    cylinder(h = 6, r = 2);\n\n    // Decorative top panel\n    translate([5, 5, 5.5])\n    cube([50, 30, 1], center = false);\n\n    // Ornate corner details\n    for (x = [5, 55]) {\n        for (y = [5, 35]) {\n            translate([x, y, 5.5])\n            cylinder(h = 1, r = 2);\n        }\n    }\n}\n\nmodule feet() {\n    // Four decorative feet\n    for (x = [5, 55]) {\n        for (y = [5, 35]) {\n            translate([x, y, -3])\n            cylinder(h = 3, r = 3);\n\n            // Add stepped detail\n            translate([x, y, -3])\n            cylinder(h = 1, r = 4);\n        }\n    }\n}\n\ntrinket_box();",
    "renders": true
  },
  {
    "decorative_art": "music_box",
    "openscad_code": "// Realistic style music box furniture with medium complexity\n// Dimensions: 80mm x 60mm x 50mm\n\n$fn = 32;\n\n// Main body of the music box\nmodule body() {\n    difference() {\n        // Main box structure\n        cube([80, 60, 40]);\n        \n        // Hollow interior (2mm walls)\n        translate([2, 2, 2])\n            cube([76, 56, 38]);\n    }\n}\n\n// Lid with curved top\nmodule lid() {\n    translate([0, 0, 40]) {\n        difference() {\n            // Main lid base\n            translate([0, 0, 5])\n                cube([80, 60, 6]);\n            \n            // Hollow interior\n            translate([2, 2, 5])\n                cube([76, 56, 6]);\n            \n            // Finger notch for opening\n            translate([35, -1, 5])\n                cube([10, 3, 3]);\n        }\n        \n        // Curved top surface\n        translate([40, 30, 12]) {\n            scale([40, 30, 6])\n                sphere(1);\n        }\n    }\n}\n\n// Piano-style keys decoration\nmodule keys() {\n    translate([15, 2, 0]) {\n        for(i = [0:7]) {\n            translate([i*6, 0, 0]) {\n                // White keys\n                translate([0, 0, 2])\n                    cube([5, 8, 1]);\n                \n                // Black keys (every other)\n                if(i%7 != 2 && i%7 != 5) {\n                    translate([3.5, 0, 3])\n                        cube([3, 6, 2]);\n                }\n            }\n        }\n    }\n}\n\n// Decorative legs\nmodule legs() {\n    for(x = [5, 75]) {\n        for(y = [5, 55]) {\n            translate([x, y, -8]) {\n                cylinder(h=8, r=3);\n            }\n        }\n    }\n}\n\n// Ornate handle on top\nmodule handle() {\n    translate([40, 30, 50]) {\n        // Base\n        cylinder(h=2, r=8);\n        \n        // Handle arch\n        translate([0, 0, 2]) {\n            rotate_extrude(angle=180) {\n                translate([8, 0, 0])\n                    circle(r=2);\n            }\n        }\n    }\n}\n\n// Side decorative panels\nmodule side_panels() {\n    // Left side\n    translate([-1, 30, 20]) {\n        cube([1, 56, 36]);\n    }\n    \n    // Right side\n    translate([80, 30, 20]) {\n        cube([1, 56, 36]);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    lid();\n    keys();\n    legs();\n    handle();\n    side_panels();\n}",
    "renders": true
  },
  {
    "decorative_art": "snow_globe",
    "openscad_code": "// Snow Globe Furniture Piece - Decorative Table Accent\n// Realistic style, medium complexity\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main parameters\nbase_diameter = 80;\nbase_height = 15;\nglobe_diameter = 70;\nglobe_wall = 2;\nscene_height = 25;\ntotal_height = base_height + globe_diameter + 10;\n\n// Base module with furniture-style legs\nmodule decorative_base() {\n    // Main base cylinder\n    difference() {\n        cylinder(h=base_height, d=base_diameter, center=false);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 2])\n            cylinder(h=base_height, d=base_diameter-8, center=false);\n    }\n    \n    // Decorative ring detail\n    translate([0, 0, 10])\n        difference() {\n            cylinder(h=3, d=base_diameter+4, center=false);\n            cylinder(h=3, d=base_diameter-4, center=false);\n        }\n    \n    // Furniture-style bracket legs (4 legs)\n    for (i = [0:90:270]) {\n        rotate([0, 0, i])\n            translate([30, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=12, d=6, center=false);\n    }\n}\n\n// Globe sphere with wall thickness\nmodule glass_globe() {\n    difference() {\n        sphere(d=globe_diameter);\n        sphere(d=globe_diameter - globe_wall*2);\n    }\n}\n\n// Winter scene inside globe\nmodule winter_scene() {\n    // Snow layer\n    translate([0, 0, -globe_diameter/2 + 5])\n        cube([globe_diameter-10, globe_diameter-10, 5], center=true);\n    \n    // Miniature fir tree (furniture-style decorative element)\n    module tree(trunk_h, trunk_d) {\n        color(\"darkgreen\")\n        for (i = [0:4]) {\n            translate([0, 0, i*trunk_h/5])\n                scale([1-i*0.15, 1-i*0.15, 1])\n                    cone(h=trunk_h/5, d1=trunk_d*(1-i*0.2), d2=trunk_d*(1-i*0.1));\n        }\n        // Trunk\n        color(\"brown\")\n        translate([0, 0, 0])\n            cylinder(h=trunk_h/5, d=trunk_d/4, center=false);\n    }\n    \n    // Place trees in scene\n    translate([-15, -15, -globe_diameter/2 + 10])\n        tree(15, 8);\n    translate([15, 10, -globe_diameter/2 + 10])\n        tree(12, 6);\n    translate([0, 15, -globe_diameter/2 + 10])\n        tree(10, 5);\n    \n    // Small decorative bench (furniture element)\n    translate([10, -10, -globe_diameter/2 + 10])\n        rotate([0, 0, 45]) {\n            // Bench seat\n            color(\"brown\")\n            cube([12, 4, 1], center=true);\n            // Bench legs\n            translate([-4, 0, -2])\n                cube([1, 3, 4], center=true);\n            translate([4, 0, -2])\n                cube([1, 3, 4], center=true);\n        }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    decorative_base();\n\ntranslate([0, 0, base_height])\n    glass_globe();\n\ntranslate([0, 0, base_height + globe_diameter/2])\n    winter_scene();\n\n// Decorative cap on top\ntranslate([0, 0, base_height + globe_diameter])\n    difference() {\n        cylinder(h=8, d=20, center=false);\n        cylinder(h=8, d=16, center=false);\n    }",
    "renders": true
  },
  {
    "decorative_art": "hourglass",
    "openscad_code": "// Hourglass Accent Table - Realistic Style\n// Overall dimensions: 120mm diameter, 120mm height, 2mm wall thickness\n\n// Parameters\n$fn = 64;\nwall = 2;\nbase_d = 120;\nbase_h = 15;\nmid_d = 30;\nmid_h = 20;\ntop_d = 100;\ntop_h = 8;\nleg_w = 8;\nleg_h = 70;\nglass_th = 2;\n\n// Decorative rings\nmodule decorative_ring(od, id, h, count, spacing) {\n    for (i = [0:count-1]) {\n        translate([0, 0, i * spacing])\n            difference() {\n                cylinder(d=od, h=h);\n                cylinder(d=id, h=h+0.1, center=true);\n            }\n    }\n}\n\n// Hourglass body\nmodule hourglass_body() {\n    // Lower bulb\n    difference() {\n        union() {\n            cylinder(d=base_d, h=base_h);\n            translate([0, 0, base_h])\n                sphere(d=base_d);\n        }\n        translate([0, 0, -1])\n            cylinder(d=base_d - 2*wall, h=base_h + base_d/2 + 1);\n    }\n    \n    // Neck\n    translate([0, 0, base_h + base_d/2 - mid_h/2])\n        difference() {\n            cylinder(d=mid_d + 2*wall, h=mid_h);\n            cylinder(d=mid_d, h=mid_h + 0.1, center=true);\n        }\n    \n    // Upper bulb\n    translate([0, 0, base_h + base_d/2 + mid_h/2 - top_d/2 + top_h])\n        difference() {\n            sphere(d=top_d);\n            sphere(d=top_d - 2*wall);\n        }\n    \n    // Top rim\n    translate([0, 0, base_h + base_d/2 + mid_h/2 + top_d/2 - top_h])\n        difference() {\n            cylinder(d=top_d + 8, h=top_h);\n            cylinder(d=top_d + 6, h=top_h + 0.1, center=true);\n        }\n}\n\n// Support legs\nmodule legs() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([base_d/2 - leg_w/2 - 5, 0, 0])\n                cube([leg_w, leg_w, leg_h]);\n    }\n}\n\n// Decorative base plate\nmodule base_plate() {\n    difference() {\n        cylinder(d=base_d + 20, h=5);\n        cylinder(d=base_d + 16, h=5.1, center=true);\n    }\n    // Decorative pattern on base\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([base_d/2 + 5, 0, 2.5])\n                cube([10, 3, 5]);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base_plate();\n    \n    // Legs\n    translate([0, 0, 5])\n        legs();\n    \n    // Hourglass\n    translate([0, 0, 5 + leg_h])\n        hourglass_body();\n    \n    // Decorative rings on neck\n    translate([0, 0, 5 + leg_h + base_h + base_d/2 - mid_h/2 - 5])\n        decorative_ring(mid_d + 10, mid_d + 6, 3, 3, 8);\n}",
    "renders": true
  },
  {
    "decorative_art": "pendulum",
    "openscad_code": "// Pendulum Furniture Clock - Decorative Desk Piece\n// Medium complexity realistic style\n\n// Dimensions in mm\nclock_diameter = 80;\nclock_thickness = 12;\npendulum_length = 65;\nbase_width = 100;\nbase_depth = 40;\nbase_height = 8;\nwall_thickness = 2.2;\n\n// Main clock body module\nmodule clock_body() {\n    difference() {\n        // Main clock disk\n        cylinder(h=clock_thickness, d=clock_diameter, $fn=100);\n        \n        // Front recess for clock face\n        translate([0, 0, -0.1])\n            cylinder(h=3, d=clock_diameter-6, $fn=100);\n        \n        // Center hole for pendulum pivot\n        translate([0, 0, -0.1])\n            cylinder(h=clock_thickness+0.2, d=4, $fn=20);\n    }\n}\n\n// Clock face details\nmodule clock_face() {\n    // Face plate\n    translate([0, 0, clock_thickness-2.9])\n        cylinder(h=2.5, d=clock_diameter-6, $fn=100);\n    \n    // Hour markers\n    for(i=[0:11]) {\n        rotate([0, 0, i*30])\n            translate([0, (clock_diameter-12)/2-3, clock_thickness-2.5])\n                cube([2, 6, 2], center=true);\n    }\n    \n    // Center decoration\n    translate([0, 0, clock_thickness-2.5])\n        cylinder(h=2, d=8, $fn=6);\n}\n\n// Decorative pendulum\nmodule pendulum() {\n    // Pivot rod\n    translate([0, 0, clock_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=8, d=3, $fn=12);\n    \n    // Pendulum rod\n    translate([0, -pendulum_length/2-4, clock_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=pendulum_length, d=3, $fn=12);\n    \n    // Pendulum bob\n    translate([0, -pendulum_length-4, clock_thickness/2])\n        sphere(d=12, $fn=30);\n    \n    // Decorative ring on bob\n    translate([0, -pendulum_length-4, clock_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=2, d1=10, d2=12, $fn=30);\n}\n\n// Base with decorative feet\nmodule base() {\n    difference() {\n        // Main base\n        translate([0, 0, -base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Recessed bottom for print quality\n        translate([0, 0, -base_height+1])\n            cube([base_width-4, base_depth-4, 2], center=true);\n    }\n    \n    // Decorative feet\n    foot_pos = [[base_width/2-8, base_depth/2-8], [-base_width/2+8, base_depth/2-8], \n                [base_width/2-8, -base_depth/2+8], [-base_width/2+8, -base_depth/2+8]];\n    \n    for(pos=foot_pos) {\n        translate([pos[0], pos[1], -base_height-1])\n            cylinder(h=3, d=6, $fn=20);\n    }\n}\n\n// Support pillars\nmodule supports() {\n    pillar_pos = [[base_width/2-8, 0], [-base_width/2+8, 0]];\n    \n    for(pos=pillar_pos) {\n        // Main pillar\n        translate([pos[0], pos[1], -base_height/2])\n            cylinder(h=base_height+clock_thickness/2, d=8, $fn=20);\n        \n        // Decorative top cap\n        translate([pos[0], pos[1], clock_thickness/2+1])\n            cylinder(h=3, d=10, $fn=20);\n        \n        // Bottom base\n        translate([pos[0], pos[1], -base_height/2])\n            cylinder(h=3, d=12, $fn=20);\n    }\n}\n\n// Assembly\nbase();\nsupports();\ntranslate([0, 0, base_height/2+clock_thickness/2])\n    union() {\n        clock_body();\n        clock_face();\n        pendulum();\n    }",
    "renders": true
  },
  {
    "decorative_art": "metronome",
    "openscad_code": "// Metronome Furniture Decorative Piece\n// Medium complexity realistic style metronome for 3D printing\n\n// Overall dimensions\nbase_width = 80;\nbase_depth = 40;\ntotal_height = 120;\n\n// Wall thickness for 3D printing\nwall_th = 2;\n\n// Base module with furniture-style feet\nmodule base() {\n    // Main base platform\n    cube([base_width, base_depth, 15], center=true);\n    \n    // Decorative feet\n    for(x = [-30, 30]) {\n        translate([x, -15, -8.5])\n            cube([12, 8, 8], center=true);\n        translate([x, 15, -8.5])\n            cube([12, 8, 8], center=true);\n    }\n    \n    // Beveled top edge\n    translate([0, 0, 7.5])\n        cube([base_width-4, base_depth-4, 2], center=true);\n}\n\n// Main body housing\nmodule body() {\n    // Main housing\n    translate([0, 0, 22.5])\n        cube([60, 30, 60], center=true);\n    \n    // Front panel with decorative frame\n    translate([0, 16, 22.5])\n        cube([56, wall_th, 56], center=true);\n    \n    // Side panels\n    translate([31, 0, 22.5])\n        cube([wall_th, 26, 56], center=true);\n    translate([-31, 0, 22.5])\n        cube([wall_th, 26, 56], center=true);\n}\n\n// Pendulum mechanism\nmodule pendulum() {\n    // Pivot point\n    translate([0, 0, 55])\n        rotate([90, 0, 0])\n            cylinder(h=10, r=4, center=true);\n    \n    // Pendulum rod\n    translate([0, 0, 35])\n        cube([1.5, 1.5, 40], center=true);\n    \n    // Pendulum weight with decorative detail\n    translate([0, 0, 15])\n        difference() {\n            cube([8, 8, 12], center=true);\n            translate([0, 0, 6])\n                cube([6, 6, 10], center=true);\n        }\n    \n    // Counterweight\n    translate([0, 5, 55])\n        sphere(r=3);\n}\n\n// Top decorative cap\nmodule top() {\n    // Main cap\n    translate([0, 0, 82.5])\n        cube([50, 25, 15], center=true);\n    \n    // Decorative finial\n    translate([0, 0, 92.5])\n        cylinder(h=8, r=4);\n    \n    // Crown molding detail\n    translate([0, 0, 90])\n        difference() {\n            cube([46, 21, 4], center=true);\n            cube([42, 17, 5], center=true);\n        }\n}\n\n// Side decorative panels\nmodule side_panels() {\n    for(side = [-1, 1]) {\n        translate([side * 33, 0, 52.5])\n            difference() {\n                cube([4, 26, 50], center=true);\n                for(i = [0:3]) {\n                    translate([0, -10 + i*6, -20 + i*10])\n                        cube([5, 2, 2], center=true);\n                }\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    base();\n    body();\n    top();\n    pendulum();\n    \n    // Decorative elements\n    side_panels();\n    \n    // Front scale markings\n    translate([0, 17, 52.5])\n    for(i = [-4:4]) {\n        translate([i*6, 0, 0])\n            cube([0.5, wall_th, 20 - abs(i)*2], center=true);\n    }\n    \n    // Control knob\n    translate([0, 17, 75])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=4);\n}",
    "renders": true
  },
  {
    "decorative_art": "wind_chime",
    "openscad_code": "// Wind Chime - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm x 80mm x 140mm\n\n// Constants\nwall_thickness = 2;\nrod_diameter = 6;\nrod_length = 60;\ntop_size = 60;\nclapper_size = 12;\nstring_length = 20;\n\n// Main assembly\nmodule wind_chime() {\n    // Top frame structure\n    difference() {\n        // Main top disc\n        cylinder(h=8, d=top_size, $fn=64);\n        \n        // Central hole for hanging loop\n        translate([0, 0, -1])\n            cylinder(h=10, d=8, $fn=32);\n        \n        // String holes for chimes\n        for(i = [0:5]) {\n            rotate([0, 0, i*60])\n                translate([top_size/2 - 10, 0, -1])\n                    cylinder(h=10, d=3, $fn=16);\n        }\n    }\n    \n    // Decorative top ring\n    translate([0, 0, 4])\n        difference() {\n            cylinder(h=4, d=top_size + 8, $fn=64);\n            cylinder(h=6, d=top_size, $fn=64);\n        }\n    \n    // Hanging loop\n    translate([0, 0, 8]) {\n        rotate([90, 0, 0])\n            difference() {\n                torus(4, 20, 2);\n                translate([-20, -5, -20])\n                    cube([40, 10, 40]);\n            }\n    }\n    \n    // Chime rods\n    for(i = [0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([top_size/2 - 10, 0, -rod_length - string_length - 8])\n                chime_rod(rod_length - i*3);\n        }\n    }\n    \n    // Clapper assembly\n    translate([0, 0, -rod_length - string_length - 8 - rod_length/2])\n        clapper();\n    \n    // Support strings\n    for(i = [0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([top_size/2 - 10, 0, -8])\n                cylinder(h=string_length, d=1, $fn=8);\n        }\n    \n    // Clapper strings\n    rotate([0, 0, i*60]) {\n            translate([top_size/2 - 10 - (i*0.5), 0, -rod_length - string_length - 8])\n                cylinder(h=rod_length/2, d=1, $fn=8);\n        }\n    }\n}\n\n// Individual chime rod module\nmodule chime_rod(length) {\n    difference() {\n        // Main rod\n        cylinder(h=length, d=rod_diameter, $fn=32);\n        \n        // Decorative grooves\n        for(j = [1:2:length/8]) {\n            translate([0, 0, j*8])\n                cylinder(h=1, d=rod_diameter + 1, $fn=32);\n        }\n    }\n    \n    // Bottom cap\n    translate([0, 0, -length])\n        sphere(d=rod_diameter + 2, $fn=32);\n}\n\n// Clapper module\nmodule clapper() {\n    difference() {\n        sphere(d=clapper_size, $fn=32);\n        \n        // Decorative pattern\n        for(k = [0:3]) {\n            rotate([0, k*45, 0])\n                translate([0, 0, -clapper_size/2])\n                    cube([clapper_size, 1, clapper_size], center=true);\n        }\n    }\n    \n    // Connection ring\n    translate([0, 0, clapper_size/2])\n        rotate([90, 0, 0])\n            torus(1.5, 4, wall_thickness);\n}\n\n// Helper module for torus\nmodule torus(r1, r2, h) {\n    rotate_extrude()\n        translate([r2, 0, 0])\n            circle(r=r1, $fn=32);\n}\n\n// Render the complete wind chime\nwind_chime();",
    "renders": true
  },
  {
    "decorative_art": "mobile",
    "openscad_code": "// Mobile furniture - Hanging decorative cradle chair with stand\n// Overall dimensions: ~120mm height, ~90mm width, ~90mm depth\n\n$fn = 32;\n\n// Main module\nmodule mobile_cradle_chair() {\n    // Base stand\n    stand();\n    \n    // Overhead mobile ring\n    translate([0, 0, 100]) rotate([0, 0, 45]) mobile_ring();\n    \n    // Hanging cradle chair\n    translate([0, 0, 45]) cradle_chair();\n    \n    // Support ropes\n    translate([0, 0, 100]) support_ropes();\n}\n\n// Stand base with 4 legs\nmodule stand() {\n    // Central pole\n    translate([0, 0, 50]) cylinder(h=100, r=4, center=true);\n    \n    // Four support legs\n    for(i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([30, 0, 5]) cube([60, 6, 10], center=true);\n            translate([60, 0, 0]) cylinder(h=10, r=3, center=true);\n        }\n    }\n    \n    // Base reinforcement ring\n    translate([0, 0, 5]) cylinder(h=8, r1=35, r2=30, center=true);\n}\n\n// Decorative mobile ring with hanging elements\nmodule mobile_ring() {\n    // Main ring\n    difference() {\n        cylinder(h=4, r=40, center=true);\n        translate([0, 0, -1]) cylinder(h=6, r=36, center=true);\n    }\n    \n    // Hanging decorative elements\n    for(i = [0:7]) {\n        rotate([0, 0, i*45]) {\n            translate([38, 0, -8]) sphere(d=6);\n            translate([38, 0, -16]) cube([2, 2, 6], center=true);\n            translate([38, 0, -25]) rotate([0, 90, 0]) cylinder(h=3, r1=3, r2=1, center=true);\n        }\n    }\n}\n\n// Cradle chair basket\nmodule cradle_chair() {\n    // Main basket shell\n    difference() {\n        sphere(d=50);\n        translate([0, 0, -10]) sphere(d=45);\n        translate([0, 0, -30]) cube([70, 70, 40], center=true);\n    }\n    \n    // Basket rim reinforcement\n    translate([0, 0, 15]) difference() {\n        torus(25, 3);\n        translate([0, 0, -3]) cylinder(h=8, r=22, center=true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, -5]) {\n        difference() {\n            sphere(d=45);\n            translate([0, 0, 15]) sphere(d=40);\n        }\n    }\n    \n    // Decorative holes pattern\n    for(i = [0:5]) {\n        rotate([0, 0, i*60]) {\n            translate([15, 0, 0]) cylinder(h=50, r=2, center=true);\n        }\n    }\n}\n\n// Support rope system\nmodule support_ropes() {\n    // Four main ropes\n    for(i = [0:3]) {\n        rotate([0, 0, i*90 + 45]) {\n            translate([25, 0, -55]) cylinder(h=110, r=1, center=true);\n        }\n    }\n    \n    // Central stabilizing rope\n    translate([0, 0, -50]) cylinder(h=100, r=1.5, center=true);\n}\n\n// Helper module for torus\nmodule torus(outer_r, thickness) {\n    rotate_extrude() {\n        translate([outer_r, 0, 0]) circle(r=thickness);\n    }\n}\n\n// Generate the model\nmobile_cradle_chair();",
    "renders": true
  },
  {
    "decorative_art": "wall_hanging",
    "openscad_code": "// Wall-Hanging Corner Shelf Unit\n// Designed for 3D printing - minimal overhangs, 2mm walls\n// Overall size: 100x100x40mm\n\n$fn=32;  // Smooth curves\n\n// Main parameters\nshelf_thickness = 2;\nwall_thickness = 2;\nside_length = 100;\ndepth = 40;\nmount_hole_diameter = 5;\n\nmodule corner_shelf_unit() {\n    // Main L-shaped back panel\n    difference() {\n        union() {\n            // Left vertical panel\n            translate([0, 0, 0])\n                cube([wall_thickness, side_length, depth]);\n            \n            // Bottom horizontal panel\n            translate([0, 0, 0])\n                cube([side_length, wall_thickness, depth]);\n            \n            // Diagonal support brace\n            translate([wall_thickness, wall_thickness, 0])\n                rotate([0, 0, 45])\n                cube([70*sqrt(2), wall_thickness, depth]);\n        }\n        \n        // Mounting holes - 4 holes for wall screws\n        translate([wall_thickness/2, 15, depth/2])\n            rotate([0, 90, 0])\n            cylinder(h=wall_thickness+1, d=mount_hole_diameter);\n            \n        translate([wall_thickness/2, 85, depth/2])\n            rotate([0, 90, 0])\n            cylinder(h=wall_thickness+1, d=mount_hole_diameter);\n            \n        translate([15, wall_thickness/2, depth/2])\n            rotate([90, 0, 0])\n            cylinder(h=wall_thickness+1, d=mount_hole_diameter);\n            \n        translate([85, wall_thickness/2, depth/2])\n            rotate([90, 0, 0])\n            cylinder(h=wall_thickness+1, d=mount_hole_diameter);\n    }\n    \n    // Three display shelves at different heights\n    for(h = [10, 25, 38]) {\n        translate([wall_thickness, wall_thickness, h])\n            cube([side_length-2*wall_thickness, side_length-2*wall_thickness, shelf_thickness]);\n    }\n    \n    // Decorative front frame pieces\n    // Top frame\n    translate([wall_thickness, side_length-wall_thickness, depth-wall_thickness])\n        cube([side_length-2*wall_thickness, wall_thickness, wall_thickness]);\n    \n    // Side frame\n    translate([side_length-wall_thickness, wall_thickness, depth-wall_thickness])\n        cube([wall_thickness, side_length-2*wall_thickness, wall_thickness]);\n    \n    // Decorative circles on shelves\n    for(x = [20, 50, 80]) {\n        for(y = [20, 50, 80]) {\n            translate([x, y, 38+shelf_thickness/2])\n                cylinder(h=shelf_thickness+0.1, d=8);\n        }\n    }\n    \n    // Small support brackets under each shelf\n    for(pos = [[wall_thickness, 30], [30, wall_thickness], [70, wall_thickness], [wall_thickness, 70]]) {\n        translate([pos[0], pos[1], 8])\n            cube([10, 10, 2]);\n    }\n}\n\ncorner_shelf_unit();",
    "renders": true
  },
  {
    "decorative_art": "tapestry",
    "openscad_code": "// Tapestry Wall Hanging Frame\n// Dimensions: 100mm wide x 80mm tall x 12mm deep\n\n// Wall thickness constant\nwall_thickness = 2;\n\n// Overall dimensions\nwidth = 100;\nheight = 80;\ndepth = 12;\n\n// Frame profile dimensions\nframe_width = 6;\nframe_depth = depth;\n\n// Textile pattern parameters\npattern_rows = 8;\npattern_cols = 10;\npattern_block_size = (width - 2*frame_width) / pattern_cols;\n\n// Mounting hardware size\nmount_hole_diameter = 4;\nmount_hole_depth = 3;\n\n// Main frame module\nmodule frame() {\n    // Top frame bar\n    translate([-width/2, height/2 - frame_width, 0])\n        cube([width, frame_width, frame_depth]);\n    \n    // Bottom frame bar\n    translate([-width/2, -height/2, 0])\n        cube([width, frame_width, frame_depth]);\n    \n    // Left frame bar\n    translate([-width/2, -height/2 + frame_width, 0])\n        cube([frame_width, height - 2*frame_width, frame_depth]);\n    \n    // Right frame bar\n    translate([width/2 - frame_width, -height/2 + frame_width, 0])\n        cube([frame_width, height - 2*frame_width, frame_depth]);\n}\n\n// Decorative tapestry pattern module\nmodule tapestry_pattern() {\n    for (row = [0:pattern_rows-1]) {\n        for (col = [0:pattern_cols-1]) {\n            // Calculate position\n            x_pos = -width/2 + frame_width + col * pattern_block_size + pattern_block_size/2;\n            y_pos = -height/2 + frame_width + row * pattern_block_size + pattern_block_size/2;\n            \n            // Create alternating raised pattern blocks\n            if ((row + col) % 2 == 0) {\n                translate([x_pos, y_pos, 1])\n                    cube([pattern_block_size - 1, pattern_block_size - 1, 1], center=true);\n            } else {\n                translate([x_pos, y_pos, 0.5])\n                    cube([pattern_block_size - 2, pattern_block_size - 2, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Back panel for structure\nmodule back_panel() {\n    translate([-width/2 + wall_thickness, -height/2 + wall_thickness + frame_width, 0])\n        cube([width - 2*wall_thickness, height - 2*frame_width - 2*wall_thickness, wall_thickness]);\n}\n\n// Mounting holes for wall hanging\nmodule mounting_holes() {\n    // Top mounting holes\n    translate([-width/3, height/2 - frame_width/2, frame_depth - mount_hole_depth/2])\n        rotate([90, 0, 0])\n            cylinder(h=mount_hole_depth, d=mount_hole_diameter, $fn=16);\n    \n    translate([width/3, height/2 - frame_width/2, frame_depth - mount_hole_depth/2])\n        rotate([90, 0, 0])\n            cylinder(h=mount_hole_depth, d=mount_hole_diameter, $fn=16);\n}\n\n// Assembly\nunion() {\n    // Frame structure\n    frame();\n    \n    // Back panel for stability\n    back_panel();\n    \n    // Tapestry decorative surface\n    translate([0, 0, wall_thickness])\n        tapestry_pattern();\n    \n    // Remove mounting holes\n    difference() {\n        // This empty union keeps the mounting holes as holes\n        union();\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "bead_curtain",
    "openscad_code": "// Bead Curtain - Realistic Style, Medium Complexity\n// Overall dimensions: 100mm wide x 120mm tall x 20mm deep\n\n// Parameters\nbead_diameter = 6;\nbead_spacing = 8;\nstring_thickness = 1.5;\nstring_length = 90;\ntop_bar_height = 8;\ntop_bar_width = 100;\ntop_bar_depth = 12;\nframe_thickness = 3;\nside_pillar_width = 5;\nside_pillar_depth = 15;\n\n// Main module\nmodule bead_curtain() {\n    // Top bar with decorative molding\n    difference() {\n        // Main top bar\n        cube([top_bar_width, top_bar_depth, top_bar_height], center=true);\n        // Decorative groove on front face\n        translate([0, top_bar_depth/2 - 1, 0])\n            cube([top_bar_width - 10, 2, top_bar_height - 2], center=true);\n    }\n    \n    // Side pillars\n    translate([-top_bar_width/2 + side_pillar_width/2, 0, -string_length/2 - top_bar_height/2])\n        cube([side_pillar_width, side_pillar_depth, string_length + top_bar_height], center=true);\n    translate([top_bar_width/2 - side_pillar_width/2, 0, -string_length/2 - top_bar_height/2])\n        cube([side_pillar_width, side_pillar_depth, string_length + top_bar_height], center=true);\n    \n    // Bottom bar\n    translate([0, 0, -string_length - top_bar_height/2])\n        cube([top_bar_width - 10, top_bar_depth/1.5, 6], center=true);\n    \n    // Bead strings\n    for(x = [-top_bar_width/2 + 10 : bead_spacing : top_bar_width/2 - 10]) {\n        // String\n        translate([x, 0, -string_length/2 - top_bar_height/2])\n            cylinder(h=string_length, r=string_thickness/2, center=true);\n        \n        // Beads on string\n        for(z = [-string_length/2 + bead_diameter : bead_diameter*1.5 : string_length/2 - bead_diameter]) {\n            translate([x, 0, z - top_bar_height/2])\n                sphere(d=bead_diameter);\n        }\n    }\n    \n    // Decorative end caps\n    translate([-top_bar_width/2 + 2, 0, top_bar_height/2])\n        cylinder(h=4, r=4, center=true);\n    translate([top_bar_width/2 - 2, 0, top_bar_height/2])\n        cylinder(h=4, r=4, center=true);\n    \n    // Small decorative spheres on top bar\n    for(x = [-top_bar_width/2 + 15 : 10 : top_bar_width/2 - 15]) {\n        translate([x, top_bar_depth/2 - 2, top_bar_height/2 + 1])\n            sphere(d=3);\n    }\n}\n\n// Render the bead curtain\nbead_curtain();",
    "renders": true
  },
  {
    "decorative_art": "decorative_mask",
    "openscad_code": "// Decorative Mask Furniture Item\n// A stylized African-inspired mask designed as a wall-mounted art piece\n\n// Global parameters\nmask_width = 80;\nmask_height = 100;\nwall_thickness = 2;\nmount_depth = 15;\n\n// Main mask module\nmodule decorative_mask() {\n    // Back mounting plate\n    translate([0, 0, -mount_depth/2]) {\n        cube([mask_width + 20, mask_height + 20, wall_thickness], center=true);\n    }\n    \n    // Main face structure\n    translate([0, 0, 0]) {\n        difference() {\n            // Base face shape\n            scale([1, 1.2, 0.8]) {\n                sphere(d=mask_width);\n            }\n            \n            // Hollow out the back\n            translate([0, 0, -5]) {\n                scale([0.9, 1.1, 0.7]) {\n                    sphere(d=mask_width - 10);\n                }\n            }\n        }\n    }\n    \n    // Forehead decorative band\n    translate([0, 25, 18]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=5, d1=mask_width - 10, d2=mask_width - 15, center=true);\n        }\n    }\n    \n    // Eye sockets\n    for(x = [-20, 20]) {\n        translate([x, 10, 15]) {\n            rotate([0, 10, 0]) {\n                scale([1, 0.8, 0.5]) {\n                    sphere(d=15);\n                }\n            }\n        }\n    }\n    \n    // Eye details\n    for(x = [-20, 20]) {\n        translate([x, 10, 15]) {\n            sphere(d=8);\n        }\n    }\n    \n    // Nose bridge\n    translate([0, -5, 12]) {\n        rotate([20, 0, 0]) {\n            cylinder(h=15, d1=8, d2=12);\n        }\n    }\n    \n    // Nostrils\n    for(x = [-5, 5]) {\n        translate([x, -12, 10]) {\n            rotate([45, 0, 0]) {\n                cylinder(h=5, d=3);\n            }\n        }\n    }\n    \n    // Mouth opening\n    translate([0, -25, 8]) {\n        rotate([30, 0, 0]) {\n            scale([1.5, 0.5, 1]) {\n                cylinder(h=10, d=20);\n            }\n        }\n    }\n    \n    // Decorative cheek patterns\n    for(angle = [30:60:330]) {\n        translate([0, 0, 0]) {\n            rotate([0, 0, angle]) {\n                translate([30, 5, 12]) {\n                    cylinder(h=3, d=8);\n                }\n            }\n        }\n    }\n    \n    // Tribal scarification details\n    for(i = [1:3]) {\n        translate([15, 20 - i*10, 18]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=2, d=15);\n            }\n        }\n        translate([-15, 20 - i*10, 18]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=2, d=15);\n            }\n        }\n    }\n    \n    // Mounting holes\n    for(x = [-30, 30]) {\n        for(y = [-40, 40]) {\n            translate([x, y, -mount_depth/2]) {\n                cylinder(h=wall_thickness + 1, d=4);\n            }\n        }\n    }\n    \n    // Decorative frame edge\n    translate([0, 0, -mount_depth/2 + wall_thickness/2]) {\n        cube([mask_width + 22, mask_height + 22, wall_thickness], center=true);\n    }\n    translate([0, 0, -mount_depth/2 + wall_thickness/2]) {\n        cube([mask_width + 18, mask_height + 18, wall_thickness + 2], center=true);\n    }\n}\n\n// Generate the model\ndecorative_mask();",
    "renders": true
  },
  {
    "decorative_art": "tribal_mask",
    "openscad_code": "// Tribal Mask Wall Hook / Decorative Panel\n// Dimensions: 120mm wide x 160mm tall x 25mm deep\n// Wall mountable with two keyhole slots\n\nmodule keyhole_slot() {\n    // Keyhole slot for wall mounting\n    difference() {\n        cylinder(h=3, d=8, $fn=20);\n        translate([0,-4,0]) cube([3,8,3], center=true);\n    }\n}\n\nmodule eyebrow() {\n    // Curved eyebrow ridge\n    difference() {\n        scale([1,0.3,0.4]) sphere(d=25, $fn=32);\n        translate([0,-5,5]) cube([30,15,15], center=true);\n    }\n}\n\nmodule nose() {\n    // Tribal nose bridge with nostrils\n    union() {\n        // Main nose bridge\n        translate([0,-20,0]) scale([0.8,1.2,1]) cube([15,25,15], center=true);\n        \n        // Nostrils\n        for(x=[-4,4]) {\n            translate([x,-30,-2]) \n                rotate([90,0,0]) \n                    cylinder(h=8, d1=4, d2=2, $fn=12);\n        }\n    }\n}\n\nmodule mouth_pattern() {\n    // Tribal mouth with geometric pattern\n    difference() {\n        // Mouth opening\n        translate([0,-45,-8]) \n            rotate([10,0,0]) \n                cube([35,12,15], center=true);\n        \n        // Teeth pattern\n        for(i=[-2:1:2]) {\n            translate([i*6,-45,-5]) \n                cube([3,10,8], center=true);\n        }\n    }\n}\n\nmodule cheek_spiral() {\n    // Spiral cheek decoration\n    for(i=[0:30:360]) {\n        rotate([0,0,i]) \n            translate([10,0,0]) \n                sphere(d=2, $fn=8);\n    }\n}\n\nmodule forehead_pattern() {\n    // Geometric forehead decoration\n    for(y=[10:8:30]) {\n        for(x=[-15:10:15]) {\n            translate([x,y,2]) \n                rotate([45,0,45]) \n                    cube([4,4,2], center=true);\n        }\n    }\n}\n\nmodule ear_hook() {\n    // Hook shaped like tribal ear\n    difference() {\n        // Main ear shape\n        translate([0,0,0]) \n            rotate([0,90,0]) \n                cylinder(h=15, d1=12, d2=8, $fn=16);\n        \n        // Inner cutout\n        translate([0,0,-2]) \n            rotate([0,90,0]) \n                cylinder(h=19, d1=8, d2=4, $fn=16);\n    }\n}\n\n// Main mask body\ndifference() {\n    // Base mask shape\n    union() {\n        // Main face oval\n        scale([1,1.3,0.5]) sphere(d=100, $fn=64);\n        \n        // Forehead extension\n        translate([0,30,10]) \n            scale([0.9,0.6,0.4]) sphere(d=80, $fn=32);\n    }\n    \n    // Eye holes\n    for(x=[-25,25]) {\n        translate([x,15,5]) \n            scale([1,1.2,1]) sphere(d=20, $fn=32);\n    }\n}\n\n// Facial features\ntranslate([0,20,8]) eyebrow();\ntranslate([0,20,8]) mirror([1,0,0]) eyebrow();\ntranslate([0,-5,5]) nose();\ntranslate([0,-15,0]) mouth_pattern();\n\n// Decorative elements\ntranslate([-35,-10,5]) cheek_spiral();\ntranslate([35,-10,5]) mirror([-1,1,1]) cheek_spiral();\ntranslate([0,40,12]) forehead_pattern();\n\n// Structural ears with hooks\ntranslate([-45,-10,-5]) ear_hook();\ntranslate([45,-10,-5]) mirror([-1,1,1]) ear_hook();\n\n// Wall mounting plates\ntranslate([-30,50,0]) keyhole_slot();\ntranslate([30,50,0]) keyhole_slot();\n\n// Back reinforcement ribs\nfor(x=[-20:20:20]) {\n    translate([x,0,-12]) cube([3,100,4], center=true);\n}",
    "renders": true
  },
  {
    "decorative_art": "carved_figure",
    "openscad_code": "// Carved Figure - Decorative Furniture Element\n// A realistic-style carved wooden figure suitable as a furniture accent piece\n\n$fn = 32; // Smooth curves for realistic appearance\nwall_thickness = 2; // 3D printing friendly\n\n// Main body - stylized human torso shape\nmodule torso() {\n    difference() {\n        // Main torso form\n        scale([1, 0.6, 1.2])\n        sphere(d = 40);\n        \n        // Hollow interior\n        translate([0, 0, -5])\n        scale([0.85, 0.85, 0.9])\n        sphere(d = 38);\n    }\n}\n\n// Head with carved facial features\nmodule head() {\n    difference() {\n        // Basic head shape\n        translate([0, 0, 28])\n        sphere(d = 25);\n        \n        // Eye sockets (carved hollows)\n        for (x = [-6, 6]) {\n            translate([x, 8, 28])\n            rotate([0, 15, 0])\n            scale([1, 1.5, 0.5])\n            sphere(d = 5);\n        }\n        \n        // Mouth indentation\n        translate([0, 12, 22])\n        rotate([90, 0, 0])\n        cylinder(h = 8, d1 = 8, d2 = 5);\n    }\n    \n    // Nose ridge\n    translate([0, 3, 28])\n    scale([1.5, 1, 3])\n    sphere(d = 5);\n}\n\n// Ornate base with carved patterns\nmodule base() {\n    // Main base cylinder\n    difference() {\n        cylinder(h = 12, d = 45);\n        \n        // Hollow center\n        translate([0, 0, -1])\n        cylinder(h = 14, d = 41);\n    }\n    \n    // Decorative carved rings\n    for (i = [1:3]) {\n        translate([0, 0, i * 3])\n        difference() {\n            cylinder(h = 1.5, d = 48 - i * 2);\n            cylinder(h = 2, d = 46 - i * 2);\n        }\n    }\n    \n    // Leaf pattern carvings around base\n    for (angle = [0:30:330]) {\n        rotate([0, 0, angle])\n        translate([20, 0, 6])\n        rotate([90, 0, 0])\n        scale([0.3, 1, 0.5])\n        cylinder(h = 8, d1 = 6, d2 = 2);\n    }\n}\n\n// Arms with folded position\nmodule arms() {\n    // Left arm\n    translate([-12, 8, 15])\n    rotate([0, -20, -30])\n    scale([1, 1, 1.2])\n    difference() {\n        sphere(d = 12);\n        translate([3, 0, 0])\n        sphere(d = 11);\n    }\n    \n    // Right arm (mirrored)\n    translate([12, 8, 15])\n    rotate([0, 20, 30])\n    scale([-1, 1, 1.2])\n    difference() {\n        sphere(d = 12);\n        translate([3, 0, 0])\n        sphere(d = 11);\n    }\n}\n\n// Decorative collar/shoulder detail\nmodule collar() {\n    translate([0, 0, 18])\n    difference() {\n        cylinder(h = 8, d = 35);\n        cylinder(h = 9, d = 30);\n    }\n    \n    // Carved notches around collar\n    for (i = [0:20:340]) {\n        rotate([0, 0, i])\n        translate([15, 0, 18])\n        cube([3, 2, 8]);\n    }\n}\n\n// Hair/headdress with carved texture\nmodule hair() {\n    translate([0, 0, 35])\n    difference() {\n        sphere(d = 28);\n        translate([0, 0, -5])\n        sphere(d = 24);\n    }\n    \n    // Carved texture lines\n    for (angle = [0:20:340]) {\n        rotate([0, 0, angle])\n        translate([0, 12, 40])\n        rotate([90, 0, 0])\n        cylinder(h = 10, d = 1);\n    }\n}\n\n// Assembly of all parts\nunion() {\n    base();\n    \n    translate([0, 0, 12])\n    union() {\n        torso();\n        head();\n        arms();\n        collar();\n        hair();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "wooden_sculpture",
    "openscad_code": "// Wooden Sculpture - Artistic Side Table\n// Medium complexity decorative furniture piece\n\n// Overall dimensions\ntable_height = 80;\ntable_top_d = 120;\nleg_thickness = 6;\nwall_thickness = 2.5;\n\nmodule leg_profile(h=table_height) {\n    // Main leg structure with artistic carving\n    difference() {\n        // Main leg\n        cylinder(h=h, d1=20, d2=15, $fn=20);\n        \n        // Carved grooves\n        for(i=[0:30:h]) {\n            translate([0, 0, i])\n                cylinder(h=5, d1=18, d2=13, $fn=20);\n        }\n        \n        // Side notches for aesthetic\n        for(angle=[0:120:359]) {\n            rotate([0, 0, angle])\n                translate([10, 0, h/2])\n                    cube([20, 3, h/3], center=true);\n        }\n    }\n}\n\nmodule decorative_joint() {\n    // Artistic joint connector\n    union() {\n        // Main sphere joint\n        sphere(d=16, $fn=32);\n        \n        // Decorative rings\n        for(i=[-6:3:6]) {\n            rotate([90, 0, 0])\n                translate([0, 0, i])\n                    rotate_extrude($fn=32)\n                        translate([7, 0, 0])\n                            circle(d=2);\n        }\n    }\n}\n\nmodule table_top() {\n    // Circular top with edge detail\n    difference() {\n        // Main top\n        cylinder(h=8, d=table_top_d, $fn=64);\n        \n        // Slight depression for aesthetics\n        translate([0, 0, 2])\n            cylinder(h=1, d=table_top_d-4, $fn=64);\n        \n        // Decorative edge pattern\n        for(i=[0:15:359]) {\n            rotate([0, 0, i])\n                translate([table_top_d/2 - 4, 0, 4])\n                    cube([8, 2, 4], center=true);\n        }\n    }\n}\n\nmodule support_ring() {\n    // Lower support structure\n    difference() {\n        // Main ring\n        cylinder(h=6, d=table_top_d * 0.7, $fn=64);\n        \n        // Inner cutout\n        cylinder(h=6, d=table_top_d * 0.7 - 8, $fn=64);\n        \n        // Decorative cutouts\n        for(i=[0:45:359]) {\n            rotate([0, 0, i])\n                translate([table_top_d * 0.35 - 4, 0, 2])\n                    cube([8, 3, 6], center=true);\n        }\n    }\n}\n\nmodule stretcher() {\n    // Cross stretcher between legs\n    hull() {\n        sphere(d=8, $fn=16);\n        translate([30, 0, 0])\n            sphere(d=8, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Table top\n    translate([0, 0, table_height])\n        table_top();\n    \n    // Legs\n    for(angle=[45:90:315]) {\n        rotate([0, 0, angle])\n            translate([table_top_d/2 * 0.65, 0, 0])\n                leg_profile();\n    }\n    \n    // Decorative joints at leg tops\n    for(angle=[45:90:315]) {\n        rotate([0, 0, angle])\n            translate([table_top_d/2 * 0.65, 0, table_height - 4])\n                decorative_joint();\n    }\n    \n    // Support ring\n    translate([0, 0, table_height/3])\n        support_ring();\n    \n    // Stretchers between legs\n    for(angle=[45:90:315]) {\n        rotate([0, 0, angle])\n            translate([table_top_d/2 * 0.5, 0, table_height/2])\n                rotate([90, 0, 0])\n                    stretcher();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "bronze_sculpture",
    "openscad_code": "// Bronze Sculpture Coffee Table\n// Realistic style, medium complexity\n// Overall dimensions: 120mm (L) x 60mm (W) x 45mm (H)\n\n// Base parameters\nbase_length = 120;\nbase_width = 60;\nbase_height = 45;\nwall_thickness = 2;\n\n// Decorative patterns\npattern_spacing = 8;\npattern_depth = 1.5;\n\nmodule leg_support() {\n    // Central support column\n    cylinder(h=35, d1=8, d2=12, $fn=8);\n    \n    // Base foot\n    translate([0,0,35])\n        cylinder(h=4, d=16, $fn=8);\n}\n\nmodule decorative_pattern() {\n    // Raised relief pattern\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n            translate([0,20,0])\n                scale([1,0.3,1])\n                    sphere(d=6, $fn=6);\n    }\n}\n\nmodule bronze_table_top() {\n    // Main table surface with bronze patina effect\n    difference() {\n        // Main top\n        translate([0,0,39])\n            cube([base_length-4, base_width-4, 6], center=true);\n        \n        // Inner cavity for 3D printing\n        translate([0,0,39])\n            cube([base_length-8, base_width-8, 4], center=true);\n        \n        // Decorative grooves\n        for(x=[-50:pattern_spacing:50]) {\n            translate([x,0,42])\n                cube([1,base_width-6,pattern_depth], center=true);\n        }\n    }\n    \n    // Rounded edges\n    translate([0,0,42])\n        difference() {\n            minkowski() {\n                cube([base_length-4, base_width-4, 0.1], center=true);\n                cylinder(h=0.1, r=2, $fn=16);\n            }\n            cube([base_length, base_width, 2], center=true);\n        }\n}\n\nmodule bronze_base() {\n    // Four legs with bronze texture\n    for(x=[-40,40]) {\n        for(y=[-20,20]) {\n            translate([x,y,0]) {\n                leg_support();\n                \n                // Decorative ring\n                translate([0,0,30])\n                    cylinder(h=2, d=14, $fn=12);\n                \n                // Bronze rivet details\n                for(angle=[0:120:240]) {\n                    rotate([0,0,angle])\n                        translate([5,0,32])\n                            sphere(d=3, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Cross support beams\n    for(x=[-30:15:30]) {\n        translate([x,0,20])\n            rotate([90,0,0])\n                cylinder(h=base_width-10, d=4, $fn=8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Bronze base structure\n    bronze_base();\n    \n    // Table top\n    bronze_table_top();\n    \n    // Central bronze medallion\n    translate([0,0,44])\n        difference() {\n            cylinder(h=3, d=30, $fn=32);\n            translate([0,0,-0.1])\n                cylinder(h=3.2, d=26, $fn=32);\n            decorative_pattern();\n        }\n    \n    // Corner reinforcements\n    for(x=[-50,50]) {\n        for(y=[-25,25]) {\n            translate([x,y,37])\n                cube([6,6,4], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "marble_bust",
    "openscad_code": "// Marble Bust Furniture Item - Realistic Style\n// Dimensions: 120mm height, 80mm width, 60mm depth\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule bust_base() {\n    // Decorative pedestal base\n    difference() {\n        cylinder(h = 15, r1 = 35, r2 = 30);\n        translate([0, 0, -1])\n            cylinder(h = 17, r1 = 33, r2 = 28);\n    }\n    \n    // Base molding detail\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([25, 0, 12])\n                cube([10, 3, 5], center = true);\n    }\n}\n\nmodule torso() {\n    // Main torso section with taper\n    difference() {\n        cylinder(h = 45, r1 = 28, r2 = 22);\n        translate([0, 0, -1])\n            cylinder(h = 47, r1 = 26, r2 = 20);\n    }\n    \n    // Chest detail lines\n    for(i = [1:3]) {\n        translate([0, 0, i * 12])\n            difference() {\n                cylinder(h = 1, r = 25 - (i * 1.5));\n                translate([0, 0, -0.5])\n                    cylinder(h = 2, r = 23 - (i * 1.5));\n            }\n    }\n}\n\nmodule shoulders() {\n    // Shoulder blocks\n    translate([0, 0, 48]) {\n        // Left shoulder\n        translate([-25, 0, 0])\n            rotate([0, 20, 10])\n                cube([20, 15, 25], center = true);\n        \n        // Right shoulder\n        translate([25, 0, 0])\n            rotate([0, -20, -10])\n                cube([20, 15, 25], center = true);\n    }\n}\n\nmodule neck() {\n    // Tapered neck\n    difference() {\n        cylinder(h = 15, r1 = 12, r2 = 8);\n        translate([0, 0, -1])\n            cylinder(h = 17, r1 = 10, r2 = 6);\n    }\n}\n\nmodule head() {\n    // Main head sphere\n    difference() {\n        sphere(r = 22);\n        translate([0, 0, -12])\n            sphere(r = 20);\n    }\n    \n    // Jaw/chin area\n    translate([0, -5, -15])\n        rotate([10, 0, 0])\n            scale([1, 1.2, 0.8])\n                sphere(r = 18);\n}\n\nmodule facial_features() {\n    // Nose\n    translate([0, -18, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 12, r1 = 4, r2 = 2);\n    \n    // Eye sockets (subtle indentations)\n    for(x = [-8, 8]) {\n        translate([x, -15, 5])\n            sphere(r = 3);\n    }\n    \n    // Mouth line\n    translate([0, -20, -5])\n        cube([12, 1, 2], center = true);\n}\n\nmodule hair_detail() {\n    // Hair waves at back\n    for(i = [0:4]) {\n        rotate([0, 0, i * 15 - 30])\n            translate([0, 15, 5])\n                rotate([90, 0, 0])\n                    cylinder(h = 25, r1 = 6, r2 = 4);\n    }\n    \n    // Sideburns\n    for(x = [-20, 20]) {\n        translate([x, -10, -8])\n            rotate([0, 20 * (x > 0 ? -1 : 1), 0])\n                cube([3, 3, 15]);\n    }\n}\n\nmodule structural_supports() {\n    // Internal support columns for 3D printing\n    translate([0, 0, 7.5])\n        cylinder(h = 15, r = 3);\n    \n    translate([0, 0, 40])\n        cylinder(h = 45, r = 2);\n}\n\n// Main assembly\nunion() {\n    // Structural supports (hidden)\n    structural_supports();\n    \n    // Visible furniture piece\n    union() {\n        bust_base();\n        \n        translate([0, 0, 15])\n            torso();\n        \n        shoulders();\n        \n        translate([0, 0, 63])\n            neck();\n        \n        translate([0, 0, 78])\n            head();\n        \n        translate([0, 0, 78])\n            facial_features();\n        \n        translate([0, 0, 78])\n            hair_detail();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "crystal",
    "openscad_code": "// Crystal Side Table\n// A decorative crystal-shaped side table with hexagonal facets and structural support\n\n$fn = 36;  // Higher resolution for smoother curves\n\n// Overall dimensions\ntable_height = 80;\ntable_top_diameter = 60;\nbase_diameter = 40;\nwall_thickness = 2;\n\nmodule crystal_table() {\n    // Main crystal structure\n    difference() {\n        // Outer crystal shape\n        union() {\n            // Lower crystal (larger facets)\n            translate([0, 0, 0])\n                crystal_base();\n            \n            // Upper crystal (smaller facets)\n            translate([0, 0, table_height * 0.6])\n                crystal_top();\n        }\n        \n        // Hollow out interior for 3D printing\n        translate([0, 0, -5])\n            scale([0.92, 0.92, 0.92])\n            union() {\n                translate([0, 0, 5])\n                    crystal_base();\n                translate([0, 0, table_height * 0.6])\n                    crystal_top();\n            }\n    }\n    \n    // Table top surface\n    translate([0, 0, table_height - 2])\n        table_surface();\n    \n    // Structural support ring\n    translate([0, 0, table_height * 0.3])\n        support_ring();\n}\n\nmodule crystal_base() {\n    // Create 6-sided crystal base with beveled edges\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([0, 0, 0])\n                union() {\n                    // Main facet\n                    translate([base_diameter/2 * 0.8, 0, table_height * 0.3])\n                        cube([base_diameter/2, wall_thickness, table_height * 0.6], center=true);\n                    \n                    // Beveled edge\n                    rotate([45, 0, 0])\n                        translate([base_diameter/2 * 0.7, 0, table_height * 0.2])\n                            cube([base_diameter/3, wall_thickness, table_height * 0.4], center=true);\n                }\n    }\n}\n\nmodule crystal_top() {\n    // Smaller crystal facets for upper portion\n    scale([0.7, 0.7, 0.7])\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60 + 30])  // Offset rotation for staggered look\n                translate([table_top_diameter/2 * 0.6, 0, 0])\n                    union() {\n                        // Upper facet\n                        translate([0, 0, table_height * 0.2])\n                            cube([table_top_diameter/3, wall_thickness, table_height * 0.4], center=true);\n                        \n                        // Connecting facet\n                        rotate([-30, 0, 0])\n                            translate([0, 0, table_height * 0.1])\n                                cube([table_top_diameter/4, wall_thickness, table_height * 0.3], center=true);\n                    }\n        }\n}\n\nmodule table_surface() {\n    // Flat table top with decorative edge\n    difference() {\n        // Main surface\n        cylinder(h=4, d=table_top_diameter);\n        \n        // Decorative groove pattern\n        for (r = [table_top_diameter/2 - 5, table_top_diameter/2 - 10]) {\n            translate([0, 0, -0.5])\n                cylinder(h=5, d=r * 2);\n        }\n    }\n}\n\nmodule support_ring() {\n    // Decorative support ring for structural integrity\n    difference() {\n        // Outer ring\n        cylinder(h=6, d=45);\n        \n        // Inner hollow\n        cylinder(h=6, d=41);\n    }\n    \n    // Decorative facets on ring\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([22.5, 0, 2])\n                cube([2, 1, 2], center=true);\n    }\n}\n\n// Generate the table\ncrystal_table();",
    "renders": true
  },
  {
    "decorative_art": "crystal_sculpture",
    "openscad_code": "// Crystal Sculpture Coffee Table - Realistic Style\n// Overall dimensions: 120 x 60 x 45 mm\n\n// Base crystal cluster module\nmodule crystal_cluster(x, y, z, scale_factor) {\n    translate([x, y, z]) {\n        scale([scale_factor, scale_factor, scale_factor]) {\n            // Main crystal\n            difference() {\n                cube([15, 12, 25], center = true);\n                translate([0, 0, 12]) cube([13, 10, 26], center = true);\n            }\n            \n            // Side crystals\n            for(i = [0:2]) {\n                rotate([0, 0, i * 120]) {\n                    translate([8, 0, 5]) {\n                        rotate([15, 0, 30]) {\n                            cube([8, 6, 18], center = true);\n                        }\n                    }\n                }\n            }\n            \n            // Top facet cuts\n            translate([0, 0, 12]) {\n                rotate([0, 45, 0]) {\n                    difference() {\n                        cube([15, 12, 5], center = true);\n                        translate([0, 0, -3]) cube([16, 13, 6], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Glass top with beveled edges\nmodule glass_top() {\n    // Main top surface\n    difference() {\n        translate([0, 0, 42.5]) cube([120, 60, 5], center = true);\n        \n        // Inner cutout for weight reduction\n        translate([0, 0, 44]) cube([116, 56, 6], center = true);\n        \n        // Beveled edges\n        translate([0, 0, 45]) cube([118, 58, 3], center = true);\n    }\n    \n    // Edge details\n    for(x = [-55, 55]) {\n        for(y = [-25, 25]) {\n            translate([x, y, 42.5]) cylinder(h = 5, r = 2, center = true);\n        }\n    }\n}\n\n// Support frame structure\nmodule support_frame() {\n    // Central support column\n    difference() {\n        translate([0, 0, 20]) cylinder(h = 40, r1 = 8, r2 = 12, center = true);\n        translate([0, 0, 20]) cylinder(h = 42, r1 = 6, r2 = 10, center = true);\n    }\n    \n    // Base plate\n    translate([0, 0, 2.5]) cube([80, 40, 5], center = true);\n    \n    // Corner supports\n    for(x = [-35, 35]) {\n        for(y = [-15, 15]) {\n            translate([x, y, 10]) cylinder(h = 20, r = 3, center = true);\n        }\n    }\n}\n\n// Decorative crystal array\nmodule crystal_array() {\n    // Central large crystal\n    crystal_cluster(0, 0, 5, 1.2);\n    \n    // Surrounding crystals\n    for(i = [0:5]) {\n        angle = i * 60;\n        radius = 25;\n        crystal_cluster(\n            cos(angle) * radius,\n            sin(angle) * radius,\n            2,\n            0.7 + (i % 2) * 0.3\n        );\n    }\n    \n    // Accent crystals\n    for(x = [-40:20:40]) {\n        for(y = [-20:20:20]) {\n            if(abs(x) + abs(y) > 30) {\n                crystal_cluster(x, y, 0, 0.4);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    support_frame();\n    \n    // Crystal decorations\n    crystal_array();\n    \n    // Glass top\n    glass_top();\n    \n    // Additional structural elements\n    translate([0, 0, 5]) {\n        difference() {\n            cube([90, 50, 10], center = true);\n            cube([86, 46, 12], center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "ice_sculpture",
    "openscad_code": "// Ice Sculpture Chair - Decorative Furniture Art Piece\n// Medium complexity, 3D printable, realistic style\n\n$fn = 32;\n\n// Overall dimensions\nchair_width = 80;\nchair_depth = 70;\nchair_height = 90;\nseat_height = 45;\nback_height = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main seat structure\nmodule seat() {\n    // Solid seat block with rounded edges\n    difference() {\n        hull() {\n            translate([0, 0, seat_height/2])\n                cube([chair_width - wall*2, chair_depth - wall*2, seat_height], center=true);\n            translate([0, 0, seat_height/2 + 2])\n                cube([chair_width - wall*4, chair_depth - wall*4, seat_height - 4], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, seat_height/2 + wall])\n            cube([chair_width - wall*6, chair_depth - wall*6, seat_height - wall*2], center=true);\n    }\n}\n\n// Backrest with ice crystal pattern\nmodule backrest() {\n    // Main back frame\n    difference() {\n        cube([chair_width - wall*4, wall*2, back_height], center=true);\n        \n        // Decorative cutouts - hexagonal pattern\n        for(i = [-2:2]) {\n            for(j = [0:3]) {\n                translate([i*15, 0, j*10 - 15])\n                    cylinder(h=wall+1, r=4, center=true);\n            }\n        }\n    }\n    \n    // Side supports\n    translate([chair_width/2 - wall*3, 0, back_height/2])\n        cube([wall*2, wall*2, back_height], center=true);\n    translate([-chair_width/2 + wall*3, 0, back_height/2])\n        cube([wall*2, wall*2, back_height], center=true);\n}\n\n// Leg structure with ice formations\nmodule leg(x_pos, y_pos) {\n    // Main leg\n    difference() {\n        cylinder(h=seat_height - wall, r=4, center=false);\n        \n        // Hollow for material saving\n        translate([0, 0, wall])\n            cylinder(h=seat_height - wall*2, r=2, center=false);\n    }\n    \n    // Ice drip formations\n    for(i = [1:3]) {\n        translate([0, 0, -i*8])\n            scale([1, 1, 0.6])\n                sphere(r=3 + i);\n    }\n}\n\n// Armrest with decorative elements\nmodule armrest(side) {\n    translate([side * (chair_width/2 - wall), 0, seat_height + 10]) {\n        rotate([0, 0, side * 10])\n            difference() {\n                cube([wall*3, chair_depth/2, 20], center=true);\n                \n                // Decorative grooves\n                for(i = [-1:1]) {\n                    translate([0, i*10, 0])\n                        cube([wall*3 + 1, 1, 20], center=true);\n                }\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Backrest\n    translate([0, chair_depth/2 - wall*2, seat_height + back_height/2])\n        backrest();\n    \n    // Legs\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (chair_width/2 - wall*4), y * (chair_depth/2 - wall*4), 0])\n                leg(x, y);\n        }\n    }\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Decorative top rail\n    translate([0, chair_depth/2 - wall*2, seat_height + back_height + wall])\n        cube([chair_width - wall*6, wall*2, wall*3], center=true);\n}",
    "renders": true
  },
  {
    "decorative_art": "sand_sculpture",
    "openscad_code": "// Sand Sculpture Furniture Piece - A \"Driftwood\" Bench\n// Realistic style, medium complexity, 3D-printable\n// Outer dimensions: 120 mm long x 45 mm deep x 40 mm high\n// Wall thickness: 2 mm everywhere\n\n$fn = 30;      // Smooth curves\n\n// Overall module -----------------------------------------------------------\nmodule sand_sculpture_bench() {\n\n    // Basaltic-sand textured seat\n    difference() {\n        // Main seat slab\n        translate([0, 0, 20])\n            rounded_box([110, 40, 4], 2);     // 2 mm thick seat\n\n        // Gentle undulating dune pattern on top surface\n        for (x = [-45:10:45])\n            for (y = [-15:8:15])\n                translate([x, y, 23.5])\n                    scale([1, 1, 0.3])\n                        sphere(d = 6, $fn = 20);\n    }\n\n    // Two sand-caked driftwood legs (left & right)\n    sand_leg([-35, 0, 0]);   // left leg\n    sand_leg([ 35, 0, 0]);   // right leg\n}\n\n// Rounded box helper -------------------------------------------------------\nmodule rounded_box(size, r) {\n    hull() {\n        for (dx = [-(size.x/2-r), (size.x/2-r)])\n            for (dy = [-(size.y/2-r), (size.y/2-r)])\n                translate([dx, dy, 0])\n                    cylinder(h = size.z, r = r, center = true);\n    }\n}\n\n// Sand-coated driftwood leg -------------------------------------------------\nmodule sand_leg(tx) {\n    translate([tx, 0, 10]) {\n        // Central driftwood core (printable vertical strut)\n        cylinder(h = 20, d = 8, center = true);\n\n        // Sand accretion blobs around core (avoid overhangs)\n        for (a = [0:60:359]) {\n            rotate([0, 0, a])\n                translate([3.5, 0, 0])\n                    sphere(d = 6);\n        }\n\n        // Foot pads for print-bed adhesion\n        translate([0, 0, -10])\n            cylinder(h = 2, d = 12);\n    }\n}\n\n// Render the piece\nsand_sculpture_bench();",
    "renders": true
  },
  {
    "decorative_art": "topiary",
    "openscad_code": "// Topiary Chair - Realistic style, medium complexity\n// A decorative chair made from clipped topiary with proper furniture proportions\n\n// Overall dimensions (mm)\nchair_width = 80;\nchair_depth = 65;\nchair_height = 85;\nseat_height = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Module for rounded box (used for topiary sections)\nmodule rounded_box(w, d, h, r) {\n    translate([r, r, 0])\n    minkowski() {\n        cube([w-2*r, d-2*r, h]);\n        cylinder(h=0.01, r=r, $fn=20);\n    }\n}\n\n// Module for leaves texture (simplified spheres)\nmodule leaves(count, base_size) {\n    for(i = [0:count-1]) {\n        rotate([0, 0, i * 360/count])\n        translate([base_size/3, 0, 0])\n        sphere(d=base_size/2, $fn=8);\n    }\n}\n\n// Seat base structure\nmodule seat_base() {\n    // Main seat platform\n    translate([0, 0, seat_height - wall])\n    rounded_box(chair_width - 10, chair_depth - 5, wall, 3);\n    \n    // Seat top with leaf texture\n    translate([0, 0, seat_height])\n    difference() {\n        rounded_box(chair_width - 10, chair_depth - 5, 5, 3);\n        translate([0, 0, -1])\n        cube([chair_width - 10, chair_depth - 5, 10]);\n    }\n    \n    // Leaf clusters on seat edges\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x * (chair_width - 20)/2, y * (chair_depth - 15)/2, seat_height + 2])\n        leaves(5, 8);\n    }\n}\n\n// Chair back support\nmodule chair_back() {\n    // Main backrest structure\n    translate([0, (chair_depth - 5)/2 - 3, seat_height + chair_height/2 - seat_height/2])\n    difference() {\n        rounded_box(chair_width - 15, wall, chair_height - seat_height, 4);\n        translate([0, -1, 0])\n        cube([chair_width - 15, wall + 2, chair_height - seat_height]);\n    }\n    \n    // Decorative leaf patterns on back\n    for(i = [0:3]) {\n        translate([(i-1.5) * 15, (chair_depth - 5)/2 - 1, seat_height + 10 + i * 10])\n        leaves(6, 10);\n    }\n    \n    // Top rail with curved top\n    translate([0, (chair_depth - 5)/2 - 3, chair_height - 5])\n    difference() {\n        rounded_box(chair_width - 10, wall, 10, 5);\n        translate([0, -1, -1])\n        cube([chair_width - 10, wall + 2, 12]);\n    }\n}\n\n// Front legs\nmodule front_legs() {\n    for(side = [-1, 1]) {\n        translate([side * (chair_width - 15)/2, -(chair_depth - 10)/2, seat_height/2 - 5])\n        difference() {\n            cylinder(h=seat_height - wall, d=8, $fn=16);\n            translate([0, 0, -1])\n            cylinder(h=seat_height - wall + 2, d=8 - 2*wall, $fn=16);\n        }\n        \n        // Leaf wraps on legs\n        for(h = [0:2]) {\n            translate([side * (chair_width - 15)/2, -(chair_depth - 10)/2, h * 15])\n            leaves(8, 6);\n        }\n    }\n}\n\n// Rear legs\nmodule rear_legs() {\n    for(side = [-1, 1]) {\n        translate([side * (chair_width - 15)/2, (chair_depth - 10)/2, chair_height/2 - 5])\n        difference() {\n            cylinder(h=chair_height - wall, d=8, $fn=16);\n            translate([0, 0, -1])\n            cylinder(h=chair_height - wall + 2, d=8 - 2*wall, $fn=16);\n        }\n        \n        // Leaf wraps on rear legs\n        for(h = [0:3]) {\n            translate([side * (chair_width - 15)/2, (chair_depth - 10)/2, h * 20])\n            leaves(8, 6);\n        }\n    }\n}\n\n// Armrests\nmodule armrests() {\n    for(side = [-1, 1]) {\n        // Main armrest support\n        translate([side * (chair_width - 5)/2, 0, seat_height + 10])\n        difference() {\n            rotate([0, 90, 0])\n            cylinder(h=chair_depth - 10, d=6, $fn=12);\n            rotate([0, 90, 0])\n            translate([0, 0, -1])\n            cylinder(h=chair_depth - 10 + 2, d=6 - 2*wall, $fn=12);\n        }\n        \n        // Leaf clusters at armrest ends\n        translate([side * (chair_width - 5)/2, -(chair_depth - 10)/2, seat_height + 10])\n        leaves(6, 8);\n        translate([side * (chair_width - 5)/2, (chair_depth - 10)/2, seat_height + 10])\n        leaves(6, 8);\n    }\n}\n\n// Assembly\nunion() {\n    seat_base();\n    chair_back();\n    front_legs();\n    rear_legs();\n    armrests();\n    \n    // Ground base plate for stability\n    translate([0, 0, -2])\n    difference() {\n        rounded_box(chair_width - 5, chair_depth, wall, 5);\n        translate([0, 0, -1])\n        cube([chair_width - 5, chair_depth, wall + 2]);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "bonsai_pot",
    "openscad_code": "// Bonsai pot - realistic style, medium complexity\n// External dimensions: 90 x 70 x 45 mm (L x W x H)\n\n$fn = 50;          // Smooth curves\nwall = 2;          // 2 mm wall thickness for 3D printing\nr_fillet = 3;      // Corner fillet radius\n\n// Overall pot body\nmodule pot_body() {\n    difference() {\n        // Outer shell with rounded top edge\n        minkowski() {\n            cube([90, 70, 45], center = true);\n            sphere(r_fillet);\n        }\n\n        // Inner cavity\n        translate([0, 0, 2])\n            cube([90 - 2*wall, 70 - 2*wall, 45 - wall], center = true);\n\n        // Drainage slits on bottom\n        for (x = [-30, -15, 0, 15, 30]) {\n            translate([x, 0, -22.5])\n                cube([3, 60, 4], center = true);\n        }\n    }\n}\n\n// Decorative raised band around mid-height\nmodule mid_band() {\n    difference() {\n        // Raised band\n        translate([0, 0, 0])\n            cube([94, 74, 6], center = true);\n\n        // Cut away outer corners to create inset\n        for (x = [-47, 47])\n            for (y = [-37, 37])\n                translate([x, y, 0])\n                    sphere(r = 6);\n\n        // Hollow center\n        cube([90, 70, 10], center = true);\n    }\n}\n\n// Four corner feet\nmodule feet() {\n    for (x = [-40, 40])\n        for (y = [-30, 30]) {\n            translate([x, y, -24.5])\n                cylinder(h = 5, r1 = 5, r2 = 4);\n        }\n}\n\n// Side decorative vertical ribs\nmodule ribs() {\n    for (ang = [0, 120, 240]) {\n        rotate([0, 0, ang])\n            translate([0, 35, 0])\n                for (z = [-15, 0, 15]) {\n                    translate([0, 0, z])\n                        cube([6, wall, 10], center = true);\n                }\n    }\n}\n\n// Top rim lip\nmodule top_rim() {\n    difference() {\n        // Upper lip\n        translate([0, 0, 22.5])\n            cube([92, 72, 4], center = true);\n\n        // Inside taper\n        translate([0, 0, 20.5])\n            cube([88, 68, 8], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    pot_body();\n    mid_band();\n    feet();\n    top_rim();\n    ribs();\n}",
    "renders": true
  },
  {
    "decorative_art": "plant_pot",
    "openscad_code": "// Realistic Plant Pot - Medium Complexity\n// Dimensions: 100mm diameter x 85mm height\n// Wall thickness: 2mm throughout\n// Designed for 3D printing with no overhangs >45°\n\nmodule pot_body() {\n    difference() {\n        // Outer shell\n        cylinder(h=75, r1=50, r2=45, $fn=64);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h=73, r1=48, r2=43, $fn=64);\n    }\n}\n\nmodule base() {\n    // Thick base for stability\n    cylinder(h=10, r=50, $fn=64);\n    \n    // Drainage channel\n    translate([0, 0, 8])\n        cylinder(h=2, r=35, $fn=32);\n}\n\nmodule rim_detail() {\n    // Decorative rim lip\n    translate([0, 0, 75])\n        cylinder(h=5, r1=47, r2=50, $fn=64);\n}\n\nmodule decorative_bands() {\n    // Two decorative bands around pot\n    for (i = [0:1]) {\n        translate([0, 0, 25 + i * 30])\n            difference() {\n                cylinder(h=4, r=50.5, $fn=64);\n                cylinder(h=4, r=48.5, $fn=64);\n            }\n    }\n}\n\nmodule feet() {\n    // Three support feet for stability\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([40, 0, 0])\n                cylinder(h=5, r=5, $fn=16);\n    }\n}\n\nmodule drainage_holes() {\n    // Three drainage holes at 120° intervals\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([25, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=20, r=2, $fn=16);\n    }\n}\n\nmodule texture_pattern() {\n    // Subtle vertical grooves for grip\n    for (i = [0:15:359]) {\n        rotate([0, 0, i])\n            translate([49, 0, 0])\n                cube([2, 1, 70], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    base();\n    \n    // Feet for furniture-style support\n    feet();\n    \n    // Pot body\n    translate([0, 0, 10])\n        pot_body();\n    \n    // Rim detail\n    rim_detail();\n    \n    // Decorative elements\n    translate([0, 0, 10])\n        decorative_bands();\n    \n    // Optional texture\n    translate([0, 0, 12])\n        texture_pattern();\n}\n\n// Drainage holes (must be last for printing)\ndrainage_holes();",
    "renders": true
  },
  {
    "decorative_art": "flower_pot",
    "openscad_code": "// Flower pot furniture item - realistic style, medium complexity\n// Dimensions: 120mm diameter, 100mm height, 2mm wall thickness\n\n$fn = 36;  // Smooth curves for realistic appearance\n\n// Main pot body module\nmodule pot_body() {\n    // Outer wall with gentle taper\n    difference() {\n        cylinder(h1 = 100, h2 = 85, r1 = 60, r2 = 55);\n        // Inner cavity\n        translate([0, 0, 2])\n            cylinder(h1 = 96, h2 = 81, r1 = 58, r2 = 53);\n    }\n}\n\n// Decorative rim with bead detail\nmodule decorative_rim() {\n    // Main rim\n    translate([0, 0, 100])\n        difference() {\n            cylinder(h = 8, r1 = 63, r2 = 60);\n            cylinder(h = 10, r = 58);\n        }\n    \n    // Beaded edge detail\n    for(i = [0:3:359]) {\n        rotate([0, 0, i])\n            translate([60, 0, 102])\n                sphere(r = 2);\n    }\n}\n\n// Support base with feet\nmodule support_base() {\n    // Base ring\n    difference() {\n        cylinder(h = 5, r = 60);\n        cylinder(h = 6, r = 58);\n    }\n    \n    // Decorative feet (4 feet for stability)\n    for(i = [45:90:315]) {\n        rotate([0, 0, i])\n            translate([50, 0, -5])\n                rotate([90, 0, 0])\n                    cylinder(h = 10, r1 = 8, r2 = 5);\n    }\n}\n\n// Drainage holes pattern\nmodule drainage_holes() {\n    // Central hole\n    translate([0, 0, 2])\n        cylinder(h = 3, r = 4);\n    \n    // Ring of smaller holes\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([30, 0, 2])\n                cylinder(h = 3, r = 2);\n    }\n}\n\n// Surface texture bands\nmodule texture_bands() {\n    for(h = [20:20:80]) {\n        translate([0, 0, h])\n            difference() {\n                cylinder(h = 2, r1 = 59.5, r2 = 58.5);\n                cylinder(h = 3, r = 58);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    pot_body();\n    decorative_rim();\n    support_base();\n    drainage_holes();\n    texture_bands();\n}",
    "renders": true
  },
  {
    "decorative_art": "window_box",
    "openscad_code": "// Window Box Planter - Realistic Style, Medium Complexity\n// Designed for 3D printing with 2mm wall thickness and no overhangs\n\n$fn = 30; // Smooth curves for better appearance\n\n// Main dimensions (in mm)\nwidth = 80;\ndepth = 40;\nheight = 35;\nwall_thickness = 2;\nbottom_thickness = 2;\n\n// Rim dimensions\nrim_height = 4;\nrim_width = 3;\n\n// Leg dimensions\nleg_height = 8;\nleg_width = 3;\n\n// Drainage holes\ndrain_diameter = 4;\ndrain_spacing = 15;\n\n// Decorative panel details\npanel_depth = 1;\npanel_pattern_width = 5;\npanel_pattern_height = 4;\n\n// Main box body\nmodule main_box() {\n    difference() {\n        // Outer shell\n        translate([0, 0, height/2])\n            cube([width, depth, height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, (height+bottom_thickness)/2])\n            cube([width-wall_thickness*2, depth-wall_thickness*2, height], center=true);\n        \n        // Bottom cavity for drainage\n        translate([0, 0, bottom_thickness/2])\n            cube([width-wall_thickness*2, depth-wall_thickness*2, bottom_thickness], center=true);\n    }\n}\n\n// Decorative rim around top\nmodule decorative_rim() {\n    difference() {\n        // Outer rim\n        translate([0, 0, height+rim_height/2])\n            cube([width+rim_width*2, depth+rim_width*2, rim_height], center=true);\n        \n        // Inner cutout\n        translate([0, 0, height+rim_height/2])\n            cube([width, depth, rim_height+1], center=true);\n    }\n}\n\n// Support legs at corners\nmodule support_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, leg_height/2])\n        cube([leg_width, leg_width, leg_height], center=true);\n}\n\n// Drainage holes in bottom\nmodule drainage_holes() {\n    for(x = [-width/2+10:drain_spacing:width/2-10]) {\n        for(y = [-depth/2+10:drain_spacing:depth/2-10]) {\n            translate([x, y, 0])\n                cylinder(h=bottom_thickness+1, d=drain_diameter, center=true);\n        }\n    }\n}\n\n// Decorative side panels\nmodule side_panel() {\n    // Panel base\n    difference() {\n        translate([0, 0, height/2])\n            cube([width-wall_thickness*2, panel_depth, height-rim_height], center=true);\n        \n        // Decorative cutout pattern\n        for(i = [-2:1:2]) {\n            for(j = [-1:1:1]) {\n                translate([i*panel_pattern_width*2, 0, j*panel_pattern_height*2+height/2])\n                    cube([panel_pattern_width, panel_depth+1, panel_pattern_height], center=true);\n            }\n        }\n    }\n}\n\n// Assemble the complete window box\nunion() {\n    // Main structure\n    main_box();\n    \n    // Decorative rim\n    decorative_rim();\n    \n    // Support legs at all four corners\n    support_leg(width/2-leg_width/2, depth/2-leg_width/2);\n    support_leg(-width/2+leg_width/2, depth/2-leg_width/2);\n    support_leg(width/2-leg_width/2, -depth/2+leg_width/2);\n    support_leg(-width/2+leg_width/2, -depth/2+leg_width/2);\n    \n    // Decorative panels on long sides\n    translate([0, depth/2+panel_depth/2, 0])\n        side_panel();\n    translate([0, -depth/2-panel_depth/2, 0])\n        mirror([0, 1, 0])\n            side_panel();\n    \n    // Drainage holes\n    drainage_holes();\n}",
    "renders": true
  },
  {
    "decorative_art": "hanging_planter",
    "openscad_code": "// Hanging Planter - Realistic Style, Medium Complexity\n// Approximate dimensions: 120mm height, 80mm diameter\n\n// Parameters for easy customization\n$fn = 50;\nwall_thickness = 2;\npot_height = 70;\npot_diameter = 80;\nrope_length = 50;\nrope_diameter = 3;\nhook_diameter = 5;\n\nmodule hanging_planter() {\n    // Main pot body\n    difference() {\n        // Outer pot shell\n        cylinder(h=pot_height, d=pot_diameter, center=false);\n        \n        // Inner cavity for soil\n        translate([0, 0, wall_thickness])\n        cylinder(h=pot_height-wall_thickness*2, d=pot_diameter-wall_thickness*2, center=false);\n        \n        // Drainage holes\n        for(i=[-1, 1]) {\n            translate([i*15, 0, wall_thickness/2])\n            cylinder(h=wall_thickness+1, d=4, center=false);\n        }\n    }\n    \n    // Rim detail\n    translate([0, 0, pot_height-wall_thickness])\n    difference() {\n        cylinder(h=wall_thickness*2, d=pot_diameter+4, center=false);\n        cylinder(h=wall_thickness*2+1, d=pot_diameter, center=false);\n    }\n    \n    // Decorative band around middle\n    translate([0, 0, pot_height*0.6])\n    difference() {\n        cylinder(h=8, d=pot_diameter+2, center=false);\n        cylinder(h=9, d=pot_diameter-2, center=false);\n    }\n    \n    // Three rope attachment points\n    for(angle=[0, 120, 240]) {\n        rotate([0, 0, angle])\n        translate([pot_diameter/2 - 5, 0, pot_height-2])\n        rope_attachment();\n    }\n    \n    // Ropes converging at top\n    for(angle=[0, 120, 240]) {\n        rotate([0, 0, angle])\n        translate([pot_diameter/2 - 5, 0, pot_height-2])\n        rope(rope_length);\n    }\n    \n    // Central hook\n    translate([0, 0, pot_height+rope_length])\n    hook();\n}\n\nmodule rope_attachment() {\n    // Ring for rope attachment\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=8, d=6, center=true);\n        cylinder(h=9, d=3, center=true);\n    }\n}\n\nmodule rope(length) {\n    // Create rope segment with slight curve\n    translate([0, 0, length/2])\n    scale([rope_diameter/2, rope_diameter/2, length])\n    sphere(d=2);\n}\n\nmodule hook() {\n    // Hook for hanging\n    difference() {\n        // Main hook body\n        rotate([0, 0, 0])\n        union() {\n            cylinder(h=10, d=hook_diameter, center=false);\n            translate([0, hook_diameter*1.5, 5])\n            rotate([90, 0, 0])\n            difference() {\n                torus(r1=hook_diameter*1.5, r2=hook_diameter/2);\n                translate([0, -hook_diameter*1.5, 0])\n                cube([hook_diameter*4, hook_diameter*3, hook_diameter*2], center=true);\n            }\n        }\n        \n        // Hanging hole\n        translate([0, hook_diameter*1.5, 5])\n        rotate([90, 0, 0])\n        cylinder(h=hook_diameter*4, d=hook_diameter, center=true);\n    }\n}\n\nmodule torus(r1, r2) {\n    rotate_extrude()\n    translate([r1, 0, 0])\n    circle(r=r2);\n}\n\n// Render the complete planter\nhanging_planter();",
    "renders": true
  },
  {
    "decorative_art": "decorative_basket",
    "openscad_code": "// Decorative Basket - Realistic Style\n// 3D printable decorative basket with woven pattern and handles\n\nwall_thickness = 2;\nbasket_width = 80;\nbasket_depth = 60;\nbasket_height = 50;\nhandle_height = 25;\nhandle_width = 15;\n\n// Main basket body\nmodule basket_body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, basket_height/2])\n                cube([basket_width, basket_depth, basket_height], center=true);\n            translate([0, 0, 0])\n                cube([basket_width - 10, basket_depth - 10, wall_thickness], center=true);\n        }\n        \n        // Inner cavity\n        translate([0, 0, wall_thickness])\n            cube([basket_width - 2*wall_thickness, basket_depth - 2*wall_thickness, basket_height], center=true);\n    }\n}\n\n// Woven pattern on sides\nmodule woven_pattern() {\n    for (i = [-basket_width/2 + 5 : 5 : basket_width/2 - 5]) {\n        for (j = [-basket_depth/2 + 5 : 5 : basket_depth/2 - 5]) {\n            if ((i + j) % 10 == 0) {\n                translate([i, j, basket_height/2])\n                    cube([3, 3, basket_height - wall_thickness], center=true);\n            }\n        }\n    }\n}\n\n// Base reinforcement ring\nmodule base_ring() {\n    difference() {\n        cylinder(h=wall_thickness, r=basket_width/2, center=true);\n        cylinder(h=wall_thickness+1, r=basket_width/2 - wall_thickness, center=true);\n    }\n}\n\n// Decorative handles\nmodule handle() {\n    difference() {\n        // Handle shape\n        hull() {\n            translate([0, -handle_width/2, 0])\n                cylinder(h=handle_height, r=wall_thickness, center=true);\n            translate([0, handle_width/2, 0])\n                cylinder(h=handle_height, r=wall_thickness, center=true);\n        }\n        \n        // Hollow center\n        translate([0, 0, 0])\n            cylinder(h=handle_height+2, r=wall_thickness-1, center=true);\n    }\n}\n\n// Rim decoration\nmodule rim_detail() {\n    for (i = [0 : 30 : 330]) {\n        rotate([0, 0, i])\n            translate([basket_width/2 - wall_thickness, 0, basket_height - wall_thickness])\n                cube([wall_thickness, 2, wall_thickness], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    basket_body();\n    \n    // Base details\n    translate([0, 0, wall_thickness/2])\n        scale([1, basket_depth/basket_width, 1])\n            base_ring();\n    \n    // Side woven pattern\n    difference() {\n        basket_body();\n        woven_pattern();\n    }\n    \n    // Rim decoration\n    rim_detail();\n    \n    // Handles on sides\n    translate([basket_width/2 - wall_thickness, 0, basket_height/2])\n        rotate([90, 0, 0])\n            handle();\n    \n    translate([-basket_width/2 + wall_thickness, 0, basket_height/2])\n        rotate([90, 0, 0])\n            handle();\n}",
    "renders": true
  },
  {
    "decorative_art": "wreath",
    "openscad_code": "// Wreath Decorative Furniture Piece\n// Realistic style with medium complexity\n// Dimensions: 150mm diameter, 25mm thickness\n// Wall thickness: 2mm for 3D printing\n\n$fn = 64;\n\n// Main wreath ring with hollow center\nmodule wreath_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h=20, d=150, center=true);\n        \n        // Hollow center with 2mm wall thickness\n        translate([0, 0, -1])\n            cylinder(h=22, d=146, center=true);\n    }\n}\n\n// Decorative leaf structure\nmodule leaf() {\n    scale([1, 0.7, 1])\n    difference() {\n        // Leaf shape\n        hull() {\n            translate([-10, 0, 0]) sphere(d=8);\n            translate([10, 0, 0]) sphere(d=8);\n            translate([0, 12, 0]) sphere(d=6);\n        }\n        \n        // Leaf vein\n        translate([0, 0, -0.5])\n            cube([2, 12, 1], center=true);\n    }\n}\n\n// Berry cluster\nmodule berry() {\n    for(i = [0:2]) {\n        rotate([0, 0, i*120])\n        translate([5, 0, 0])\n            sphere(d=6);\n    }\n}\n\n// Decorative bow at top\nmodule bow() {\n    union() {\n        // Center knot\n        translate([0, 75, 10])\n            cylinder(h=8, d=12, center=true);\n        \n        // Left ribbon loop\n        translate([-10, 75, 10])\n            rotate([90, 0, 0])\n            rotate_extrude(angle=180)\n                translate([15, 0, 0])\n                    circle(d=8);\n        \n        // Right ribbon loop\n        translate([10, 75, 10])\n            rotate([90, 0, 0])\n            rotate_extrude(angle=180)\n                translate([-15, 0, 0])\n                    circle(d=8);\n    }\n}\n\n// Support structure for hanging\nmodule hanger() {\n    // Hanger loop\n    translate([0, 75, 15])\n        rotate_extrude(angle=360)\n            translate([5, 0, 0])\n                difference() {\n                    circle(d=8);\n                    circle(d=4);\n                }\n}\n\n// Assembly of decorative elements\nmodule decorations() {\n    // Leaves around the wreath\n    for(i = [0:15]) {\n        rotate([0, 0, i*22.5])\n        translate([70, 0, 0])\n        rotate([90, 0, 0])\n        rotate([0, 0, (i%2)*180])\n            leaf();\n    }\n    \n    // Berries between leaves\n    for(i = [0:12]) {\n        rotate([0, 0, i*30 + 15])\n        translate([68, 0, 8])\n            berry();\n    }\n    \n    // Small decorative spheres\n    for(i = [0:24]) {\n        rotate([0, 0, i*15])\n        translate([72, 0, 5])\n            sphere(d=4);\n    }\n}\n\n// Back support ribs for structure\nmodule support_ribs() {\n    for(i = [0:7]) {\n        rotate([0, 0, i*45])\n        translate([0, 0, -10])\n            cube([2, 70, 4], center=true);\n    }\n}\n\n// Final assembly\nunion() {\n    // Main wreath structure\n    wreath_ring();\n    \n    // Decorative elements\n    decorations();\n    \n    // Bow at top\n    bow();\n    \n    // Hanger\n    hanger();\n    \n    // Support ribs for structural integrity\n    support_ribs();\n}",
    "renders": true
  },
  {
    "decorative_art": "garland",
    "openscad_code": "// Garland Furniture - Decorative Wall Hanging\n// Realistic style, medium complexity\n// Overall dimensions: 100mm wide x 20mm deep x 120mm tall\n\nwall_thickness = 2;\nbranch_diameter = 4;\nleaf_length = 8;\nleaf_width = 4;\nflower_diameter = 6;\nberry_diameter = 3;\n\n// Main frame structure\nmodule frame() {\n    // Top horizontal bar\n    translate([-50, 0, 115])\n        cube([100, wall_thickness, 10]);\n    \n    // Bottom horizontal bar\n    translate([-50, 0, 5])\n        cube([100, wall_thickness, 10]);\n    \n    // Left vertical support\n    translate([-50, 0, 5])\n        cube([wall_thickness, 20, 110]);\n    \n    // Right vertical support\n    translate([48, 0, 5])\n        cube([wall_thickness, 20, 110]);\n    \n    // Decorative top scroll detail\n    for(i = [0:3]) {\n        translate([-45 + i*30, 10, 115])\n            rotate([0, 90, 0])\n                cylinder(h=10, d=wall_thickness+2, $fn=8);\n    }\n}\n\n// Leaf module with realistic shape\nmodule leaf() {\n    difference() {\n        // Main leaf body\n        scale([1, 0.5, 0.1])\n            sphere(d=leaf_length, $fn=12);\n        \n        // Leaf vein detail\n        translate([0, 0, -0.5])\n            scale([0.8, 0.1, 1])\n                sphere(d=leaf_length*0.8, $fn=12);\n    }\n}\n\n// Flower module with petals\nmodule flower() {\n    // Center\n    translate([0, 0, flower_diameter/2])\n        sphere(d=berry_diameter, $fn=12);\n    \n    // Petals\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([flower_diameter/3, 0, flower_diameter/2])\n                rotate([90, 0, 0])\n                    scale([0.3, 1, 0.3])\n                        cylinder(h=flower_diameter/2, d=flower_diameter/3, $fn=6);\n    }\n}\n\n// Berry cluster\nmodule berries() {\n    for(i = [0:2]) {\n        translate([i*3 - 3, 0, i*2])\n            sphere(d=berry_diameter, $fn=8);\n    }\n}\n\n// Garland branch with decorations\nmodule garland_branch(start_pos, end_pos, height, decorations) {\n    // Calculate branch direction\n    length = norm(end_pos - start_pos);\n    angle = atan2(end_pos[1] - start_pos[1], end_pos[0] - start_pos[0]);\n    \n    // Main branch\n    translate([start_pos[0], start_pos[1], height])\n        rotate([0, 0, angle])\n            cylinder(h=length, d=branch_diameter, $fn=8);\n    \n    // Add decorations along branch\n    for(i = [0:decorations-1]) {\n        pos = start_pos + (end_pos - start_pos) * i / (decorations - 1);\n        \n        // Alternate between leaves, flowers and berries\n        if(i % 3 == 0) {\n            translate([pos[0], pos[1], height + branch_diameter/2])\n                leaf();\n        } else if(i % 3 == 1) {\n            translate([pos[0], pos[1], height + branch_diameter/2])\n                flower();\n        } else {\n            translate([pos[0], pos[1], height + branch_diameter/2])\n                berries();\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Frame structure\n    frame();\n    \n    // First garland branch - top curve\n    garland_branch([-40, 10, 100], [40, 10, 100], 100, 8);\n    \n    // Second garland branch - middle curve\n    garland_branch([-35, 15, 80], [35, 15, 80], 80, 7);\n    \n    // Third garland branch - lower curve\n    garland_branch([-30, 12, 60], [30, 12, 60], 60, 6);\n    \n    // Side garlands\n    garland_branch([-45, 15, 90], [-45, 15, 30], 90, 5);\n    garland_branch([45, 15, 90], [45, 15, 30], 90, 5);\n    \n    // Additional decorative elements\n    // Small hanging berries\n    translate([-20, 10, 75])\n        berries();\n    translate([20, 10, 75])\n        berries();\n    translate([0, 10, 55])\n        berries();\n    \n    // Corner flowers\n    translate([-45, 10, 25])\n        flower();\n    translate([45, 10, 25])\n        flower();\n}\n\n// Mounting holes for wall hanging\ntranslate([-40, -5, 110])\n    cylinder(h=10, d=4, $fn=16);\ntranslate([40, -5, 110])\n    cylinder(h=10, d=4, $fn=16);",
    "renders": true
  },
  {
    "decorative_art": "ball",
    "openscad_code": "// Ball-shaped decorative furniture piece\n// Diameter: 100mm, wall-thickness 2mm\n\nmodule ball_furniture() {\n    // Main hollow sphere shell\n    difference() {\n        sphere(d = 100);\n        sphere(d = 96);  // 2mm wall thickness\n    }\n    \n    // Equatorial decorative band (structural ring)\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h = 6, d = 102, center = true);\n        cylinder(h = 8, d = 98, center = true);\n    }\n    \n    // Top opening with collar\n    translate([0, 0, 45])\n    difference() {\n        cylinder(h = 8, d = 30);\n        cylinder(h = 10, d = 26);\n    }\n    \n    // Bottom opening with collar\n    translate([0, 0, -45])\n    rotate([180, 0, 0])\n    difference() {\n        cylinder(h = 8, d = 30);\n        cylinder(h = 10, d = 26);\n    }\n    \n    // Internal support ribs (8 radial ribs)\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([0, 0, -40])\n        cube([2, 40, 80], center = true);\n    }\n    \n    // Decorative raised dots pattern (icosahedron layout)\n    for (theta = [26.57, 63.43]) {\n        for (phi = [0:72:359]) {\n            rotate([0, theta, phi])\n            translate([0, 0, 50])\n            sphere(d = 4);\n            \n            rotate([0, 180 - theta, phi])\n            translate([0, 0, 50])\n            sphere(d = 4);\n        }\n    }\n    \n    // Bottom support legs (3 legs at 120 degrees)\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([35, 0, -50])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 8, d = 12);\n            cylinder(h = 10, d = 8);\n        }\n    }\n    \n    // Internal shelf platforms\n    translate([0, 0, 20])\n    difference() {\n        cylinder(h = 2, d = 70);\n        cylinder(h = 3, d = 66);\n    }\n    \n    translate([0, 0, -20])\n    difference() {\n        cylinder(h = 2, d = 70);\n        cylinder(h = 3, d = 66);\n    }\n}\n\n// Render the complete furniture piece\nball_furniture();",
    "renders": true
  },
  {
    "decorative_art": "football",
    "openscad_code": "// Football Furniture - Decorative Football Side Table\n// Realistic style, medium complexity\n// Overall dimensions: 120mm diameter x 300mm height\n\n$fn = 32;  // Smooth curves\n\n// Main parameters\nball_d = 120;\nleg_h = 180;\nleg_t = 4;\nbase_d = 200;\nbase_t = 15;\nwall_t = 2;\n\nmodule football_table() {\n    // Base\n    union() {\n        // Base plate\n        cylinder(d=base_d, h=base_t, center=false);\n        \n        // Base edge detail - slight taper\n        translate([0, 0, base_t])\n        cylinder(d1=base_d, d2=base_d-20, h=10, center=false);\n        \n        // Central support column\n        translate([0, 0, base_t+10])\n        cylinder(d=30, h=leg_h-10, center=false);\n        \n        // Football body - hollow sphere\n        difference() {\n            sphere(d=ball_d);\n            translate([0, 0, -wall_t])\n            sphere(d=ball_d-wall_t*2);\n            // Cut flat bottom for stability\n            translate([0, 0, -ball_d/2])\n            cube([ball_d, ball_d, ball_d/2], center=true);\n        }\n        \n        // Move football to top\n        translate([0, 0, leg_h+10])\n        \n        // Football details - pentagon pattern\n        module pentagon(size) {\n            rotate([90, 0, 0])\n            cylinder(r=size, h=wall_t, center=true);\n            \n            // Pentagon edges\n            for(i=[0:4]) {\n                rotate([0, 0, i*72])\n                translate([size*cos(36), size*sin(36), 0])\n                rotate([0, 0, 36])\n                cube([size*2*sin(36), wall_t*2, wall_t], center=true);\n            }\n        }\n        \n        // Place pentagons on football surface\n        module football_pattern() {\n            // Central pentagon\n            pentagon(ball_d/15);\n            \n            // Ring of 5 pentagons\n            for(i=[0:4]) {\n                rotate([0, 0, i*72])\n                translate([ball_d/5.5, 0, 0])\n                pentagon(ball_d/15);\n            }\n            \n            // Second ring of 5 pentagons\n            for(i=[0:4]) {\n                rotate([0, 0, i*72+36])\n                translate([ball_d/3.5, 0, 0])\n                rotate([0, 0, 180])\n                pentagon(ball_d/15);\n            }\n        }\n        \n        // Apply pattern\n        football_pattern();\n        \n        // Structural ribs inside ball\n        difference() {\n            sphere(d=ball_d-wall_t);\n            sphere(d=ball_d-wall_t*2);\n        }\n        \n        // Connection joint between column and ball\n        translate([0, 0, ball_d/2])\n        cylinder(d=40, h=20, center=true);\n    }\n}\n\n// Generate the table\nfootball_table();",
    "renders": true
  },
  {
    "decorative_art": "baseball",
    "openscad_code": "// Baseball Decorative Stool\n// Dimensions: 100mm diameter sphere, 80mm height stool\n// Wall thickness: 2mm for 3D printability\n\n// Global parameters\nball_diameter = 100;\nstool_height = 80;\nwall_thickness = 2;\nseam_height = 3;\n\n// Main module\nmodule baseball_stool() {\n    // Stool base structure\n    difference() {\n        // Main cylindrical base\n        union() {\n            // Central support cylinder\n            cylinder(h = stool_height, r = 30, $fn = 50);\n            \n            // Base ring for stability\n            translate([0, 0, 0])\n            cylinder(h = 10, r = 40, $fn = 50);\n            \n            // Top rim for ball seating\n            translate([0, 0, stool_height - 5])\n            cylinder(h = 5, r = 35, $fn = 50);\n        }\n        \n        // Hollow out the base\n        translate([0, 0, wall_thickness])\n        cylinder(h = stool_height - wall_thickness, r = 30 - wall_thickness, $fn = 50);\n        \n        // Remove center for weight reduction\n        translate([0, 0, 10])\n        cylinder(h = stool_height - 20, r = 20, $fn = 50);\n    }\n    \n    // Baseball sphere (top half)\n    difference() {\n        // Main ball shape\n        translate([0, 0, stool_height - 5])\n        sphere(d = ball_diameter, $fn = 100);\n        \n        // Cut bottom half flat\n        translate([0, 0, stool_height - 5 - ball_diameter/2])\n        cube([ball_diameter + 10, ball_diameter + 10, ball_diameter], center = true);\n    }\n    \n    // Red seams - two continuous curves\n    color(\"red\") {\n        // First seam curve\n        for(i = [0:5:180]) {\n            rotate([0, 0, i])\n            translate([0, 0, stool_height + ball_diameter/2 - 10])\n            rotate([90, 0, 0])\n            cylinder(h = seam_height, r = 1.5, $fn = 8);\n        }\n        \n        // Second seam curve (mirrored)\n        for(i = [0:5:180]) {\n            rotate([0, 0, -i])\n            translate([0, 0, stool_height + ball_diameter/2 - 10])\n            rotate([90, 0, 0])\n            cylinder(h = seam_height, r = 1.5, $fn = 8);\n        }\n        \n        // Seam connection points\n        for(i = [0:30:360]) {\n            rotate([0, 0, i])\n            translate([0, 45, stool_height + 20])\n            sphere(d = 3, $fn = 10);\n        }\n    }\n    \n    // Decorative stitching pattern\n    color(\"white\") {\n        for(i = [0:45:360]) {\n            rotate([0, 0, i])\n            translate([0, 40, stool_height + 25])\n            cube([3, 0.5, seam_height], center = true);\n        }\n    }\n    \n    // Reinforcement ribs inside base\n    for(i = [0:90:360]) {\n        rotate([0, 0, i])\n        translate([0, 0, stool_height/2])\n        cube([wall_thickness, 25, stool_height - 20], center = true);\n    }\n    \n    // Anti-slip pads on base\n    for(i = [0:120:360]) {\n        rotate([0, 0, i])\n        translate([35, 0, 0])\n        cylinder(h = 3, r = 5, $fn = 6);\n    }\n}\n\n// Generate the model\nbaseball_stool();",
    "renders": true
  },
  {
    "decorative_art": "basketball",
    "openscad_code": "// Basketball-Inspired Decorative Stool\n// Realistic style, medium complexity\n// Overall dimensions: 120mm diameter, 80mm height\n\n// Main parameters\nball_d = 120;\nball_r = ball_d / 2;\nwall_thickness = 2;\nleg_height = 40;\nleg_d = 15;\n\n// Basketball module with realistic panel pattern\nmodule basketball() {\n    // Main sphere with wall thickness\n    difference() {\n        sphere(r = ball_r);\n        sphere(r = ball_r - wall_thickness);\n    }\n    \n    // Panel lines - curved grooves\n    for(i = [0:45:135]) {\n        rotate([0, 0, i])\n            translate([0, 0, -ball_r])\n                linear_extrude(height = ball_d + 2, center = true)\n                    offset(-1)\n                        circle(r = ball_r * 0.9);\n    }\n    \n    // Horizontal panel lines\n    rotate([90, 0, 0])\n        for(i = [0:60:120]) {\n            rotate([0, 0, i])\n                translate([0, 0, -ball_r])\n                    linear_extrude(height = ball_d + 2, center = true)\n                        offset(-1)\n                            circle(r = ball_r * 0.9);\n        }\n}\n\n// Structural support ring\nmodule support_ring() {\n    // Main ring\n    difference() {\n        cylinder(h = 8, r1 = ball_r + 4, r2 = ball_r + 4, center = true);\n        cylinder(h = 10, r1 = ball_r + 2, r2 = ball_r + 2, center = true);\n    }\n}\n\n// Decorative legs with basketball texture\nmodule leg() {\n    // Main leg cylinder\n    cylinder(h = leg_height, d = leg_d, center = false);\n    \n    // Basketball pattern on legs\n    translate([0, 0, leg_height/2])\n        rotate([90, 0, 0])\n            scale([0.5, 0.5, 1])\n                basketball();\n}\n\n// Assembly\ntranslate([0, 0, leg_height + 40])\n    basketball();\n\ntranslate([0, 0, leg_height])\n    support_ring();\n\n// Three legs for stability\nfor(i = [0:120:240]) {\n    rotate([0, 0, i])\n        translate([ball_r * 0.7, 0, 0])\n            leg();\n}\n\n// Bottom support structure\ntranslate([0, 0, leg_height/2])\n    cylinder(h = 4, r = ball_r * 0.5, center = true);\n\n// Connection joints\nmodule joint() {\n    sphere(r = leg_d/2 + 2);\n    cylinder(h = leg_d + 4, d = 4, center = true);\n}\n\nfor(i = [0:120:240]) {\n    rotate([0, 0, i])\n        translate([ball_r * 0.7, 0, leg_height])\n            joint();\n}",
    "renders": true
  },
  {
    "decorative_art": "soccerball",
    "openscad_code": "// Soccerball Decorative Stool - Realistic Style\n// Dimensions: 120mm diameter, 60mm thick\n// Wall thickness: 2mm for 3D printing\n\n$fn = 64;\n\n// Main parameters\nball_diameter = 120;\nball_radius = ball_diameter / 2;\nwall_thickness = 2;\nhex_size = 15;\npent_size = 13;\n\n// Create soccerball stool\nmodule soccerball_stool() {\n    difference() {\n        // Outer sphere\n        sphere(r = ball_radius);\n        \n        // Hollow interior\n        sphere(r = ball_radius - wall_thickness);\n    }\n    \n    // Add hexagonal panel details\n    for (i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([0, 0, ball_radius - 5]) {\n                rotate([atan(1/2), 0, 0]) {\n                    hex_panel();\n                }\n            }\n            translate([0, 0, -ball_radius + 5]) {\n                rotate([-atan(1/2), 0, 0]) {\n                    hex_panel();\n                }\n            }\n        }\n    }\n    \n    // Add pentagonal panel details\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30]) {\n            translate([0, 0, ball_radius - 3]) {\n                rotate([atan(2), 0, 0]) {\n                    pent_panel();\n                }\n            }\n            translate([0, 0, -ball_radius + 3]) {\n                rotate([-atan(2), 0, 0]) {\n                    pent_panel();\n                }\n            }\n        }\n    }\n    \n    // Structural support ring\n    translate([0, 0, -ball_radius + 20]) {\n        difference() {\n            cylinder(h = 10, r = ball_radius - 10);\n            cylinder(h = 12, r = ball_radius - 15);\n        }\n    }\n    \n    // Decorative seam lines\n    seam_lines();\n    \n    // Furniture legs (4 hidden supports for stability)\n    legs_support();\n}\n\n// Hexagonal panel module\nmodule hex_panel() {\n    scale([1, 1, 0.5]) {\n        cylinder(h = 1, r = hex_size, $fn = 6);\n    }\n}\n\n// Pentagonal panel module\nmodule pent_panel() {\n    scale([1, 1, 0.5]) {\n        cylinder(h = 1, r = pent_size, $fn = 5);\n    }\n}\n\n// Seam lines decoration\nmodule seam_lines() {\n    for (i = [0:19]) {\n        rotate([0, 0, i * 18]) {\n            translate([0, ball_radius - 1, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = ball_diameter, r = 0.5);\n                }\n            }\n        }\n    }\n}\n\n// Hidden support legs\nmodule legs_support() {\n    for (angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle]) {\n            translate([ball_radius - 15, 0, -ball_radius]) {\n                rotate([90, 0, 0]) {\n                    difference() {\n                        cylinder(h = 20, r = 8);\n                        cylinder(h = 22, r = 6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the stool\nsoccerball_stool();",
    "renders": true
  },
  {
    "decorative_art": "tennisball",
    "openscad_code": "// Tennisball Decorative Stool\n// Overall height: 120 mm, seat diameter: 150 mm\n// 3D-printable with 2 mm wall thickness and no steep overhangs\n\nmodule tennisball_stool() {\n    // Main body hollow sphere with 2 mm wall\n    difference() {\n        sphere(d = 150, $fn = 120);                    // outer sphere\n        sphere(d = 146, $fn = 120);                    // inner sphere hollow\n    }\n\n    // Tennis ball seam: two offset ellipsoids\n    for (phi = [-45, 45]) {\n        rotate([0, phi, 0])\n            scale([1, 0.1, 1.05])\n                cylinder(h = 160, d = 150, $fn = 100, center = true);\n    }\n\n    // Leg frame\n    difference() {\n        union() {\n            for (i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([0, 55, -60])\n                        cylinder(h = 120, d = 12, $fn = 20);\n            }\n            // Ring brace 20 mm above base\n            translate([0, 0, -50])\n                cylinder(h = 8, d1 = 120, d2 = 120, $fn = 60);\n        }\n\n        // Remove inner material from ring brace\n        translate([0, 0, -50])\n            cylinder(h = 10, d1 = 104, d2 = 104, $fn = 60);\n    }\n\n    // Base plate\n    translate([0, 0, -60])\n        difference() {\n            cylinder(h = 4, d = 140, $fn = 60);\n            cylinder(h = 5, d = 136, $fn = 60);\n        }\n\n    // Decorative felt texture pattern\n    module felt_dimple(x, y, z) {\n        for (i = [0:2])\n            rotate([0, 0, i * 60])\n                translate([x, y, z])\n                    scale([1, 0.3, 0.2])\n                        sphere(d = 6, $fn = 8);\n    }\n\n    // Apply dimples across surface\n    for (theta = [0:30:150])\n        for (phi = [0:30:330]) {\n            rotate([theta, 0, phi])\n                translate([0, 0, 75])\n                    felt_dimple(0, 0, 0);\n        }\n}\n\n// Render the stool\ntennisball_stool();",
    "renders": true
  },
  {
    "decorative_art": "volleyball",
    "openscad_code": "// Volleyball Decorative Stool / Side Table\n// Realistic style, medium complexity\n\n// Overall dimensions\nball_diameter = 80;\nleg_height = 70;\nleg_thickness = 4;\nseat_thickness = 8;\n\n// Ball panel dimensions\npanel_width = 18;\npanel_length = 35;\npanel_thickness = 1.5;\n\n// Create main ball structure\nmodule volleyball_ball() {\n    difference() {\n        // Main sphere\n        sphere(d = ball_diameter, $fn = 64);\n        \n        // Cut flat bottom for stability\n        translate([0, 0, -ball_diameter/2 - 1])\n            cube([ball_diameter + 2, ball_diameter + 2, ball_diameter/2 + 2], center = true);\n        \n        // Cut flat top for seat\n        translate([0, 0, ball_diameter/2 - seat_thickness + 1])\n            cube([ball_diameter + 2, ball_diameter + 2, ball_diameter/2 + 2], center = true);\n    }\n    \n    // Add volleyball panels\n    color(\"ivory\") {\n        // Front panels\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([0, 0, ball_diameter/2 - 2])\n            rotate_extrude(angle = 60, $fn = 3)\n            translate([ball_diameter/2 - 8, 0, 0])\n            square([panel_length, panel_width], center = true);\n        }\n        \n        // Side panels\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60 + 30])\n            translate([0, 0, ball_diameter/2 - 15])\n            rotate_extrude(angle = 60, $fn = 3)\n            translate([ball_diameter/2 - 12, 0, 0])\n            square([panel_length * 0.8, panel_width * 0.8], center = true);\n        }\n    }\n    \n    // Panel seams\n    color(\"gray20\") {\n        for(i = [0:5]) {\n            rotate([0, 0, i * 60])\n            translate([0, 0, ball_diameter/2 - 1])\n            rotate_extrude(angle = 60, $fn = 2)\n            translate([ball_diameter/2 - 5, 0, 0])\n            square([0.5, 40], center = true);\n        }\n    }\n}\n\n// Create seat top\nmodule seat_top() {\n    difference() {\n        // Main seat\n        cylinder(h = seat_thickness, d = ball_diameter * 0.9, $fn = 64);\n        \n        // Center hole for weight reduction\n        cylinder(h = seat_thickness + 1, d = ball_diameter * 0.3, $fn = 32);\n        \n        // Ventilation holes\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n            translate([ball_diameter * 0.35, 0, -1])\n            cylinder(h = seat_thickness + 2, d = 4, $fn = 16);\n        }\n    }\n    \n    // Decorative rim\n    translate([0, 0, seat_thickness - 2])\n    cylinder(h = 2, d1 = ball_diameter * 0.9, d2 = ball_diameter * 0.92, $fn = 64);\n}\n\n// Create support legs\nmodule support_legs() {\n    // Three curved legs for stability\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120])\n        translate([ball_diameter/2 * 0.6, 0, 0])\n        rotate([90, 0, 0])\n        difference() {\n            // Main leg\n            cylinder(h = leg_height, d = leg_thickness * 2, $fn = 32);\n            \n            // Hollow center\n            cylinder(h = leg_height, d = leg_thickness * 2 - 4, $fn = 32);\n        }\n        \n        // Foot pad\n        translate([ball_diameter/2 * 0.6, 0, -leg_height])\n        rotate([0, 0, i * 120])\n        cube([leg_thickness * 3, leg_thickness * 8, leg_thickness], center = true);\n    }\n    \n    // Central support column\n    difference() {\n        cylinder(h = leg_height, d = leg_thickness * 3, $fn = 32);\n        cylinder(h = leg_height, d = leg_thickness * 3 - 4, $fn = 32);\n    }\n}\n\n// Assembly\ntranslate([0, 0, leg_height])\n    volleyball_ball();\n\ntranslate([0, 0, leg_height + ball_diameter/2 - seat_thickness])\n    seat_top();\n\nsupport_legs();",
    "renders": true
  },
  {
    "decorative_art": "golfball",
    "openscad_code": "// Golfball Decorative Stool / Side Table\n// Realistic style, medium complexity\n// Outer diameter ≈ 120 mm, height ≈ 180 mm\n\n// Parameters\nball_d = 90;           // Golf ball sphere diameter\nseat_thick = 8;        // Thickness of flat top for sitting\nleg_h = 90;            // Height of cylindrical legs\nleg_d = 12;            // Leg diameter\nwall = 2;              // Wall thickness for printing stability\ndimples = 336;         // Number of dimples on surface\ndimple_d = 6;          // Dimple cavity diameter\ndimple_depth = 1.5;    // How deep each dimple goes\nbase_r = 60;           // Radius of decorative base ring\n\n// Main body (hollow golf ball shell with seating top)\nmodule golfball_shell() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_d, $fn = 120);\n\n        // Hollow interior\n        sphere(d = ball_d - 2 * wall, $fn = 120);\n\n        // Flat seating surface on top\n        translate([0, 0, ball_d / 2 - seat_thick])\n            cube([ball_d * 2, ball_d * 2, seat_thick * 2], center = true);\n    }\n}\n\n// Single dimple module\nmodule dimple() {\n    difference() {\n        sphere(d = dimple_d, $fn = 16);\n        translate([0, 0, -dimple_depth])\n            sphere(d = dimple_d * 1.1, $fn = 16);\n    }\n}\n\n// Generate fibonacci spiral for realistic dimple placement\nmodule apply_dimples() {\n    golden_angle = 137.508 * 0.0174533; // radians\n    for (i = [0 : dimples - 1]) {\n        y = 1 - 2 * i / (dimples - 1.0);\n        theta = acos(y);\n        phi = i * golden_angle;\n        x = cos(phi) * sin(theta);\n        z = sin(phi) * sin(theta);\n        y = y;\n        translate([x * (ball_d / 2), z * (ball_d / 2), y * (ball_d / 2)])\n            rotate([0, 0, phi * 57.2958])\n            dimple();\n    }\n}\n\n// Decorative base ring for stability\nmodule base_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h = wall * 2, r = base_r, $fn = 100);\n        // Inner cutout\n        cylinder(h = wall * 2, r = base_r - wall * 2, $fn = 100);\n    }\n}\n\n// Structural legs (three columns for tripod stability)\nmodule legs() {\n    for (a = [0, 120, 240]) {\n        rotate([0, 0, a])\n        translate([base_r * 0.7, 0, -leg_h / 2])\n            cylinder(h = leg_h, d = leg_d, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    // Main golfball body\n    translate([0, 0, leg_h + ball_d / 2 - seat_thick])\n        golfball_shell();\n\n    // Dimples\n    translate([0, 0, leg_h + ball_d / 2 - seat_thick])\n        apply_dimples();\n\n    // Legs\n    legs();\n\n    // Base ring\n    translate([0, 0, 0])\n        base_ring();\n}",
    "renders": true
  },
  {
    "decorative_art": "pingpongball",
    "openscad_code": "// Ping Pong Ball Decorative Shelf Unit\n// Realistic style, medium complexity\n\n$fn = 50;\nwall_thickness = 2;\nball_diameter = 40;\nmodule_radius = 20;\n\n// Main ping pong ball sphere\nmodule ping_pong_ball(center=false) {\n    difference() {\n        sphere(d=ball_diameter);\n        // Seam detail\n        rotate([90,0,0]) \n            cylinder(h=ball_diameter+2, d=1, center=true);\n    }\n}\n\n// Shelf support brackets\nmodule support_bracket(length, height) {\n    difference() {\n        // Main bracket body\n        cube([length, height, wall_thickness*2]);\n        \n        // Lightening holes\n        for(i = [1:3]) {\n            translate([length/4*i, height/2, -1])\n                cylinder(h=wall_thickness+2, d=3);\n        }\n        \n        // Rounded edges\n        translate([length, height/2, wall_thickness])\n            rotate([0,90,0])\n                cylinder(h=height, d=wall_thickness*2);\n    }\n}\n\n// Decorative shelf surface\nmodule shelf_surface(width, depth) {\n    difference() {\n        // Main shelf\n        cube([width, depth, wall_thickness]);\n        \n        // Rounded front edge\n        translate([0, depth-wall_thickness/2, wall_thickness/2])\n            rotate([90,0,0])\n                cylinder(h=width, d=wall_thickness, center=true);\n        \n        // Ping pong ball recesses\n        for(x = [width/4:width/2:width*3/4]) {\n            for(y = [depth/3:depth/3:depth*2/3]) {\n                translate([x, y, wall_thickness+1])\n                    sphere(d=ball_diameter*0.8);\n            }\n        }\n    }\n}\n\n// Ball holder cups\nmodule ball_cup() {\n    difference() {\n        // Cup body\n        cylinder(h=10, d=ball_diameter+4);\n        \n        // Inner cavity\n        translate([0,0,2])\n            cylinder(h=10, d=ball_diameter+2);\n        \n        // Drainage hole\n        translate([0,0,-1])\n            cylinder(h=12, d=2);\n    }\n}\n\n// Main shelf assembly\nmodule ping_pong_shelf() {\n    // Base shelf\n    shelf_surface(120, 80);\n    \n    // Left support\n    translate([-wall_thickness, 0, 0])\n        support_bracket(wall_thickness, 60);\n    \n    // Right support\n    translate([120, 0, 0])\n        support_bracket(wall_thickness, 60);\n    \n    // Back support frame\n    translate([0, -wall_thickness, 0])\n        cube([120+wall_thickness*2, wall_thickness, 60]);\n    \n    // Vertical dividers\n    for(x = [30:30:90]) {\n        translate([x, 0, 0])\n            cube([wall_thickness, 80, 60]);\n    }\n    \n    // Ball holders on top\n    for(x = [20:20:100]) {\n        for(y = [20:40:60]) {\n            translate([x, y, wall_thickness+10])\n                ball_cup();\n            translate([x, y, wall_thickness+20])\n                ping_pong_ball();\n        }\n    }\n    \n    // Decorative balls on shelf surface\n    for(x = [15:30:105]) {\n        translate([x, 40, wall_thickness+ball_diameter/2+2])\n            ping_pong_ball();\n    }\n    \n    // Wall mounting holes\n    translate([10, -wall_thickness-1, 30])\n        cylinder(h=wall_thickness+2, d=5);\n    translate([110, -wall_thickness-1, 30])\n        cylinder(h=wall_thickness+2, d=5);\n}\n\n// Render the complete shelf\nping_pong_shelf();",
    "renders": true
  },
  {
    "decorative_art": "handball",
    "openscad_code": "// Handball Display Stand - Realistic Style, Medium Complexity\n// A decorative furniture piece to display a handball with proper support\n\n// Overall dimensions\nball_diameter = 58; // Standard handball size\nstand_width = 80;\nstand_depth = 80;\nstand_height = 120;\nwall_thickness = 2;\n\n// Main display stand\nmodule display_stand() {\n    // Base platform\n    difference() {\n        cube([stand_width, stand_depth, 15], center=true);\n        \n        // Weight reduction cavity\n        translate([0, 0, 7.5])\n            cube([stand_width - wall_thickness*2, stand_depth - wall_thickness*2, 15], center=true);\n    }\n    \n    // Decorative base trim\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([stand_width/2 - 5, 0, 7.5])\n                cube([10, 3, 15], center=true);\n    }\n    \n    // Central support column\n    difference() {\n        cylinder(h=stand_height-15, r=15, center=false);\n        translate([0, 0, -1])\n            cylinder(h=stand_height-13, r=13, center=false);\n    }\n    \n    // Decorative rings on column\n    for(pos = [30, 60, 90]) {\n        translate([0, 0, pos])\n            cylinder(h=3, r1=16, r2=16, center=false);\n    }\n    \n    // Ball support cradle\n    translate([0, 0, stand_height-10])\n        rotate([0, 90, 0])\n            difference() {\n                // Main cradle\n                cylinder(h=40, r=ball_diameter/2 + 5, center=true);\n                \n                // Cutout for ball\n                sphere(d=ball_diameter + 2);\n                \n                // Finger access holes\n                for(angle = [0:120:359]) {\n                    rotate([0, 0, angle])\n                        translate([0, ball_diameter/2 - 5, 0])\n                            cylinder(h=20, r=8, center=true);\n                }\n                \n                // Wall thickness adjustment\n                scale([0.8, 0.8, 1])\n                    sphere(d=ball_diameter + 2);\n            }\n}\n\n// Handball with realistic texture\nmodule handball() {\n    // Main ball\n    translate([0, 0, stand_height-10])\n        sphere(d=ball_diameter);\n    \n    // Grip pattern - raised ridges\n    for(lat = [30:30:150]) {\n        rotate([0, lat, 0])\n            translate([0, 0, 0])\n                rotate_extrude(angle=360, $fn=64)\n                    translate([ball_diameter/2 - 1, 0])\n                        square([2, 1]);\n    }\n    \n    // Grip pattern - longitudinal ridges\n    for(lon = [0:30:359]) {\n        rotate([0, 0, lon])\n            rotate_extrude(angle=30, $fn=32)\n                translate([ball_diameter/2 - 1, 0])\n                    square([2, 1]);\n    }\n    \n    // Branding area\n    translate([0, -ball_diameter/2 + 2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=0.5, r=12, center=true);\n}\n\n// Assembly\nunion() {\n    display_stand();\n    handball();\n    \n    // Small stability feet\n    translate([stand_width/2 - 10, stand_depth/2 - 10, -8])\n        cylinder(h=2, r=5);\n    translate([-stand_width/2 + 10, stand_depth/2 - 10, -8])\n        cylinder(h=2, r=5);\n    translate([stand_width/2 - 10, -stand_depth/2 + 10, -8])\n        cylinder(h=2, r=5);\n    translate([-stand_width/2 + 10, -stand_depth/2 + 10, -8])\n        cylinder(h=2, r=5);\n}",
    "renders": true
  },
  {
    "decorative_art": "waterpolo",
    "openscad_code": "// Waterpolo Ball Decorative Stool\n// Medium complexity realistic style furniture piece\n\n// Overall dimensions\nball_diameter = 80;\nleg_height = 120;\nseat_thickness = 8;\n\n// Waterpolo ball pattern\nmodule ball_pattern() {\n    // Main ball sphere\n    difference() {\n        sphere(d=ball_diameter);\n        \n        // Black stripes - waterpolo ball pattern\n        for (i = [0:1]) {\n            rotate([0, 0, i*90]) {\n                translate([0, 0, -ball_diameter/2-1])\n                    cube([ball_diameter/6, ball_diameter+2, ball_diameter+2], center=true);\n            }\n        }\n        \n        // Horizontal stripe\n        rotate([90, 0, 0]) {\n            translate([0, 0, -ball_diameter/2-1])\n                cube([ball_diameter/6, ball_diameter+2, ball_diameter+2], center=true);\n        }\n    }\n}\n\n// Ball segments in contrasting colors\nmodule ball_segments() {\n    color(\"white\") {\n        // Top segment\n        difference() {\n            sphere(d=ball_diameter);\n            translate([0, 0, -ball_diameter/6])\n                cube([ball_diameter+2, ball_diameter+2, ball_diameter/3], center=true);\n        }\n        \n        // Bottom segment\n        difference() {\n            sphere(d=ball_diameter);\n            translate([0, 0, ball_diameter/6])\n                cube([ball_diameter+2, ball_diameter+2, ball_diameter/3], center=true);\n        }\n    }\n    \n    color(\"black\") {\n        // Middle band\n        intersection() {\n            sphere(d=ball_diameter);\n            translate([0, 0, -ball_diameter/6])\n                cube([ball_diameter+2, ball_diameter+2, ball_diameter/3], center=true);\n        }\n    }\n}\n\n// Support structure with cylindrical legs\nmodule stool_base() {\n    // Central support column\n    cylinder(h=leg_height, d=ball_diameter/2, center=false);\n    \n    // Four legs\n    for (i = [0:3]) {\n        rotate([0, 0, i*90]) {\n            translate([ball_diameter/3, 0, 0]) {\n                cylinder(h=leg_height, d=10, center=false);\n            }\n        }\n    }\n    \n    // Base ring for stability\n    translate([0, 0, -1]) {\n        cylinder(h=5, d=ball_diameter*1.2, center=false);\n    }\n    \n    // Cross braces\n    for (i = [0:1]) {\n        rotate([0, 0, i*90]) {\n            translate([ball_diameter/3, 0, leg_height/2]) {\n                cube([ball_diameter/1.5, 5, 5], center=true);\n            }\n        }\n    }\n}\n\n// Seat top with ball integration\nmodule seat_top() {\n    // Main seat\n    translate([0, 0, leg_height]) {\n        cylinder(h=seat_thickness, d=ball_diameter*1.3, center=false);\n        \n        // Ball recess\n        translate([0, 0, seat_thickness/2]) {\n            sphere(d=ball_diameter+2);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    stool_base();\n    seat_top();\n    \n    // Ball positioned on seat\n    translate([0, 0, leg_height + seat_thickness/2]) {\n        ball_segments();\n        ball_pattern();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "lacrosseball",
    "openscad_code": "// Lacrosse Ball Decorative Stool\n// Realistic style, medium complexity\n\n// Dimensions\nball_d = 63; // Regulation lacrosse ball diameter\nwall_thk = 2; // 3D printable wall thickness\nleg_h = 100; // Stool leg height\nseat_d = 200; // Stool seat diameter\n\n// Lacrosse ball texture module\nmodule ball_texture(radius) {\n    // Hexagonal grip pattern\n    hex_size = 3;\n    hex_h = 0.5;\n    \n    for (i = [-30:30]) {\n        for (j = [-15:15]) {\n            if (i % 2 == 0) {\n                x_pos = j * hex_size * 1.73;\n                y_pos = i * hex_size * 1.5;\n            } else {\n                x_pos = (j + 0.5) * hex_size * 1.73;\n                y_pos = i * hex_size * 1.5;\n            }\n            \n            // Only place on surface\n            dist = sqrt(x_pos*x_pos + y_pos*y_pos);\n            if (dist < radius - 5) {\n                translate([x_pos, y_pos, 0]) {\n                    rotate([0, 0, 30]) {\n                        cylinder(h=hex_h, r=hex_size, $fn=6);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Lacrosse ball module\nmodule lacrosse_ball() {\n    difference() {\n        // Main ball\n        sphere(d=ball_d, $fn=64);\n        \n        // Hollow inside\n        sphere(d=ball_d - 2*wall_thk, $fn=64);\n    }\n    \n    // Surface texture\n    translate([0, 0, ball_d/2]) {\n        ball_texture(ball_d/2);\n    }\n    \n    // Seams\n    rotate([90, 0, 0]) {\n        cylinder(h=wall_thk, d=ball_d, $fn=64);\n    }\n}\n\n// Decorative leg support\nmodule leg_support() {\n    // Main support cylinder\n    cylinder(h=leg_h, d=20, $fn=32);\n    \n    // Decorative rings\n    for (i = [0:5]) {\n        translate([0, 0, i * 15]) {\n            cylinder(h=3, d=25, $fn=32);\n        }\n    }\n    \n    // Base plate\n    translate([0, 0, -2]) {\n        cylinder(h=4, d=40, $fn=32);\n    }\n}\n\n// Seat top with ball holder\nmodule seat_top() {\n    // Main seat disc\n    difference() {\n        cylinder(h=20, d=seat_d, $fn=64);\n        \n        // Ball cavity\n        translate([0, 0, 5]) {\n            sphere(d=ball_d + 2, $fn=64);\n        }\n    }\n    \n    // Support ribs\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([seat_d/2 - 30, -5, 10]) {\n                cube([60, 10, 10]);\n            }\n        }\n    }\n}\n\n// Assembly\nmodule stool() {\n    // Central leg\n    translate([0, 0, 0]) {\n        leg_support();\n    }\n    \n    // Seat top\n    translate([0, 0, leg_h]) {\n        seat_top();\n    }\n    \n    // Lacrosse ball\n    translate([0, 0, leg_h + 5]) {\n        lacrosse_ball();\n    }\n    \n    // Stability feet (3 legs)\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120]) {\n            translate([0, 35, 0]) {\n                cylinder(h=10, d=8, $fn=16);\n            }\n        }\n    }\n}\n\n// Render the stool\nstool();",
    "renders": true
  },
  {
    "decorative_art": "fieldhockey",
    "openscad_code": "// Fieldhockey Stick Stool (realistic medium-complexity furniture piece)\n// A decorative stool shaped like a field-hockey stick with structural frame\n\nmodule stickBlade() {\n    // Main blade – 2 mm wall, hollow core\n    difference() {\n        // Solid blade\n        translate([-45, -3, 0])\n            cube([90, 30, 6]);\n        // Hollow cavity\n        translate([-43, -1, 2])\n            cube([86, 26, 4]);\n    }\n}\n\nmodule stickHandle() {\n    // Handle tube – 2 mm wall, hollow core\n    difference() {\n        // Outer cylinder\n        translate([0, 0, 6])\n            cylinder(h=120, d=12, $fn=32);\n        // Inner cylinder\n        translate([0, 0, 8])\n            cylinder(h=118, d=8, $fn=32);\n    }\n}\n\nmodule jointPlate() {\n    // Reinforcement plate at stick junction\n    translate([-5, -7, 5])\n        cube([10, 14, 2]);\n}\n\nmodule seatTop() {\n    // Seat disk – 2 mm wall, hollow underside\n    difference() {\n        // Outer disk\n        cylinder(h=5, d=120, $fn=64);\n        // Underside cavity\n        translate([0, 0, 3])\n            cylinder(h=3, d=116, $fn=64);\n    }\n}\n\nmodule legRing() {\n    // Structural ring under seat for strength\n    translate([0, 0, 2])\n        cylinder(h=3, d=110, $fn=64);\n}\n\nmodule decorativeGrip() {\n    // Spiraled grip pattern on handle\n    for (a=[0:30:360]) {\n        rotate([0, 0, a])\n            translate([5.5, 0, 0])\n                cylinder(h=120, d=2, $fn=6);\n    }\n}\n\nmodule supportStrut() {\n    // Diagonal support strut from handle to seat\n    translate([0, 40, 60]) {\n        rotate([90, 0, 0])\n            cylinder(h=40, d=6, $fn=16);\n    }\n}\n\n// Assemble stool\nunion() {\n    // Blade serves as foot rest\n    stickBlade();\n    \n    // Handle becomes leg\n    stickHandle();\n    \n    // Joint reinforcement\n    jointPlate();\n    \n    // Seat top\n    translate([0, 0, 126])\n        seatTop();\n    \n    // Structural ring under seat\n    translate([0, 0, 126])\n        legRing();\n    \n    // Decorative grip\n    decorativeGrip();\n    \n    // Four support struts\n    for (a=[0:90:270]) {\n        rotate([0, 0, a])\n            supportStrut();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "icehockey",
    "openscad_code": "// Hockey Stick Side Table\n// A small 3D-printable side table shaped like an ice-hockey stick and puck\n// Overall height ≈ 350 mm, printable on most FDM printers when split or printed vertically\n\nblade_w   = 60;   // blade width\nblade_h   = 10;   // blade thickness (2 mm shells + infill)\nblade_l   = 110;  // blade length along shaft axis\nshaft_d   = 30;   // shaft diameter\nshaft_l   = 240;  // shaft length from heel to butt\npuck_d    = 76;   // regulation puck Ø\npuck_h    = 25;   // puck height\nwall_t    = 2;    // 3D-print friendly wall thickness\n$fn       = 48;   // smooth curves\n\n// --- Main Assembly ----------------------------------------------------------\nunion() {\n    // Puck base\n    translate([0, 0, puck_h/2])\n        puck();\n\n    // Shaft rising from center of puck\n    translate([0, 0, puck_h])\n        rotate([90, 0, 0])\n            shaft();\n\n    // Blade attached to shaft\n    translate([0, (shaft_l - blade_l/2), puck_h + shaft_d/2])\n        rotate([0, 90, 0])\n            blade();\n}\n\n// --- Modules ----------------------------------------------------------------\nmodule puck() {\n    difference() {\n        // outer puck disc\n        cylinder(d = puck_d, h = puck_h);\n        // hollow core to save material\n        cylinder(d = puck_d - 2*wall_t, h = puck_h + 0.1);\n    }\n    // add printed ridges for grip\n    for(a = [0:30:359])\n        rotate([0, 0, a])\n            translate([puck_d/2 - wall_t, -wall_t/2, 0])\n                cube([wall_t, wall_t, puck_h]);\n}\n\nmodule shaft() {\n    difference() {\n        cylinder(d = shaft_d, h = shaft_l);\n        cylinder(d = shaft_d - 2*wall_t, h = shaft_l + 0.1);\n    }\n}\n\nmodule blade() {\n    difference() {\n        // outer blade shape\n        hull() {\n            cube([blade_l, blade_h, blade_w], center = true);\n            translate([blade_l/2 - blade_h, 0, 0])\n                sphere(d = blade_h);\n        }\n\n        // inner hollow\n        hull() {\n            cube([blade_l - 2*wall_t, blade_h + 0.1, blade_w - 2*wall_t], center = true);\n            translate([blade_l/2 - blade_h, 0, 0])\n                sphere(d = blade_h - 2*wall_t);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "rugbyball",
    "openscad_code": "// Rugbyball Decorative Stool / Side Table\n// Realistic style, medium complexity\n// Overall dimensions: 120mm height x 220mm length x 140mm width\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main rugbyball shell - prolate spheroid\nmodule rugbyball_shell(major=110, minor=70) {\n    difference() {\n        // Outer ellipsoid\n        scale([1, 1, 0.7])\n        sphere(r=major, $fn=60);\n        \n        // Inner hollow\n        translate([0, 0, wall])\n        scale([1, 1, 0.7])\n        sphere(r=major-wall, $fn=60);\n        \n        // Bottom opening for furniture base\n        translate([0, 0, -major*0.7])\n        cube([major*2, major*2, major], center=true);\n    }\n}\n\n// Seam rings around rugbyball\nmodule seam_ring(radius, height, width) {\n    rotate_extrude($fn=60)\n    translate([radius, 0, 0])\n    square([width, height]);\n}\n\n// Panel stitching details\nmodule panel_stitch() {\n    translate([0, 0, 5])\n    for(i=[-3:3]) {\n        translate([i*15, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=30, r=0.5, center=true, $fn=8);\n    }\n}\n\n// Structural base ring\nmodule base_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h=15, r1=65, r2=70, center=false, $fn=60);\n        \n        // Inner hollow\n        translate([0, 0, wall])\n        cylinder(h=15, r1=63-wall, r2=68-wall, center=false, $fn=60);\n    }\n}\n\n// Support legs (4 legs for stability)\nmodule support_leg() {\n    // Tapered leg design\n    translate([0, 0, 7.5])\n    cylinder(h1=15, h2=25, r1=8, r2=5, center=true, $fn=6);\n}\n\n// Decorative grip texture pattern\nmodule grip_pattern() {\n    for(a=[0:30:330]) {\n        rotate([0, 0, a])\n        translate([0, 0, -2])\n        rotate_extrude($fn=60)\n        translate([65, 0, 0])\n        square([2, 4]);\n    }\n}\n\n// Assembly\nunion() {\n    // Rugbyball body\n    translate([0, 0, 35])\n    rugbyball_shell();\n    \n    // Seams\n    translate([0, 0, 35])\n    rotate([0, 90, 0])\n    seam_ring(70, 4, 2);\n    \n    translate([0, 0, 35])\n    rotate([90, 0, 0])\n    seam_ring(70, 4, 2);\n    \n    // Panel details\n    translate([0, 0, 35])\n    rotate([0, 90, 0])\n    panel_stitch();\n    \n    // Base structure\n    translate([0, 0, 0])\n    base_ring();\n    \n    // Support legs\n    for(i=[0:90:270]) {\n        rotate([0, 0, i])\n        translate([50, 0, 0])\n        support_leg();\n    }\n    \n    // Grip texture on upper half\n    translate([0, 0, 35])\n    grip_pattern();\n}",
    "renders": true
  },
  {
    "decorative_art": "cricketball",
    "openscad_code": "// Cricket Ball Side Table - Realistic Style\n// Dimensions in mm, optimized for 3D printing\n\n$fn = 50;  // Smooth curves\n\n// Overall dimensions\nball_diameter = 120;\nseam_width = 3;\nstand_height = 40;\nbase_diameter = 80;\n\n// Wall thickness\nwall_thickness = 2;\n\n// Main cricket ball body\nmodule cricket_ball() {\n    difference() {\n        // Outer ball sphere\n        sphere(d = ball_diameter);\n        \n        // Hollow interior\n        sphere(d = ball_diameter - 2 * wall_thickness);\n    }\n}\n\n// Raised seam\nmodule ball_seam() {\n    // Seam runs around the circumference\n    translate([0, 0, -ball_diameter/2])\n    rotate_extrude(angle = 360) {\n        translate([ball_diameter/2 - seam_width/2, 0, 0])\n        square([seam_width, ball_diameter]);\n    }\n}\n\n// Six seam stitches\nmodule stitches() {\n    stitch_length = 15;\n    stitch_width = 1.5;\n    stitch_height = 1;\n    \n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([ball_diameter/2 - seam_width/2 - stitch_length/2, 0, 0])\n        rotate([90, 0, 0])\n        cube([stitch_length, stitch_width, stitch_height], center = true);\n    }\n}\n\n// Structural support stand\nmodule stand() {\n    // Central post\n    cylinder(h = stand_height, d1 = base_diameter/3, d2 = ball_diameter/4);\n    \n    // Base plate\n    translate([0, 0, -stand_height])\n    difference() {\n        cylinder(h = wall_thickness * 2, d = base_diameter);\n        cylinder(h = wall_thickness * 2 + 0.1, d = base_diameter - wall_thickness * 2);\n    }\n}\n\n// Decorative cricket grip texture\nmodule grip_texture() {\n    grip_size = 3;\n    rows = 6;\n    \n    for (theta = [0:30:330]) {\n        for (phi = [0:30:150]) {\n            rotate([0, theta, phi])\n            translate([ball_diameter/2 - wall_thickness/2, 0, 0])\n            sphere(d = grip_size);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main ball body\n    translate([0, 0, stand_height + ball_diameter/2])\n    cricket_ball();\n    \n    // Seam details\n    translate([0, 0, stand_height + ball_diameter/2])\n    ball_seam();\n    \n    translate([0, 0, stand_height + ball_diameter/2])\n    stitches();\n    \n    // Stand structure\n    stand();\n    \n    // Optional grip texture (comment out for smoother finish)\n    // translate([0, 0, stand_height + ball_diameter/2])\n    // grip_texture();\n}",
    "renders": true
  },
  {
    "decorative_art": "bowlingball",
    "openscad_code": "// Bowling Ball Decorative Stool / Side Table\n// Realistic style, medium complexity\n// Overall height: 90 mm, ball diameter: 80 mm, base diameter: 120 mm\n\n// Parameters\nball_d = 80;            // Bowling ball diameter\nball_r = ball_d / 2;\nbase_h = 30;            // Base height\nleg_h = 25;             // Leg height between ball and base\nwall_t = 2;             // Wall thickness for 3D printing\nfinger_hole_d = 12;     // Finger hole diameter\nfinger_hole_depth = 18; // Finger hole depth\ndetail_r = 1;           // Radius for small details\n\n// Bowling ball module\nmodule bowling_ball() {\n    difference() {\n        // Main sphere\n        sphere(d = ball_d, $fn = 100);\n        \n        // Finger holes - arranged in typical tri-grip pattern\n        // Thumb hole\n        translate([0, -ball_r * 0.3, ball_r - finger_hole_depth])\n            rotate([0, 0, 0])\n            cylinder(h = finger_hole_depth * 2, d = finger_hole_d + 2, $fn = 32);\n        \n        // Finger holes\n        for (i = [0:1]) {\n            angle = i == 0 ? 25 : -25;\n            translate([0, ball_r * 0.2, ball_r - finger_hole_depth])\n                rotate([0, angle, 0])\n                cylinder(h = finger_hole_depth * 2, d = finger_hole_d, $fn = 32);\n        }\n        \n        // Decorative ring groove\n        rotate([90, 0, 0])\n            translate([0, 0, -ball_r - 1])\n            cylinder(h = wall_t * 1.5, d = ball_d * 0.9, $fn = 100);\n    }\n    \n    // Bowling ball surface texture - small dimples\n    for (lat = [30:30:150]) {\n        for (lon = [0:30:360]) {\n            rotate([lat, 0, lon])\n            translate([0, 0, ball_r - 0.5])\n            sphere(r = detail_r, $fn = 8);\n        }\n    }\n}\n\n// Decorative base with structural support\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_h, d = 120, $fn = 64);\n        \n        // Hollow center for weight reduction\n        cylinder(h = base_h, d = 100, $fn = 64);\n    }\n    \n    // Decorative rings\n    for (i = [1:3]) {\n        translate([0, 0, base_h/4 * i])\n        difference() {\n            cylinder(h = 2, d = 120 - i * 10, $fn = 64);\n            cylinder(h = 2, d = 120 - i * 10 - wall_t * 2, $fn = 64);\n        }\n    }\n    \n    // Support ribs\n    for (i = [0:45:360]) {\n        rotate([0, 0, i])\n        translate([40, 0, 0])\n        cube([20, wall_t * 2, base_h]);\n    }\n}\n\n// Connection leg between ball and base\nmodule leg() {\n    // Tapered leg for stability\n    cylinder(h1 = leg_h, h2 = leg_h, d1 = 50, d2 = 40, $fn = 32);\n    \n    // Internal support cylinder\n    cylinder(h = leg_h, d = 36, $fn = 32);\n    \n    // Decorative fluting\n    for (i = [0:30:360]) {\n        rotate([0, 0, i])\n        translate([20, 0, 0])\n        cube([10, wall_t, leg_h]);\n    }\n}\n\n// Assembly\ntranslate([0, 0, base_h + leg_h + ball_r])\nrotate([0, 0, 0])\nbowling_ball();\n\ntranslate([0, 0, base_h + leg_h/2])\nleg();\n\ntranslate([0, 0, base_h/2])\nbase();",
    "renders": true
  },
  {
    "decorative_art": "billiards",
    "openscad_code": "// Billiards Table - Realistic style, medium complexity\n// 3D printable decorative furniture piece\n\n// Dimensions in mm\ntable_length = 120;\ntable_width = 60;\ntable_height = 30;\npocket_size = 8;\nleg_height = 20;\nrail_height = 6;\nball_diameter = 5;\n\n$fn = 32;\n\nmodule main_table() {\n    // Table surface with green felt\n    color(\"darkgreen\") \n    translate([0, 0, table_height - 2])\n    cube([table_length - 8, table_width - 8, 2], center = true);\n    \n    // Table frame\n    difference() {\n        // Outer frame\n        color(\"brown\")\n        cube([table_length, table_width, table_height], center = true);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n        cube([table_length - 4, table_width - 4, table_height], center = true);\n    }\n}\n\nmodule rails() {\n    // Create rails around table\n    for (i = [-1, 1]) {\n        // Long side rails\n        translate([0, i * (table_width/2 - 2), table_height + rail_height/2])\n        color(\"brown\")\n        cube([table_length - 4, 4, rail_height], center = true);\n        \n        // Short side rails\n        translate([i * (table_length/2 - 2), 0, table_height + rail_height/2])\n        color(\"brown\")\n        cube([4, table_width - 4, rail_height], center = true);\n    }\n}\n\nmodule pockets() {\n    // Corner pockets\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (table_length/2 - 5), y * (table_width/2 - 5), table_height])\n            cylinder(h = 5, r = pocket_size/2, center = false);\n        }\n    }\n    \n    // Side pockets (middle of long sides)\n    for (y = [-1, 1]) {\n        translate([0, y * (table_width/2 - 5), table_height])\n        cylinder(h = 5, r = pocket_size/2, center = false);\n    }\n}\n\nmodule legs() {\n    // Four table legs\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (table_length/2 - 10), y * (table_width/2 - 10), leg_height/2])\n            difference() {\n                // Main leg\n                color(\"brown\")\n                cylinder(h = leg_height, r = 4, center = true);\n                \n                // Decorative groove\n                translate([0, 0, 2])\n                cylinder(h = leg_height - 4, r = 3, center = true);\n            }\n            \n            // Leg support crossbar\n            if (x == -1 && y == -1) {\n                translate([0, -table_width/2 + 10, leg_height - 3])\n                color(\"brown\")\n                cube([table_length - 20, 2, 2], center = true);\n            }\n            if (x == -1 && y == 1) {\n                translate([table_length/2 - 10, 0, leg_height - 3])\n                color(\"brown\")\n                cube([2, table_width - 20, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule balls() {\n    // Rack of balls on table\n    colors = [\"white\", \"yellow\", \"blue\", \"red\", \"purple\", \"orange\", \"green\", \"maroon\"];\n    \n    for (i = [0:7]) {\n        // Triangle formation\n        row = floor((sqrt(8*i + 1) - 1)/2);\n        col = i - (row*(row+1))/2;\n        \n        translate([\n            -table_length/4 + col * ball_diameter * 0.9,\n            table_width/4 - row * ball_diameter * 0.8,\n            table_height + 2\n        ])\n        color(colors[i % len(colors)])\n        sphere(d = ball_diameter);\n    }\n}\n\nmodule cue_stick() {\n    // Cue stick resting on table\n    translate([table_length/3, 0, table_height + 1])\n    rotate([90, 0, 0])\n    color(\"beige\")\n    cylinder(h = 40, r = 1, center = true);\n    \n    // Cue tip\n    translate([table_length/3 + 20, 0, table_height + 1])\n    rotate([90, 0, 0])\n    color(\"blue\")\n    cylinder(h = 2, r = 1.2, center = true);\n}\n\n// Assembly\nunion() {\n    main_table();\n    rails();\n    difference() {\n        main_table();\n        pockets();\n    }\n    legs();\n    balls();\n    cue_stick();\n}",
    "renders": true
  },
  {
    "decorative_art": "snookerball",
    "openscad_code": "// Snooker Ball Decorative Furniture Stand\n// Realistic style with medium complexity\n\nball_d = 60;  // Main snooker ball diameter\nwall = 2;     // Wall thickness for 3D printing\nbase_h = 8;   // Base height\npillar_h = 35; // Central pillar height\ndimple_r = 3;  // Dimple radius for number\n\n// Colors (for preview only)\ncolor(\"white\") \nunion() {\n    \n    // Decorative base plate\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h = base_h, r1 = ball_d * 0.9, r2 = ball_d * 0.85, $fn = 64);\n        cylinder(h = base_h + 0.1, r1 = ball_d * 0.85 - wall, r2 = ball_d * 0.8 - wall, $fn = 64);\n    }\n    \n    // Base decorative ring\n    translate([0, 0, base_h - 2])\n    difference() {\n        cylinder(h = 4, r = ball_d * 0.9, $fn = 64);\n        cylinder(h = 4.2, r = ball_d * 0.85, $fn = 64);\n    }\n    \n    // Support pillar with decorative grooves\n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([0, 0, base_h])\n        difference() {\n            cylinder(h = pillar_h, r = ball_d * 0.25, $fn = 6);\n            translate([0, 0, 0])\n            cylinder(h = pillar_h + 0.1, r = ball_d * 0.25 - wall, $fn = 6);\n        }\n    }\n    \n    // Main snooker ball\n    translate([0, 0, base_h + pillar_h])\n    difference() {\n        sphere(d = ball_d, $fn = 64);\n        // Hollow interior for printing\n        sphere(d = ball_d - wall * 2, $fn = 64);\n    }\n    \n    // Number \"8\" dimples on ball\n    module dimple(x, y, z) {\n        translate([x, y, z])\n        sphere(r = dimple_r, $fn = 16);\n    }\n    \n    // Top dimples forming \"8\" pattern\n    for (a = [0:45:315]) {\n        rotate([0, 0, a])\n        translate([0, ball_d * 0.35, ball_d * 0.3])\n        dimple(0, 0, 0);\n    }\n    \n    // Middle dimples for \"8\"\n    for (a = [0:30:330]) {\n        rotate([0, 0, a])\n        translate([0, ball_d * 0.25, 0])\n        dimple(0, 0, 0);\n    }\n    \n    // Lower dimples for \"8\"\n    for (a = [0:45:315]) {\n        rotate([0, 0, a])\n        translate([0, ball_d * 0.35, -ball_d * 0.3])\n        dimple(0, 0, 0);\n    }\n    \n    // Central dimple\n    translate([0, 0, 0])\n    dimple(0, 0, 0);\n    \n    // Decorative feet\n    module foot(x, y) {\n        translate([x, y, 0])\n        cylinder(h = 4, r1 = 3, r2 = 2, $fn = 16);\n    }\n    \n    foot(ball_d * 0.6, ball_d * 0.6);\n    foot(-ball_d * 0.6, ball_d * 0.6);\n    foot(ball_d * 0.6, -ball_d * 0.6);\n    foot(-ball_d * 0.6, -ball_d * 0.6);\n    \n    // Reinforcement ribs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, ball_d * 0.3, base_h / 2])\n        cube([wall * 2, ball_d * 0.6, base_h], center = true);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "squashball",
    "openscad_code": "// Squashball-inspired decorative side table\n// Dimensions: 120mm diameter, 450mm height\n// Features hollow ball storage compartment with lattice base\n\n$fn = 36;\n\n// Main parameters\nball_diameter = 100;\ntable_height = 450;\nleg_thickness = 8;\nwall_thickness = 2;\n\n// Main squashball body (hollow sphere)\nmodule squashball_body() {\n    difference() {\n        // Outer sphere\n        sphere(d = ball_diameter);\n        \n        // Inner hollow space\n        sphere(d = ball_diameter - wall_thickness*2);\n        \n        // Bottom opening for access\n        translate([0, 0, -ball_diameter/2])\n            cylinder(h = ball_diameter/4, d = ball_diameter/2, center = true);\n    }\n}\n\n// Squashball seam pattern\nmodule ball_seams() {\n    // Vertical seam\n    rotate([90, 0, 0])\n        cylinder(h = ball_diameter + 2, d = 3, center = true);\n    \n    // Horizontal seams (two circles)\n    for(i = [-1, 1]) {\n        translate([0, 0, i * ball_diameter/4])\n            rotate_extrude()\n                translate([ball_diameter/2 - 1.5, 0, 0])\n                    circle(d = 3);\n    }\n}\n\n// Decorative lattice base\nmodule lattice_base() {\n    difference() {\n        // Solid base cylinder\n        cylinder(h = 8, d = ball_diameter + 20, center = true);\n        \n        // Hexagonal pattern cutouts\n        for(r = [0:60:359]) {\n            rotate([0, 0, r])\n                for(dist = [20:20:40]) {\n                    translate([dist, 0, 0])\n                        cylinder(h = 10, d = 8, center = true);\n                }\n        }\n    }\n}\n\n// Structural legs (3 legs for stability)\nmodule table_legs() {\n    for(i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([ball_diameter/2 + 10, 0, -table_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h = table_height - ball_diameter/2, d = leg_thickness);\n    }\n}\n\n// Top rim detail\nmodule top_rim() {\n    difference() {\n        // Outer rim\n        cylinder(h = 15, d = ball_diameter + 20, center = true);\n        \n        // Inner cutout\n        cylinder(h = 16, d = ball_diameter + 16, center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, table_height/2])\n    squashball_body();\n\ntranslate([0, 0, ball_diameter/2 + 7.5])\n    top_rim();\n\ntranslate([0, 0, -table_height/2 + 4])\n    lattice_base();\n\ntable_legs();\n\n// Add seam details to ball\ntranslate([0, 0, table_height/2])\n    color(\"black\")\n        ball_seams();",
    "renders": true
  },
  {
    "decorative_art": "badminton",
    "openscad_code": "// Badminton Shuttlecock Decorative Lamp Stand\n// Dimensions in mm, 3D-printable with 2 mm walls\n// Overall height: 120 mm, base diameter: 80 mm\n\nmodule feather_vane(index, count) {\n    // Create one feather vane\n    angle = 360 * index / count;\n    translate([0, 0, 75])\n    rotate([0, 0, angle])\n    translate([8, 0, 0])\n    rotate([0, 90, 0])\n    scale([1, 0.3, 1])\n    cylinder(h = 25, r1 = 1.5, r2 = 3, $fn = 6);\n}\n\nmodule shuttlecock_body() {\n    // Cork base with rounded bottom\n    difference() {\n        union() {\n            cylinder(h = 15, r = 12, $fn = 32);\n            translate([-12, -12, 15])\n            cube([24, 24, 5]);\n        }\n        translate([0, 0, -1])\n        cylinder(h = 17, r = 10, $fn = 32);\n    }\n}\n\nmodule feather_cone() {\n    // Cone holding the feathers\n    cylinder(h = 10, r1 = 12, r2 = 8, $fn = 32);\n}\n\nmodule feathers() {\n    // 16 feather vanes in a circle\n    for (i = [0:15]) {\n        feather_vane(i, 16);\n    }\n}\n\nmodule lamp_base() {\n    // Decorative base with stepped design\n    difference() {\n        union() {\n            cylinder(h = 5, r = 40, $fn = 64);\n            translate([0, 0, 5])\n            cylinder(h = 5, r = 35, $fn = 64);\n            translate([0, 0, 10])\n            cylinder(h = 10, r = 30, $fn = 64);\n        }\n        // Central hole for wire routing\n        translate([0, 0, -1])\n        cylinder(h = 17, r = 8, $fn = 32);\n    }\n}\n\nmodule support_rod() {\n    // Central support rod\n    cylinder(h = 60, r = 2.5, $fn = 16);\n}\n\n// Main assembly\nunion() {\n    // Base assembly\n    lamp_base();\n    \n    // Support structure\n    translate([0, 0, 20])\n    support_rod();\n    \n    // Shuttlecock assembly\n    translate([0, 0, 80])\n    union() {\n        shuttlecock_body();\n        translate([0, 0, 15])\n        feather_cone();\n        feathers();\n    }\n    \n    // Decorative ring at junction\n    translate([0, 0, 80])\n    difference() {\n        cylinder(h = 3, r = 15, $fn = 32);\n        cylinder(h = 3.5, r = 13, $fn = 32);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "racquetball",
    "openscad_code": "// Racquetball Desk Organiser (Medium Realism)\n// Holds pens/pencils in the ball segment, paperclips in the racquet head, sticky notes in the handle base\n// Overall footprint ~110 mm x 80 mm, height 90 mm – printable without supports\n\n$fn = 32;               // Smooth curves\nwall = 2;               // 3D-printable wall thickness\nscale_factor = 1;       // Change to scale entire model\n\n// ---------- Colour constants ----------\ncolor_ball   = \"royalblue\";\ncolor_handle = \"darkslategray\";\ncolor_rim    = \"black\";\ncolor_face   = \"dimgray\";\n\n// ---------- Racquetball segment ----------\nmodule ball_shell(h=45, r=25) {\n    difference() {\n        color(color_ball) sphere(r);\n        translate([0, 0, -h/2]) cube([r*2.2, r*2.2, h], center=true);\n    }\n}\n\n// Racquetball seam rings\nmodule seam_ring(r=25, h=1, rot=0) {\n    rotate([0, 0, rot])\n        color(color_rim) cylinder(h=h, r1=r, r2=r, center=true);\n}\n\n// ---------- Racquet head ----------\nmodule racquet_head(w=60, h=5, throat=15) {\n    difference() {\n        // Outer oval\n        linear_extrude(height=h) offset(delta=wall) scale([1, 0.65]) circle(d=w);\n        // Inner strings pattern\n        for (i = [-w/2+throat : 6 : w/2-throat])\n            color(color_face) for (j = [-w/2+throat : 6 : w/2-throat]) {\n                translate([i, j, -0.1]) cube([1.5, 1.5, h+0.2]);\n            }\n    }\n}\n\n// ---------- Handle ----------\nmodule handle(l=70, base_d=22, tip_d=20) {\n    color(color_handle) {\n        // Tapered grip\n        cylinder(h=l, r1=base_d/2, r2=tip_d/2);\n        // Decorative rings every 15 mm\n        for (z = [5 : 15 : l-5])\n            translate([0, 0, z]) cylinder(h=1.5, r1=base_d/2+0.5, r2=base_d/2+0.5);\n    }\n}\n\n// ---------- Foot ring (base) ----------\nmodule foot_ring(d=22, h=4) {\n    color(color_rim) cylinder(h=h, r1=d/2+2, r2=d/2+2);\n}\n\n// ---------- Assembly ----------\nunion() {\n    scale(scale_factor) {\n        // Racquet head\n        translate([0, 0, 70]) racquet_head();\n        \n        // Handle shaft\n        translate([0, 0, 35]) rotate([90, 0, 0]) handle();\n        \n        // Ball segment (pen holder)\n        translate([0, 0, 45]) ball_shell();\n        for (a = [0 : 90 : 270]) translate([0, 0, 45]) seam_ring(r=25, rot=a);\n        \n        // Foot\n        translate([0, 0, 0]) foot_ring();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "softball",
    "openscad_code": "// Softball Table Lamp – OpenSCAD\n// 80 mm Ø softball, sits on a 90 mm Ø lamp base\n// Wall thickness 2 mm throughout, all parts printable without supports\n\n// global parameters\nsoftball_d = 80;        // core ball\nleather_th = 2;         // leather shell\nstitch_th  = 1.2;       // stitch beads\nbase_d      = 90;       // lamp base\nbase_h      = 20;       // base thickness\npole_h      = 50;       // lamp pole\npole_d      = 8;        // pole diameter\nfoot_h      = 5;        // rubber foot\n\n// ---------- softball ----------\n\nmodule softball() {\n    difference() {\n        // outer leather shell\n        sphere(d = softball_d);\n        \n        // hollow cavity\n        sphere(d = softball_d - 2*leather_th);\n    }\n    \n    // seam – two perpendicular cylinders intersected with ball\n    intersection() {\n        sphere(d = softball_d);\n        rotate([0, 0, 45])\n            cube([softball_d*1.5, leather_th, softball_d*1.5], center = true);\n    }\n    intersection() {\n        sphere(d = softball_d);\n        rotate([0, 90, 45])\n            cube([softball_d*1.5, leather_th, softball_d*1.5], center = true);\n    }\n    \n    // red stitches – two rows along the seam\n    for (a = [0:15:345]) {\n        translate([0, 0, softball_d/2*cos(a*2)])\n            rotate([0, a, 0])\n                translate([0, 0, softball_d/2*sin(a*2)])\n                    sphere(d = stitch_th);\n    }\n}\n\n// ---------- lamp base ----------\n\nmodule lamp_base() {\n    union() {\n        // main base disc\n        cylinder(h = base_h, d = base_d, $fn = 72);\n        \n        // decorative ring on top\n        translate([0, 0, base_h])\n            cylinder(h = 3, d1 = base_d, d2 = base_d - 8, $fn = 72);\n        \n        // central pole hole\n        difference() {\n            cylinder(h = base_h + 3, d = pole_d + 6, $fn = 32);\n            cylinder(h = base_h + 3, d = pole_d + 2, $fn = 32);\n        }\n    }\n}\n\n// ---------- lamp pole ----------\n\nmodule lamp_pole() {\n    cylinder(h = pole_h, d = pole_d, $fn = 32);\n}\n\n// ---------- rubber feet (4) ----------\n\nmodule rubber_feet() {\n    for (ang = [0:90:270]) {\n        rotate([0, 0, ang])\n            translate([base_d/2 - 8, 0, -foot_h])\n                cylinder(h = foot_h, d = 6, $fn = 20);\n    }\n}\n\n// ---------- assemble ----------\n\ntranslate([0, 0, foot_h])\n    lamp_base();\n    \ntranslate([0, 0, foot_h + base_h])\n    lamp_pole();\n    \ntranslate([0, 0, foot_h + base_h + pole_h])\n    softball();\n    \ntranslate([0, 0, -foot_h])\n    rubber_feet();",
    "renders": true
  },
  {
    "decorative_art": "kickball",
    "openscad_code": "// Realistic kickball furniture - a decorative side table with kickball accent\n// Overall dimensions: 120mm diameter ball on 220mm tall table\n\n// Parameters\nball_d = 120;           // Kickball diameter in mm\nwall_t = 2;             // Wall thickness for 3D printing\nleg_h = 100;            // Table leg height\nbase_d = 180;           // Base diameter\nbase_h = 20;            // Base thickness\ntop_t = 8;              // Table top thickness\n\n// Kickball module with realistic paneling\nmodule kickball(diameter, wall) {\n    radius = diameter/2;\n    \n    // Main ball sphere\n    difference() {\n        sphere(r=radius);\n        \n        // Cut panel grooves for realistic appearance\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([0, 0, -radius-1])\n                    cube([radius*2, wall, radius*2], center=true);\n        }\n        \n        // Top and bottom panel cuts\n        rotate([90, 0, 0])\n            for(i=[0:2]) {\n                rotate([0, 0, i*120])\n                    translate([0, 0, -radius-1])\n                        cube([radius*2, wall, radius*2], center=true);\n            }\n    }\n    \n    // Add raised seams between panels\n    seam_w = 1.5;\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([0, 0, 0])\n                rotate_extrude(angle=180, $fn=20)\n                    translate([radius-0.5, 0, 0])\n                        square([seam_w, 1]);\n    }\n}\n\n// Decorative table leg with fluting\nmodule leg(height, diameter) {\n    segments = 8;\n    flute_depth = 1.5;\n    \n    difference() {\n        // Main leg cylinder\n        cylinder(h=height, d=diameter, $fn=segments*3);\n        \n        // Add fluted grooves for classical furniture style\n        for(i=[0:segments-1]) {\n            rotate([0, 0, i*(360/segments)])\n                translate([diameter/2 - flute_depth, 0, 0])\n                    cube([flute_depth*2, diameter/4, height+1], center=true);\n        }\n    }\n}\n\n// Decorative base with stepped profile\nmodule table_base(diameter, height) {\n    difference() {\n        union() {\n            // Main base\n            cylinder(h=height, d=diameter);\n            \n            // Decorative step\n            translate([0, 0, height])\n                cylinder(h=height/3, d=diameter*0.8);\n        }\n        \n        // Center hole for leg\n        translate([0, 0, -1])\n            cylinder(h=height*2, d=20);\n    }\n}\n\n// Table top with decorative edge\nmodule table_top(diameter, thickness) {\n    radius = diameter/2;\n    \n    difference() {\n        union() {\n            // Main top\n            cylinder(h=thickness, d=diameter);\n            \n            // Decorative beveled edge\n            translate([0, 0, thickness])\n                cylinder(h1=thickness/2, h2=0, d1=diameter+4, d2=diameter, $fn=60);\n        }\n        \n        // Recess for kickball\n        translate([0, 0, -1])\n            sphere(d=ball_d+2);\n    }\n}\n\n// Assembly\nmodule kickball_table() {\n    // Base\n    translate([0, 0, 0])\n        table_base(base_d, base_h);\n    \n    // Leg\n    translate([0, 0, base_h])\n        leg(leg_h, 20);\n    \n    // Table top\n    translate([0, 0, base_h+leg_h])\n        table_top(base_d*0.9, top_t);\n    \n    // Kickball accent on top\n    translate([0, 0, base_h+leg_h+top_t])\n        kickball(ball_d, wall_t);\n}\n\n// Render the complete table\nkickball_table();",
    "renders": true
  },
  {
    "decorative_art": "dodgeball",
    "openscad_code": "// Dodgeball decorative stool / side table (medium complexity, realistic style)\n// Overall size: ~120 mm diameter, ~45 mm height, 2 mm wall thickness\n\n// Parameters\nball_d = 100;\nwall_t = 2;\nseat_clear = 75;\nleg_w = 8;\nleg_h = 15;\nbolt_r = 3;\nbolt_h = 4;\npattern_ridges = 12;\npattern_depth = 1;\n\n// Main hollow dodgeball shell\nmodule dodgeball_shell(d = ball_d, t = wall_t) {\n    difference() {\n        sphere(d = d);\n        sphere(d = d - 2 * t);\n    }\n}\n\n// Seat cut-out on top\nmodule seat_opening(d = seat_clear) {\n    cylinder(h = ball_d, d = d, center = true);\n}\n\n// Realistic dodgeball seam pattern\nmodule seam_pattern(d = ball_d, depth = pattern_depth) {\n    // Equator line\n    rotate([90, 0, 0])\n        difference() {\n            cylinder(h = wall_t + 0.2, d = d + 0.2, center = true);\n            cylinder(h = wall_t + 0.4, d = d - 2 * depth, center = true);\n        }\n    // Meridian loops\n    for (i = [0: pattern_ridges - 1]) {\n        rotate([0, 0, i * 360 / pattern_ridges])\n            difference() {\n                cylinder(h = wall_t + 0.2, d = d + 0.2, center = true);\n                cylinder(h = wall_t + 0.4, d = d - 2 * depth, center = true);\n            }\n    }\n}\n\n// Decorative furniture legs for stability\nmodule legs() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([ball_d/2 - leg_w/2, 0, -ball_d/2]) {\n                // Leg body\n                cube([leg_w, leg_w, leg_h], center = true);\n                // Bolt detail\n                translate([0, 0, leg_h/2 + bolt_h/2])\n                    cylinder(h = bolt_h, r = bolt_r, center = true);\n            }\n    }\n}\n\n// Assemble the stool\nunion() {\n    difference() {\n        // Main shell\n        dodgeball_shell();\n        // Seat opening\n        translate([0, 0, ball_d/2 - wall_t])\n            seat_opening();\n    }\n    // Seam pattern\n    seam_pattern();\n    // Legs\n    legs();\n}",
    "renders": true
  },
  {
    "decorative_art": "netball",
    "openscad_code": "// Netball Accent Stool – 3D printable decorative furniture piece\n// Overall footprint ≈ 120 mm diameter, seat height ≈ 280 mm\n// All walls ≥ 2 mm for reliable FDM printing\n\n// Main parameters\nball_d = 100;             // netball sphere diameter\nseat_h = 40;              // seat cushion thickness\nleg_h = 140;              // leg height from floor to sphere bottom\nwall = 2;                 // uniform wall thickness\n\n// Netball panel seam pattern (raised ridges)\nmodule seam_arc(r, h, a1, a2, w){\n    rotate([0,0,a1])\n        rotate_extrude(angle = a2-a1)\n            translate([r,0,0])\n                square([w,h], center=true);\n}\n\n// Generate decorative netball shell\nmodule netball_shell(){\n    difference(){\n        sphere(d=ball_d);                      // outer sphere\n        sphere(d=ball_d-wall*2);               // hollow inside\n    }\n    // Raised seams – 8 meridians + 3 parallels\n    for(i=[0:22.5:360]){\n        seam_arc(ball_d/2, wall*2, i, i+1.5, wall*2);\n    }\n    seam_arc(ball_d/2, wall*2, 0, 360, wall*2);   // equator\n    seam_arc(ball_d/2, wall*2, 0, 360, wall*2)    // tropics\n        rotate([0,0,0])\n        rotate([0,35,0]);\n    seam_arc(ball_d/2, wall*2, 0, 360, wall*2)\n        rotate([0,-35,0]);\n}\n\n// Triangular stool legs for stability\nmodule leg(){\n    difference(){\n        // tapered triangular prism\n        linear_extrude(height=leg_h, scale=0.5)\n            polygon(points=[[0,0],[20,0],[10,17]]);\n        // hollow cavity\n        translate([0,0,wall])  // offset for printability\n            linear_extrude(height=leg_h-wall*2, scale=0.5)\n                polygon(points=[[wall,wall],[20-wall,wall],[10,17-wall]]);\n    }\n}\n\n// Seat cushion with gentle dome\nmodule seat(){\n    difference(){\n        cylinder(h=seat_h, d=ball_d+20, $fn=60);\n        translate([0,0,wall])\n            cylinder(h=seat_h, d=ball_d+20-wall*2, $fn=60);\n    }\n    // dome top\n    translate([0,0,seat_h-wall])\n        difference(){\n            sphere(d=ball_d+20);\n            translate([0,0,-ball_d/2])\n                cube([ball_d+20,ball_d+20,ball_d], center=true);\n        }\n}\n\n// Assembly\ntranslate([0,0,leg_h+seat_h/2])\n    netball_shell();\n\ntranslate([0,0,seat_h/2])\n    seat();\n\nmodule leg_set(){\n    for(a=[0,120,240])\n        rotate([0,0,a])\n            translate([0,ball_d/3,leg_h/2])\n                leg();\n}\nleg_set();",
    "renders": true
  },
  {
    "decorative_art": "croquet",
    "openscad_code": "// Realistic Croquet Mallet Chair (decorative furniture piece)\n// Combines a croquet mallet head as seat, handle as backrest, and hoop as frame\n\n// Overall dimensions ~120mm height, 80mm width, 80mm depth\n$fn = 32;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Mallet head (seat)\nmodule mallet_seat() {\n    // Main mallet head - hollow for printability\n    difference() {\n        // Outer shape\n        cube([60, 40, 35], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall/2])\n            cube([60-wall*2, 40-wall*2, 35-wall], center=true);\n    }\n    \n    // Decorative angled faces (typical mallet shape)\n    for(side = [-1, 1]) {\n        translate([side * 25, 0, 0])\n            rotate([0, side * 10, 0])\n                difference() {\n                    cube([10, 38, 33], center=true);\n                    translate([0, 0, wall/2])\n                        cube([10-wall*2, 38-wall*2, 33-wall], center=true);\n                }\n    }\n    \n    // Central hole detail (real mallet has this)\n    translate([0, 0, 0])\n        cylinder(h=40, r=4, center=true, $fn=16);\n}\n\n// Handle backrest\nmodule handle_backrest() {\n    // Main handle - hollow cylinder\n    difference() {\n        cylinder(h=80, r=8, center=true);\n        cylinder(h=82, r=6, center=true);\n    }\n    \n    // Handle grip texture\n    for(i = [0:5:75]) {\n        translate([0, 0, -37.5 + i])\n            difference() {\n                cylinder(h=3, r=9, center=true);\n                cylinder(h=3.2, r=7, center=true);\n            }\n    }\n}\n\n// Croquet hoop base/legs\nmodule hoop_base() {\n    // Main hoop frame\n    difference() {\n        // Outer hoop\n        translate([0, 0, -30])\n            rotate([90, 0, 0])\n                cylinder(h=wall, r=35, center=true);\n        \n        // Inner cutout\n        translate([0, 0, -30])\n            rotate([90, 0, 0])\n                cylinder(h=wall+0.1, r=30, center=true);\n    }\n    \n    // Support legs\n    for(angle = [0:120:240]) {\n        rotate([0, 0, angle])\n            translate([32, 0, -30])\n                rotate([90, 0, 0])\n                    difference() {\n                        cylinder(h=30, r=4, center=false);\n                        cylinder(h=30.2, r=2, center=false);\n                    }\n    }\n    \n    // Decorative wire wrap detail\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n            translate([32.5, 0, -15])\n                rotate([0, 90, 0])\n                    difference() {\n                        cylinder(h=5, r=1, center=true);\n                        cylinder(h=5.2, r=0.5, center=true);\n                    }\n    }\n}\n\n// Assembly\n// Position the seat\ntranslate([0, 0, 40])\n    mallet_seat();\n\n// Position the handle as backrest\ntranslate([0, -25, 80])\n    rotate([15, 0, 0])\n        handle_backrest();\n\n// Position the hoop as base\nhoop_base();\n\n// Additional support struts\nfor(side = [-1, 1]) {\n    translate([side * 25, 0, 20])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h=25, r=2, center=true);\n                cylinder(h=25.2, r=1, center=true);\n            }\n}\n\n// Decorative ball finial on handle top\ntranslate([0, -25, 120])\n    difference() {\n        sphere(r=6);\n        sphere(r=4);\n    }",
    "renders": true
  },
  {
    "decorative_art": "polo",
    "openscad_code": "// Polo Furniture - Decorative Wall Shelf\n// Realistic style, medium complexity\n// 3D printable with 2mm walls, no overhangs\n\n// Overall dimensions\nwidth = 120;\nheight = 80;\ndepth = 40;\n\n// Wall thickness\nwall = 2;\n\n// Main shelf body\nmodule shelf_body() {\n    difference() {\n        // Outer shell\n        cube([width, depth, height]);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n        cube([width-2*wall, depth-wall, height-2*wall]);\n        \n        // Back mounting cavity\n        translate([width/2-10, -1, height/2-10])\n        cube([20, wall+1, 20]);\n    }\n}\n\n// Decorative polo mallet head detail\nmodule mallet_head() {\n    // Main mallet head\n    translate([width-15, 5, height-25])\n    rotate([0, 90, 0])\n    cylinder(h=25, d1=15, d2=12);\n    \n    // Mallet handle connection\n    translate([width-15, 5, height-25])\n    rotate([0, 90, 0])\n    cylinder(h=8, d=8);\n}\n\n// Crossed mallet handles (decorative X pattern)\nmodule crossed_handles() {\n    // Handle 1\n    translate([15, 5, height-20])\n    rotate([45, 0, 0])\n    cylinder(h=50, d=6);\n    \n    // Handle 2\n    translate([45, 5, height-20])\n    rotate([-45, 0, 0])\n    cylinder(h=50, d=6);\n    \n    // Center connection sphere\n    translate([30, 5, height-20])\n    sphere(d=8);\n}\n\n// Polo ball details (spherical accents)\nmodule polo_balls() {\n    for(i=[0:2]) {\n        translate([20 + i*30, depth/2, 10])\n        sphere(d=12);\n    }\n}\n\n// Ball groove details\nmodule ball_grooves() {\n    for(i=[0:2]) {\n        translate([20 + i*30, depth/2, 10])\n        rotate([0, 90, 0])\n        cylinder(h=12.1, d=10, $fn=50);\n    }\n}\n\n// Mounting holes for wall attachment\nmodule mounting_holes() {\n    // Top holes\n    translate([width/2-20, -1, height-15])\n    cylinder(h=wall+1, d=5);\n    \n    translate([width/2+20, -1, height-15])\n    cylinder(h=wall+1, d=5);\n    \n    // Bottom holes\n    translate([width/2-20, -1, 15])\n    cylinder(h=wall+1, d=5);\n    \n    translate([width/2+20, -1, 15])\n    cylinder(h=wall+1, d=5);\n}\n\n// Decorative side panels with polo stick pattern\nmodule side_panels() {\n    // Left panel\n    translate([-wall, 0, 0])\n    cube([wall, depth, height]);\n    \n    // Right panel\n    translate([width, 0, 0])\n    cube([wall, depth, height]);\n    \n    // Polo stick cutouts on sides\n    for(i=[0:3]) {\n        // Left side\n        translate([-1, 5 + i*10, 5 + i*15])\n        rotate([0, 90, 0])\n        cylinder(h=wall+2, d=3);\n        \n        // Right side\n        translate([width+1, 5 + i*10, 5 + i*15])\n        rotate([0, 90, 0])\n        cylinder(h=wall+2, d=3);\n    }\n}\n\n// Assemble the complete polo shelf\nunion() {\n    shelf_body();\n    side_panels();\n    \n    difference() {\n        union() {\n            mallet_head();\n            crossed_handles();\n            polo_balls();\n        }\n        \n        // Remove ball grooves for detail\n        ball_grooves();\n    }\n    \n    // Cut mounting holes\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "decorative_art": "sepaktakraw",
    "openscad_code": "// Sepaktakraw-inspired decorative side table\n// Realistic style, medium complexity\n\n// Main parameters\nball_diameter = 80;\nwall_thickness = 2;\nleg_height = 50;\ntabletop_thickness = 8;\n\n// Weave pattern parameters\nstrands = 20;\nstrand_thickness = 1.5;\nweave_gap = 2;\n\n// Decorative ring parameters\nring_diameter = ball_diameter + 8;\nring_thickness = 3;\n\n// Base support ring\nbase_diameter = 40;\nbase_thickness = 6;\n\n// Create the sepaktakraw ball as the main body\nmodule sepaktakraw_ball() {\n    difference() {\n        // Main sphere\n        sphere(d = ball_diameter, $fn = 100);\n        \n        // Hollow center\n        sphere(d = ball_diameter - wall_thickness * 2, $fn = 100);\n        \n        // Create weave pattern with holes\n        for (i = [0:strands-1]) {\n            rotate([0, 0, i * 360/strands]) {\n                for (j = [0:strands/2-1]) {\n                    rotate([0, j * 360/strands, 0]) {\n                        translate([0, 0, -ball_diameter/2]) {\n                            cylinder(h = ball_diameter, r = strand_thickness, $fn = 8);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Decorative support ring around the ball\nmodule support_ring() {\n    rotate_extrude(angle = 360, $fn = 100) {\n        translate([ring_diameter/2, 0, 0]) {\n            square([ring_thickness, ball_diameter * 0.8], center = true);\n        }\n    }\n}\n\n// Table legs with decorative cutouts\nmodule table_legs() {\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120]) {\n            translate([ring_diameter * 0.35, 0, -leg_height - ball_diameter/2 - tabletop_thickness/2]) {\n                // Main leg\n                cylinder(h = leg_height, r = 5, $fn = 20);\n                \n                // Decorative cutouts\n                for (j = [1:2]) {\n                    translate([0, 0, j * leg_height/3]) {\n                        rotate([90, 0, 0]) {\n                            cylinder(h = 8, r1 = 4, r2 = 2, $fn = 6);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Tabletop with sepaktakraw-inspired pattern\nmodule tabletop() {\n    // Main tabletop disc\n    translate([0, 0, ball_diameter/2 + tabletop_thickness/2]) {\n        cylinder(h = tabletop_thickness, r = ball_diameter * 0.7, $fn = 100);\n        \n        // Decorative rim\n        translate([0, 0, tabletop_thickness/2]) {\n            cylinder(h = 2, r1 = ball_diameter * 0.7, r2 = ball_diameter * 0.65, $fn = 100);\n        }\n        \n        // Center pattern\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([0, ball_diameter * 0.25, 0]) {\n                    cylinder(h = tabletop_thickness, r = 3, $fn = 6);\n                }\n            }\n        }\n    }\n}\n\n// Base support structure\nmodule base_support() {\n    translate([0, 0, -leg_height - ball_diameter/2 - tabletop_thickness/2]) {\n        cylinder(h = base_thickness, r = base_diameter/2, $fn = 50);\n        \n        // Decorative feet\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120 + 60]) {\n                translate([base_diameter * 0.35, 0, -base_thickness/2]) {\n                    sphere(d = 8, $fn = 20);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main sepaktakraw ball body\n    sepaktakraw_ball();\n    \n    // Support ring around ball\n    support_ring();\n    \n    // Tabletop\n    tabletop();\n    \n    // Legs\n    table_legs();\n    \n    // Base support\n    base_support();\n}",
    "renders": true
  },
  {
    "decorative_art": "bocceball",
    "openscad_code": "// Bocceball Decorative Side Table\n// A medium-complexity furniture piece shaped like a bocceball\n// Features a spherical base with integrated storage and a flat tabletop surface\n\n// Overall dimensions\nball_diameter = 120;\ntable_height = 450;\nwall_thickness = 2;\n\n// Helper module for rounded edges\nmodule rounded_cube(size, radius) {\n    translate([radius, radius, radius])\n    minkowski() {\n        cube([size[0]-2*radius, size[1]-2*radius, size[2]-2*radius]);\n        sphere(r=radius);\n    }\n}\n\n// Bocceball surface pattern module\nmodule ball_pattern() {\n    // Create the characteristic green pattern\n    color(\"forestgreen\")\n    difference() {\n        sphere(d=ball_diameter);\n        \n        // Cut grooves for pattern\n        for(i = [0:30:180]) {\n            rotate([0, i, 0])\n            translate([0, 0, -ball_diameter/2-1])\n            cube([ball_diameter, 2, ball_diameter+2], center=true);\n        }\n        \n        for(i = [0:30:180]) {\n            rotate([i, 0, 0])\n            translate([0, 0, -ball_diameter/2-1])\n            cube([2, ball_diameter, ball_diameter+2], center=true);\n        }\n    }\n}\n\n// Main spherical base with hollow interior\nmodule spherical_base() {\n    difference() {\n        // Outer sphere\n        ball_pattern();\n        \n        // Hollow interior\n        translate([0, 0, -30])\n        sphere(d=ball_diameter-2*wall_thickness);\n        \n        // Flat bottom for stability\n        translate([0, 0, -ball_diameter/2])\n        cube([ball_diameter*1.2, ball_diameter*1.2, ball_diameter/2], center=true);\n    }\n}\n\n// Internal support structure\nmodule internal_supports() {\n    // Central pillar\n    color(\"dimgray\")\n    translate([0, 0, -table_height/2+20])\n    cylinder(h=table_height-40, d=ball_diameter/3, $fn=32);\n    \n    // Radial supports\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n        translate([ball_diameter/6, 0, -table_height/2+20])\n        cube([ball_diameter/3, wall_thickness*2, table_height-40], center=true);\n    }\n}\n\n// Tabletop surface\nmodule tabletop() {\n    color(\"darkgreen\")\n    translate([0, 0, table_height/2-10])\n    difference() {\n        // Main tabletop\n        cylinder(h=20, d=ball_diameter*1.2, $fn=64);\n        \n        // Chamfered edge\n        translate([0, 0, -1])\n        cylinder(h=22, d=ball_diameter*1.2-10, $fn=64);\n    }\n    \n    // Decorative rim\n    color(\"gold\")\n    translate([0, 0, table_height/2])\n    cylinder(h=5, d1=ball_diameter*1.2, d2=ball_diameter*1.15, $fn=64);\n}\n\n// Access door for storage\nmodule storage_door() {\n    color(\"darkgreen\")\n    translate([0, ball_diameter/2-5, 0])\n    rotate([90, 0, 0])\n    difference() {\n        rounded_cube([50, 80, wall_thickness*2], 5);\n        \n        // Handle cutout\n        translate([0, -30, 0])\n        cylinder(h=wall_thickness*2+1, d=10, $fn=16);\n    }\n    \n    // Door handle\n    color(\"gold\")\n    translate([0, ball_diameter/2-5, 30])\n    rotate([90, 0, 0])\n    difference() {\n        cylinder(h=15, d=8, $fn=16);\n        translate([0, 0, 5])\n        cylinder(h=15, d=4, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    spherical_base();\n    internal_supports();\n    tabletop();\n    storage_door();\n}",
    "renders": true
  },
  {
    "decorative_art": "boules",
    "openscad_code": "// Boules Furniture Stand - Decorative Display Rack for 3 Boules\n// Holds 3 standard boule balls (75mm diameter) in an elegant display\n// Overall dimensions: 120mm wide x 100mm deep x 80mm tall\n\n// Wall thickness for 3D printing\nwall_th = 2;\n\n// Base module - decorative foundation\nmodule base() {\n    // Main base platform\n    difference() {\n        cube([120, 100, 8], center=true);\n        \n        // Chamfer edges for aesthetics\n        translate([0, 0, 4]) {\n            cube([116, 96, 8], center=true);\n        }\n    }\n    \n    // Decorative border trim\n    translate([0, 0, 4.5]) {\n        cube([124, 104, 1], center=true);\n    }\n}\n\n// Support post module - structural element\nmodule support_post(x_pos) {\n    // Main post body\n    translate([x_pos, 0, 45]) {\n        cylinder(h=70, r=4, center=true);\n    }\n    \n    // Decorative collar at base\n    translate([x_pos, 0, 8]) {\n        cylinder(h=3, r=6, center=true);\n    }\n    \n    // Decorative collar at top\n    translate([x_pos, 0, 82]) {\n        cylinder(h=3, r=6, center=true);\n    }\n}\n\n// Cradle module - holds the boule\nmodule cradle(x_pos) {\n    // Main cradle arm\n    translate([x_pos, 0, 40]) {\n        rotate([0, 90, 0]) {\n            cylinder(h=25, r=3, center=true);\n        }\n    }\n    \n    // Support ring for boule\n    difference() {\n        // Outer ring\n        translate([x_pos, 0, 25]) {\n            rotate_extrude(angle=360) {\n                translate([35, 0, 0]) {\n                    circle(r=2);\n                }\n            }\n        }\n        \n        // Inner cutout for boule clearance\n        translate([x_pos, 0, 25]) {\n            rotate_extrude(angle=360) {\n                translate([35, 0, 0]) {\n                    circle(r=1.5);\n                }\n            }\n        }\n    }\n}\n\n// Boule ball representation\nmodule boule(x_pos) {\n    // Main ball\n    color(\"silver\") translate([x_pos, 0, 25]) {\n        sphere(d=75);\n    }\n    \n    // Decorative lines on boule\n    for (i = [0:3]) {\n        rotate([0, 0, i * 45]) {\n            translate([x_pos, 0, 25]) {\n                rotate([90, 0, 0]) {\n                    linear_extrude(height=0.5) {\n                        circle(r=37.5, $fn=100);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base foundation\n    base();\n    \n    // Three support posts\n    support_post(-35);\n    support_post(0);\n    support_post(35);\n    \n    // Three cradles\n    cradle(-35);\n    cradle(0);\n    cradle(35);\n    \n    // Three boules\n    boule(-35);\n    boule(0);\n    boule(35);\n    \n    // Decorative cross-bracing between posts\n    translate([0, 0, 65]) {\n        cube([74, 2, 2], center=true);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "petanque",
    "openscad_code": "// Petanque Ball Display Stand\n// A medium-complexity furniture piece for showcasing a single petanque boule\n\n// Overall dimensions (mm)\nstand_width = 80;\nstand_depth = 80;\nstand_height = 100;\nball_diameter = 73;  // Standard petanque ball size\n\n// Material thickness\nwall_thickness = 2;\n\nmodule base() {\n    // Main base platform with rounded corners\n    difference() {\n        // Main solid base\n        cube([stand_width, stand_depth, 10], center=true);\n        \n        // Chamfer the bottom edges\n        translate([0, 0, -6])\n            cube([stand_width-4, stand_depth-4, 8], center=true);\n    }\n}\n\nmodule legs() {\n    // Four decorative legs with fluting\n    for (x = [-1, 1])\n    for (y = [-1, 1]) {\n        translate([x*30, y*30, 0]) {\n            // Main leg post\n            cylinder(h=90, r=6, center=false);\n            \n            // Decorative ring at top\n            translate([0, 0, 85])\n                cylinder(h=5, r=8, center=false);\n                \n            // Fluted detail using cylinders\n            for (angle = [0:45:315]) {\n                rotate([0, 0, angle])\n                    translate([4, 0, 10])\n                        cylinder(h=70, r=1.5, center=false);\n            }\n        }\n    }\n}\n\nmodule support_frame() {\n    // Cross-bracing between legs\n    for (x = [-1, 1]) {\n        // Side braces\n        translate([x*30, 0, 45])\n            cube([wall_thickness, 60, wall_thickness], center=true);\n    }\n    \n    for (y = [-1, 1]) {\n        // Front/back braces\n        translate([0, y*30, 45])\n            cube([60, wall_thickness, wall_thickness], center=true);\n    }\n}\n\nmodule ball_cradle() {\n    // Spherical cradle to hold the petanque ball\n    difference() {\n        // Main cradle sphere\n        sphere(r=40);\n        \n        // Hollow out for ball\n        sphere(r=ball_diameter/2 + 2);\n        \n        // Cut in half horizontally\n        translate([0, 0, -20])\n            cube([100, 100, 40], center=true);\n            \n        // Cut opening at front\n        rotate([0, 90, 0])\n            translate([0, 0, 20])\n                cylinder(h=50, r=35, center=true);\n    }\n    \n    // Support ring around cradle\n    translate([0, 0, -2])\n        difference() {\n            cylinder(h=4, r=42, center=false);\n            cylinder(h=4, r=39, center=false);\n        }\n}\n\nmodule decorative_elements() {\n    // Small spheres as feet\n    for (x = [-1, 1])\n    for (y = [-1, 1]) {\n        translate([x*36, y*36, -5])\n            sphere(r=4);\n    }\n    \n    // Central medallion\n    translate([0, 0, 5.5])\n        difference() {\n            cylinder(h=1, r=15, center=false);\n            cylinder(h=1.5, r=12, center=false);\n        }\n}\n\n// Assembly\nunion() {\n    base();\n    legs();\n    support_frame();\n    translate([0, 0, 90]) ball_cradle();\n    decorative_elements();\n}",
    "renders": true
  },
  {
    "decorative_art": "shuffleboard",
    "openscad_code": "// Shuffleboard Table - Realistic Style, Medium Complexity\n// Dimensions: 120mm x 30mm x 15mm (scaled for 3D printing)\n\n// Table Parameters\ntable_length = 120;\ntable_width = 30;\ntable_height = 15;\nwall_thickness = 2;\nplaying_surface_thickness = 1.5;\nleg_height = 12;\n\n// Playing Surface Module\nmodule playing_surface() {\n    difference() {\n        // Main playing surface\n        translate([0, 0, leg_height + wall_thickness])\n            cube([table_length, table_width, playing_surface_thickness], center=true);\n        \n        // Scoring zones (triangular notches)\n        for (i = [-1, 1]) {\n            translate([i * (table_length/2 - 8), 0, leg_height + wall_thickness - 0.1])\n                rotate([0, 0, i * 90])\n                linear_extrude(height=playing_surface_thickness + 0.2)\n                    polygon(points=[[0, -5], [8, 0], [0, 5]]);\n        }\n    }\n}\n\n// Table Frame Module\nmodule table_frame() {\n    // Long sides\n    for (i = [-1, 1]) {\n        translate([0, i * (table_width/2 + wall_thickness/2), leg_height + wall_thickness/2])\n            cube([table_length + wall_thickness*2, wall_thickness, wall_thickness*2], center=true);\n    }\n    \n    // Short sides\n    for (i = [-1, 1]) {\n        translate([i * (table_length/2 + wall_thickness/2), 0, leg_height + wall_thickness/2])\n            cube([wall_thickness, table_width + wall_thickness*2, wall_thickness*2], center=true);\n    }\n}\n\n// Leg Module\nmodule leg(x_pos) {\n    // Main leg post\n    translate([x_pos, 0, leg_height/2])\n        cube([3, 3, leg_height], center=true);\n    \n    // Leg brace\n    translate([x_pos - 10, 0, leg_height/2 - 3])\n        rotate([0, 45, 0])\n        cube([15, 2, 2], center=true);\n}\n\n// Decorative corner caps\nmodule corner_cap(x, y) {\n    translate([x, y, leg_height + wall_thickness*2 + playing_surface_thickness/2])\n        cylinder(h=playing_surface_thickness + 1, r1=2, r2=1.5, $fn=16);\n}\n\n// Score markers\nmodule score_markers() {\n    // Center line\n    translate([0, 0, leg_height + wall_thickness + playing_surface_thickness + 0.1])\n        cube([0.5, table_width * 0.8, 0.2], center=true);\n    \n    // End zones\n    for (i = [-1, 1]) {\n        translate([i * (table_length/2 - 5), 0, leg_height + wall_thickness + playing_surface_thickness + 0.1])\n            cube([10, 0.5, 0.2], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    union() {\n        // Bottom shelf\n        translate([0, 0, leg_height/2])\n            cube([table_length - 10, table_width - 6, wall_thickness], center=true);\n        \n        // Legs\n        for (x = [-table_length/2 + 15, table_length/2 - 15]) {\n            leg(x);\n        }\n        \n        // Support beams between legs\n        translate([0, -table_width/2 + 2, leg_height/2])\n            cube([table_length - 30, 1.5, 1.5], center=true);\n        translate([0, table_width/2 - 2, leg_height/2])\n            cube([table_length - 30, 1.5, 1.5], center=true);\n    }\n    \n    // Upper structure\n    union() {\n        table_frame();\n        playing_surface();\n        \n        // Corner decorations\n        for (x = [-table_length/2, table_length/2]) {\n            for (y = [-table_width/2, table_width/2]) {\n                corner_cap(x, y);\n            }\n        }\n        \n        // Score markers\n        score_markers();\n    }\n    \n    // Side bumpers\n    for (i = [-1, 1]) {\n        translate([0, i * (table_width/2 + wall_thickness/2 + 1), leg_height + wall_thickness + playing_surface_thickness/2])\n            cube([table_length + wall_thickness*2, 2, playing_surface_thickness + 2], center=true);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "skittles",
    "openscad_code": "// Skittles-inspired side table (realistic style, medium complexity)\n// Overall dimensions: 120mm height x 300mm diameter tabletop\n\n// Color constants\n$fn = 48;\n\n// Main table structure\nmodule skittles_table() {\n    // Base sphere (skittle body)\n    translate([0, 0, 40])\n        sphere(d = 80);\n    \n    // Flattened bottom for stability\n    translate([0, 0, 0])\n        cylinder(h = 40, d1 = 80, d2 = 60);\n    \n    // Central support column\n    translate([0, 0, 80])\n        cylinder(h = 30, d = 20);\n    \n    // Tabletop (skittle cap)\n    translate([0, 0, 110])\n        cylinder(h = 10, d = 300);\n    \n    // Reinforcement ring under tabletop\n    translate([0, 0, 105])\n        cylinder(h = 5, d = 250);\n}\n\n// Skittle \"S\" logo detail\nmodule skittle_logo() {\n    // Outer ring\n    translate([0, 0, 111])\n        cylinder(h = 2, d = 50);\n    \n    // Inner ring (difference for ring shape)\n    difference() {\n        translate([0, 0, 111])\n            cylinder(h = 2.1, d = 50);\n        translate([0, 0, 111])\n            cylinder(h = 2.2, d = 40);\n    }\n    \n    // S-curve decoration\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([22.5, 0, 111])\n            cube([2, 2, 2.2], center = true);\n    }\n}\n\n// Decorative pattern on sphere\nmodule sphere_pattern() {\n    // Horizontal grooves\n    for(h = [10:15:70]) {\n        rotate([0, 90, 0])\n        translate([0, 0, h - 40])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 2, d = 80.1, center = true);\n                cylinder(h = 3, d = 76, center = true);\n            }\n    }\n    \n    // Vertical ribs for structure\n    for(angle = [0:30:330]) {\n        rotate([0, 0, angle])\n        translate([38, 0, 40])\n            scale([1, 0.3, 1])\n            sphere(d = 6);\n    }\n}\n\n// Table legs for stability\nmodule support_legs() {\n    for(angle = [45:90:315]) {\n        rotate([0, 0, angle])\n        translate([120, 0, 55]) {\n            // Main leg\n            rotate([90, 0, 90])\n            cylinder(h = 60, d = 15);\n            \n            // Leg base pad\n            translate([0, 0, -30])\n                cylinder(h = 5, d = 25);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main table body\n    skittles_table();\n    \n    // Structural elements\n    support_legs();\n    \n    // Decorative elements\n    sphere_pattern();\n    \n    // Logo on tabletop\n    skittle_logo();\n}",
    "renders": true
  },
  {
    "decorative_art": "paddleball",
    "openscad_code": "// Paddleball Furniture - Decorative Accent Piece\n// Combines classic paddleball toy with furniture styling\n\n// Overall dimensions\npaddle_length = 120;\npaddle_width = 40;\npaddle_thickness = 8;\nball_diameter = 25;\nstring_length = 80;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main paddle body with ergonomic handle\nmodule paddle_body() {\n    // Handle grip with finger grooves\n    translate([0, 0, paddle_thickness/2]) {\n        difference() {\n            // Main handle shape\n            cube([90, paddle_width, paddle_thickness], center=true);\n            \n            // Finger grooves on bottom\n            for(i = [-1, 0, 1]) {\n                translate([i * 15, 0, -paddle_thickness/2 - 0.1]) {\n                    cylinder(h=paddle_thickness + 0.2, r=4, $fn=16);\n                }\n            }\n            \n            // Thumb groove on top\n            translate([20, 0, paddle_thickness/2 + 0.1]) {\n                cylinder(h=paddle_thickness + 0.2, r=5, $fn=16);\n            }\n        }\n    }\n    \n    // Decorative paddle head with furniture-style joinery\n    translate([55, 0, paddle_thickness/2]) {\n        difference() {\n            // Main paddle head\n            cube([50, paddle_width + 20, paddle_thickness], center=true);\n            \n            // Decorative cutout pattern\n            for(x = [50, 60, 70]) {\n                translate([x, 0, 0]) {\n                    cylinder(h=paddle_thickness + 0.2, r=8, $fn=6);\n                }\n            }\n            \n            // String attachment hole\n            translate([80, 0, 0]) {\n                cylinder(h=paddle_thickness + 0.2, r=3, $fn=16);\n            }\n        }\n    }\n    \n    // Furniture-style decorative border\n    translate([55, 0, paddle_thickness/2]) {\n        // Top decorative ridge\n        translate([0, 0, paddle_thickness/2]) {\n            cube([50, paddle_width + 20, 2], center=true);\n        }\n        \n        // Bottom decorative ridge\n        translate([0, 0, -paddle_thickness/2]) {\n            cube([50, paddle_width + 20, 2], center=true);\n        }\n    }\n}\n\n// Ball with furniture-style texture\nmodule ball() {\n    difference() {\n        // Main ball\n        sphere(r=ball_diameter/2, $fn=32);\n        \n        // Decorative dimples for furniture aesthetic\n        for(a = [0:60:359]) {\n            rotate([0, 0, a]) {\n                translate([ball_diameter/2 * 0.8, 0, 0]) {\n                    sphere(r=2, $fn=16);\n                }\n            }\n        }\n        \n        // String attachment hole\n        translate([0, 0, ball_diameter/2]) {\n            cylinder(h=ball_diameter, r=1.5, $fn=16);\n        }\n    }\n}\n\n// Elastic string with furniture-style cord wrap\nmodule string() {\n    // Main elastic cord\n    color(\"black\") {\n        cylinder(h=string_length, r=1, $fn=8);\n    }\n    \n    // Decorative wrapping pattern\n    for(i = [0:5:string_length-5]) {\n        translate([0, 0, i + 2.5]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=2, r=1.2, $fn=8);\n            }\n        }\n    }\n}\n\n// Furniture base/stand for display\nmodule display_base() {\n    // Main base platform\n    translate([0, 0, -5]) {\n        cube([paddle_length + 20, paddle_width + 40, 5], center=true);\n    }\n    \n    // Decorative feet\n    for(x = [-paddle_length/2, paddle_length/2]) {\n        for(y = [-paddle_width/2, paddle_width/2]) {\n            translate([x, y, -7.5]) {\n                cylinder(h=5, r=5, $fn=16);\n            }\n        }\n    }\n    \n    // Central support post\n    translate([0, 0, -15]) {\n        cylinder(h=10, r=8, $fn=16);\n    }\n}\n\n// Assembly\n// Display base\ndisplay_base();\n\n// Main paddle positioned for display\ntranslate([0, 0, 0]) {\n    rotate([0, 0, 15]) {\n        paddle_body();\n    }\n}\n\n// String from paddle to ball\ntranslate([80, 0, 0]) {\n    rotate([90, 0, 0]) {\n        string();\n    }\n}\n\n// Ball suspended in air\ntranslate([80, 0, string_length + ball_diameter/2]) {\n    ball();\n}\n\n// Furniture-style decorative elements on paddle\n// Brass accent inlays\ntranslate([55, 0, paddle_thickness/2 + 1]) {\n    cube([40, 5, 0.5], center=true);\n}\n\ntranslate([55, 0, -paddle_thickness/2 - 1]) {\n    cube([40, 5, 0.5], center=true);\n}",
    "renders": true
  },
  {
    "decorative_art": "wiffleball",
    "openscad_code": "// Wiffleball Accent Stool\n// A decorative furniture piece shaped like a wiffleball\n// Overall height: 100mm, diameter: 120mm\n\n// Parameters\nball_d = 120;           // Ball diameter\nwall_thick = 2;         // Wall thickness for 3D printing\nhole_d = 25;            // Wiffle ball hole diameter\nnum_holes = 8;          // Number of holes per hemisphere\nleg_h = 40;             // Leg height\nleg_d = 8;              // Leg diameter\nbase_d = 100;           // Base diameter for stability\n\nmodule wiffle_stool() {\n    // Main ball body\n    difference() {\n        sphere(d = ball_d);\n        \n        // Hollow out the ball\n        sphere(d = ball_d - wall_thick*2);\n        \n        // Create wiffle holes on top hemisphere\n        for(i = [0:num_holes-1]) {\n            rotate([0, 0, i*360/num_holes])\n                translate([0, ball_d/2 - hole_d, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = ball_d, d = hole_d, $fn=20);\n        }\n        \n        // Create wiffle holes on bottom hemisphere\n        for(i = [0:num_holes-1]) {\n            rotate([0, 0, i*360/num_holes + 22.5])\n                translate([0, ball_d/2 - hole_d, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = ball_d, d = hole_d, $fn=20);\n        }\n        \n        // Cut bottom flat for seating\n        translate([0, 0, -ball_d/2])\n            cube([ball_d*2, ball_d*2, ball_d], center=true);\n    }\n    \n    // Internal support structure\n    difference() {\n        // Support ring\n        translate([0, 0, -ball_d/4])\n            cylinder(h = wall_thick*2, d = ball_d - wall_thick*4, center=true);\n        \n        // Lightening holes in support\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([ball_d/4 - wall_thick, 0, -ball_d/4])\n                    cylinder(h = wall_thick*2.5, d = 15, $fn=20);\n        }\n    }\n    \n    // Leg supports\n    for(i = [0:3]) {\n        rotate([0, 0, i*90 + 45])\n            translate([base_d/2 - leg_d, 0, -leg_h/2])\n                cylinder(h = leg_h, d = leg_d, $fn=20);\n    }\n    \n    // Stabilizing base ring\n    translate([0, 0, -leg_h])\n        difference() {\n            cylinder(h = wall_thick*2, d = base_d);\n            cylinder(h = wall_thick*2.5, d = base_d - wall_thick*4);\n        }\n    \n    // Decorative seam around ball equator\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h = wall_thick, d = ball_d + 0.5, center=true);\n            cylinder(h = wall_thick*2, d = ball_d - wall_thick, center=true);\n        }\n}\n\n// Render the stool\nwiffle_stool();",
    "renders": true
  },
  {
    "decorative_art": "stickball",
    "openscad_code": "// Stickball furniture sculpture – decorative tabletop art piece\n// Overall footprint ≈ 80 mm × 80 mm × 110 mm (print-friendly)\n\n// ---------- parameters ----------\nball_d = 55;           // sphere diameter\nstick_d = 10;          // stick diameter\nwall = 2;              // print-safe wall thickness\nbase_h = 8;            // base thickness\nbase_r = 35;           // base radius\nrib_w = 3;             // decorative rib width\nrib_gap = 8;           // spacing between ribs\n$fn = 36;              // smooth curves\n\n// ---------- modules ----------\nmodule stickball() {\n    // decorative ball with latitudinal ribs\n    difference() {\n        sphere(d = ball_d);\n        // cut away the bottom so it rests on stick\n        translate([0, 0, -ball_d/2-1])\n            cube([ball_d*2, ball_d*2, ball_d], center = true);\n    }\n    for (theta = [0 : 30 : 150]) {\n        rotate([0, 0, theta])\n            translate([0, 0, ball_d/2 - rib_w/2])\n                sphere(d = ball_d - rib_w);\n    }\n}\n\nmodule tapered_stick() {\n    // simple tapered stick – no overhangs\n    cylinder(h1 = stick_d, h2 = stick_d*0.7, h = 65);\n}\n\nmodule foot() {\n    // small ball foot for stability\n    sphere(d = stick_d*1.2);\n}\n\nmodule base() {\n    // circular base with shallow relief pattern\n    difference() {\n        cylinder(h = base_h, r = base_r);\n        // concentric grooves\n        for (r = [base_r - 6 : -6 : 10])\n            translate([0, 0, -1])\n                cylinder(h = base_h + 2, r = r);\n    }\n}\n\n// ---------- assembly ----------\nmodule stickball_furniture() {\n    // base\n    base();\n    \n    // four feet at corners\n    for (a = [45 : 90 : 315])\n        rotate([0, 0, a])\n            translate([base_r*0.7, 0, base_h])\n                foot();\n    \n    // central stick\n    translate([0, 0, base_h + stick_d/2])\n        tapered_stick();\n    \n    // ball on top\n    translate([0, 0, base_h + 65 + stick_d/2])\n        stickball();\n}\n\nstickball_furniture();",
    "renders": true
  },
  {
    "decorative_art": "rounders",
    "openscad_code": "// Rounders furniture piece (decorative accent table with spherical base)\n// Overall size: 120mm diameter, 90mm height - suitable for 3D printing\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main module for the rounders accent table\nmodule rounders_table() {\n    // Base sphere - hollow for material savings\n    difference() {\n        sphere(d = 60);  // Main spherical base\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            sphere(d = 56);\n    }\n    \n    // Top platform - circular tabletop\n    translate([0, 0, 55])\n        cylinder(h = 4, d1 = 50, d2 = 45);\n    \n    // Support ring - decorative transition between sphere and tabletop\n    translate([0, 0, 48])\n        cylinder(h = 8, d1 = 45, d2 = 30);\n    \n    // Decorative rings around sphere equator\n    for (i = [-20:20:20]) {\n        translate([0, 0, i])\n            rotate([90, 0, 0])\n                cylinder(h = 2, r = 31, center = true);\n    }\n    \n    // Structural feet - four contact points\n    for (angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n            translate([22, 0, -28])\n                rotate([90, 0, 0])\n                    cylinder(h = 8, r1 = 6, r2 = 4);\n    }\n    \n    // Tabletop edge detail - decorative bevel\n    translate([0, 0, 59])\n        cylinder(h = 2, d1 = 52, d2 = 50);\n}\n\n// Assembly with proper positioning\nrounders_table();",
    "renders": true
  },
  {
    "decorative_art": "teeball",
    "openscad_code": "// Teeball Furniture Decorative Piece\n// A stylized teeball (baseball on a tee) designed as a small furniture accent\n// Overall height: 100mm, suitable for desktop display\n\n// Constants\nball_d = 45;            // Baseball diameter\nball_r = ball_d/2;\ntee_h = 55;             // Tee height\ntee_base_d = 35;        // Tee base diameter\ntee_stem_d = 12;        // Tee stem diameter\nwall_t = 2;             // Wall thickness for 3D printing\n\n// Baseball seam pattern parameters\nseam_w = 1.5;\nseam_depth = 1;\n\nmodule baseball() {\n    // Main ball\n    difference() {\n        sphere(r=ball_r, $fn=64);\n        \n        // Red seams - figure-8 pattern\n        rotate([0, 0, 45]) {\n            // Top seam curves\n            for(i=[0:1]) {\n                rotate([0, 0, i*180]) {\n                    translate([0, 0, ball_r*0.8]) {\n                        rotate_extrude(angle=90, $fn=32) {\n                            translate([ball_r*0.8, 0, 0]) {\n                                circle(r=seam_w, $fn=16);\n                            }\n                        }\n                    }\n                }\n            }\n            \n            // Bottom seam curves\n            for(i=[0:1]) {\n                rotate([0, 0, 90 + i*180]) {\n                    translate([0, 0, -ball_r*0.8]) {\n                        rotate_extrude(angle=90, $fn=32) {\n                            translate([ball_r*0.8, 0, 0]) {\n                                circle(r=seam_w, $fn=16);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Stitching holes along seams\n        for(angle=[0:15:360]) {\n            rotate([0, 0, angle]) {\n                translate([ball_r*0.9, 0, ball_r*0.7]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=seam_depth*2, r=0.5, $fn=8);\n                    }\n                }\n                translate([ball_r*0.9, 0, -ball_r*0.7]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=seam_depth*2, r=0.5, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule tee_base() {\n    // Decorative base with stepped design\n    union() {\n        // Bottom disc\n        cylinder(h=wall_t*2, d=tee_base_d, $fn=32);\n        \n        // Middle tier\n        translate([0, 0, wall_t*2]) {\n            cylinder(h=wall_t*2, d=tee_base_d*0.8, $fn=32);\n        }\n        \n        // Top tier with rounded edge\n        translate([0, 0, wall_t*4]) {\n            cylinder(h=wall_t*2, d=tee_base_d*0.6, $fn=32);\n            translate([0, 0, wall_t*2]) {\n                sphere(d=tee_base_d*0.6, $fn=32);\n            }\n        }\n    }\n}\n\nmodule tee_stem() {\n    // Tapered stem with decorative rings\n    union() {\n        // Main stem\n        cylinder(h=tee_h-wall_t*8, d1=tee_stem_d, d2=tee_stem_d*0.8, $fn=32);\n        \n        // Decorative rings\n        for(i=[1:3]) {\n            translate([0, 0, i*(tee_h-wall_t*8)/4]) {\n                cylinder(h=wall_t, d=tee_stem_d*1.2, $fn=32);\n            }\n        }\n        \n        // Top cup for ball\n        translate([0, 0, tee_h-wall_t*8]) {\n            difference() {\n                cylinder(h=wall_t*3, d=tee_stem_d*1.8, $fn=32);\n                translate([0, 0, -0.1]) {\n                    sphere(d=ball_d*1.02, $fn=32);\n                }\n            }\n        }\n    }\n}\n\nmodule teeball_furniture() {\n    // Assemble the complete piece\n    union() {\n        // Tee base\n        translate([0, 0, 0]) {\n            tee_base();\n        }\n        \n        // Tee stem\n        translate([0, 0, wall_t*6]) {\n            tee_stem();\n        }\n        \n        // Baseball on top\n        translate([0, 0, tee_h]) {\n            baseball();\n        }\n    }\n}\n\n// Render the complete model\nteeball_furniture();",
    "renders": true
  },
  {
    "decorative_art": "fastpitch",
    "openscad_code": "// Fastpitch furniture art piece - stylized softball/baseball chair\n// Overall dimensions: ~100mm tall, 80mm wide, 100mm deep\n\n$fa = 2;\n$fs = 0.5;\n\n// Main seat - stylized softball\nmodule seat() {\n    // Base sphere for seat\n    translate([0, 0, 40]) \n    scale([1, 1, 0.6])\n    sphere(30);\n    \n    // Seat indent\n    translate([0, 0, 58])\n    scale([1, 1, 0.3])\n    sphere(28);\n}\n\n// Backrest - curved like a catcher's mitt\nmodule backrest() {\n    // Main back panel\n    translate([0, -25, 70])\n    rotate([0, 10, 0])\n    cube([60, 3, 50], center=true);\n    \n    // Curved top\n    translate([0, -25, 95])\n    rotate([0, 10, 0])\n    rotate_extrude(angle=180)\n    translate([30, 0, 0])\n    circle(2);\n}\n\n// Legs - stylized bat shapes\nmodule bat_leg(x_pos, z_rot) {\n    translate([x_pos, 0, 0])\n    rotate([0, 0, z_rot])\n    cylinder(h=40, r1=3, r2=2, center=false);\n}\n\n// Bat handle details\nmodule bat_handle() {\n    // Grip texture rings\n    for(i = [0:3:30]) {\n        translate([0, 0, i])\n        cylinder(h=2, r=2.5, center=true);\n    }\n}\n\n// Decorative stitching pattern\nmodule stitching_pattern() {\n    // Red stitching lines\n    color(\"red\") {\n        // Top stitches\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n            translate([28, 0, 42])\n            rotate([90, 0, 0])\n            cylinder(h=3, r=0.5, center=true);\n        }\n        \n        // Bottom stitches\n        for(angle = [22.5:45:337.5]) {\n            rotate([0, 0, angle])\n            translate([28, 0, 38])\n            rotate([90, 0, 0])\n            cylinder(h=3, r=0.5, center=true);\n        }\n    }\n}\n\n// Base support frame\nmodule base_frame() {\n    // Front crossbar\n    translate([0, 30, 5])\n    rotate([90, 0, 0])\n    cylinder(h=70, r=2, center=true);\n    \n    // Rear crossbar\n    translate([0, -30, 5])\n    rotate([90, 0, 0])\n    cylinder(h=70, r=2, center=true);\n    \n    // Side supports\n    for(side = [-1, 1]) {\n        translate([side * 35, 0, 5])\n        rotate([0, 90, 0])\n        cylinder(h=60, r=2, center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat with softball styling\n    seat();\n    \n    // Add stitching to seat\n    stitching_pattern();\n    \n    // Backrest\n    backrest();\n    \n    // Four legs as bats\n    bat_leg(25, 0);\n    bat_leg(-25, 0);\n    bat_leg(20, -5);\n    bat_leg(-20, 5);\n    \n    // Add bat handle details to front legs\n    translate([25, 0, 0]) bat_handle();\n    translate([-25, 0, 0]) bat_handle();\n    \n    // Base support structure\n    base_frame();\n}\n\n// Small decorative ball finial on backrest\ntranslate([0, -25, 100])\nsphere(4);",
    "renders": true
  },
  {
    "decorative_art": "slowpitch",
    "openscad_code": "// Slowpitch Baseball Bat Lounge Chair - Realistic Style\n// Dimensions: 120mm height, 80mm width, 80mm depth\n\n$fn = 50;\n\n// Overall chair module\nmodule chair() {\n    // Chair frame base\n    difference() {\n        union() {\n            // Main seat base - bat barrel shape\n            rotate([0, 90, 0])\n                cylinder(h=60, d1=30, d2=25);\n            \n            // Seat platform\n            translate([0, -15, 30])\n                cube([70, 60, 5], center=true);\n            \n            // Backrest - bat handle shape  \n            translate([0, 25, 50])\n                rotate([15, 0, 0])\n                    cylinder(h=50, d1=15, d2=20);\n            \n            // Arm supports\n            arm_support(-35);\n            arm_support(35);\n            \n            // Leg structure\n            for(x = [-25, 25])\n                for(z = [-25, 25])\n                    leg(x, z);\n        }\n        \n        // Hollow seat for weight reduction\n        translate([0, -15, 32])\n            cube([65, 55, 8], center=true);\n    }\n    \n    // Decorative baseball seam pattern on back\n    seam_pattern();\n    \n    // Upholstery details\n    upholstery_details();\n}\n\nmodule arm_support(side) {\n    translate([side, 10, 35])\n        rotate([0, 15, 0])\n            cylinder(h=25, d=8);\n    \n    translate([side, 15, 47])\n        rotate([0, -15, 0])\n            cylinder(h=20, d=8);\n}\n\nmodule leg(x, z) {\n    translate([x, -30, z])\n        cylinder(h=30, d=6);\n}\n\nmodule seam_pattern() {\n    // Baseball seam curves on backrest\n    color(\"red\")\n    for(i = [0:3]) {\n        rotate([0, 15 + i*5, i*90])\n            translate([0, 25, 65])\n                rotate([90, 0, 0])\n                    cylinder(h=2, d1=2, d2=2);\n    }\n    \n    // Red stitching lines\n    for(i = [0:7]) {\n        rotate([0, 0, i*45])\n            translate([0, 25, 65])\n                rotate([90, 0, 0])\n                    translate([5, 0, 0])\n                        cylinder(h=1, d=0.5);\n    }\n}\n\nmodule upholstery_details() {\n    // Seat cushion texture\n    for(x = [-25:12.5:25]) {\n        for(y = [-15:12.5:15]) {\n            translate([x, y, 32.5])\n                cube([10, 10, 1], center=true);\n        }\n    }\n    \n    // Backrest padding\n    for(y = [20:10:40]) {\n        translate([0, y, 55])\n            cube([50, 8, 2], center=true);\n    }\n}\n\n// Render the chair\nchair();",
    "renders": true
  },
  {
    "decorative_art": "hurling",
    "openscad_code": "// Hurling Stick Wall Mount Decorative Furniture\n// A realistic 3D printable wall mount for a hurling stick with decorative elements\n\n$fn = 32;\n\n// Main dimensions\nstick_length = 120;\nstick_width = 25;\nstick_thickness = 8;\nhandle_length = 35;\nbas_width = 70;\nbas_height = 50;\nwall_plate_width = 80;\nwall_plate_height = 100;\nwall_plate_thickness = 4;\nmount_depth = 15;\n\n// Wall mounting plate\nmodule wall_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, wall_plate_thickness/2])\n            cube([wall_plate_width, wall_plate_height, wall_plate_thickness], center=true);\n        \n        // Screw holes (2mm diameter for M2 screws)\n        for (y = [-30, 0, 30]) {\n            translate([0, y, 0])\n                cylinder(h=wall_plate_thickness+2, r=1.2, center=true);\n        }\n        \n        // Decorative Celtic knot pattern\n        for (x = [-25, 0, 25]) {\n            for (y = [-35, 0, 35]) {\n                translate([x, y, wall_plate_thickness])\n                    cylinder(h=2, r=3, center=false);\n            }\n        }\n    }\n}\n\n// Hurling stick body\nmodule hurling_stick() {\n    // Handle\n    translate([0, -stick_length/2 + handle_length/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h=handle_length, r=stick_width/4, center=true);\n    \n    // Stick shaft (tapered)\n    translate([0, -stick_length/2 + handle_length + (stick_length-handle_length)/2, 0])\n        rotate([90, 0, 0])\n            cylinder(h1=stick_length-handle_length, h2=stick_length-handle_length, \n                    r1=stick_width/4, r2=stick_width/3, center=true);\n    \n    // Bas (curved part)\n    translate([0, stick_length/2 - bas_height/2, 0])\n        rotate([90, 0, 0])\n            difference() {\n                // Main bas shape\n                scale([1, 0.7, 1])\n                    sphere(r=bas_width/2);\n                \n                // Cut to make it flat on bottom\n                translate([0, -bas_width/2, 0])\n                    cube([bas_width*1.5, bas_width, bas_width], center=true);\n                \n                // Inner curve\n                scale([0.8, 0.8, 0.8])\n                    sphere(r=bas_width/2.5);\n            }\n}\n\n// Mounting bracket\nmodule mounting_bracket() {\n    // Support arms\n    for (x = [-stick_width/2 - 5, stick_width/2 + 5]) {\n        translate([x, 0, wall_plate_thickness + mount_depth/2])\n            cube([4, stick_length, mount_depth], center=true);\n    }\n    \n    // Top support\n    translate([0, stick_length/2 - 10, wall_plate_thickness + mount_depth/2])\n        cube([stick_width + 20, 4, mount_depth], center=true);\n    \n    // Bottom support with angle\n    translate([0, -stick_length/2 + 15, wall_plate_thickness + mount_depth/2])\n        cube([stick_width + 20, 4, mount_depth], center=true);\n    \n    // Decorative end caps\n    for (y = [stick_length/2 - 5, -stick_length/2 + 5]) {\n        translate([stick_width/2 + 7, y, wall_plate_thickness + mount_depth/2])\n            rotate([0, 90, 0])\n                cylinder(h=4, r=3, center=true);\n        translate([-stick_width/2 - 7, y, wall_plate_thickness + mount_depth/2])\n            rotate([0, 90, 0])\n                cylinder(h=4, r=3, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Wall plate\n    wall_plate();\n    \n    // Mounting bracket\n    mounting_bracket();\n    \n    // Hurling stick (rotated for wall mount)\n    translate([0, 0, wall_plate_thickness + mount_depth + stick_thickness/2])\n        rotate([90, 0, 0])\n            hurling_stick();\n}",
    "renders": true
  },
  {
    "decorative_art": "gaelicball",
    "openscad_code": "// Gaelicball Furniture - Decorative Side Table\n// Realistic style, medium complexity\n// Overall height: 120mm, ball diameter: 80mm\n\n// Main parameters\nball_diameter = 80;\nbase_height = 40;\nleg_height = 80;\nwall_thickness = 2;\n\n// Decorative pattern parameters\npattern_depth = 1.5;\npattern_segments = 8;\n\nmodule main_assembly() {\n    // Base platform\n    translate([0, 0, 0])\n        base_platform();\n    \n    // Support legs\n    for(angle = [0:120:240])\n        rotate([0, 0, angle])\n            translate([30, 0, base_height])\n                support_leg();\n    \n    // Main gaelicball body\n    translate([0, 0, base_height + leg_height + ball_diameter/2])\n        gaelicball_body();\n}\n\nmodule base_platform() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_height, r = 50, $fn = 64);\n        \n        // Hollow center\n        translate([0, 0, wall_thickness])\n            cylinder(h = base_height, r = 50 - wall_thickness, $fn = 64);\n        \n        // Decorative ring pattern on top\n        for(i = [1:3]) {\n            translate([0, 0, base_height - pattern_depth])\n                cylinder(h = pattern_depth, r = 50 - (i * 10), $fn = 64);\n        }\n    }\n}\n\nmodule support_leg() {\n    union() {\n        // Main leg cylinder\n        cylinder(h = leg_height, r = 5, $fn = 32);\n        \n        // Decorative rings\n        for(h = [20:20:60]) {\n            translate([0, 0, h])\n                cylinder(h = 3, r = 7, $fn = 32);\n        }\n    }\n}\n\nmodule gaelicball_body() {\n    difference() {\n        // Main sphere\n        sphere(r = ball_diameter/2, $fn = 64);\n        \n        // Hollow interior\n        sphere(r = ball_diameter/2 - wall_thickness, $fn = 64);\n        \n        // Traditional seam pattern - vertical grooves\n        for(angle = [0:45:315]) {\n            rotate([0, 0, angle])\n                translate([ball_diameter/2 - pattern_depth, 0, 0])\n                    rotate([0, 90, 0])\n                        cylinder(h = ball_diameter, r = 1, $fn = 16);\n        }\n        \n        // Horizontal seam pattern\n        for(z = [-ball_diameter/3, 0, ball_diameter/3]) {\n            translate([0, 0, z])\n                rotate([90, 0, 0])\n                    cylinder(h = ball_diameter, r = 1, $fn = 16);\n        }\n    }\n    \n    // Decorative studs pattern\n    for(lat = [-30:30:30]) {\n        for(lon = [0:60:300]) {\n            rotate([0, lat, lon])\n                translate([0, 0, ball_diameter/2])\n                    sphere(r = 2, $fn = 16);\n        }\n    }\n}\n\n// Generate the complete furniture piece\nmain_assembly();",
    "renders": true
  },
  {
    "decorative_art": "aussieball",
    "openscad_code": "// Aussieball Decorative Furniture – realistic, medium complexity\n\n// Overall size: 100 mm diameter ball\n// Wall thickness: 2 mm\n// Designed as a hollow sphere with internal lattice support and external furniture-style details\n\n$fn = 64;\n\n// Main parameters\nball_d = 100;            // Overall diameter\nwall_t = 2;              // Wall thickness\nbase_h = 25;             // Height of wooden stand\nbase_d = 60;             // Diameter of wooden stand\nleg_h = 20;              // Furniture leg height\nleg_d = 8;               // Furniture leg diameter\npanel_w = 20;            // Width of decorative panels\npanel_t = 3;             // Thickness of decorative panels\n\n// Hollow sphere shell\nmodule hollow_sphere() {\n    difference() {\n        sphere(d = ball_d);\n        sphere(d = ball_d - 2 * wall_t);\n    }\n}\n\n// Internal lattice for 3D-printing support\nmodule internal_lattice() {\n    // Vertical supports\n    for (a = [0:45:315]) {\n        rotate([0, 0, a])\n            translate([0, 0, -ball_d/2])\n                cylinder(h = ball_d, d = 2, center = true);\n    }\n    // Horizontal ring supports\n    for (z = [-30, 0, 30]) {\n        translate([0, 0, z])\n            rotate_extrude()\n                translate([(ball_d - 2 * wall_t)/2 - 1, 0, 0])\n                    circle(d = 2);\n    }\n}\n\n// Decorative panels mimicking furniture facades\nmodule decorative_panels() {\n    panel_angles = [0, 60, 120, 180, 240, 300];\n    for (a = panel_angles) {\n        rotate([0, 0, a])\n            translate([0, ball_d/2 - panel_t/2, 0])\n                cube([panel_w, panel_t, 60], center = true);\n    }\n}\n\n// Furniture-style ball feet\nmodule ball_feet() {\n    foot_positions = [\n        [ 35,  35, -ball_d/2 - leg_h/2],\n        [-35,  35, -ball_d/2 - leg_h/2],\n        [ 35, -35, -ball_d/2 - leg_h/2],\n        [-35, -35, -ball_d/2 - leg_h/2]\n    ];\n    for (pos = foot_positions) {\n        translate(pos)\n            cylinder(h = leg_h, d = leg_d, center = true);\n    }\n}\n\n// Wooden stand base\nmodule wooden_base() {\n    difference() {\n        cylinder(h = base_h, d = base_d);\n        cylinder(h = base_h, d = 30);  // Central hollow\n    }\n}\n\n// Assembly\nunion() {\n    // Stand\n    translate([0, 0, -ball_d/2 - leg_h - base_h/2])\n        wooden_base();\n\n    // Feet\n    ball_feet();\n\n    // Main body\n    translate([0, 0, -leg_h/2])\n        union() {\n            hollow_sphere();\n            decorative_panels();\n            internal_lattice();\n        }\n}",
    "renders": true
  },
  {
    "decorative_art": "curlingstone",
    "openscad_code": "// Curling-Stone Decorative Stool / Side Table\n// Realistic scale: 120 mm diameter, 90 mm usable height\n// Wall thickness 2 mm throughout\n// No over-hangs: all parts taper or are printable without supports\n\n$fn = 60; // smooth curves\n\n// ------------------------ Parameters ------------------------\ndia_top       = 120;      // overall diameter of top seat\ndia_body      = 110;      // diameter of stone body\ndia_handle    = 34;       // handle ring diameter\nstone_h       = 55;       // height of main “stone” body\nseat_thick    = 4;        // thickness of top seat plate\nhandle_h      = 18;       // height of handle arc\nwall          = 2;        // printable wall thickness\nleg_h         = 35;       // furniture leg height\nleg_r         = 5;        // leg cylinder radius\nleg_count     = 3;        // tripod for stability\nbase_dia      = 110;      // lower base diameter same as body\npattern_circ  = 6;        // decorative concentric rings on top\n\n// ------------------------ Main Assembly ------------------------\nmodule curlingstone_stool() {\n    union() {\n        // 1. Stone body (hollow shell)\n        difference() {\n            // outer shell\n            cylinder(h = stone_h, d = dia_body, center = true);\n            // inner hollow\n            translate([0,0,-(wall+0.1)/2])\n                cylinder(h = stone_h + 0.2, d = dia_body - 2*wall, center = true);\n        }\n\n        // 2. Top seat plate\n        translate([0, 0, stone_h/2 + seat_thick/2])\n            cylinder(h = seat_thick, d = dia_top, center = true);\n\n        // 3. Decorative concentric rings on seat\n        for (i = [1:pattern_circ]) {\n            translate([0, 0, stone_h/2 + seat_thick + 0.2])\n                cylinder(h = 0.8, d = dia_top - (i*8), center = false);\n        }\n\n        // 4. Handle arc (double cylinder for realism)\n        handle_profile();\n\n        // 5. Furniture tripod legs\n        legs();\n    }\n}\n\n// ------------------------ Handle module ------------------------\nmodule handle_profile() {\n    // 1. Main handle ring\n    translate([0, 0, handle_h/2])\n        difference() {\n            cylinder(h = handle_h, d = dia_handle, center = true);\n            cylinder(h = handle_h + 0.4, d = dia_handle - 2*wall, center = true);\n        }\n\n    // 2. Two side posts to connect to stone\n    for (a = [-90, 90]) {\n        rotate([0, 0, a])\n            translate([dia_handle/2 - wall/2, 0, handle_h/2])\n                rotate([90, 0, 0])\n                    cylinder(h = wall*1.5, r = wall, center = true);\n    }\n}\n\n// ------------------------ Tripod legs ------------------------\nmodule legs() {\n    // attach legs to underside of stone body\n    for (i = [0: leg_count-1])\n        rotate([0, 0, i*360/leg_count])\n            translate([dia_body/3, 0, -stone_h/2 - leg_h/2 - seat_thick])\n                cylinder(h = leg_h, r = leg_r, center = true);\n\n    // horizontal ring brace between legs for stability\n    translate([0, 0, -stone_h/2 - leg_h/2 - seat_thick])\n        difference() {\n            cylinder(h = wall, d = 1.5*dia_body, center = true);\n            cylinder(h = wall + 0.2, d = 1.5*dia_body - 2*wall, center = true);\n        }\n}\n\n// ------------------------ Render ------------------------\ncurlingstone_stool();",
    "renders": true
  },
  {
    "decorative_art": "discus",
    "openscad_code": "// Discus Furniture - Decorative Wall Shelf\n// A stylized discus turned into a functional wall shelf with decorative elements\n// Overall dimensions: 120mm diameter, 25mm thickness\n\nmodule discus_shelf() {\n    // Main discus body - hollow cylinder with rounded edges\n    difference() {\n        // Outer discus shape\n        union() {\n            // Main cylindrical body\n            cylinder(h = 20, d = 120, $fn = 100);\n            \n            // Rounded front edge\n            translate([0, 0, 10])\n                scale([1, 1, 0.5])\n                    sphere(d = 120, $fn = 100);\n            \n            // Rounded back edge\n            translate([0, 0, -10])\n                scale([1, 1, 0.5])\n                    sphere(d = 120, $fn = 100);\n        }\n        \n        // Hollow center\n        cylinder(h = 25, d = 110, $fn = 100);\n    }\n    \n    // Shelf platform\n    translate([0, 0, -5])\n        difference() {\n            // Main shelf\n            cylinder(h = 5, d = 100, $fn = 100);\n            \n            // Lightening holes for 3D printing\n            for (i = [0:45:315]) {\n                rotate([0, 0, i])\n                    translate([35, 0, -1])\n                        cylinder(h = 7, d = 8, $fn = 20);\n            }\n        }\n    \n    // Decorative ring pattern on front face\n    difference() {\n        // Raised rings\n        for (r = [45:15:75]) {\n            translate([0, 0, 10.5])\n                cylinder(h = 1.5, d = r * 2, $fn = 60);\n        }\n        \n        // Cut grooves between rings\n        for (r = [52.5:15:67.5]) {\n            translate([0, 0, 10.4])\n                cylinder(h = 1.7, d = r * 2 + 2, $fn = 60);\n        }\n    }\n    \n    // Wall mounting brackets (4 points)\n    module bracket() {\n        difference() {\n            // Bracket body\n            translate([-5, 0, 0])\n                cube([10, 15, 8]);\n            \n            // Mounting hole\n            translate([0, 7.5, 4])\n                rotate([90, 0, 0])\n                    cylinder(h = 20, d = 4, $fn = 20);\n        }\n    }\n    \n    // Position brackets at 90 degree intervals\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([0, 50, 0])\n                bracket();\n    }\n    \n    // Center decorative emblem\n    difference() {\n        // Raised star pattern\n        translate([0, 0, 10.5])\n            cylinder(h = 2, d = 30, $fn = 6);\n        \n        // Inner circle detail\n        translate([0, 0, 12.5])\n            cylinder(h = 2, d = 15, $fn = 30);\n    }\n    \n    // Structural ribs on back for strength\n    module rib() {\n        translate([0, -2, 7.5])\n            cube([4, 100, 5]);\n    }\n    \n    // Add 4 ribs at 45 degree angles\n    for (a = [45:90:315]) {\n        rotate([0, 0, a])\n            rib();\n    }\n}\n\n// Render the complete discus furniture piece\ndiscus_shelf();",
    "renders": true
  },
  {
    "decorative_art": "shotput",
    "openscad_code": "// Shotput Decorative Furniture Piece - Realistic Style, Medium Complexity\n// A spherical shotput serving as a decorative element on a tripod stand\n\n// Overall dimensions\n$fn = 50;\nball_diameter = 60;\nstand_height = 40;\nleg_thickness = 4;\nbase_thickness = 3;\njoint_size = 8;\n\n// Main shotput ball with realistic surface texture\nmodule shotput_ball() {\n    union() {\n        // Main sphere\n        sphere(d = ball_diameter);\n        \n        // Surface texture - raised rings\n        for (i = [0:30:150]) {\n            rotate([i, 0, 0]) {\n                translate([0, 0, 0])\n                rotate_extrude(angle = 180, $fn = 50)\n                translate([ball_diameter/2 - 1, 0, 0])\n                circle(r = 0.5);\n            }\n        }\n    }\n}\n\n// Tripod leg with decorative groove\nmodule tripod_leg(length, angle) {\n    union() {\n        // Main leg\n        translate([0, 0, -length/2])\n        rotate([0, 90, 0])\n        cylinder(h = length, d1 = leg_thickness, d2 = leg_thickness * 0.8);\n        \n        // Decorative groove\n        translate([0, leg_thickness/2, -length/2])\n        rotate([0, 90, 0])\n        cylinder(h = length * 0.8, d = 1.5);\n    }\n}\n\n// Joint connector\nmodule joint() {\n    difference() {\n        sphere(d = joint_size);\n        // Hollow center for weight reduction\n        sphere(d = joint_size - 4);\n    }\n}\n\n// Base plate for stability\nmodule base() {\n    difference() {\n        cylinder(h = base_thickness, d = 40);\n        // Center hole for assembly\n        cylinder(h = base_thickness + 1, d = 8);\n        \n        // Weight reduction holes\n        for (i = [0:120:359]) {\n            rotate([0, 0, i])\n            translate([15, 0, -1])\n            cylinder(h = base_thickness + 2, d = 6);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Shotput on top\n    translate([0, 0, stand_height + ball_diameter/2])\n    shotput_ball();\n    \n    // Central support\n    translate([0, 0, stand_height/2])\n    cylinder(h = stand_height, d = 6);\n    \n    // Three legs\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n        translate([0, 0, joint_size/2])\n        rotate([15, 0, 0])\n        tripod_leg(stand_height - joint_size, 15);\n    }\n    \n    // Joints\n    translate([0, 0, joint_size/2])\n    joint();\n    translate([0, 0, stand_height - joint_size/2])\n    joint();\n    \n    // Base\n    translate([0, 0, 0])\n    base();\n}",
    "renders": true
  },
  {
    "decorative_art": "hammerball",
    "openscad_code": "// Hammerball Decorative Furniture Piece\n// A sculptural hammer with ball head designed as a decorative furniture accent\n\n$fn = 50;\n\n// Overall scale factor\nscale_factor = 1.2;\n\n// Main module\nmodule hammerball_furniture() {\n    scale([scale_factor, scale_factor, scale_factor]) {\n        union() {\n            // Hammer head (ball)\n            hammer_head();\n            \n            // Handle\n            handle();\n            \n            // Base stand\n            base_stand();\n            \n            // Decorative ring around handle junction\n            decorative_ring();\n        }\n    }\n}\n\n// Hammer head - spherical with decorative bands\nmodule hammer_head() {\n    translate([0, 0, 85]) {\n        difference() {\n            union() {\n                // Main sphere\n                sphere(r = 25);\n                \n                // Decorative equatorial band\n                rotate([0, 90, 0]) \n                    cylinder(h = 2, r1 = 26, r2 = 26, center = true);\n                \n                // Meridian bands\n                for (i = [0:45:315]) {\n                    rotate([0, i, 0]) \n                        cylinder(h = 2, r1 = 26, r2 = 26, center = true);\n                }\n            }\n            \n            // Hollow center for weight reduction\n            sphere(r = 20);\n        }\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    // Handle shaft\n    cylinder(h = 80, r1 = 8, r2 = 6);\n    \n    // Grip pattern\n    for (i = [10:10:70]) {\n        translate([0, 0, i]) {\n            difference() {\n                cylinder(h = 5, r = 9);\n                cylinder(h = 6, r = 7);\n            }\n        }\n    }\n    \n    // Handle end cap\n    translate([0, 0, -2]) {\n        cylinder(h = 4, r1 = 9, r2 = 10);\n    }\n}\n\n// Decorative ring at handle-head junction\nmodule decorative_ring() {\n    translate([0, 0, 75]) {\n        difference() {\n            cylinder(h = 8, r1 = 12, r2 = 12);\n            cylinder(h = 10, r1 = 10, r2 = 10);\n        }\n        \n        // Ornamental studs\n        for (i = [0:45:315]) {\n            rotate([0, 0, i]) {\n                translate([11, 0, 4]) {\n                    cylinder(h = 2, r = 1.5);\n                }\n            }\n        }\n    }\n}\n\n// Base stand for furniture display\nmodule base_stand() {\n    translate([0, 0, -15]) {\n        union() {\n            // Main base\n            cylinder(h = 10, r1 = 30, r2 = 25);\n            \n            // Base ring\n            translate([0, 0, 10]) {\n                difference() {\n                    cylinder(h = 3, r1 = 27, r2 = 27);\n                    cylinder(h = 4, r1 = 25, r2 = 25);\n                }\n            }\n            \n            // Support ribs\n            for (i = [0:30:330]) {\n                rotate([0, 0, i]) {\n                    translate([20, 0, 5]) {\n                        cube([8, 2, 10], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the model\nhammerball_furniture();",
    "renders": true
  },
  {
    "decorative_art": "javelin",
    "openscad_code": "// Javelin Decorative Wall Hook / Sculpture\n// Realistic style, medium complexity\n// Dimensions: ~120mm long, 30mm diameter at base\n// Wall mountable with two screw holes (3.5mm diameter)\n\n// Main parameters\njavelin_length = 120;\nshaft_diameter = 8;\ntip_length = 25;\nbase_diameter = 30;\nwall_thickness = 2;\n\n// Metal tip with realistic shape\nmodule metal_tip() {\n    difference() {\n        union() {\n            // Conical tip\n            cylinder(h=tip_length, d1=shaft_diameter, d2=1, $fn=32);\n            // Transition ring\n            translate([0, 0, tip_length-2])\n                cylinder(h=2, d=shaft_diameter+1, $fn=32);\n        }\n        // Hollow inside for material saving\n        cylinder(h=tip_length-1, d=shaft_diameter-wall_thickness*2, $fn=32);\n    }\n}\n\n// Main shaft with grip texture\nmodule shaft() {\n    difference() {\n        union() {\n            // Main tube\n            cylinder(h=javelin_length-tip_length-10, d=shaft_diameter, $fn=32);\n            \n            // Grip rings (simulating wrapped grip)\n            for(i = [0:3:30]) {\n                translate([0, 0, i])\n                    cylinder(h=1.5, d=shaft_diameter+1, $fn=32);\n            }\n        }\n        // Hollow shaft\n        cylinder(h=javelin_length-tip_length-10, d=shaft_diameter-wall_thickness*2, $fn=32);\n    }\n}\n\n// Decorative base with mounting bracket\nmodule base_mount() {\n    difference() {\n        union() {\n            // Main base disc\n            cylinder(h=8, d=base_diameter, $fn=64);\n            \n            // Reinforcement ring\n            translate([0, 0, 2])\n                cylinder(h=4, d=base_diameter-4, $fn=64);\n            \n            // Mounting ears for screws\n            for(angle = [45, 135, 225, 315]) {\n                rotate([0, 0, angle])\n                    translate([base_diameter/2-8, 0, 4])\n                        cube([16, 8, 8], center=true);\n            }\n        }\n        \n        // Screw holes (4 positions)\n        for(angle = [45, 135, 225, 315]) {\n            rotate([0, 0, angle])\n                translate([base_diameter/2-8, 0, -1])\n                    cylinder(h=10, d=3.5, $fn=16);\n        }\n        \n        // Center hole for shaft\n        cylinder(h=10, d=shaft_diameter+1, $fn=32);\n    }\n}\n\n// Decorative rings near base\nmodule decorative_rings() {\n    union() {\n        // Olympic-style rings\n        for(i = [0:1:4]) {\n            color_ring = i * 72;\n            rotate([0, 0, color_ring])\n                translate([base_diameter/2-6, 0, 2])\n                    scale([1, 0.3, 1])\n                        cylinder(h=6, d=12, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Wall mount base\n    base_mount();\n    \n    // Decorative rings on base\n    decorative_rings();\n    \n    // Main shaft\n    translate([0, 0, 8])\n        shaft();\n    \n    // Metal tip\n    translate([0, 0, javelin_length-tip_length+8])\n        metal_tip();\n}",
    "renders": true
  },
  {
    "decorative_art": "archery",
    "openscad_code": "// Archery Bow Rack - Realistic Medium Complexity\n// 3D printable bow rack with arrow storage, approx 120mm tall\n\nmodule bow_support() {\n    // Central bow cradle\n    difference() {\n        union() {\n            // Main cradle block\n            translate([0, -5, 0])\n                cube([20, 10, 15], center=true);\n            // Curved support arms\n            translate([-12, 0, 0])\n                rotate([0, 0, -30])\n                cube([15, 8, 12], center=true);\n            translate([12, 0, 0])\n                rotate([0, 0, 30])\n                cube([15, 8, 12], center=true);\n        }\n        // Bow slot cutout\n        translate([0, 0, 5])\n            cube([8, 6, 12], center=true);\n    }\n}\n\nmodule arrow_tube(count, spacing) {\n    // Individual arrow tube\n    for(i = [0:count-1]) {\n        translate([i*spacing - (count-1)*spacing/2, 0, 0]) {\n            difference() {\n                // Tube body\n                cylinder(h=35, d=10, $fn=20);\n                // Inner hole\n                cylinder(h=36, d=6, $fn=20);\n            }\n        }\n    }\n}\n\nmodule base_plate() {\n    // Main base with decorative edges\n    difference() {\n        // Base platform\n        cube([100, 40, 8], center=true);\n        \n        // Decorative grooves\n        for(i = [-40:10:40]) {\n            translate([i, 0, 4])\n                cube([2, 40, 8], center=true);\n        }\n    }\n    \n    // Feet\n    for(x = [-40, 40]) {\n        translate([x, -15, -4])\n            cube([8, 8, 4], center=true);\n        translate([x, 15, -4])\n            cube([8, 8, 4], center=true);\n    }\n}\n\nmodule back_panel() {\n    // Decorative back panel with cutouts\n    difference() {\n        // Main panel\n        translate([0, 0, 52])\n            cube([80, 6, 100], center=true);\n        \n        // Decorative arch pattern\n        for(i = [0:3]) {\n            translate([-30 + i*20, 0, 100 - i*20])\n                rotate([90, 0, 0])\n                cylinder(h=6, d1=15-i*2, d2=15-i*2, $fn=3);\n        }\n    }\n}\n\nmodule support_frame() {\n    // Side support frames\n    for(side = [-1, 1]) {\n        translate([side*45, 0, 25]) {\n            // Vertical post\n            cube([6, 6, 50], center=true);\n            \n            // Cross brace\n            rotate([0, side*30, 0])\n            translate([0, 0, 10])\n                cube([6, 6, 40], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base_plate();\n    \n    // Frame\n    support_frame();\n    \n    // Back panel\n    back_panel();\n    \n    // Bow support\n    translate([0, 0, 35])\n        bow_support();\n    \n    // Arrow storage tubes\n    translate([30, 0, 4])\n        arrow_tube(3, 12);\n    translate([-30, 0, 4])\n        arrow_tube(3, 12);\n}",
    "renders": true
  },
  {
    "decorative_art": "fencing",
    "openscad_code": "// Fencing Furniture - Decorative Garden Fence Panel\n// Medium complexity realistic style with furniture-like details\n\n$fn = $preview ? 32 : 64;\n\n// Overall dimensions\npanel_width = 120;\npanel_height = 80;\npost_size = 8;\nrail_thickness = 4;\npicket_width = 3;\npicket_spacing = 8;\n\nmodule post() {\n    // Main post body\n    translate([-post_size/2, 0, 0])\n        cube([post_size, post_size, panel_height]);\n    \n    // Post cap with decorative bevel\n    translate([-post_size/2, 0, panel_height])\n        cylinder(h=post_size*1.5, r1=post_size/2, r2=post_size/2.5);\n    \n    // Post base with furniture-style foot\n    translate([-post_size/2-1, -1, -2])\n        cube([post_size+2, post_size+2, 2]);\n}\n\nmodule rail() {\n    // Top rail with decorative molding\n    difference() {\n        translate([-5, post_size/2-rail_thickness/2, panel_height*0.7])\n            cube([panel_width+10, rail_thickness, rail_thickness*1.5]);\n        \n        // Decorative groove\n        translate([-4, post_size/2+1, panel_height*0.7+rail_thickness*1.5-1.5])\n            cube([panel_width+8, 0.5, 1]);\n    }\n    \n    // Bottom rail\n    translate([-5, post_size/2-rail_thickness/2, panel_height*0.3])\n        cube([panel_width+10, rail_thickness, rail_thickness]);\n}\n\nmodule picket() {\n    // Main picket body\n    linear_extrude(height=panel_height*0.35) {\n        polygon(points=[\n            [0, 0],\n            [picket_width, 0],\n            [picket_width, panel_height*0.3-5],\n            [picket_width/2, panel_height*0.3],\n            [0, panel_height*0.3-5]\n        ]);\n    }\n    \n    // Decorative finial\n    translate([picket_width/2, picket_width/2, panel_height*0.3])\n        sphere(d=picket_width*1.5);\n}\n\nmodule fence_panel() {\n    // Left post\n    post();\n    \n    // Right post\n    translate([panel_width, 0, 0])\n        mirror([1, 0, 0])\n            post();\n    \n    // Rails\n    rail();\n    \n    // Pickets\n    for(i = [0:floor((panel_width-post_size*2)/(picket_width+picket_spacing))]) {\n        x_pos = post_size + i*(picket_width+picket_spacing) + picket_spacing/2;\n        if(x_pos + picket_width < panel_width - post_size) {\n            translate([x_pos, post_size/2 - picket_width/2, panel_height*0.3])\n                picket();\n        }\n    }\n    \n    // Decorative scroll bracket (structural support)\n    module scroll_bracket() {\n        difference() {\n            union() {\n                // Main bracket body\n                translate([post_size/2, post_size/2, panel_height*0.3])\n                    cube([panel_width-post_size, rail_thickness*0.8, panel_height*0.4]);\n                \n                // Scroll ends\n                translate([post_size/2, post_size/2, panel_height*0.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=post_size, r=rail_thickness);\n                \n                translate([panel_width-post_size/2, post_size/2, panel_height*0.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=post_size, r=rail_thickness);\n            }\n            \n            // Cutout pattern\n            for(x = [post_size+5:10:panel_width-post_size-5]) {\n                translate([x, post_size/2+rail_thickness*0.4, panel_height*0.3+5])\n                    rotate([0, 90, 0])\n                        cylinder(h=2, r=2);\n            }\n        }\n    }\n    \n    scroll_bracket();\n    \n    // Furniture-style decorative feet\n    module foot() {\n        translate([0, -2, -4])\n            difference() {\n                cube([post_size+4, post_size+4, 4]);\n                translate([2, 2, -1])\n                    cube([post_size, post_size, 6]);\n            }\n    }\n    \n    foot();\n    translate([panel_width, 0, 0])\n        mirror([1, 0, 0])\n            foot();\n}\n\n// Main assembly\nfence_panel();",
    "renders": true
  },
  {
    "decorative_art": "kendo",
    "openscad_code": "// Kendo Sword Rack - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm (L) x 40mm (D) x 80mm (H)\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\nbase_width = 120;\nbase_depth = 40;\nbase_height = 8;\nrack_height = 80;\nbar_diameter = 10;\nsupport_thickness = 3;\n\n// Main base with decorative edges\nmodule base_plate() {\n    difference() {\n        // Main base\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Rounded edges on bottom\n        translate([0, 0, -base_height/2]) {\n            cylinder(h=wall_thickness, r1=base_depth/2-wall_thickness, r2=base_depth/2);\n        }\n        \n        // Decorative grooves on top\n        for(i = [-40:20:40]) {\n            translate([i, 0, base_height/2-1]) {\n                cube([15, base_depth-wall_thickness, 2], center=true);\n            }\n        }\n    }\n}\n\n// Support posts with traditional Japanese style joints\nmodule support_post(x_pos) {\n    translate([x_pos, 0, base_height/2 + rack_height/2]) {\n        difference() {\n            // Main post\n            cube([support_thickness*2, base_depth-10, rack_height], center=true);\n            \n            // Traditional joint cutouts\n            translate([0, 0, rack_height/4]) {\n                cube([support_thickness*2+0.5, base_depth-8, 8], center=true);\n            }\n            translate([0, 0, -rack_height/4]) {\n                cube([support_thickness*2+0.5, base_depth-8, 8], center=true);\n            }\n        }\n        \n        // Decorative cap\n        translate([0, 0, rack_height/2+2]) {\n            scale([1.2, 1.2, 0.5]) {\n                sphere(r=support_thickness);\n            }\n        }\n    }\n}\n\n// Sword holding bars with protective padding areas\nmodule holding_bar(height) {\n    translate([0, 0, base_height+height]) {\n        // Main bar\n        rotate([90, 0, 0]) {\n            cylinder(h=base_width-20, r=bar_diameter/2, center=true);\n        }\n        \n        // Protective padding rings\n        for(i = [-40:40:40]) {\n            translate([i, 0, 0]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h=bar_diameter+4, r1=bar_diameter/2+1, r2=bar_diameter/2+1);\n                }\n            }\n        }\n        \n        // Decorative end caps\n        translate([base_width/2-10, 0, 0]) {\n            rotate([90, 0, 0]) {\n                sphere(r=bar_diameter/2+1);\n            }\n        }\n        translate([-base_width/2+10, 0, 0]) {\n            rotate([90, 0, 0]) {\n                sphere(r=bar_diameter/2+1);\n            }\n        }\n    }\n}\n\n// Traditional kendo kanji decoration\nmodule kanji_decoration() {\n    translate([0, 0, base_height/2+1]) {\n        linear_extrude(height=1) {\n            text(\"剣\", size=20, font=\"serif\", halign=\"center\", valign=\"center\");\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base_plate();\n    \n    // Support posts\n    support_post(-base_width/2 + 20);\n    support_post(base_width/2 - 20);\n    \n    // Sword holding bars\n    holding_bar(15);\n    holding_bar(35);\n    holding_bar(55);\n    \n    // Decorative elements\n    kanji_decoration();\n    \n    // Additional support brace\n    translate([0, 0, base_height+70]) {\n        cube([base_width-20, wall_thickness, wall_thickness], center=true);\n    }\n    \n    // Feet for stability\n    for(x = [-base_width/2+10:20:base_width/2-10]) {\n        translate([x, 0, -base_height/2-1]) {\n            cylinder(h=2, r=3);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "sumo",
    "openscad_code": "// Sumo-inspired Stool / Side Table (realistic style, medium complexity)\n// Dimensions: 120 mm height × 100 mm width × 100 mm depth\n// Wall thickness: 2 mm, print-friendly (no steep overhangs)\n\n// Overall dimensions\noverall_h = 120;\noverall_w = 100;\noverall_d = 100;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Base ring for structural stability\nbase_h = 8;\nbase_r = overall_w/2;\n\n// Body: rounded cylinder (sumo torso)\nbody_h = 60;\nbody_r = overall_w/2 - wall;\n\n// Seat top: flattened sphere (sumo head)\nseat_r = overall_w/2 - wall;\nseat_h = 15;\n\n// Loincloth decorative band\ncloth_h = 12;\ncloth_r = body_r + 1;\n\n// Reinforcement ribs inside body\nribs_n = 4;\nrib_t = 2;\n\nmodule base_ring() {\n    difference() {\n        cylinder(h = base_h, r = base_r, $fn = 64);\n        translate([0, 0, -1])\n            cylinder(h = base_h + 2, r = base_r - wall, $fn = 64);\n    }\n}\n\nmodule torso() {\n    difference() {\n        // Outer rounded cylinder (chamfered top/bottom)\n        hull() {\n            translate([0, 0, base_h])\n                cylinder(h = 1, r = body_r, $fn = 64);\n            translate([0, 0, base_h + body_h - 1])\n                cylinder(h = 1, r = body_r, $fn = 64);\n        }\n        // Hollow interior\n        translate([0, 0, base_h + wall])\n            cylinder(h = body_h - 2*wall, r = body_r - wall, $fn = 64);\n    }\n}\n\nmodule seat_top() {\n    difference() {\n        // Ellipsoid cap for seat surface\n        scale([1, 1, 0.6])\n            sphere(r = seat_r, $fn = 64);\n        // Hollow interior\n        translate([0, 0, -seat_r])\n            scale([1, 1, 0.6])\n                sphere(r = seat_r - wall, $fn = 64);\n    }\n}\n\nmodule loincloth() {\n    // Decorative horizontal band\n    difference() {\n        cylinder(h = cloth_h, r = cloth_r, $fn = 64);\n        translate([0, 0, -1])\n            cylinder(h = cloth_h + 2, r = cloth_r - wall, $fn = 64);\n    }\n    // Small vertical pleats (repetitive)\n    for (i = [0:ribs_n-1]) {\n        rotate([0, 0, i * 360/ribs_n])\n            translate([cloth_r - wall/2, -wall/2, base_h + body_h/2 - cloth_h/2])\n                cube([wall, wall, cloth_h]);\n    }\n}\n\nmodule internal_ribs() {\n    // Radial ribs for strength\n    for (i = [0:ribs_n-1]) {\n        rotate([0, 0, i * 360/ribs_n + 360/(2*ribs_n)])\n            translate([0, -rib_t/2, base_h + wall])\n                cube([body_r - wall, rib_t, body_h - 2*wall]);\n    }\n}\n\n// Assembly\nunion() {\n    base_ring();\n    torso();\n    loincloth();\n    translate([0, 0, base_h + body_h - seat_h/2])\n        seat_top();\n    // Hidden internal ribs\n    %internal_ribs();\n}",
    "renders": true
  },
  {
    "decorative_art": "taekwondo",
    "openscad_code": "// Taekwondo Belt Display Rack\n// Dimensions: 100mm wide x 60mm deep x 120mm high\n// Wall thickness: 2mm, suitable for 3D printing\n\n$fn = 32;\n\nmodule belt_bar() {\n    // Main horizontal bar for belt display\n    difference() {\n        // Outer cylinder\n        translate([0, 0, 100])\n        rotate([90, 0, 0])\n        cylinder(h=90, d1=12, d2=12);\n        \n        // Inner hollow for 2mm wall\n        translate([0, 0, 100])\n        rotate([90, 0, 0])\n        cylinder(h=90, d1=8, d2=8);\n    }\n}\n\nmodule support_leg() {\n    // Triangular support leg\n    difference() {\n        union() {\n            // Main triangular body\n            polyhedron(\n                points=[[0,0,0], [15,0,0], [7.5,0,30],\n                        [0,10,0], [15,10,0], [7.5,10,30]],\n                faces=[[0,1,2], [3,5,4], [0,3,4,1], \n                       [1,4,5,2], [0,2,5,3]]\n            );\n            \n            // Base plate\n            translate([-2.5, -2.5, -2])\n            cube([20, 15, 2]);\n        }\n        \n        // Lightening hole\n        translate([7.5, 5, 10])\n        rotate([0, 90, 0])\n        cylinder(h=20, r=3);\n    }\n}\n\nmodule taekwondo_emblem() {\n    // Stylized taekwondo kicking figure\n    union() {\n        // Body\n        translate([50, 30, 75])\n        rotate([0, 0, 45])\n        scale([0.8, 1, 0.5])\n        sphere(r=8);\n        \n        // Kicking leg\n        translate([55, 35, 75])\n        rotate([0, 30, 20])\n        cylinder(h=15, r1=3, r2=2);\n        \n        // Standing leg\n        translate([45, 30, 75])\n        rotate([0, -20, -10])\n        cylinder(h=12, r1=3, r2=2);\n    }\n}\n\nmodule belt_peg(i) {\n    // Individual peg for belt display\n    translate([i * 25, 0, 97])\n    union() {\n        // Peg cylinder\n        cylinder(h=15, r1=2, r2=1.5);\n        \n        // Decorative end cap\n        translate([0, 0, 15])\n        sphere(r=3);\n    }\n}\n\nmodule back_panel() {\n    // Decorative back panel with taekwondo theme\n    difference() {\n        // Main panel\n        translate([0, 0, 0])\n        cube([100, 5, 120]);\n        \n        // Taekwondo pattern cutouts\n        for(i=[0:3]) {\n            translate([10 + i*20, 2.5, 100 - i*10])\n            rotate([90, 0, 0])\n            cylinder(h=5, r=5);\n        }\n        \n        // Mounting holes\n        translate([10, 2.5, 110])\n        rotate([90, 0, 0])\n        cylinder(h=5, r=2);\n        \n        translate([90, 2.5, 110])\n        rotate([90, 0, 0])\n        cylinder(h=5, r=2);\n    }\n}\n\n// Main assembly\nunion() {\n    // Back panel\n    back_panel();\n    \n    // Belt display bars\n    translate([5, 5, 0])\n    belt_bar();\n    \n    // Support legs\n    translate([5, 5, 0])\n    support_leg();\n    \n    translate([95, 5, 0])\n    mirror([1, 0, 0])\n    support_leg();\n    \n    // Belt pegs\n    for(i=[0:3]) {\n        belt_peg(i);\n    }\n    \n    // Taekwondo emblem decoration\n    taekwondo_emblem();\n}",
    "renders": true
  },
  {
    "decorative_art": "karate",
    "openscad_code": "// Karate Belt Display Shelf - Medium complexity realistic furniture piece\n// Overall dimensions: 120mm wide x 80mm deep x 100mm tall\n\n$fn = 32;\n\n// Main display shelf body\nmodule shelf_body() {\n    // Base platform\n    difference() {\n        cube([120, 80, 15], center=true);\n        // Decorative cutout pattern on front\n        translate([0, 38, 7.5])\n            cube([100, 2, 10], center=true);\n    }\n    \n    // Side panels with karate theme\n    for(side = [-1, 1]) {\n        translate([side * 55, 0, 42.5])\n            difference() {\n                cube([10, 78, 65], center=true);\n                // Japanese character cutout\n                translate([0, 0, 15])\n                    rotate([90, 0, 0])\n                        linear_extrude(height=5)\n                            text(\"武\", size=20, halign=\"center\", valign=\"center\");\n            }\n    }\n}\n\n// Belt display bars\nmodule belt_bars() {\n    // Rear support bar\n    translate([0, -30, 65])\n        cube([110, 8, 8], center=true);\n    \n    // Front support bar\n    translate([0, 20, 65])\n        cube([110, 8, 8], center=true);\n    \n    // 8 belt holders\n    for(i = [-3.5:1:3.5]) {\n        translate([i * 15, -5, 69])\n            difference() {\n                // Main holder post\n                cylinder(h=15, r=4);\n                // Slot for belt\n                translate([0, 0, 7.5])\n                    rotate([90, 0, 0])\n                        cube([2, 8, 10], center=true);\n            }\n    }\n}\n\n// Decorative karate figure support\nmodule figure_support() {\n    // Central pillar\n    translate([0, -10, 7.5])\n        difference() {\n            cube([20, 20, 15], center=true);\n            // Detail grooves\n            for(i = [-1, 1]) {\n                translate([i * 7, 0, 7.5])\n                    cube([2, 20, 15], center=true);\n            }\n        }\n    \n    // Figure base\n    translate([0, -10, 17.5])\n        difference() {\n            cylinder(h=10, r=12);\n            // Decorative rings\n            for(h = [2, 7]) {\n                translate([0, 0, h])\n                    cylinder(h=1, r=13);\n            }\n        }\n}\n\n// Back panel with belt rank indicators\nmodule back_panel() {\n    translate([0, -40, 50])\n        difference() {\n            cube([116, 4, 85], center=true);\n            \n            // Belt color indicators (from white to black)\n            colors = [\"white\", \"yellow\", \"orange\", \"green\", \"blue\", \"brown\", \"black\"];\n            for(i = [0:6]) {\n                translate([-52.5 + i * 15, 2, 7.5])\n                    cube([10, 1, 10], center=true);\n            }\n            \n            // Label area\n            translate([0, 2, 30])\n                cube([100, 1, 20], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    shelf_body();\n    belt_bars();\n    figure_support();\n    back_panel();\n    \n    // Small decorative elements\n    // Corner reinforcements\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x * 55, y * 35, 7.5])\n            cube([6, 6, 15], center=true);\n    }\n    \n    // Front decorative trim\n    translate([0, 40, 7.5])\n        difference() {\n            cube([118, 4, 15], center=true);\n            // Series of vertical grooves\n            for(i = [-5:1:5]) {\n                translate([i * 10, 0, 7.5])\n                    cube([2, 4, 15], center=true);\n            }\n        }\n}",
    "renders": true
  },
  {
    "decorative_art": "judo",
    "openscad_code": "// Judo-themed decorative chair (art furniture piece)\n// Overall size: 120mm height x 80mm width x 80mm depth\n\n// Seat module - judogi belt pattern\nmodule seat() {\n    difference() {\n        // Main seat cushion\n        translate([0, 0, 100]) cube([80, 80, 12], center=true);\n        \n        // Belt recess pattern\n        for (i = [-2:2]) {\n            translate([i*15, 0, 107]) cube([8, 76, 2], center=true);\n            translate([0, i*15, 107]) cube([76, 8, 2], center=true);\n        }\n    }\n}\n\n// Backrest with judo uniform collar detail\nmodule backrest() {\n    union() {\n        // Main backrest\n        translate([0, -35, 140]) cube([70, 8, 60], center=true);\n        \n        // Collar detail (lapel)\n        translate([-25, -39, 165]) rotate([45, 0, 0]) \n            cube([8, 30, 3], center=true);\n        translate([25, -39, 165]) rotate([-45, 0, 0]) \n            cube([8, 30, 3], center=true);\n    }\n}\n\n// Chair legs with judo mat texture\nmodule leg(x_pos, y_pos) {\n    difference() {\n        // Main leg\n        translate([x_pos, y_pos, 50]) cylinder(h=100, d=8, center=true);\n        \n        // Texture rings\n        for (h = [10:20:90]) {\n            translate([x_pos, y_pos, h]) \n                cylinder(h=2, d1=7.5, d2=8.5, center=true);\n        }\n    }\n}\n\n// Armrest supports shaped like judo belts\nmodule armrest_belt(side) {\n    translate([side*35, 0, 115]) rotate([0, 0, side*15]) {\n        difference() {\n            // Belt body\n            cube([50, 12, 4], center=true);\n            \n            // Belt holes\n            for (i = [-15:15:15]) {\n                translate([i, 0, 0]) cylinder(h=5, d=6, center=true);\n            }\n        }\n    }\n}\n\n// Base support ring\nmodule base_ring() {\n    difference() {\n        cylinder(h=8, d=90, center=true);\n        cylinder(h=10, d=70, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Four legs\n    leg(-30, -30);\n    leg(30, -30);\n    leg(-30, 30);\n    leg(30, 30);\n    \n    // Armrest belts\n    armrest_belt(1);\n    armrest_belt(-1);\n    \n    // Base\n    translate([0, 0, 2]) base_ring();\n}",
    "renders": true
  },
  {
    "decorative_art": "aikido",
    "openscad_code": "$fn = 32;\n\n// Overall dimensions\nwidth = 80;\ndepth = 40;\nheight = 100;\nwall = 2;\n\nmodule aikido_furniture(){\n    // Main body - curved top with subtle martial arts flow\n    difference(){\n        hull(){\n            translate([-width/2, -depth/2, 0]) cube([width, depth, height/2]);\n            translate([-width/2.2, -depth/2.2, height/2]) cube([width/1.1, depth/1.1, height/2]);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall]) cube([width-wall*2, depth-wall*2, height-wall], center=true);\n    }\n    \n    // Front panel with aikido symbol cutout\n    translate([0, -depth/2+wall/2, height/3])\n    rotate([90, 0, 0])\n    difference(){\n        cube([width*0.8, height*0.6, wall], center=true);\n        \n        // Aikido \"ai\" symbol - stylized yin-yang\n        translate([0, 0, -wall/2-0.1])\n        difference(){\n            circle(r=15);\n            circle(r=13);\n            \n            // Yin-yang elements\n            translate([-7.5, 0, 0]) circle(r=7.5);\n            translate([7.5, 0, 0]) circle(r=7.5);\n            translate([-7.5, 0, 0]) circle(r=2.5);\n            translate([7.5, 0, 0]) circle(r=2.5);\n        }\n    }\n    \n    // Side panels with traditional Japanese pattern\n    for(side = [-1, 1]){\n        translate([side*(width/2-wall/2), 0, height/2])\n        rotate([0, 90, 0])\n        difference(){\n            cube([depth, height, wall], center=true);\n            \n            // Seigaiha (wave) pattern\n            for(i = [-20:10:20]){\n                for(j = [-40:10:40]){\n                    translate([i, j, -wall/2-0.1])\n                    cylinder(h=wall+0.2, r1=4, r2=3, center=true);\n                }\n            }\n        }\n    }\n    \n    // Top detail - curved katana-inspired ridge\n    translate([0, 0, height-wall])\n    difference(){\n        hull(){\n            sphere(r=width/4);\n            scale([1.5, 0.3, 0.5]) sphere(r=width/3);\n        }\n        translate([0, 0, -5]) cube([width*2, depth*2, 10], center=true);\n    }\n    \n    // Base supports - traditional furniture feet\n    module foot(x, y){\n        translate([x, y, wall/2])\n        difference(){\n            cylinder(h=height/10, r=wall*2);\n            translate([0, 0, -0.1]) cylinder(h=height/10+0.2, r=wall);\n        }\n    }\n    \n    foot(-width/3, -depth/3);\n    foot(width/3, -depth/3);\n    foot(-width/3, depth/3);\n    foot(width/3, depth/3);\n    \n    // Back panel with ventilation slats\n    translate([0, depth/2-wall/2, height/2])\n    rotate([90, 0, 0])\n    difference(){\n        cube([width*0.9, height*0.8, wall], center=true);\n        \n        // Horizontal slats\n        for(i = [-35:10:35]){\n            translate([0, i, -wall/2-0.1])\n            cube([width*0.8, 6, wall+0.2], center=true);\n        }\n    }\n    \n    // Door handle - traditional wooden pull\n    translate([0, -depth/2-wall/2, height/3])\n    rotate([0, 90, 0])\n    difference(){\n        cylinder(h=15, r=wall);\n        translate([0, 0, -wall/2-0.1])\n        cube([wall*2, wall*2, 15+0.2], center=true);\n    }\n}\n\naikido_furniture();",
    "renders": true
  },
  {
    "decorative_art": "capoeira",
    "openscad_code": "// Capoeira Chair - a decorative furniture piece inspired by capoeira movements\n// Dimensions: 100mm height x 80mm width x 75mm depth\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main seating surface with berimbau-inspired curves\nmodule seat() {\n    difference() {\n        // Main seat platform\n        translate([0, 0, 40])\n        scale([1, 0.9, 0.15])\n        sphere(d=80);\n        \n        // Hollow center\n        translate([0, 0, 40])\n        scale([0.7, 0.6, 0.2])\n        sphere(d=80);\n    }\n}\n\n// Backrest with ginga movement curves\nmodule backrest() {\n    // Left flowing curve\n    translate([-30, -35, 70])\n    rotate([0, 20, -15])\n    scale([0.8, 1, 2])\n    cylinder(h=40, d1=20, d2=10);\n    \n    // Right flowing curve\n    translate([30, -35, 70])\n    rotate([0, 20, 15])\n    scale([0.8, 1, 2])\n    cylinder(h=40, d1=20, d2=10);\n    \n    // Center support spine\n    translate([0, -30, 60])\n    rotate([0, 10, 0])\n    cylinder(h=50, d=8);\n}\n\n// Leg structure with martial arts stance\nmodule legs() {\n    // Front left leg - extended kick position\n    translate([-35, 15, 20])\n    rotate([15, 0, 25])\n    cylinder(h=35, d1=8, d2=6);\n    \n    // Front right leg - supporting stance\n    translate([35, 15, 20])\n    rotate([15, 0, -25])\n    cylinder(h=35, d1=8, d2=6);\n    \n    // Rear left leg - grounded position\n    translate([-30, -30, 0])\n    rotate([0, 0, 10])\n    cylinder(h=40, d=8);\n    \n    // Rear right leg - grounded position\n    translate([30, -30, 0])\n    rotate([0, 0, -10])\n    cylinder(h=40, d=8);\n}\n\n// Decorative cordão pattern on seat edges\nmodule cordao_pattern() {\n    for(i = [0:15:360]) {\n        rotate([0, 0, i])\n        translate([38, 0, 42])\n        rotate([90, 0, 0])\n        cylinder(h=wall, d=3);\n    }\n}\n\n// Support braces between legs\nmodule braces() {\n    // Front brace\n    translate([0, 15, 18])\n    rotate([90, 0, 0])\n    cylinder(h=70, d=wall+1);\n    \n    // Side braces\n    translate([-32.5, -7.5, 18])\n    rotate([0, 90, 0])\n    cylinder(h=45, d=wall+1);\n    \n    translate([32.5, -7.5, 18])\n    rotate([0, 90, 0])\n    cylinder(h=45, d=wall+1);\n}\n\n// Base platform for stability\nmodule base() {\n    translate([0, 0, 0])\n    scale([1.1, 1.2, 0.1])\n    sphere(d=80);\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    base();\n    \n    // Support system\n    legs();\n    braces();\n    \n    // Seating area\n    seat();\n    cordao_pattern();\n    \n    // Back support\n    backrest();\n    \n    // Decorative elements\n    // Berimbau-inspired top detail\n    translate([0, -35, 85])\n    rotate([0, 90, 0])\n    cylinder(h=50, d=wall);\n    \n    // Capoeira cord detail\n    translate([0, -35, 85])\n    rotate([0, 90, 45])\n    cylinder(h=35, d=wall);\n}",
    "renders": true
  },
  {
    "decorative_art": "muaythai",
    "openscad_code": "// Muay Thai Ring Corner Stool – realistic decorative furniture piece\n// Overall size: 110 mm long × 65 mm wide × 68 mm tall\n// Wall thickness kept at ≥2 mm for FDM printing\n\n$fn = 32;\n\n// --------------------------\n// Leg module – four identical\nmodule leg() {\n    difference() {\n        cylinder(h = 65, d = 12, center=false);        // main leg\n        translate([0,0,62])                             // foot pad recess\n            cylinder(h = 4, d = 10, center=false);\n    }\n}\n\n// --------------------------\n// Seat top – slightly dished\nmodule seat() {\n    difference() {\n        // Main seat block\n        translate([-55,-32.5,65]) cube([110,65,3]);\n        \n        // Gentle dishing (0.8 mm deep)\n        translate([-52,-29.5,67.2])\n            cylinder(h = 2, d = 104, $fn=64);\n    }\n}\n\n// --------------------------\n// Stretchers for rigidity\nmodule stretcher(len) {\n    rotate([90,0,0])\n        cylinder(h = len, d = 6, center=true);\n}\n\n// --------------------------\n// Muay Thai rope detail on legs\nmodule rope_band(h) {\n    color(\"Gold\")\n    translate([0,0,h])\n        rotate([90,0,0])\n            cylinder(h = 12.5, d = 14.5, center=true);\n}\n\n// --------------------------\n// Thai text “MUAY” relief on backrest\nmodule thai_text() {\n    translate([-20,0,45])\n    scale([0.7,1,0.3])\n    linear_extrude(height = 1.5)\n        text(\"MUAY\", size = 6, font = \"Arial:style=Bold\");\n}\n\n// --------------------------\n// Assembly\nunion() {\n    // Seat top\n    seat();\n    \n    // Legs at corners\n    translate([-45,-22.5,0]) leg();\n    translate([ 45,-22.5,0]) leg();\n    translate([-45, 22.5,0]) leg();\n    translate([ 45, 22.5,0]) leg();\n    \n    // Front & back stretchers\n    translate([0,-22.5,30]) stretcher(90);\n    translate([0, 22.5,30]) stretcher(90);\n    \n    // Side stretchers\n    translate([-45,0,15]) rotate([0,0,90]) stretcher(45);\n    translate([ 45,0,15]) rotate([0,0,90]) stretcher(45);\n    \n    // Decorative rope bands on each leg\n    for(x=[-45,45], y=[-22.5,22.5])\n        translate([x,y,0]) {\n            rope_band(20);\n            rope_band(40);\n        }\n    \n    // Small backrest\n    difference() {\n        translate([-55, -32.5, 65]) cube([110, 6, 20]);  // back plate\n        translate([-54, -31.5, 66]) cube([108, 4, 18]);  // hollow back\n    }\n    \n    // Thai text on backrest\n    thai_text();\n}",
    "renders": true
  },
  {
    "decorative_art": "boxing",
    "openscad_code": "// Boxing themed decorative furniture - medium complexity\n// Dimensions: 100mm x 60mm x 80mm (boxing glove on stand)\n\n// Main module for the boxing glove furniture piece\nmodule boxing_glove_furniture() {\n    // Base stand\n    translate([0, 0, 0])\n        base_stand();\n    \n    // Support pole\n    translate([0, 0, 15])\n        support_pole();\n    \n    // Boxing glove\n    translate([0, 0, 65])\n        boxing_glove();\n    \n    // Decorative ring around base\n    translate([0, 0, 12])\n        decorative_ring();\n}\n\n// Base stand - stable foundation\nmodule base_stand() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = 15, d1 = 45, d2 = 40, $fn = 32);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 2])\n            cylinder(h = 13, d = 35, $fn = 32);\n    }\n}\n\n// Support pole connecting base to glove\nmodule support_pole() {\n    difference() {\n        // Main pole\n        cylinder(h = 50, d = 8, $fn = 16);\n        \n        // Hollow center\n        cylinder(h = 50, d = 4, $fn = 16);\n    }\n}\n\n// Boxing glove with realistic proportions\nmodule boxing_glove() {\n    // Main glove body\n    translate([0, 0, 0])\n        glove_body();\n    \n    // Thumb\n    translate([18, 0, -5])\n        rotate([0, 90, 0])\n            thumb();\n    \n    // Cuff/wrist area\n    translate([0, 0, -25])\n        glove_cuff();\n    \n    // Lacing details\n    translate([0, 0, -15])\n        lacing_details();\n}\n\n// Main glove body - ellipsoid shape\nmodule glove_body() {\n    // Outer shell\n    scale([1.2, 1, 1])\n        sphere(d = 40, $fn = 32);\n    \n    // Inner hollow\n    difference() {\n        scale([1.2, 1, 1])\n            sphere(d = 36, $fn = 32);\n        \n        // Cut bottom flat\n        translate([0, 0, -25])\n            cube([50, 50, 50], center = true);\n    }\n}\n\n// Thumb protrusion\nmodule thumb() {\n    difference() {\n        // Thumb shape\n        scale([0.8, 1, 0.6])\n            sphere(d = 15, $fn = 16);\n        \n        // Hollow thumb\n        scale([0.8, 1, 0.6])\n            sphere(d = 11, $fn = 16);\n    }\n}\n\n// Cuff/wrist portion\nmodule glove_cuff() {\n    difference() {\n        // Outer cuff\n        cylinder(h = 15, d1 = 30, d2 = 25, $fn = 32);\n        \n        // Inner hollow\n        cylinder(h = 15, d1 = 26, d2 = 21, $fn = 32);\n    }\n}\n\n// Lacing details on cuff\nmodule lacing_details() {\n    // Lace holes pattern\n    for(i = [-1, 0, 1]) {\n        translate([i * 6, 0, 0])\n            lace_hole();\n    }\n    \n    // Cross lacing\n    for(i = [-0.5, 0.5]) {\n        rotate([90, 0, 0])\n            translate([i * 12, 0, -15])\n                cylinder(h = 24, d = 1, $fn = 8);\n    }\n}\n\n// Individual lace hole\nmodule lace_hole() {\n    translate([0, 15, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 3, d = 2, $fn = 8);\n}\n\n// Decorative ring around base\nmodule decorative_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h = 3, d = 50, $fn = 64);\n        \n        // Inner cut\n        cylinder(h = 3, d = 44, $fn = 64);\n    }\n    \n    // Decorative bumps\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n            translate([23, 0, 1.5])\n                sphere(d = 2, $fn = 8);\n    }\n}\n\n// Generate the complete model\nboxing_glove_furniture();",
    "renders": true
  },
  {
    "decorative_art": "wrestling",
    "openscad_code": "// Wrestling Ring Furniture - 3D Printable Decorative Piece\n// Dimensions: 100mm x 100mm x 35mm\n// Realistic style with medium complexity\n\n// Parameters\n$fn = 32;\nring_size = 100;\npost_height = 30;\npost_diameter = 4;\nrope_diameter = 1.5;\nmat_thickness = 5;\nframe_width = 8;\n\n// Main assembly\nunion() {\n    // Ring mat\n    translate([0, 0, mat_thickness/2])\n        color(\"red\") \n        cube([ring_size, ring_size, mat_thickness], center=true);\n    \n    // Ring frame\n    translate([0, 0, mat_thickness])\n        ring_frame();\n    \n    // Corner posts\n    for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x * (ring_size/2 - post_diameter), y * (ring_size/2 - post_diameter), mat_thickness])\n                corner_post();\n    \n    // Ropes\n    rope_system();\n    \n    // Turnbuckles\n    turnbuckle_system();\n}\n\n// Ring frame module\nmodule ring_frame() {\n    difference() {\n        // Outer frame\n        cube([ring_size + frame_width, ring_size + frame_width, frame_width], center=true);\n        \n        // Inner cutout\n        translate([0, 0, -1])\n            cube([ring_size - frame_width, ring_size - frame_width, frame_width + 2], center=true);\n    }\n}\n\n// Corner post module\nmodule corner_post() {\n    union() {\n        // Main post\n        cylinder(h=post_height, d=post_diameter);\n        \n        // Post cap\n        translate([0, 0, post_height])\n            cylinder(h=2, d=post_diameter + 2);\n    }\n}\n\n// Rope system\nmodule rope_system() {\n    // Three levels of ropes\n    for(level = [1:3]) {\n        height = mat_thickness + level * 6;\n        \n        // Front and back ropes\n        for(y = [-1, 1]) {\n            translate([0, y * (ring_size/2 - post_diameter - rope_diameter), height])\n                rotate([90, 0, 0])\n                    cylinder(h=ring_size - post_diameter*2 - rope_diameter*2, d=rope_diameter);\n        }\n        \n        // Left and right ropes\n        for(x = [-1, 1]) {\n            translate([x * (ring_size/2 - post_diameter - rope_diameter), 0, height])\n                rotate([0, 90, 0])\n                    cylinder(h=ring_size - post_diameter*2 - rope_diameter*2, d=rope_diameter);\n        }\n    }\n}\n\n// Turnbuckle system\nmodule turnbuckle_system() {\n    for(x = [-1, 1])\n        for(y = [-1, 1])\n            for(level = [1:3]) {\n                height = mat_thickness + level * 6;\n                \n                // Turnbuckle connectors\n                translate([x * (ring_size/2 - post_diameter), y * (ring_size/2 - post_diameter), height])\n                    rotate([0, 0, 45])\n                        cube([2, 2, 2], center=true);\n            }\n}\n\n// Apron details\ntranslate([0, 0, mat_thickness + 2])\n    for(side = [0:3]) {\n        rotate([0, 0, side * 90])\n            translate([0, ring_size/2 - frame_width/2, 0])\n                linear_extrude(height=1)\n                    text(\"WWE\", size=8, halign=\"center\");\n    }",
    "renders": true
  },
  {
    "decorative_art": "parkour",
    "openscad_code": "// Parkour Vault Box - Realistic Style\n// A furniture-scale training obstacle with proper proportions and 3D printing considerations\n\nmodule box_frame(width, depth, height, thickness) {\n    // Main box structure with hollow interior\n    difference() {\n        // Outer shell\n        cube([width, depth, height]);\n        \n        // Hollow interior - offset by wall thickness\n        translate([thickness, thickness, thickness])\n            cube([width-2*thickness, depth-2*thickness, height-thickness]);\n    }\n}\n\nmodule rounded_edge(width, depth, height, radius) {\n    // Create rounded top edges for realistic furniture appearance\n    translate([radius, radius, height-radius])\n        cylinder(h=radius*2, r=radius, $fn=20);\n    translate([width-radius, radius, height-radius])\n        cylinder(h=radius*2, r=radius, $fn=20);\n    translate([radius, depth-radius, height-radius])\n        cylinder(h=radius*2, r=radius, $fn=20);\n    translate([width-radius, depth-radius, height-radius])\n        cylinder(h=radius*2, r=radius, $fn=20);\n    \n    // Fill gaps between cylinders\n    translate([radius, 0, height-radius])\n        cube([width-2*radius, depth, radius]);\n    translate([0, radius, height-radius])\n        cube([width, depth-2*radius, radius]);\n}\n\nmodule grip_holes(width, depth, height, hole_diam, spacing) {\n    // Finger grip holes on sides for carrying\n    for(x = [spacing:spacing*2:width-spacing]) {\n        for(y = [height/3, height*2/3]) {\n            translate([x, 0, y])\n                rotate([0, 90, 0])\n                    cylinder(h=depth, d=hole_diam, $fn=16);\n        }\n    }\n}\n\nmodule anti_slip_texture(width, depth, top_height) {\n    // Anti-slip texture pattern on top surface\n    texture_height = 0.5;\n    spacing = 4;\n    \n    for(x = [spacing:spacing*2:width-spacing]) {\n        for(y = [spacing:spacing*2:depth-spacing]) {\n            translate([x, y, top_height-texture_height])\n                cube([1, 1, texture_height]);\n        }\n    }\n}\n\nmodule support_braces(width, depth, height) {\n    // Internal support structure for 3D printing\n    brace_thickness = 2;\n    \n    // Cross braces\n    translate([width/2-brace_thickness/2, 0, height/2])\n        cube([brace_thickness, depth, brace_thickness]);\n    translate([0, depth/2-brace_thickness/2, height/2])\n        cube([width, brace_thickness, brace_thickness]);\n}\n\n// Main assembly\nunion() {\n    // Base dimensions - realistic furniture scale\n    box_width = 90;\n    box_depth = 60;\n    box_height = 45;\n    wall_thickness = 2.5;\n    edge_radius = 5;\n    \n    // Main box structure\n    box_frame(box_width, box_depth, box_height, wall_thickness);\n    \n    // Rounded top edges\n    rounded_edge(box_width, box_depth, box_height, edge_radius);\n    \n    // Grip holes on sides\n    grip_holes(box_width, box_depth, box_height, 25, 20);\n    \n    // Anti-slip texture on top\n    anti_slip_texture(box_width, box_depth, box_height);\n    \n    // Internal support for 3D printing\n    support_braces(box_width-box_thickness*2, box_depth-box_thickness*2, box_height-box_thickness);\n}\n\n// Rubber feet - prevents sliding and protects floor\nmodule rubber_feet(width, depth, height, foot_diam, foot_height) {\n    foot_offset = 5;\n    for(x = [foot_offset, width-foot_offset]) {\n        for(y = [foot_offset, depth-foot_offset]) {\n            translate([x, y, -foot_height])\n                cylinder(h=foot_height, d=foot_diam, $fn=16);\n        }\n    }\n}\n\n// Add rubber feet to bottom\ntranslate([0, 0, 0])\n    rubber_feet(90, 60, 45, 8, 2);",
    "renders": true
  },
  {
    "decorative_art": "gymnastics",
    "openscad_code": "// Gymnastics vaulting box furniture piece\n// Realistic style, medium complexity, 3D printable\n\n// overall dimensions (mm)\nbox_width = 70;\nbox_depth = 45;\nbox_height = 45;\n\n// wall thickness\nwall = 2;\n\n// module for one side panel with rounded corners\nmodule side_panel(w, h, d, radius, center=false) {\n    // main slab minus inner void\n    difference() {\n        // rounded rectangle\n        hull() {\n            translate([radius, radius, 0]) cylinder(h=d, r=radius, $fn=16);\n            translate([w-radius, radius, 0]) cylinder(h=d, r=radius, $fn=16);\n            translate([w-radius, h-radius, 0]) cylinder(h=d, r=radius, $fn=16);\n            translate([radius, h-radius, 0]) cylinder(h=d, r=radius, $fn=16);\n        }\n        // hollow out\n        translate([wall, wall, -1]) \n            cube([w-2*wall, h-2*wall, d+2], center=false);\n    }\n}\n\n// module for one long rail handle\nmodule rail_handle(len) {\n    // ends\n    for (x = [0, len-6]) {\n        translate([x, 0, 0]) cylinder(h=6, r=3, center=true, $fn=12);\n    }\n    // bar\n    translate([(len-6)/2, 0, 0]) rotate([0,90,0])\n        cylinder(h=len-6, r=1.5, center=true, $fn=12);\n}\n\n// main vaulting box\nmodule vaulting_box() {\n    // base\n    difference() {\n        cube([box_width, box_depth, box_height], center=true);\n        translate([0,0,wall]) cube([box_width-2*wall, box_depth-2*wall, box_height], center=true);\n    }\n\n    // top landing pad\n    difference() {\n        translate([0,0,box_height/2+2]) \n            cube([box_width-4, box_depth-4, 4], center=true);\n        translate([0,0,box_height/2+2+0.5]) \n            cube([box_width-4-2*wall, box_depth-4-2*wall, 4+1], center=true);\n    }\n\n    // front & back decorative panels\n    for (y = [box_depth/2+wall/2, -box_depth/2-wall/2]) {\n        translate([0, y, 0]) rotate([0,90,0]) \n            side_panel(box_height, box_width, wall, 3);\n    }\n\n    // left & right decorative panels\n    for (x = [box_width/2+wall/2, -box_width/2-wall/2]) {\n        translate([x, 0, 0]) rotate([90,0,0]) \n            side_panel(box_depth, box_height, wall, 3);\n    }\n\n    // handles (front and back)\n    for (y = [box_depth/2+wall+1, -box_depth/2-wall-1]) {\n        translate([0, y, -box_height/2+7]) rail_handle(box_width-10);\n    }\n}\n\n// create model centered at origin\nvaulting_box();",
    "renders": true
  },
  {
    "decorative_art": "acrobatics",
    "openscad_code": "// Acrobatics Balance Beam Furniture\n// A miniature decorative balance beam for acrobatics practice display\n// Overall dimensions: 100mm x 50mm x 75mm\n\n// Parameters\nbeam_length = 80;\nbeam_width = 20;\nbeam_height = 8;\nsupport_height = 60;\nsupport_width = 40;\nleg_thickness = 3;\nbase_thickness = 5;\n\n// Main beam with rounded edges\nmodule balance_beam() {\n    // Main beam body\n    translate([0, 0, support_height + beam_height/2])\n        cube([beam_length, beam_width, beam_height], center=true);\n    \n    // Rounded top edges\n    translate([beam_length/2 - 5, 0, support_height + beam_height - 1])\n        rotate([90, 0, 0])\n            cylinder(h=beam_length - 10, r=1, center=true);\n    translate([-beam_length/2 + 5, 0, support_height + beam_height - 1])\n        rotate([90, 0, 0])\n            cylinder(h=beam_length - 10, r=1, center=true);\n}\n\n// Support structure with decorative cutouts\nmodule support_structure() {\n    // Left support\n    translate([-beam_length/2 + 10, 0, support_height/2])\n        difference() {\n            cube([leg_thickness*3, support_width, support_height], center=true);\n            // Decorative circular cutouts\n            for(y = [-15, 0, 15]) {\n                translate([0, y, 0])\n                    cylinder(h=leg_thickness*3 + 1, r=5, center=true);\n            }\n        }\n    \n    // Right support\n    translate([beam_length/2 - 10, 0, support_height/2])\n        difference() {\n            cube([leg_thickness*3, support_width, support_height], center=true);\n            // Decorative circular cutouts\n            for(y = [-15, 0, 15]) {\n                translate([0, y, 0])\n                    cylinder(h=leg_thickness*3 + 1, r=5, center=true);\n            }\n        }\n    \n    // Base for stability\n    translate([0, 0, base_thickness/2])\n        cube([beam_length + 10, support_width + 10, base_thickness], center=true);\n}\n\n// Miniature gymnast figure\nmodule gymnast() {\n    // Head\n    translate([0, 0, support_height + beam_height + 8])\n        sphere(r=3);\n    \n    // Torso\n    translate([0, 0, support_height + beam_height + 3])\n        cube([6, 4, 8], center=true);\n    \n    // Arms positioned for balance\n    translate([5, 0, support_height + beam_height + 5])\n        rotate([0, 0, 30])\n            cube([12, 2, 2], center=true);\n    translate([-5, 0, support_height + beam_height + 5])\n        rotate([0, 0, -30])\n            cube([12, 2, 2], center=true);\n    \n    // Legs in split position\n    translate([3, 0, support_height + beam_height])\n        rotate([30, 0, 0])\n            cube([2, 2, 10], center=true);\n    translate([-3, 0, support_height + beam_height])\n        rotate([-30, 0, 0])\n            cube([2, 2, 10], center=true);\n}\n\n// Decorative end caps\nmodule end_caps() {\n    // Left end cap\n    translate([-beam_length/2 - 2, 0, support_height + beam_height/2])\n        difference() {\n            cube([4, beam_width + 4, beam_height + 4], center=true);\n            cube([5, beam_width, beam_height], center=true);\n        }\n    \n    // Right end cap\n    translate([beam_length/2 + 2, 0, support_height + beam_height/2])\n        difference() {\n            cube([4, beam_width + 4, beam_height + 4], center=true);\n            cube([5, beam_width, beam_height], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    balance_beam();\n    support_structure();\n    end_caps();\n    gymnast();\n}",
    "renders": true
  },
  {
    "decorative_art": "rhythmic",
    "openscad_code": "// Rhythmic Drum Stool - 80mm diameter, 45mm height\n// Realistic style drum with decorative banding and structural legs\n\n// Main parameters\ndrum_d = 80;\ndrum_h = 45;\nwall_t = 2;\nband_h = 8;\nleg_w = 6;\nleg_h = 35;\n\n// Main drum body - hollow cylinder with bottom\nmodule drum_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=drum_h, d=drum_d, $fn=64);\n        \n        // Hollow center\n        translate([0, 0, wall_t])\n            cylinder(h=drum_h, d=drum_d-wall_t*2, $fn=64);\n        \n        // Remove bottom to create open top\n        translate([0, 0, -1])\n            cube([drum_d+2, drum_d+2, 2], center=true);\n    }\n}\n\n// Decorative middle band with rhythmic pattern\nmodule decorative_band() {\n    // Main band ring\n    translate([0, 0, (drum_h-band_h)/2])\n        difference() {\n            cylinder(h=band_h, d=drum_d+wall_t, $fn=64);\n            cylinder(h=band_h+0.1, d=drum_d-wall_t, $fn=64);\n        }\n    \n    // Rhythmic notches around the band\n    for(i=[0:15]) {\n        rotate([0, 0, i*22.5])\n            translate([drum_d/2-1, -wall_t/2, (drum_h-band_h)/2+1])\n                cube([wall_t+2, wall_t, band_h-2], center=true);\n    }\n}\n\n// Structural legs with rounded feet\nmodule legs() {\n    for(i=[0:3]) {\n        rotate([0, 0, i*90+45])\n            translate([drum_d/2-leg_w-2, 0, 0])\n                union() {\n                    // Main leg\n                    translate([0, 0, leg_h/2])\n                        cube([leg_w, leg_w, leg_h], center=true);\n                    \n                    // Rounded foot\n                    translate([0, 0, leg_h])\n                        sphere(d=leg_w*1.2, $fn=16);\n                }\n    }\n}\n\n// Top rim reinforcement\nmodule top_rim() {\n    // Outer rim\n    cylinder(h=wall_t*1.5, d=drum_d+wall_t, $fn=64);\n    \n    // Inner rim\n    translate([0, 0, -0.1])\n        cylinder(h=wall_t*1.7, d=drum_d-wall_t*2, $fn=64);\n}\n\n// Drum head surface (textured top)\nmodule drum_head() {\n    difference() {\n        // Main head\n        translate([0, 0, drum_h-wall_t])\n            cylinder(h=wall_t, d=drum_d-wall_t*2, $fn=64);\n        \n        // Concentric circles for texture\n        for(i=[1:3]) {\n            translate([0, 0, drum_h-wall_t+0.1])\n                cylinder(h=0.2, d=drum_d-wall_t*2-i*10, $fn=64);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    drum_body();\n    decorative_band();\n    translate([0, 0, drum_h-wall_t/2])\n        top_rim();\n    translate([0, 0, drum_h-wall_t])\n        drum_head();\n    \n    // Support structure\n    translate([0, 0, leg_h/2])\n        legs();\n}",
    "renders": true
  },
  {
    "decorative_art": "trampoline",
    "openscad_code": "// Trampoline Furniture - Decorative Art Piece\n// Realistic style, medium complexity for 3D printing\n\n// Main dimensions (mm)\nframe_diameter = 60;\nframe_thickness = 3;\nleg_height = 25;\nleg_thickness = 4;\nspring_count = 16;\nspring_diameter = 1.5;\nspring_length = 6;\nmat_thickness = 1;\nmat_clearance = 2;\n\n// Frame module\nmodule frame_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h=frame_thickness, d=frame_diameter, $fn=64);\n        // Inner hollow\n        translate([0, 0, -0.1])\n            cylinder(h=frame_thickness+0.2, d=frame_diameter-frame_thickness*2, $fn=64);\n    }\n}\n\n// Support leg module\nmodule support_leg() {\n    // Main leg\n    translate([-leg_thickness/2, -leg_thickness/2, 0])\n        cube([leg_thickness, leg_thickness, leg_height]);\n    \n    // Foot pad\n    translate([-leg_thickness, -leg_thickness, -1])\n        cube([leg_thickness*2, leg_thickness*2, 2]);\n}\n\n// Spring module\nmodule spring(pos_angle) {\n    x = (frame_diameter/2 - frame_thickness/2) * cos(pos_angle);\n    y = (frame_diameter/2 - frame_thickness/2) * sin(pos_angle);\n    \n    translate([x, y, frame_thickness/2])\n    rotate([90, 0, pos_angle])\n    union() {\n        // Spring body\n        for(i=[0:3]) {\n            translate([i*spring_length/4, 0, 0])\n                cylinder(h=spring_length/4, d=spring_diameter, $fn=12);\n        }\n        // Spring hooks\n        translate([-spring_length/8, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=spring_diameter*2, d=spring_diameter, $fn=12);\n        translate([spring_length+spring_length/8, 0, 0])\n            rotate([0, 90, 0])\n            cylinder(h=spring_diameter*2, d=spring_diameter, $fn=12);\n    }\n}\n\n// Trampoline mat\nmodule jumping_mat() {\n    translate([0, 0, frame_thickness - mat_thickness/2])\n        cylinder(h=mat_thickness, d=frame_diameter-frame_thickness*2-mat_clearance*2, $fn=64);\n}\n\n// Decorative safety pad\nmodule safety_pad() {\n    difference() {\n        // Main pad\n        translate([0, 0, frame_thickness/2])\n            cylinder(h=frame_thickness*2, d=frame_diameter+6, $fn=64);\n        // Inner cutout\n        translate([0, 0, frame_thickness/2-0.1])\n            cylinder(h=frame_thickness*2+0.2, d=frame_diameter-2, $fn=64);\n    }\n}\n\n// Assembly\nunion() {\n    // Frame and legs\n    translate([0, 0, leg_height])\n        frame_ring();\n    \n    // Support legs (6 legs for stability)\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([frame_diameter/3, 0, 0])\n                support_leg();\n    }\n    \n    // Springs\n    for(i=[0:spring_count-1]) {\n        angle = i*360/spring_count;\n        spring(angle);\n    }\n    \n    // Jumping mat\n    jumping_mat();\n    \n    // Safety pad\n    safety_pad();\n}\n\n// Decorative logo on pad\ntranslate([0, 0, frame_thickness*2+0.1])\n    linear_extrude(height=0.5)\n        text(\"TRAMP\", size=6, halign=\"center\", valign=\"center\");",
    "renders": true
  },
  {
    "decorative_art": "slackline",
    "openscad_code": "// OpenSCAD code: Slackline Furniture Sculpture (Medium Complexity, Realistic Style)\n// Slackline-inspired decorative mini-bench with tensioned webbing\n\n$fn = 50;\n\n// Overall dimensions\nbench_length = 120;\nbench_width = 40;\nbench_height = 45;\n\n// Frame profile dimensions\nframe_thickness = 2;\nframe_width = 8;\nframe_height = 12;\n\n// Slackline webbing dimensions\nwebbing_width = 5;\nwebbing_thickness = 1;\nnum_webbing_segments = 15;\n\n// Decorative end caps\ncap_diameter = 12;\ncap_height = 4;\n\n// Support legs\nleg_width = 6;\nleg_height = 35;\n\n// Cross-bracing\nbrace_thickness = 2;\nbrace_width = 5;\n\n// Module for one side frame rail\nmodule frame_rail(length, width, height) {\n    difference() {\n        // Main rail\n        cube([length, width, height], center=true);\n        \n        // Lightening cutouts\n        translate([0, 0, 0])\n            cube([length-4, width-4, height-2], center=true);\n    }\n}\n\n// Module for decorative end cap\nmodule end_cap() {\n    difference() {\n        // Main cap\n        cylinder(h=cap_height, d=cap_diameter, center=true);\n        \n        // Center hole\n        cylinder(h=cap_height+1, d=cap_diameter-4, center=true);\n    }\n}\n\n// Module for support leg\nmodule leg() {\n    difference() {\n        // Main leg\n        cube([leg_width, leg_width, leg_height], center=true);\n        \n        // Lightening holes\n        translate([0, 0, leg_height/4])\n            cylinder(h=leg_width+1, d=leg_width-2, center=true);\n        translate([0, 0, -leg_height/4])\n            cylinder(h=leg_width+1, d=leg_width-2, center=true);\n    }\n}\n\n// Module for cross-brace\nmodule cross_brace() {\n    rotate([0, 90, 0])\n        cube([bench_length-20, brace_width, brace_thickness], center=true);\n}\n\n// Module for webbing segment\nmodule webbing_segment(length) {\n    color(\"darkgray\")\n        cube([webbing_width, webbing_thickness, length], center=true);\n}\n\n// Main assembly\nunion() {\n    // Left frame rail\n    translate([-bench_length/2, 0, bench_height/2])\n        frame_rail(bench_length-20, frame_width, frame_height);\n    \n    // Right frame rail\n    translate([-bench_length/2, 0, -bench_height/2])\n        frame_rail(bench_length-20, frame_width, frame_height);\n    \n    // End caps\n    translate([-(bench_length-20)/2, 0, bench_height/2])\n        rotate([90, 0, 0])\n            end_cap();\n    translate([(bench_length-20)/2, 0, bench_height/2])\n        rotate([90, 0, 0])\n            end_cap();\n    translate([-(bench_length-20)/2, 0, -bench_height/2])\n        rotate([90, 0, 0])\n            end_cap();\n    translate([(bench_length-20)/2, 0, -bench_height/2])\n        rotate([90, 0, 0])\n            end_cap();\n    \n    // Support legs\n    translate([-(bench_length-20)/2+10, -bench_width/2-frame_width/2, 0])\n        leg();\n    translate([(bench_length-20)/2-10, -bench_width/2-frame_width/2, 0])\n        leg();\n    translate([-(bench_length-20)/2+10, bench_width/2+frame_width/2, 0])\n        leg();\n    translate([(bench_length-20)/2-10, bench_width/2+frame_width/2, 0])\n        leg();\n    \n    // Cross-bracing\n    translate([0, -bench_width/2-frame_width/2, 0])\n        cross_brace();\n    translate([0, bench_width/2+frame_width/2, 0])\n        cross_brace();\n    \n    // Slackline webbing segments\n    for (i = [0:num_webbing_segments-1]) {\n        y_pos = -bench_width/2 + (i+1)*(bench_width/(num_webbing_segments+1));\n        translate([0, y_pos, 0])\n            webbing_segment(bench_length-20);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "climbing",
    "openscad_code": "// Miniature Rock-Climbing Wall Shelf (realistic, medium complexity)\n// Overall size ~100 mm wide x 80 mm tall x 30 mm deep\n\n// ====== PARAMETERS ======\nwall_th = 2;            // 2 mm printable walls\nhold_d = 6;             // diameter of climbing holds\nhold_h = 4;             // height of holds\npeg_d = 1.6;            // peg hole for wall mounting\nshelf_th = 3;           // shelf thickness\ngrid = 12;              // 12 mm grid for hold placement\n\n// ====== MAIN ASSEMBLY ======\ndifference() {\n    union() {\n        // Structural back panel with frame\n        climbing_wall();\n        \n        // Shelf platform under holds\n        translate([0, -5, 0])\n            shelf();\n        \n        // Climbing holds grid\n        climbing_holds();\n        \n        // Reinforcing ribs on the back\n        translate([0, 0, -wall_th])\n            ribs();\n    }\n    \n    // Mounting holes for wall screws\n    mounting_holes();\n}\n\n// ====== MODULES ======\n\nmodule climbing_wall() {\n    // Outer frame\n    difference() {\n        // Overall back panel with rounded top\n        union() {\n            cube([100, 80, wall_th], center = true);\n            translate([0, 40 - wall_th/2, 0])\n                cylinder(h = wall_th, r = 50, $fn = 60);\n        }\n        \n        // Cut away bottom to leave arch shape\n        translate([0, -40 - 2, 0])\n            cube([102, 40, wall_th + 2], center = true);\n    }\n    \n    // Decorative faux panel lines\n    for (x = [-36, -12, 12, 36]) {\n        translate([x, 0, wall_th/2])\n            cube([1.5, 75, 0.5]);\n    }\n}\n\nmodule shelf() {\n    // Main shelf surface\n    difference() {\n        translate([0, 35, 0])\n            cube([90, shelf_th, 25], center = true);\n        \n        // Fillets underneath\n        for (x = [-36, -12, 12, 36]) {\n            translate([x, 35, -12])\n                rotate([90, 0, 0])\n                    cylinder(h = 90, r = 2, $fn = 20);\n        }\n    }\n}\n\nmodule climbing_holds() {\n    // Generate a realistic grid pattern\n    for (y = [0:grid:60]) {\n        for (x = [-36:grid:36]) {\n            // Skip some positions for realistic pattern\n            if ((abs(x) + y) % 24 != 0) {\n                translate([x, 30 - y, wall_th/2 + hold_h/2])\n                    climbing_hold();\n            }\n        }\n    }\n}\n\nmodule climbing_hold() {\n    // Bolt-on style hold with texture\n    difference() {\n        union() {\n            // Main hold body\n            cylinder(h = hold_h, d = hold_d, $fn = 20);\n            \n            // Rim lip\n            translate([0, 0, hold_h - 1])\n                cylinder(h = 1, d = hold_d + 2, $fn = 20);\n        }\n        \n        // Hex bolt socket\n        translate([0, 0, -0.01])\n            cylinder(h = hold_h + 0.02, d = 3, $fn = 6);\n    }\n}\n\nmodule ribs() {\n    // Structural cross ribs for stiffness\n    for (y = [0:20:60]) {\n        translate([0, 30 - y, -wall_th/2])\n            cube([96, 1, 5], center = true);\n    }\n    \n    // Vertical center rib\n    translate([0, 0, -wall_th/2])\n        cube([1, 75, 5], center = true);\n}\n\nmodule mounting_holes() {\n    // Two keyhole slots for mounting\n    for (x = [-30, 30]) {\n        translate([x, 65, 0]) {\n            // Upper circular part\n            cylinder(h = wall_th + 1, d = peg_d + 2, $fn = 20);\n            \n            // Lower slot\n            translate([0, -5, 0])\n                cube([peg_d + 2, 10, wall_th + 1], center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "skateboarding",
    "openscad_code": "// Skateboard Deck Shelf Unit - Medium Complexity Realistic Style\n// Dimensions: 100mm width x 40mm depth x 80mm height\n\n// Global parameters\n$fn = 32;\nwall_thickness = 2;\ndeck_width = 100;\ndeck_depth = 40;\ndeck_thickness = 3;\ntruck_width = 60;\ntruck_height = 8;\nwheel_diameter = 12;\nwheel_width = 6;\n\nmodule skateboard_deck() {\n    difference() {\n        // Main deck shape with realistic taper\n        hull() {\n            translate([-deck_width/2, -deck_depth/2, 0])\n                cube([deck_width, deck_depth, deck_thickness]);\n            translate([-deck_width/2 + 15, -deck_depth/2 + 5, 0])\n                cube([deck_width - 30, deck_depth - 10, deck_thickness]);\n            translate([-deck_width/2 + 25, -deck_depth/2 + 8, 0])\n                cube([deck_width - 50, deck_depth - 16, deck_thickness]);\n        }\n        \n        // Truck mounting holes (realistic 8-hole pattern)\n        for(x = [-25, -15, 15, 25]) {\n            for(y = [-deck_depth/2 + 8, deck_depth/2 - 8]) {\n                translate([x, y, -1])\n                    cylinder(h=deck_thickness+2, d=3);\n            }\n        }\n    }\n}\n\nmodule truck_base() {\n    // Main truck body\n    difference() {\n        translate([-truck_width/2, -4, 0])\n            cube([truck_width, 8, truck_height]);\n        \n        // Hollow center for weight reduction\n        translate([-truck_width/2 + 2, -2, 2])\n            cube([truck_width - 4, 4, truck_height - 2]);\n    }\n    \n    // Kingpin bolt\n    translate([0, 0, truck_height])\n        cylinder(h=4, d=3);\n}\n\nmodule wheel() {\n    difference() {\n        // Wheel body\n        cylinder(h=wheel_width, d=wheel_diameter);\n        \n        // Bearing hole\n        translate([0, 0, -1])\n            cylinder(h=wheel_width+2, d=4);\n        \n        // Tread pattern grooves\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n                translate([-wheel_width/2 - 1, 0, wheel_width/2])\n                    cube([wheel_width+2, 0.5, wheel_width]);\n        }\n    }\n}\n\nmodule truck_assembly() {\n    union() {\n        truck_base();\n        \n        // Wheels on each side\n        translate([-truck_width/2 - wheel_width/2, 0, wheel_diameter/2])\n            rotate([90, 0, 0])\n                wheel();\n        translate([truck_width/2 + wheel_width/2, 0, wheel_diameter/2])\n            rotate([90, 0, 0])\n                wheel();\n    }\n}\n\nmodule shelf_support() {\n    // Vertical support posts\n    difference() {\n        translate([-deck_width/2 + 10, -deck_depth/2 - 2, 0])\n            cube([4, deck_depth + 4, 60]);\n        translate([-deck_width/2 + 11, -deck_depth/2 - 1, 55])\n            cube([2, deck_depth + 2, 5]);\n    }\n    \n    difference() {\n        translate([deck_width/2 - 14, -deck_depth/2 - 2, 0])\n            cube([4, deck_depth + 4, 60]);\n        translate([deck_width/2 - 13, -deck_depth/2 - 1, 55])\n            cube([2, deck_depth + 2, 5]);\n    }\n    \n    // Cross brace for stability\n    translate([-deck_width/2 + 10, -deck_depth/2 - 1, 30])\n        cube([deck_width - 20, 2, 4]);\n}\n\nmodule grip_tape_pattern() {\n    // Grip tape texture pattern\n    for(x = [-deck_width/2 + 5:5:deck_width/2 - 5]) {\n        for(y = [-deck_depth/2 + 5:5:deck_depth/2 - 5]) {\n            translate([x, y, deck_thickness + 0.1])\n                cube([0.5, 0.5, 0.2]);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Deck as the main shelf\n    translate([0, 0, 60])\n        skateboard_deck();\n    \n    // Grip tape texture on top\n    translate([0, 0, 60])\n        grip_tape_pattern();\n    \n    // Front trucks as decorative element\n    translate([-deck_width/2 + 30, 0, 60 - truck_height])\n        truck_assembly();\n    \n    // Rear trucks as decorative element\n    translate([deck_width/2 - 30, 0, 60 - truck_height])\n        truck_assembly();\n    \n    // Shelf support structure\n    shelf_support();\n}",
    "renders": true
  },
  {
    "decorative_art": "snowboarding",
    "openscad_code": "// Snowboard Decorative Coat Rack - Realistic Style, Medium Complexity\n// Approx 120mm wide, designed for desktop/entryway use\n\n$fn = 60;\n\n// Overall dimensions\nboard_length = 120;\nboard_width = 30;\nboard_thickness = 2.5;\nnose_length = 25;\ntail_length = 20;\n\n// Hook details\nhook_radius = 3;\nhook_depth = 15;\nhook_spacing = 30;\nhook_count = 3;\n\n// Mounting plate\nmount_width = 20;\nmount_height = 8;\nmount_thickness = 4;\n\nmodule snowboard_profile() {\n    // Main deck with tapered nose and tail\n    hull() {\n        // Nose\n        translate([board_length/2 - nose_length/2, 0, 0])\n            scale([1, 0.8, 1])\n                sphere(r = nose_length/2);\n        \n        // Tail\n        translate([-board_length/2 + tail_length/2, 0, 0])\n            scale([1, 0.7, 1])\n                sphere(r = tail_length/2);\n        \n        // Mid section\n        translate([0, 0, 0])\n            cube([board_length - nose_length - tail_length, board_width, board_thickness], center = true);\n    }\n}\n\nmodule bindings_outline() {\n    // Front binding base\n    translate([board_length/4, 0, board_thickness/2])\n        cube([25, 20, 1], center = true);\n    \n    // Rear binding base\n    translate([-board_length/4, 0, board_thickness/2])\n        cube([25, 20, 1], center = true);\n}\n\nmodule decorative_pattern() {\n    // Center graphic stripe\n    translate([0, 0, board_thickness/2 + 0.1])\n        cube([board_length - 10, 8, 0.1], center = true);\n    \n    // Side accent stripes\n    for(side = [-1, 1]) {\n        translate([0, side * (board_width/2 - 4), board_thickness/2 + 0.1])\n            cube([board_length - 20, 2, 0.1], center = true);\n    }\n}\n\nmodule mounting_system() {\n    // Wall mounting plate with screw holes\n    difference() {\n        translate([0, 0, -board_thickness/2 - mount_thickness/2])\n            cube([mount_width, mount_height, mount_thickness], center = true);\n        \n        // Screw holes\n        for(x = [-mount_width/4, mount_width/4]) {\n            translate([x, 0, -board_thickness/2 - mount_thickness])\n                cylinder(h = mount_thickness + 1, r = 1.5);\n        }\n    }\n}\n\nmodule coat_hooks() {\n    // Generate hooks along the lower edge\n    for(i = [0:hook_count-1]) {\n        x_pos = -board_length/2 + 20 + i * hook_spacing;\n        \n        translate([x_pos, 0, 0])\n            rotate([90, 0, 0])\n                difference() {\n                    // Hook arm\n                    union() {\n                        cylinder(h = hook_depth, r = hook_radius);\n                        translate([0, 0, hook_depth])\n                            sphere(r = hook_radius * 1.2);\n                    }\n                    \n                    // Smooth bottom\n                    translate([0, -hook_radius, 0])\n                        cube([hook_radius * 2, hook_radius, hook_depth], center = true);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    // Main snowboard body\n    union() {\n        snowboard_profile();\n        bindings_outline();\n    }\n    \n    // Decorative elements\n    decorative_pattern();\n    \n    // Functional elements\n    mounting_system();\n    coat_hooks();\n}",
    "renders": true
  },
  {
    "decorative_art": "surfing",
    "openscad_code": "// Surfboard-Shaped Wall Shelf\n// Overall size ~120 mm long for 3D printing\n\n// General parameters\n$fn = 36;                  // Smooth curves\nwall = 2;                  // 2 mm print-friendly wall thickness\nboard_l = 120;             // Surfboard length\nboard_w = 35;              // Surfboard width (widest point)\nboard_t = 6;               // Surfboard thickness\nfin_h = 20;                // Fin height\nfin_t = 3;                 // Fin thickness\nshelf_d = 30;              // Shelf depth from wall\npeg_d = 6;                 // Wall peg diameter\n\n// Surfboard outline module\nmodule surfboard_outline() {\n    hull() {\n        // Nose\n        translate([board_l/2, 0, 0]) sphere(d = board_w * 0.7);\n        // Tail\n        translate([-board_l/2, 0, 0]) sphere(d = board_w * 0.6);\n        // Mid section\n        cube([board_l * 0.8, board_w, 1], center = true);\n    }\n}\n\n// Surfboard shell\nmodule surfboard_shell() {\n    difference() {\n        // Outer board\n        linear_extrude(height = board_t, center = true)\n            surfboard_outline();\n        // Inner cavity (leave 2 mm walls)\n        translate([0, 0, 0])\n            linear_extrude(height = board_t + 0.2, center = true)\n                offset(-wall)\n                    surfboard_outline();\n    }\n}\n\n// Single fin module\nmodule fin() {\n    union() {\n        // Fin body\n        difference() {\n            polyhedron(\n                points = [\n                    [0, 0, 0],\n                    [fin_t, 0, 0],\n                    [fin_t/2, 0, fin_h],\n                    [fin_t/2, -fin_t/2, 0],\n                    [fin_t/2, fin_t/2, 0]\n                ],\n                faces = [\n                    [0, 1, 2], [0, 2, 3], [0, 4, 2], [1, 4, 2], [1, 3, 2], [0, 3, 4], [3, 1, 4]\n                ]\n            );\n            // Lightening hole\n            cylinder(h = fin_t + 1, d = 3, center = true);\n        }\n    }\n}\n\n// Side fins\nmodule side_fins() {\n    translate([-(board_l/2 - 10), board_w/2 - 5, 0])\n        rotate([0, 90, 0])\n            fin();\n    translate([-(board_l/2 - 10), -(board_w/2 - 5), 0])\n        rotate([0, 90, 180])\n            fin();\n}\n\n// Central tail fin\nmodule tail_fin() {\n    translate([-(board_l/2 - 5), 0, 0])\n        rotate([90, 0, 90])\n            fin();\n}\n\n// Shelf back plate (wall mount)\nmodule back_plate() {\n    difference() {\n        // Plate\n        translate([0, 0, -shelf_d/2 - board_t/2 - 0.5])\n            cube([board_l * 0.4, board_w * 0.6, wall], center = true);\n        // Wall peg holes\n        for (x = [-20, 20]) {\n            for (y = [-10, 10]) {\n                translate([x, y, -shelf_d/2 - board_t/2 - 1])\n                    rotate([0, 90, 0])\n                        cylinder(h = wall + 2, d = peg_d, center = true);\n            }\n        }\n    }\n}\n\n// Decorative rail stringer\nmodule stringer() {\n    translate([0, 0, 0])\n        cube([board_l, 2, board_t - 1], center = true);\n}\n\n// Assembly\nunion() {\n    color(\"white\") surfboard_shell();\n    color(\"gray\") stringer();\n    color(\"navy\") tail_fin();\n    color(\"navy\") side_fins();\n    color(\"silver\") back_plate();\n}",
    "renders": true
  },
  {
    "decorative_art": "kitesurfing",
    "openscad_code": "// Kitesurf Board Coffee Table (Medium complexity decorative furniture piece)\n// Overall dimensions: 120mm x 60mm x 45mm\n\n// Board thickness and wall settings\nboard_thickness = 2.5;\nleg_diameter = 8;\nleg_height = 40;\n\nmodule kiteboard_table() {\n    // Main board shape - twin-tip kiteboard outline\n    difference() {\n        // Create elongated hexagon shape for board\n        union() {\n            // Center section\n            translate([0, 0, 0])\n                scale([1, 0.3, 1])\n                    cylinder(h=board_thickness, d1=120, d2=120, $fn=6);\n            \n            // Nose sections\n            translate([-55, 0, 0])\n                rotate([0, 0, 0])\n                    scale([0.8, 0.4, 1])\n                        cylinder(h=board_thickness, d1=40, d2=20, $fn=6);\n            \n            translate([55, 0, 0])\n                rotate([0, 0, 180])\n                    scale([0.8, 0.4, 1])\n                        cylinder(h=board_thickness, d1=40, d2=20, $fn=6);\n        }\n        \n        // Rounded edges\n        minkowski() {\n            children();\n            sphere(r=2);\n        }\n    }\n}\n\n// Footpad details\nmodule footpads() {\n    for(x = [-25, 25]) {\n        for(y = [-15, 15]) {\n            translate([x, y, board_thickness])\n                cube([20, 12, 1.5], center=true);\n        }\n    }\n}\n\n// Fin boxes (decorative)\nmodule fins() {\n    for(x = [-45, 45]) {\n        translate([x, 0, -2])\n            cube([8, 3, 4], center=true);\n    }\n}\n\n// Handle insert detail\nmodule handle() {\n    translate([0, 0, board_thickness/2])\n        rotate([90, 0, 0])\n            cylinder(h=15, d=8, center=true);\n}\n\n// Table legs with kite-inspired strut design\nmodule table_legs() {\n    // Four legs in kite formation\n    positions = [\n        [-40, -25, 0],\n        [40, -25, 0],\n        [-30, 25, 0],\n        [30, 25, 0]\n    ];\n    \n    for(pos = positions) {\n        translate(pos)\n            cylinder(h=leg_height, d=leg_diameter, center=false);\n    }\n    \n    // Cross-bracing struts\n    translate([0, 0, leg_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=80, d=3, center=true);\n    \n    translate([0, 0, leg_height/2])\n        rotate([0, 90, 0])\n            cylinder(h=50, d=3, center=true);\n}\n\n// Decorative rail detail\nmodule rail_detail() {\n    // Series of small cylinders along edge for realistic board rail\n    for(angle = [0:15:360]) {\n        translate([\n            58 * cos(angle),\n            18 * sin(angle),\n            board_thickness/2\n        ])\n            rotate([90, 0, angle])\n                cylinder(h=2, d=3, center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Table top (kiteboard)\n    translate([0, 0, leg_height])\n        kiteboard_table();\n    \n    // Add details to top\n    translate([0, 0, leg_height])\n        footpads();\n    \n    translate([0, 0, leg_height])\n        handle();\n    \n    translate([0, 0, leg_height])\n        fins();\n    \n    translate([0, 0, leg_height])\n        rail_detail();\n    \n    // Leg structure\n    table_legs();\n    \n    // Central support block\n    translate([0, 0, leg_height-5])\n        cube([20, 20, 10], center=true);\n}",
    "renders": true
  },
  {
    "decorative_art": "windsurfing",
    "openscad_code": "// Windsurfing Decorative Shelf Bracket\n// A furniture item that celebrates windsurfing culture\n// Wall-mounted shelf bracket shaped like a windsurf board and sail\n\n// Overall dimensions (mm)\nboard_length = 120;\nboard_width = 35;\nboard_thickness = 4;\nmast_height = 80;\nboom_length = 50;\n\n// Wall mounting plate dimensions\nplate_width = 30;\nplate_height = 40;\nplate_thickness = 3;\n\n// Material thickness for 3D printing\nwall_thickness = 2;\n\n// Main module\nmodule windsurf_shelf_bracket() {\n    // Wall mounting plate with screw holes\n    translate([0, -plate_thickness, 0])\n    difference() {\n        cube([plate_width, plate_thickness, plate_height], center=true);\n        \n        // Screw holes (2mm diameter)\n        for(y = [-12, 12]) {\n            translate([0, plate_thickness/2 + 1, y])\n            rotate([90, 0, 0])\n            cylinder(h=plate_thickness+2, d=2.2, center=true, $fn=16);\n        }\n    }\n    \n    // Main board (windsurf board shape)\n    translate([0, 0, -plate_height/2 - board_length/2])\n    difference() {\n        // Tapered board shape\n        hull() {\n            // Front tip\n            translate([0, 0, board_length/2 - 5])\n            sphere(d=board_width*0.8, $fn=32);\n            \n            // Main body\n            translate([0, 0, -board_length/2 + 15])\n            cube([board_width, board_thickness, board_length - 30], center=true);\n            \n            // Rear tapered end\n            translate([0, 0, -board_length/2 + 5])\n            sphere(d=board_width*0.7, $fn=32);\n        }\n        \n        // Hollow out interior for material saving\n        translate([0, 0, 0])\n        scale([0.8, 0.5, 0.9])\n        hull() {\n            translate([0, 0, board_length/2 - 5])\n            sphere(d=board_width*0.8, $fn=32);\n            translate([0, 0, -board_length/2 + 15])\n            cube([board_width, board_thickness, board_length - 30], center=true);\n            translate([0, 0, -board_length/2 + 5])\n            sphere(d=board_width*0.7, $fn=32);\n        }\n    }\n    \n    // Mast (cylindrical support)\n    translate([0, 0, -plate_height/2 - 20])\n    difference() {\n        cylinder(h=mast_height, d=wall_thickness*2, center=false, $fn=16);\n        cylinder(h=mast_height, d=wall_thickness*2 - 2*wall_thickness, center=false, $fn=16);\n    }\n    \n    // Sail attachment point\n    translate([0, 0, -plate_height/2 - 20 + mast_height])\n    sphere(d=wall_thickness*2.5, $fn=16);\n    \n    // Boom (horizontal sail support)\n    rotate([0, 90, 0])\n    translate([0, 0, -plate_height/2 - 20 + mast_height/2])\n    difference() {\n        cylinder(h=boom_length, d=wall_thickness*1.5, center=true, $fn=12);\n        cylinder(h=boom_length, d=wall_thickness*1.5 - 2*wall_thickness, center=true, $fn=12);\n    }\n    \n    // Decorative fin on bottom\n    translate([0, 0, -plate_height/2 - board_length/2 + 10])\n    linear_extrude(height=wall_thickness*2)\n    polygon(points=[\n        [-3, 0],\n        [3, 0],\n        [0, -15]\n    ]);\n    \n    // Cross-brace for structural support\n    translate([0, -plate_thickness/2 - board_thickness/2, -plate_height/2 - 40])\n    rotate([45, 0, 0])\n    difference() {\n        cube([wall_thickness*3, 30, wall_thickness*3], center=true);\n        cube([wall_thickness*3 - 2*wall_thickness, 30, wall_thickness*3 - 2*wall_thickness], center=true);\n    }\n    \n    // Decorative wave pattern on board surface\n    for(i = [1:5]) {\n        translate([0, board_thickness/2 + 0.5, -plate_height/2 - board_length/2 + i*20])\n        rotate([90, 0, 0])\n        linear_extrude(height=1)\n        polygon(points=[\n            [-board_width/2 + 5, 0],\n            [-board_width/4, -3],\n            [0, 0],\n            [board_width/4, -3],\n            [board_width/2 - 5, 0]\n        ]);\n    }\n    \n    // Small decorative sail details\n    translate([boom_length/4, 0, -plate_height/2 - 20 + mast_height/2])\n    rotate([90, 0, 0])\n    cylinder(h=3, d=wall_thickness, center=true, $fn=8);\n    \n    translate([-boom_length/4, 0, -plate_height/2 - 20 + mast_height/2])\n    rotate([90, 0, 0])\n    cylinder(h=3, d=wall_thickness, center=true, $fn=8);\n}\n\n// Render the model\nwindsurf_shelf_bracket();",
    "renders": true
  },
  {
    "decorative_art": "wakeboarding",
    "openscad_code": "// Wakeboard-inspired decorative shelf unit\n// Realistic style, medium complexity, 3D printable\n\n$fn = 32;\n\n// Overall dimensions\nboard_length = 120;\nboard_width = 40;\nboard_thickness = 4;\nleg_height = 50;\nleg_diameter = 8;\n\n// Wakeboard profile parameters\nrocker = 8;\nedge_radius = 2;\nfin_height = 3;\nfin_length = 12;\n\n// Shelf parameters\nshelf_thickness = 3;\nshelf_depth = 25;\n\n// Decorative bindings\nbinding_width = 15;\nbinding_length = 25;\nbinding_height = 5;\nstrap_thickness = 2;\n\nmodule wakeboard_profile() {\n    // Create the main board with rocker\n    hull() {\n        translate([0, 0, -rocker/2]) \n            cube([board_length, board_width, board_thickness], center = true);\n        \n        translate([0, 0, rocker/2]) \n            cube([board_length*0.8, board_width*0.9, board_thickness], center = true);\n    }\n    \n    // Add edge radius\n    difference() {\n        children();\n        // Rounded edges\n        for(i = [-1, 1]) {\n            translate([i*board_length/2, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=board_width, r=edge_radius, center=true);\n            translate([0, i*board_width/2, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=board_length, r=edge_radius, center=true);\n        }\n    }\n}\n\nmodule fins() {\n    // Wakeboard fins for support\n    for(pos = [-30, 30]) {\n        translate([pos, 0, -board_thickness/2 - fin_height/2]) {\n            cube([fin_length, 2, fin_height], center=true);\n            translate([0, 0, -fin_height/2])\n                cylinder(h=fin_height, r=1, center=true);\n        }\n    }\n}\n\nmodule bindings() {\n    // Decorative binding mounts\n    for(pos = [-20, 20]) {\n        translate([pos, 0, board_thickness/2 + binding_height/2]) {\n            difference() {\n                // Main binding block\n                cube([binding_length, binding_width, binding_height], center=true);\n                \n                // Binding strap cutouts\n                for(y = [-binding_width/3, binding_width/3]) {\n                    translate([0, y, binding_height/2 - strap_thickness/2])\n                        cube([binding_length*0.8, strap_thickness*2, strap_thickness], center=true);\n                }\n            }\n            \n            // Binding screws\n            for(x = [-binding_length/3, binding_length/3]) {\n                translate([x, 0, binding_height/2 + 1])\n                    cylinder(h=2, r=1.5, center=true);\n            }\n        }\n    }\n}\n\nmodule legs() {\n    // Furniture legs integrated as wakeboard features\n    for(angle = [30, 150]) {\n        rotate([0, 0, angle])\n            translate([board_length/2 - 10, 0, -leg_height/2 - board_thickness/2 - rocker/2])\n                cylinder(h=leg_height, r=leg_diameter/2, center=true);\n    }\n    \n    for(angle = [-30, -150]) {\n        rotate([0, 0, angle])\n            translate([-board_length/2 + 10, 0, -leg_height/2 - board_thickness/2 - rocker/2])\n                cylinder(h=leg_height, r=leg_diameter/2, center=true);\n    }\n}\n\nmodule shelf() {\n    // Glass shelf between bindings\n    translate([0, 0, board_thickness/2 + binding_height + shelf_thickness/2 + 2])\n        cube([shelf_depth, board_width*0.8, shelf_thickness], center=true);\n}\n\n// Main assembly\nunion() {\n    // Wakeboard base\n    wakeboard_profile();\n    \n    // Structural elements\n    fins();\n    legs();\n    \n    // Furniture elements\n    bindings();\n    shelf();\n    \n    // Additional decorative elements\n    translate([0, 0, board_thickness/2 + binding_height + shelf_thickness + 3])\n        cylinder(h=2, r=3, center=true);\n}",
    "renders": true
  },
  {
    "decorative_art": "waterski",
    "openscad_code": "// Waterski Bookshelf / Display Stand\n// Realistic style with medium complexity\n// 3D printable, ~120mm length, 2mm wall thickness\n\n$fn = 50;\n\n// Overall dimensions\nski_length = 120;\nski_width = 25;\nski_thickness = 8;\nwall_thickness = 2;\n\n// Main ski body\nmodule ski_body() {\n    difference() {\n        // Full ski shape\n        union() {\n            // Main body\n            translate([0, 0, ski_thickness/2])\n                cube([ski_length, ski_width, ski_thickness], center = true);\n            \n            // Front taper\n            translate([ski_length/2 - 10, 0, ski_thickness/2])\n                rotate([0, 90, 0])\n                    cylinder(h = 20, r1 = ski_width/2, r2 = 0);\n            \n            // Rear taper\n            translate([-ski_length/2 + 10, 0, ski_thickness/2])\n                rotate([0, 90, 0])\n                    cylinder(h = 20, r1 = ski_width/2, r2 = 0);\n        }\n        \n        // Hollow out interior for printing\n        translate([0, 0, ski_thickness/2])\n            cube([ski_length - 4, ski_width - 4, ski_thickness - 2*wall_thickness], center = true);\n        \n        // Binding holes\n        translate([ski_length/4, 0, ski_thickness])\n            cylinder(h = ski_thickness + 2, r = 3, center = true);\n        translate([-ski_length/4, 0, ski_thickness])\n            cylinder(h = ski_thickness + 2, r = 3, center = true);\n    }\n}\n\n// Fins on bottom\nmodule fins() {\n    for(i = [-1, 1]) {\n        translate([-ski_length/3, i * ski_width/4, 0])\n            cube([30, 2, 5]);\n        translate([ski_length/4, i * ski_width/4, 0])\n            cube([25, 2, 5]);\n    }\n}\n\n// Support structure for bookshelf function\nmodule bookshelf_supports() {\n    // Left support\n    translate([-ski_length/3, 0, -ski_thickness/2 - 15])\n        difference() {\n            cube([4, ski_width - 4, 30], center = true);\n            translate([0, 0, 10])\n                cube([2, ski_width - 6, 10], center = true);\n        }\n    \n    // Right support\n    translate([ski_length/3, 0, -ski_thickness/2 - 15])\n        difference() {\n            cube([4, ski_width - 4, 30], center = true);\n            translate([0, 0, 10])\n                cube([2, ski_width - 6, 10], center = true);\n        }\n    \n    // Base plate\n    translate([0, 0, -ski_thickness/2 - 30])\n        cube([ski_length - 20, ski_width + 10, 2], center = true);\n}\n\n// Decorative groove pattern\nmodule grooves() {\n    for(i = [-40:10:40]) {\n        translate([i, 0, ski_thickness/2 + 0.1])\n            difference() {\n                cube([2, ski_width - 6, 1]);\n                translate([0, 0, -0.2])\n                    cube([2.2, ski_width - 5.8, 1.2]);\n            }\n    }\n}\n\n// Rounded binding mounts\nmodule binding_mounts() {\n    // Front binding\n    translate([ski_length/4, 0, ski_thickness/2])\n        difference() {\n            cylinder(h = 4, r1 = 8, r2 = 8);\n            cylinder(h = 5, r = 3);\n        }\n    \n    // Rear binding\n    translate([-ski_length/4, 0, ski_thickness/2])\n        difference() {\n            cylinder(h = 4, r1 = 8, r2 = 8);\n            cylinder(h = 5, r = 3);\n        }\n}\n\n// Assemble the waterski bookshelf\nunion() {\n    ski_body();\n    translate([0, 0, -ski_thickness/2])\n        fins();\n    bookshelf_supports();\n    grooves();\n    binding_mounts();\n}",
    "renders": true
  },
  {
    "decorative_art": "rowing",
    "openscad_code": "// Realistic Rowing Boat Furniture - Decorative Shelf Unit\n// OpenSCAD for 3D printing (100mm length)\n\n// Overall dimensions\nboat_length = 100;\nboat_width = 25;\nboat_height = 35;\nwall_thickness = 2;\n\n// Main hull module\nmodule hull() {\n    // Bottom hull - streamlined shape\n    hull_bottom();\n    \n    // Side walls\n    hull_walls();\n    \n    // Internal shelf supports\n    shelf_supports();\n    \n    // Decorative oar holders\n    oar_holders();\n}\n\n// Create the curved bottom of the boat\nmodule hull_bottom() {\n    // Main curved bottom using scaled cylinders\n    translate([0, 0, wall_thickness]) {\n        difference() {\n            // Outer shell\n            scale([1, 0.4, 0.3]) \n                cylinder(h=boat_height, r=boat_length/2, $fn=50);\n            \n            // Hollow interior\n            scale([0.92, 0.36, 0.25]) \n                cylinder(h=boat_height+2, r=boat_length/2, $fn=50);\n        }\n    }\n}\n\n// Create side walls with realistic flare\nmodule hull_walls() {\n    // Port and starboard walls\n    for(side = [-1, 1]) {\n        translate([0, side * boat_width/2, boat_height/2]) {\n            difference() {\n                // Outer wall\n                rotate([0, 90, 0])\n                    cylinder(h=boat_height-wall_thickness, r=wall_thickness, $fn=20);\n                \n                // Taper top edge\n                translate([0, 0, boat_height-wall_thickness-2])\n                    rotate([0, 90, 0])\n                        cylinder(h=5, r=wall_thickness-0.5, $fn=20);\n            }\n        }\n    }\n    \n    // Bow and stern transoms\n    for(end = [-1, 1]) {\n        translate([end * boat_length/2, 0, boat_height/2]) {\n            rotate([90, 0, 90])\n                cylinder(h=boat_width, r=wall_thickness, $fn=20);\n        }\n    }\n}\n\n// Internal shelf structure\nmodule shelf_supports() {\n    // Main central support beam\n    translate([0, 0, boat_height*0.6]) {\n        cube([boat_length*0.8, wall_thickness*2, wall_thickness*3], center=true);\n    }\n    \n    // Cross braces every 20mm\n    for(pos = [-30, -10, 10, 30]) {\n        translate([pos, 0, boat_height*0.4]) {\n            cube([wall_thickness*2, boat_width*0.8, wall_thickness*3], center=true);\n        }\n    }\n}\n\n// Decorative oar holders\nmodule oar_holders() {\n    // Starboard oar holder\n    translate([boat_length*0.3, boat_width/2 + wall_thickness, boat_height*0.7]) {\n        oar_holder();\n    }\n    \n    // Port oar holder\n    translate([-boat_length*0.3, -boat_width/2 - wall_thickness, boat_height*0.7]) {\n        rotate([0, 0, 180])\n            oar_holder();\n    }\n}\n\n// Individual oar holder\nmodule oar_holder() {\n    difference() {\n        // Main bracket\n        union() {\n            cube([8, 6, 4]);\n            translate([4, 3, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=4, r=3, $fn=20);\n        }\n        \n        // Oar slot\n        translate([4, 3, 2])\n            rotate([90, 0, 0])\n                cylinder(h=6, r=2.5, $fn=20);\n    }\n}\n\n// Decorative seating area\nmodule seating() {\n    // Central seat\n    translate([0, 0, boat_height*0.5]) {\n        difference() {\n            // Seat base\n            cube([boat_length*0.3, boat_width*0.5, wall_thickness*2], center=true);\n            \n            // Drainage holes\n            for(x = [-10, 0, 10]) {\n                for(y = [-5, 0, 5]) {\n                    translate([x, y, -1])\n                        cylinder(h=wall_thickness*2+2, r=1.5, $fn=10);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    hull();\n    seating();\n    \n    // Add subtle texture - simulated wood grain on sides\n    for(i = [0:5:boat_length-10]) {\n        translate([i-boat_length/2, boat_width/2, boat_height*0.8]) {\n            cube([2, 0.2, 1]);\n        }\n        translate([i-boat_length/2, -boat_width/2-0.2, boat_height*0.8]) {\n            cube([2, 0.2, 1]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "kayaking",
    "openscad_code": "// Kayak-shaped decorative wall shelf\n// Dimensions: ~120mm length, ~30mm width, ~50mm height\n\n// Overall wall shelf module\nmodule kayak_shelf() {\n    // Main hull body\n    hull();\n    \n    // Deck with storage compartments\n    deck();\n    \n    // Support brackets for wall mounting\n    brackets();\n    \n    // Decorative details\n    details();\n}\n\n// Main hull shape - realistic kayak hull\nmodule hull() {\n    // Hull base - tapered shape\n    difference() {\n        // Main hull body\n        union() {\n            // Front tapered section\n            translate([0, 0, 5])\n                scale([1, 0.3, 0.4])\n                    rotate([90, 0, 0])\n                        cylinder(h=60, r1=15, r2=2, $fn=32);\n            \n            // Main body\n            translate([0, 0, 5])\n                scale([1, 0.3, 0.4])\n                    rotate([90, 0, 0])\n                        cylinder(h=100, r=15, $fn=32);\n            \n            // Rear tapered section\n            translate([-50, 0, 5])\n                scale([1, 0.3, 0.4])\n                    rotate([90, 0, 0])\n                        cylinder(h=40, r1=15, r2=5, $fn=32);\n        }\n        \n        // Hollow interior for shelf space\n        translate([0, 0, 7])\n            scale([0.8, 0.25, 0.35])\n                rotate([90, 0, 0])\n                    cylinder(h=120, r=12, $fn=32);\n    }\n}\n\n// Deck with compartments\nmodule deck() {\n    // Top deck surface\n    hull_width = 30;\n    hull_length = 120;\n    \n    // Deck plating\n    for (i = [-40:20:40]) {\n        translate([i, 0, 11])\n            cube([18, hull_width-4, 2], center=true);\n    }\n    \n    // Cockpit opening - storage area\n    difference() {\n        // Cockpit rim\n        translate([0, 0, 11])\n            cylinder(h=3, r=8, $fn=32);\n        \n        // Cockpit hole\n        translate([0, 0, 11.5])\n            cylinder(h=4, r=6, $fn=32);\n    }\n    \n    // Hatch covers\n    translate([-30, 0, 11])\n        cylinder(h=1.5, r=5, $fn=20);\n    \n    translate([30, 0, 11])\n        cylinder(h=1.5, r=5, $fn=20);\n}\n\n// Wall mounting brackets\nmodule brackets() {\n    // Front bracket\n    translate([40, 0, 20])\n        rotate([90, 0, 0])\n            bracket();\n    \n    // Rear bracket\n    translate([-40, 0, 20])\n        rotate([90, 0, 0])\n            bracket();\n}\n\n// Individual bracket\nmodule bracket() {\n    difference() {\n        // Bracket body\n        union() {\n            // Vertical support\n            cube([20, 2, 8], center=true);\n            \n            // Mounting plate\n            translate([10, 0, 0])\n                cube([4, 2, 15], center=true);\n        }\n        \n        // Screw holes\n        translate([10, 0, 5])\n            cylinder(h=3, r=1.5, $fn=16);\n        translate([10, 0, -5])\n            cylinder(h=3, r=1.5, $fn=16);\n    }\n}\n\n// Decorative details\nmodule details() {\n    // Deck lines\n    for (pos = [-35:10:35]) {\n        translate([pos, 0, 12])\n            rotate([90, 0, 0])\n                cylinder(h=16, r=0.8, $fn=8);\n    }\n    \n    // Bungee cord attachments\n    for (angle = [0:45:315]) {\n        translate([35*cos(angle), 12*sin(angle), 11.5])\n            sphere(r=1, $fn=12);\n    }\n    \n    // Hull seam detail\n    difference() {\n        // Main hull\n        translate([0, 0, 5.5])\n            scale([1, 0.305, 0.405])\n                rotate([90, 0, 0])\n                    cylinder(h=120, r=15.5, $fn=32);\n        \n        // Cut for seam\n        translate([0, 0, 5.5])\n            scale([1, 0.295, 0.395])\n                rotate([90, 0, 0])\n                    cylinder(h=120, r=15.5, $fn=32);\n    }\n}\n\n// Render the complete kayak shelf\nkayak_shelf();",
    "renders": true
  },
  {
    "decorative_art": "canoeing",
    "openscad_code": "// Canoe Rack - Decorative Furniture Piece\n// Wall-mounted canoe paddle rack with realistic proportions\n\n$fn = 50;\n\nmodule paddle() {\n    // Paddle handle - 2mm walls\n    translate([0, 0, 10])\n    difference() {\n        cylinder(h=100, d=12);\n        cylinder(h=100, d=8);\n    }\n    \n    // Paddle blade - tapered\n    translate([0, 0, 110])\n    difference() {\n        scale([1, 0.3, 1])\n        cylinder(h=50, d=30);\n        scale([1, 0.3, 1])\n        cylinder(h=50, d=26);\n    }\n    \n    // Paddle grip\n    translate([0, 0, 0])\n    difference() {\n        sphere(d=18);\n        sphere(d=14);\n    }\n}\n\nmodule rack_base() {\n    // Main back plate - 2mm thick\n    translate([-75, -5, 0])\n    cube([150, 5, 100]);\n    \n    // Top mounting bracket\n    translate([-65, -5, 85])\n    cube([130, 10, 5]);\n    \n    // Bottom mounting bracket\n    translate([-65, -5, 0])\n    cube([130, 10, 5]);\n    \n    // Screw holes (for M3 screws)\n    for(x = [-40, 0, 40]) {\n        translate([x, 5, 87.5])\n        rotate([90, 0, 0])\n        cylinder(h=10, d=3.5);\n        translate([x, 5, 2.5])\n        rotate([90, 0, 0])\n        cylinder(h=10, d=3.5);\n    }\n}\n\nmodule support_arms() {\n    // Left support arm\n    translate([-60, 0, 20])\n    difference() {\n        cube([10, 15, 60]);\n        translate([5, 15, 30])\n        rotate([0, 90, 0])\n        cylinder(h=10, d=6);\n    }\n    \n    // Right support arm\n    translate([50, 0, 20])\n    difference() {\n        cube([10, 15, 60]);\n        translate([5, 15, 30])\n        rotate([0, 90, 0])\n        cylinder(h=10, d=6);\n    }\n    \n    // Center support\n    translate([-5, 0, 30])\n    difference() {\n        cube([10, 15, 40]);\n        translate([5, 15, 20])\n        rotate([0, 90, 0])\n        cylinder(h=10, d=6);\n    }\n}\n\nmodule decorative_trim() {\n    // Top decorative rail\n    translate([-70, 3, 90])\n    cube([140, 3, 5]);\n    \n    // Bottom decorative rail\n    translate([-70, 3, 0])\n    cube([140, 3, 5]);\n    \n    // Side trims\n    for(z = [10:20:80]) {\n        translate([-72, 3, z])\n        cube([4, 3, 10]);\n        translate([68, 3, z])\n        cube([4, 3, 10]);\n    }\n}\n\n// Assembly\nunion() {\n    rack_base();\n    support_arms();\n    decorative_trim();\n    \n    // Mount paddles\n    rotate([90, 0, 0])\n    translate([-40, 15, 30])\n    paddle();\n    \n    rotate([90, 0, 0])\n    translate([0, 15, 30])\n    paddle();\n    \n    rotate([90, 0, 0])\n    translate([40, 15, 30])\n    paddle();\n}",
    "renders": true
  },
  {
    "decorative_art": "sailing",
    "openscad_code": "// Sailing-themed decorative cabinet (realistic style, medium complexity)\n// Dimensions: 120mm x 40mm x 80mm\n\n$fn = 32;\n\nmodule cabinet_body() {\n    // Main cabinet structure\n    difference() {\n        // Outer shell\n        cube([120, 40, 80]);\n        \n        // Remove interior for hollow cabinet\n        translate([2, 2, 2])\n            cube([116, 36, 76]);\n    }\n}\n\nmodule sail_detail() {\n    // Curved sail shape on front\n    translate([60, 40.5, 40])\n        rotate([0, 90, 0])\n            scale([1, 1.2, 0.8])\n                cylinder(h = 60, r1 = 20, r2 = 0);\n    \n    // Sail seam lines\n    for (i = [0:3]) {\n        translate([60, 40.2, 20 + i*15])\n            rotate([0, 90, 0])\n                scale([1, 1.15, 0.05])\n                    cylinder(h = 50, r1 = 15 + i*2, r2 = 0);\n    }\n}\n\nmodule porthole() {\n    // Circular porthole door detail\n    translate([10, 20.5, 40])\n        rotate([0, 90, 0])\n            difference() {\n                cylinder(h = 2, r = 8);\n                translate([0, 0, -0.1])\n                    cylinder(h = 2.2, r = 6);\n            }\n    \n    // Porthole frame\n    translate([10, 20.4, 40])\n        rotate([0, 90, 0])\n            cylinder(h = 1, r = 9);\n}\n\nmodule rope_molding() {\n    // Rope-like molding along top edge\n    for (x = [10:10:110]) {\n        translate([x, 20, 80.5])\n            rotate([90, 0, 0])\n                cylinder(h = 1.5, r = 1.5);\n    }\n}\n\nmodule anchor_detail() {\n    // Small anchor shaped handle\n    translate([60, 40.5, 15])\n        rotate([0, 90, 0])\n            union() {\n                // Anchor stock\n                translate([0, 0, 0])\n                    rotate([90, 0, 0])\n                        cylinder(h = 8, r = 1);\n                \n                // Anchor arms\n                for (angle = [30, -30]) {\n                    rotate([0, 0, angle])\n                        translate([0, 2, 0])\n                            rotate([90, 0, 0])\n                                cylinder(h = 6, r = 0.8);\n                }\n                \n                // Anchor ring\n                translate([0, 0, 5])\n                    rotate([90, 0, 0])\n                        torus(2, 0.5);\n            }\n}\n\nmodule torus(major, minor) {\n    rotate_extrude()\n        translate([major, 0, 0])\n            circle(r = minor);\n}\n\nmodule legs() {\n    // Four tapered legs with nautical flair\n    positions = [[10, 10], [110, 10], [10, 30], [110, 30]];\n    for (pos = positions) {\n        translate([pos[0], pos[1], -10])\n            cylinder(h = 10, r1 = 3, r2 = 2);\n        \n        // Leg base detail (ship's post)\n        translate([pos[0], pos[1], -10.5])\n            sphere(r = 2.5);\n    }\n}\n\nmodule wave_base() {\n    // Wavy base decoration\n    translate([60, 20, -1])\n        for (i = [0:5]) {\n            translate([i*20 - 60, 0, 0])\n                rotate([0, 90, 0])\n                    scale([1, 0.3, 1])\n                        cylinder(h = 20, r = 5);\n        }\n}\n\n// Main assembly\nunion() {\n    // Cabinet structure\n    cabinet_body();\n    \n    // Decorative elements\n    sail_detail();\n    porthole();\n    rope_molding();\n    anchor_detail();\n    legs();\n    wave_base();\n}",
    "renders": true
  },
  {
    "decorative_art": "yachting",
    "openscad_code": "// Yachting Bar Stool with Nautical Details\n// Dimensions: 110mm height, 45mm seat diameter\n// Wall thickness: 2mm throughout for 3D printability\n\n$fn = 32;\n\n// Main stool assembly\nmodule stool() {\n    // Base with weighted bottom (simulates yacht keel)\n    translate([0,0,0]) \n        base_keel();\n    \n    // Central support post with rope detail\n    translate([0,0,8]) \n        support_post();\n    \n    // Swivel seat with nautical pattern\n    translate([0,0,100]) \n        swivel_seat();\n    \n    // Footrest ring with rope texture\n    translate([0,0,45]) \n        footrest_ring();\n    \n    // Reinforcement struts\n    for(i=[0:120:359]) {\n        rotate([0,0,i])\n            translate([0,0,25])\n                strut();\n    }\n}\n\n// Weighted base inspired by yacht keel\nmodule base_keel() {\n    difference() {\n        // Main base shape\n        cylinder(h=8, r1=22, r2=18);\n        \n        // Drainage hole (common on yacht furniture)\n        translate([0,0,-1])\n            cylinder(h=10, r=3);\n    }\n    \n    // Keel fin details for stability\n    for(i=[0:90:359]) {\n        rotate([0,0,i])\n            translate([18,0,4])\n                cube([8,2,8], center=true);\n    }\n}\n\n// Central post with rope texture simulation\nmodule support_post() {\n    difference() {\n        // Main post tube\n        cylinder(h=92, r=6, r1=6, r2=5);\n        \n        // Inner hollow for weight reduction\n        translate([0,0,-1])\n            cylinder(h=94, r=4);\n    }\n    \n    // Rope pattern grooves\n    for(h=[10:15:85]) {\n        translate([0,0,h])\n            rotate([0,0,h*2])\n                rope_groove();\n    }\n}\n\nmodule rope_groove() {\n    rotate_extrude()\n        translate([5.9,0,0])\n            circle(r=0.3);\n}\n\n// Swivel seat with nautical compass rose pattern\nmodule swivel_seat() {\n    difference() {\n        // Main seat disc\n        cylinder(h=5, r=22.5);\n        \n        // Top surface hollow for cushion effect\n        translate([0,0,-1])\n            cylinder(h=7, r=20.5);\n    }\n    \n    // Compass rose pattern on seat\n    for(i=[0:30:359]) {\n        rotate([0,0,i])\n            translate([12,0,5])\n                cube([0.5,8,0.5], center=true);\n    }\n    \n    // Center cap detail\n    translate([0,0,5.5])\n        cylinder(h=1, r=3);\n}\n\n// Footrest ring with yacht rail styling\nmodule footrest_ring() {\n    difference() {\n        // Main ring tube\n        rotate_extrude()\n            translate([30,0,0])\n                circle(r=3);\n        \n        // Inner hollow\n        rotate_extrude()\n            translate([30,0,0])\n                circle(r=1);\n    }\n    \n    // Support brackets\n    for(i=[0:60:359]) {\n        rotate([0,0,i])\n            translate([0,0,42])\n                bracket();\n    }\n}\n\nmodule bracket() {\n    translate([27,0,0])\n        rotate([0,90,0])\n            cylinder(h=3, r=2);\n}\n\n// Structural reinforcement struts\nmodule strut() {\n    translate([15,0,0])\n        rotate([90,0,0])\n            cylinder(h=20, r=1.5);\n}\n\n// Assembly call\nstool();",
    "renders": true
  },
  {
    "decorative_art": "diving",
    "openscad_code": "// Diving Helmet Furniture – a small decorative side table / nightstand\n// Overall size: ~120 mm tall\n// All walls 2 mm thick for reliable 3D printing\n\n$fn = 40;  // smooth curves\n\n// Main helmet shell (hollow sphere)\nmodule helmet_shell() {\n    difference() {\n        sphere(d = 80);                 // outer sphere\n        sphere(d = 76);                 // inner hollow\n    }\n}\n\n// Front viewport ring and porthole glass\nmodule viewport() {\n    translate([0, 40, 0]) {\n        difference() {\n            cylinder(h = 8, d = 40);     // outer rim\n            cylinder(h = 9, d = 36);     // inner cavity\n        }\n        // glass disc\n        color(\"skyblue\", 0.6)\n        translate([0, 0, 8.5])\n        cylinder(h = 1, d = 36);\n    }\n}\n\n// Side bolt pattern around the helmet\nmodule bolts(z) {\n    for(a = [0:45:315]) {\n        rotate([0, 0, a])\n        translate([0, 40, z])\n        cylinder(h = 4, d = 6);\n    }\n}\n\n// Helmet base ring (table top)\nmodule table_top() {\n    difference() {\n        cylinder(h = 8, d = 120);        // top disc\n        cylinder(h = 9, d = 78);         // cavity to seat helmet\n    }\n}\n\n// Four short legs\nmodule legs() {\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x * 45, y * 45, -20])\n        cylinder(h = 20, d = 8);\n    }\n}\n\n// Decorative air hose connector on top\nmodule hose_connector() {\n    translate([0, 0, 45]) {\n        cylinder(h = 15, d = 20);\n        translate([0, 0, 15])\n        cylinder(h = 5, d = 10);\n    }\n}\n\n// Helmet neck ring (bottom decorative band)\nmodule neck_ring() {\n    translate([0, 0, -38])\n    difference() {\n        cylinder(h = 8, d = 60);         // outer ring\n        cylinder(h = 9, d = 56);         // inner relief\n    }\n}\n\n// Assemble all parts\nunion() {\n    // table structure\n    table_top();\n    legs();\n\n    // helmet body\n    translate([0, 0, 4])\n    union() {\n        helmet_shell();\n        viewport();\n        neck_ring();\n        hose_connector();\n        bolts(20);\n        bolts(-20);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "swimming",
    "openscad_code": "// Swimming Pool Chair - Realistic Style, Medium Complexity\n// Dimensions: ~100mm length x 60mm width x 50mm height\n\n// Parameters\nchair_length = 100;\nchair_width = 60;\nchair_height = 50;\nwall_thickness = 2;\nleg_height = 8;\n\n// Main chair body\nmodule chair_body() {\n    // Seat base with rounded edges\n    difference() {\n        // Main seat\n        translate([0, 0, leg_height + 2])\n            cube([chair_length, chair_width, 4], center=true);\n        \n        // Hollow out seat\n        translate([0, 0, leg_height + 2])\n            cube([chair_length - wall_thickness*2, chair_width - wall_thickness*2, 4.1], center=true);\n    }\n    \n    // Backrest with curved top\n    difference() {\n        // Main backrest\n        translate([0, chair_width/2 - 2, leg_height + 10])\n            cube([chair_length, 4, 20], center=true);\n        \n        // Hollow out backrest\n        translate([0, chair_width/2 - 2, leg_height + 10])\n            cube([chair_length - wall_thickness*2, 4.1, 20 - wall_thickness], center=true);\n        \n        // Top curve\n        translate([0, chair_width/2 - 2, leg_height + 20])\n            rotate([90, 0, 0])\n                cylinder(h=chair_length, r=2, center=true);\n    }\n    \n    // Armrests\n    for(side = [-1, 1]) {\n        difference() {\n            // Armrest support\n            translate([chair_length/2 - 15, side * (chair_width/2 - 5), leg_height + 8])\n                cube([30, 10, 8], center=true);\n            \n            // Hollow out\n            translate([chair_length/2 - 15, side * (chair_width/2 - 5), leg_height + 8])\n                cube([30 - wall_thickness, 10 - wall_thickness, 8], center=true);\n        }\n    }\n}\n\n// Chair legs with cross-bracing\nmodule chair_legs() {\n    // Four legs\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            difference() {\n                // Leg\n                translate([x * (chair_length/2 - 8), y * (chair_width/2 - 8), leg_height/2])\n                    cylinder(h=leg_height, r=3, center=true);\n                \n                // Hollow leg\n                translate([x * (chair_length/2 - 8), y * (chair_width/2 - 8), leg_height/2])\n                    cylinder(h=leg_height + 0.1, r=3 - wall_thickness, center=true);\n            }\n        }\n    }\n    \n    // Cross braces\n    difference() {\n        // Front-back brace\n        translate([0, 0, leg_height/2 + 2])\n            cube([chair_length - 20, 2, leg_height - 2], center=true);\n        \n        // Hollow brace\n        translate([0, 0, leg_height/2 + 2])\n            cube([chair_length - 20 - wall_thickness, 2.1, leg_height - 2 - wall_thickness], center=true);\n    }\n    \n    difference() {\n        // Side brace\n        translate([0, 0, leg_height/2 + 2])\n            rotate([0, 90, 0])\n                cube([chair_width - 20, 2, leg_height - 2], center=true);\n        \n        // Hollow brace\n        translate([0, 0, leg_height/2 + 2])\n            rotate([0, 90, 0])\n                cube([chair_width - 20 - wall_thickness, 2.1, leg_height - 2 - wall_thickness], center=true);\n    }\n}\n\n// Pool-style slats pattern on seat and back\nmodule pool_slats() {\n    // Seat slats\n    for(i = [-4:4]) {\n        translate([i * 10, 0, leg_height + 4.5])\n            cube([2, chair_width - 5, 1], center=true);\n    }\n    \n    // Backrest slats\n    for(i = [-4:4]) {\n        translate([i * 10, chair_width/2 - 2, leg_height + 15])\n            rotate([0, 90, 0])\n                cube([2, 20 - wall_thickness, 1], center=true);\n    }\n}\n\n// Swimming pool water effect (decorative)\nmodule water_effect() {\n    // Water surface around chair base\n    color([0.2, 0.5, 0.8, 0.5])\n    translate([0, 0, leg_height - 1])\n        cube([chair_length + 20, chair_width + 20, 0.5], center=true);\n    \n    // Small wave ripples\n    for(x = [-3:3]) {\n        for(y = [-2:2]) {\n            translate([x * 15, y * 15, leg_height - 0.8])\n                sphere(r=1 + abs(x)*0.2 + abs(y)*0.2);\n        }\n    }\n}\n\n// Assemble the chair\nunion() {\n    chair_body();\n    chair_legs();\n    pool_slats();\n}\n\n// Optional water effect (can be commented out for printing)\n// water_effect();",
    "renders": true
  },
  {
    "decorative_art": "triathlon",
    "openscad_code": "// Triathlon Rack Furniture - Realistic Style\n// A compact wall-mounted rack that holds a bike, running shoes, and swimming goggles\n// Overall dimensions: 120mm wide x 80mm deep x 100mm tall\n\n// Wall mounting plate\nmodule wall_plate() {\n    difference() {\n        // Main plate with rounded edges\n        translate([0, 0, 50])\n            minkowski() {\n                cube([120, 10, 100], center=true);\n                cylinder(r=5, h=0.01, center=true);\n            }\n        \n        // Mounting holes (4mm diameter for M3 screws)\n        for (x = [-40, 40]) {\n            for (y = [-35, 35]) {\n                translate([x, -8, y])\n                    rotate([90, 0, 0])\n                        cylinder(r=2.2, h=20, center=true);\n            }\n        }\n    }\n}\n\n// Bike hanger arm\nmodule bike_hanger() {\n    union() {\n        // Main arm tube\n        translate([0, 30, 70])\n            rotate([0, 90, 0])\n                cylinder(r=4, h=50, center=true);\n        \n        // Top support\n        translate([0, 10, 85])\n            cube([8, 20, 4], center=true);\n        \n        // Bottom frame support\n        translate([0, 40, 50])\n            cube([10, 40, 4], center=true);\n        \n        // Rubber grip rings\n        for (pos = [-15, 0, 15]) {\n            translate([pos, 30, 70])\n                rotate([0, 90, 0])\n                    cylinder(r=5, h=3, center=true);\n        }\n    }\n}\n\n// Shoe shelf\nmodule shoe_shelf() {\n    difference() {\n        // Main shelf with front lip\n        union() {\n            translate([0, 45, 25])\n                cube([110, 4, 40], center=true);\n            \n            translate([0, 47, 45])\n                cube([110, 4, 4], center=true);\n        }\n        \n        // Drainage holes\n        for (x = [-40, -20, 0, 20, 40]) {\n            for (z = [15, 25, 35]) {\n                translate([x, 45, z])\n                    cylinder(r=2, h=5, center=true);\n            }\n        }\n    }\n}\n\n// Goggle hooks\nmodule goggle_hooks() {\n    for (side = [-1, 1]) {\n        translate([side * 50, 0, 85]) {\n            // Hook base\n            cube([8, 15, 8], center=true);\n            \n            // Hook curve\n            translate([0, 7.5, 0])\n                rotate([90, 0, 0])\n                    cylinder(r=3, h=8, center=true);\n            \n            // End stop\n            translate([0, 12, 0])\n                cube([8, 2, 8], center=true);\n        }\n    }\n}\n\n// Decorative triathlon symbols\nmodule triathlon_symbols() {\n    // Running shoe outline on shoe shelf\n    translate([0, 48, 30])\n        rotate([90, 0, 0])\n            scale([1, 1.5, 1])\n                cylinder(r=15, h=1, center=true);\n    \n    // Swimming wave pattern on wall plate\n    for (i = [-3:3]) {\n        translate([i * 15, 0, 75])\n            rotate([0, 90, 0])\n                scale([1, 0.3, 1])\n                    cylinder(r=8, h=2, center=true);\n    }\n    \n    // Bike gear teeth pattern on wall plate\n    translate([0, 0, 25])\n        rotate([90, 0, 0])\n            cylinder(r=20, h=2, center=true);\n    \n    for (i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([15, 0, 25])\n                cube([10, 2, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    wall_plate();\n    bike_hanger();\n    shoe_shelf();\n    goggle_hooks();\n    triathlon_symbols();\n}",
    "renders": true
  },
  {
    "decorative_art": "biathlon",
    "openscad_code": "// Biathlon Trophy / Decorative Shelf Unit\n// Combines rifle silhouette with target element and shelf base\n// Overall size: 120mm width x 80mm depth x 140mm height\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Rifle body module\nmodule rifle_body() {\n    // Main stock\n    difference() {\n        cube([100, 15, 8], center=true);\n        translate([0, 0, 4])\n            cube([96, 11, 8], center=true);\n    }\n    \n    // Rifle barrel\n    translate([45, 0, 4])\n        rotate([0, 90, 0])\n        cylinder(h=60, r=2, center=true);\n    \n    // Scope\n    translate([25, 0, 10])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=30, r=4, center=true);\n            cylinder(h=32, r=2.5, center=true);\n        }\n    \n    // Magazine\n    translate([15, 0, -8])\n        cube([8, 10, 12], center=true);\n    \n    // Trigger guard\n    translate([10, 0, -3])\n        difference() {\n            cube([12, 8, 3], center=true);\n            translate([0, 0, 1.5])\n                cube([10, 6, 3], center=true);\n        }\n}\n\n// Target element with rings\nmodule target() {\n    // Target stand post\n    translate([-40, 0, -20])\n        cylinder(h=40, r=2);\n    \n    // Target backing\n    translate([-40, 0, 20])\n        cube([16, 2, 16], center=true);\n    \n    // Target rings\n    for (i = [1:4]) {\n        translate([-40, 1.5, 20])\n            scale([1, 0.3, 1])\n            cylinder(h=2, r=2 * i, center=true);\n    }\n    \n    // Center bullseye\n    translate([-40, 2, 20])\n        cylinder(h=2, r=1.5);\n}\n\n// Shelf base with decorative cutouts\nmodule shelf_base() {\n    // Main shelf platform\n    difference() {\n        cube([120, 80, 8], center=true);\n        \n        // Decorative cutouts - biathlon silhouettes\n        for (x = [-50:25:50]) {\n            translate([x, -20, 4])\n                scale([0.3, 0.3, 1])\n                rotate([90, 0, 0])\n                rifle_body();\n            translate([x, 20, 4])\n                scale([0.3, 0.3, 1])\n                rotate([90, 0, 0])\n                target();\n        }\n        \n        // Weight reduction holes\n        translate([0, 0, 4])\n            cube([100, 60, 8], center=true);\n    }\n    \n    // Support legs\n    for (x = [-45:90:90]) {\n        for (y = [-25:50:50]) {\n            translate([x, y, -15])\n                cube([8, 8, 30], center=true);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 70])\n    rotate([0, 0, -15])\n    rifle_body();\n\ntranslate([0, 0, 70])\n    rotate([0, 0, 15])\n    target();\n\ntranslate([0, 0, 4])\n    shelf_base();",
    "renders": true
  },
  {
    "decorative_art": "pentathlon",
    "openscad_code": "// Pentathlon Trophy Display Shelf - Realistic Style\n// A decorative shelf combining the five pentathlon symbols in furniture form\n\n$fn = 32;\n\n// Overall dimensions\nwidth = 120;\ndepth = 60;\nheight = 80;\nwall_thickness = 2;\n\nmodule base_structure() {\n    // Main platform with rounded edges\n    difference() {\n        // Main base block\n        translate([0, 0, height/2 - 5])\n            cube([width, depth, 10], center=true);\n        \n        // Rounded edges on top\n        for(x = [-width/2 + 5, width/2 - 5])\n            for(y = [-depth/2 + 5, depth/2 - 5])\n                translate([x, y, height - 5])\n                    cylinder(h=10, r=5, center=false);\n    }\n}\n\nmodule fencing_sword_support() {\n    // Central fencing sword as structural support\n    translate([0, 0, height - 5])\n        difference() {\n            // Sword blade\n            cylinder(h=30, r1=2, r2=0.5, center=false);\n            \n            // Fuller groove\n            translate([0, 0.5, 15])\n                cube([0.5, 1, 28], center=true);\n        }\n    \n    // Sword guard as shelf bracket\n    translate([0, 0, height + 20])\n        difference() {\n            // Guard plate\n            cube([25, 3, 8], center=true);\n            // Decorative cutouts\n            for(i = [-8, 0, 8])\n                translate([i, 0, 0])\n                    cylinder(h=5, r=2, center=true);\n        }\n}\n\nmodule running_track_shelf() {\n    // Oval running track as middle shelf\n    translate([0, 0, height + 15])\n        difference() {\n            // Main oval shelf\n            scale([1, 0.6, 1])\n                cylinder(h=wall_thickness, r=width/3, center=true);\n            \n            // Inner cutout\n            scale([1, 0.6, 1])\n                translate([0, 0, -1])\n                    cylinder(h=wall_thickness+2, r=width/3-10, center=true);\n            \n            // Lane markings\n            for(angle = [0:30:330])\n                rotate([0, 0, angle])\n                    translate([width/6, 0, wall_thickness/2])\n                        cube([width/12, 1, wall_thickness], center=true);\n        }\n}\n\nmodule swimming_pool_drawer() {\n    // Swimming pool as drawer compartment\n    translate([-width/3, 0, height/2])\n        difference() {\n            // Pool shape\n            cube([width/3-10, depth-10, 15], center=true);\n            \n            // Water cavity\n            translate([0, 0, 2])\n                cube([width/3-14, depth-14, 13], center=true);\n            \n            // Lane ropes\n            for(y = [-depth/4, -depth/8, 0, depth/8, depth/4])\n                translate([0, y, 7.5])\n                    cube([width/3-12, 1, 1], center=true);\n        }\n}\n\nmodule equestrian_jump_bar() {\n    // Horse jump as decorative rail\n    translate([width/4, 0, height + 25])\n        union() {\n            // Left post\n            translate([-width/8, 0, 0])\n                cube([4, 4, 15], center=true);\n            \n            // Right post\n            translate([width/8, 0, 0])\n                cube([4, 4, 15], center=true);\n            \n            // Jump bar\n            translate([0, 0, 7.5])\n                rotate([90, 0, 0])\n                    cylinder(h=width/4, r=2, center=true);\n            \n            // Decorative planks\n            for(i = [-5, 0, 5])\n                translate([i, 0, 0])\n                    cube([1, depth/2, 1], center=true);\n        }\n}\n\nmodule shooting_target_shelf() {\n    // Shooting target as top display shelf\n    translate([0, 0, height + 30])\n        difference() {\n            // Target backing\n            cylinder(h=wall_thickness, r=width/4, center=true);\n            \n            // Concentric rings\n            for(r = [width/8, width/12, width/16])\n                translate([0, 0, -1])\n                    cylinder(h=wall_thickness+2, r=r, center=true);\n            \n            // Bullseye\n            translate([0, 0, wall_thickness/2])\n                cylinder(h=wall_thickness, r=wall_thickness, center=true);\n        }\n}\n\n// Assembly\nunion() {\n    base_structure();\n    fencing_sword_support();\n    running_track_shelf();\n    swimming_pool_drawer();\n    equestrian_jump_bar();\n    shooting_target_shelf();\n}",
    "renders": true
  },
  {
    "decorative_art": "decathlon",
    "openscad_code": "// Decathlon trophy-style furniture art piece\n// Dimensions: 120mm height, 70mm width, 70mm depth\n\n// Main parameters\nbase_width = 70;\nbase_depth = 70;\nbase_height = 8;\ncolumn_height = 40;\nring_outer = 30;\nring_inner = 26;\nring_thickness = 3;\n\n// Base module with rounded edges\nmodule base() {\n    difference() {\n        // Main base block\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Rounded bottom edges (chamfer)\n        translate([0, 0, -base_height/2 - 0.1])\n            cube([base_width - 4, base_depth - 4, base_height + 0.2], center=true);\n    }\n}\n\n// Decorative column with fluting\nmodule column() {\n    // Main column body\n    cylinder(h=column_height, r=12, center=true, $fn=32);\n    \n    // Fluting details\n    for(i=[0:11]) {\n        rotate([0, 0, i * 30]) {\n            translate([11, 0, -column_height/2 + 2])\n                cube([2, 1, column_height - 4], center=true);\n        }\n    }\n}\n\n// Olympic rings module\nmodule olympic_rings() {\n    // Ring positions (Olympic colors: blue, black, red, yellow, green)\n    positions = [\n        [-22, 0, 0],      // blue\n        [0, 0, 0],        // black\n        [22, 0, 0],       // red\n        [-11, -12, 0],    // yellow\n        [11, -12, 0]      // green\n    ];\n    \n    for(pos = positions) {\n        translate(pos) {\n            // Outer ring\n            cylinder(h=ring_thickness, r=ring_outer, center=true, $fn=64);\n            \n            // Inner hole\n            translate([0, 0, -0.1])\n                cylinder(h=ring_thickness + 0.2, r=ring_inner, center=true, $fn=64);\n        }\n    }\n}\n\n// Decorative top cap\nmodule top_cap() {\n    difference() {\n        // Main cap\n        cylinder(h=8, r=35, center=true, $fn=64);\n        \n        // Groove detail\n        translate([0, 0, -2])\n            cylinder(h=4, r=30, center=true, $fn=64);\n        \n        // Center hole\n        translate([0, 0, -4.1])\n            cylinder(h=8.2, r=8, center=true, $fn=32);\n    }\n}\n\n// Supporting structure\nmodule support_structure() {\n    // Four support pillars\n    for(angle=[0, 90, 180, 270]) {\n        rotate([0, 0, angle]) {\n            translate([25, 0, 0]) {\n                // Main support\n                cylinder(h=60, r=3, center=true, $fn=16);\n                \n                // Base joint\n                translate([0, 0, -30])\n                    sphere(r=5, $fn=16);\n                \n                // Top joint\n                translate([0, 0, 30])\n                    sphere(r=5, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, -30])\n        base();\n    \n    // Central column\n    translate([0, 0, -10])\n        column();\n    \n    // Olympic rings\n    translate([0, 0, 10])\n        olympic_rings();\n    \n    // Top cap\n    translate([0, 0, 25])\n        top_cap();\n    \n    // Support structure\n    support_structure();\n}",
    "renders": true
  },
  {
    "decorative_art": "heptathlon",
    "openscad_code": "// Heptathlon-inspired trophy display stand\n// A 7-sided podium that celebrates the seven events of the heptathlon\n// Designed as a decorative furniture piece with storage compartments\n\n// Overall dimensions\nwidth = 120;\ndepth = 120;\nheight = 85;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Seven heptathlon event symbols (simplified)\nmodule eventSymbol(event, size) {\n    translate([0,0,size/2])\n    linear_extrude(height=size/4)\n    if (event == 1) circle(size/2); // 100m hurdles\n    if (event == 2) scale([0.3,1,1]) circle(size/2); // high jump\n    if (event == 3) for(i=[-1,0,1]) translate([i*size/3,0,0]) circle(size/6); // shot put\n    if (event == 4) square(size, center=true); // 200m\n    if (event == 5) rotate(45) square(size/1.5, center=true); // long jump\n    if (event == 6) circle(size/2, $fn=6); // javelin\n    if (event == 7) circle(size/3); // 800m\n}\n\n// Heptagonal base with compartments\nmodule heptagonBase(size, h) {\n    difference() {\n        // Main base shape\n        cylinder(h=h, r=size/2, $fn=7);\n        \n        // Hollow center\n        cylinder(h=h+0.1, r=size/2-wall, $fn=7);\n        \n        // Seven storage compartments\n        for(i=[0:6]) {\n            rotate([0,0,i*360/7])\n            translate([size/3, 0, -0.1])\n            cube([size/5, wall+1, h+0.2]);\n        }\n    }\n}\n\n// Decorative top with event symbols\nmodule topSurface(size) {\n    difference() {\n        // Top plate\n        cylinder(h=wall, r=size/2, $fn=7);\n        \n        // Recessed areas for symbols\n        for(i=[0:6]) {\n            rotate([0,0,i*360/7 + 360/14])\n            translate([size*0.35, 0, -0.1])\n            cylinder(h=wall+0.2, r=size/12, $fn=32);\n        }\n    }\n    \n    // Add event symbols\n    for(i=[0:6]) {\n        rotate([0,0,i*360/7 + 360/14])\n        translate([size*0.35, 0, wall-0.1])\n        eventSymbol(i+1, size/6);\n    }\n}\n\n// Support legs\nmodule legs(size) {\n    for(i=[0:6]) {\n        rotate([0,0,i*360/7])\n        translate([size*0.4, 0, 0])\n        difference() {\n            // Main leg\n            cube([wall*2, wall*2, height*0.7], center=true);\n            \n            // Decorative cutout\n            translate([0,0,height*0.35-wall])\n            cube([wall*1.5, wall*1.5, wall*2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0,0,height*0.3])\n    heptagonBase(width*0.8, height*0.7);\n    \n    // Top\n    translate([0,0,height-wall])\n    topSurface(width);\n    \n    // Legs\n    legs(width*0.8);\n    \n    // Central support pillar\n    translate([0,0,height*0.35])\n    difference() {\n        cylinder(h=height*0.3, r=width*0.15, $fn=32);\n        cylinder(h=height*0.31, r=width*0.15-wall, $fn=32);\n    }\n    \n    // Decorative ring\n    translate([0,0,height*0.6])\n    difference() {\n        cylinder(h=wall, r=width*0.42, $fn=64);\n        cylinder(h=wall+0.1, r=width*0.42-wall, $fn=64);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "weightlifting",
    "openscad_code": "// Weightlifting Bench Furniture Art Piece\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions (mm)\nbench_length = 120;\nbench_width = 30;\nbench_height = 35;\nleg_diameter = 4;\nbarbell_diameter = 3;\nbarbell_length = 100;\nweight_plate_thickness = 8;\nweight_plate_radius = 15;\n\n// Material thickness for 3D printing\nwall_thickness = 2;\n\n// Bench frame module\nmodule bench_frame() {\n    // Main bench top with rounded edges\n    difference() {\n        // Main bench top\n        translate([0, 0, bench_height/2])\n            cube([bench_length, bench_width, bench_height], center=true);\n        \n        // Hollow out the center for material saving\n        translate([0, 0, bench_height/2])\n            cube([bench_length-wall_thickness*2, bench_width-wall_thickness*2, bench_height-wall_thickness], center=true);\n    }\n    \n    // Bench legs - 4 legs with cross supports\n    for(x = [-bench_length/2 + 10, bench_length/2 - 10]) {\n        for(y = [-bench_width/2 + 5, bench_width/2 - 5]) {\n            // Vertical leg\n            translate([x, y, bench_height/2])\n                cylinder(h=bench_height, r=leg_diameter, center=true);\n            \n            // Cross support between legs\n            translate([x, y, bench_height/4])\n                rotate([90, 0, 0])\n                    cylinder(h=bench_width-10, r=leg_diameter/2, center=true);\n        }\n    }\n    \n    // Seat pad\n    translate([0, 0, bench_height + 3])\n        cube([bench_length-20, bench_width-10, 6], center=true);\n}\n\n// Barbell module\nmodule barbell() {\n    // Main bar\n    rotate([90, 0, 0])\n        translate([0, 0, 0])\n            cylinder(h=barbell_length, r=barbell_diameter, center=true);\n    \n    // Knurling pattern on bar\n    for(i = [-barbell_length/2 + 20 : 5 : barbell_length/2 - 20]) {\n        rotate([90, 0, 0])\n            translate([i, 0, 0])\n                cylinder(h=2, r=barbell_diameter+0.5, center=true);\n    }\n    \n    // Weight plates on each side\n    for(side = [-1, 1]) {\n        // Main weight plate\n        rotate([90, 0, 0])\n            translate([side * (barbell_length/2 - weight_plate_thickness/2), 0, 0])\n                cylinder(h=weight_plate_thickness, r=weight_plate_radius, center=true);\n        \n        // Plate center hole\n        rotate([90, 0, 0])\n            translate([side * (barbell_length/2 - weight_plate_thickness/2), 0, 0])\n                cylinder(h=weight_plate_thickness+1, r=barbell_diameter+1, center=true);\n        \n        // Decorative ridges on weight plate\n        for(ridge = [weight_plate_radius-3 : -3 : weight_plate_radius-9]) {\n            rotate([90, 0, 0])\n                translate([side * (barbell_length/2 - weight_plate_thickness/2), 0, 0])\n                    cylinder(h=weight_plate_thickness+0.5, r=ridge, center=true);\n        }\n    }\n    \n    // Barbell collars\n    for(side = [-1, 1]) {\n        rotate([90, 0, 0])\n            translate([side * (barbell_length/2 - weight_plate_thickness - 5), 0, 0])\n                cylinder(h=4, r=barbell_diameter+1.5, center=true);\n    }\n}\n\n// Rack supports for barbell storage\nmodule rack_supports() {\n    // Left support\n    translate([-bench_length/2 - 15, 0, bench_height + 15])\n        difference() {\n            cube([10, bench_width, 30], center=true);\n            translate([0, 0, 0])\n                cube([8, bench_width-4, 28], center=true);\n        }\n    \n    // Right support\n    translate([bench_length/2 + 15, 0, bench_height + 15])\n        difference() {\n            cube([10, bench_width, 30], center=true);\n            translate([0, 0, 0])\n                cube([8, bench_width-4, 28], center=true);\n        }\n    \n    // Support hooks\n    for(side = [-1, 1]) {\n        translate([side * (bench_length/2 + 15), 0, bench_height + 8])\n            rotate([0, 90, 0])\n                cylinder(h=8, r=3, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Position the bench\n    translate([0, 0, 0])\n        bench_frame();\n    \n    // Position the rack supports\n    rack_supports();\n    \n    // Position the barbell resting on supports\n    translate([0, 0, bench_height + 15])\n        barbell();\n}\n\n// Add decorative brand label on bench\ntranslate([0, -bench_width/2 - 1, bench_height + 3])\n    cube([20, 0.5, 4], center=true);",
    "renders": true
  },
  {
    "decorative_art": "powerlifting",
    "openscad_code": "// Powerlifting furniture: decorative barbell rack / display stand\n// 100 mm tall, 3D-printable with 2 mm walls\n\n$fn = 32; // smooth curves\n\n// overall size\nrack_w = 100;\nrack_d = 60;\nrack_h = 100;\n\n// wall thickness\nwt = 2;\n\nmodule rack_frame() {\n    // bottom base\n    translate([0, 0, 0])\n        cube([rack_w, rack_d, wt], center = true);\n\n    // top plate\n    translate([0, 0, rack_h - wt])\n        cube([rack_w, rack_d, wt], center = true);\n\n    // four corner posts\n    for (x = [-rack_w/2 + wt, rack_w/2 - wt])\n        for (y = [-rack_d/2 + wt, rack_d/2 - wt])\n            translate([x, y, rack_h/2])\n                cube([wt, wt, rack_h], center = true);\n}\n\nmodule barbell_supports() {\n    // left cradle\n    translate([-rack_w/2 + 10, 0, rack_h - 15])\n        difference() {\n            cube([20, rack_d/2, 20], center = true);\n            // curved cradle cutout\n            translate([0, 0, 5])\n                rotate([90, 0, 0])\n                    cylinder(h = rack_d/2 + 1, r = 10, center = true);\n        }\n\n    // right cradle (mirror)\n    mirror([1, 0, 0])\n        translate([-rack_w/2 + 10, 0, rack_h - 15])\n            difference() {\n                cube([20, rack_d/2, 20], center = true);\n                translate([0, 0, 5])\n                    rotate([90, 0, 0])\n                        cylinder(h = rack_d/2 + 1, r = 10, center = true);\n            }\n}\n\nmodule decorative_plates() {\n    // small weight plates on sides\n    for (x = [-rack_w/2 + 25, rack_w/2 - 25])\n        translate([x, 0, rack_h/2])\n            for (i = [0:1]) {\n                // plate body\n                translate([0, 0, i * 8])\n                    difference() {\n                        cylinder(h = 6, r = 12);\n                        // center hole\n                        cylinder(h = 7, r = 4);\n                    }\n                // raised rim\n                translate([0, 0, i * 8 + 0.5])\n                    cylinder(h = 1, r = 11);\n            }\n}\n\nmodule decorative_bolts() {\n    // bolt heads on corners\n    for (x = [-rack_w/2 + wt, rack_w/2 - wt])\n        for (y = [-rack_d/2 + wt, rack_d/2 - wt])\n            translate([x, y, rack_h - 10])\n                rotate([90, 0, 0])\n                    cylinder(h = 6, r = 3, $fn = 6);\n}\n\nunion() {\n    rack_frame();\n    barbell_supports();\n    decorative_plates();\n    decorative_bolts();\n}",
    "renders": true
  },
  {
    "decorative_art": "bodybuilding",
    "openscad_code": "// Bodybuilding Dumbbell Storage Rack (realistic style, medium complexity)\n// Dimensions: 120mm x 60mm x 80mm\n\n$fn = 32;  // Smooth curves\n\nmodule rounded_cube(size, radius) {\n    // Create a cube with rounded edges\n    hull() {\n        translate([radius, radius, radius]) sphere(r=radius);\n        translate([size.x-radius, radius, radius]) sphere(r=radius);\n        translate([radius, size.y-radius, radius]) sphere(r=radius);\n        translate([size.x-radius, size.y-radius, radius]) sphere(r=radius);\n        translate([radius, radius, size.z-radius]) sphere(r=radius);\n        translate([size.x-radius, radius, size.z-radius]) sphere(r=radius);\n        translate([radius, size.y-radius, size.z-radius]) sphere(r=radius);\n        translate([size.x-radius, size.y-radius, size.z-radius]) sphere(r=radius);\n    }\n}\n\nmodule rack_base() {\n    // Main base platform with rounded edges\n    difference() {\n        rounded_cube([120, 60, 8], 4);\n        // Screw holes for mounting\n        for(x = [15, 105]) {\n            for(y = [15, 45]) {\n                translate([x, y, -1]) cylinder(h=10, r=2.5);\n            }\n        }\n    }\n}\n\nmodule support_post(x_pos) {\n    // Vertical support post with reinforcement\n    union() {\n        // Main post\n        translate([x_pos, 30, 8]) \n            rounded_cube([6, 6, 70], 2);\n        \n        // Reinforcement gussets\n        for(angle = [0, 90, 180, 270]) {\n            rotate([0, 0, angle])\n            translate([x_pos + 3, 30, 8])\n            polyhedron(\n                points=[[0,0,0], [8,0,0], [8,0,20], [0,0,20]],\n                faces=[[0,1,2,3]]\n            );\n        }\n    }\n}\n\nmodule dumbbell_rest() {\n    // Curved rest for dumbbell handle\n    difference() {\n        // Main curved support\n        translate([0, 0, 78])\n        union() {\n            rounded_cube([20, 50, 6], 3);\n            translate([10, 25, 0])\n            cylinder(h=6, r=20);\n        }\n        \n        // Cutout for handle\n        translate([10, 25, 75])\n        rotate([90, 0, 0])\n        cylinder(h=50, r=12);\n        \n        // Drainage holes\n        for(x = [5, 15]) {\n            for(y = [15, 35]) {\n                translate([x, y, 75]) cylinder(h=10, r=1.5);\n            }\n        }\n    }\n}\n\nmodule decorative_plate() {\n    // Bodybuilding-themed decorative plate\n    difference() {\n        // Main plate\n        translate([60, 30, 76])\n        rounded_cube([30, 20, 3], 2);\n        \n        // Barbell groove\n        translate([60, 30, 74])\n        rotate([90, 0, 0])\n        cylinder(h=35, r=2);\n        \n        // Weight plate details\n        for(i = [1:3]) {\n            translate([60, 30, 77])\n            rotate([0, 0, i*30])\n            translate([10, 0, 0])\n            cube([1, 1, 2]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    rack_base();\n    \n    // Support posts\n    support_post(10);\n    support_post(110);\n    \n    // Dumbbell rests\n    translate([0, 0, 0]) dumbbell_rest();\n    translate([100, 0, 0]) mirror([1, 0, 0]) dumbbell_rest();\n    \n    // Decorative elements\n    decorative_plate();\n    \n    // Rubber feet\n    for(x = [10, 110]) {\n        for(y = [10, 50]) {\n            translate([x, y, -2])\n            cylinder(h=2, r=3);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "crossfit",
    "openscad_code": "// Crossfit Plyo Box – 3D-printable decorative furniture art piece\n// Overall footprint ≈ 80 × 60 × 50 mm for a single print\n\n$fn = 32;            // smooth cylinders\nwall = 2;            // printable wall thickness\nscrew_r = 1.6;       // decorative “bolt” radius\n\nmodule bolt() {\n    // simple screw head + shaft for visual joints\n    union() {\n        cylinder(h = 1.4, r = screw_r + 0.4);\n        translate([0,0,1.4])\n            cylinder(h = 4, r = screw_r);\n    }\n}\n\nmodule side_plank(w, h, d) {\n    difference() {\n        // solid plank\n        cube([w, h, d]);\n\n        // hollow inside to reduce weight & ensure 2 mm walls\n        translate([wall, wall, wall])\n            cube([w - 2*wall, h - 2*wall, d - wall]);\n        \n        // edge chamfer for realism\n        translate([w - 2, -0.1, -0.1])\n            cube([2.2, h + 0.2, d + 0.2]);\n\n        // bolt holes pattern (two per long side)\n        for (z = [d/3, 2*d/3])\n            translate([w/2, h/2, z])\n                rotate([90,0,0])\n                    cylinder(h = h + 0.2, r = screw_r + 0.2, $fn = 16);\n    }\n}\n\nmodule plyo_box() {\n    // outer dimensions\n    x = 80; y = 60; z = 50;\n\n    // bottom plate\n    translate([0,0,0])\n        side_plank(x, y, wall);\n\n    // top plate\n    translate([0,0,z - wall])\n        side_plank(x, y, wall);\n\n    // four vertical posts\n    for (px = [0, x - wall])\n        for (py = [0, y - wall])\n            translate([px, py, wall])\n                cube([wall, wall, z - 2*wall]);\n\n    // left & right side panels\n    translate([0, wall, wall])\n        side_plank(wall, y - 2*wall, z - 2*wall);\n    translate([x - wall, wall, wall])\n        side_plank(wall, y - 2*wall, z - 2*wall);\n\n    // front & back panels (with cut-outs for handles)\n    difference() {\n        translate([wall, 0, wall])\n            side_plank(x - 2*wall, wall, z - 2*wall);\n        // handle holes\n        for (hx = [x/3, 2*x/3])\n            translate([hx, -0.1, z/2])\n                rotate([0,90,0])\n                    cylinder(h = wall + 0.2, r = 6, $fn = 32);\n    }\n    translate([wall, y - wall, wall])\n        side_plank(x - 2*wall, wall, z - 2*wall);\n\n    // decorative corner bolts\n    for (px = [wall/2, x - wall/2])\n        for (py = [wall/2, y - wall/2])\n            for (pz = [wall/2, z - wall/2])\n                translate([px, py, pz])\n                    bolt();\n}\n\nplyo_box();",
    "renders": true
  },
  {
    "decorative_art": "pilates",
    "openscad_code": "// Pilates \"Wunda Chair\" – miniature decorative model\n// Overall printable size ≈ 70 mm tall\n\n$fa = 2; $fs = 0.5;\n\n// GLOBAL PARAMETERS\nwall = 2;          // printable wall thickness\nscale_factor = 0.28; // brings real proportions to ~70 mm height\n\n// MAIN BODY -------------------------------------------------------------\nmodule chair_body() {\n    // outer shell\n    difference() {\n        cube([60,40,50], center=true);\n        translate([0,0,1])\n            cube([60-wall*2, 40-wall*2, 48], center=true);\n    }\n}\n\n// PEDAL -----------------------------------------------------------------\nmodule pedal() {\n    difference() {\n        // pedal plate\n        translate([0,0,25])\n            cube([38,18,4], center=true);\n        // finger hole\n        translate([0,-4,27])\n            cylinder(h=6, d=10, center=true);\n    }\n    // side brackets\n    for(side=[-1,1])\n        translate([side*17,0,27])\n            rotate([90,0,0])\n                cylinder(h=10, d=4, center=true);\n}\n\n// SPRINGS (simplified rods) --------------------------------------------\nmodule springs() {\n    for(side=[-1,1])\n        translate([side*10,0,15])\n            cylinder(h=20, d=2, center=true);\n}\n\n// LEGS ------------------------------------------------------------------\nmodule legs() {\n    for(x=[-25,25])\n        for(y=[-15,15])\n            translate([x,y,-5])\n                cylinder(h=10, d=6, center=true);\n}\n\n// HANDLEBAR (removable) -------------------------------------------------\nmodule handlebar() {\n    // vertical posts\n    for(side=[-1,1])\n        translate([side*22,0,30])\n            cylinder(h=40, d=6, center=true);\n    // horizontal bar\n    translate([0,0,50])\n        rotate([90,0,0])\n            cylinder(h=44, d=5, center=true);\n}\n\n// ASSEMBLY --------------------------------------------------------------\nscale([scale_factor,scale_factor,scale_factor])\nunion() {\n    chair_body();\n    pedal();\n    springs();\n    legs();\n    handlebar();\n}",
    "renders": true
  },
  {
    "decorative_art": "yoga",
    "openscad_code": "// Yoga Block Prop – Medium complexity, 3D-printable, 2 mm wall thickness\n// Overall size: 75 mm × 120 mm × 45 mm (standard yoga-block proportions scaled for desk ornament)\n\n$fn = 36;\n\n// Main block body\nmodule block_body() {\n    difference() {\n        // Outer rounded shell (2 mm thick walls after hollowing)\n        minkowski() {\n            cube([71, 116, 41], center = true);\n            sphere(d = 2);\n        }\n        // Hollow interior\n        translate([0, 0, -1])\n            cube([67, 112, 43], center = true); // larger Z so bottom stays open\n    }\n}\n\n// Decorative concentric-circle grip pattern on one face\nmodule grip_pattern() {\n    for (r = [30, 25, 20, 15, 10]) {\n        translate([0, 0, 22.6]) // slightly proud of surface\n        linear_extrude(height = 1.2)\n            offset(delta = -1) // 2 mm wide rings\n                circle(r = r);\n    }\n}\n\n// Chamfered alignment/registration pegs (for stacking multiples)\nmodule peg(pos = [0, 0, 0]) {\n    translate(pos)\n    rotate([0, 180, 0])\n    cylinder(h = 4, r1 = 4, r2 = 2.5, $fn = 16);\n}\n\n// Corresponding sockets\nmodule socket(pos = [0, 0, 0]) {\n    translate(pos)\n    rotate([0, 0, 0])\n    cylinder(h = 4.2, r1 = 4.2, r2 = 2.7, $fn = 16);\n}\n\n// Assembly\nunion() {\n    // Main block\n    block_body();\n    \n    // Grip pattern centered on the 75×120 face\n    grip_pattern();\n    \n    // Four pegs on top face corners\n    for (x = [-28, 28])\n        for (y = [-48, 48])\n            peg([x, y, 22.5]);\n    \n    // Four sockets on bottom face corners\n    for (x = [-28, 28])\n        for (y = [-48, 48])\n            translate([0, 0, -22.5])\n                socket([x, y, 0]);\n}",
    "renders": true
  },
  {
    "decorative_art": "zumba",
    "openscad_code": "// Zumba Furniture Decorative Piece - Realistic Style\n// Medium complexity decorative art furniture element\n// 3D printable with 2mm wall thickness\n\n$fn = 32;\n\nmodule zumba_frame() {\n    // Main structural frame - 100mm height\n    difference() {\n        // Outer frame structure\n        cube([80, 80, 100], center = true);\n        \n        // Hollow center - 2mm wall thickness\n        translate([0, 0, 2])\n            cube([76, 76, 98], center = true);\n    }\n}\n\nmodule zumba_curves() {\n    // Decorative curved elements on sides\n    for (i = [-1, 1]) {\n        translate([i * 35, 0, 0]) {\n            rotate([0, 90, 0])\n                cylinder(h = 70, r1 = 30, r2 = 35);\n        }\n    }\n}\n\nmodule zumba_supports() {\n    // Structural support columns at corners\n    for (x = [-35, 35])\n        for (y = [-35, 35])\n            translate([x, y, -50])\n                cylinder(h = 100, r = 5);\n}\n\nmodule zumba_top_detail() {\n    // Decorative top crown element\n    translate([0, 0, 52]) {\n        difference() {\n            cylinder(h = 8, r = 45);\n            cylinder(h = 10, r = 40);\n        }\n        \n        // Decorative beads around top\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([42, 0, 4])\n                    sphere(r = 3);\n        }\n    }\n}\n\nmodule zumba_base() {\n    // Sturdy base with decorative feet\n    difference() {\n        cube([90, 90, 10], center = true);\n        translate([0, 0, 2])\n            cube([86, 86, 10], center = true);\n    }\n    \n    // Decorative feet\n    for (x = [-35, 35])\n        for (y = [-35, 35])\n            translate([x, y, -7])\n                cylinder(h = 7, r = 6);\n}\n\nmodule zumba_inner_pattern() {\n    // Geometric pattern on front and back faces\n    for (x = [-25:25:25])\n        for (z = [-35:25:35])\n            translate([x, 40.5, z])\n                cube([18, 2, 18], center = true);\n}\n\nmodule zumba_side_accent() {\n    // Decorative side panels with cutouts\n    difference() {\n        translate([0, 40, 0])\n            cube([60, 2, 80], center = true);\n        \n        // Circular cutouts\n        for (i = [-1, 0, 1])\n            translate([i * 20, 41, 0])\n                cylinder(h = 5, r = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    zumba_base();\n    zumba_frame();\n    zumba_supports();\n    zumba_curves();\n    zumba_top_detail();\n    \n    // Add patterns to front and back\n    zumba_inner_pattern();\n    mirror([0, 1, 0])\n        zumba_inner_pattern();\n    \n    // Side accents\n    zumba_side_accent();\n    mirror([1, 0, 0])\n        zumba_side_accent();\n}",
    "renders": true
  },
  {
    "decorative_art": "aerobics",
    "openscad_code": "// Aerobic Step Bench - Realistic Style\n// Overall size: 110mm x 270mm x 140mm (printable)\n\n// Main platform dimensions\nplatform_w = 110;\nplatform_l = 270;\nplatform_h = 8;\n\n// Leg dimensions\nleg_w = 95;\nleg_l = 25;\nleg_h = 130;\n\n// Support ribs\nrib_w = 4;\nrib_spacing = 25;\n\n// Non-slip pattern\npattern_radius = 4;\npattern_spacing = 15;\n\n// Wall thickness\nwall = 2;\n\n// Main platform with rounded edges\nmodule platform() {\n    difference() {\n        // Main solid block\n        translate([-platform_w/2, -platform_l/2, 0])\n            cube([platform_w, platform_l, platform_h]);\n        \n        // Rounded top edges\n        translate([platform_w/2, -platform_l/2-1, platform_h-1])\n            rotate([0,90,0])\n                cylinder(h=platform_w+2, r=1, $fn=16);\n        translate([-platform_w/2-1, platform_l/2, platform_h-1])\n            rotate([90,0,0])\n                cylinder(h=platform_l+2, r=1, $fn=16);\n    }\n    \n    // Non-slip surface pattern\n    for(x = [-platform_w/2+10 : pattern_spacing : platform_w/2-10]) {\n        for(y = [-platform_l/2+10 : pattern_spacing : platform_l/2-10]) {\n            translate([x, y, platform_h])\n                cylinder(h=0.5, r=pattern_radius, $fn=16);\n        }\n    }\n}\n\n// Single leg assembly\nmodule leg() {\n    difference() {\n        // Main leg block\n        cube([leg_w, leg_l, leg_h]);\n        \n        // Hollow inside for weight reduction\n        translate([wall, wall, wall])\n            cube([leg_w-2*wall, leg_l-2*wall, leg_h-wall]);\n        \n        // Bottom chamfers\n        translate([0, 0, wall])\n            cube([wall, leg_l, leg_h-wall]);\n        translate([leg_w-wall, 0, wall])\n            cube([wall, leg_l, leg_h-wall]);\n    }\n    \n    // Support ribs inside leg\n    for(i = [1 : 4]) {\n        translate([i*leg_w/5, wall, wall])\n            cube([rib_w, leg_l-2*wall, leg_h-2*wall]);\n    }\n}\n\n// Leg connector beams\nmodule connector() {\n    translate([0, -platform_l/2+leg_l/2, leg_h/2])\n        rotate([90,0,0])\n            cylinder(h=platform_l-leg_l, r=2, $fn=16);\n    translate([0, platform_l/2-leg_l/2, leg_h/2])\n        rotate([90,0,0])\n            cylinder(h=platform_l-leg_l, r=2, $fn=16);\n}\n\n// Assembly\ntranslate([0, 0, leg_h])\n    platform();\n\ntranslate([0, -platform_l/2+leg_l/2, 0])\n    leg();\n\ntranslate([0, platform_l/2-leg_l/2, 0])\n    leg();\n\nconnector();\n\n// Grip handles\ntranslate([0, -platform_l/2+leg_l/2, leg_h+platform_h/2])\n    rotate([90,0,0])\n        difference() {\n            cylinder(h=leg_w-20, r=4, $fn=16);\n            translate([0, 0, -1])\n                cylinder(h=leg_w-18, r=2.5, $fn=16);\n        }\n\ntranslate([0, platform_l/2-leg_l/2, leg_h+platform_h/2])\n    rotate([90,0,0])\n        difference() {\n            cylinder(h=leg_w-20, r=4, $fn=16);\n            translate([0, 0, -1])\n                cylinder(h=leg_w-18, r=2.5, $fn=16);\n        }",
    "renders": true
  },
  {
    "decorative_art": "astra",
    "openscad_code": "// Astra-inspired decorative side table (realistic style, medium complexity)\n// Dimensions: ~80mm tall, 100mm diameter tabletop\n\n// Parameters\ntable_height = 80;\ntabletop_diameter = 100;\ntabletop_thickness = 4;\nleg_thickness = 6;\nbase_height = 15;\nstar_detail_height = 3;\nwall_thickness = 2;\n\n// Main module\nmodule astra_table() {\n    union() {\n        // Tabletop with star-shaped edge detail\n        tabletop();\n        \n        // Central support column with decorative rings\n        support_column();\n        \n        // Five-pointed star base\n        star_base();\n        \n        // Decorative star inlays on tabletop\n        tabletop_stars();\n    }\n}\n\n// Tabletop with beveled edge and star pattern border\nmodule tabletop() {\n    difference() {\n        // Main tabletop disk\n        cylinder(h=tabletop_thickness, d=tabletop_diameter, $fn=64);\n        \n        // Beveled edge\n        translate([0, 0, -0.1])\n            cylinder(h=tabletop_thickness+0.2, d1=tabletop_diameter-6, d2=tabletop_diameter-4, $fn=64);\n        \n        // Center hole for support column\n        translate([0, 0, -0.1])\n            cylinder(h=tabletop_thickness+0.2, d=leg_thickness+4, $fn=32);\n    }\n    \n    // Raised star border\n    for(i=[0:35]) {\n        rotate([0, 0, i*10])\n            translate([tabletop_diameter/2-3, 0, tabletop_thickness-star_detail_height])\n                scale([0.5, 0.5, 1])\n                    star(2.5, star_detail_height);\n    }\n}\n\n// Central support column with decorative rings\nmodule support_column() {\n    // Main column\n    cylinder(h=table_height-base_height-tabletop_thickness, d=leg_thickness, $fn=32);\n    \n    // Decorative rings\n    for(h=[10:15:table_height-base_height-tabletop_thickness-10]) {\n        translate([0, 0, h])\n            cylinder(h=2, d=leg_thickness+4, $fn=32);\n    }\n}\n\n// Five-pointed star base\nmodule star_base() {\n    // Base cylinder\n    cylinder(h=base_height, d=tabletop_diameter*0.8, $fn=64);\n    \n    // Star arms extending from center\n    for(i=[0:4]) {\n        rotate([0, 0, i*72])\n            translate([0, 0, base_height/2])\n                rotate([90, 0, 0])\n                    star(tabletop_diameter*0.3, base_height-2);\n    }\n    \n    // Center support for column\n    translate([0, 0, base_height-2])\n        cylinder(h=2, d=leg_thickness+4, $fn=32);\n}\n\n// Star helper module\nmodule star(size, height) {\n    linear_extrude(height=height, convexity=10) {\n        union() {\n            for(i=[0:4]) {\n                rotate([0, 0, i*72+36])\n                    translate([size, 0, 0])\n                        square([size, size/3], center=true);\n            }\n            circle(d=size/2, $fn=16);\n        }\n    }\n}\n\n// Small decorative stars on tabletop surface\nmodule tabletop_stars() {\n    for(r=[20:20:tabletop_diameter/2-15]) {\n        for(a=[0:30:359]) {\n            rotate([0, 0, a])\n                translate([r, 0, tabletop_thickness])\n                    scale([0.3, 0.3, 1])\n                        star(4, 1);\n        }\n    }\n}\n\n// Generate the table\nastra_table();",
    "renders": true
  },
  {
    "decorative_art": "bolt",
    "openscad_code": "// Bolt-shaped decorative furniture element\n// A stylized bolt designed as a furniture leg or accent piece\n// 3D printable with no severe overhangs\n\n// Main parameters\nbolt_height = 120;\nbolt_diameter = 20;\nhead_diameter = 35;\nhead_height = 12;\nthread_length = 80;\nnut_height = 10;\nnut_diameter = 30;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main bolt body\nmodule bolt_body() {\n    // Thread section - using stacked cylinders to create thread illusion\n    union() {\n        // Smooth shaft above threads\n        translate([0, 0, head_height]) {\n            cylinder(h=bolt_height - thread_length - head_height, d=bolt_diameter, $fn=32);\n        }\n        \n        // Thread section\n        for(i = [0:3:thread_length]) {\n            translate([0, 0, head_height + bolt_height - thread_length + i]) {\n                cylinder(h=3, d1=bolt_diameter + 2, d2=bolt_diameter, $fn=32);\n            }\n        }\n    }\n}\n\n// Bolt head (hexagonal)\nmodule bolt_head() {\n    // Outer hex shape\n    cylinder(h=head_height, d=head_diameter, $fn=6);\n    \n    // Inner decorative pattern\n    translate([0, 0, -0.1]) {\n        cylinder(h=head_height + 0.2, d=head_diameter - wall*2, $fn=6);\n    }\n    \n    // Add 6 decorative indentations\n    for(i = [0:60:359]) {\n        rotate([0, 0, i]) {\n            translate([head_diameter/2 - 3, 0, head_height/2]) {\n                rotate([0, 90, 0]) {\n                    cylinder(h=6, d=3, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Decorative nut\nmodule decorative_nut() {\n    // Main nut body\n    cylinder(h=nut_height, d=nut_diameter, $fn=6);\n    \n    // Inner hole\n    translate([0, 0, -0.1]) {\n        cylinder(h=nut_height + 0.2, d=bolt_diameter + 2, $fn=32);\n    }\n    \n    // Decorative ridges\n    for(i = [0:30:359]) {\n        rotate([0, 0, i]) {\n            translate([nut_diameter/2 - 1.5, 0, nut_height/2]) {\n                cube([3, 1, nut_height], center=true);\n            }\n        }\n    }\n}\n\n// Base plate for furniture mounting\nmodule mounting_base() {\n    // Circular base\n    translate([0, 0, -5]) {\n        cylinder(h=5, d=head_diameter + 10, $fn=32);\n    }\n    \n    // Mounting holes\n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle]) {\n            translate([head_diameter/2 + 3, 0, -2.5]) {\n                cylinder(h=7, d=4, $fn=16);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Mounting base\n    mounting_base();\n    \n    // Bolt head\n    translate([0, 0, 0]) {\n        bolt_head();\n    }\n    \n    // Bolt body\n    translate([0, 0, 0]) {\n        bolt_body();\n    }\n    \n    // Decorative nut near bottom\n    translate([0, 0, head_height + bolt_height - thread_length + 10]) {\n        decorative_nut();\n    }\n    \n    // Additional decorative nut at top of threads\n    translate([0, 0, head_height + bolt_height - thread_length + 40]) {\n        decorative_nut();\n    }\n}\n\n// Add subtle chamfers for printability\ntranslate([0, 0, bolt_height + head_height - 0.5]) {\n    cylinder(h=1, d1=bolt_diameter, d2=bolt_diameter + 1, $fn=32);\n}\n\ntranslate([0, 0, -0.5]) {\n    cylinder(h=1, d1=head_diameter + 10, d2=head_diameter + 11, $fn=32);\n}",
    "renders": true
  },
  {
    "decorative_art": "cascade",
    "openscad_code": "// Cascade Bookshelf - Decorative Miniature Furniture\n// Realistic style medium complexity OpenSCAD model\n// Dimensions: 100mm width x 80mm height x 60mm depth\n// Wall thickness: 2mm throughout for 3D printing\n\nmodule cascade_shelf() {\n    // Main frame structure\n    difference() {\n        // Outer frame box\n        cube([100, 80, 60], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 1])\n            cube([96, 76, 58], center=true);\n    }\n    \n    // Cascade shelves - 5 levels with decreasing depth\n    for (i = [0:4]) {\n        translate([0, -35 + (i * 15), 25 - (i * 10)])\n            rotate([0, 10 - (i * 5), 0])\n            difference() {\n                // Shelf platform\n                cube([90, 2, 50 - (i * 8)], center=true);\n                \n                // Cutout pattern on front edge\n                for (j = [-40:10:40]) {\n                    translate([j, 1, 20 - (i * 4)])\n                        cylinder(h=3, r=2);\n                }\n            }\n    }\n    \n    // Vertical support beams\n    module support_beam(x_pos) {\n        translate([x_pos, 0, 0])\n            difference() {\n                cube([4, 78, 58], center=true);\n                // Decorative groove\n                translate([0, 0, 0])\n                    cube([2, 76, 2], center=true);\n            }\n    }\n    \n    support_beam(-45);\n    support_beam(45);\n    \n    // Back panel with cascade cutout pattern\n    translate([0, 39, 0])\n        difference() {\n            cube([96, 2, 58], center=true);\n            \n            // Cascade wave pattern\n            for (wave = [0:3]) {\n                translate([-45 + wave * 30, 0, 0])\n                    rotate([0, 0, wave * 15])\n                    cube([20, 3, 30 - wave * 5], center=true);\n            }\n        }\n    \n    // Base decorative feet\n    module foot(x_pos, z_pos) {\n        translate([x_pos, -38, z_pos])\n            difference() {\n                cylinder(h=5, r=3);\n                translate([0, 0, -1])\n                    cylinder(h=7, r=1.5);\n            }\n    }\n    \n    foot(-42, -27);\n    foot(42, -27);\n    foot(-42, 27);\n    foot(42, 27);\n    \n    // Side decorative panels\n    module side_panel(side) {\n        translate([side * 49, 0, 0])\n            rotate([0, 90, 0])\n            difference() {\n                cube([58, 2, 78], center=true);\n                \n                // Geometric cutout pattern\n                for (row = [-30:15:30]) {\n                    for (col = [-20:10:20]) {\n                        translate([row, 0, col])\n                            cube([8, 3, 6], center=true);\n                    }\n                }\n            }\n    }\n    \n    side_panel(1);\n    side_panel(-1);\n}\n\n// Render the cascade shelf\ncascade_shelf();",
    "renders": true
  },
  {
    "decorative_art": "drift",
    "openscad_code": "// Drift-Inspired Lounge Chair (Medium Complexity)\n// A sculptural seat that evokes ocean-tossed driftwood\n\nwall_th = 2;      // 2 mm shell thickness\nscale_fac = 0.8;  // Overall shrink to keep within 150 mm\n\n// Main hull-shaped seat shell\nmodule seat_shell() {\n    difference() {\n        // Outer smooth hull\n        scale([1, 0.6, 0.35]) \n            sphere(d=140 * scale_fac, $fn=60);\n        \n        // Carve out seating cavity\n        translate([0, -20 * scale_fac, 10 * scale_fac])\n            scale([0.75, 0.9, 0.8])\n                sphere(d=110 * scale_fac, $fn=50);\n        \n        // Flat bottom cut\n        translate([0,0,-20 * scale_fac])\n            cube([200 * scale_fac, 200 * scale_fac, 40 * scale_fac], center=true);\n    }\n}\n\n// Driftwood-textured backrest spars\nmodule back_spar(x_offset, angle) {\n    translate([x_offset * scale_fac, -38 * scale_fac, 30 * scale_fac])\n    rotate([0, angle, 0]) {\n        // Main branch\n        cylinder(h=80 * scale_fac, d=10 * scale_fac, $fn=8);\n        \n        // Knot detail\n        translate([0,0,35 * scale_fac])\n            sphere(d=14 * scale_fac, $fn=10);\n        \n        // Secondary twig\n        translate([0,0,25 * scale_fac])\n        rotate([0, 20, 0])\n            cylinder(h=30 * scale_fac, d=6 * scale_fac, $fn=6);\n    }\n}\n\n// Reinforced leg frame\nmodule leg() {\n    // Diagonal brace\n    translate([0, 0, -5 * scale_fac])\n    rotate([0, 0, -30])\n        cube([wall_th, 50 * scale_fac, 20 * scale_fac]);\n    \n    // Vertical post\n    translate([0, -25 * scale_fac, -15 * scale_fac])\n        cube([wall_th, wall_th, 35 * scale_fac]);\n}\n\n// Curved front edge lip for comfort\nmodule front_lip() {\n    difference() {\n        // Outer lip\n        translate([0, 40 * scale_fac, 0])\n            scale([1, 0.2, 0.15])\n                sphere(d=140 * scale_fac, $fn=50);\n        \n        // Remove inside\n        translate([0, 40 * scale_fac, 5 * scale_fac])\n            scale([0.9, 0.25, 0.15])\n                sphere(d=130 * scale_fac, $fn=50);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat shell\n    seat_shell();\n    \n    // Front comfort lip\n    front_lip();\n    \n    // Four back spars\n    for (i = [-1, 1])\n        back_spar(i * 20, i * -15);\n    for (i = [-1, 1])\n        back_spar(i * 45, i * -25);\n    \n    // Four legs\n    translate([-45 * scale_fac, 20 * scale_fac, 0]) leg();\n    translate([45 * scale_fac, 20 * scale_fac, 0]) mirror([1,0,0]) leg();\n    translate([-45 * scale_fac, -20 * scale_fac, 0]) leg();\n    translate([45 * scale_fac, -20 * scale_fac, 0]) mirror([1,0,0]) leg();\n}",
    "renders": true
  },
  {
    "decorative_art": "ember",
    "openscad_code": "// OpenSCAD code for a realistic \"Ember Coffee Table\" decorative piece\n// Inspired by glowing ember aesthetics with functional furniture structure\n\n// Overall dimensions (mm)\ntable_length = 120;\ntable_width = 80;\ntable_height = 45;\nwall_thickness = 2;\n\n// Ember core parameters\nember_radius = 15;\nember_segments = 32;\n\n// Table frame\nmodule table_frame() {\n    // Main rectangular frame\n    difference() {\n        cube([table_length, table_width, table_height], center=true);\n        translate([0, 0, wall_thickness/2])\n            cube([table_length-2*wall_thickness, table_width-2*wall_thickness, table_height-wall_thickness], center=true);\n    }\n    \n    // Corner supports (4 legs integrated into frame)\n    for (x = [-table_length/2+5, table_length/2-5])\n        for (y = [-table_width/2+5, table_width/2-5])\n            translate([x, y, -table_height/2+5])\n                cylinder(h=10, r=5, $fn=16);\n}\n\n// Ember cluster module\nmodule ember_cluster(x_pos, y_pos, z_pos, scale_factor) {\n    translate([x_pos, y_pos, z_pos]) {\n        scale([scale_factor, scale_factor, scale_factor]) {\n            // Central ember\n            sphere(r=ember_radius, $fn=ember_segments);\n            \n            // Smaller ember fragments around\n            for (i = [0:5]) {\n                rotate([0, 0, i*60])\n                    translate([ember_radius*0.7, 0, 0])\n                        sphere(r=ember_radius*0.4, $fn=ember_segments);\n            }\n            \n            // Top ember layer\n            translate([0, 0, ember_radius*0.8])\n                sphere(r=ember_radius*0.6, $fn=ember_segments);\n        }\n    }\n}\n\n// Ember support structure (metal mesh-like)\nmodule ember_support() {\n    // Base platform\n    translate([0, 0, -table_height/2+2])\n        cube([table_length-20, table_width-20, 4], center=true);\n    \n    // Grid pattern\n    for (i = [-2:2])\n        translate([i*15, 0, -table_height/2+4])\n            cube([3, table_width-20, 6], center=true);\n    \n    for (j = [-1:1])\n        translate([0, j*15, -table_height/2+4])\n            cube([table_length-20, 3, 6], center=true);\n}\n\n// Decorative side panels with ember-inspired cutouts\nmodule decorative_panels() {\n    // Long side panels\n    for (side = [-1, 1]) {\n        translate([0, side*(table_width/2-wall_thickness/2), 0]) {\n            difference() {\n                cube([table_length-10, wall_thickness, table_height-10], center=true);\n                // Ember-shaped cutouts\n                for (i = [-1:1]) {\n                    translate([i*25, 0, 0])\n                        rotate([90, 0, 0])\n                            cylinder(h=wall_thickness+1, r=8, $fn=6);\n                }\n            }\n        }\n    }\n    \n    // Short side panels\n    for (side = [-1, 1]) {\n        translate([side*(table_length/2-wall_thickness/2), 0, 0]) {\n            rotate([0, 0, 90]) {\n                difference() {\n                    cube([table_width-10, wall_thickness, table_height-10], center=true);\n                    // Smaller cutouts\n                    translate([0, 0, 10])\n                        rotate([90, 0, 0])\n                            cylinder(h=wall_thickness+1, r=5, $fn=8);\n                    translate([0, 0, -10])\n                        rotate([90, 0, 0])\n                            cylinder(h=wall_thickness+1, r=5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main table structure\n    table_frame();\n    \n    // Ember support\n    ember_support();\n    \n    // Decorative panels\n    decorative_panels();\n    \n    // Ember clusters (3 main groups)\n    ember_cluster(-30, 0, -table_height/2+10, 1);\n    ember_cluster(0, 20, -table_height/2+8, 0.8);\n    ember_cluster(30, -15, -table_height/2+12, 0.9);\n}",
    "renders": true
  },
  {
    "decorative_art": "flicker",
    "openscad_code": "// Flicker - Decorative Art Furniture Piece\n// A stylized flame-shaped decorative side table with geometric patterns\n\n// Overall dimensions for 3D printing\nlength = 80;\nwidth = 60;\nheight = 120;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Base platform\ndifference() {\n    // Main base\n    translate([0, 0, height/8]) {\n        cube([length*0.8, width*0.8, height/6], center=true);\n    }\n    \n    // Hollow out base\n    translate([0, 0, height/8 + wall]) {\n        cube([length*0.8 - wall*2, width*0.8 - wall*2, height/6], center=true);\n    }\n}\n\n// Flame body - main structure\nmodule flame_body() {\n    // Create tapered flame shape with layers\n    for (i = [0:10:90]) {\n        scale_factor = 1 - (i/100) * 0.7;\n        translate([0, 0, height/6 + i]) {\n            scale([scale_factor, scale_factor * 0.8, 1]) {\n                difference() {\n                    // Outer flame shape\n                    cylinder(h=10, r1=length/2 * (1-i/100), r2=length/2 * (1-(i+10)/100), center=true);\n                    \n                    // Inner hollow\n                    cylinder(h=12, r1=length/2 * (1-i/100) - wall, r2=length/2 * (1-(i+10)/100) - wall, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Generate main flame\nflame_body();\n\n// Decorative rings around flame\nmodule decorative_ring(height_pos, size) {\n    translate([0, 0, height/6 + height_pos]) {\n        difference() {\n            cylinder(h=3, r=length/2 * size, center=true);\n            cylinder(h=4, r=length/2 * size - wall, center=true);\n        }\n    }\n}\n\n// Add decorative rings\nfor (i = [20:25:90]) {\n    decorative_ring(i, 0.85 - (i/300));\n}\n\n// Support struts between rings\nmodule support_strut(angle) {\n    rotate([0, 0, angle]) {\n        translate([length/4, 0, height/3]) {\n            rotate([90, 0, 0]) {\n                cylinder(h=height/2, r=wall, center=false);\n            }\n        }\n    }\n}\n\n// Add support struts\nfor (i = [0:45:315]) {\n    support_strut(i);\n}\n\n// Top surface for functionality\ndifference() {\n    // Main top\n    translate([0, 0, height*0.9]) {\n        cylinder(h=height/20, r=length/4, center=true);\n    }\n    \n    // Hollow top\n    translate([0, 0, height*0.9 + wall]) {\n        cylinder(h=height/20, r=length/4 - wall, center=true);\n    }\n}\n\n// Geometric pattern cutouts\nmodule geometric_pattern() {\n    for (angle = [0:30:330]) {\n        rotate([0, 0, angle]) {\n            translate([length/3, 0, height/2]) {\n                rotate([0, 90, 0]) {\n                    difference() {\n                        cube([height/3, 8, wall*2], center=true);\n                        \n                        // Create diamond pattern\n                        translate([0, 0, 0]) {\n                            rotate([0, 0, 45]) {\n                                cube([height/4, 6, wall*3], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Add patterns to flame body\ngeometric_pattern();\n\n// Reinforcement ribs inside\nmodule internal_rib() {\n    translate([0, 0, height/2]) {\n        difference() {\n            cube([wall*2, width*0.6, height/2], center=true);\n            cube([wall*2, width*0.6 - wall*2, height/2 - wall*2], center=true);\n        }\n    }\n}\n\ninternal_rib();\n\n// Additional stability base\ndifference() {\n    translate([0, 0, height/16]) {\n        cube([length*0.9, width*0.9, height/20], center=true);\n    }\n    \n    translate([0, 0, height/16 + wall]) {\n        cube([length*0.9 - wall*2, width*0.9 - wall*2, height/20], center=true);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "glint",
    "openscad_code": "// Glint Accent Table - Modern Geometric Furniture Piece\n// Realistic styling with medium complexity\n// Overall dimensions: 120mm diameter, 450mm height\n\n// Parameters\n$table_top_dia = 120;\n$table_top_thick = 8;\n$base_dia = 80;\n$base_thick = 12;\n$leg_height = 420;\n$leg_dia = 30;\n$glint_cut_size = 15;\n$wall_thickness = 2.5;\n\n// Main assembly\nmodule glint_table() {\n    union() {\n        // Table top with decorative bevel\n        table_top();\n        \n        // Central support structure\n        central_column();\n        \n        // Base with stability features\n        base();\n        \n        // Decorative glint cuts\n        glint_details();\n    }\n}\n\n// Table top with rounded edge\nmodule table_top() {\n    translate([0, 0, $leg_height + $table_top_thick/2])\n    difference() {\n        // Main top disc\n        cylinder(h = $table_top_thick, d = $table_top_dia, $fn = 64);\n        \n        // Underside hollow for weight reduction\n        translate([0, 0, $wall_thickness])\n        cylinder(h = $table_top_thick - $wall_thickness, d = $table_top_dia - 2*$wall_thickness, $fn = 64);\n        \n        // Decorative top surface pattern\n        for(i = [0:5:359]) {\n            rotate([0, 0, i])\n            translate([40, 0, $table_top_thick - 1])\n            cube([20, 2, 1.5], center = true);\n        }\n    }\n}\n\n// Central support column with structural ribs\nmodule central_column() {\n    difference() {\n        // Main column\n        translate([0, 0, $leg_height/2])\n        cylinder(h = $leg_height, d = $leg_dia, $fn = 32);\n        \n        // Internal hollow\n        translate([0, 0, $wall_thickness])\n        cylinder(h = $leg_height - 2*$wall_thickness, d = $leg_dia - 2*$wall_thickness, $fn = 32);\n    }\n    \n    // Structural reinforcement rings\n    for(pos = [90, 210, 330]) {\n        translate([0, 0, pos])\n        difference() {\n            cylinder(h = 8, d = $leg_dia + 10, $fn = 32);\n            cylinder(h = 10, d = $leg_dia, $fn = 32);\n        }\n    }\n}\n\n// Base with glint-inspired geometry\nmodule base() {\n    difference() {\n        // Main base cylinder\n        translate([0, 0, $base_thick/2])\n        cylinder(h = $base_thick, d = $base_dia, $fn = 48);\n        \n        // Internal hollow\n        translate([0, 0, $wall_thickness])\n        cylinder(h = $base_thick - $wall_thickness, d = $base_dia - 2*$wall_thickness, $fn = 48);\n        \n        // Decorative glint cuts in base\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n            translate([35, 0, -1])\n            rotate([0, 90, 0])\n            cylinder(h = 20, d = 8, $fn = 6);\n        }\n    }\n    \n    // Anti-slip pads\n    for(i = [45:90:315]) {\n        rotate([0, 0, i])\n        translate([30, 0, -1])\n        cylinder(h = 3, d = 8, $fn = 16);\n    }\n}\n\n// Glint decorative cuts\nmodule glint_details() {\n    // Vertical glint cuts on column\n    for(i = [0:20:359]) {\n        rotate([0, 0, i])\n        translate([15, 0, 0])\n        rotate([0, 90, 0])\n        linear_extrude(height = $leg_height - 20, center = true, convexity = 10)\n        polygon(points = [[0, 0], [3, 5], [6, 0], [3, -5]]);\n    }\n    \n    // Horizontal accent rings\n    for(z_pos = [120:60:360]) {\n        translate([0, 0, z_pos])\n        difference() {\n            cylinder(h = 2, d = $leg_dia + 4, $fn = 32);\n            cylinder(h = 3, d = $leg_dia - 4, $fn = 32);\n        }\n    }\n}\n\n// Generate the table\nglint_table();",
    "renders": true
  },
  {
    "decorative_art": "haven",
    "openscad_code": "// Haven furniture decorative shelf (realistic style, medium complexity)\n// Overall dimensions: 80mm width x 15mm depth x 120mm height\n// Wall thickness: 2mm throughout for 3D printing\n\n// Main module\nmodule havenShelf() {\n    // Base frame\n    difference() {\n        // Outer frame\n        cube([80, 15, 120], center=true);\n        \n        // Hollow out interior\n        translate([0, 1, 0])\n            cube([76, 13, 116], center=true);\n    }\n    \n    // Back panel with decorative pattern\n    translate([0, 6.5, 0])\n        cube([78, 2, 118], center=true);\n    \n    // Shelves\n    for(z = [-40, -10, 20, 50]) {\n        translate([0, 0, z])\n            shelf();\n    }\n    \n    // Side decorative pillars\n    translate([-37, 0, 0])\n        pillar();\n    translate([37, 0, 0])\n        mirror([1, 0, 0])\n            pillar();\n    \n    // Top decorative arch\n    translate([0, 0, 60])\n        arch();\n    \n    // Bottom feet\n    translate([-30, 0, -61])\n        foot();\n    translate([30, 0, -61])\n        foot();\n}\n\n// Shelf module with front lip\nmodule shelf() {\n    difference() {\n        // Main shelf\n        translate([0, -2, 0])\n            cube([76, 10, 2], center=true);\n        \n        // Lightening holes\n        for(x = [-25, -15, -5, 5, 15, 25]) {\n            translate([x, -1, 0])\n                cylinder(h=3, r=3, center=true);\n        }\n    }\n    \n    // Front lip\n    translate([0, -7.5, 1])\n        cube([76, 2, 4], center=true);\n}\n\n// Decorative pillar with fluting\nmodule pillar() {\n    difference() {\n        // Main pillar body\n        cylinder(h=118, r=4, center=true);\n        \n        // Fluting grooves\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([4, 0, 0])\n                    cube([2, 8, 120], center=true);\n        }\n    }\n    \n    // Capital\n    translate([0, 0, 60])\n        cylinder(h=4, r1=6, r2=4, center=true);\n    \n    // Base\n    translate([0, 0, -60])\n        cylinder(h=4, r1=4, r2=6, center=true);\n}\n\n// Decorative arch\nmodule arch() {\n    // Arch body\n    difference() {\n        translate([0, 0, 0])\n            cube([82, 4, 20], center=true);\n        \n        // Arch opening\n        translate([0, 2, 0])\n            for(x = [-35:5:35]) {\n                translate([x, 0, 8])\n                    sphere(r=6);\n            }\n    }\n    \n    // Arch keystone\n    translate([0, 0, 10])\n        cube([10, 5, 8], center=true);\n}\n\n// Decorative foot\nmodule foot() {\n    difference() {\n        cylinder(h=6, r=5, center=true);\n        translate([0, 0, -3])\n            cube([8, 8, 6], center=true);\n    }\n    \n    // Foot base\n    translate([0, 0, -4])\n        cylinder(h=2, r=6, center=true);\n}\n\n// Render the haven shelf\nhavenShelf();",
    "renders": true
  },
  {
    "decorative_art": "iris",
    "openscad_code": "// Iris Decorative Wall Shelf\n// Realistic style, medium complexity\n// Includes flower petals, leaves, and structural frame\n\n// Overall dimensions (mm)\nwidth = 120;\nheight = 100;\ndepth = 25;\n\n// Wall thickness\nwall = 2;\n\n// Petal parameters\npetal_width = 20;\npetal_height = 35;\npetal_thickness = 2;\n\n// Leaf parameters\nleaf_width = 12;\nleaf_height = 25;\nleaf_thickness = 2;\n\n// Back frame\nmodule back_frame() {\n    difference() {\n        // Outer frame\n        cube([width, height, wall]);\n        \n        // Inner cutout\n        translate([wall, wall, -0.1])\n            cube([width-2*wall, height-2*wall, wall+0.2]);\n    }\n}\n\n// Petal module - creates one petal\nmodule petal() {\n    hull() {\n        // Base of petal\n        translate([0, 0, 0])\n            cube([petal_width, petal_thickness, petal_height]);\n        \n        // Tip of petal\n        translate([petal_width/2-2, 0, petal_height-5])\n            sphere(d=8);\n    }\n}\n\n// Create iris flower with 6 petals\nmodule iris_flower() {\n    // Center hub\n    cylinder(h=petal_thickness+1, d=12);\n    \n    // Petals in circle\n    for(i = [0:5]) {\n        rotate([0, 0, i*60])\n            translate([0, 0, 0])\n                petal();\n    }\n    \n    // Inner petals (slightly smaller)\n    for(i = [0:2]) {\n        rotate([0, 0, i*120+30])\n            scale([0.7, 1, 0.8])\n                translate([0, 0, 2])\n                    petal();\n    }\n}\n\n// Leaf module\nmodule leaf() {\n    difference() {\n        // Main leaf shape\n        hull() {\n            translate([0, 0, 0])\n                cube([leaf_width, leaf_thickness, 5]);\n            translate([leaf_width/2, 0, leaf_height])\n                sphere(d=leaf_width);\n        }\n        \n        // Vein detail\n        translate([leaf_width/2-0.5, -0.1, 0])\n            cube([1, leaf_thickness+0.2, leaf_height-5]);\n    }\n}\n\n// Structural shelf surface\nmodule shelf_surface() {\n    difference() {\n        // Main shelf\n        translate([0, 0, wall])\n            cube([width-2*wall, depth-wall, wall]);\n        \n        // Reinforcement ribs\n        for(i = [1:3]) {\n            translate([i*30, -0.1, wall])\n                cube([wall, depth-wall+0.2, wall]);\n        }\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) {\n    // Back frame for wall mounting\n    back_frame();\n    \n    // Shelf surface\n    translate([wall, wall, 0])\n        shelf_surface();\n    \n    // Iris flower decoration\n    translate([width/2, depth/2, wall])\n        rotate([90, 0, 0])\n            iris_flower();\n    \n    // Leaves\n    translate([width/2-15, depth/2+5, wall])\n        rotate([75, 0, -20])\n            leaf();\n    \n    translate([width/2+15, depth/2+5, wall])\n        rotate([75, 0, 20])\n            mirror([1, 0, 0])\n                leaf();\n    \n    // Mounting holes\n    for(pos = [[10, 10], [width-10, 10], [10, height-10], [width-10, height-10]]) {\n        translate([pos[0], pos[1], -1])\n            cylinder(h=wall+2, d=4);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "jett",
    "openscad_code": "// Jett Chair - Medium complexity realistic 3D printable furniture piece\n// Overall dimensions: 60mm W x 65mm D x 85mm H\n\nmodule chair_frame() {\n    // Main seat frame\n    translate([0, 0, 40])\n        cube([50, 50, 3], center=true);\n    \n    // Back frame\n    translate([0, -22, 67.5])\n        cube([50, 3, 55], center=true);\n    \n    // Front left leg\n    translate([-22, 22, 20])\n        cube([3, 3, 40], center=true);\n    \n    // Front right leg\n    translate([22, 22, 20])\n        cube([3, 3, 40], center=true);\n    \n    // Back left leg\n    translate([-22, -22, 20])\n        cube([3, 3, 40], center=true);\n    \n    // Back right leg\n    translate([22, -22, 20])\n        cube([3, 3, 40], center=true);\n    \n    // Front support bar\n    translate([0, 22, 2])\n        cube([46, 3, 3], center=true);\n    \n    // Back support bar\n    translate([0, -22, 2])\n        cube([46, 3, 3], center=true);\n    \n    // Side support bars\n    translate([-22, 0, 2])\n        cube([3, 46, 3], center=true);\n    \n    translate([22, 0, 2])\n        cube([3, 46, 3], center=true);\n}\n\nmodule seat_surface() {\n    // Seat cushion base\n    translate([0, 0, 42])\n        cube([48, 48, 5], center=true);\n    \n    // Cushion top detail\n    translate([0, 0, 47])\n        cube([46, 46, 2], center=true);\n}\n\nmodule back_spindles() {\n    // Vertical spindles in backrest\n    for (x = [-18, -12, -6, 0, 6, 12, 18]) {\n        translate([x, -22, 67.5])\n            cube([2, 2, 50], center=true);\n    }\n}\n\nmodule back_support() {\n    // Top back support bar\n    translate([0, -22, 92])\n        cube([50, 3, 4], center=true);\n    \n    // Mid back support bar\n    translate([0, -22, 75])\n        cube([50, 3, 2], center=true);\n}\n\nmodule leg_braces() {\n    // Diagonal side braces\n    translate([0, 0, 20]) {\n        rotate([0, 0, 45])\n            cube([3, 30, 2], center=true);\n        \n        rotate([0, 0, -45])\n            cube([3, 30, 2], center=true);\n    }\n}\n\nmodule decorative_details() {\n    // Corner brackets\n    for (x = [-23, 23]) {\n        for (y = [-23, 23]) {\n            translate([x, y, 38])\n                cylinder(h=4, r=2, center=true);\n        }\n    }\n    \n    // Backrest top detail\n    translate([0, -22, 94])\n        sphere(r=3);\n}\n\n// Main assembly\nunion() {\n    chair_frame();\n    seat_surface();\n    back_spindles();\n    back_support();\n    leg_braces();\n    decorative_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "kairo",
    "openscad_code": "// KAIRO decorative storage box (traditional Japanese style)\n// Overall dimensions: 120 x 80 x 50 mm\n\n// Wall thickness constant\nwall = 2;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([120, 80, 50], center = true);\n        \n        // Inner cavity\n        translate([0, 0, wall/2])\n        cube([120 - 2*wall, 80 - 2*wall, 50 - wall], center = true);\n    }\n}\n\n// Traditional sliding lid with finger groove\nmodule lid() {\n    difference() {\n        union() {\n            // Lid plate\n            translate([0, 0, 25 + wall/2])\n            cube([122, 82, wall], center = true);\n            \n            // Edge lip\n            translate([0, 0, 25 + wall])\n            cube([120 - 1, 80 - 1, wall], center = true);\n        }\n        \n        // Finger groove\n        translate([0, -40 + wall + 5, 25 + wall + 5])\n        cube([30, 20, wall + 5], center = true);\n    }\n}\n\n// Traditional corner brackets (decorative)\nmodule corner_bracket(x, y, z, rot = 0) {\n    translate([x, y, z])\n    rotate([0, 0, rot])\n    difference() {\n        // Bracket base\n        cube([10, 10, 6], center = true);\n        \n        // Inner cutout\n        cube([6, 6, 8], center = true);\n    }\n}\n\n// Traditional cloud pattern cutouts on sides\nmodule cloud_pattern() {\n    // Left side pattern\n    translate([-60 - wall/2, 0, 0])\n    rotate([0, 90, 0])\n    for(i = [-20, 0, 20]) {\n        translate([i, 0, 10])\n        cylinder(h = wall + 1, r = 8, center = true);\n        translate([i + 10, 0, 0])\n        cylinder(h = wall + 1, r = 8, center = true);\n    }\n    \n    // Right side pattern\n    translate([60 + wall/2, 0, 0])\n    rotate([0, 90, 0])\n    for(i = [-20, 0, 20]) {\n        translate([i, 0, 10])\n        cylinder(h = wall + 1, r = 8, center = true);\n        translate([i + 10, 0, 0])\n        cylinder(h = wall + 1, r = 8, center = true);\n    }\n}\n\n// Decorative top ridge\nmodule top_ridge() {\n    for(x = [-50:20:50]) {\n        translate([x, 0, 25 - wall])\n        cube([15, 78, wall], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    body();\n    \n    // Corner brackets\n    corner_bracket(-55, -35, -20, 0);\n    corner_bracket(55, -35, -20, 90);\n    corner_bracket(-55, 35, -20, -90);\n    corner_bracket(55, 35, -20, 180);\n    \n    corner_bracket(-55, -35, 20, 0);\n    corner_bracket(55, -35, 20, 90);\n    corner_bracket(-55, 35, 20, -90);\n    corner_bracket(55, 35, 20, 180);\n    \n    // Cloud pattern decorations\n    cloud_pattern();\n    \n    // Top ridge details\n    top_ridge();\n    \n    // Sliding lid (offset for visualization)\n    translate([0, 0, 2])\n    lid();\n}",
    "renders": true
  },
  {
    "decorative_art": "luna",
    "openscad_code": "// Luna-inspired decorative side table\n// Overall dimensions: 120mm diameter x 450mm height\n\n$fn = 36;\n\n// Main parameters\nleg_height = 400;\ntable_top_d = 120;\ntable_top_t = 8;\nmoon_radius = 35;\nmoon_thickness = 8;\nsupport_ring_h = 20;\nbase_d = 100;\nbase_t = 12;\n\n// Table top with crescent moon cutout\nmodule table_top() {\n    difference() {\n        // Main circular top\n        cylinder(h = table_top_t, d = table_top_d, center = true);\n        \n        // Crescent moon cutout - offset circle\n        translate([moon_radius * 0.4, 0, -table_top_t/2 - 0.1])\n            cylinder(h = table_top_t + 0.2, d = moon_radius * 1.8, center = false);\n    }\n    \n    // Decorative edge ring\n    translate([0, 0, table_top_t/2 + 1])\n        cylinder(h = 3, d1 = table_top_d, d2 = table_top_d - 4);\n}\n\n// Crescent moon support bracket\nmodule moon_bracket() {\n    // Main crescent body\n    difference() {\n        cylinder(h = moon_thickness, d = moon_radius * 2, center = true);\n        translate([moon_radius * 0.5, 0, -moon_thickness/2 - 0.1])\n            cylinder(h = moon_thickness + 0.2, d = moon_radius * 1.6, center = false);\n    }\n    \n    // Connection pegs\n    for(i = [-1, 1]) {\n        translate([moon_radius * 0.8, i * moon_radius * 0.7, 0])\n            cylinder(h = moon_thickness + 6, d = 6, center = true);\n    }\n}\n\n// Central support column\nmodule support_column() {\n    // Main column\n    cylinder(h = leg_height - base_t, d = 20, center = false);\n    \n    // Decorative ring details\n    for(i = [0.25, 0.5, 0.75]) {\n        translate([0, 0, i * (leg_height - base_t)])\n            cylinder(h = 4, d = 24, center = true);\n    }\n}\n\n// Stabilizing base\nmodule base() {\n    // Main base disc\n    cylinder(h = base_t, d = base_d, center = true);\n    \n    // Weight distribution ring\n    translate([0, 0, -base_t/2 + 2])\n        cylinder(h = 4, d = base_d - 10, center = false);\n    \n    // Decorative notches\n    for(i = [0:45:315]) {\n        rotate([0, 0, i])\n            translate([base_d/2 - 6, 0, -base_t/2])\n                cube([12, 3, base_t], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0, 0, leg_height])\n        table_top();\n    \n    // Support column\n    translate([0, 0, base_t/2])\n        support_column();\n    \n    // Moon bracket connecting to table top\n    translate([0, table_top_d/2 - moon_radius/2, leg_height - table_top_t/2])\n        rotate([90, 0, 0])\n            moon_bracket();\n    \n    // Base\n    translate([0, 0, 0])\n        base();\n}",
    "renders": true
  },
  {
    "decorative_art": "mira",
    "openscad_code": "// Mira Decorative Shelf Unit - Realistic Style\n// A wall-mounted geometric shelf inspired by Mira furniture line\n\n$fn = 32;\n\n// Overall dimensions\nunit_width = 80;\nunit_height = 120;\nunit_depth = 25;\nwall_thickness = 2;\n\n// Module for rounded cube with wall thickness\nmodule rounded_cube(x, y, z, r) {\n    hull() {\n        translate([r, r, 0]) cylinder(h=z, r=r);\n        translate([x-r, r, 0]) cylinder(h=z, r=r);\n        translate([r, y-r, 0]) cylinder(h=z, r=r);\n        translate([x-r, y-r, 0]) cylinder(h=z, r=r);\n        translate([r, r, z]) cylinder(h=0.01, r=r);\n        translate([x-r, r, z]) cylinder(h=0.01, r=r);\n        translate([r, y-r, z]) cylinder(h=0.01, r=r);\n        translate([x-r, y-r, z]) cylinder(h=0.01, r=r);\n    }\n}\n\n// Main frame structure\nmodule main_frame() {\n    difference() {\n        // Outer frame\n        rounded_cube(unit_width, unit_height, unit_depth, 5);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_cube(unit_width-2*wall_thickness, unit_height-2*wall_thickness, unit_depth, 3);\n    }\n}\n\n// Geometric shelf compartments\nmodule compartments() {\n    // Vertical divider\n    translate([unit_width/2 - wall_thickness/2, 15, wall_thickness])\n        cube([wall_thickness, unit_height-30, unit_depth-2*wall_thickness]);\n    \n    // Horizontal dividers\n    for(i=[1:2]) {\n        translate([wall_thickness, i*unit_height/3 - wall_thickness/2, wall_thickness])\n            cube([unit_width-2*wall_thickness, wall_thickness, unit_depth-2*wall_thickness]);\n    }\n}\n\n// Decorative hexagonal pattern on back\nmodule back_pattern() {\n    hex_size = 8;\n    hex_height = sqrt(3)*hex_size;\n    \n    for(x=[hex_size:hex_size*2:unit_width-hex_size]) {\n        for(y=[hex_height/2:hex_height:unit_height-hex_height]) {\n            translate([x, y, 0.5]) {\n                linear_extrude(height=0.5)\n                    circle(r=hex_size, $fn=6);\n            }\n        }\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    hole_diam = 4;\n    hole_depth = unit_depth + 2;\n    \n    for(pos=[[10, 10], [unit_width-10, 10], [10, unit_height-10], [unit_width-10, unit_height-10]]) {\n        translate([pos[0], pos[1], -1])\n            cylinder(h=hole_depth, d=hole_diam);\n    }\n}\n\n// Decorative edge trim\nmodule edge_trim() {\n    trim_height = 3;\n    \n    // Top edge\n    translate([-1, -1, unit_depth])\n        cube([unit_width+2, 3, trim_height]);\n    \n    // Bottom edge\n    translate([-1, unit_height-2, unit_depth])\n        cube([unit_width+2, 3, trim_height]);\n    \n    // Side edges\n    translate([-1, -1, unit_depth])\n        cube([3, unit_height+2, trim_height]);\n    \n    translate([unit_width-2, -1, unit_depth])\n        cube([3, unit_height+2, trim_height]);\n}\n\n// Assembly\nunion() {\n    main_frame();\n    compartments();\n    \n    // Back panel with pattern\n    translate([0, 0, 0])\n        difference() {\n            cube([unit_width, unit_height, wall_thickness]);\n            mounting_holes();\n        }\n    \n    back_pattern();\n    edge_trim();\n}",
    "renders": true
  },
  {
    "decorative_art": "nix",
    "openscad_code": "// Nix-style bookshelf with ornamental back panel\n// Overall dimensions: 120mm wide × 100mm deep × 140mm tall\n\n$fn = 32;  // smooth curves\n\nmodule shelf_profile() {\n    // 2 mm thick shelf with rounded lip\n    difference() {\n        translate([0, 0, 2])\n            cube([116, 96, 2], center = true);\n        translate([0, 0, 2.5])\n            cube([112, 92, 2], center = true);\n    }\n}\n\nmodule shelf_support() {\n    // side support block 8×8×20 mm\n    cube([8, 8, 20], center = true);\n}\n\nmodule back_panel() {\n    // decorative nix-style lattice back\n    difference() {\n        // full back plate 2 mm thick\n        translate([0, 0, 70])\n            cube([120, 2, 140], center = true);\n        // repeating diamond cut-outs\n        for (x = [-40:20:40])\n            for (y = [20:20:120])\n                translate([x, 0, y])\n                    rotate([0, 90, 45])\n                        cylinder(h = 5, d1 = 12, d2 = 0, center = true);\n    }\n}\n\nmodule frame_leg() {\n    // 20×20 mm square leg\n    cube([20, 20, 140], center = true);\n}\n\nmodule stretcher() {\n    // front stretcher 10×10 mm\n    cube([120, 10, 10], center = true);\n}\n\n// assemble the piece\nunion() {\n    // left leg\n    translate([-50, -40, 70])\n        frame_leg();\n    // right leg\n    translate([50, -40, 70])\n        frame_leg();\n    // back left leg\n    translate([-50, 40, 70])\n        frame_leg();\n    // back right leg\n    translate([50, 40, 70])\n        frame_leg();\n\n    // bottom stretcher front\n    translate([0, -40, 10])\n        stretcher();\n    // bottom stretcher back\n    translate([0, 40, 10])\n        stretcher();\n\n    // middle stretcher front\n    translate([0, -40, 75])\n        stretcher();\n    // middle stretcher back\n    translate([0, 40, 75])\n        stretcher();\n\n    // top stretcher front\n    translate([0, -40, 135])\n        stretcher();\n    // top stretcher back\n    translate([0, 40, 135])\n        stretcher();\n\n    // bottom shelf\n    translate([0, 0, 25])\n        shelf_profile();\n    // middle shelf\n    translate([0, 0, 75])\n        shelf_profile();\n    // top shelf\n    translate([0, 0, 125])\n        shelf_profile();\n\n    // shelf side supports\n    for (z = [25, 75, 125])\n        for (x = [-54, 54])\n            for (y = [-44, 44])\n                translate([x, y, z])\n                    shelf_support();\n\n    // decorative back panel\n    back_panel();\n}",
    "renders": true
  },
  {
    "decorative_art": "orbit",
    "openscad_code": "// Orbit Furniture Art Piece - Decorative Table Base\n// A stylized orbital ring structure that can serve as a modern table base\n// Overall dimensions: 120mm diameter x 75mm height\n// Wall thickness: 2mm for 3D printing\n\n// Main parameters\nring_outer_diameter = 100;\nring_thickness = 2;\nring_height = 60;\nbase_height = 15;\nsupport_count = 8;\n\n// Create the complete orbit structure\nmodule orbit_furniture() {\n    // Central support column\n    translate([0, 0, base_height/2])\n        cylinder(h=base_height, d=20, $fn=32);\n    \n    // Base ring - provides stability\n    translate([0, 0, base_height/2])\n        difference() {\n            cylinder(h=base_height, d=120, $fn=64);\n            cylinder(h=base_height+1, d=116, $fn=64);\n        }\n    \n    // Main orbital ring structure\n    translate([0, 0, base_height + ring_height/2])\n        difference() {\n            cylinder(h=ring_height, d=ring_outer_diameter, $fn=64);\n            cylinder(h=ring_height+1, d=ring_outer_diameter-ring_thickness*2, $fn=64);\n        }\n    \n    // Support struts connecting base to ring\n    for(i = [0:support_count-1]) {\n        rotate([0, 0, i * 360/support_count])\n            translate([45, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=50, d=4, $fn=12);\n    }\n    \n    // Decorative inner rings for visual interest\n    for(offset = [20, 40]) {\n        translate([0, 0, base_height + offset])\n            difference() {\n                cylinder(h=3, d=ring_outer_diameter - offset*2, $fn=64);\n                cylinder(h=4, d=ring_outer_diameter - offset*2 - ring_thickness*2, $fn=64);\n            }\n    }\n    \n    // Top mounting plate for glass top\n    translate([0, 0, base_height + ring_height + 2])\n        difference() {\n            cylinder(h=3, d=80, $fn=32);\n            cylinder(h=4, d=76, $fn=32);\n            \n            // Mounting holes for screws\n            for(angle = [0:120:240]) {\n                rotate([0, 0, angle])\n                    translate([30, 0, 0])\n                        cylinder(h=4, d=4, $fn=16);\n            }\n        }\n    \n    // Decorative cutouts in the base for weight reduction\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([50, 0, base_height/2])\n                rotate([90, 0, 0])\n                    cylinder(h=base_height+1, d=8, $fn=6);\n    }\n}\n\n// Generate the model\norbit_furniture();",
    "renders": true
  },
  {
    "decorative_art": "pulse",
    "openscad_code": "// Pulse Furniture - Realistic Style\n// Decorative wall shelf unit inspired by ECG pulse waveform\n// Medium complexity with functional shelf space and artistic curves\n\n// Overall dimensions\nwidth = 120;\nheight = 80;\ndepth = 40;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main pulse waveform profile\nmodule pulse_shape(h) {\n    // P wave\n    translate([0, 0, 0])\n        cylinder(h=h, d1=8, d2=8, $fn=32);\n    \n    // PR segment\n    translate([8, 0, 0])\n        cube([6, h, 8]);\n    \n    // QRS complex\n    translate([16, 0, 0])\n        cube([2, h, 2]);\n    translate([18, 0, 0])\n        cylinder(h=h, d1=2, d2=20, $fn=32);\n    translate([18, 0, h-12])\n        cylinder(h=12, d1=20, d2=2, $fn=32);\n    translate([20, 0, 0])\n        cube([8, h, 2]);\n    \n    // T wave\n    translate([32, 0, 0])\n        cylinder(h=h, d1=2, d2=12, $fn=32);\n    translate([32, 0, h-8])\n        cylinder(h=8, d1=12, d2=2, $fn=32);\n}\n\n// Back mounting panel\nmodule back_panel() {\n    difference() {\n        // Main panel\n        translate([-5, -depth/2-5, -5])\n            cube([width+10, depth+10, height+10]);\n        \n        // Cutout for waveform\n        translate([5, -depth/2-2, 5])\n            pulse_shape(height);\n    }\n}\n\n// Shelf supports\nmodule shelf_support() {\n    // Left support\n    translate([10, -depth/2-wall, 0])\n        cube([wall, wall+depth/2, height-10]);\n    \n    // Right support\n    translate([width-10-wall, -depth/2-wall, 0])\n        cube([wall, wall+depth/2, height-10]);\n    \n    // Bottom brace\n    translate([10, -wall, 0])\n        cube([width-20, wall, wall]);\n    \n    // Top brace\n    translate([10, -wall, height-10-wall])\n        cube([width-20, wall, wall]);\n}\n\n// Shelf surfaces\nmodule shelves() {\n    // Bottom shelf\n    translate([15, -depth/2+wall, 5])\n        cube([width-30, depth-wall*2, wall]);\n    \n    // Middle shelf\n    translate([15, -depth/2+wall, height/2-1])\n        cube([width-30, depth-wall*2, wall]);\n    \n    // Top shelf\n    translate([15, -depth/2+wall, height-10-wall])\n        cube([width-30, depth-wall*2, wall]);\n}\n\n// Decorative framing\nmodule frame() {\n    // Front frame pieces\n    translate([0, -depth/2-wall/2, 0])\n        cube([wall, wall, height]);\n    translate([width-wall, -depth/2-wall/2, 0])\n        cube([wall, wall, height]);\n    translate([0, -depth/2-wall/2, 0])\n        cube([width, wall, wall]);\n    translate([0, -depth/2-wall/2, height-wall])\n        cube([width, wall, wall]);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    back_panel();\n    shelf_support();\n    shelves();\n    frame();\n    \n    // Pulse waveform decoration\n    translate([width/2-25, -depth/2+wall+2, height/2-15])\n        scale([1, 0.3, 1])\n            pulse_shape(30);\n    \n    // Mounting holes\n    translate([10, -depth/2-wall-2, height-10])\n        cylinder(h=wall+4, d=3, $fn=16);\n    translate([width-10, -depth/2-wall-2, height-10])\n        cylinder(h=wall+4, d=3, $fn=16);\n    \n    // Decorative dots pattern\n    for (i = [0:3]) {\n        translate([15 + i*25, -depth/2-wall-1, 10])\n            sphere(d=4, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "quill",
    "openscad_code": "// Quill-shaped decorative furniture item (desk ornament / paperweight)\n// Realistic style with medium complexity\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Overall dimensions\nquill_length = 120;\nquill_width = 25;\nquill_height = 15;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule quill_shaft() {\n    // Main shaft - slightly curved for realistic feather shape\n    hull() {\n        translate([0, 0, 0]) cylinder(h = quill_length * 0.7, r1 = quill_width/2, r2 = quill_width/3);\n        translate([0, 5, quill_length * 0.7]) cylinder(h = quill_length * 0.3, r1 = quill_width/3, r2 = quill_width/6);\n    }\n}\n\nmodule quill_tip() {\n    // Sharp writing tip\n    translate([0, 5, quill_length]) \n        cylinder(h = 15, r1 = quill_width/6, r2 = 0.5);\n}\n\nmodule feather_barbs() {\n    // Individual barbs along the shaft\n    barb_length = 8;\n    barb_width = 1.5;\n    barb_height = 0.8;\n    \n    for (i = [0:5:quill_length * 0.8]) {\n        // Left side barbs\n        translate([-quill_width/2 - barb_length/2, 0, i])\n            rotate([0, 90, -30])\n            scale([1, 0.7, 1])\n            cylinder(h = barb_length, r1 = barb_width, r2 = barb_width/2);\n        \n        // Right side barbs\n        translate([quill_width/2 + barb_length/2, 0, i])\n            rotate([0, 90, 30])\n            scale([1, 0.7, 1])\n            cylinder(h = barb_length, r1 = barb_width, r2 = barb_width/2);\n    }\n}\n\nmodule hollow_center() {\n    // Hollow out center for material saving\n    translate([0, 0, -1])\n        cylinder(h = quill_length + 2, r = quill_width/2 - wall_thickness);\n}\n\nmodule decorative_bands() {\n    // Metallic-looking bands for furniture aesthetic\n    band_height = 3;\n    band_radius = quill_width/2 + 1;\n    \n    for (z = [20, 50, 80]) {\n        color(\"silver\")\n        translate([0, 0, z])\n            cylinder(h = band_height, r = band_radius);\n    }\n}\n\nmodule base_stand() {\n    // Decorative base for stability\n    base_height = 8;\n    base_radius = quill_width * 1.5;\n    \n    // Main base\n    cylinder(h = base_height, r = base_radius);\n    \n    // Decorative rim\n    translate([0, 0, base_height])\n        cylinder(h = 2, r1 = base_radius, r2 = base_radius * 0.9);\n    \n    // Center hole for quill insertion\n    translate([0, 0, -1])\n        cylinder(h = base_height + 2, r = quill_width/2 + 1);\n}\n\n// Assembly\nunion() {\n    // Main quill structure\n    difference() {\n        union() {\n            quill_shaft();\n            quill_tip();\n            feather_barbs();\n        }\n        hollow_center();\n    }\n    \n    // Add decorative elements\n    decorative_bands();\n}\n\n// Base (separate part for two-piece print)\ntranslate([0, 0, -15]) base_stand();",
    "renders": true
  },
  {
    "decorative_art": "rift",
    "openscad_code": "// Rift-inspired decorative shelf unit (realistic style, medium complexity)\n// Overall dimensions: 120mm wide x 30mm deep x 100mm tall\n// Features floating geometric voids and stepped shelves\n\nmodule shelf_slab(w, d, h) {\n    // Main shelf block with rounded edges\n    difference() {\n        // Main body\n        translate([0, 0, h/2])\n            minkowski() {\n                cube([w-2, d-2, h], center=true);\n                cylinder(r=1, h=0.01, center=true);\n            }\n        \n        // Hollow out center for printability\n        translate([0, 0, h/2])\n            cube([w-4, d-4, h+1], center=true);\n    }\n}\n\nmodule rift_void(x, y, z, angle) {\n    // Creates the floating geometric void\n    rotate([0, 0, angle])\n        translate([x, y, z])\n            scale([1, 0.7, 1.2])\n                cylinder(h=15, r1=8, r2=5, center=true);\n}\n\nmodule support_leg(x, y) {\n    // Tapered support leg\n    translate([x, y, 0])\n        cylinder(h1=100, r1=3, r2=2, center=false);\n}\n\nmodule back_panel() {\n    // Decorative back panel with geometric pattern\n    difference() {\n        // Main panel\n        translate([0, -14.5, 50])\n            cube([120, 2, 100], center=true);\n        \n        // Pattern of rift-like voids\n        for(i=[-2:2]) {\n            for(j=[-1:1]) {\n                translate([i*20, -13.5, j*25+50])\n                    rotate([90, 0, 45])\n                        cylinder(h=3, r1=8, r2=5, center=true);\n            }\n        }\n    }\n}\n\nmodule stepped_shelf() {\n    // Creates the stepped shelf structure\n    union() {\n        // Bottom shelf\n        shelf_slab(110, 25, 4);\n        \n        // Middle shelf\n        translate([0, 0, 35])\n            shelf_slab(90, 25, 4);\n        \n        // Top shelf\n        translate([0, 0, 70])\n            shelf_slab(70, 25, 4);\n        \n        // Corner supports\n        support_leg(-50, 10);\n        support_leg(50, 10);\n        support_leg(-40, -10);\n        support_leg(40, -10);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        // Base structure\n        stepped_shelf();\n        \n        // Back panel for stability\n        back_panel();\n    }\n    \n    // Rift voids in shelves\n    rift_void(-30, 0, 2, 15);\n    rift_void(25, 0, 37, -20);\n    rift_void(-15, 0, 72, 30);\n    \n    // Side voids for visual lightness\n    for(i=[-1:1]) {\n        translate([i*40, 0, 50])\n            rotate([0, 90, 0])\n                cylinder(h=30, r=6, center=true);\n    }\n}\n\n// Base stabilizers\ntranslate([-50, 0, -1])\n    cube([8, 20, 2], center=true);\ntranslate([50, 0, -1])\n    cube([8, 20, 2], center=true);",
    "renders": true
  },
  {
    "decorative_art": "sable",
    "openscad_code": "// Sable (Ferret-like) Decorative Stool\n// Realistic style, medium complexity\n// Overall dimensions: 120mm(L) x 60mm(W) x 90mm(H)\n\n// Color the model\ncolor(\"saddlebrown\") {\n\n// Main body - cylindrical stool body\nmodule stool_body() {\n    difference() {\n        // Main cylinder body\n        cylinder(h=40, d=50, $fn=60);\n        \n        // Hollow center for weight reduction\n        translate([0,0,2])\n            cylinder(h=36, d=46, $fn=60);\n    }\n}\n\n// Sable head - serves as one leg support\nmodule sable_head() {\n    // Main head shape\n    translate([0, 30, 40])\n    rotate([0,0,0])\n    union() {\n        // Skull\n        sphere(d=25, $fn=30);\n        \n        // Snout\n        translate([0, 12, -5])\n            scale([1,1.5,0.8])\n            sphere(d=15, $fn=20);\n        \n        // Ears\n        translate([-8, 5, 8])\n            rotate([30,0,-30])\n            scale([0.5,1,2])\n            cylinder(h=8, d1=6, d2=4, $fn=8);\n        \n        translate([8, 5, 8])\n            rotate([30,0,30])\n            scale([0.5,1,2])\n            cylinder(h=8, d1=6, d2=4, $fn=8);\n        \n        // Eyes\n        translate([-5, 8, 5])\n            sphere(d=3, $fn=10);\n        \n        translate([5, 8, 5])\n            sphere(d=3, $fn=10);\n    }\n}\n\n// Sable body - curved support structure\nmodule sable_body() {\n    // Create curved spine as support\n    for(i=[0:5:90]) {\n        translate([sin(i)*20, cos(i)*20, 40-i*0.2])\n            rotate([0,0,i])\n            scale([1,1.2,0.8])\n            sphere(d=12, $fn=20);\n    }\n    \n    // Tail wrapping around as structural support\n    for(i=[0:10:270]) {\n        translate([sin(i)*25, cos(i)*25, 40-i*0.1])\n            rotate([0,0,i])\n            scale([0.8,0.8,0.8])\n            sphere(d=8, $fn=15);\n    }\n}\n\n// Legs - sable paws as stool legs\nmodule legs() {\n    // Front left paw\n    translate([-15, -15, 0])\n    rotate([0,0,0])\n    union() {\n        cylinder(h=40, d=12, $fn=12);\n        translate([0,0,0])\n            difference() {\n                cylinder(h=40, d=10, $fn=12);\n                translate([0,0,2])\n                    cylinder(h=36, d=8, $fn=12);\n            }\n    }\n    \n    // Front right paw\n    translate([15, -15, 0])\n    rotate([0,0,0])\n    union() {\n        cylinder(h=40, d=12, $fn=12);\n        translate([0,0,0])\n            difference() {\n                cylinder(h=40, d=10, $fn=12);\n                translate([0,0,2])\n                    cylinder(h=36, d=8, $fn=12);\n            }\n    }\n    \n    // Back left paw\n    translate([-15, 15, 0])\n    rotate([0,0,0])\n    union() {\n        cylinder(h=40, d=12, $fn=12);\n        translate([0,0,0])\n            difference() {\n                cylinder(h=40, d=10, $fn=12);\n                translate([0,0,2])\n                    cylinder(h=36, d=8, $fn=12);\n            }\n    }\n    \n    // Back right paw (with tail integration)\n    translate([15, 15, 0])\n    rotate([0,0,0])\n    union() {\n        cylinder(h=40, d=12, $fn=12);\n        translate([0,0,0])\n            difference() {\n                cylinder(h=40, d=10, $fn=12);\n                translate([0,0,2])\n                    cylinder(h=36, d=8, $fn=12);\n            }\n    }\n}\n\n// Decorative fur texture on seat\nmodule fur_texture() {\n    for(i=[-20:5:20]) {\n        for(j=[-20:5:20]) {\n            if(norm([i,j]) < 24) {\n                translate([i, j, 40])\n                    rotate([0,0,rand(i*j)*360])\n                    scale([0.5,0.1,0.3])\n                    cylinder(h=2, d=3, $fn=8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    stool_body();\n    sable_head();\n    sable_body();\n    legs();\n    fur_texture();\n}\n\n}",
    "renders": true
  },
  {
    "decorative_art": "tide",
    "openscad_code": "// Tide Furniture - Decorative Wall Shelf\n// Realistic style with medium complexity\n// Size: 120mm wide x 80mm tall x 30mm deep\n\n// Wall thickness constant\nwall_thickness = 2;\n\n// Main body module\nmodule tide_body() {\n    // Base wave shape\n    difference() {\n        // Main curved body\n        union() {\n            for (i = [0:10]) {\n                translate([i*12 - 60, 0, 0]) {\n                    hull() {\n                        sphere(d=20);\n                        translate([0, 0, -15]) sphere(d=20);\n                    }\n                }\n            }\n        }\n        \n        // Hollow out interior\n        translate([0, 2, 0]) {\n            difference() {\n                scale([0.9, 0.9, 0.9]) {\n                    union() {\n                        for (i = [0:10]) {\n                            translate([i*12 - 60, 0, 0]) {\n                                hull() {\n                                    sphere(d=16);\n                                    translate([0, 0, -15]) sphere(d=16);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Back mounting plate\nmodule back_plate() {\n    translate([0, -25, 0]) {\n        difference() {\n            cube([116, 2, 60], center=true);\n            // Mounting holes\n            translate([40, 0, 20]) cylinder(h=3, d=4, center=true);\n            translate([-40, 0, 20]) cylinder(h=3, d=4, center=true);\n        }\n    }\n}\n\n// Decorative wave ridges\nmodule wave_ridges() {\n    for (i = [-50:25:50]) {\n        translate([i, 10, 25]) {\n            rotate([0, 90, 0]) {\n                difference() {\n                    cylinder(h=2, d1=8, d2=4);\n                    translate([0, 0, -0.5]) cylinder(h=3, d=3);\n                }\n            }\n        }\n    }\n}\n\n// Shelf supports\nmodule shelf_supports() {\n    // Left support\n    translate([-45, -10, -20]) {\n        difference() {\n            cube([15, 10, 40]);\n            translate([wall_thickness, wall_thickness, wall_thickness]) \n                cube([15-wall_thickness*2, 10-wall_thickness, 40-wall_thickness*2]);\n        }\n    }\n    \n    // Right support\n    translate([30, -10, -20]) {\n        difference() {\n            cube([15, 10, 40]);\n            translate([wall_thickness, wall_thickness, wall_thickness]) \n                cube([15-wall_thickness*2, 10-wall_thickness, 40-wall_thickness*2]);\n        }\n    }\n}\n\n// Shelf surface\nmodule shelf_surface() {\n    translate([0, -5, -20]) {\n        difference() {\n            cube([100, 5, 2]);\n            // Drainage holes\n            for (x = [-40:20:40]) {\n                for (z = [-18:4:-14]) {\n                    translate([x, 0, z]) cylinder(h=6, d=2);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main tide shape\n    color(\"LightBlue\") tide_body();\n    \n    // Back mounting plate\n    color(\"White\") back_plate();\n    \n    // Decorative elements\n    color(\"DeepSkyBlue\") wave_ridges();\n    \n    // Furniture structure\n    color(\"White\") {\n        shelf_supports();\n        shelf_surface();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "umbra",
    "openscad_code": "// Umbra decorative bookshelf - realistic style, medium complexity\n// Overall dimensions: 120mm width x 30mm depth x 150mm height\n\n// Wall thickness constant\nwall = 2;\n\n// Main frame module\nmodule frame() {\n    // Left side panel\n    translate([0, 0, 0])\n        cube([wall, 30, 150]);\n    \n    // Right side panel\n    translate([120-wall, 0, 0])\n        cube([wall, 30, 150]);\n    \n    // Top panel\n    translate([0, 0, 150-wall])\n        cube([120, 30, wall]);\n    \n    // Bottom panel\n    translate([0, 0, 0])\n        cube([120, 30, wall]);\n    \n    // Back panel\n    translate([0, 30-wall, 0])\n        cube([120, wall, 150]);\n}\n\n// Shelf module with rounded front edge\nmodule shelf(height) {\n    difference() {\n        // Main shelf\n        translate([wall, 0, height])\n            cube([120-2*wall, 30-wall, wall]);\n        \n        // Rounded front edge cutout\n        for (i = [0:2:118-2*wall]) {\n            translate([wall+i, 30-wall-2, height+wall/2])\n                sphere(r=wall/2, $fn=8);\n        }\n    }\n}\n\n// Geometric pattern for side decoration\nmodule side_pattern() {\n    // Triangle pattern on left side\n    for (row = [0:3]) {\n        for (col = [0:2]) {\n            translate([wall/2, 15, 20 + row*30 + col*15])\n                rotate([90, 0, 0])\n                    cylinder(h=wall, r1=5, r2=0, $fn=3);\n        }\n    }\n    \n    // Circle pattern on right side\n    for (row = [0:5]) {\n        for (col = [0:1]) {\n            translate([120-wall/2, 15, 15 + row*25 + col*12])\n                rotate([90, 0, 0])\n                    cylinder(h=wall, r=3, $fn=16);\n        }\n    }\n}\n\n// Support brackets\nmodule brackets(height) {\n    // Left bracket\n    translate([wall, 30-wall, height])\n        rotate([0, -45, 0])\n            cube([10, wall, 10]);\n    \n    // Right bracket\n    translate([120-wall-10, 30-wall, height])\n        rotate([0, -45, 0])\n            cube([10, wall, 10]);\n}\n\n// Assembly\nunion() {\n    // Main frame structure\n    frame();\n    \n    // Three shelves\n    shelf(50);\n    shelf(85);\n    shelf(120);\n    \n    // Support brackets for shelves\n    brackets(50);\n    brackets(85);\n    brackets(120);\n    \n    // Decorative elements\n    side_pattern();\n    \n    // Front lip detail\n    translate([wall, 30-wall, wall])\n        cube([120-2*wall, wall, 150-2*wall]);\n    \n    // Small feet\n    translate([10, 0, 0])\n        cube([wall*2, 30, 5]);\n    translate([120-10-wall*2, 0, 0])\n        cube([wall*2, 30, 5]);\n}",
    "renders": true
  },
  {
    "decorative_art": "vex",
    "openscad_code": "// VEX Decorative Stool - Realistic Style\n// Features hexagonal seat with vex pattern, tapered legs with joints, and stretcher support system\n\n// Parameters\nseat_diameter = 80;\nseat_thickness = 8;\nleg_height = 120;\nleg_thickness = 6;\nstretcher_height = 40;\njoint_radius = 4;\n\n// Main module\nmodule vex_stool() {\n    // Hexagonal seat with vex pattern\n    union() {\n        // Seat base\n        linear_extrude(height=seat_thickness)\n            circle(d=seat_diameter, $fn=6);\n        \n        // Vex pattern in center\n        vex_pattern();\n        \n        // Support legs\n        for(i=[0:5]) {\n            rotate([0, 0, i*60]) \n                translate([seat_diameter/2*0.7, 0, -leg_height/2])\n                    leg();\n        }\n        \n        // Stretcher system\n        stretcher_system();\n    }\n}\n\n// Vex hexagonal pattern on seat\nmodule vex_pattern() {\n    pattern_size = 4;\n    pattern_height = 2;\n    \n    // Outer hexagon ring\n    linear_extrude(height=pattern_height)\n        circle(d=seat_diameter-10, $fn=6);\n    \n    // Inner hexagon\n    difference() {\n        linear_extrude(height=pattern_height)\n            circle(d=seat_diameter-20, $fn=6);\n        \n        // Hexagonal voids creating vex pattern\n        for(i=[0:5]) {\n            rotate([0, 0, i*30]) {\n                translate([0, 0, -0.1])\n                    linear_extrude(height=pattern_height+0.2)\n                        circle(d=seat_diameter-35, $fn=6);\n            }\n        }\n    }\n}\n\n// Tapered leg with joint details\nmodule leg() {\n    // Main leg\n    hull() {\n        translate([0, 0, leg_height/2-5])\n            cylinder(h=10, r1=leg_thickness/2, r2=leg_thickness/2, $fn=8);\n        translate([0, 0, -leg_height/2+5])\n            cylinder(h=10, r1=leg_thickness/2*0.7, r2=leg_thickness/2*0.7, $fn=8);\n    }\n    \n    // Joint detail at top\n    translate([0, 0, leg_height/2])\n        cylinder(h=joint_radius*2, r=joint_radius, $fn=12);\n    \n    // Foot detail\n    translate([0, 0, -leg_height/2])\n        cylinder(h=5, r=leg_thickness/2*0.8, $fn=8);\n}\n\n// Stretcher support system between legs\nmodule stretcher_system() {\n    stretcher_thickness = 4;\n    \n    // Horizontal stretchers\n    for(i=[0:5]) {\n        angle = i*60;\n        next_angle = (i+1)*60;\n        \n        // Calculate positions\n        x1 = cos(angle)*seat_diameter/2*0.7;\n        y1 = sin(angle)*seat_diameter/2*0.7;\n        x2 = cos(next_angle)*seat_diameter/2*0.7;\n        y2 = sin(next_angle)*seat_diameter/2*0.7;\n        \n        // Stretcher bar\n        translate([(x1+x2)/2, (y1+y2)/2, -stretcher_height])\n            rotate([0, 0, angle+30])\n                cube([seat_diameter/2*0.7, stretcher_thickness, stretcher_thickness], center=true);\n    }\n    \n    // Central hub\n    translate([0, 0, -stretcher_height])\n        cylinder(h=stretcher_thickness, r=leg_thickness, $fn=6);\n}\n\n// Render the stool\nvex_stool();",
    "renders": true
  },
  {
    "decorative_art": "wisp",
    "openscad_code": "// Wisp-Inspired Decorative Shelf Unit\n// Overall size: ~120mm height, 80mm width, 40mm depth\n// Wall thickness: 2mm throughout for 3D printing\n\n// Main module\nmodule wisp_shelf() {\n    // Base foundation\n    translate([0,0,0])\n        base_foundation();\n    \n    // Central wisp structure\n    translate([0,0,15])\n        wisp_core();\n    \n    // Floating shelves\n    for(i=[0:2])\n        translate([0,0,40 + i*25])\n            floating_shelf(i);\n    \n    // Decorative wisps\n    for(i=[0:3])\n        rotate([0,0,i*90])\n            translate([35,0,60])\n                decorative_wisp(i);\n    \n    // Support structures\n    translate([0,-15,0])\n        support_leg();\n    translate([0,15,0])\n        support_leg();\n}\n\n// Base foundation - solid rectangular base\nmodule base_foundation() {\n    difference() {\n        cube([60,40,15], center=true);\n        translate([0,0,7.5])\n            cube([56,36,15], center=true);\n    }\n}\n\n// Central wisp structure - curved flowing element\nmodule wisp_core() {\n    for(i=[0:9]) {\n        rotate([0,0,i*36])\n        translate([i*2,0,i*2])\n            scale([1,0.6,1])\n                wisp_segment(i);\n    }\n}\n\n// Individual wisp segment\nmodule wisp_segment(height) {\n    hull() {\n        translate([0,0,0])\n            sphere(d=6);\n        translate([0,0,5])\n            sphere(d=4);\n    }\n}\n\n// Floating shelf platforms\nmodule floating_shelf(index) {\n    width = 40 - index*8;\n    depth = 30 - index*5;\n    \n    difference() {\n        // Main shelf\n        translate([0,0,2])\n            cube([width,depth,4], center=true);\n        \n        // Hollow interior\n        translate([0,0,2])\n            cube([width-4,depth-4,6], center=true);\n        \n        // Connection hole for wisps\n        translate([0,0,0])\n            cylinder(h=10, d=6, center=true);\n    }\n    \n    // Shelf edge detail\n    translate([0,15,2])\n        cube([width+2,2,4], center=true);\n    translate([0,-15,2])\n        cube([width+2,2,4], center=true);\n}\n\n// Decorative wisps - flowing curved elements\nmodule decorative_wisp(type) {\n    thickness = 2;\n    \n    if(type == 0) {\n        // Spiral wisp\n        for(i=[0:20]) {\n            rotate([0,0,i*18])\n            translate([i*1.5,0,i*1.2])\n                rotate([90,0,0])\n                    cylinder(h=thickness, d=3);\n        }\n    }\n    \n    if(type == 1) {\n        // Curved wisp\n        for(i=[0:15]) {\n            rotate([i*6,0,0])\n            translate([i*2,0,sin(i*15)*8])\n                sphere(d=2.5);\n        }\n    }\n    \n    if(type == 2) {\n        // Branching wisp\n        for(i=[0:5]) {\n            rotate([0,0,i*60])\n            translate([10,0,0])\n                for(j=[0:5]) {\n                    rotate([0,j*30,0])\n                    translate([j*3,0,j*2])\n                        sphere(d=2);\n                }\n        }\n    }\n}\n\n// Support legs\nmodule support_leg() {\n    difference() {\n        // Main leg\n        cylinder(h=70, d=8, center=false);\n        \n        // Hollow core\n        translate([0,0,-5])\n            cylinder(h=80, d=4, center=false);\n    }\n    \n    // Leg base\n    translate([0,0,-2])\n        sphere(d=10);\n}\n\n// Generate the complete model\nwisp_shelf();",
    "renders": true
  },
  {
    "decorative_art": "xeno",
    "openscad_code": "// Xeno-inspired side table\n// Dimensions: 120mm L x 100mm W x 75mm H\n// Features organic alien leg structure with hexagonal top\n\n// Main parameters\ntable_height = 75;\ntable_length = 120;\ntable_width = 100;\nwall_thickness = 2;\n\n// Hexagonal top module\nmodule hex_top(size, thickness) {\n    radius = size / 2;\n    linear_extrude(height = thickness)\n        polygon([\n            [radius, 0],\n            [radius * cos(60), radius * sin(60)],\n            [-radius * cos(60), radius * sin(60)],\n            [-radius, 0],\n            [-radius * cos(60), -radius * sin(60)],\n            [radius * cos(60), -radius * sin(60)]\n        ]);\n}\n\n// Organic leg segment\nmodule leg_segment(length, width, height, twist) {\n    union() {\n        // Main segment body\n        translate([0, 0, height/2])\n            rotate([0, 0, twist])\n            scale([1 + sin(twist)/5, 1 + cos(twist)/5, 1])\n            cylinder(h = height, d1 = width * 1.2, d2 = width * 0.8, $fn = 8);\n        \n        // Support ridges\n        for(i = [0:2]) {\n            rotate([0, 0, i * 120])\n            translate([width/3, 0, height/2])\n                cube([wall_thickness, width/4, height], center = true);\n        }\n    }\n}\n\n// Complete leg structure\nmodule xeno_leg(base_x, base_y, height) {\n    union() {\n        // Base foot\n        translate([base_x, base_y, height * 0.1])\n            rotate([0, 0, 45])\n            cylinder(h = height * 0.2, d = 20, $fn = 6);\n        \n        // Three segments ascending\n        leg_segment(15, 12, height * 0.3, 15);\n        translate([0, 0, height * 0.3])\n            leg_segment(12, 10, height * 0.35, -20);\n        translate([0, 0, height * 0.65])\n            leg_segment(10, 8, height * 0.35, 10);\n    }\n}\n\n// Decorative web pattern for underside\nmodule web_pattern() {\n    difference() {\n        hex_top(table_length * 0.8, wall_thickness);\n        // Cut decorative holes\n        for(i = [1:6]) {\n            rotate([0, 0, i * 60])\n            translate([table_length * 0.3, 0, -1])\n                cylinder(h = wall_thickness + 2, r = 5, $fn = 6);\n        }\n        // Central void\n        translate([0, 0, -1])\n            cylinder(h = wall_thickness + 2, r = 8, $fn = 8);\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0, 0, table_height - 8])\n        hex_top(table_length, 8);\n    \n    // Underside web\n    translate([0, 0, table_height - 8 - wall_thickness])\n        web_pattern();\n    \n    // Four legs in xeno configuration\n    xeno_leg(table_length * 0.35, table_width * 0.35, table_height - 8);\n    mirror([1, 0, 0])\n        xeno_leg(table_length * 0.35, table_width * 0.35, table_height - 8);\n    mirror([0, 1, 0])\n        xeno_leg(table_length * 0.35, table_width * 0.35, table_height - 8);\n    mirror([1, 1, 0])\n        xeno_leg(table_length * 0.35, table_width * 0.35, table_height - 8);\n    \n    // Central support ring\n    translate([0, 0, table_height * 0.4])\n        rotate([90, 0, 0])\n        cylinder(h = table_width * 0.6, d = 6, center = true, $fn = 8);\n}",
    "renders": true
  },
  {
    "decorative_art": "yara",
    "openscad_code": "// Yara Chair - Medium complexity realistic style\n// Overall dimensions: 110mm width x 110mm depth x 120mm height\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule leg() {\n    // Main leg post\n    cylinder(h = 100, r = 8);\n    \n    // Decorative ring at mid-point\n    translate([0, 0, 50])\n        cylinder(h = 4, r = 10);\n    \n    // Tapered foot\n    translate([0, 0, 100])\n        cylinder(h1 = 8, h2 = 0, r1 = 8, r2 = 12);\n}\n\nmodule back_support() {\n    // Central back post\n    translate([0, 0, 60])\n        cylinder(h = 60, r = 6);\n    \n    // Decorative curved supports\n    for (angle = [30:60:150]) {\n        rotate([0, 0, angle])\n            translate([0, 0, 90])\n                rotate([90, 0, 0])\n                    cylinder(h = 50, r = 3);\n    }\n}\n\nmodule seat_surface() {\n    // Main seat platform\n    difference() {\n        translate([0, 0, 48])\n            cube([100, 100, 4], center = true);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 48])\n            cube([96, 96, 4.1], center = true);\n    }\n    \n    // Perforated pattern on seat\n    for (x = [-40:20:40]) {\n        for (y = [-40:20:40]) {\n            translate([x, y, 50])\n                cylinder(h = 2, r = 4);\n        }\n    }\n}\n\nmodule backrest() {\n    // Main back panel\n    difference() {\n        translate([0, -45, 90])\n            cube([90, 4, 60], center = true);\n        \n        // Decorative cutouts\n        for (y = [75:15:105]) {\n            translate([0, -45, y])\n                cylinder(h = 4.1, r = 8);\n        }\n    }\n    \n    // Top rail\n    translate([0, -45, 120])\n        cube([95, 6, 8], center = true);\n}\n\nmodule armrest() {\n    // Support post\n    translate([40, 30, 70])\n        cylinder(h = 30, r = 5);\n    \n    // Arm surface\n    translate([40, 15, 100])\n        rotate([0, 15, 0])\n            cube([60, 8, 4], center = true);\n}\n\nmodule decorative_spindle() {\n    // Turned spindle detail\n    cylinder(h = 20, r = 3);\n    translate([0, 0, 7])\n        cylinder(h = 6, r = 4);\n    translate([0, 0, 14])\n        cylinder(h = 6, r = 4);\n}\n\n// Assembly\nunion() {\n    // Four legs\n    translate([-40, -40, 0])\n        leg();\n    translate([40, -40, 0])\n        leg();\n    translate([-40, 40, 0])\n        leg();\n    translate([40, 40, 0])\n        leg();\n    \n    // Seat\n    seat_surface();\n    \n    // Backrest structure\n    backrest();\n    \n    // Back supports\n    translate([-30, -45, 0])\n        back_support();\n    translate([30, -45, 0])\n        back_support();\n    \n    // Armrests\n    armrest();\n    mirror([1, 0, 0])\n        armrest();\n    \n    // Decorative spindles between legs\n    for (pos = [[-40, 0], [40, 0], [0, -40], [0, 40]]) {\n        translate([pos[0], pos[1], 25])\n            decorative_spindle();\n    }\n    \n    // Cross braces for stability\n    translate([0, -40, 25])\n        rotate([90, 0, 0])\n            cylinder(h = 80, r = 2);\n    translate([-40, 0, 25])\n        rotate([0, 90, 0])\n            cylinder(h = 80, r = 2);\n}",
    "renders": true
  },
  {
    "decorative_art": "zephyr",
    "openscad_code": "// Zephyr Chair - Decorative Art Furniture\n// Medium complexity realistic style\n// Overall dimensions: 120mm height x 80mm width x 90mm depth\n\n// Parameters\nseat_height = 45;\nback_height = 75;\nseat_width = 80;\nseat_depth = 70;\nleg_height = 40;\nleg_thickness = 8;\nback_support_thickness = 4;\ncurved_detail_thickness = 3;\n\n// Main seat frame\nmodule seat_frame() {\n    difference() {\n        // Seat base\n        translate([0, 0, seat_height/2])\n            cube([seat_width, seat_depth, 8], center=true);\n        \n        // Seat cutout for hollow interior\n        translate([0, 0, seat_height/2])\n            cube([seat_width-4, seat_depth-4, 10], center=true);\n    }\n}\n\n// Curved backrest with zephyr-inspired flowing design\nmodule curved_backrest() {\n    union() {\n        // Main curved back panel\n        translate([0, -seat_depth/2 + 5, seat_height + back_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=back_height, r1=seat_width/2-5, r2=seat_width/2-15, center=true);\n        \n        // Decorative flowing elements\n        for(i=[-2:2]) {\n            translate([i*15, -seat_depth/2 + 3, seat_height + 20 + abs(i)*5])\n                rotate([85 - abs(i)*5, 0, 0])\n                    cylinder(h=back_height - abs(i)*10, \n                            r1=curved_detail_thickness, \n                            r2=curved_detail_thickness, \n                            center=true);\n        }\n    }\n}\n\n// Chair legs with gentle taper\nmodule tapered_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, leg_height/2]) {\n        cylinder(h=leg_height, r1=leg_thickness/2, r2=leg_thickness/2 - 1, center=true);\n    }\n}\n\n// Back support posts\nmodule back_post(x_pos) {\n    translate([x_pos, -seat_depth/2 + 5, seat_height + back_height/2])\n        cylinder(h=back_height, r=back_support_thickness, center=true);\n}\n\n// Cross-brace between back posts\nmodule back_brace() {\n    translate([0, -seat_depth/2 + 5, seat_height + 50])\n        cube([seat_width-20, back_support_thickness, back_support_thickness], center=true);\n}\n\n// Decorative seat surface pattern\nmodule seat_pattern() {\n    difference() {\n        seat_frame();\n        \n        // Flowing wave pattern on seat\n        for(i=[-3:3]) {\n            translate([i*10, 0, seat_height + 4])\n                rotate([90, 0, 0])\n                    cylinder(h=seat_depth-10, r=2, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat with pattern\n    seat_pattern();\n    \n    // Curved backrest\n    curved_backrest();\n    \n    // Four tapered legs\n    tapered_leg(seat_width/2 - 5, seat_depth/2 - 5);\n    tapered_leg(-seat_width/2 + 5, seat_depth/2 - 5);\n    tapered_leg(seat_width/2 - 5, -seat_depth/2 + 5);\n    tapered_leg(-seat_width/2 + 5, -seat_depth/2 + 5);\n    \n    // Back support posts\n    back_post(seat_width/2 - 10);\n    back_post(-seat_width/2 + 10);\n    \n    // Cross-brace\n    back_brace();\n}",
    "renders": true
  },
  {
    "decorative_art": "aura",
    "openscad_code": "// Aura Decorative Shelf Unit - Realistic Style\n// A free-standing aura-inspired shelf with flowing curves and energy patterns\n\n// Overall dimensions\nwidth = 80;\ndepth = 40;\nheight = 120;\n\n// Wall thickness\nwall = 2;\n\n// Base module with aura energy pattern\nmodule aura_base() {\n    difference() {\n        // Main base platform\n        translate([0, 0, wall/2])\n            cube([width, depth, wall], center=true);\n        \n        // Aura energy rings carved into base\n        for(i = [1:3]) {\n            translate([0, 0, wall-0.1])\n                cylinder(h=wall+0.2, r1=10*i, r2=10*i, $fn=32);\n        }\n    }\n}\n\n// Vertical support posts with flowing aura curves\nmodule aura_post(x_pos) {\n    // Main post\n    translate([x_pos, 0, height/2])\n        cylinder(h=height-wall, r=wall*1.5, $fn=16);\n    \n    // Aura energy flow details\n    for(i = [1:5]) {\n        translate([x_pos, 0, i*height/6])\n            rotate([0, 0, i*15])\n                scale([1, 0.3, 1])\n                    cylinder(h=wall*2, r=wall*3, $fn=8);\n    }\n}\n\n// Shelf surface with aura wave pattern\nmodule aura_shelf(z_pos) {\n    difference() {\n        // Main shelf\n        translate([0, 0, z_pos])\n            cube([width-wall*4, depth-wall*2, wall], center=true);\n        \n        // Aura wave cutouts\n        for(x = [-width/3:10:width/3]) {\n            for(y = [-depth/3:8:depth/3]) {\n                translate([x, y, z_pos+wall/2])\n                    sphere(r=wall*1.2);\n            }\n        }\n    }\n    \n    // Support ribs underneath\n    translate([0, 0, z_pos-wall/2])\n        cube([width-wall*4, wall*1.5, wall*2], center=true);\n}\n\n// Back panel with aura energy matrix\nmodule aura_back() {\n    difference() {\n        // Main back panel\n        translate([0, depth/2-wall/2, height/2])\n            cube([width-wall*2, wall, height-wall*2], center=true);\n        \n        // Aura energy holes\n        for(y = [-height/3:15:height/3]) {\n            for(x = [-width/3:12:width/3]) {\n                translate([x, depth/2-wall/2, y])\n                    rotate([90, 0, 0])\n                        cylinder(h=wall+0.2, r=wall, $fn=8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    aura_base();\n    \n    // Vertical posts\n    aura_post(-width/3);\n    aura_post(width/3);\n    \n    // Shelves\n    aura_shelf(height/4);\n    aura_shelf(height/2);\n    aura_shelf(height*3/4);\n    \n    // Back panel\n    aura_back();\n    \n    // Top aura crown\n    translate([0, 0, height-wall/2])\n        difference() {\n            cube([width-wall*2, depth-wall*2, wall], center=true);\n            for(i = [1:4]) {\n                translate([0, 0, -0.1])\n                    rotate([0, 0, i*45])\n                        cube([width/2-i*5, depth/2-i*5, wall+0.2], center=true);\n            }\n        }\n}",
    "renders": true
  },
  {
    "decorative_art": "brink",
    "openscad_code": "// OpenSCAD code for a realistic brink bench\n// Overall size: 120 mm long x 50 mm deep x 45 mm high\n// Wall thickness: 2 mm\n\n// Bench parameters\nlength = 120;\ndepth = 50;\nheight = 45;\nwall = 2;\n\nmodule bench() {\n    // Main seat slab (solid brick top)\n    translate([0, 0, height - wall])\n        cube([length, depth, wall], center = true);\n\n    // Four side walls forming the hollow brick body\n    // Front wall\n    translate([0, -depth/2 + wall/2, height/2 - wall/2])\n        cube([length, wall, height - wall], center = true);\n\n    // Back wall\n    translate([0, depth/2 - wall/2, height/2 - wall/2])\n        cube([length, wall, height - wall], center = true);\n\n    // Left wall\n    translate([-length/2 + wall/2, 0, height/2 - wall/2])\n        cube([wall, depth - 2*wall, height - wall], center = true);\n\n    // Right wall\n    translate([length/2 - wall/2, 0, height/2 - wall/2])\n        cube([wall, depth - 2*wall, height - wall], center = true);\n\n    // Four decorative legs (mini-pillars)\n    leg_size = 8;\n    leg_holes = 3;\n    leg_spacing = length/3;\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i * leg_spacing/2, j * (depth/2 - leg_size/2 - wall), 0])\n                union() {\n                    // Leg post\n                    cube([leg_size, leg_size, height - wall], center = true);\n                    // Decorative grooves in legs\n                    for (k = [1:leg_holes]) {\n                        translate([0, 0, height/2 - wall/2 - k * (height - wall)/(leg_holes + 1)])\n                            cube([leg_size + 0.1, leg_size/3, wall/2], center = true);\n                    }\n                }\n        }\n    }\n\n    // Ornamental top border (raised edge)\n    border_height = 3;\n    translate([0, 0, height - wall/2 + border_height/2])\n        cube([length - wall, depth - wall, border_height], center = true);\n\n    // Side decorative panels (brick texture illusion)\n    panel_depth = 3;\n    for (side = [-1, 1]) {\n        translate([side * (length/2 - wall/2), 0, height/2 - wall/2])\n            difference() {\n                cube([wall, depth - 2*wall, height - wall], center = true);\n                // Create mortar line pattern\n                for (row = [-2:2]) {\n                    for (col = [-1:1]) {\n                        translate([\n                            0,\n                            col * 10,\n                            row * 8 - 4\n                        ])\n                            cube([wall + 0.1, 3, 2], center = true);\n                    }\n                }\n            }\n    }\n}\n\n// Render the bench\nbench();",
    "renders": true
  },
  {
    "decorative_art": "cipher",
    "openscad_code": "// Cipher Furniture - Cipher Wheel Bookend\n// A decorative bookend styled as a cipher wheel with furniture-like structure\n\n$fn = 50;\n\n// Main parameters\nbookend_height = 120;\nbookend_width = 80;\nbookend_depth = 60;\nwheel_diameter = 70;\nwheel_thickness = 8;\nbase_thickness = 15;\nwall_thickness = 2;\n\n// Base module - furniture-like plinth\nmodule base() {\n    // Main base block\n    translate([0, 0, base_thickness/2])\n        cube([bookend_width, bookend_depth, base_thickness], center=true);\n    \n    // Decorative base molding\n    translate([0, 0, base_thickness/2])\n    difference() {\n        cube([bookend_width + 4, bookend_depth + 4, base_thickness + 2], center=true);\n        cube([bookend_width - 2, bookend_depth - 2, base_thickness + 4], center=true);\n    }\n}\n\n// Cipher wheel module\nmodule cipher_wheel() {\n    // Outer wheel with alphabet markings\n    translate([0, 0, wheel_thickness/2 + base_thickness])\n    difference() {\n        cylinder(h=wheel_thickness, d=wheel_diameter);\n        cylinder(h=wheel_thickness + 1, d=wheel_diameter - 6);\n    }\n    \n    // Inner wheel with numbers\n    translate([0, 0, wheel_thickness + 1 + base_thickness])\n    difference() {\n        cylinder(h=wheel_thickness, d=wheel_diameter - 10);\n        cylinder(h=wheel_thickness + 1, d=wheel_diameter - 20);\n    }\n    \n    // Central pivot post\n    translate([0, 0, base_thickness])\n    cylinder(h=wheel_thickness * 2 + 2, d=6);\n    \n    // Indicator line\n    translate([0, wheel_diameter/2 - 5, wheel_thickness/2 + base_thickness + wheel_thickness/2])\n    cube([2, 10, wheel_thickness + 2], center=true);\n}\n\n// Support wall - furniture structural element\nmodule support_wall() {\n    translate([bookend_width/2 - wall_thickness/2, 0, bookend_height/2])\n    cube([wall_thickness, bookend_depth - 4, bookend_height - base_thickness], center=true);\n    \n    // Reinforcement ribs\n    for (i = [-1:1]) {\n        translate([bookend_width/2 - wall_thickness - 10, i * 15, bookend_height/2 - 10])\n        cube([wall_thickness, 8, bookend_height - base_thickness - 20], center=true);\n    }\n}\n\n// Decorative cipher markings\nmodule cipher_markings() {\n    // Alphabet markings on outer wheel\n    for (i = [0:25]) {\n        rotate([0, 0, i * 13.846])  // 360/26 degrees\n        translate([wheel_diameter/2 - 4, 0, wheel_thickness/2 + base_thickness + 1])\n            rotate([90, 0, 0])\n                linear_extrude(height=1)\n                    text(chr(65 + (i % 26)), size=3, halign=\"center\");\n    }\n    \n    // Number markings on inner wheel\n    for (i = [0:9]) {\n        rotate([0, 0, i * 36])\n        translate([(wheel_diameter - 15)/2, 0, wheel_thickness + 1 + base_thickness + 1])\n            rotate([90, 0, 0])\n                linear_extrude(height=1)\n                    text(str(i), size=3, halign=\"center\");\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    cipher_wheel();\n    support_wall();\n    cipher_markings();\n    \n    // Additional furniture details - small feet\n    for (x = [-bookend_width/2 + 5, bookend_width/2 - 5])\n        for (y = [-bookend_depth/2 + 5, bookend_depth/2 - 5])\n            translate([x, y, base_thickness/2 + 2])\n                cylinder(h=4, d=6);\n}",
    "renders": true
  },
  {
    "decorative_art": "dune",
    "openscad_code": "// Dune-inspired Lounge Chair (realistic style, medium complexity)\n// Overall dimensions: 120 x 80 x 70 mm\n\n$fn = 32;  // Smooth curves for 3D printing\nwall = 2;  // Wall thickness for 3D printing\n\nmodule dune_surface(length, width, height, ripples) {\n    // Create a curved dune-like surface with ripples\n    difference() {\n        // Main curved base\n        hull() {\n            translate([0, 0, 0]) \n                sphere(r=height/2);\n            translate([length, 0, 0]) \n                sphere(r=height/2);\n            translate([0, width, 0]) \n                sphere(r=height/2);\n            translate([length, width, 0]) \n                sphere(r=height/2);\n        }\n        \n        // Add ripple details\n        for (i = [1:ripples]) {\n            rotate([0, 0, 30*i])\n            translate([length/2, width/2, -height/2])\n                cylinder(h=height+5, r1=length/2 - i*5, r2=length/3 - i*5);\n        }\n    }\n}\n\nmodule chair_frame() {\n    // Main seating surface\n    difference() {\n        translate([10, 10, 30]) \n            dune_surface(100, 60, 15, 5);\n        \n        // Hollow out for printability\n        translate([15, 15, 32]) \n            scale([0.9, 0.9, 0.8]) \n            dune_surface(90, 50, 15, 5);\n    }\n    \n    // Backrest\n    difference() {\n        translate([70, 10, 45])\n            rotate([0, 15, 0])\n            scale([1, 1, 1.5])\n            dune_surface(50, 60, 12, 3);\n        \n        // Hollow backrest\n        translate([75, 15, 47])\n            rotate([0, 15, 0])\n            scale([0.85, 0.85, 1.2])\n            dune_surface(40, 50, 12, 3);\n    }\n    \n    // Support legs\n    module leg(x, y) {\n        // Front legs\n        translate([x, y, 0])\n            cylinder(h=30, r=4);\n        translate([x, y+40, 0])\n            cylinder(h=30, r=4);\n            \n        // Back legs\n        translate([x+90, y, 0])\n            cylinder(h=30, r=4);\n        translate([x+90, y+40, 0])\n            cylinder(h=30, r=4);\n    }\n    \n    // Create all legs\n    leg(15, 5);\n    \n    // Cross-bracing\n    translate([15, 25, 15])\n        rotate([90, 0, 0])\n        cylinder(h=90, r=2);\n        \n    translate([15, 45, 15])\n        rotate([90, 0, 0])\n        cylinder(h=90, r=2);\n}\n\nmodule decorative_elements() {\n    // Pattern strips on seating surface\n    for (i = [1:4]) {\n        translate([20 + i*20, 10, 47])\n            rotate([90, 0, 0])\n            cylinder(h=60, r=1, $fn=6);\n    }\n    \n    // Wind erosion pattern on backrest\n    for (i = [1:3]) {\n        for (j = [1:3]) {\n            translate([75 + i*8, 15 + j*15, 55])\n                sphere(r=1.5);\n        }\n    }\n    \n    // Corner reinforcements\n    difference() {\n        // Solid corner pieces\n        translate([10, 10, 30])\n            sphere(r=5);\n        // Hollow for material saving\n        translate([10, 10, 30])\n            sphere(r=3);\n    }\n    \n    // Matching corners\n    for (x = [10, 110]) {\n        for (y = [10, 70]) {\n            if (x != 10 || y != 10) {\n                translate([x, y, 30])\n                    sphere(r=5);\n                translate([x, y, 30])\n                    sphere(r=3);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    chair_frame();\n    decorative_elements();\n}",
    "renders": true
  },
  {
    "decorative_art": "echo",
    "openscad_code": "// Echo Furniture - Decorative Side Table\n// Realistic style with medium complexity\n// Dimensions: 120mm diameter, 450mm height\n\n// Overall parameters\ntable_height = 450;\ntable_top_d = 120;\nleg_d = 15;\nwall_thickness = 2;\n\n// Main table top with echo pattern\nmodule table_top() {\n    difference() {\n        // Main circular top\n        cylinder(h=8, d=table_top_d, $fn=64);\n        \n        // Echo pattern - concentric rings\n        for (i = [1:3:15]) {\n            translate([0, 0, 4])\n            cylinder(h=8.1, d=table_top_d - i*8, $fn=64);\n        }\n        \n        // Central echo chamber\n        translate([0, 0, 4])\n        cylinder(h=8.1, d=20, $fn=32);\n    }\n}\n\n// Decorative ring detail under table top\nmodule ring_detail() {\n    difference() {\n        cylinder(h=6, d=table_top_d + 6, $fn=64);\n        cylinder(h=6.1, d=table_top_d, $fn=64);\n    }\n}\n\n// Curved leg with echo chambers\nmodule leg(pos_x, pos_y) {\n    translate([pos_x, pos_y, 0]) {\n        // Main leg post\n        cylinder(h=table_height - 14, d=leg_d, $fn=32);\n        \n        // Echo chambers along leg\n        for (i = [1:4:5]) {\n            translate([0, 0, i * 70])\n            difference() {\n                sphere(d=leg_d + 8, $fn=32);\n                sphere(d=leg_d + 4, $fn=32);\n            }\n        }\n        \n        // Base foot\n        translate([0, 0, table_height - 14])\n        cylinder(h=8, d=leg_d + 4, $fn=32);\n    }\n}\n\n// Support ring connecting legs\nmodule support_ring() {\n    translate([0, 0, table_height/2])\n    difference() {\n        cylinder(h=wall_thickness, d=table_top_d - 20, $fn=64);\n        cylinder(h=wall_thickness + 0.1, d=table_top_d - 30, $fn=64);\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0, 0, table_height - 6])\n    table_top();\n    \n    // Ring detail under top\n    translate([0, 0, table_height - 14])\n    ring_detail();\n    \n    // Four legs\n    leg_pos = table_top_d/2 - leg_d;\n    leg(leg_pos, leg_pos);\n    leg(-leg_pos, leg_pos);\n    leg(leg_pos, -leg_pos);\n    leg(-leg_pos, -leg_pos);\n    \n    // Support ring\n    support_ring();\n    \n    // Bottom shelf with echo pattern\n    translate([0, 0, 50])\n    difference() {\n        cylinder(h=6, d=table_top_d - 10, $fn=64);\n        \n        // Echo pattern on shelf\n        for (i = [1:3:12]) {\n            translate([0, 0, 3])\n            cylinder(h=6.1, d=table_top_d - 10 - i*6, $fn=64);\n        }\n        \n        // Central opening\n        translate([0, 0, 3])\n        cylinder(h=6.1, d=15, $fn=32);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "flux",
    "openscad_code": "// Flux Chair - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm width x 110mm depth x 85mm height\n\n// Wall thickness constant\nwall = 2;\n\n// Main seat module\nmodule seat() {\n    // Seat surface with rounded edges\n    difference() {\n        // Main seat block\n        translate([0, 0, 40])\n            minkowski() {\n                cube([100, 90, wall], center=true);\n                sphere(wall/2);\n            }\n        \n        // Hollow out seat\n        translate([0, 0, 42])\n            cube([96, 86, wall+2], center=true);\n    }\n    \n    // Seat edge detail\n    for (i = [-45, 45]) {\n        translate([i, 0, 40])\n            rotate([0, 90, 0])\n                cylinder(h=90, r1=wall, r2=wall, $fn=20);\n    }\n}\n\n// Flux-inspired backrest\nmodule backrest() {\n    // Main backrest frame\n    difference() {\n        // Outer frame\n        translate([0, -40, 65])\n            cube([100, wall, 50], center=true);\n        \n        // Inner cutout\n        translate([0, -38, 65])\n            cube([96, wall+2, 46], center=true);\n    }\n    \n    // Flux curve elements\n    for (i = [-40:20:40]) {\n        hull() {\n            translate([i, -40, 45])\n                sphere(wall);\n            translate([i+10, -40, 65])\n                sphere(wall);\n            translate([i-10, -40, 85])\n                sphere(wall);\n        }\n    }\n}\n\n// Front legs with flux joint detail\nmodule front_legs() {\n    for (x = [-40, 40]) {\n        // Main leg\n        translate([x, 35, 20])\n            cylinder(h=40, r1=wall*2, r2=wall*2, $fn=20);\n        \n        // Flux joint sphere\n        translate([x, 35, 40])\n            sphere(wall*2.5);\n        \n        // Leg base detail\n        translate([x, 35, 0])\n            cylinder(h=wall, r1=wall*3, r2=wall*2.5, $fn=20);\n    }\n}\n\n// Rear legs with integrated back support\nmodule rear_legs() {\n    for (x = [-40, 40]) {\n        // Main leg\n        translate([x, -35, 20])\n            cylinder(h=40, r1=wall*2, r2=wall*2, $fn=20);\n        \n        // Support brace\n        translate([x, -35, 40])\n            rotate([90, 0, 0])\n                cylinder(h=75, r1=wall, r2=wall, $fn=20);\n        \n        // Flux connector\n        translate([x, -35, 40])\n            sphere(wall*2.5);\n    }\n}\n\n// Cross bracing\nmodule bracing() {\n    // Side braces\n    for (y = [-35, 35]) {\n        translate([0, y, 20])\n            rotate([90, 0, 0])\n                cylinder(h=80, r1=wall, r2=wall, $fn=20);\n    }\n    \n    // Front-back brace\n    translate([0, 0, 10])\n        rotate([0, 90, 0])\n            cylinder(h=110, r1=wall, r2=wall, $fn=20);\n}\n\n// Decorative flux pattern on back\nmodule back_pattern() {\n    for (i = [-30:15:30]) {\n        for (j = [50:10:80]) {\n            translate([i, -40, j])\n                sphere(wall/2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    seat();\n    backrest();\n    front_legs();\n    rear_legs();\n    bracing();\n    back_pattern();\n}",
    "renders": true
  },
  {
    "decorative_art": "grit",
    "openscad_code": "// Grit-style bookshelf with decorative geometric pattern\n// Overall dimensions: 120mm W x 30mm D x 150mm H\n\n$fn = 32;\n\n// Main shelf structure\nmodule shelf_frame() {\n    // Bottom base plate\n    cube([120, 30, 4]);\n    \n    // Side supports\n    translate([0, 0, 0]) cube([4, 30, 150]);\n    translate([116, 0, 0]) cube([4, 30, 150]);\n    \n    // Back panel\n    translate([4, 26, 0]) cube([112, 4, 150]);\n    \n    // Top frame\n    translate([0, 0, 146]) cube([120, 30, 4]);\n}\n\n// Individual shelf layer\nmodule shelf_layer(height) {\n    // Shelf surface\n    translate([4, 4, height]) cube([112, 22, 3]);\n    \n    // Front support beam\n    translate([4, 0, height]) cube([112, 4, 3]);\n}\n\n// Geometric grit pattern for side panels\nmodule grit_pattern() {\n    // Diamond pattern elements\n    for (y = [10:25:140]) {\n        for (x = [8:20:110]) {\n            translate([0, 15, y]) rotate([0, 90, 0]) \n                cylinder(h=2, r1=6, r2=0);\n            translate([120, 15, y]) rotate([0, 90, 0]) \n                cylinder(h=2, r1=6, r2=0);\n        }\n    }\n    \n    // Rectangular grid overlay\n    for (i = [0:5:150]) {\n        translate([4, 2, i]) cube([112, 2, 1]);\n        translate([4, 26, i]) cube([112, 2, 1]);\n    }\n}\n\n// Decorative frame joints\nmodule corner_joints() {\n    // Front corners\n    translate([0, 0, 0]) cube([6, 6, 6]);\n    translate([114, 0, 0]) cube([6, 6, 6]);\n    translate([0, 0, 144]) cube([6, 6, 6]);\n    translate([114, 0, 144]) cube([6, 6, 6]);\n    \n    // Back corners\n    translate([0, 24, 0]) cube([6, 6, 6]);\n    translate([114, 24, 0]) cube([6, 6, 6]);\n    translate([0, 24, 144]) cube([6, 6, 6]);\n    translate([114, 24, 144]) cube([6, 6, 6]);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    shelf_frame();\n    \n    // Add shelves\n    shelf_layer(40);\n    shelf_layer(80);\n    shelf_layer(120);\n    \n    // Add grit pattern\n    grit_pattern();\n    \n    // Add decorative joints\n    corner_joints();\n    \n    // Center support beam\n    translate([58, 4, 0]) cube([4, 22, 150]);\n    \n    // Small decorative spheres on top\n    translate([10, 15, 150]) sphere(r=3);\n    translate([110, 15, 150]) sphere(r=3);\n}",
    "renders": true
  },
  {
    "decorative_art": "halo",
    "openscad_code": "// Halo Furniture - Decorative Circular Wall Shelf\n// Realistic style, medium complexity\n// Dimensions: 120mm diameter, 40mm depth\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main parameters\nouter_diameter = 120;\ninner_diameter = 80;\ndepth = 40;\nwall_thickness = 2;\nshelf_thickness = 3;\n\n// Halo ring with realistic proportions\nmodule halo_ring() {\n    // Outer decorative ring\n    difference() {\n        cylinder(h=depth, d=outer_diameter, center=true);\n        cylinder(h=depth+1, d=outer_diameter-wall_thickness*2, center=true);\n    }\n    \n    // Inner shelf surface\n    difference() {\n        cylinder(h=shelf_thickness, d=inner_diameter-wall_thickness, center=true);\n        translate([0, 0, -shelf_thickness/2])\n            cylinder(h=shelf_thickness+1, d=inner_diameter-wall_thickness*3, center=true);\n    }\n}\n\n// Structural support ribs\nmodule support_ribs() {\n    rib_count = 8;\n    rib_width = 4;\n    rib_height = depth-4;\n    \n    for(i=[0:rib_count-1]) {\n        rotate([0, 0, i*360/rib_count])\n        translate([(inner_diameter+outer_diameter)/4, 0, 0])\n            cube([rib_width, (outer_diameter-inner_diameter)/2-2, rib_height], center=true);\n    }\n}\n\n// Mounting bracket system\nmodule mounting_system() {\n    bracket_size = 8;\n    bracket_depth = 6;\n    \n    // Hidden mounting bracket\n    translate([0, 0, depth/2])\n    intersection() {\n        cube([bracket_size, bracket_size, bracket_depth], center=true);\n        cylinder(h=bracket_depth+1, d=bracket_size, center=true);\n    }\n    \n    // Screw holes\n    for(x=[-1, 1]) {\n        for(y=[-1, 1]) {\n            translate([x*bracket_size/3, y*bracket_size/3, depth/2+bracket_depth/2])\n                rotate([180, 0, 0])\n                cylinder(h=bracket_depth+1, d=2.2, center=false);\n        }\n    }\n}\n\n// Decorative pattern on front face\nmodule decorative_pattern() {\n    pattern_depth = 1;\n    \n    // Concentric decorative rings\n    for(r=[inner_diameter/2+5:5:(outer_diameter/2-5)]) {\n        difference() {\n            translate([0, 0, depth/2-pattern_depth/2])\n                cylinder(h=pattern_depth, d=r*2, center=true);\n            translate([0, 0, depth/2-pattern_depth/2-0.1])\n                cylinder(h=pattern_depth+0.2, d=r*2-2, center=true);\n        }\n    }\n    \n    // Radial details\n    detail_count = 12;\n    detail_width = 2;\n    detail_length = (outer_diameter-inner_diameter)/2-4;\n    \n    for(i=[0:detail_count-1]) {\n        rotate([0, 0, i*360/detail_count])\n        translate([(inner_diameter+outer_diameter)/4, 0, depth/2-pattern_depth/2+0.1])\n            cube([detail_width, detail_length, pattern_depth], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main halo structure\n    halo_ring();\n    \n    // Support structure\n    support_ribs();\n    \n    // Mounting hardware\n    mounting_system();\n    \n    // Decorative elements\n    decorative_pattern();\n}",
    "renders": true
  },
  {
    "decorative_art": "ion",
    "openscad_code": "// Ion-style accent table / pedestal (Art-Deco inspired)\n// Overall height 120 mm, footprint 80 mm x 80 mm\n\n// Wall thickness constant\nwall = 2;\n\n// Main pedestal body – octagonal prism\nmodule pedestal_body() {\n    linear_extrude(height = 100, center = false, convexity = 10) {\n        offset(r = 2) {  // smooth edges\n            circle(d = 60, $fn = 8);  // octagon\n        }\n    }\n}\n\n// Top cap with raised ionic-style rim\nmodule top_cap() {\n    difference() {\n        union() {\n            // Main top disc\n            cylinder(h = 5, d = 65, $fn = 48);\n            // Raised rim\n            translate([0, 0, 5])\n                cylinder(h = 8, d1 = 65, d2 = 70, $fn = 48);\n        }\n        // Hollow centre\n        translate([0, 0, -1])\n            cylinder(h = 15, d = 65 - 2*wall, $fn = 48);\n    }\n}\n\n// Bottom plinth\nmodule bottom_plinth() {\n    difference() {\n        cylinder(h = 15, d = 80, $fn = 48);\n        translate([0, 0, -1])\n            cylinder(h = 17, d = 80 - 2*wall, $fn = 48);\n    }\n}\n\n// Vertical fluting on the body\nmodule fluting() {\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([28, -1.5, 5])\n                cube([wall, 3, 90]);\n    }\n}\n\n// Decorative corner scrolls (simplified volutes)\nmodule scroll() {\n    difference() {\n        union() {\n            // Base scroll\n            translate([0, 0, 5])\n                rotate([0, 90, 0])\n                    cylinder(h = 10, d = 8, $fn = 20);\n            // Top curl\n            translate([0, 0, 9])\n                rotate([0, 90, 0])\n                    cylinder(h = 10, d = 6, $fn = 20);\n        }\n        // Hollow\n        translate([0, 0, 5])\n            rotate([0, 90, 0])\n                cylinder(h = 11, d = 4, $fn = 20);\n    }\n}\n\nmodule corner_scrolls() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([30, 30, 0])\n                scroll();\n    }\n}\n\n// Assembly\nunion() {\n    // Core structure\n    difference() {\n        union() {\n            pedestal_body();\n            top_cap();\n            bottom_plinth();\n        }\n        // Central hollow shaft\n        translate([0, 0, -5])\n            cylinder(h = 130, d = 50 - 2*wall, $fn = 48);\n    }\n\n    // Detailing\n    fluting();\n    corner_scrolls();\n}",
    "renders": true
  },
  {
    "decorative_art": "jade",
    "openscad_code": "// Jade armchair with curved back and traditional cloud patterns\n// Overall dimensions: 80 x 60 x 75 mm\n\nchair_width = 60;\nchair_depth = 45;\nchair_height = 75;\nseat_height = 40;\nwall_thickness = 2;\n\nmodule cloud_pattern(height) {\n    // Simple cloud-shaped cutouts for decoration\n    for(i = [0:1]) {\n        translate([i*6, 0, height/2])\n            scale([1, 0.7, 1])\n                sphere(d=5, $fn=20);\n    }\n    translate([3, -2, height/2])\n        sphere(d=4, $fn=20);\n    translate([3, 2, height/2])\n        sphere(d=4, $fn=20);\n}\n\nmodule back_support() {\n    // Curved backrest with cloud cutouts\n    difference() {\n        // Main backrest shape\n        translate([-chair_width/2, -chair_depth/4, seat_height])\n            rotate([0, 10, 0])\n                cube([chair_width, wall_thickness, chair_height-seat_height]);\n        \n        // Cloud pattern cutouts\n        for(x = [-20:10:20]) {\n            translate([x, -chair_depth/4 + 1, seat_height + 15])\n                cloud_pattern(10);\n        }\n    }\n}\n\nmodule armrest() {\n    // Curved armrest with cloud motif\n    difference() {\n        union() {\n            // Vertical support\n            translate([0, 0, 0])\n                cylinder(h=seat_height + 5, d=6, $fn=32);\n            \n            // Horizontal arm\n            translate([0, -15, seat_height + 5])\n                rotate([0, -15, 0])\n                    cube([20, 6, 6]);\n        }\n        \n        // Decorative hole\n        translate([0, 0, seat_height/2])\n            cylinder(h=wall_thickness + 2, d=3, $fn=16);\n    }\n}\n\nmodule leg() {\n    // Tapered leg with rounded base\n    cylinder(h1=seat_height, h2=seat_height-5, d1=4, d2=6, $fn=32);\n}\n\nmodule seat() {\n    // Seat with cloud pattern edge\n    difference() {\n        union() {\n            // Main seat\n            translate([0, 0, seat_height - wall_thickness])\n                cube([chair_width - 10, chair_depth - 5, wall_thickness], center=true);\n            \n            // Front edge curve\n            translate([0, chair_depth/2 - 2.5, seat_height - wall_thickness])\n                rotate([90, 0, 0])\n                    cylinder(h=chair_width - 10, r=2.5, $fn=32);\n        }\n        \n        // Cloud cutouts on front edge\n        for(x = [-25:10:25]) {\n            translate([x, chair_depth/2 - 2.5, seat_height - wall_thickness/2])\n                cloud_pattern(wall_thickness);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Backrest\n    back_support();\n    \n    // Armrests (left and right)\n    translate([chair_width/2 - 10, 0, 0])\n        armrest();\n    mirror([1, 0, 0])\n        translate([chair_width/2 - 10, 0, 0])\n            armrest();\n    \n    // Legs\n    translate([chair_width/2 - 15, chair_depth/2 - 10, 0])\n        leg();\n    translate([-chair_width/2 + 15, chair_depth/2 - 10, 0])\n        leg();\n    translate([chair_width/2 - 15, -chair_depth/2 + 10, 0])\n        leg();\n    translate([-chair_width/2 + 15, -chair_depth/2 + 10, 0])\n        leg();\n    \n    // Decorative stretcher between front legs\n    translate([0, chair_depth/2 - 10, seat_height/2])\n        rotate([90, 0, 0])\n            cylinder(h=chair_width - 30, d=4, $fn=32);\n}",
    "renders": true
  },
  {
    "decorative_art": "kestrel",
    "openscad_code": "// Kestrel Decorative Shelf Bracket - Realistic Style\n// Wall-mounted shelf bracket shaped like a kestrel in flight\n// Overall dimensions: 120mm wide x 80mm tall x 25mm deep\n\n$fn = 32;\n\n// Main wall mounting plate\nmodule wall_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, 12.5])\n            cube([120, 80, 5], center=true);\n        \n        // Screw holes - 4mm diameter\n        for (x = [-40, 40])\n            for (y = [-25, 25])\n                translate([x, y, 15])\n                    cylinder(h=6, d=4, center=true);\n    }\n}\n\n// Kestrel body\nmodule kestrel_body() {\n    // Main body oval\n    translate([0, 15, 0])\n        scale([1, 0.7, 0.5])\n            sphere(d=50);\n    \n    // Chest protrusion\n    translate([0, 5, -5])\n        scale([0.8, 0.6, 0.4])\n            sphere(d=40);\n}\n\n// Kestrel head\nmodule kestrel_head() {\n    // Head sphere\n    translate([0, 35, 8])\n        sphere(d=25);\n    \n    // Beak\n    translate([0, 42, 8])\n        rotate([0, -20, 0])\n            cylinder(h=12, d1=8, d2=3, center=false);\n    \n    // Eye sockets\n    for (x = [-7, 7])\n        translate([x, 35, 12])\n            sphere(d=6);\n    \n    // Eyes\n    for (x = [-7, 7])\n        translate([x, 35, 14])\n            sphere(d=3);\n}\n\n// Wings\nmodule wings() {\n    // Left wing\n    translate([-25, 10, 2])\n        rotate([0, 0, -20])\n            difference() {\n                // Wing shape\n                translate([0, 0, 0])\n                    scale([1.2, 0.15, 0.8])\n                        sphere(d=50);\n                \n                // Wing feather cuts\n                for (i = [1:4])\n                    translate([-20 + i*8, -5, 0])\n                        rotate([0, 0, 15])\n                            cube([3, 20, 15], center=true);\n            }\n    \n    // Right wing\n    mirror([1, 0, 0])\n        translate([-25, 10, 2])\n            rotate([0, 0, -20])\n                difference() {\n                    // Wing shape\n                    translate([0, 0, 0])\n                        scale([1.2, 0.15, 0.8])\n                            sphere(d=50);\n                    \n                    // Wing feather cuts\n                    for (i = [1:4])\n                        translate([-20 + i*8, -5, 0])\n                            rotate([0, 0, 15])\n                                cube([3, 20, 15], center=true);\n                }\n}\n\n// Tail\nmodule tail() {\n    translate([0, -20, 0])\n        rotate([0, 0, 0])\n            difference() {\n                // Main tail\n                translate([0, 0, 0])\n                    scale([0.4, 1.2, 0.15])\n                        sphere(d=50);\n                \n                // Tail feather details\n                for (i = [-2:2])\n                    translate([i*6, -5, 0])\n                        cube([2.5, 15, 8], center=true);\n            }\n}\n\n// Talons gripping shelf\nmodule talons() {\n    // Left talon\n    translate([-15, 0, -10])\n        rotate([0, 30, 0])\n            cylinder(h=15, d=6, center=false);\n    \n    translate([-15, -3, -18])\n        rotate([0, 0, -30])\n            cylinder(h=8, d=4, center=false);\n    \n    // Right talon\n    translate([15, 0, -10])\n        rotate([0, 30, 0])\n            cylinder(h=15, d=6, center=false);\n    \n    translate([15, -3, -18])\n        rotate([0, 0, 30])\n            cylinder(h=8, d=4, center=false);\n}\n\n// Shelf support bar\nmodule shelf_support() {\n    // Horizontal support\n    translate([0, -5, -20])\n        cube([90, 8, 5], center=true);\n    \n    // Support struts\n    for (x = [-30, 30])\n        translate([x, -5, -12.5])\n            cube([5, 8, 15], center=true);\n}\n\n// Assembly\nunion() {\n    wall_plate();\n    \n    // Kestrel figure\n    union() {\n        kestrel_body();\n        kestrel_head();\n        wings();\n        tail();\n        talons();\n    }\n    \n    // Shelf support\n    shelf_support();\n}",
    "renders": true
  },
  {
    "decorative_art": "lyric",
    "openscad_code": "// Lyric Furniture: \"STAND\" music stand for sheet music\n// Overall dimensions: 110 mm tall x 80 mm wide x 70 mm deep\n// Wall thickness: 2 mm throughout for 3D printing\n\n// Base module - sturdy tripod\nmodule tripod_base() {\n    // Center hub\n    cylinder(h=8, r=6, $fn=20);\n    \n    // Three legs at 120° angles\n    for (a = [0, 120, 240]) {\n        rotate([0, 0, a]) \n            translate([0, 6, 4])\n                cube([20, 4, 8], center=true);\n    }\n}\n\n// Adjustable vertical post\nmodule vertical_post() {\n    // Outer sleeve\n    difference() {\n        cylinder(h=60, r=4, $fn=20);\n        translate([0, 0, 2])\n            cylinder(h=58, r=2, $fn=20);\n    }\n    \n    // Inner adjustable rod\n    translate([0, 0, 60])\n        cylinder(h=30, r=2, $fn=16);\n}\n\n// Music tray with decorative cutout\nmodule music_tray() {\n    // Main tray surface - slight angle for reading\n    rotate([75, 0, 0])\n        cube([60, 2, 80], center=true);\n    \n    // Front lip to hold sheets\n    translate([0, -41, 0])\n        cube([60, 4, 2], center=true);\n    \n    // Decorative music note cutout\n    translate([-20, -20, 2])\n        rotate([0, 75, 0])\n            scale([0.8, 0.8, 1])\n                music_note_cutout();\n    \n    // Rear support arms\n    for (x = [-25, 25]) {\n        translate([x, 0, -15])\n            rotate([0, 15, 0])\n                cube([2, 2, 30], center=true);\n    }\n}\n\n// Music note decorative element\nmodule music_note_cutout() {\n    difference() {\n        // Note head\n        translate([0, 0, 0])\n            sphere(r=5, $fn=16);\n        \n        // Stem\n        translate([4.5, -2, 0])\n            cube([2, 15, 2], center=true);\n        \n        // Flag\n        translate([5.5, 11, 0])\n            rotate([0, 0, -30])\n                cube([1, 8, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base at origin\n    tripod_base();\n    \n    // Post rising from base\n    translate([0, 0, 8])\n        vertical_post();\n    \n    // Tray at top of post\n    translate([0, 0, 95])\n        music_tray();\n    \n    // Small adjustment knob\n    translate([0, 0, 75])\n        rotate([90, 0, 0])\n            cylinder(h=8, r=3, $fn=12);\n}",
    "renders": true
  },
  {
    "decorative_art": "moss",
    "openscad_code": "// Moss Coffee Table - Realistic Style\n// A low, round coffee table with organic moss-like texture on top and legs\n// Dimensions: 140mm diameter, 45mm height\n\n// Parameters\ntable_diameter = 140;\ntable_height = 45;\nleg_height = 40;\nwall_thickness = 2;\nmoss_height = 8;\n\n// Main table top with moss texture\nmodule table_top() {\n    // Solid base\n    difference() {\n        cylinder(h=5, d=table_diameter, $fn=64);\n        \n        // Hollow out center for material saving\n        translate([0, 0, -1])\n            cylinder(h=7, d=table_diameter - 2*wall_thickness, $fn=64);\n    }\n    \n    // Moss layer on top\n    translate([0, 0, 5]) {\n        // Base moss layer\n        cylinder(h=moss_height, d=table_diameter, $fn=64);\n        \n        // Organic moss clumps\n        for(i = [0:35]) {\n            angle = i * 10;\n            radius = table_diameter/2 * (0.7 + 0.25 * sin(i * 3));\n            x = cos(angle) * radius;\n            y = sin(angle) * radius;\n            \n            translate([x, y, moss_height + 1 + 2 * sin(i * 5)]) {\n                // Varied moss clumps\n                scale([1 + 0.3 * sin(i * 7), 1 + 0.2 * cos(i * 4), 1])\n                    sphere(d=4 + 2 * sin(i * 2), $fn=8);\n            }\n        }\n        \n        // Central moss cluster\n        translate([0, 0, moss_height + 3]) {\n            sphere(d=12, $fn=16);\n            for(j = [0:8]) {\n                angle2 = j * 45;\n                r = 6;\n                translate([cos(angle2) * r, sin(angle2) * r, 2])\n                    sphere(d=4, $fn=8);\n            }\n        }\n    }\n}\n\n// Decorative leg with organic curves\nmodule leg() {\n    // Main leg structure\n    linear_extrude(height=leg_height, scale=[0.8, 0.8], $fn=32)\n        circle(d=20, $fn=32);\n    \n    // Add decorative rings\n    for(h = [5, 15, 25, 35]) {\n        translate([0, 0, h])\n            cylinder(h=1, d=22, $fn=32);\n    }\n    \n    // Organic growth details\n    for(i = [0:5]) {\n        angle = i * 60;\n        translate([cos(angle) * 8, sin(angle) * 8, 20]) {\n            rotate([0, 0, angle + 30])\n                scale([0.5, 1, 1])\n                    sphere(d=6, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    table_top();\n    \n    // Four legs\n    leg_offset = table_diameter/2 - 25;\n    for(angle = [45, 135, 225, 315]) {\n        translate([cos(angle) * leg_offset, sin(angle) * leg_offset, 0]) {\n            leg();\n        }\n    }\n    \n    // Structural support ring between legs\n    translate([0, 0, 20]) {\n        difference() {\n            cylinder(h=wall_thickness, d=table_diameter - 40, $fn=64);\n            cylinder(h=wall_thickness + 2, d=table_diameter - 44, $fn=64);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "nova",
    "openscad_code": "// Nova Decorative Shelf - Realistic Style\n// Medium complexity OpenSCAD code for 3D printing\n\n$fn = 64;  // Smooth curves for realistic appearance\n\n// Main module\nmodule nova_shelf() {\n    // Overall dimensions: 120mm x 120mm x 30mm\n    \n    // Base plate with nova star pattern\n    difference() {\n        // Thick base (2mm for strength)\n        linear_extrude(height = 2)\n            difference() {\n                // Outer circle\n                circle(d = 120);\n                \n                // Inner star cutout (nova pattern)\n                nova_star_cutout(110);\n            }\n        \n        // Mounting holes for wall attachment\n        translate([0, -50, -1]) cylinder(h = 4, d = 6);\n        translate([0, 50, -1]) cylinder(h = 4, d = 6);\n    }\n    \n    // Decorative nova star frame\n    translate([0, 0, 2])\n        linear_extrude(height = 3)\n            nova_star_frame(108);\n    \n    // Shelf supports (8 points of nova star)\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([0, 45, 0])\n                shelf_support();\n    }\n    \n    // Central shelf surface\n    translate([0, 0, 5])\n        shelf_surface();\n    \n    // Decorative edge trim\n    translate([0, 0, 5.5])\n        linear_extrude(height = 1.5)\n            circle(d = 100);\n}\n\n// Star cutout pattern for base\nmodule nova_star_cutout(d) {\n    difference() {\n        circle(d = d);\n        \n        // 8-pointed star\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([0, d/2 - 15, 0])\n                    square([d/4, 30], center = true);\n        }\n    }\n}\n\n// Decorative star frame\nmodule nova_star_frame(d) {\n    difference() {\n        // Outer octagon\n        circle(d = d);\n        \n        // Inner star\n        scale([0.8, 0.8])\n            difference() {\n                circle(d = d);\n                nova_star_cutout(d * 0.9);\n            }\n    }\n}\n\n// Shelf support arms\nmodule shelf_support() {\n    // Main support beam\n    translate([-3, 0, 0])\n        cube([6, 45, 3]);\n    \n    // Decorative top cap\n    translate([0, 0, 3])\n        cylinder(h = 2, d = 8);\n    \n    // Structural rib\n    translate([-1.5, 20, 0])\n        cube([3, 5, 5]);\n}\n\n// Central shelf surface with nova pattern\nmodule shelf_surface() {\n    difference() {\n        // Main shelf circle\n        cylinder(h = 2, d = 100);\n        \n        // Nova star relief pattern\n        translate([0, 0, -0.1])\n            linear_extrude(height = 0.5)\n                nova_star_cutout(80);\n    }\n    \n    // Raised edge for items\n    translate([0, 0, 2])\n        linear_extrude(height = 1)\n            difference() {\n                circle(d = 100);\n                circle(d = 96);\n            }\n}\n\n// Generate the model\nnova_shelf();",
    "renders": true
  },
  {
    "decorative_art": "onyx",
    "openscad_code": "// Onyx Decorative Side Table (Medium Complexity)\n// Realistic onyx-styled furniture with carved details\n\n// Overall dimensions\ntable_height = 80;\ntable_top_d = 150;\nleg_taper = 0.7;\nwall_thickness = 2;\n\nmodule table_top() {\n    // Main onyx top with beveled edge\n    difference() {\n        // Solid top\n        cylinder(h=12, d=table_top_d, $fn=64);\n        \n        // Bevel inner edge\n        translate([0, 0, 10])\n            cylinder(h=5, d=table_top_d-8, $fn=64);\n        \n        // Central onyx pattern cavity\n        translate([0, 0, -1])\n            cylinder(h=14, d=60, $fn=6);\n    }\n    \n    // Decorative onyx banding\n    for(i=[1:6]) {\n        rotate([0, 0, i*60])\n            translate([table_top_d/2 - 8, 0, 6])\n                cube([16, 3, 4], center=true);\n    }\n}\n\nmodule leg_support() {\n    // Tapered leg with onyx striations\n    difference() {\n        // Main leg\n        cylinder(h1=table_height-12, h2=table_height-12, \n                 r1=8, r2=8*leg_taper, $fn=16);\n        \n        // Carved channels\n        for(i=[1:4]) {\n            rotate([0, 0, i*90])\n                translate([0, 0, 0])\n                    cube([2, 16, table_height-12], center=true);\n        }\n    }\n}\n\nmodule stretcher() {\n    // Cross stretcher between legs\n    rotate([90, 0, 0])\n        cylinder(h=table_top_d*0.7, r=3, center=true, $fn=16);\n}\n\nmodule onyx_base() {\n    // Decorative base platform\n    difference() {\n        cylinder(h=8, d=table_top_d*0.8, $fn=32);\n        cylinder(h=9, d=table_top_d*0.8-8, $fn=32);\n    }\n    \n    // Base feet\n    for(i=[1:4]) {\n        rotate([0, 0, i*90+45])\n            translate([table_top_d*0.35, 0, 4])\n                cylinder(h=8, r=6, $fn=8);\n    }\n}\n\nmodule onyx_inlay() {\n    // Geometric inlay pattern on top\n    for(i=[1:3]) {\n        rotate([0, 0, i*120])\n            translate([0, 0, 12.1])\n                difference() {\n                    cube([table_top_d-20, 4, 1], center=true);\n                    for(j=[1:5]) {\n                        translate([j*10-table_top_d/2+10, 0, 0])\n                            cylinder(h=2, r=2, $fn=6);\n                    }\n                }\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    table_top();\n    \n    // Onyx inlay\n    onyx_inlay();\n    \n    // Legs\n    for(i=[1:4]) {\n        rotate([0, 0, i*90+45])\n            translate([table_top_d/2-12, 0, -table_height+6])\n                leg_support();\n    }\n    \n    // Stretchers\n    for(i=[0:1]) {\n        rotate([0, 0, i*90])\n            translate([0, 0, -table_height/2+6])\n                stretcher();\n    }\n    \n    // Base\n    translate([0, 0, -table_height+8])\n        onyx_base();\n}",
    "renders": true
  },
  {
    "decorative_art": "pyre",
    "openscad_code": "// Pyre furniture - decorative fire pit / altar\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions\npyre_width = 80;\npyre_depth = 80;\npyre_height = 60;\nleg_height = 25;\nplatform_thickness = 8;\nlog_diameter = 6;\nlog_length = 30;\n\n// Wall thickness for 3D printing\nwall_thick = 2;\n\n// Base platform with decorative edges\nmodule base_platform() {\n    // Main platform\n    difference() {\n        cube([pyre_width, pyre_depth, platform_thickness], center=true);\n        \n        // Hollow center for material saving\n        translate([0, 0, -1])\n            cube([pyre_width - 2*wall_thick, pyre_depth - 2*wall_thick, platform_thick + 2], center=true);\n    }\n    \n    // Decorative beveled edges\n    for (i = [-1, 1]) {\n        translate([i * (pyre_width/2 - wall_thick/2), 0, platform_thickness/2 - 1])\n            rotate([0, 90, 0])\n                cylinder(h=pyre_depth, r=wall_thick/2, center=true);\n    }\n    for (j = [-1, 1]) {\n        translate([0, j * (pyre_depth/2 - wall_thick/2), platform_thickness/2 - 1])\n            rotate([90, 0, 0])\n                cylinder(h=pyre_width, r=wall_thick/2, center=true);\n    }\n}\n\n// Support legs with decorative cutouts\nmodule support_leg(pos_x, pos_y) {\n    translate([pos_x, pos_y, leg_height/2 + platform_thickness/2])\n        difference() {\n            // Main leg post\n            cube([wall_thick*2, wall_thick*2, leg_height], center=true);\n            \n            // Decorative diamond cutouts\n            translate([0, 0, 5])\n                rotate([0, 45, 0])\n                    cube([wall_thick*1.5, wall_thick*3, wall_thick*1.5], center=true);\n            translate([0, 0, -5])\n                rotate([45, 0, 0])\n                    cube([wall_thick*1.5, wall_thick*1.5, wall_thick*3], center=true);\n        }\n}\n\n// Fire bowl structure\nmodule fire_bowl() {\n    translate([0, 0, platform_thickness + leg_height + 10])\n        difference() {\n            // Outer bowl\n            cylinder(h=20, r1=pyre_width/2 - 10, r2=pyre_width/2 - 15, center=false);\n            \n            // Inner hollow\n            translate([0, 0, wall_thick])\n                cylinder(h=20, r1=pyre_width/2 - 10 - wall_thick, r22=pyre_width/2 - 15 - wall_thick, center=false);\n        }\n}\n\n// Decorative rim around bowl\nmodule bowl_rim() {\n    translate([0, 0, platform_thickness + leg_height + 20])\n        difference() {\n            cylinder(h=3, r=pyre_width/2 - 8, center=false);\n            translate([0, 0, -1])\n                cylinder(h=5, r=pyre_width/2 - 10, center=false);\n        }\n}\n\n// Individual log piece\nmodule log_piece(length, angle) {\n    rotate([0, 0, angle])\n        translate([0, 0, platform_thickness + leg_height + 10 + 5])\n            rotate([90, 0, 0])\n                cylinder(h=length, r=log_diameter/2, center=true);\n}\n\n// Stack of logs in pyre formation\nmodule pyre_logs() {\n    // Central vertical logs\n    for (i = [0:45:315]) {\n        log_piece(log_length*0.7, i);\n    }\n    \n    // Cross logs for structure\n    for (i = [22.5:45:337.5]) {\n        translate([0, 0, 5])\n            rotate([15, 0, 0])\n                log_piece(log_length*0.8, i);\n    }\n    \n    // Top cross pieces\n    for (i = [0:90:270]) {\n        translate([0, 0, 10])\n            rotate([30, 0, 0])\n                log_piece(log_length*0.6, i);\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    base_platform();\n    \n    // Support legs at corners\n    support_leg(pyre_width/2 - wall_thick*2, pyre_depth/2 - wall_thick*2);\n    support_leg(-pyre_width/2 + wall_thick*2, pyre_depth/2 - wall_thick*2);\n    support_leg(pyre_width/2 - wall_thick*2, -pyre_depth/2 + wall_thick*2);\n    support_leg(-pyre_width/2 + wall_thick*2, -pyre_depth/2 + wall_thick*2);\n    \n    // Fire bowl and logs\n    fire_bowl();\n    bowl_rim();\n    pyre_logs();\n}",
    "renders": true
  },
  {
    "decorative_art": "quest",
    "openscad_code": "// Quest Scroll Cabinet\n// A realistic medieval-style wooden cabinet designed to store quest scrolls\n// Overall dimensions: 120mm x 80mm x 100mm\n\n$fn = 32;\nwall_thickness = 2;\n\nmodule cabinet_frame() {\n    // Main body\n    difference() {\n        // Outer shell\n        cube([120, 80, 100]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([120 - 2*wall_thickness, 80 - 2*wall_thickness, 100 - wall_thickness]);\n        \n        // Door opening\n        translate([wall_thickness, wall_thickness, 20])\n            cube([120 - 2*wall_thickness, 80 - 2*wall_thickness, 80 - wall_thickness]);\n    }\n}\n\nmodule door() {\n    // Door panel\n    translate([wall_thickness, wall_thickness, 100 - 20])\n        cube([120 - 2*wall_thickness, 80 - 2*wall_thickness, 2]);\n    \n    // Door handle ring\n    translate([120 - 15, 40, 100 - 10])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h = 15, r1 = 4, r2 = 4);\n            cylinder(h = 16, r1 = 2, r2 = 2);\n        }\n    \n    // Hinges\n    for(y = [25, 55]) {\n        translate([0, y, 100 - 15])\n            cube([wall_thickness + 2, 8, 8]);\n    }\n}\n\nmodule scroll_compartments() {\n    // Internal dividers\n    for(x = [30, 60, 90]) {\n        translate([x, wall_thickness, 20])\n            cube([wall_thickness, 80 - 2*wall_thickness, 80 - wall_thickness]);\n    }\n    \n    // Bottom shelf\n    translate([wall_thickness, wall_thickness, 20])\n        cube([120 - 2*wall_thickness, 80 - 2*wall_thickness, wall_thickness]);\n}\n\nmodule decorative_elements() {\n    // Top cornice\n    translate([-2, -2, 100])\n        cube([124, 84, 5]);\n    \n    // Side panels with carved pattern\n    for(side = [0, 1]) {\n        translate([side * 120, 0, 50])\n            rotate([0, side * 90, 0])\n            for(i = [10:20:70]) {\n                translate([0, i, 0])\n                    cube([2, 10, 2]);\n            }\n    }\n    \n    // Quest symbol on door\n    translate([60, 40, 100 - 1])\n        union() {\n            // Shield outline\n            scale([1, 1.2, 1])\n            cylinder(h = 1, r1 = 15, r2 = 15);\n            \n            // Exclamation mark\n            translate([0, 0, 0.5])\n                cylinder(h = 15, r1 = 2, r2 = 2);\n            translate([0, 8, 0.5])\n                sphere(r = 4);\n        }\n}\n\n// Assembly\nunion() {\n    cabinet_frame();\n    door();\n    scroll_compartments();\n    decorative_elements();\n}",
    "renders": true
  },
  {
    "decorative_art": "rune",
    "openscad_code": "// Rune-inspired decorative stool with realistic proportions\n// Overall footprint ~120x120mm, height ~140mm, 2mm wall thickness\n\n// Parameters\n$fn = 32;\nleg_height = 120;\nseat_diameter = 110;\nleg_taper = 0.7;\nrune_depth = 1.5;\nwall_thickness = 2;\n\n// Main stool module\nmodule stool() {\n    // Four legs with rune carvings\n    for(i=[0:90:270]) {\n        rotate([0, 0, i]) \n            translate([seat_diameter/2 - 15, 0, 0])\n                leg();\n    }\n    \n    // Seat with rune border\n    seat();\n    \n    // Stretchers between legs for stability\n    stretchers();\n}\n\n// Individual leg with rune patterns\nmodule leg() {\n    // Main tapered leg\n    difference() {\n        // Tapered cylinder\n        linear_extrude(height=leg_height, scale=[leg_taper, leg_taper]) {\n            circle(r=15);\n        }\n        \n        // Hollow center\n        translate([0, 0, wall_thickness])\n            linear_extrude(height=leg_height - wall_thickness*2, scale=[leg_taper, leg_taper]) {\n                circle(r=13);\n            }\n    }\n    \n    // Rune carvings\n    translate([0, 0, leg_height/2])\n    rotate([90, 0, 0]) {\n        // Elder Futhark \"Algiz\" rune on each leg\n        rune_algiz();\n    }\n}\n\n// Algiz protection rune carving\nmodule rune_algiz() {\n    depth = rune_depth;\n    \n    // Vertical stem\n    cube([wall_thickness, 20, depth], center=true);\n    \n    // Upper arms\n    translate([0, 10, 0])\n        cube([10, wall_thickness, depth], center=true);\n    \n    // Lower arms\n    translate([0, -10, 0])\n        cube([10, wall_thickness, depth], center=true);\n    \n    // Triangular tips\n    translate([5, 10, 0])\n        rotate([0, 0, 45])\n        cube([wall_thickness*sqrt(2), 7, depth], center=true);\n    \n    translate([5, -10, 0])\n        rotate([0, 0, -45])\n        cube([wall_thickness*sqrt(2), 7, depth], center=true);\n}\n\n// Seat with rune border\nmodule seat() {\n    // Main seat disk\n    difference() {\n        cylinder(h=15, r=seat_diameter/2);\n        cylinder(h=15+1, r=seat_diameter/2 - wall_thickness);\n    }\n    \n    // Rune border pattern\n    for(angle=[0:30:359]) {\n        rotate([0, 0, angle])\n        translate([seat_diameter/2 - 8, 0, 7.5]) {\n            // Tiwaz rune pattern\n            rune_tiwaz();\n        }\n    }\n}\n\n// Tiwaz warrior rune for border\nmodule rune_tiwaz() {\n    depth = rune_depth;\n    \n    // Vertical shaft\n    cube([wall_thickness, 8, depth], center=true);\n    \n    // Diagonal arms\n    translate([-2.5, 2, 0])\n        rotate([0, 0, 45])\n        cube([7, wall_thickness, depth], center=true);\n    \n    translate([2.5, 2, 0])\n        rotate([0, 0, -45])\n        cube([7, wall_thickness, depth], center=true);\n}\n\n// Cross stretchers for stability\nmodule stretchers() {\n    stretcher_height = leg_height * 0.6;\n    \n    // X-shaped stretchers\n    difference() {\n        union() {\n            // First diagonal\n            rotate([0, 0, 45])\n            translate([0, 0, stretcher_height])\n                cube([seat_diameter*1.2, wall_thickness, wall_thickness], center=true);\n            \n            // Second diagonal\n            rotate([0, 0, -45])\n            translate([0, 0, stretcher_height])\n                cube([seat_diameter*1.2, wall_thickness, wall_thickness], center=true);\n        }\n        \n        // Remove center overlap for aesthetic\n        cylinder(h=wall_thickness+1, r=10);\n    }\n}\n\n// Assembly\nstool();",
    "renders": true
  },
  {
    "decorative_art": "skye",
    "openscad_code": "// Skye - Scottish Highland Cow Decorative Stool\n// Realistic style, medium complexity, 3D printable\n\nmodule leg(x, z) {\n    translate([x, 0, z]) {\n        // Main leg post\n        cylinder(h=45, d=12, $fn=20);\n        \n        // Decorative ring detail\n        translate([0, 0, 15])\n            cylinder(h=3, d=14, $fn=20);\n        \n        // Foot pad\n        translate([0, 0, -1])\n            cylinder(h=3, d=16, $fn=20);\n    }\n}\n\nmodule horn(side) {\n    translate([side * 22, 15, 38]) {\n        rotate([0, 15, side * 15])\n            cylinder(h=18, d1=4, d2=1.5, $fn=8);\n    }\n}\n\nmodule ear(side) {\n    translate([side * 18, 12, 42]) {\n        rotate([0, -10, side * 20])\n            scale([1, 0.6, 1])\n                sphere(d=8, $fn=12);\n    }\n}\n\nmodule eye(side) {\n    translate([side * 12, 18, 40]) {\n        difference() {\n            sphere(d=6, $fn=12);\n            translate([0, 2.5, 0])\n                sphere(d=4, $fn=10);\n        }\n    }\n}\n\nmodule nose() {\n    translate([0, 22, 38]) {\n        // Muzzle\n        sphere(d=12, $fn=16);\n        \n        // Nostrils\n        for(x=[-3, 3])\n            translate([x, 5, 0])\n                cylinder(h=3, d=2, $fn=8);\n    }\n}\n\nmodule fringe() {\n    for(i=[-20:4:20]) {\n        translate([i, 5, 48])\n            rotate([90, 0, 0])\n                cylinder(h=12, d=2, $fn=8);\n    }\n}\n\n// Main seat/body\ndifference() {\n    union() {\n        // Main body\n        translate([0, 0, 35])\n            scale([1.2, 1, 0.8])\n                sphere(d=50, $fn=32);\n        \n        // Seat top\n        translate([0, 0, 47])\n            cylinder(h=5, d=48, $fn=32);\n    }\n    \n    // Hollow interior for stool functionality\n    translate([0, 0, 25])\n        cylinder(h=25, d=44, $fn=32);\n}\n\n// Legs\nfor(x=[-15, 15])\n    leg(x, 0);\n\n// Horns\nhorn(1);\nhorn(-1);\n\n// Ears\near(1);\near(-1);\n\n// Eyes\neye(1);\neye(-1);\n\n// Nose and muzzle\nnose();\n\n// Fringe between horns\nfringe();\n\n// Tail\ntranslate([-25, -15, 35]) {\n    rotate([0, 0, 30])\n        cylinder(h=20, d=4, $fn=8);\n    translate([-28, -25, 35])\n        sphere(d=6, $fn=12);\n}",
    "renders": true
  },
  {
    "decorative_art": "talon",
    "openscad_code": "// Talon-inspired decorative furniture leg / table support\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions\ntotal_height = 120;\nbase_width = 40;\nclaw_width = 30;\nwall_thickness = 2;\n\n// Main talon structure - curved leg\nmodule talon_leg() {\n    // Central support spine\n    translate([0, 0, total_height/2])\n        rotate([0, 0, 0])\n        cylinder(h=total_height, r1=base_width/2, r2=claw_width/2, $fn=32);\n    \n    // Rear talon curve\n    translate([0, -base_width/2, total_height/3])\n        rotate([90, 0, 0])\n        cylinder(h=base_width, r1=base_width/3, r2=claw_width/3, $fn=32);\n    \n    // Front talon curve\n    translate([0, base_width/2, total_height/3])\n        rotate([90, 0, 0])\n        cylinder(h=base_width, r1=base_width/3, r2=claw_width/3, $fn=32);\n}\n\n// Claw details with realistic talon shape\nmodule claw_details() {\n    // Main claw hook\n    translate([0, 0, 0])\n        rotate([0, 0, 0])\n        difference() {\n            cylinder(h=claw_width*1.5, r1=claw_width/2, r2=claw_width/4, $fn=32);\n            translate([0, 0, -1])\n                cylinder(h=claw_width*1.5+2, r1=claw_width/2-wall_thickness, r2=claw_width/4-wall_thickness, $fn=32);\n        }\n    \n    // Curved claw tip\n    translate([0, claw_width/2, -claw_width/2])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=claw_width, r=claw_width/3, $fn=32);\n            translate([0, 0, -1])\n                cylinder(h=claw_width+2, r=claw_width/3-wall_thickness, $fn=32);\n        }\n}\n\n// Decorative scale texture pattern\nmodule scales_pattern() {\n    for(i = [1:3]) {\n        for(j = [0:5]) {\n            rotate([0, 0, j*60])\n            translate([0, 0, i*total_height/4])\n            scale([0.8, 0.8, 1])\n            difference() {\n                sphere(r=base_width/4, $fn=32);\n                translate([0, 0, -base_width/4-1])\n                    cube([base_width/2, base_width/2, base_width/2+2], center=true);\n            }\n        }\n    }\n}\n\n// Structural joint interface at top\nmodule joint_interface() {\n    translate([0, 0, total_height])\n    difference() {\n        // Main joint block\n        cube([base_width*1.2, base_width*1.2, 15], center=true);\n        \n        // Screw holes for mounting\n        for(pos = [[-base_width/3, -base_width/3], [base_width/3, -base_width/3], \n                   [-base_width/3, base_width/3], [base_width/3, base_width/3]]) {\n            translate([pos[0], pos[1], 0])\n                cylinder(h=16, r=2, $fn=16);\n        }\n        \n        // Central hollow for weight reduction\n        translate([0, 0, 5])\n            cube([base_width*0.8, base_width*0.8, 10], center=true);\n    }\n}\n\n// Base reinforcement ring\nmodule base_reinforcement() {\n    translate([0, 0, 0])\n    difference() {\n        cylinder(h=10, r=base_width*0.7, $fn=32);\n        cylinder(h=12, r=base_width*0.7-wall_thickness, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    talon_leg();\n    claw_details();\n    scales_pattern();\n    joint_interface();\n    base_reinforcement();\n}",
    "renders": true
  },
  {
    "decorative_art": "ursa",
    "openscad_code": "// Ursa Bear Decorative Stool / Side Table\n// Realistic style, medium complexity\n// Overall dimensions: 120mm diameter × 140mm height\n\nmodule leg(height=50, thickness=8) {\n    // Bear leg with paw\n    union() {\n        // Upper leg\n        translate([0, 0, height/2])\n            cylinder(h=height*0.7, d1=thickness*1.2, d2=thickness*0.8, $fn=16);\n        // Paw\n        translate([0, 0, height*0.1])\n            sphere(d=thickness*1.4, $fn=16);\n    }\n}\n\nmodule body() {\n    // Main bear body with seat on top\n    difference() {\n        // Bear torso\n        union() {\n            // Main body cylinder\n            cylinder(h=70, d=100, $fn=32);\n            // Rounded top\n            translate([0, 0, 70])\n                sphere(d=100, $fn=32);\n        }\n        // Hollow interior for printability\n        translate([0, 0, -5])\n            cylinder(h=80, d=96, $fn=32);\n    }\n}\n\nmodule head() {\n    // Bear head with ears\n    union() {\n        // Head sphere\n        translate([0, 0, 0])\n            sphere(d=45, $fn=32);\n        // Ears\n        for(pos = [[-18, 18, 10], [18, 18, 10]]) {\n            translate(pos)\n                sphere(d=12, $fn=16);\n        }\n        // Snout\n        translate([0, 20, -5])\n            sphere(d=20, $fn=16);\n    }\n}\n\nmodule snout_details() {\n    // Nose and mouth details\n    difference() {\n        // Nose\n        translate([0, 30, -3])\n            sphere(d=8, $fn=16);\n        // Mouth indent\n        translate([0, 28, -12])\n            rotate([90, 0, 0])\n                cylinder(h=15, d=6, $fn=16);\n    }\n}\n\nmodule seat_pattern() {\n    // Decorative honeycomb pattern on seat\n    for(r = [25, 40]) {\n        for(a = [0:30:330]) {\n            translate([r*cos(a), r*sin(a), 70])\n                cylinder(h=2, d=8, $fn=6);\n        }\n    }\n}\n\nmodule structural_supports() {\n    // Internal support ribs for strength\n    for(a = [0:45:315]) {\n        rotate([0, 0, a])\n            translate([30, 0, 35])\n                cube([60, 4, 70], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Legs - positioned at 45 degree angles\n    for(angle = [45, 135, 225, 315]) {\n        rotate([0, 0, angle])\n            translate([40, 0, 0])\n                rotate([15, 0, 0])\n                    leg(60, 10);\n    }\n    \n    // Head\n    translate([0, 0, 85])\n        union() {\n            head();\n            snout_details();\n        }\n    \n    // Seat surface\n    difference() {\n        translate([0, 0, 70])\n            cylinder(h=5, d=90, $fn=32);\n        translate([0, 0, 69])\n            cylinder(h=7, d=86, $fn=32);\n    }\n    \n    // Decorative seat pattern\n    seat_pattern();\n    \n    // Hidden internal supports\n    %structural_supports();\n}",
    "renders": true
  },
  {
    "decorative_art": "vale",
    "openscad_code": "// Vale - Decorative furniture piece with Celtic knot patterns\n// Overall dimensions: 120mm x 80mm x 40mm\n\n// Parameters\nwall_thickness = 2;\noverall_width = 120;\noverall_height = 80;\noverall_depth = 40;\nframe_width = 8;\npattern_depth = 1;\n\n// Main frame module\nmodule frame() {\n    // Bottom base\n    cube([overall_width, overall_depth, wall_thickness]);\n    \n    // Top base\n    translate([0, 0, overall_height - wall_thickness])\n        cube([overall_width, overall_depth, wall_thickness]);\n    \n    // Left side\n    translate([0, 0, wall_thickness])\n        cube([wall_thickness, overall_depth, overall_height - 2*wall_thickness]);\n    \n    // Right side\n    translate([overall_width - wall_thickness, 0, wall_thickness])\n        cube([wall_thickness, overall_depth, overall_height - 2*wall_thickness]);\n    \n    // Back panel\n    translate([wall_thickness, 0, wall_thickness])\n        cube([overall_width - 2*wall_thickness, wall_thickness, overall_height - 2*wall_thickness]);\n}\n\n// Celtic knot pattern module\nmodule knot_pattern() {\n    // Vertical bars\n    for (i = [0:1:3]) {\n        translate([frame_width + i*25, wall_thickness + 2, wall_thickness + 5])\n            cube([wall_thickness, overall_depth - 4 - wall_thickness, pattern_depth]);\n    }\n    \n    // Horizontal bars\n    for (i = [0:1:2]) {\n        translate([frame_width + 5, wall_thickness + 2 + i*12, wall_thickness + 5])\n            cube([overall_width - 2*frame_width - 10, wall_thickness, pattern_depth]);\n    }\n    \n    // Diagonal crosses\n    translate([frame_width + 15, wall_thickness + 5, wall_thickness + 5]) {\n        rotate([0, 0, 45])\n            cube([wall_thickness, 35, pattern_depth]);\n    }\n    translate([frame_width + 15, wall_thickness + 5, wall_thickness + 5]) {\n        rotate([0, 0, -45])\n            cube([wall_thickness, 35, pattern_depth]);\n    }\n}\n\n// Support feet module\nmodule feet() {\n    // Front left foot\n    translate([5, 5, -wall_thickness])\n        cylinder(h=wall_thickness, r=5);\n    \n    // Front right foot\n    translate([overall_width - 5, 5, -wall_thickness])\n        cylinder(h=wall_thickness, r=5);\n    \n    // Back left foot\n    translate([5, overall_depth - 5, -wall_thickness])\n        cylinder(h=wall_thickness, r=5);\n    \n    // Back right foot\n    translate([overall_width - 5, overall_depth - 5, -wall_thickness])\n        cylinder(h=wall_thickness, r=5);\n}\n\n// Decorative corner elements\nmodule corners() {\n    // Front left corner\n    translate([frame_width/2, frame_width/2, overall_height/2])\n        rotate([0, 0, 45])\n        cube([frame_width, frame_width, wall_thickness]);\n    \n    // Front right corner\n    translate([overall_width - frame_width/2, frame_width/2, overall_height/2])\n        rotate([0, 0, 45])\n        cube([frame_width, frame_width, wall_thickness]);\n    \n    // Back left corner\n    translate([frame_width/2, overall_depth - frame_width/2, overall_height/2])\n        rotate([0, 0, 45])\n        cube([frame_width, frame_width, wall_thickness]);\n    \n    // Back right corner\n    translate([overall_width - frame_width/2, overall_depth - frame_width/2, overall_height/2])\n        rotate([0, 0, 45])\n        cube([frame_width, frame_width, wall_thickness]);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    frame();\n    \n    // Feet for stability\n    feet();\n    \n    // Decorative elements\n    union() {\n        corners();\n        knot_pattern();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "wren",
    "openscad_code": "// Wren-shaped decorative wall shelf (realistic style, medium complexity)\n// Overall dimensions: ~120mm width x 80mm height x 40mm depth\n\nmodule body_shell() {\n    // Main body - hollow shell with 2mm walls\n    difference() {\n        // Outer shell\n        union() {\n            // Main body\n            translate([-15, 0, 0])\n                scale([1.2, 1, 1])\n                sphere(d=40, $fn=32);\n            \n            // Tail extension\n            translate([15, -8, 0])\n                rotate([0, 0, -20])\n                scale([1.5, 0.8, 0.6])\n                cylinder(h=35, d1=20, d2=8, $fn=20);\n                \n            // Head\n            translate([-25, 0, 8])\n                sphere(d=25, $fn=24);\n        }\n        \n        // Hollow interior\n        translate([-15, 0, 0])\n            scale([1.1, 0.9, 0.9])\n            sphere(d=36, $fn=32);\n        translate([-25, 0, 8])\n            scale([0.9, 0.9, 0.9])\n            sphere(d=22, $fn=24);\n    }\n}\n\nmodule beak() {\n    // Sharp triangular beak\n    translate([-37, 0, 5])\n        rotate([0, -30, 0])\n        cylinder(h=12, d1=0, d2=5, $fn=3);\n}\n\nmodule wings() {\n    // Folded wings against body\n    // Left wing\n    translate([-20, -18, 2])\n        rotate([0, 0, -15])\n        scale([0.8, 1.2, 0.2])\n        cylinder(h=35, d1=25, d2=15, $fn=20);\n    \n    // Right wing\n    translate([-20, 18, 2])\n        rotate([0, 0, 15])\n        scale([0.8, 1.2, 0.2])\n        cylinder(h=35, d1=25, d2=15, $fn=20);\n}\n\nmodule tail_feathers() {\n    // Detailed tail feathers\n    for(i = [0:4]) {\n        rotate([0, 0, -20 + i*8])\n        translate([22 + i*3, -5 + i*2, -5])\n            scale([0.3, 1, 0.1])\n            cylinder(h=20, d1=8, d2=4, $fn=3);\n    }\n}\n\nmodule eyes() {\n    // Eyes as small spheres\n    // Left eye\n    translate([-30, -8, 12])\n        sphere(d=4, $fn=12);\n    \n    // Right eye\n    translate([-30, 8, 12])\n        sphere(d=4, $fn=12);\n}\n\nmodule shelf_base() {\n    // Flat base for wall mounting\n    translate([0, 0, -20])\n        cube([80, 50, 4], center=true);\n}\n\nmodule shelf_supports() {\n    // Decorative support ribs\n    for(x = [-30:20:30]) {\n        translate([x, 0, -18])\n            cube([2, 48, 10], center=true);\n    }\n}\n\nmodule mounting_holes() {\n    // Keyhole mounting slots\n    for(x = [-25, 25]) {\n        translate([x, 0, -18])\n            rotate([90, 0, 0])\n            cylinder(h=5, d=8, $fn=20);\n        translate([x, 0, -18])\n            rotate([90, 0, 0])\n            cylinder(h=5, d=5, $fn=20);\n    }\n}\n\n// Assemble the wren shelf\nunion() {\n    // Main body structure\n    body_shell();\n    \n    // Attach parts\n    beak();\n    wings();\n    tail_feathers();\n    eyes();\n    \n    // Furniture elements\n    shelf_base();\n    shelf_supports();\n    \n    // Remove mounting holes\n    difference() {\n        children();\n        mounting_holes();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "xylo",
    "openscad_code": "// Xylo (Xylophone) Furniture Piece - Realistic Style, Medium Complexity\n// A decorative furniture item resembling a xylophone with structural supports\n\n// Overall dimensions\nlength = 120;\nwidth = 60;\nheight = 45;\nwall_thickness = 2;\n\n// Parameters for xylophone bars\nbar_width = 6;\nbar_height = 4;\nnum_bars = 8;\nbar_spacing = 3;\n\n// Support frame parameters\nleg_height = 40;\nleg_thickness = 3;\ncrossbar_height = 8;\n\nmodule xylophone_bar(len, h) {\n    difference() {\n        // Main bar body\n        cube([len, bar_width, h], center=true);\n        \n        // Rounded edges using cylinder subtraction\n        translate([len/2 - 1, 0, h/2])\n            rotate([90, 0, 0])\n            cylinder(h=bar_width, r=1, $fn=16);\n        translate([-len/2 + 1, 0, h/2])\n            rotate([90, 0, 0])\n            cylinder(h=bar_width, r=1, $fn=16);\n    }\n}\n\nmodule support_leg() {\n    difference() {\n        // Main leg\n        cube([leg_thickness, width - 10, leg_height], center=true);\n        \n        // Decorative cutout\n        translate([0, 0, leg_height/4])\n            cube([leg_thickness + 0.1, 15, leg_height/2], center=true);\n    }\n}\n\nmodule cross_support() {\n    // Horizontal support between legs\n    cube([length - 10, leg_thickness, crossbar_height], center=true);\n    \n    // Decorative end caps\n    translate([(length - 10)/2, 0, 0])\n        cylinder(h=leg_thickness + 0.1, r=3, center=true, $fn=16);\n    translate([-(length - 10)/2, 0, 0])\n        cylinder(h=leg_thickness + 0.1, r=3, center=true, $fn=16);\n}\n\nmodule xylophone_frame() {\n    // Left leg\n    translate([-length/2 + 10, 0, leg_height/2])\n        support_leg();\n    \n    // Right leg\n    translate([length/2 - 10, 0, leg_height/2])\n        support_leg();\n    \n    // Front cross support\n    translate([0, (width - 10)/2, leg_height - crossbar_height/2])\n        rotate([0, 0, 90])\n        cross_support();\n    \n    // Back cross support\n    translate([0, -(width - 10)/2, leg_height - crossbar_height/2])\n        rotate([0, 0, 90])\n        cross_support();\n}\n\nmodule xylophone_bars() {\n    // Calculate bar lengths (descending from center)\n    max_bar_length = length - 20;\n    min_bar_length = max_bar_length * 0.6;\n    \n    for(i = [0:num_bars-1]) {\n        // Calculate position and length\n        pos = (i - num_bars/2 + 0.5) * (bar_width + bar_spacing);\n        len = max_bar_length - (i * (max_bar_length - min_bar_length) / (num_bars - 1));\n        \n        // Position the bar\n        translate([0, pos, leg_height + bar_height/2 + 2])\n            xylophone_bar(len, bar_height);\n    }\n}\n\nmodule decorative_details() {\n    // Side decorative panels\n    for(side = [-1, 1]) {\n        translate([side * (length/2 - 5), 0, leg_height/2])\n            rotate([0, 90, 0])\n            difference() {\n                cube([leg_height, 15, wall_thickness], center=true);\n                for(hole = [1:3]) {\n                    translate([0, -5 + hole * 5, 0])\n                        cylinder(h=wall_thickness + 0.1, r=2, center=true, $fn=16);\n                }\n            }\n    }\n    \n    // Front/back decorative strips\n    for(end = [-1, 1]) {\n        translate([0, end * (width/2 - 2), leg_height - 5])\n            cube([length - 30, wall_thickness, 5], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Frame structure\n    xylophone_frame();\n    \n    // Xylophone bars\n    xylophone_bars();\n    \n    // Decorative details\n    decorative_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "yuki",
    "openscad_code": "// Yuki-inspired decorative side table\n// Realistic style, medium complexity\n// Overall dimensions: 120mm W x 120mm D x 450mm H\n\n// Parameters\ntable_top_thickness = 18;\ntable_top_radius = 60;\nleg_width = 20;\nleg_height = 400;\nshelf_height = 200;\njoint_size = 30;\nwall_thickness = 2;\n\nmodule rounded_cube(size, radius) {\n    hull() {\n        translate([radius, radius, 0])\n            cube([size.x - 2*radius, size.y - 2*radius, size.z]);\n        translate([radius, radius, radius])\n            sphere(r=radius);\n        translate([size.x - radius, radius, radius])\n            sphere(r=radius);\n        translate([radius, size.y - radius, radius])\n            sphere(r=radius);\n        translate([size.x - radius, size.y - radius, radius])\n            sphere(r=radius);\n    }\n}\n\nmodule table_top() {\n    difference() {\n        // Main top\n        union() {\n            cylinder(h=table_top_thickness, r=table_top_radius, $fn=60);\n            // Decorative edge profile\n            translate([0, 0, table_thickness])\n                cylinder(h=5, r1=table_top_radius, r2=table_top_radius-3, $fn=60);\n        }\n        // Hollow center for printability\n        cylinder(h=table_top_thickness+5, r=table_top_radius-wall_thickness, $fn=60);\n    }\n}\n\nmodule leg(pos_x, pos_y) {\n    // Main leg\n    difference() {\n        rounded_cube([leg_width, leg_width, leg_height], 3);\n        // Hollow for printability\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_cube([leg_width-2*wall_thickness, leg_width-2*wall_thickness, leg_height-2*wall_thickness], 1);\n    }\n    \n    // Decorative joint block\n    translate([0, 0, leg_height-joint_size])\n        difference() {\n            cube([leg_width+10, leg_width+10, joint_size], center=true);\n            cylinder(h=joint_size+2, r=8, center=true, $fn=20);\n        }\n}\n\nmodule shelf() {\n    // Shelf platform\n    difference() {\n        rounded_cube([table_top_radius*1.6, table_top_radius*1.6, 12], 5);\n        // Hollow for printability\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            rounded_cube([table_top_radius*1.6-2*wall_thickness, table_top_radius*1.6-2*wall_thickness, 12], 3);\n    }\n    \n    // Support brackets\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([table_top_radius*0.7, 0, -5])\n                cube([20, 4, 20], center=true);\n    }\n}\n\nmodule yuki_pattern() {\n    // Traditional yuki motif on legs\n    for(i=[0:3]) {\n        rotate([0, 0, i*90])\n            translate([leg_width/2, leg_width/2, 100])\n                for(j=[0:5]) {\n                    translate([0, 0, j*15])\n                        rotate([0, 0, 45])\n                            cube([8, 8, 2], center=true);\n                    translate([0, 0, j*15+7.5])\n                        rotate([0, 0, 45])\n                            cube([6, 6, 2], center=true);\n                }\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0, 0, leg_height])\n        table_top();\n    \n    // Legs\n    offset = table_top_radius * 0.7;\n    leg(offset, offset);\n    leg(-offset, offset);\n    leg(offset, -offset);\n    leg(-offset, -offset);\n    \n    // Shelf\n    translate([0, 0, shelf_height])\n        shelf();\n    \n    // Decorative elements\n    yuki_pattern();\n}",
    "renders": true
  },
  {
    "decorative_art": "zinnia",
    "openscad_code": "// Zinnia Flower Decorative Stool\n// Medium complexity realistic style with 3D print considerations\n\n// Overall dimensions\nstool_height = 45;\nseat_diameter = 30;\nbase_diameter = 40;\n\n// Wall thickness for 3D printing\nwall_thick = 2;\n\n// Petal module - creates one zinnia petal\nmodule petal(length, width, thickness) {\n    difference() {\n        union() {\n            // Main petal body\n            translate([0, -width/2, 0])\n                cube([length, width, thickness], center=true);\n            \n            // Rounded tip\n            translate([length/2, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=width, r=width/2, $fn=20);\n        }\n        \n        // Taper the base\n        translate([-length/2, 0, -thickness/2-0.1])\n            cube([length/2, width*1.2, thickness+0.2]);\n    }\n}\n\n// Create a ring of petals\nmodule petal_ring(radius, petal_count, petal_len, petal_wid, height) {\n    for(i = [0:petal_count-1]) {\n        angle = 360 * i / petal_count;\n        rotate([0, 0, angle])\n            translate([radius, 0, height])\n                rotate([0, -15, 0])\n                    petal(petal_len, petal_wid, wall_thick);\n    }\n}\n\n// Seat surface with zinnia pattern\nmodule zinnia_seat(diameter) {\n    difference() {\n        // Main seat disk\n        cylinder(h=wall_thick*2, r=diameter/2, $fn=60);\n        \n        // Center hole for weight reduction\n        cylinder(h=wall_thick*2+1, r=diameter/4, $fn=40);\n    }\n    \n    // First ring of petals (inner)\n    petal_ring(diameter/3, 12, 8, 3, wall_thick);\n    \n    // Second ring of petals (middle)\n    petal_ring(diameter/2.2, 16, 10, 3.5, wall_thick);\n    \n    // Third ring of petals (outer)\n    petal_ring(diameter/1.8, 20, 12, 4, wall_thick);\n}\n\n// Decorative support structure\nmodule support_column() {\n    // Central column with flower details\n    difference() {\n        cylinder(h=stool_height-wall_thick*2, r=base_diameter/4, $fn=40);\n        \n        // Vertical grooves for grip and style\n        for(i = [0:7]) {\n            rotate([0, 0, 45*i])\n                translate([base_diameter/4-0.5, -2, wall_thick])\n                    cube([1, 4, stool_height-wall_thick*4]);\n        }\n    }\n    \n    // Reinforcement rings\n    translate([0, 0, stool_height/3])\n        cylinder(h=wall_thick, r=base_diameter/3.5, $fn=40);\n    \n    translate([0, 0, stool_height*2/3])\n        cylinder(h=wall_thick, r=base_diameter/3.5, $fn=40);\n}\n\n// Stable base with zinnia pattern\nmodule flower_base() {\n    difference() {\n        cylinder(h=wall_thick*2, r=base_diameter/2, $fn=60);\n        \n        // Weight reduction hollow\n        cylinder(h=wall_thick*2+1, r=base_diameter/3, $fn=40);\n    }\n    \n    // Base petals for stability\n    petal_ring(base_diameter/2.5, 24, 6, 2.5, wall_thick);\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, 0])\n        flower_base();\n    \n    // Support column\n    translate([0, 0, wall_thick*2])\n        support_column();\n    \n    // Seat with zinnia design\n    translate([0, 0, stool_height-wall_thick])\n        zinnia_seat(seat_diameter);\n    \n    // Small fillets for printability\n    translate([0, 0, stool_height-wall_thick*2])\n        cylinder(h=wall_thick, r1=seat_diameter/2.2, r2=seat_diameter/2, $fn=40);\n    \n    translate([0, 0, wall_thick*2])\n        cylinder(h=wall_thick, r1=base_diameter/3, r2=base_diameter/2.5, $fn=40);\n}",
    "renders": true
  },
  {
    "decorative_art": "axiom",
    "openscad_code": "// Axiom bookshelf unit - modular, floating appearance with cantilever shelves\n// Overall size: 120mm W x 30mm D x 100mm H (desk-scale art piece)\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Overall dimensions\nwidth = 120;\ndepth = 30;\nheight = 100;\nwall = 2;           // 3D-print friendly wall thickness\nshelf_thick = 3;\n\nmodule shelf_unit() {\n    // Main vertical spine\n    translate([width/2-wall, 0, height/2])\n        cube([wall, depth, height], center=true);\n\n    // Back brace for stability\n    translate([width/2, depth/2-wall/2, height/2-wall])\n        cube([width, wall, height-wall*2], center=true);\n\n    // Shelves (five floating shelves with rounded fronts)\n    for (z = [20:20:height-20]) {\n        // Shelf plate\n        translate([width/2, 0, z])\n            cube([width-wall*2, depth-wall, shelf_thick], center=true);\n\n        // Rounded front edge\n        translate([width/2, depth/2-wall/2, z])\n            rotate([90,0,0])\n                cylinder(h=width-wall*2, r=wall, center=true);\n\n        // Hidden dovetail keys for realism\n        for (x = [width*0.25, width*0.75]) {\n            translate([x, depth/2-wall, z-shelf_thick/2-wall/2])\n                cube([wall*2, wall, wall], center=true);\n        }\n    }\n\n    // Side decorative ribs\n    for (x = [wall*2, width-wall*2]) {\n        translate([x, 0, height/2])\n            cube([wall, depth-wall*2, height], center=true);\n    }\n\n    // Base plinth\n    translate([width/2, 0, wall])\n        cube([width, depth+wall, wall*2], center=true);\n\n    // Top cap\n    translate([width/2, 0, height-wall])\n        cube([width, depth+wall, wall*2], center=true);\n\n    // Hidden mounting rail (realistic detail)\n    difference() {\n        translate([width/2, -depth/2+wall/2, height/2])\n            cube([width-wall*4, wall, height-wall*2], center=true);\n        // Cable management holes\n        for (z = [height*0.3:height*0.2:height*0.7]) {\n            translate([width*0.3, -depth/2+wall, z])\n                rotate([0,90,0])\n                    cylinder(h=wall+1, r=wall/2, center=true);\n            translate([width*0.7, -depth/2+wall, z])\n                rotate([0,90,0])\n                    cylinder(h=wall+1, r=wall/2, center=true);\n        }\n    }\n}\n\n// Render the complete bookshelf\nshelf_unit();",
    "renders": true
  },
  {
    "decorative_art": "blaze",
    "openscad_code": "// Blaze Furniture Decorative Shelf Unit\n// Realistic style, medium complexity\n// Overall dimensions: 120mm W x 80mm D x 100mm H\n\n// Parameters\nwall_thickness = 2;\nshelf_depth = 80;\nshelf_width = 120;\nshelf_height = 100;\nblaze_width = 8;\nblaze_height = 6;\nblaze_depth = 4;\n\n// Main shelf structure\nmodule shelf_unit() {\n    difference() {\n        // Main frame\n        union() {\n            // Back panel\n            translate([0, 0, shelf_height/2])\n                cube([shelf_width, wall_thickness, shelf_height], center=true);\n            \n            // Left side\n            translate([-shelf_width/2 + wall_thickness/2, shelf_depth/2, shelf_height/2])\n                cube([wall_thickness, shelf_depth, shelf_height], center=true);\n            \n            // Right side\n            translate([shelf_width/2 - wall_thickness/2, shelf_depth/2, shelf_height/2])\n                cube([wall_thickness, shelf_depth, shelf_height], center=true);\n            \n            // Bottom shelf\n            translate([0, shelf_depth/2, wall_thickness/2])\n                cube([shelf_width - 2*wall_thickness, shelf_depth - wall_thickness, wall_thickness], center=true);\n            \n            // Top shelf\n            translate([0, shelf_depth/2, shelf_height - wall_thickness/2])\n                cube([shelf_width - 2*wall_thickness, shelf_depth - wall_thickness, wall_thickness], center=true);\n            \n            // Middle shelf\n            translate([0, shelf_depth/2, shelf_height/2])\n                cube([shelf_width - 2*wall_thickness, shelf_depth - wall_thickness, wall_thickness], center=true);\n        }\n        \n        // Cut out blaze patterns on back panel\n        for(y = [shelf_depth/4 : shelf_depth/2 : shelf_depth*3/4]) {\n            for(z = [20 : 15 : shelf_height - 20]) {\n                blaze_pattern(y, z);\n            }\n        }\n    }\n}\n\n// Blaze flame pattern module\nmodule blaze_pattern(pos_y, pos_z) {\n    translate([0, pos_y, pos_z]) {\n        // Main flame body\n        rotate([0, 90, 0]) {\n            difference() {\n                // Outer flame shape\n                union() {\n                    // Center flame\n                    translate([0, 0, 0])\n                        scale([1, 1.2, 1])\n                        cylinder(h=blaze_height, r1=blaze_width/2, r2=blaze_width/3, center=true);\n                    \n                    // Left flame lick\n                    translate([-blaze_width/3, blaze_height/4, 0])\n                        rotate([0, 0, -20])\n                        scale([0.7, 0.8, 0.7])\n                        cylinder(h=blaze_height*0.7, r1=blaze_width/3, r2=blaze_width/4, center=true);\n                    \n                    // Right flame lick\n                    translate([blaze_width/3, blaze_height/4, 0])\n                        rotate([0, 0, 20])\n                        scale([0.7, 0.8, 0.7])\n                        cylinder(h=blaze_height*0.7, r1=blaze_width/3, r2=blaze_width/4, center=true);\n                    \n                    // Top flicker\n                    translate([0, blaze_height/2, 0])\n                        scale([0.5, 1, 0.5])\n                        sphere(d=blaze_width/2, center=true);\n                }\n                \n                // Inner cutout for detail\n                translate([0, 0, 0])\n                    scale([0.8, 0.8, 1.2])\n                    cylinder(h=blaze_height*1.2, r1=blaze_width/3, r2=blaze_width/4, center=true);\n            }\n        }\n    }\n}\n\n// Decorative support brackets\nmodule support_brackets() {\n    // Left bracket\n    translate([-shelf_width/2 + wall_thickness, shelf_depth/2, shelf_height/2])\n        rotate([90, 0, 0])\n        for(i = [0:1]) {\n            translate([0, 0, i * shelf_height/2])\n                linear_extrude(height=wall_thickness*2)\n                polygon(points=[\n                    [0, 0],\n                    [5, -5],\n                    [10, 0],\n                    [0, 15]\n                ]);\n        }\n    \n    // Right bracket\n    translate([shelf_width/2 - wall_thickness, shelf_depth/2, shelf_height/2])\n        mirror([1, 0, 0])\n        rotate([90, 0, 0])\n        for(i = [0:1]) {\n            translate([0, 0, i * shelf_height/2])\n                linear_extrude(height=wall_thickness*2)\n                polygon(points=[\n                    [0, 0],\n                    [5, -5],\n                    [10, 0],\n                    [0, 15]\n                ]);\n        }\n}\n\n// Assembly\nunion() {\n    shelf_unit();\n    support_brackets();\n}",
    "renders": true
  },
  {
    "decorative_art": "crest",
    "openscad_code": "// Crest Furniture Art Piece - Realistic Style\n// Dimensions: 120mm wide x 25mm deep x 90mm tall\n\n$fn = 32;\n\nmodule crest_base() {\n    // Main backing panel - 2mm wall thickness\n    difference() {\n        // Outer frame\n        cube([120, 25, 90], center=true);\n        \n        // Inner recess\n        translate([0, 2, 0])\n        cube([116, 21, 86], center=true);\n    }\n}\n\nmodule crest_frame() {\n    // Ornamental outer frame\n    union() {\n        // Top arch\n        translate([0, 0, 42])\n        difference() {\n            cylinder(h=4, r=60, center=true);\n            translate([0, 0, -2])\n            cylinder(h=8, r=56, center=true);\n        }\n        \n        // Side pillars\n        for(x = [-55, 55]) {\n            translate([x, 0, -20])\n            difference() {\n                cube([8, 25, 40], center=true);\n                translate([0, 2, 0])\n                cube([4, 21, 40], center=true);\n            }\n        }\n        \n        // Bottom base molding\n        translate([0, 0, -42])\n        difference() {\n            cube([100, 25, 8], center=true);\n            translate([0, 2, 0])\n            cube([96, 21, 8], center=true);\n        }\n    }\n}\n\nmodule heraldic_shield() {\n    // Central shield element\n    translate([0, 0, 10])\n    difference() {\n        // Shield shape using scaled sphere and cube\n        union() {\n            translate([0, 0, 15])\n            scale([1, 1.2, 1])\n            sphere(r=25);\n            \n            translate([0, 0, -5])\n            cube([50, 30, 30], center=true);\n        }\n        \n        // Back recess\n        translate([0, 2, 0])\n        scale([0.9, 1, 0.9])\n        union() {\n            translate([0, 0, 15])\n            scale([1, 1.2, 1])\n            sphere(r=25);\n            \n            translate([0, 0, -5])\n            cube([50, 30, 30], center=true);\n        }\n    }\n}\n\nmodule decorative_accents() {\n    // Corner flourishes\n    for(angle = [0, 180]) {\n        rotate([0, 0, angle])\n        translate([40, 12, 30])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=15, r=8, center=true);\n            translate([0, 0, -2])\n            cylinder(h=19, r=6, center=true);\n        }\n    }\n    \n    // Central emblem details\n    translate([0, 0, 30])\n    difference() {\n        cylinder(h=4, r=12, center=true);\n        translate([0, 0, -2])\n        cylinder(h=8, r=10, center=true);\n    }\n    \n    // Scrollwork details\n    for(x = [-30, 30]) {\n        translate([x, 12, 0])\n        rotate([90, 0, 0])\n        difference() {\n            torus(8, 2);\n            translate([0, 0, -2])\n            scale([0.8, 0.8, 1])\n            torus(8, 2);\n        }\n    }\n}\n\nmodule torus(major, minor) {\n    rotate_extrude()\n    translate([major, 0, 0])\n    circle(r=minor);\n}\n\n// Assembly\nunion() {\n    crest_base();\n    crest_frame();\n    heraldic_shield();\n    decorative_accents();\n}",
    "renders": true
  },
  {
    "decorative_art": "draco",
    "openscad_code": "// Draco Chair - Decorative Art Furniture Piece\n// Dragon head backrest with gothic styling\n// Overall dimensions: 80mm W x 75mm D x 120mm H\n\n$fn = 32;\n\nmodule chair_base() {\n    // Main seat platform\n    difference() {\n        cube([60, 50, 4], center = true);\n        translate([0, 0, -2])\n            cube([56, 46, 8], center = true);\n    }\n}\n\nmodule chair_legs() {\n    // Four ornate gothic legs\n    for(x = [-25, 25])\n        for(y = [-20, 20]) {\n            translate([x, y, -30])\n                difference() {\n                    cylinder(h = 30, d1 = 8, d2 = 6);\n                    translate([0, 0, -1])\n                        cylinder(h = 32, d1 = 4, d2 = 4);\n                }\n            // Decorative rings on legs\n            translate([x, y, -20])\n                cylinder(h = 2, d1 = 10, d2 = 10);\n            translate([x, y, -10])\n                cylinder(h = 2, d1 = 9, d2 = 9);\n        }\n}\n\nmodule dragon_head() {\n    // Main head structure\n    translate([0, -25, 30])\n        rotate([0, 10, 0])\n            union() {\n                // Snout\n                translate([0, -15, 0])\n                    scale([1, 1.5, 1])\n                        sphere(d = 20);\n                \n                // Head\n                sphere(d = 30);\n                \n                // Horns\n                translate([-10, 10, 10])\n                    rotate([30, 0, -30])\n                        cylinder(h = 15, d1 = 6, d2 = 2);\n                translate([10, 10, 10])\n                    rotate([30, 0, 30])\n                        cylinder(h = 15, d1 = 6, d2 = 2);\n                \n                // Eye sockets\n                translate([-7, 5, 5]) {\n                    rotate([0, 90, 0])\n                        cylinder(h = 8, d = 6);\n                    translate([0, 4, 0])\n                        sphere(d = 4);\n                }\n                translate([7, 5, 5]) {\n                    rotate([0, 90, 0])\n                        cylinder(h = 8, d = 6);\n                    translate([0, 4, 0])\n                        sphere(d = 4);\n                }\n                \n                // Nostrils\n                translate([-5, -20, -2])\n                    rotate([30, 0, 0])\n                        cylinder(h = 5, d = 3);\n                translate([5, -20, -2])\n                    rotate([30, 0, 0])\n                        cylinder(h = 5, d = 3);\n            }\n}\n\nmodule backrest_support() {\n    // Gothic arch backrest frame\n    translate([0, -25, 20])\n        rotate([0, 90, 0])\n            difference() {\n                // Outer arch\n                linear_extrude(height = 4)\n                    polygon(points = [\n                        [-30, 0], [30, 0], [30, -40], \n                        [20, -50], [0, -55], [-20, -50], [-30, -40], [-30, 0]\n                    ]);\n                \n                // Inner arch\n                translate([0, 0, -1])\n                    linear_extrude(height = 6)\n                        polygon(points = [\n                            [-26, -4], [26, -4], [26, -36], \n                            [18, -45], [0, -50], [-18, -45], [-26, -36], [-26, -4]\n                        ]);\n            }\n}\n\nmodule decorative_details() {\n    // Gothic patterns on seat\n    translate([0, 0, 2.1])\n        for(x = [-20:10:20])\n            for(y = [-15:10:15])\n                translate([x, y, 0])\n                    cylinder(h = 0.5, d = 3);\n    \n    // Armrest supports\n    translate([-30, 0, 15])\n        rotate([0, 15, 0])\n            cylinder(h = 20, d1 = 6, d2 = 4);\n    translate([30, 0, 15])\n        rotate([0, -15, 0])\n            cylinder(h = 20, d1 = 6, d2 = 4);\n}\n\n// Assembly\nunion() {\n    chair_base();\n    chair_legs();\n    backrest_support();\n    dragon_head();\n    decorative_details();\n    \n    // Armrests\n    translate([-30, 0, 25])\n        cube([4, 40, 2], center = true);\n    translate([30, 0, 25])\n        cube([4, 40, 2], center = true);\n}",
    "renders": true
  },
  {
    "decorative_art": "elara",
    "openscad_code": "// Elara side-table inspired decorative furniture piece (realistic style)\n// Overall dimensions: 120mm diameter, 50mm height\n\n$fn = 60; // Smooth curves\n\n// Main table top\nmodule table_top() {\n    // Solid circular top with raised rim\n    difference() {\n        // Main disc\n        cylinder(h = 6, d = 120);\n        // Recessed center\n        translate([0, 0, 4])\n            cylinder(h = 3, d = 110);\n    }\n    // Decorative rim detail\n    translate([0, 0, 5.5])\n        cylinder(h = 1.5, d = 122);\n}\n\n// Central support column\nmodule central_column() {\n    // Tapered column with decorative rings\n    union() {\n        // Base ring\n        translate([0, 0, 0])\n            cylinder(h = 3, d = 40);\n        \n        // Main tapered section\n        linear_extrude(height = 35, scale = [0.6, 0.6])\n            circle(d = 38);\n        \n        // Middle decorative ring\n        translate([0, 0, 20])\n            cylinder(h = 3, d = 35);\n        \n        // Top neck section\n        translate([0, 0, 38])\n            cylinder(h = 8, d = 30);\n    }\n}\n\n// Ornate leg structure (3 legs)\nmodule decorative_leg() {\n    // Single curved leg\n    difference() {\n        union() {\n            // Main curved support\n            rotate([0, 90, 0])\n                scale([1, 1.5, 1])\n                    cylinder(h = 22, d = 12);\n            \n            // Decorative foot\n            translate([0, 0, -2])\n                sphere(d = 14);\n            \n            // Top connection bracket\n            translate([0, 0, 22])\n                cube([18, 10, 6], center = true);\n        }\n        \n        // Hollow out for weight/material saving\n        rotate([0, 90, 0])\n            cylinder(h = 25, d = 8);\n    }\n}\n\n// Assembly of legs array\nmodule leg_assembly() {\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([45, 0, 6])\n                rotate([0, 15, 0])\n                    decorative_leg();\n    }\n}\n\n// Surface decorative pattern\nmodule table_pattern() {\n    // Radial grooves in tabletop\n    for (i = [0:15:359]) {\n        rotate([0, 0, i])\n            translate([30, 0, 5.9])\n                cube([60, 2, 0.5], center = true);\n    }\n    \n    // Central decorative motif\n    translate([0, 0, 5.8])\n        cylinder(h = 1, d = 20);\n    \n    // Small concentric rings\n    for (r = [25:10:55]) {\n        translate([0, 0, 5.7])\n            cylinder(h = 0.5, d = r);\n    }\n}\n\n// Main assembly\nunion() {\n    // Table top\n    table_top();\n    \n    // Decorative surface pattern\n    table_pattern();\n    \n    // Central support\n    central_column();\n    \n    // Three legs\n    leg_assembly();\n}",
    "renders": true
  },
  {
    "decorative_art": "fable",
    "openscad_code": "// Tortoise Accent Stool – realistic fable furniture\n// Overall footprint ~120 mm diameter, 75 mm high\n// 2 mm wall thickness everywhere, printable without supports\n\n$fn = 36;               // smooth curves\nwall = 2;               // constant shell thickness\n\n// MAIN MODULE -----------------------------------------------------------\nmodule tortoise_stool(){\n    union(){\n        shell();        // outer carapace\n        body();         // plastron + legs\n        seat_pad();     // cushion on carapace\n    }\n}\n\n// CARAPACE (upper shell) ------------------------------------------------\nmodule shell(){\n    difference(){\n        // main dome\n        scale([1, 1, 0.45]) sphere(d = 90);\n        \n        // hollow inside\n        translate([0,0,wall]) \n            scale([1,1,0.43]) sphere(d = 90 - 2*wall);\n        \n        // bottom opening\n        translate([0,0,-20]) cube([200,200,40], center=true);\n    }\n    \n    // decorative scutes (tiles) – raised ridges\n    for(a=[0:60:359]){\n        rotate([0,0,a])\n            translate([0, 42, 0])\n                rotate([90,0,0])\n                    linear_extrude(height = 2.5)\n                        hull(){\n                            circle(d=16);\n                            translate([0,20,0]) circle(d=16);\n                        }\n    }\n}\n\n// PLASTRON (bottom shell) + LEGS ---------------------------------------\nmodule body(){\n    // plastron plate\n    difference(){\n        translate([0,0,5])\n            scale([1,0.7,0.15]) sphere(d = 80);\n        translate([0,0,7])\n            scale([1,0.7,0.12]) sphere(d = 80 - 2*wall);\n    }\n    \n    // four tortoise legs\n    leg_positions = [[-25,-25,0], [25,-25,0], [-25,25,0], [25,25,0]];\n    for(p = leg_positions){\n        translate(p)\n            rotate([0,0,-30])\n                leg();\n    }\n}\n\nmodule leg(){\n    // simple column leg with rounded foot\n    difference(){\n        translate([0,0,-15])\n            cylinder(d1 = 18, d2 = 14, h = 30);\n        translate([0,0,-14])\n            cylinder(d1 = 18 - 2*wall, d2 = 14 - 2*wall, h = 30);\n    }\n    \n    // foot pad\n    translate([0,0,-15])\n        sphere(d = 20);\n}\n\n// SEAT CUSHION ----------------------------------------------------------\nmodule seat_pad(){\n    color(\"DarkOliveGreen\")\n    translate([0,0,42])\n        difference(){\n            cylinder(d = 80, h = 8);\n            translate([0,0,wall])\n                cylinder(d = 80 - 2*wall, h = 8);\n        }\n}\n\n// RENDER ---------------------------------------------------------------\ntortoise_stool();",
    "renders": true
  },
  {
    "decorative_art": "glimmer",
    "openscad_code": "// Glimmer-inspired decorative side table\n// The table is a stylized representation of a glimmer, with a crystalline top and ethereal structure\n\n// Overall dimensions\ntable_height = 100;\ntable_top_diameter = 80;\nleg_thickness = 2;\nwall_thickness = 2;\n\n// Create the glimmer top with crystalline facets\nmodule glimmer_top() {\n    // Main circular top\n    difference() {\n        cylinder(h = 4, d = table_top_diameter, $fn = 6);\n        // Create glimmer facets by subtracting rotated cubes\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                translate([0, 0, -1]) \n                    cube([table_top_diameter * 0.7, 2, 6], center = true);\n            }\n        }\n    }\n    \n    // Add raised glimmer points\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60]) {\n            translate([table_top_diameter * 0.35, 0, 2]) {\n                sphere(d = 8);\n            }\n        }\n    }\n}\n\n// Create ethereal legs with glimmer energy flow\nmodule glimmer_leg(x_pos, y_pos) {\n    // Main structural leg\n    translate([x_pos, y_pos, 0]) {\n        cylinder(h = table_height - 4, d = 8, $fn = 6);\n    }\n    \n    // Glimmer energy veins wrapping around leg\n    for (z = [10:15:table_height - 14]) {\n        rotate_extrude(angle = 120, $fn = 8) {\n            translate([x_pos + 4, y_pos, z]) {\n                circle(d = 2);\n            }\n        }\n    }\n}\n\n// Create decorative base ring\nmodule glimmer_base() {\n    difference() {\n        cylinder(h = 6, d = table_top_diameter * 0.9, $fn = 8);\n        cylinder(h = 7, d = table_top_diameter * 0.7, $fn = 8);\n    }\n    \n    // Add glimmer nodes on base\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45]) {\n            translate([table_top_diameter * 0.35, 0, 3]) {\n                sphere(d = 4);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Top with glimmer effects\n    translate([0, 0, table_height - 4]) {\n        glimmer_top();\n    }\n    \n    // Four glimmer legs at corners\n    leg_offset = table_top_diameter * 0.35;\n    glimmer_leg(leg_offset, leg_offset);\n    glimmer_leg(-leg_offset, leg_offset);\n    glimmer_leg(leg_offset, -leg_offset);\n    glimmer_leg(-leg_offset, -leg_offset);\n    \n    // Decorative base ring\n    translate([0, 0, 0]) {\n        glimmer_base();\n    }\n    \n    // Central glimmer core connecting legs\n    difference() {\n        cylinder(h = table_height - 4, d = 12, $fn = 8);\n        cylinder(h = table_height - 2, d = 8, $fn = 8);\n    }\n    \n    // Add energy filaments between legs\n    for (i = [0:3]) {\n        angle = i * 90;\n        rotate([0, 0, angle]) {\n            hull() {\n                translate([leg_offset * 0.7, 0, table_height * 0.3]) {\n                    sphere(d = 3);\n                }\n                translate([leg_offset * 0.7, 0, table_height * 0.7]) {\n                    sphere(d = 3);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "hawk",
    "openscad_code": "// Hawk Decorative Furniture Piece\n// A realistic hawk sculpture designed as a furniture accent piece (bookend or shelf decor)\n// Overall dimensions: 120mm wide x 80mm deep x 100mm tall\n\n$fn = 32;\n\n// Main body module\nmodule hawk_body() {\n    // Central body - ellipsoid shape\n    translate([0, 0, 30])\n    scale([1.2, 0.8, 1])\n    sphere(r=20);\n    \n    // Chest protrusion\n    translate([15, 0, 25])\n    scale([0.8, 0.6, 0.7])\n    sphere(r=15);\n}\n\n// Head module with beak and eyes\nmodule hawk_head() {\n    // Head sphere\n    translate([-25, 0, 45])\n    scale([0.8, 0.9, 0.9])\n    sphere(r=18);\n    \n    // Beak\n    translate([-42, 0, 45])\n    rotate([0, -10, 0])\n    scale([0.8, 0.2, 0.2])\n    cylinder(h=25, r1=8, r2=0);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([-32, side*8, 50])\n        sphere(r=3);\n    }\n}\n\n// Wing modules with feather details\nmodule hawk_wing(side) {\n    mirror([side, 0, 0]) {\n        // Main wing structure\n        translate([-10, -25, 40])\n        rotate([0, 0, -20*side])\n        scale([1.2, 0.3, 0.8])\n        cube([35, 20, 5]);\n        \n        // Wing tip\n        translate([-5, -35, 45])\n        rotate([0, 0, -45*side])\n        scale([0.8, 0.2, 0.6])\n        cube([25, 15, 3]);\n        \n        // Feather details using small cylinders\n        for(i = [0:3]) {\n            translate([-15-i*5, -30-i*2, 42+i*1])\n            rotate([0, 0, -10*side])\n            cylinder(h=2, r1=3, r2=2);\n        }\n    }\n}\n\n// Tail module\nmodule hawk_tail() {\n    // Tail base\n    translate([20, 0, 25])\n    rotate([0, 0, 0])\n    scale([1.5, 0.3, 0.8])\n    cube([25, 20, 3]);\n    \n    // Tail feathers\n    for(i = [-1, 0, 1]) {\n        translate([35, i*6, 25])\n        rotate([0, 0, i*10])\n        scale([0.8, 0.15, 0.5])\n        cube([15, 8, 2]);\n    }\n}\n\n// Legs and feet\nmodule hawk_legs() {\n    for(side = [-1, 1]) {\n        // Upper leg\n        translate([0, side*8, 15])\n        rotate([30, 0, 0])\n        cylinder(h=15, r=3);\n        \n        // Lower leg\n        translate([0, side*8, 0])\n        rotate([0, 0, 0])\n        cylinder(h=15, r=2.5);\n        \n        // Talons\n        for(angle = [0:120:240]) {\n            rotate([0, 0, angle])\n            translate([0, side*8, 0])\n            rotate([90, 0, 0])\n            cylinder(h=8, r1=1.5, r2=0.5);\n        }\n    }\n}\n\n// Decorative base with furniture-style details\nmodule decorative_base() {\n    // Main base platform\n    difference() {\n        translate([0, 0, -5])\n        cube([120, 80, 10], center=true);\n        \n        // Recessed center\n        translate([0, 0, -2])\n        cube([100, 60, 10], center=true);\n    }\n    \n    // Decorative edge molding\n    for(pos = [-55, 55]) {\n        translate([pos, 0, 0])\n        cube([10, 80, 5]);\n    }\n    for(pos = [-35, 35]) {\n        translate([0, pos, 0])\n        cube([120, 10, 5]);\n    }\n    \n    // Corner brackets\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x*50, y*30, 0])\n        cube([15, 15, 8]);\n    }\n}\n\n// Assembly\nunion() {\n    // Base for stability\n    decorative_base();\n    \n    // Main hawk structure\n    union() {\n        hawk_body();\n        hawk_head();\n        hawk_wing(1);   // Left wing\n        hawk_wing(-1);  // Right wing\n        hawk_tail();\n        hawk_legs();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "indigo",
    "openscad_code": "// Indigo Nightstand - Realistic Style, Medium Complexity\n// Overall dimensions: 80mm W x 60mm D x 100mm H\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main body\nmodule nightstand_body() {\n    // Bottom frame\n    cube([80, 60, 4]);\n    \n    // Left side panel\n    translate([0, 0, 4]) cube([18, 60, 76]);\n    \n    // Right side panel\n    translate([62, 0, 4]) cube([18, 60, 76]);\n    \n    // Back panel\n    translate([18, 56, 4]) cube([44, 4, 76]);\n    \n    // Top\n    translate([0, 0, 80]) cube([80, 60, 4]);\n}\n\n// Drawer module\nmodule drawer(height, y_offset) {\n    // Drawer box\n    translate([20, y_offset, height]) cube([40, 56, 20]);\n    \n    // Drawer front\n    translate([19, y_offset-1, height]) cube([42, 58, 22]);\n    \n    // Handle\n    translate([39, y_offset+27, height+11]) cylinder(h=2, r=5);\n    translate([39, y_offset+27, height+13]) sphere(r=5);\n}\n\n// Decorative indigo pattern on drawer\nmodule indigo_pattern(x, y, z) {\n    for (i = [0:3]) {\n        for (j = [0:2]) {\n            translate([x + 10 + i*7, y + 10 + j*12, z + 11]) {\n                rotate([90, 0, 0]) cylinder(h=0.5, r=3);\n            }\n        }\n    }\n    \n    // Indigo flower motif\n    translate([x + 21, y + 29, z + 11]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=0.5, r=8);\n            for (a = [0:60:359]) {\n                rotate([0, 0, a]) translate([6, 0, 0]) cylinder(h=0.5, r=2);\n            }\n        }\n    }\n}\n\n// Legs\nmodule legs() {\n    // Front left\n    translate([2, 2, -15]) cylinder(h=19, r=3);\n    \n    // Front right\n    translate([78, 2, -15]) cylinder(h=19, r=3);\n    \n    // Back left\n    translate([2, 58, -15]) cylinder(h=19, r=3);\n    \n    // Back right\n    translate([78, 58, -15]) cylinder(h=19, r=3);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    color(\"indigo\") nightstand_body();\n    \n    // Legs\n    color(\"indigo\") legs();\n    \n    // Drawers\n    color([0.3, 0.2, 0.6]) {\n        drawer(10, 2);\n        drawer(36, 2);\n    }\n    \n    // Decorative elements\n    color([0.2, 0.1, 0.5]) {\n        indigo_pattern(19, 2, 10);\n        indigo_pattern(19, 2, 36);\n    }\n    \n    // Top edge detail\n    translate([0, 0, 84]) cube([80, 60, 2]);\n    \n    // Base trim\n    translate([0, 0, 2]) cube([80, 4, 2]);\n    translate([0, 56, 2]) cube([80, 4, 2]);\n    translate([0, 0, 2]) cube([4, 60, 2]);\n    translate([76, 0, 2]) cube([4, 60, 2]);\n}",
    "renders": true
  },
  {
    "decorative_art": "jinx",
    "openscad_code": "// Jinx Hexagonal Side Table - realistic style, medium complexity\n// Overall dimensions: 80mm diameter x 45mm height\n\n$fn = 32;\n\n// Main parameters\ntable_height = 45;\ntop_diameter = 80;\nleg_thickness = 4;\nshelf_offset = 15;\nwall_thickness = 2;\n\nmodule hex_table() {\n    // Hexagonal top\n    difference() {\n        // Main top disk\n        cylinder(h=4, d=top_diameter, $fn=6);\n        // Chamfered edge\n        translate([0,0,-0.1])\n            cylinder(h=4.2, d=top_diameter-4, $fn=6);\n    }\n    \n    // Underside support ring\n    translate([0,0,3.5])\n        difference() {\n            cylinder(h=2, d=top_diameter-8, $fn=6);\n            cylinder(h=2.2, d=top_diameter-16, $fn=6);\n        }\n    \n    // Central support column\n    translate([0,0,0])\n        cylinder(h=table_height-4, d=12, $fn=6);\n    \n    // Lower hexagonal shelf\n    translate([0,0,shelf_offset])\n        difference() {\n            cylinder(h=3, d=top_diameter*0.75, $fn=6);\n            cylinder(h=3.2, d=top_diameter*0.75-6, $fn=6);\n        }\n    \n    // Support legs - hexagonal pattern\n    for(i=[0:5]) {\n        rotate([0,0,i*60])\n        translate([top_diameter/2-8, 0, table_height/2-2])\n            rotate([90,0,0])\n                cylinder(h=table_height/2+5, d=leg_thickness);\n    }\n    \n    // Decorative jinx symbols on shelf\n    translate([0,0,shelf_offset+3.1])\n    for(i=[0:5]) {\n        rotate([0,0,i*60+30])\n        translate([top_diameter*0.3, 0, 0])\n            scale([1,0.3,1])\n                cylinder(h=0.5, d=6, $fn=3);\n    }\n    \n    // Base ring for stability\n    translate([0,0,-0.1])\n        difference() {\n            cylinder(h=3, d=top_diameter*0.85, $fn=6);\n            cylinder(h=3.2, d=top_diameter*0.85-6, $fn=6);\n        }\n    \n    // Hidden joints detail\n    for(i=[0:2]) {\n        rotate([0,0,i*120])\n        translate([top_diameter*0.25, 0, shelf_offset-5])\n            rotate([0,90,0])\n                cylinder(h=6, d=3);\n    }\n}\n\n// Generate the table\nhex_table();",
    "renders": true
  },
  {
    "decorative_art": "lumen",
    "openscad_code": "// Lumen decorative side table (realistic style)\n// Overall size: 120mm diameter, 60mm height\n\n// Main table top - circular with gentle rounded edge\nmodule table_top() {\n    difference() {\n        // Main disc\n        cylinder(h=8, d=120, $fn=120);\n        \n        // Create rounded edge by cutting inner section\n        translate([0, 0, -0.1]) {\n            cylinder(h=8.2, d=116, $fn=120);\n        }\n    }\n}\n\n// Central light column - frosted appearance cylinder\nmodule light_column() {\n    // Main cylinder\n    cylinder(h=40, d=30, $fn=80);\n    \n    // Top dome for soft light diffusion\n    translate([0, 0, 40]) {\n        scale([1, 1, 0.6]) {\n            sphere(d=30, $fn=80);\n        }\n    }\n}\n\n// Support legs - 3 curved elements for stability\nmodule curved_leg(angle) {\n    rotate([0, 0, angle]) {\n        // Base support ring connection\n        translate([0, 50, 0]) {\n            cylinder(h=4, d=6, $fn=20);\n        }\n        \n        // Curved support structure\n        translate([0, 40, 2]) {\n            rotate([90, 0, 0]) {\n                // Main curved beam\n                for(i=[0:5]) {\n                    rotate([0, 0, i*3-7.5]) {\n                        translate([0, 0, 2*i]) {\n                            scale([1, 1, 0.3]) {\n                                sphere(d=6, $fn=12);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Top connection to table\n        translate([0, 40, 40]) {\n            cylinder(h=4, d=6, $fn=20);\n        }\n    }\n}\n\n// Decorative base ring with LED housing\nmodule base_ring() {\n    difference() {\n        // Main ring structure\n        cylinder(h=10, d=110, $fn=120);\n        \n        // Hollow center for light column\n        translate([0, 0, -0.1]) {\n            cylinder(h=10.2, d=34, $fn=80);\n        }\n        \n        // Cable routing notch\n        translate([50, 0, -0.1]) {\n            cube([10, 6, 10.2], center=true);\n        }\n    }\n    \n    // LED strip channel\n    difference() {\n        translate([0, 0, 7]) {\n            cylinder(h=3, d=106, $fn=120);\n        }\n        translate([0, 0, 6.9]) {\n            cylinder(h=3.2, d=102, $fn=120);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0, 0, 50]) {\n        table_top();\n    }\n    \n    // Light column\n    translate([0, 0, 10]) {\n        light_column();\n    }\n    \n    // Base ring\n    base_ring();\n    \n    // Support legs - three curved elements at 120 degree intervals\n    for(i=[0:120:240]) {\n        curved_leg(i);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "myth",
    "openscad_code": "// Mythic Kraken Sea-Chest\n// A small treasure chest whose legs are stylized octopus tentacles curling outward\n// Overall footprint ≈ 100 mm × 90 mm, height ≈ 85 mm (fits most FDM printers)\n\nwall = 2;                 // uniform wall thickness for 3D printability\nbody_w = 80;              // chest interior width\nbody_d = 65;              // chest interior depth\nbody_h = 50;              // chest interior height\nlid_h  = 12;              // lid thickness\nleg_h  = 35;              // tentacle height under chest\ntentacle_r = 7;           // tentacle radius\n\n// Main chest body\nmodule chest_body() {\n    difference() {\n        // outer shell\n        translate([0,0,leg_h])\n            cube([body_w + 2*wall, body_d + 2*wall, body_h + wall], center=true);\n        // inner cavity\n        translate([0,0,leg_h + wall/2])\n            cube([body_w, body_d, body_h + wall], center=true);\n    }\n}\n\n// Lid with slight dome top\nmodule chest_lid() {\n    difference() {\n        union() {\n            // main lid block\n            translate([0,0,leg_h + body_h + lid_h/2])\n                cube([body_w + 2*wall, body_d + 2*wall, lid_h], center=true);\n            // gentle dome\n            scale([1, 0.8, 0.5])\n                translate([0,0,leg_h + body_h + lid_h + 20])\n                    sphere(d = body_w + 2*wall);\n        }\n        // recess underside\n        translate([0,0,leg_h + body_h + wall/2])\n            cube([body_w, body_d, lid_h + wall], center=true);\n    }\n}\n\n// Decorative banding around chest\nmodule band() {\n    band_h = 4;\n    band_d = 1;\n    for(z = [leg_h + band_h/2, leg_h + body_h - band_h/2])\n        translate([0,0,z])\n            cube([body_w + 2*(wall + band_d), body_d + 2*(wall + band_d), band_h], center=true);\n}\n\n// Single stylized tentacle leg\nmodule tentacle_leg(offset_angle, bend_angle) {\n    // base cylinder\n    translate([0,0,leg_h/2])\n        cylinder(h = leg_h, r = tentacle_r, center=true);\n\n    // three curling segments\n    for(i = [1:3]) {\n        rotate([0, 0, offset_angle + i*15])\n            translate([0, tentacle_r + i*4, leg_h - i*7])\n                rotate([bend_angle, 0, 0])\n                    cylinder(h = 15, r = tentacle_r - i, center=true);\n    }\n}\n\n// Generate four tentacle legs\nmodule kraken_legs() {\n    for(a = [45, 135, 225, 315])\n        translate([cos(a)*body_w/2, sin(a)*body_d/2, 0])\n            tentacle_leg(a, (a < 180) ? 30 : -30);\n}\n\n// Assembly\nunion() {\n    chest_body();\n    chest_lid();\n    band();\n    kraken_legs();\n}",
    "renders": true
  },
  {
    "decorative_art": "nebula",
    "openscad_code": "// Nebula Bookshelf - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm width x 30mm depth x 150mm height\n\n$fn = 32;  // Smooth curves for printing\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main shelf frame\nmodule shelf_frame() {\n    // Left vertical support\n    translate([-58, 0, 0])\n        cube([4, 30, 150]);\n    \n    // Right vertical support\n    translate([54, 0, 0])\n        cube([4, 30, 150]);\n    \n    // Back panel\n    translate([-58, 26, 0])\n        cube([116, 4, 150]);\n}\n\n// Decorative nebula cloud pattern using spheres\nmodule nebula_cloud(x, y, z, scale) {\n    translate([x, y, z])\n        scale([scale, scale, scale])\n            sphere(8);\n}\n\n// Nebula pattern on back panel\nmodule nebula_pattern() {\n    for (i = [0:5:115]) {\n        for (j = [0:10:140]) {\n            nebula_cloud(-55 + i, 28, j, 0.3 + 0.2 * sin(i * j));\n        }\n    }\n}\n\n// Shelf levels with rounded edges\nmodule shelf_level(height) {\n    difference() {\n        // Main shelf\n        translate([-56, 2, height])\n            cube([112, 26, 4]);\n        \n        // Rounded front edge\n        translate([-56, 2, height - 2])\n            rotate([90, 0, 0])\n                cylinder(h = 112, r = 2);\n    }\n    \n    // Support ribs underneath\n    for (rib = [-40:20:40]) {\n        translate([rib, 15, height - 4])\n            cube([2, 12, 4]);\n    }\n}\n\n// Star details as small spheres\nmodule star(x, y, z, size) {\n    translate([x, y, z])\n        sphere(size);\n}\n\n// Create constellation pattern on sides\nmodule constellation() {\n    // Left side stars\n    for (i = [0:15:145]) {\n        star(-56, 15, i, 1);\n        star(-56, 25, i + 7, 0.5);\n    }\n    \n    // Right side stars\n    for (i = [0:15:145]) {\n        star(56, 15, i + 10, 1.2);\n        star(56, 25, i + 3, 0.7);\n    }\n}\n\n// Main assembly\nunion() {\n    // Structural frame\n    shelf_frame();\n    \n    // Decorative nebula pattern\n    difference() {\n        nebula_pattern();\n        translate([-56, 30, -1])\n            cube([112, 4, 152]);\n    }\n    \n    // Shelf levels\n    shelf_level(25);\n    shelf_level(65);\n    shelf_level(105);\n    \n    // Constellation details\n    constellation();\n    \n    // Base support\n    translate([-60, -2, 0])\n        cube([120, 34, 4]);\n}",
    "renders": true
  },
  {
    "decorative_art": "ori",
    "openscad_code": "// Ori-style Decorative Storage Box\n// Dimensions: 100mm x 70mm x 40mm\n// Wall thickness: 2mm throughout\n\nmodule box_frame() {\n    // Main frame structure\n    difference() {\n        // Outer shell\n        cube([100, 70, 40], center=true);\n        // Inner cavity\n        translate([0, 0, 2])\n            cube([96, 66, 38], center=true);\n    }\n}\n\nmodule corner_supports() {\n    // Four corner reinforcements\n    for(x = [-48, 48])\n        for(y = [-33, 33]) {\n            translate([x, y, -19])\n                cube([4, 4, 40], center=true);\n        }\n}\n\nmodule decorative_pattern() {\n    // Front face geometric pattern\n    for(i = [-2:2])\n        for(j = [-1:1]) {\n            translate([i*15, j*15, 20.5])\n                cube([3, 3, 1], center=true);\n        }\n}\n\nmodule lid_handle() {\n    // Central handle on lid\n    translate([0, 0, 21.5])\n        union() {\n            // Handle base\n            cube([30, 10, 3], center=true);\n            // Handle grip\n            translate([0, 0, 3])\n                cube([20, 6, 2], center=true);\n        }\n}\n\nmodule side_details() {\n    // Side panel decorative grooves\n    for(pos = [-25, 0, 25]) {\n        translate([50.5, pos, 0])\n            rotate([0, 90, 0])\n                cylinder(h=40, r=0.5, center=true);\n        translate([-50.5, pos, 0])\n            rotate([0, 90, 0])\n                cylinder(h=40, r=0.5, center=true);\n    }\n}\n\nmodule base_feet() {\n    // Four small feet for stability\n    for(x = [-40, 40])\n        for(y = [-25, 25]) {\n            translate([x, y, -21])\n                cylinder(h=3, r=2, center=true);\n        }\n}\n\n// Main assembly\nunion() {\n    // Basic structure\n    box_frame();\n    \n    // Structural elements\n    corner_supports();\n    \n    // Decorative elements\n    decorative_pattern();\n    lid_handle();\n    side_details();\n    \n    // Base support\n    base_feet();\n}",
    "renders": true
  },
  {
    "decorative_art": "phantom",
    "openscad_code": "// Phantom Chair - Medium complexity realistic style\n// Dimensions: 80mm width x 85mm depth x 120mm height\n\n$fn = 32;\n\nmodule ghost_base() {\n    // Main ghostly body - spherical top with tapered bottom\n    difference() {\n        union() {\n            // Head sphere\n            translate([0, 0, 95])\n                sphere(d=45);\n            \n            // Tapered body\n            cylinder(h1=40, h2=0, r1=22, r2=15, $fn=64);\n            translate([0, 0, 40])\n                cylinder(h1=35, h1=35, r1=22, r2=28, $fn=64);\n                \n            // Flowing bottom\n            for(i=[0:15:345]) {\n                rotate([0, 0, i])\n                    translate([18, 0, 5])\n                        scale([1, 0.7, 1])\n                            sphere(d=25);\n            }\n        }\n        \n        // Hollow eyes\n        translate([-12, -15, 100])\n            sphere(d=8);\n        translate([12, -15, 100])\n            sphere(d=8);\n            \n        // Hollow mouth\n        translate([0, -18, 90])\n            rotate([0, 20, 0])\n                cube([20, 5, 10], center=true);\n    }\n}\n\nmodule chair_frame() {\n    // Back legs\n    translate([-30, -35, 0])\n        cylinder(h=80, d=8);\n    translate([30, -35, 0])\n        cylinder(h=80, d=8);\n    \n    // Front legs\n    translate([-30, 35, 0])\n        cylinder(h=80, d=8);\n    translate([30, 35, 0])\n        cylinder(h=80, d=8);\n    \n    // Seat frame\n    translate([0, 0, 80])\n        cube([66, 76, 4], center=true);\n    translate([0, 0, 78])\n        cube([62, 72, 2], center=true);\n    \n    // Backrest frame\n    translate([0, -38, 110])\n        cube([62, 4, 56], center=true);\n    translate([0, -38, 108])\n        cube([58, 2, 52], center=true);\n    \n    // Backrest spindles\n    for(x=[-20:10:20]) {\n        translate([x, -38, 95])\n            cylinder(h=30, d=4);\n    }\n    \n    // Seat slats\n    for(y=[-25:10:25]) {\n        translate([0, y, 82])\n            cube([58, 6, 2], center=true);\n    }\n}\n\nmodule ghostly_details() {\n    // Translucent effect with thin walls\n    difference() {\n        ghost_base();\n        scale([0.9, 0.9, 0.9])\n            ghost_base();\n    }\n    \n    // Ghostly chains\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n            translate([25, 0, 60])\n                for(j=[0:5:25]) {\n                    translate([0, 0, j])\n                        rotate([90, 0, 0])\n                            cylinder(h=4, d=3);\n                }\n    }\n}\n\n// Main assembly\nunion() {\n    chair_frame();\n    \n    // Position ghost sitting on chair\n    translate([0, 0, 84])\n        ghostly_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "quasar",
    "openscad_code": "// Quasar Accent Table - Medium complexity realistic style\n// Overall dimensions: 120mm diameter, 450mm height\n\n// Main parameters\ntable_d = 120;\ntable_h = 450;\nleg_thickness = 8;\nsupport_ring_h = 15;\ncore_sphere_r = 25;\n\n// Central core sphere with decorative rings\nmodule quasar_core() {\n    // Main sphere\n    sphere(r=core_sphere_r);\n    \n    // Equatorial ring\n    difference() {\n        cylinder(h=core_sphere_r*0.4, r1=core_sphere_r*1.8, r2=core_sphere_r*1.8, center=true);\n        cylinder(h=core_sphere_r*0.4+1, r1=core_sphere_r*1.6, r2=core_sphere_r*1.6, center=true);\n    }\n    \n    // Perpendicular ring\n    rotate([90,0,0]) {\n        difference() {\n            cylinder(h=core_sphere_r*0.3, r1=core_sphere_r*1.5, r2=core_sphere_r*1.5, center=true);\n            cylinder(h=core_sphere_r*0.3+1, r1=core_sphere_r*1.3, r2=core_sphere_r*1.3, center=true);\n        }\n    }\n}\n\n// Radiating arms/legs\nmodule quasar_arms() {\n    for(i=[0:30:359]) {\n        rotate([0,0,i]) {\n            // Main structural arm\n            translate([0,0,-table_h/2]) {\n                cylinder(h=table_h, r1=leg_thickness, r2=leg_thickness*0.6);\n            }\n            \n            // Decorative support ring segments\n            translate([0,0,-table_h/4]) {\n                rotate([90,0,0]) {\n                    difference() {\n                        cylinder(h=table_d*0.4, r1=support_ring_h, r2=support_ring_h);\n                        cylinder(h=table_d*0.4+1, r1=support_ring_h-2, r2=support_ring_h-2);\n                    }\n                }\n            }\n            \n            // Foot pads for stability\n            translate([0,0,-table_h+2]) {\n                cube([leg_thickness*3, leg_thickness*2, 4], center=true);\n            }\n        }\n    }\n}\n\n// Table top surface\nmodule table_top() {\n    difference() {\n        // Main top disk\n        cylinder(h=8, r=table_d/2);\n        \n        // Central recess for core\n        translate([0,0,-1]) {\n            sphere(r=core_sphere_r+2);\n        }\n        \n        // Decorative edge groove\n        translate([0,0,4]) {\n            difference() {\n                cylinder(h=2, r=table_d/2-5);\n                cylinder(h=2.1, r=table_d/2-8);\n            }\n        }\n    }\n    \n    // Surface texture rings\n    for(r=[table_d/2-15:table_d/2-5:5]) {\n        translate([0,0,7.5]) {\n            difference() {\n                cylinder(h=1, r=r);\n                cylinder(h=1.1, r=r-1);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0,0,table_h]) {\n        table_top();\n    }\n    \n    // Core assembly\n    translate([0,0,table_h-8-core_sphere_r]) {\n        quasar_core();\n    }\n    \n    // Arms/legs\n    quasar_arms();\n}",
    "renders": true
  },
  {
    "decorative_art": "riven",
    "openscad_code": "// Riven-inspired decorative side table (medium realism)\n// Size: 120mm diameter x 60mm height (printable without supports)\n\n// Parameters\nleg_height = 50;\ntop_thickness = 8;\nedge_width = 6;\nbase_height = 4;\ndiameter = 120;\nleg_width = 8;\nbrace_thickness = 3;\n\n// Table top with decorative riven pattern\nmodule table_top() {\n    difference() {\n        // Main circular top\n        cylinder(h=top_thickness, d=diameter, $fn=64);\n        \n        // Top surface recess\n        translate([0, 0, top_thickness-2])\n            cylinder(h=2, d=diameter-12, $fn=64);\n        \n        // Decorative radial slots\n        for(i=[0:15:359]) {\n            rotate([0, 0, i])\n                translate([diameter/2-10, -2, -1])\n                    cube([10, 4, top_thickness+2]);\n        }\n        \n        // Central hole\n        translate([0, 0, -1])\n            cylinder(h=top_thickness+2, d=20, $fn=32);\n    }\n    \n    // Edge detail ring\n    difference() {\n        translate([0, 0, top_thickness-2])\n            cylinder(h=2, d=diameter, $fn=64);\n        translate([0, 0, top_thickness-2])\n            cylinder(h=2, d=diameter-edge_width*2, $fn=64);\n    }\n}\n\n// Single curved leg\nmodule leg() {\n    union() {\n        // Main curved support\n        for(i=[0:5:90]) {\n            rotate([0, 0, i])\n                translate([diameter/2-leg_width/2-2, -leg_width/2, 0])\n                    cube([leg_width, leg_width, leg_height*sin(i/90)+2]);\n        }\n        \n        // Base foot\n        translate([diameter/2-leg_width/2, -leg_width, 0])\n            cube([leg_width*2, leg_width*2, base_height]);\n    }\n}\n\n// Cross brace between legs\nmodule cross_brace() {\n    rotate([0, 0, 45])\n        translate([-diameter/2+20, -brace_thickness/2, leg_height/2])\n            cube([diameter-40, brace_thickness, leg_height/3]);\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0, 0, leg_height+base_height])\n        table_top();\n    \n    // Four legs\n    for(i=[0:90:359]) {\n        rotate([0, 0, i])\n            leg();\n    }\n    \n    // Cross bracing\n    cross_brace();\n    rotate([0, 0, 90])\n        cross_brace();\n    \n    // Central support column\n    translate([0, 0, 0])\n        cylinder(h=leg_height+base_height, d=12, $fn=32);\n}",
    "renders": true
  },
  {
    "decorative_art": "sol",
    "openscad_code": "// SOL DECORATIVE WALL SHELF\n// Inspired by Mexican folk-art sun motifs\n// Wall-mountable, 3D-printable art furniture piece\n\n// Overall scaling factor\nscale_factor = 1;\n\n// Main dimensions (mm)\nsun_diameter = 100 * scale_factor;\nsun_thickness = 12 * scale_factor;\nface_offset = 6 * scale_factor;\n\n// Wall mounting\nmount_hole_d = 4 * scale_factor;\nmount_hole_depth = 8 * scale_factor;\n\n// Ray count and dimensions\nray_count = 12;\nray_length = 25 * scale_factor;\nray_width = 8 * scale_factor;\nray_thickness = 6 * scale_factor;\n\n// Shelves\nshelf_count = 3;\nshelf_width = 20 * scale_factor;\nshelf_thickness = 3 * scale_factor;\nshelf_depth = 12 * scale_factor;\n\n// Face features\neye_size = 8 * scale_factor;\nnose_width = 6 * scale_factor;\nnose_height = 10 * scale_factor;\nmouth_width = 20 * scale_factor;\nmouth_height = 4 * scale_factor;\n\n// Decorative elements\ndecoration_radius = 3 * scale_factor;\ndecoration_depth = 2 * scale_factor;\n\n// Main module\nmodule sol_shelf() {\n    // Central sun disk\n    difference() {\n        union() {\n            // Main disk with thickness\n            cylinder(h=sun_thickness, d=sun_diameter, $fn=64);\n            \n            // Sun rays\n            for (i = [0:ray_count-1]) {\n                rotate([0, 0, i * (360/ray_count)])\n                translate([sun_diameter/2 + ray_length/2, 0, 0])\n                cube([ray_length, ray_width, ray_thickness], center=true);\n            }\n            \n            // Face relief (raised elements)\n            translate([0, 0, sun_thickness/2 + face_offset/2])\n            difference() {\n                // Eyes\n                for (x = [-1, 1]) {\n                    translate([x * (sun_diameter/4), 0, 0])\n                    sphere(d=eye_size, $fn=32);\n                }\n                \n                // Nose\n                translate([0, -sun_diameter/6, 0])\n                rotate([90, 0, 0])\n                cylinder(h=nose_height, d=nose_width, $fn=32);\n                \n                // Mouth\n                translate([0, -sun_diameter/3, 0])\n                cube([mouth_width, mouth_height, eye_size], center=true);\n            }\n            \n            // Decorative shelf supports\n            for (i = [0:shelf_count-1]) {\n                rotate([0, 0, 45 + i * (90/(shelf_count-1))])\n                translate([sun_diameter/3, 0, sun_thickness/2])\n                cube([shelf_width, shelf_thickness, shelf_depth]);\n            }\n        }\n        \n        // Wall mounting hole (back)\n        translate([0, 0, -sun_thickness/2 - 0.5])\n        cylinder(h=mount_hole_depth, d=mount_hole_d, $fn=32);\n        \n        // Decorative pattern holes (front face)\n        for (i = [0:ray_count-1]) {\n            rotate([0, 0, i * (360/ray_count) + 15])\n            translate([sun_diameter/3, 0, sun_thickness - decoration_depth - 0.5])\n            sphere(d=decoration_radius, $fn=32);\n        }\n        \n        // Shelf cutouts for mounting\n        for (i = [0:shelf_count-1]) {\n            rotate([0, 0, 45 + i * (90/(shelf_count-1))])\n            translate([sun_diameter/3 + shelf_width/2, 0, shelf_depth/2 + sun_thickness/2])\n            cube([shelf_width + 2, shelf_thickness + 2, shelf_depth + 2], center=true);\n        }\n    }\n}\n\n// Generate the model\nsol_shelf();",
    "renders": true
  },
  {
    "decorative_art": "terra",
    "openscad_code": "// Terra stool inspired by mid-century modern design\n// Overall height 300mm, diameter 300mm - suitable for 3D printing in sections\n\nmodule leg_base() {\n    // Main cylindrical leg with tapered bottom\n    difference() {\n        cylinder(h=280, d1=60, d2=40, $fn=32);\n        // Hollow center for weight reduction\n        cylinder(h=275, d1=56, d2=36, $fn=32);\n    }\n    \n    // Decorative brass ring detail\n    translate([0,0,270])\n    color(\"gold\")\n    cylinder(h=5, d=65, $fn=64);\n}\n\nmodule stretcher_bar() {\n    // Horizontal support between legs\n    difference() {\n        cube([120, 20, 15], center=true);\n        cube([116, 16, 11], center=true);\n    }\n}\n\nmodule leg_assembly() {\n    leg_base();\n    \n    // Three stretcher bars at 120 degree angles\n    for(i=[0:1:2]) {\n        rotate([0,0,i*120])\n        translate([0,25,180])\n        stretcher_bar();\n    }\n}\n\nmodule seat_top() {\n    // Main seat surface with gentle dome\n    difference() {\n        cylinder(h=30, d=300, $fn=128);\n        // Center hole for finger grip\n        cylinder(h=35, d=40, $fn=32);\n    }\n    \n    // Decorative concentric grooves\n    for(r=[60:30:120]) {\n        translate([0,0,30])\n        difference() {\n            cylinder(h=2, d=r+2, $fn=128);\n            cylinder(h=3, d=r, $fn=128);\n        }\n    }\n    \n    // Underside mounting detail\n    translate([0,0,-2])\n    cylinder(h=10, d=120, $fn=64);\n}\n\n// Assemble the stool\nseat_top();\n\n// Three legs at 120 degree intervals\nfor(i=[0:1:2]) {\n    rotate([0,0,i*120])\n    translate([100,0,0])\n    leg_assembly();\n}\n\n// Optional non-slip pads (can be printed separately)\nmodule foot_pad() {\n    translate([0,0,-2])\n    cylinder(h=4, d=50, $fn=32);\n}\n\n// Uncomment to add foot pads\n// for(i=[0:1:2]) {\n//     rotate([0,0,i*120])\n//     translate([100,0,-2])\n//     color(\"black\")\n//     foot_pad();\n// }",
    "renders": true
  },
  {
    "decorative_art": "vortex",
    "openscad_code": "// Vortex Bookshelf Art Piece\n// Realistic style, medium complexity\n// Overall dimensions: 120mm diameter x 150mm height\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main vortex structure\nmodule vortex_shelf() {\n    // Base platform\n    translate([0, 0, 5])\n    cylinder(h = 10, r1 = 60, r2 = 55, $fn = 64);\n    \n    // Central spine\n    translate([0, 0, 15])\n    cylinder(h = 130, r = 8, $fn = 32);\n    \n    // Generate 7 spiral shelves\n    for (i = [0:6]) {\n        angle = i * 60;\n        height = 20 + i * 18;\n        radius = 50 - i * 5;\n        \n        rotate([0, 0, angle])\n        translate([radius, 0, height])\n        rotate([0, 0, -angle])\n        shelf();\n    }\n    \n    // Top cap\n    translate([0, 0, 145])\n    cylinder(h = 5, r = 25, $fn = 64);\n}\n\n// Individual shelf module\nmodule shelf() {\n    // Shelf platform\n    difference() {\n        // Main shelf body\n        rotate([-90, 0, 0])\n        cylinder(h = wall + 1, r1 = 25, r2 = 22, $fn = 32);\n        \n        // Cutout for lighter weight\n        translate([0, 0, -1])\n        rotate([-90, 0, 0])\n        cylinder(h = wall + 3, r1 = 20, r2 = 17, $fn = 32);\n    }\n    \n    // Front lip for books\n    translate([0, 16, 0])\n    rotate([-90, 0, 0])\n    cube([40, wall, 6], center = true);\n    \n    // Support ribs underneath\n    for (rib = [0:1]) {\n        translate([rib * 8 - 4, 8, -3])\n        rotate([-90, 0, 0])\n        cube([6, wall, 12], center = true);\n    }\n    \n    // Decorative vortex detail on shelf\n    translate([0, 0, 2])\n    scale([0.8, 0.8, 1])\n    vortex_pattern();\n}\n\n// Decorative spiral pattern\nmodule vortex_pattern() {\n    for (i = [0:5]) {\n        rotate([0, 0, i * 72])\n        translate([0, 0, 0])\n        rotate_extrude(angle = 360, $fn = 64)\n        translate([5 + i, 0, 0])\n        circle(r = 1, $fn = 16);\n    }\n}\n\n// Bottom support feet\nmodule feet() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([45, 0, 0])\n        cylinder(h = 10, r = 8, $fn = 16);\n    }\n}\n\n// Main assembly\nunion() {\n    vortex_shelf();\n    feet();\n}",
    "renders": true
  },
  {
    "decorative_art": "whirl",
    "openscad_code": "// Whirl Stool - Realistic style, medium complexity\n// Overall: 100mm diameter x 450mm height, 2-3mm wall thickness for 3D printing\n\n// Parameters\nseat_d = 100;\nseat_h = 8;\nleg_h = 400;\nleg_r = 4;\nribs = 6;\nrib_w = 8;\nrib_h = 4;\nwhirls = 3;\ntwist = 60;\n\nmodule whirl_stool() {\n    // Seat top\n    difference() {\n        cylinder(h = seat_h, d = seat_d, $fn = 64);\n        translate([0, 0, 1]) cylinder(h = seat_h, d = seat_d - 4, $fn = 64);\n    }\n\n    // Central post\n    translate([0, 0, seat_h])\n        cylinder(h = leg_h - seat_h, r = 25, $fn = 64);\n\n    // Decorative whirl ribs\n    for (i = [0 : ribs - 1]) {\n        rotate([0, 0, i * 360 / ribs])\n            translate([0, 0, seat_h])\n                for (j = [0 : whirls]) {\n                    twist_start = j * (leg_h - seat_h) / whirls;\n                    twist_end = (j + 1) * (leg_h - seat_h) / whirls;\n                    hull() {\n                        translate([20, 0, twist_start])\n                            rotate([0, 0, j * twist])\n                                cube([rib_w, rib_h, 2], center = true);\n                        translate([25, 0, twist_end])\n                            rotate([0, 0, (j + 0.5) * twist])\n                                cube([rib_w, rib_h, 2], center = true);\n                    }\n                }\n    }\n\n    // Bottom ring for stability\n    translate([0, 0, leg_h - 10])\n        difference() {\n            cylinder(h = 10, d = 80, $fn = 64);\n            translate([0, 0, 1]) cylinder(h = 12, d = 76, $fn = 64);\n        }\n\n    // Reinforcing disks every 100mm\n    for (z = [seat_h + 100 : 100 : leg_h - 50]) {\n        translate([0, 0, z])\n            difference() {\n                cylinder(h = 2, r = 28, $fn = 64);\n                cylinder(h = 3, r = 24, $fn = 64);\n            }\n    }\n\n    // Foot support cross-braces\n    for (a = [0 : 60 : 359]) {\n        rotate([0, 0, a])\n            translate([30, 0, leg_h - 5])\n                cube([60, 3, 10], center = true);\n    }\n}\n\n// Assembly\nwhirl_stool();",
    "renders": true
  },
  {
    "decorative_art": "xera",
    "openscad_code": "// Xera decorative shelf unit in realistic style\n// Medium complexity 3D printable model\n\n// Overall dimensions\nwidth = 100;\ndepth = 40;\nheight = 120;\n\n// Wall thickness\nwall = 2;\n\n// Shelf thickness\nshelf_t = 4;\n\n// Number of shelves\nshelves = 4;\n\n// Post dimensions\npost_w = 6;\npost_d = 6;\n\n// Back panel pattern parameters\npattern_holes = 5;\npattern_rows = 3;\n\nmodule back_panel() {\n    difference() {\n        // Main back panel\n        cube([width, wall, height], center=false);\n        \n        // Decorative circular holes pattern\n        for (row = [0:pattern_rows-1]) {\n            for (col = [0:pattern_holes-1]) {\n                translate([\n                    10 + col * (width-20)/(pattern_holes-1),\n                    wall/2,\n                    10 + row * (height-20)/(pattern_rows-1)\n                ])\n                rotate([90, 0, 0])\n                cylinder(h=wall+1, r=3, center=true, $fn=16);\n            }\n        }\n    }\n}\n\nmodule shelf(y_pos) {\n    difference() {\n        // Main shelf\n        translate([0, 0, y_pos])\n        cube([width, depth, shelf_t], center=false);\n        \n        // Front edge rounding simulation\n        translate([-1, depth-shelf_t-1, y_pos-1])\n        cube([width+2, shelf_t+2, shelf_t+2]);\n    }\n}\n\nmodule side_panel(is_left=true) {\n    // Side panel with cutouts for lighter weight\n    difference() {\n        translate([is_left ? 0 : width-wall, 0, 0])\n        cube([wall, depth, height], center=false);\n        \n        // Decorative vertical slots\n        for (i = [1:3]) {\n            translate([\n                is_left ? wall/2 : width-wall/2,\n                10,\n                i * height/4\n            ])\n            rotate([0, 90, 0])\n            cube([depth-20, wall+1, 8], center=true);\n        }\n    }\n}\n\nmodule post(x_pos, z_pos) {\n    translate([x_pos, 0, z_pos])\n    cube([post_w, post_d, height-z_pos], center=false);\n}\n\n// Main assembly\nunion() {\n    // Back panel\n    translate([0, depth-wall, 0])\n    back_panel();\n    \n    // Side panels\n    side_panel(true);\n    side_panel(false);\n    \n    // Shelves\n    for (i = [0:shelves-1]) {\n        shelf(i * (height-shelf_t)/(shelves-1));\n    }\n    \n    // Front posts for support\n    post(0, 0);\n    post(width-post_w, 0);\n    \n    // Top decorative trim\n    translate([-wall, -wall, height])\n    cube([width+2*wall, depth+2*wall, wall], center=false);\n    \n    // Bottom base\n    translate([-wall, -wall, -wall])\n    cube([width+2*wall, depth+2*wall, wall], center=false);\n    \n    // Small decorative spheres on top posts\n    translate([post_w/2, post_d/2, height+wall])\n    sphere(r=3, $fn=16);\n    \n    translate([width-post_w/2, post_d/2, height+wall])\n    sphere(r=3, $fn=16);\n}",
    "renders": true
  },
  {
    "decorative_art": "yarrow",
    "openscad_code": "// Yarrow Plant Decorative Stool\n// Realistic style, medium complexity\n// Overall dimensions: 80mm diameter x 45mm height\n// Wall thickness: 2mm throughout\n\n$fn = 32;\n\nmodule yarrow_leaf(length, width, thickness) {\n    // Tapered leaf shape with central vein\n    difference() {\n        hull() {\n            translate([0, width/4, 0]) sphere(d=thickness);\n            translate([length, 0, 0]) sphere(d=thickness*0.8);\n            translate([0, -width/4, 0]) sphere(d=thickness);\n        }\n        // Central vein indentation\n        translate([length/2, 0, -thickness/2]) \n            cube([length*1.2, width/10, thickness*1.2], center=true);\n    }\n}\n\nmodule yarrow_flower(diameter, height) {\n    // Composite flower head with multiple small florets\n    union() {\n        // Central disk florets\n        for(i = [0:7]) {\n            rotate([0, 0, i*45]) \n                translate([diameter/4, 0, height/2]) \n                    sphere(d=diameter/6);\n        }\n        // Ray florets (petals)\n        for(i = [0:12]) {\n            rotate([0, 0, i*30]) {\n                translate([diameter/2, 0, height/2]) \n                    yarrow_leaf(diameter/3, diameter/8, diameter/20);\n            }\n        }\n    }\n}\n\nmodule stool_seat() {\n    // Circular seat with decorative yarrow pattern\n    difference() {\n        cylinder(h=4, d=80, center=true);\n        // Hollow center\n        cylinder(h=5, d=76, center=true);\n    }\n    \n    // Add yarrow flowers on seat surface\n    for(angle = [0:60:300]) {\n        rotate([0, 0, angle]) {\n            translate([25, 0, 2.1]) \n                yarrow_flower(12, 3);\n        }\n    }\n}\n\nmodule stool_leg() {\n    // Curved leg with leaf decoration\n    union() {\n        // Main leg structure\n        translate([0, 0, -22.5]) \n            cylinder(h=40, d1=6, d2=4);\n        \n        // Decorative leaves on leg\n        translate([3, 0, -10]) \n            rotate([90, 0, 30]) \n                yarrow_leaf(15, 8, 2);\n        translate([-3, 0, -25]) \n            rotate([90, 0, -30]) \n                yarrow_leaf(12, 6, 1.5);\n    }\n}\n\nmodule support_ring() {\n    // Circular support connecting legs\n    torus_difference = 4;\n    difference() {\n        cylinder(h=3, d=60, center=true);\n        cylinder(h=4, d=60-torso_difference*2, center=true);\n    }\n}\n\n// Main stool assembly\nunion() {\n    stool_seat();\n    \n    // Four legs with 90-degree spacing\n    for(i = [0:90:270]) {\n        rotate([0, 0, i]) {\n            translate([30, 0, -2.5]) \n                stool_leg();\n        }\n    }\n    \n    // Support ring at leg mid-point\n    translate([0, 0, -22.5]) \n        support_ring();\n    \n    // Bottom reinforcement ring\n    translate([0, 0, -42]) {\n        difference() {\n            cylinder(h=2, d=70, center=true);\n            cylinder(h=3, d=66, center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "zenith",
    "openscad_code": "// Zenith Bookshelf / Display Unit\n// Realistic style, medium complexity\n\n// Overall dimensions\nwidth = 80;\ndepth = 30;\nheight = 120;\n\n// Wall thickness\nwall = 2;\n\n// Leg dimensions\nleg_size = 4;\nleg_height = 100;\n\n// Shelf spacing\nshelf_spacing = 30;\nshelf_thickness = 2;\n\n// Decorative arch parameters\narch_radius = 25;\narch_height = 40;\n\n// Back panel pattern details\npanel_width = 8;\npanel_gap = 4;\n\n// Main body\nmodule zenith_unit() {\n    // Base frame\n    difference() {\n        // Outer shell\n        cube([width, depth, height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall])\n        cube([width-wall*2, depth-wall, height-wall*2], center=true);\n    }\n    \n    // Back panel with zenith pattern\n    for (x = [-width/2+panel_width/2 : panel_width+panel_gap : width/2-panel_width/2]) {\n        translate([x, -depth/2+wall/2, 0])\n        cube([panel_width-wall, wall, height-wall*2], center=true);\n    }\n}\n\n// Decorative arch top\nmodule arch_top() {\n    // Arch base\n    translate([0, 0, height/2-arch_height/2])\n    difference() {\n        cube([width-wall*2, wall*2, arch_height], center=true);\n        \n        // Arch cutout\n        translate([0, 0, -arch_height/2+arch_radius])\n        cylinder(h=wall*4, r=arch_radius, center=true);\n    }\n}\n\n// Structural legs\nmodule legs() {\n    for (x = [-1, 1])\n    for (y = [-1, 1]) {\n        translate([x*(width/2-leg_size/2-wall), y*(depth/2-leg_size/2-wall), 0])\n        cube([leg_size, leg_size, leg_height], center=true);\n    }\n}\n\n// Shelves\nmodule shelves() {\n    for (z = [-height/2+shelf_spacing : shelf_spacing : height/2-shelf_spacing]) {\n        translate([0, 0, z])\n        cube([width-wall*4, depth-wall*2, shelf_thickness], center=true);\n    }\n}\n\n// Decorative corner braces\nmodule corner_braces() {\n    brace_size = 6;\n    for (x = [-1, 1])\n    for (y = [-1, 1]) {\n        translate([x*(width/2-wall-brace_size/2), y*(depth/2-wall-brace_size/2), height/2-20])\n        cube([brace_size, brace_size, 20], center=true);\n    }\n}\n\n// Assemble the zenith furniture piece\nunion() {\n    zenith_unit();\n    arch_top();\n    legs();\n    shelves();\n    corner_braces();\n}\n\n// Center the model\ntranslate([0, 0, height/2])",
    "renders": true
  },
  {
    "decorative_art": "arc",
    "openscad_code": "// Arc Decorative Furniture Piece - Decorative Console Table Element\n// 3D printable arc structure with realistic proportions and furniture details\n\n$fn = 32;\n\n// Overall dimensions\narc_width = 80;\narc_height = 60;\narc_depth = 20;\nwall_thickness = 2;\n\n// Base dimensions\nbase_width = 100;\nbase_depth = 25;\nbase_height = 5;\n\n// Top shelf dimensions\ntop_width = 100;\ntop_depth = 25;\ntop_thickness = 3;\n\n// Support pillar dimensions\npillar_width = 6;\npillar_depth = 18;\n\nmodule arc_structure() {\n    // Main arc body\n    difference() {\n        // Outer arc shape\n        linear_extrude(height = arc_depth, center = true) {\n            offset(r = wall_thickness) {\n                arc_shape();\n            }\n        }\n        \n        // Inner hollow space\n        linear_extrude(height = arc_depth + 1, center = true) {\n            arc_shape();\n        }\n    }\n}\n\nmodule arc_shape() {\n    // Create arc profile\n    intersection() {\n        // Full circle\n        circle(r = arc_width/2);\n        \n        // Cut bottom half and add flat base\n        translate([0, -arc_width/2 + arc_height, 0])\n            square([arc_width, arc_width], center = true);\n        \n        // Remove top portion to create arc\n        translate([0, arc_height/2, 0])\n            square([arc_width * 2, arc_height], center = true);\n    }\n}\n\nmodule decorative_pattern() {\n    // Add repeating decorative elements on arc face\n    for (i = [-3:3]) {\n        translate([i * 10, 0, arc_depth/2 + 0.1]) {\n            rotate([90, 0, 0])\n                cylinder(h = 2, r1 = 2, r2 = 1, $fn = 6);\n        }\n    }\n}\n\nmodule base() {\n    // Solid base with chamfered edges\n    difference() {\n        // Main base block\n        translate([0, 0, base_height/2]) {\n            cube([base_width, base_depth, base_height], center = true);\n        }\n        \n        // Chamfer edges\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x * (base_width/2 - 2), y * (base_depth/2 - 2), -1]) {\n                    rotate([0, 0, x * y == 1 ? 0 : 90])\n                        cylinder(h = base_height + 2, r = 2, center = true);\n                }\n            }\n        }\n    }\n}\n\nmodule top_shelf() {\n    // Top shelf with rounded edges\n    difference() {\n        // Main shelf\n        translate([0, 0, arc_height + top_thickness/2]) {\n            cube([top_width, top_depth, top_thickness], center = true);\n        }\n        \n        // Rounded front edge\n        translate([0, top_depth/2 - 2, arc_height + top_thickness + 1])\n            rotate([90, 0, 0])\n                cylinder(h = top_width + 2, r = 2, center = true);\n    }\n}\n\nmodule support_pillars() {\n    // Decorative support columns\n    for (x = [-35, 35]) {\n        translate([x, 0, base_height/2 + (arc_height - base_height)/2]) {\n            difference() {\n                // Main pillar\n                cube([pillar_width, pillar_depth, arc_height - base_height], center = true);\n                \n                // Fluting details\n                for (i = [-1:1]) {\n                    translate([0, i * 4, 0]) {\n                        cube([pillar_width + 1, 1.5, arc_height - base_height + 1], center = true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Support pillars\n    support_pillars();\n    \n    // Arc structure\n    translate([0, 0, base_height]) {\n        arc_structure();\n    }\n    \n    // Top shelf\n    top_shelf();\n    \n    // Decorative elements\n    translate([0, 0, base_height]) {\n        decorative_pattern();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "briar",
    "openscad_code": "// Briar Pipe Stand - Realistic Medium Complexity\n// Overall dimensions: 80 x 60 x 120 mm (W x D x H)\n\n// Base thickness and wall thickness constants\nbase_th = 8;\nwall_th = 2;\n\n// Main base module\nmodule base() {\n    difference() {\n        // Main base block\n        cube([80, 60, base_th], center=true);\n        \n        // Front chamfer for aesthetics\n        translate([0, 28, base_th/2])\n            rotate([0, 45, 0])\n            cube([100, 40, 20], center=true);\n    }\n}\n\n// Decorative side panels with briar pattern\nmodule side_panel() {\n    difference() {\n        // Panel body\n        translate([0, 0, 40])\n            cube([wall_th, 56, 80], center=true);\n        \n        // Briar pattern holes\n        for(i=[0:3]) {\n            for(j=[0:3]) {\n                translate([-wall_th/2-0.1, -25 + i*16, 10 + j*18])\n                    sphere(3);\n            }\n        }\n    }\n}\n\n// Pipe rest support structure\nmodule pipe_rest() {\n    union() {\n        // Main curved rest\n        translate([0, 0, 85])\n            rotate([90, 0, 0])\n            cylinder(h=30, r1=12, r2=8, center=true);\n        \n        // Support arms\n        translate([0, 0, 70])\n            rotate([0, 20, 0])\n            cube([wall_th, 15, 30], center=true);\n    }\n}\n\n// Decorative top finial\nmodule finial() {\n    union() {\n        // Main body\n        translate([0, 0, 105])\n            cylinder(h=12, r=8);\n        \n        // Spherical top\n        translate([0, 0, 111])\n            sphere(8);\n        \n        // Decorative ring\n        translate([0, 0, 105])\n            cylinder(h=3, r1=10, r2=10);\n    }\n}\n\n// Rear support bar\nmodule back_support() {\n    translate([0, -28, 60])\n        cube([76, wall_th, 60], center=true);\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Side panels\n    translate([39, 0, 60]) side_panel();\n    translate([-39, 0, 60]) mirror([1,0,0]) side_panel();\n    \n    // Pipe rest\n    pipe_rest();\n    \n    // Back support\n    back_support();\n    \n    // Top decoration\n    finial();\n    \n    // Front decorative trim\n    translate([0, 29, 4])\n        cube([76, wall_th, 8], center=true);\n}",
    "renders": true
  },
  {
    "decorative_art": "cobalt",
    "openscad_code": "// Cobalt Decorative Accent Chair - Realistic Style\n// Overall size: 120mm height x 60mm width x 65mm depth\n\n// Color definition for cobalt blue\ncolor([0, 0.28, 0.81]) {\n\n// Chair backrest with decorative pattern\nmodule backrest() {\n    difference() {\n        // Main backrest panel\n        translate([0, 28, 60]) cube([60, 4, 60], center=true);\n        \n        // Decorative cutout pattern\n        for (i = [-20:10:20]) {\n            for (j = [35:15:75]) {\n                translate([i, 30, j]) rotate([0, 90, 0]) \n                    cylinder(h=5, r=3, $fn=16);\n            }\n        }\n    }\n    \n    // Backrest frame edges\n    translate([0, 30, 60]) difference() {\n        cube([64, 6, 64], center=true);\n        cube([58, 8, 58], center=true);\n    }\n}\n\n// Seat with cushion detail\nmodule seat() {\n    // Seat base\n    translate([0, 0, 30]) cube([60, 65, 4], center=true);\n    \n    // Cushion detail\n    translate([0, 0, 32]) difference() {\n        cube([58, 63, 8], center=true);\n        // Cushion seam lines\n        for (x = [-20:20:20]) {\n            translate([x, 0, 36]) cube([1, 63, 0.5], center=true);\n        }\n        for (y = [-20:20:20]) {\n            translate([0, y, 36]) cube([58, 1, 0.5], center=true);\n        }\n    }\n}\n\n// Front left leg with tapered design\nmodule front_leg() {\n    translate([-25, -30, 15]) difference() {\n        cylinder(h=30, r1=4, r2=3, $fn=20);\n        // Leg hollow for material saving\n        translate([0, 0, 2]) cylinder(h=26, r1=2, r2=1, $fn=16);\n    }\n}\n\n// Back leg with support brace\nmodule back_leg() {\n    translate([-25, 30, 15]) union() {\n        // Main leg\n        difference() {\n            cylinder(h=30, r1=4, r2=3, $fn=20);\n            translate([0, 0, 2]) cylinder(h=26, r1=2, r2=1, $fn=16);\n        }\n        // Support brace\n        translate([0, 0, 15]) rotate([90, 0, 0]) \n            cylinder(h=25, r1=2, r2=1.5, $fn=16);\n    }\n}\n\n// Armrest with curved design\nmodule armrest(side) {\n    translate([side * 30, 0, 45]) {\n        // Main armrest\n        rotate([0, 10 * side, 0]) \n            translate([0, 0, 0]) cube([4, 30, 20], center=true);\n        \n        // Armrest support\n        translate([0, -15, -10]) \n            cylinder(h=20, r=2, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    backrest();\n    seat();\n    \n    // Legs\n    front_leg();\n    mirror([1, 0, 0]) front_leg();\n    back_leg();\n    mirror([1, 0, 0]) back_leg();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n}\n\n}",
    "renders": true
  },
  {
    "decorative_art": "dagger",
    "openscad_code": "$fn = 30; // smooth curves\n\nmodule blade() {\n    // main blade body\n    difference() {\n        translate([0,0,50]) cube([6,20,100], center=true);\n        // fuller groove\n        translate([0,0,100]) rotate([90,0,0]) cylinder(h=60, d1=2, d2=4, center=true);\n    }\n    // blade tip\n    translate([0,0,105]) rotate([90,0,0]) cylinder(h=10, d1=0, d2=6, center=true);\n    // blade spine\n    translate([0,-10,50]) cube([4,2,100], center=true);\n}\n\nmodule guard() {\n    // crossguard base\n    translate([0,-15,0]) cube([30,4,6], center=true);\n    // decorative ends\n    for(x=[-12,12]) {\n        translate([x,-15,0]) cylinder(h=6, d=6, center=true);\n    }\n    // central ridge detail\n    translate([0,-13,3]) cube([26,2,2], center=true);\n}\n\nmodule grip() {\n    // main handle\n    difference() {\n        translate([0,0,-30]) rotate([90,0,0]) cylinder(h=60, d=10, center=true);\n        // decorative grooves\n        for(z=[-15:5:15]) {\n            translate([0,0,z]) rotate([90,0,0]) cylinder(h=60, d=9, center=true);\n        }\n    }\n    // pommel\n    translate([0,0,-60]) sphere(d=12);\n    // pommel collar\n    translate([0,0,-55]) cylinder(h=5, d1=12, d2=10, center=true);\n}\n\nmodule decorative_inlay() {\n    // vine pattern on grip\n    for(i=[-2:0.5:2]) {\n        rotate([0,0,i*30]) translate([3.5,0,-10-i*5]) rotate([90,0,0]) cylinder(h=2, d=1.5, center=true);\n    }\n}\n\n// assembly\nunion() {\n    blade();\n    guard();\n    grip();\n    decorative_inlay();\n}",
    "renders": true
  },
  {
    "decorative_art": "frost",
    "openscad_code": "// Frost Furniture - Decorative Wall Shelf\n// Realistic style, medium complexity\n// Dimensions: 120mm width x 80mm height x 30mm depth\n\n$fn = 32;\n\nmodule main_frame() {\n    // Outer frame - 2mm thick walls\n    difference() {\n        // Outer box\n        cube([120, 80, 30]);\n        \n        // Hollow interior\n        translate([2, 2, 2])\n            cube([116, 76, 28]);\n    }\n}\n\nmodule frost_pattern() {\n    // Create frost crystal patterns\n    for (i = [5:15:110]) {\n        for (j = [5:15:70]) {\n            // Main crystal branch\n            translate([i, j, 29])\n                rotate([0, 0, 45])\n                scale([1, 0.3, 1])\n                cylinder(h=2, r1=3, r2=0.5);\n                \n            // Side branches\n            translate([i+2, j+2, 29])\n                rotate([0, 0, -30])\n                scale([0.7, 0.2, 1])\n                cylinder(h=1.5, r1=2, r2=0.3);\n                \n            translate([i-2, j+2, 29])\n                rotate([0, 0, 60])\n                scale([0.7, 0.2, 1])\n                cylinder(h=1.5, r1=2, r2=0.3);\n        }\n    }\n}\n\nmodule shelf_supports() {\n    // Left support bracket\n    translate([15, 5, 0])\n    difference() {\n        // Main bracket body\n        cube([8, 70, 8]);\n        \n        // Lightening holes\n        for (k = [10:20:60]) {\n            translate([4, k, 4])\n                sphere(r=2);\n        }\n    }\n    \n    // Right support bracket\n    translate([97, 5, 0])\n    mirror([1, 0, 0])\n    difference() {\n        cube([8, 70, 8]);\n        for (k = [10:20:60]) {\n            translate([4, k, 4])\n                sphere(r=2);\n        }\n    }\n}\n\nmodule shelf_surface() {\n    // Main shelf surface\n    translate([20, 10, 8])\n        cube([80, 60, 2]);\n    \n    // Front edge detail\n    translate([20, 10, 10])\n    difference() {\n        cube([80, 2, 4]);\n        for (x = [25:10:95]) {\n            translate([x, 1, 2])\n                sphere(r=1.5);\n        }\n    }\n}\n\nmodule wall_mounting_holes() {\n    // Keyhole mounting slots\n    translate([10, 40, 15])\n    rotate([90, 0, 0])\n    cylinder(h=20, r=2.5);\n    \n    translate([110, 40, 15])\n    rotate([90, 0, 0])\n    cylinder(h=20, r=2.5);\n    \n    translate([10, 40, 15])\n    rotate([90, 0, 0])\n    cube([5, 20, 5]);\n    \n    translate([110, 40, 15])\n    rotate([90, 0, 0])\n    cube([5, 20, 5]);\n}\n\n// Assembly\nunion() {\n    main_frame();\n    shelf_supports();\n    shelf_surface();\n    frost_pattern();\n}\n\n// Remove mounting holes\ndifference() {\n    children();\n    wall_mounting_holes();\n}",
    "renders": true
  },
  {
    "decorative_art": "glide",
    "openscad_code": "// Glide furniture foot - realistic style\n// Medium complexity 3D printable furniture glide\n\n// Overall dimensions\nglide_height = 45;\nbase_diameter = 40;\ntop_diameter = 35;\nwall_thickness = 2;\n\n// Module for decorative ring pattern\nmodule decorative_ring(height, outer_d, inner_d, count) {\n    for (i = [0:count-1]) {\n        rotate([0, 0, i * 360/count])\n        translate([0, (outer_d + inner_d)/4, height/2])\n        scale([1, 0.3, 1])\n        cylinder(h = height, d = (outer_d - inner_d)/2, $fn = 20);\n    }\n}\n\n// Main glide body module\nmodule glide_body() {\n    // Tapered outer shell\n    cylinder(h = glide_height, d1 = base_diameter, d2 = top_diameter, $fn = 60);\n    \n    // Hollow interior\n    translate([0, 0, wall_thickness])\n    cylinder(h = glide_height - wall_thickness, d1 = base_diameter - 2*wall_thickness, \n             d2 = top_diameter - 2*wall_thickness, $fn = 60);\n    \n    // Reinforcement ribs\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([0, (top_diameter - 2*wall_thickness)/2 - 2, glide_height/2])\n        cube([wall_thickness, 4, glide_height - 2*wall_thickness], center = true);\n    }\n    \n    // Base pad\n    translate([0, 0, 0.5])\n    cylinder(h = 3, d = base_diameter + 4, $fn = 60);\n    \n    // Top collar\n    translate([0, 0, glide_height - 3])\n    cylinder(h = 3, d = top_diameter + 2, $fn = 60);\n    \n    // Decorative rings\n    decorative_ring(2, base_diameter - 5, base_diameter - 15, 8);\n    translate([0, 0, 15])\n    decorative_ring(2, base_diameter - 10, base_diameter - 20, 10);\n    translate([0, 0, 30])\n    decorative_ring(2, top_diameter - 5, top_diameter - 15, 12);\n}\n\n// Screw insert cavity\nmodule screw_insert() {\n    // Main cavity\n    translate([0, 0, glide_height - 15])\n    cylinder(h = 15, d = 8, $fn = 20);\n    \n    // Tapered entry\n    translate([0, 0, glide_height - 20])\n    cylinder(h = 5, d1 = 10, d2 = 8, $fn = 20);\n    \n    // Anti-rotation notches\n    for (i = [0:1]) {\n        rotate([0, 0, i * 180])\n        translate([4, 0, glide_height - 10])\n        cube([2, 3, 10], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    glide_body();\n    difference() {\n        cube([0.001, 0.001, 0.001]);  // Placeholder union\n        screw_insert();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "hush",
    "openscad_code": "// Hush chair - modern acoustic privacy chair\n// Overall dimensions: 120mm width × 110mm depth × 130mm height\n// Wall thickness: 2mm throughout for 3D printability\n\n$fn = 32;\n\nmodule shell_curve(height, width, thickness, radius) {\n    // Creates the curved outer shell of the hush chair\n    difference() {\n        // Main shell with rounded corners\n        minkowski() {\n            cube([width, thickness, height], center = true);\n            sphere(radius);\n        }\n        \n        // Hollow out the inside\n        minkowski() {\n            cube([width - 4, thickness - 4, height - 4], center = true);\n            sphere(radius - 2);\n        }\n    }\n}\n\nmodule seat_cushion() {\n    // Padded seat cushion with realistic proportions\n    translate([0, 0, 15]) {\n        difference() {\n            // Main cushion body\n            scale([1, 0.8, 0.3])\n                sphere(r = 45);\n            \n            // Slight indentation for sitting comfort\n            translate([0, -5, 10])\n                scale([0.9, 0.7, 0.2])\n                    sphere(r = 40);\n        }\n    }\n}\n\nmodule back_support() {\n    // Curved back support structure\n    translate([0, -35, 65]) {\n        rotate([15, 0, 0]) {\n            difference() {\n                // Main back panel\n                rotate_extrude(angle = 180)\n                    translate([50, 0, 0])\n                        circle(r = 5);\n                \n                // Remove excess material\n                translate([0, 0, -5])\n                    cube([100, 10, 50], center = true);\n            }\n        }\n    }\n}\n\nmodule acoustic_panels() {\n    // Decorative acoustic panel pattern on sides\n    for (i = [-1, 1]) {\n        translate([i * 55, 0, 60]) {\n            rotate([0, i * 15, 0]) {\n                // Panel grid pattern\n                for (x = [-20:10:20]) {\n                    for (y = [30:15:90]) {\n                        translate([x, 0, y])\n                            cylinder(h = 2, r = 3);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule base_frame() {\n    // Solid base frame for stability\n    translate([0, 0, 2]) {\n        difference() {\n            // Main base\n            cube([110, 100, 4], center = true);\n            \n            // Cable management hole\n            translate([0, 40, 0])\n                cylinder(h = 5, r = 15, center = true);\n        }\n    }\n}\n\nmodule armrest(side) {\n    // Integrated armrest on each side\n    translate([side * 45, 0, 45]) {\n        rotate([0, -15, 0]) {\n            difference() {\n                // Armrest shape\n                hull() {\n                    translate([0, -30, 0])\n                        sphere(r = 8);\n                    translate([0, 30, 0])\n                        sphere(r = 8);\n                }\n                \n                // Hollow for weight reduction\n                scale([0.6, 0.8, 0.6])\n                    sphere(r = 12);\n            }\n        }\n    }\n}\n\nmodule hush_chair() {\n    union() {\n        // Base structure\n        base_frame();\n        \n        // Main shell components\n        translate([0, 0, 65]) {\n            shell_curve(120, 110, 2, 15);\n            rotate([0, 90, 0]) {\n                shell_curve(120, 110, 2, 15);\n            }\n        }\n        \n        // Seating elements\n        seat_cushion();\n        back_support();\n        \n        // Side features\n        acoustic_panels();\n        \n        // Armrests\n        armrest(1);\n        armrest(-1);\n        \n        // Front opening trim\n        translate([0, 50, 65])\n            rotate([90, 0, 0])\n                cylinder(h = 2, r = 50);\n    }\n}\n\n// Render the complete chair\nhush_chair();",
    "renders": true
  },
  {
    "decorative_art": "ivory",
    "openscad_code": "// Ivory-inlaid side table (height 80 mm, Ø 60 mm) – printable without supports\n// All walls ≥2 mm, decorative ivory inlay flush with surface\n\n// global parameters\nleg_d     = 6;          // leg diameter\nleg_h     = 75;         // leg height\ntop_r     = 30;         // tabletop radius\ntop_t     = 4;          // tabletop thickness\napron_h   = 15;         // apron height\ninlay_t   = 1;          // ivory inlay thickness\nwall_t    = 2;          // printable wall thickness\n\n$fn = 48;\n\n// ivory colour\nmodule ivory() color([0.98,0.95,0.90]);\n\n// --- main table -------------------------------------------------------\nunion() {\n    // four legs\n    for(a=[0:90:270])\n        rotate([0,0,a])\n            translate([top_r*0.65,0,0])\n                leg();\n\n    // apron frames\n    apron();\n\n    // tabletop with ivory inlay\n    tabletop();\n}\n\n// --- leg: simple turned look -----------------------------------------\nmodule leg() {\n    difference() {\n        // main turning profile\n        union() {\n            cylinder(h=leg_h, d1=leg_d, d2=leg_d*0.9);                    // straight part\n            translate([0,0,leg_h-8])\n                cylinder(h=8, d1=leg_d*0.9, d2=leg_d*1.1);                // foot flare\n            translate([0,0,leg_h])\n                sphere(d=leg_d*1.1);                                        // ball foot\n        }\n\n        // hidden internal relief to save material\n        translate([0,0,5])\n            cylinder(h=leg_h-10, d=leg_d-wall_t*2, $fn=16);\n    }\n}\n\n// --- apron: square frame with ivory stringing --------------------------\nmodule apron() {\n    // outer frame\n    difference() {\n        cube([top_r*1.3, top_r*1.3, apron_h], center=true);\n        cube([top_r*1.3-wall_t*2, top_r*1.3-wall_t*2, apron_h+2], center=true);\n    }\n\n    // ivory stringing along top edge\n    ivory() {\n        translate([0,0,apron_h/2-inlay_t/2])\n            difference() {\n                cube([top_r*1.3+0.2, top_r*1.3+0.2, inlay_t], center=true);\n                cube([top_r*1.3-2, top_r*1.3-2, inlay_t+0.2], center=true);\n            }\n    }\n}\n\n// --- tabletop with star-shaped ivory inlay -----------------------------\nmodule tabletop() {\n    // main disc\n    cylinder(h=top_t, r=top_r);\n\n    // ivory inlay: star pattern\n    ivory() {\n        translate([0,0,top_t-inlay_t]) {\n            difference() {\n                cylinder(h=inlay_t, r=top_r-2);                           // ivory layer\n                // cut star-shaped voids\n                for(a=[0:60:300]) {\n                    rotate([0,0,a]) {\n                        translate([top_r*0.4,0,0])\n                            rotate([0,0,30])\n                                cube([top_r*0.7, 3, inlay_t+0.1], center=true);\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "jolt",
    "openscad_code": "// Jolt decorative furniture art piece - realistic style\n// A stylized lightning bolt shaped shelf/bookend unit\n\n// Overall dimensions\nwidth = 120;\nheight = 100;\ndepth = 40;\nwall_thickness = 2;\n\n// Lightning bolt parameters\nbolt_width = 8;\nbolt_height = 85;\nbolt_depth = depth - 4;\n\n// Base dimensions\nbase_height = 15;\nbase_depth = depth;\n\n// Shelf parameters\nshelf_count = 3;\nshelf_thickness = 3;\nshelf_spacing = (bolt_height - base_height - 10) / (shelf_count + 1);\n\nmodule bolt_profile() {\n    // Create realistic lightning bolt shape with multiple segments\n    difference() {\n        // Main bolt body\n        union() {\n            // Vertical stem\n            translate([0, 0, 0])\n                cube([bolt_width, bolt_depth, bolt_height]);\n            \n            // First zig-zag segment\n            translate([bolt_width - 2, 0, bolt_height * 0.7])\n                rotate([0, 0, -30])\n                cube([bolt_width * 1.5, bolt_depth, bolt_height * 0.3]);\n            \n            // Second zig-zag segment\n            translate([-bolt_width * 0.5, 0, bolt_height * 0.4])\n                rotate([0, 0, 30])\n                cube([bolt_width * 1.5, bolt_depth, bolt_height * 0.3]);\n            \n            // Bottom segment\n            translate([bolt_width * 0.5, 0, bolt_height * 0.15])\n                rotate([0, 0, -20])\n                cube([bolt_width * 1.2, bolt_depth, bolt_height * 0.2]);\n        }\n        \n        // Add realistic edge bevels\n        for(i = [0:3]) {\n            translate([i * 2, -1, i * 2])\n                cube([bolt_width - i * 4, bolt_depth + 2, bolt_height - i * 4]);\n        }\n    }\n}\n\nmodule base() {\n    // Decorative base with rounded edges\n    difference() {\n        // Main base\n        translate([-10, 0, 0])\n            cube([width + 20, base_depth, base_height]);\n        \n        // Rounded edges\n        translate([width/2, base_depth/2, base_height/2])\n            sphere(d = base_depth - 2, $fn = 30);\n        \n        // Cutout for lightning bolt\n        translate([width/2 - bolt_width/2, -1, base_height/2])\n            cube([bolt_width + 2, base_depth + 2, base_height + 2]);\n    }\n}\n\nmodule shelves() {\n    // Floating shelves attached to bolt\n    for(i = [1:shelf_count]) {\n        // Calculate shelf position\n        shelf_y = i * shelf_spacing + base_height;\n        \n        // Main shelf platform\n        translate([width/2 + bolt_width/2 + 2, 0, shelf_y])\n            cube([width/2 - bolt_width/2 - 2, bolt_depth - 4, shelf_thickness]);\n        \n        // Support bracket\n        translate([width/2 + bolt_width/2, 0, shelf_y - shelf_thickness])\n            cube([5, bolt_depth - 4, shelf_thickness * 2]);\n        \n        // Decorative front lip\n        translate([width/2 + bolt_width/2 + 2, 0, shelf_y + shelf_thickness])\n            cube([width/2 - bolt_width/2 - 2, 2, 2]);\n    }\n}\n\nmodule decorative_details() {\n    // Energy bolt pattern on sides\n    for(i = [0:5]) {\n        translate([width/2 - bolt_width/2 - 1, -1, base_height + i * 15])\n            rotate([90, 0, 0])\n            cylinder(h = bolt_depth + 2, d1 = 3, d2 = 1, $fn = 6);\n    }\n    \n    // Corner reinforcements\n    translate([0, 0, 0])\n        cube([5, 5, base_height]);\n    translate([width - 5, 0, 0])\n        cube([5, 5, base_height]);\n}\n\n// Main assembly\nunion() {\n    // Base\n    base();\n    \n    // Lightning bolt structure\n    translate([width/2 - bolt_width/2, 2, base_height])\n        bolt_profile();\n    \n    // Shelves\n    shelves();\n    \n    // Decorative elements\n    decorative_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "karma",
    "openscad_code": "// Karma furniture - Decorative side table with karma wheel motif\n// Dimensions: 120mm diameter x 45mm height\n// Wall thickness: 2mm throughout\n\n$fn = 50;\n\n// Main module for the karma table\nmodule karma_table() {\n    // Base karma wheel structure\n    union() {\n        // Central hub\n        translate([0, 0, 2]) \n            cylinder(h=4, r=15);\n        \n        // Outer rim\n        translate([0, 0, 2]) \n            difference() {\n                cylinder(h=4, r=60);\n                cylinder(h=4.1, r=58);\n            }\n        \n        // Karma wheel spokes (8-fold symmetry)\n        for(i = [0:7]) {\n            rotate([0, 0, i * 45])\n                translate([36.5, 0, 2])\n                    cube([29, 4, 4]);\n        }\n        \n        // Decorative inner ring\n        translate([0, 0, 6]) \n            difference() {\n                cylinder(h=2, r=50);\n                cylinder(h=2.1, r=48);\n            }\n    }\n    \n    // Table top surface\n    difference() {\n        // Main top disk\n        translate([0, 0, 8])\n            cylinder(h=2, r=60);\n        \n        // Karma symbol engraving\n        translate([0, 0, 9.5])\n            karma_engraving();\n    }\n    \n    // Three support legs\n    for(i = [0:2]) {\n        rotate([0, 0, i * 120 + 30])\n            translate([40, 0, 0])\n                support_leg();\n    }\n    \n    // Bottom base ring\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=2, r=60);\n            cylinder(h=2.1, r=58);\n        }\n}\n\n// Karma symbol engraving\nmodule karma_engraving() {\n    linear_extrude(height=1.5) {\n        // Center circle\n        circle(r=8);\n        \n        // Outer circle\n        circle(r=45);\n        \n        // Yin-yang curves\n        translate([0, 15, 0])\n            scale([1, 0.5, 1])\n                circle(r=15);\n        translate([0, -15, 0])\n            scale([1, 0.5, 1])\n                circle(r=15);\n        \n        // Connecting lines\n        hull() {\n            translate([0, 8, 0]) circle(r=1);\n            translate([0, 30, 0]) circle(r=1);\n        }\n        hull() {\n            translate([0, -8, 0]) circle(r=1);\n            translate([0, -30, 0]) circle(r=1);\n        }\n    }\n}\n\n// Support leg module\nmodule support_leg() {\n    union() {\n        // Main leg\n        translate([0, -4, 1])\n            cube([8, 8, 40]);\n        \n        // Decorative foot\n        translate([0, 0, 0])\n            sphere(r=6);\n        \n        // Top bracket\n        translate([0, 0, 41])\n            difference() {\n                cube([12, 8, 4]);\n                translate([6, 0, -0.1]) \n                    cylinder(h=4.2, r=4);\n            }\n    }\n}\n\n// Generate the table\nkarma_table();",
    "renders": true
  },
  {
    "decorative_art": "lark",
    "openscad_code": "// Lark-inspired decorative shelf\n// Dimensions: 120mm wide x 80mm deep x 100mm high\n// Wall thickness: 2mm throughout for 3D printing\n\nmodule rounded_cube(size, radius) {\n    // Create a cube with rounded edges\n    hull() {\n        translate([radius, radius, radius]) sphere(r=radius);\n        translate([size.x - radius, radius, radius]) sphere(r=radius);\n        translate([radius, size.y - radius, radius]) sphere(r=radius);\n        translate([size.x - radius, size.y - radius, radius]) sphere(r=radius);\n        translate([radius, radius, size.z - radius]) sphere(r=radius);\n        translate([size.x - radius, radius, size.z - radius]) sphere(r=radius);\n        translate([radius, size.y - radius, size.z - radius]) sphere(r=radius);\n        translate([size.x - radius, size.y - radius, size.z - radius]) sphere(r=radius);\n    }\n}\n\nmodule wing_support(x_pos, y_pos, z_pos) {\n    // Create decorative wing-shaped support\n    translate([x_pos, y_pos, z_pos]) {\n        difference() {\n            // Main wing structure\n            rotate([0, 0, 15]) rounded_cube([25, 2, 20], 2);\n            // Cutout for feather pattern\n            for (i = [0:3]) {\n                translate([5 + i * 5, -1, 5 + i * 3]) \n                    cube([1, 4, 10 - i * 2]);\n            }\n        }\n    }\n}\n\nmodule tail_support() {\n    // Create tail-inspired rear support\n    translate([5, 10, 0]) {\n        difference() {\n            // Main tail shape\n            rotate([0, 15, 0]) rounded_cube([15, 2, 40], 2);\n            // Feather details\n            for (i = [0:4]) {\n                translate([2 + i * 2.5, -1, 5 + i * 6]) \n                    cube([1.5, 4, 8]);\n            }\n        }\n    }\n}\n\nmodule beak_bookend() {\n    // Create bookend shaped like beak\n    translate([115, 35, 35]) {\n        rotate([0, -30, 0]) {\n            difference() {\n                // Main beak shape\n                rounded_cube([15, 8, 10], 3);\n                // Hollow out\n                translate([5, 2, 2]) rounded_cube([11, 4, 6], 2);\n            }\n        }\n    }\n}\n\n// Main shelf body\ndifference() {\n    // Outer shell\n    rounded_cube([120, 80, 100], 5);\n    \n    // Hollow interior\n    translate([2, 2, 2]) rounded_cube([116, 76, 96], 3);\n}\n\n// Shelf divisions\nfor (i = [1:2]) {\n    translate([2, 2, i * 30]) rounded_cube([116, 76, 2], 1);\n}\n\n// Wing supports\nwing_support(10, 78, 30);\nmirror([1, 0, 0]) wing_support(10, 78, 30);\n\n// Tail support at back\ntail_support();\n\n// Beak bookend at front\nbeak_bookend();\n\n// Decorative perch rail\ntranslate([10, 5, 85]) rounded_cube([100, 2, 10], 2);\n\n// Eye details on sides\nfor (side = [0, 1]) {\n    translate(side == 0 ? [2, 40, 75] : [118, 40, 75]) {\n        rotate([0, side == 0 ? -90 : 90, 0]) {\n            difference() {\n                cylinder(h = 5, r = 4, $fn = 32);\n                cylinder(h = 6, r = 2, $fn = 32);\n            }\n        }\n    }\n}\n\n// Bottom feet\nfor (x = [20, 100]) {\n    for (y = [20, 60]) {\n        translate([x, y, 0]) {\n            difference() {\n                rounded_cube([10, 10, 5], 2);\n                translate([2, 2, 2]) rounded_cube([6, 6, 5], 1);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "mirage",
    "openscad_code": "// Mirage Side Table - Optical Illusion Furniture Piece\n// A 3D printable table that appears to float with hidden supports\n\n$fn = 32;\n\n// Main dimensions\ntable_width = 80;\ntable_depth = 60;\ntable_height = 90;\nwall_thickness = 2;\n\nmodule tabletop() {\n    // Main illusion surface - appears to float\n    translate([0, 0, table_height-3])\n        cube([table_width, table_depth, wall_thickness], center=true);\n    \n    // Hidden support structure disguised as shadow\n    translate([0, 0, table_height-10])\n        cube([table_width*0.3, table_depth*0.3, 7], center=true);\n}\n\nmodule leg_assembly() {\n    // Create four legs with tapered illusion\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            leg_position(x*table_width/2.5, y*table_depth/2.5);\n        }\n    }\n}\n\nmodule leg_position(x, y) {\n    // Main leg structure - tapered for illusion\n    translate([x, y, table_height/2-5])\n        rotate([0, 0, atan2(y, x)])\n        linear_extrude(height=table_height-10, scale=0.3, center=true)\n            circle(d=8, $fn=6);\n    \n    // Hidden cross bracing\n    translate([x*0.7, y*0.7, table_height/3])\n        cube([abs(x)*0.1+wall_thickness, abs(y)*0.1+wall_thickness, table_height/3], center=true);\n}\n\nmodule base_frame() {\n    // Bottom frame for stability\n    translate([0, 0, 5])\n        cube([table_width*1.1, table_depth*1.1, wall_thickness*2], center=true);\n    \n    // Decorative corner brackets\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x*table_width/2, y*table_depth/2, 8])\n                rotate([0, 0, 45])\n                cube([8, 8, 4], center=true);\n        }\n    }\n}\n\nmodule shadow_effect() {\n    // Creates the floating illusion shadow\n    color(\"gray\", 0.3)\n    translate([0, 0, -1])\n        cube([table_width*1.2, table_depth*1.2, wall_thickness], center=true);\n}\n\n// Assembly\nunion() {\n    // Main table structure\n    tabletop();\n    leg_assembly();\n    base_frame();\n    \n    // Hidden structural supports (create the mirage)\n    difference() {\n        union() {\n            // Vertical support beams (disguised)\n            for (i = [-1, 1]) {\n                translate([i*table_width/4, 0, table_height/2])\n                    cube([wall_thickness*2, table_depth*0.8, table_height-10], center=true);\n            }\n            \n            // Horizontal support (appears as shadow line)\n            translate([0, 0, table_height/2])\n                cube([table_width*0.9, wall_thickness*2, table_height/2], center=true);\n        }\n        \n        // Cutouts to maintain illusion\n        translate([0, 0, table_height/2])\n            cube([table_width*1.2, table_depth*1.2, table_height], center=true);\n    }\n}\n\n// Optional shadow effect for rendering\n// shadow_effect();",
    "renders": true
  },
  {
    "decorative_art": "nimbus",
    "openscad_code": "// Realistic Nimbus Furniture Piece\n// A decorative wall-mounted shelf unit shaped like a golden nimbus (halo) with cloud-like curves\n// Overall dimensions: 120mm diameter, 25mm depth, 2mm wall thickness\n\n$fn = 50;\n\n// Main module\nmodule nimbus_shelf() {\n    // Wall mounting plate\n    translate([0, -60, 0])\n        rotate([90, 0, 0])\n        cylinder(h=3, d1=25, d2=35, center=true);\n    \n    // Central halo ring structure\n    difference() {\n        // Outer ring\n        rotate_extrude(angle=360, convexity=10)\n            translate([50, 0, 0])\n                circle(r=3);\n        \n        // Inner cutout for hollow structure\n        rotate_extrude(angle=360, convexity=10)\n            translate([46, 0, 0])\n                circle(r=2.5);\n    }\n    \n    // Cloud puff segments around the ring\n    for(i=[0:30:330]) {\n        rotate([0, 0, i])\n            translate([50, 0, 0])\n                cloud_puff();\n    }\n    \n    // Shelf surface\n    difference() {\n        // Main shelf\n        translate([0, 0, -12.5])\n            scale([1, 0.4, 1])\n                cylinder(h=25, r=48, center=true);\n        \n        // Relief pattern on shelf\n        for(i=[0:45:315]) {\n            rotate([0, 0, i])\n                translate([30, 0, -12])\n                cylinder(h=25, r=8, center=true);\n        }\n    }\n    \n    // Support brackets\n    for(i=[0:120:240]) {\n        rotate([0, 0, i])\n            translate([35, 0, -12.5])\n                support_bracket();\n    }\n    \n    // Decorative inner ring detail\n    translate([0, 0, 0])\n        difference() {\n            cylinder(h=3, r=30, center=true);\n            cylinder(h=4, r=28, center=true);\n        }\n    \n    // Small decorative spheres at cardinal points\n    for(i=[0:90:270]) {\n        rotate([0, 0, i])\n            translate([40, 0, 0])\n                sphere(r=3);\n    }\n}\n\n// Cloud puff module\nmodule cloud_puff() {\n    union() {\n        sphere(r=8);\n        translate([6, 5, 0]) sphere(r=6);\n        translate([-6, 4, 0]) sphere(r=7);\n        translate([0, -5, 0]) sphere(r=6);\n    }\n}\n\n// Support bracket module\nmodule support_bracket() {\n    difference() {\n        // Main bracket\n        union() {\n            translate([0, 0, 0])\n                cube([4, 8, 25], center=true);\n            translate([0, 4, -10])\n                rotate([90, 0, 0])\n                cylinder(h=8, r=2, center=true);\n        }\n        \n        // Screw hole\n        translate([0, 0, 10])\n            rotate([90, 0, 0])\n            cylinder(h=5, r=1.5, center=true);\n    }\n}\n\n// Render the model\nnimbus_shelf();",
    "renders": true
  },
  {
    "decorative_art": "orchid",
    "openscad_code": "// Orchid Decorative Side Table\n// Realistic styling with orchid-inspired floral design\n// Overall height: 110mm, tabletop diameter: 120mm\n\n// Parameters\ntable_height = 110;\ntabletop_diameter = 120;\nstem_thickness = 8;\npetal_thickness = 3;\nwall_thickness = 2;\n\n// Main table structure\nmodule orchid_table() {\n    union() {\n        // Central stem/trunk\n        translate([0, 0, table_height/2])\n            cylinder(h=table_height, r=stem_thickness, $fn=32);\n        \n        // Tabletop base\n        translate([0, 0, table_height-2])\n            cylinder(h=4, r=tabletop_diameter/2, $fn=64);\n        \n        // Orchid petals forming the tabletop edge\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([tabletop_diameter/2-15, 0, table_height-2])\n                    orchid_petal();\n        }\n        \n        // Orchid flower center detail\n        translate([0, 0, table_height+2])\n            orchid_center();\n        \n        // Root-like base support\n        translate([0, 0, 5])\n            orchid_base();\n    }\n}\n\n// Individual orchid petal module\nmodule orchid_petal() {\n    difference() {\n        // Main petal shape\n        union() {\n            // Curved petal\n            translate([-5, 0, 0])\n                scale([1, 1.5, 0.3])\n                    sphere(r=15, $fn=24);\n            \n            // Petal extension\n            translate([5, 0, 0])\n                rotate([0, 20, 0])\n                    scale([1.2, 1, 0.3])\n                        sphere(r=12, $fn=20);\n        }\n        \n        // Hollow out petal for 3D printing\n        translate([-2, 0, -petal_thickness/2])\n            scale([0.8, 0.8, 1.2])\n                cube([20, 20, petal_thickness], center=true);\n    }\n}\n\n// Orchid flower center detail\nmodule orchid_center() {\n    union() {\n        // Central sphere\n        sphere(r=6, $fn=32);\n        \n        // Decorative ridges\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([0, 3, 0])\n                    cube([1, 6, 2], center=true);\n        }\n    }\n}\n\n// Root-like base support\nmodule orchid_base() {\n    difference() {\n        union() {\n            // Main base\n            cylinder(h=10, r=20, $fn=32);\n            \n            // Root extensions\n            for(i=[0:5]) {\n                rotate([0, 0, i*72])\n                    translate([12, 0, 0])\n                        rotate([0, 30, 0])\n                            cylinder(h=8, r1=8, r2=4, $fn=16);\n            }\n        }\n        \n        // Hollow base for weight reduction\n        translate([0, 0, -1])\n            cylinder(h=12, r=18, $fn=32);\n    }\n}\n\n// Render the table\norchid_table();",
    "renders": true
  },
  {
    "decorative_art": "prowl",
    "openscad_code": "// Prowl Decorative Furniture - Realistic Style\n// Dimensions: 120mm wide x 60mm deep x 80mm tall\n\nmodule leg(x_pos, y_pos, height) {\n    // Main leg post with tapered design\n    translate([x_pos, y_pos, 0]) {\n        difference() {\n            // Tapered leg\n            cylinder(h=height, r1=6, r2=4, $fn=16);\n            // Hollow core for weight reduction\n            cylinder(h=height-2, r1=4, r2=2, $fn=16);\n        }\n        // Decorative foot detail\n        translate([0, 0, -2]) {\n            cylinder(h=4, r=7, $fn=20);\n            cylinder(h=2, r=5, $fn=20);\n        }\n    }\n}\n\nmodule prowl_frame() {\n    // Base rectangle dimensions\n    base_w = 120;\n    base_d = 60;\n    leg_h = 70;\n    \n    // Four tapered legs\n    leg(-base_w/2 + 8, -base_d/2 + 8, leg_h);\n    leg(base_w/2 - 8, -base_d/2 + 8, leg_h);\n    leg(-base_w/2 + 8, base_d/2 - 8, leg_h);\n    leg(base_w/2 - 8, base_d/2 - 8, leg_h);\n    \n    // Bottom frame rails\n    translate([0, 0, leg_h/2]) {\n        // Front rail\n        translate([0, -base_d/2 + 10, 0])\n            cube([base_w - 32, 4, 8], center=true);\n        // Back rail\n        translate([0, base_d/2 - 10, 0])\n            cube([base_w - 32, 4, 8], center=true);\n        // Side rails\n        translate([-base_w/2 + 16, 0, 0])\n            cube([4, base_d - 20, 8], center=true);\n        translate([base_w/2 - 16, 0, 0])\n            cube([4, base_d - 20, 8], center=true);\n    }\n}\n\nmodule prowl_top() {\n    // Main tabletop with rounded edges\n    translate([0, 0, 70]) {\n        difference() {\n            // Top surface with rounded corners\n            minkowski() {\n                cube([118, 58, 8], center=true);\n                cylinder(h=0.1, r=2, $fn=16);\n            }\n            // Hollow underside\n            translate([0, 0, 2])\n                cube([110, 50, 6], center=true);\n        }\n        \n        // Decorative edge molding\n        for(i = [-1, 1]) {\n            translate([i * 55, 0, 2])\n                cube([6, 58, 4], center=true);\n            translate([0, i * 27, 2])\n                cube([118, 6, 4], center=true);\n        }\n    }\n}\n\nmodule prowl_details() {\n    // Center decorative panel\n    translate([0, 0, 35]) {\n        difference() {\n            cube([80, 40, 30], center=true);\n            // Cutout pattern\n            for(x = [-30, -10, 10, 30]) {\n                for(y = [-15, -5, 5, 15]) {\n                    translate([x, y, 0])\n                        cylinder(h=32, r=3, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Side decorative slats\n    for(side = [-1, 1]) {\n        translate([side * 45, 0, 40]) {\n            for(i = [-1, 0, 1]) {\n                translate([0, i * 20, 0])\n                    cube([4, 8, 20], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    prowl_frame();\n    prowl_top();\n    prowl_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "quake",
    "openscad_code": "// Quake-style decorative side table (realistic style, medium complexity)\n\n// Overall dimensions\ntable_height = 70;\ntable_top_d = 110;\ntable_top_t = 4;\nleg_thick = 8;\nsupport_ring_h = 15;\nsupport_ring_pos = table_height - 25;\n\n// Main table top - octagonal shape\nmodule table_top() {\n    difference() {\n        // Main octagon\n        cylinder(h=table_top_t, d=table_top_d, $fn=8);\n        \n        // Center hole for decoration\n        cylinder(h=table_top_t+1, d=table_top_d*0.3, $fn=8);\n        \n        // Corner cutouts for style\n        for (i=[0:7]) {\n            rotate([0,0,i*45]) \n                translate([table_top_d*0.35,0,table_top_t/2])\n                    cube([table_top_d*0.15, table_top_d*0.15, table_top_t+1], center=true);\n        }\n    }\n    \n    // Raised edge detail\n    difference() {\n        cylinder(h=2, d=table_top_d+2, $fn=8);\n        cylinder(h=2, d=table_top_d-2, $fn=8);\n    }\n}\n\n// Single quake-style leg with gothic details\nmodule leg() {\n    union() {\n        // Main leg shaft - fluted column\n        difference() {\n            cylinder(h=table_height-table_top_t, d=leg_thick*2, $fn=32);\n            \n            // Fluting grooves\n            for (i=[0:7]) {\n                rotate([0,0,i*45]) \n                    translate([leg_thick*0.8,0,0])\n                        cube([leg_thick*0.3, leg_thick*2, table_height-table_top_t+1], center=true);\n            }\n        }\n        \n        // Base foot - gothic arch\n        translate([0,0,-(table_height-table_top_t)/2])\n            cube([leg_thick*2.5, leg_thick*1.5, table_height-table_top_t], center=true);\n        \n        // Top capital - stepped\n        translate([0,0,0])\n            cylinder(h=8, d=leg_thick*2.5, $fn=8);\n    }\n}\n\n// Support ring between legs\nmodule support_ring() {\n    difference() {\n        // Main ring\n        cylinder(h=support_ring_h, d=table_top_d*0.7, $fn=8);\n        \n        // Inner cutout\n        cylinder(h=support_ring_h+1, d=table_top_d*0.5, $fn=8);\n        \n        // Gothic arch cutouts\n        for (i=[0:7]) {\n            rotate([0,0,i*45+22.5]) {\n                translate([table_top_d*0.3,0,support_ring_h/2])\n                    cube([table_top_d*0.15, table_top_d*0.15, support_ring_h+1], center=true);\n            }\n        }\n    }\n}\n\n// Decorative center piece\nmodule center_decoration() {\n    // Gothic spire\n    difference() {\n        cylinder(h=20, d1=table_top_d*0.15, d2=0, $fn=8);\n        \n        // Cross cutout\n        rotate([0,0,45])\n            cube([table_top_d*0.1, table_top_d*0.3, 21], center=true);\n    }\n    \n    // Base collar\n    translate([0,0,-2])\n        cylinder(h=4, d=table_top_d*0.2, $fn=8);\n}\n\n// Main assembly\nunion() {\n    // Table top\n    translate([0,0,table_height-table_top_t])\n        table_top();\n    \n    // Legs (4 legs)\n    for (i=[0:3]) {\n        rotate([0,0,i*90+45])\n            translate([table_top_d*0.35, 0, (table_height-table_top_t)/2])\n                leg();\n    }\n    \n    // Support ring\n    translate([0,0,support_ring_pos])\n        support_ring();\n    \n    // Center decoration\n    translate([0,0,table_height-table_top_t+2])\n        center_decoration();\n}",
    "renders": true
  },
  {
    "decorative_art": "reef",
    "openscad_code": "// Reef-inspired decorative wall shelf\n// Dimensions: 120mm wide x 80mm tall x 60mm deep\n// Coral shelf structure with natural organic forms\n\n// Wall thickness constant\nwall_thickness = 2;\n\n// Main shelf module\nmodule reef_shelf() {\n    // Base mounting plate\n    translate([0, 0, 0])\n        cube([120, 80, wall_thickness], center=true);\n    \n    // Main coral structure - central pillar\n    translate([0, -20, 30])\n        scale([1, 0.8, 1])\n        coral_pillar(40, 15);\n    \n    // Left coral branch\n    translate([-40, 10, 25])\n        rotate([0, 15, -20])\n        coral_branch(35, 12);\n    \n    // Right coral branch  \n    translate([40, 10, 25])\n        rotate([0, 15, 20])\n        coral_branch(35, 12);\n    \n    // Shelf surfaces\n    shelf_surface([0, -20, 75], 50, 25);\n    shelf_surface([-40, 10, 60], 40, 20);\n    shelf_surface([40, 10, 60], 40, 20);\n    \n    // Small coral details\n    for(i = [-60:20:60]) {\n        for(j = [-30:15:30]) {\n            if(i*i + j*j > 400) {\n                translate([i/2, j/2, 2])\n                    rotate([0, 0, i+j])\n                    scale([0.3, 0.3, 1])\n                    coral_pillar(5, 3);\n            }\n        }\n    }\n    \n    // Wall mounting holes\n    translate([-40, 0, 0])\n        cylinder(h=wall_thickness+1, r=2, center=true);\n    translate([40, 0, 0])\n        cylinder(h=wall_thickness+1, r=2, center=true);\n}\n\n// Coral pillar module with organic texture\nmodule coral_pillar(height, radius) {\n    union() {\n        // Main pillar body\n        cylinder(h=height, r=radius, center=true);\n        \n        // Add texture rings\n        for(i = [-height/2+5:5:height/2-5]) {\n            translate([0, 0, i])\n                scale([1.1, 1.1, 0.5])\n                cylinder(h=2, r=radius, center=true);\n        }\n        \n        // Top bulb\n        translate([0, 0, height/2])\n            sphere(r=radius*1.2);\n    }\n}\n\n// Coral branch module\nmodule coral_branch(height, radius) {\n    difference() {\n        union() {\n            // Main branch\n            cylinder(h=height, r=radius, center=true);\n            \n            // Side branches\n            for(i = [1:3]) {\n                rotate([0, 0, i*120])\n                translate([radius*0.8, 0, height/4])\n                rotate([90, 0, 0])\n                scale([0.7, 0.7, 0.8])\n                cylinder(h=height/2, r=radius*0.6, center=true);\n            }\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, 0])\n            cylinder(h=height+2, r=radius-wall_thickness, center=true);\n    }\n}\n\n// Shelf surface module\nmodule shelf_surface(pos, width, depth) {\n    translate(pos)\n    difference() {\n        // Main shelf\n        cube([width, depth, wall_thickness], center=true);\n        \n        // Rounded edges\n        for(i = [-1, 1]) {\n            for(j = [-1, 1]) {\n                translate([i*(width/2-wall_thickness), j*(depth/2-wall_thickness), 0])\n                    cylinder(h=wall_thickness+1, r=wall_thickness, center=true);\n            }\n        }\n    }\n}\n\n// Generate the complete model\nreef_shelf();",
    "renders": true
  },
  {
    "decorative_art": "stellar",
    "openscad_code": "// Stellar Accent Stool - Realistic Style, Medium Complexity\n// A decorative furniture piece inspired by star geometry with structural integrity\n\n// Overall dimensions\noverall_height = 120;\nseat_diameter = 100;\nbase_diameter = 80;\nleg_count = 5;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Seat module - star-shaped top with slight dome\nmodule star_seat(d, h, points=5) {\n    difference() {\n        // Main star shape\n        linear_extrude(height=h, convexity=10) {\n            polygon(\n                [for(i=[0:points*2-1]) \n                    let(angle = i * 180 / points)\n                    [cos(angle) * (i%2==0 ? d/2 : d/3),\n                     sin(angle) * (i%2==0 ? d/2 : d/3)]\n                ]\n            );\n        }\n        \n        // Hollow out center\n        translate([0, 0, -0.1])\n            cylinder(h=h+0.2, d=d-2*wall_thickness, $fn=50);\n        \n        // Add dome top surface\n        translate([0, 0, h])\n            scale([1, 1, 0.3])\n                sphere(d=d-2*wall_thickness, $fn=50);\n    }\n}\n\n// Star leg structure with reinforcement\nmodule star_leg(length, width) {\n    difference() {\n        // Main leg\n        cube([width, length, wall_thickness], center=true);\n        \n        // Lightening holes\n        for(i=[0.3, 0.7]) {\n            translate([0, length*(i-0.5), 0])\n                cylinder(h=wall_thickness+0.2, d=width*0.4, center=true, $fn=16);\n        }\n    }\n}\n\n// Decorative star joint connector\nmodule star_joint(radius) {\n    difference() {\n        sphere(d=radius*2, $fn=20);\n        \n        // Add star pattern\n        for(i=[0:5]) {\n            rotate([0, 0, i*60])\n                translate([radius*0.5, 0, 0])\n                    cube([radius, radius*0.3, radius*0.3], center=true);\n        }\n        \n        // Hollow center\n        sphere(d=radius*1.5, $fn=20);\n    }\n}\n\n// Base module - pentagonal star\nmodule star_base(d, h) {\n    difference() {\n        cylinder(h=h, d=d, $fn=5);\n        \n        // Hollow center\n        translate([0, 0, -0.1])\n            cylinder(h=h+0.2, d=d-2*wall_thickness, $fn=5);\n        \n        // Add weight distribution ring\n        translate([0, 0, h/2])\n            cylinder(h=wall_thickness*1.5, d=d-wall_thickness, $fn=50);\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat\n    translate([0, 0, overall_height-seat_diameter/10])\n        star_seat(seat_diameter, seat_diameter/10, leg_count);\n    \n    // Central support column\n    translate([0, 0, overall_height/2])\n        cylinder(h=overall_height-seat_diameter/10*2, d=30, $fn=20);\n    \n    // Hollow center for weight reduction\n    translate([0, 0, overall_height/2])\n        cylinder(h=overall_height-seat_diameter/10*2+0.2, d=30-2*wall_thickness, $fn=20);\n    \n    // Star legs\n    for(i=[0:leg_count-1]) {\n        rotate([0, 0, i*360/leg_count])\n            translate([0, seat_diameter/3, (overall_height-seat_diameter/10)/2])\n                rotate([90, 0, 0])\n                    star_leg(overall_height-seat_diameter/10-30, 12);\n    }\n    \n    // Leg joints\n    for(i=[0:leg_count-1]) {\n        rotate([0, 0, i*360/leg_count])\n            translate([0, seat_diameter/3, (overall_height-seat_diameter/10)*0.75])\n                star_joint(8);\n    }\n    \n    // Base\n    translate([0, 0, 0])\n        star_base(base_diameter, 20);\n    \n    // Decorative star pattern on base\n    for(i=[0:leg_count-1]) {\n        rotate([0, 0, i*360/leg_count])\n            translate([0, base_diameter/2.5, 10])\n                cube([wall_thickness*2, 15, 10], center=true);\n    }\n    \n    // Anti-slip pads\n    for(i=[0:leg_count-1]) {\n        rotate([0, 0, i*360/leg_count + 360/leg_count/2])\n            translate([0, base_diameter/2.2, 20])\n                cylinder(h=2, d=8, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "tempest",
    "openscad_code": "// Tempest-inspired side table (realistic style, medium complexity)\n// Overall size: 100mm diameter, 120mm height\n\n$fn = 36;  // Smooth curves for printing\n\nmodule leg() {\n    // Single curved leg with structural core\n    difference() {\n        // Outer shell\n        hull() {\n            translate([0, 0, 0]) sphere(d=12);\n            translate([0, 0, 15]) sphere(d=8);\n            translate([0, 0, 40]) sphere(d=6);\n        }\n        // Hollow core\n        translate([0, 0, -2]) cylinder(h=44, d1=8, d2=4, center=false);\n    }\n}\n\nmodule table_top() {\n    // Tempest-inspired swirling tabletop\n    difference() {\n        union() {\n            // Base disk\n            cylinder(h=8, d=100);\n            \n            // Swirling ridges\n            for(i=[0:5]) {\n                rotate([0, 0, i*60]) {\n                    translate([0, 25, 8]) scale([1.2, 0.8, 1]) sphere(d=20);\n                }\n            }\n        }\n        \n        // Central hole for weight reduction\n        cylinder(h=10, d=60);\n        \n        // Drainage grooves\n        for(i=[0:3]) {\n            rotate([0, 0, i*90]) {\n                translate([0, 0, 8]) cube([2, 35, 2], center=true);\n            }\n        }\n    }\n}\n\nmodule support_ring() {\n    // Structural ring connecting legs\n    difference() {\n        cylinder(h=4, d=80);\n        cylinder(h=5, d=76);\n    }\n}\n\nmodule decorative_wave() {\n    // Wave pattern around edge\n    for(i=[0:35]) {\n        rotate([0, 0, i*10]) {\n            translate([45, 0, 4]) {\n                scale([0.5, 1, 0.3]) sphere(d=6);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Tabletop\n    translate([0, 0, 110]) table_top();\n    \n    // Support ring\n    translate([0, 0, 70]) support_ring();\n    \n    // Decorative wave on ring\n    translate([0, 0, 74]) decorative_wave();\n    \n    // Legs in storm formation\n    for(i=[0:2]) {\n        rotate([0, 0, i*120]) {\n            translate([30, 0, 30]) rotate([15, 0, 0]) leg();\n        }\n    }\n    \n    // Central stabilizer\n    difference() {\n        cylinder(h=30, d=20);\n        cylinder(h=31, d=16);\n    }\n    \n    // Base feet\n    for(i=[0:2]) {\n        rotate([0, 0, i*120]) {\n            translate([30, 0, 0]) {\n                difference() {\n                    sphere(d=16);\n                    translate([0, 0, 5]) sphere(d=14);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "unity",
    "openscad_code": "// Unity Bookshelf - Realistic Style, Medium Complexity\n// Overall dimensions: 100mm W x 120mm H x 30mm D\n\n$fn = 32;\n\n// Main body\nmodule bookshelf() {\n    // Side panels\n    difference() {\n        // Left panel\n        translate([5, 0, 0])\n            cube([2, 120, 30]);\n        \n        // Cable management holes\n        for (y = [15, 45, 75, 105]) {\n            translate([6, y, 15])\n                rotate([90, 0, 0])\n                    cylinder(h=2, r=3);\n        }\n    }\n    \n    // Right panel (mirrored)\n    mirror([1, 0, 0])\n        translate([-95, 0, 0])\n            bookshelf();\n    \n    // Back panel\n    translate([5, 5, 0])\n        cube([90, 110, 2]);\n    \n    // Shelves\n    for (z = [25, 50, 75, 100]) {\n        // Main shelf\n        translate([7, 7, z])\n            cube([86, 106, 2]);\n        \n        // Front lip for books\n        translate([7, 7, z + 2])\n            cube([86, 2, 5]);\n    }\n    \n    // Top frame\n    translate([5, 5, 118])\n        cube([90, 110, 2]);\n    \n    // Bottom frame\n    translate([5, 5, 0])\n        cube([90, 110, 2]);\n    \n    // Decorative unity symbol on top\n    translate([50, 60, 120])\n        rotate([0, 0, 45])\n        union() {\n            // Outer ring\n            difference() {\n                cylinder(h=3, r=15);\n                translate([0, 0, -1])\n                    cylinder(h=5, r=12);\n            }\n            \n            // Inner triangles\n            for (i = [0:120:359]) {\n                rotate([0, 0, i])\n                    translate([0, 9, 0])\n                        cube([6, 6, 3], center=true);\n            }\n        }\n    \n    // Support brackets\n    for (y = [10, 110]) {\n        for (z = [27, 52, 77, 102]) {\n            // Left bracket\n            translate([5, y, z])\n                rotate([0, 90, 0])\n                    difference() {\n                        cube([20, 2, 2]);\n                        translate([2, 0, 0])\n                            cube([16, 2, 2]);\n                    }\n            \n            // Right bracket\n            translate([95, y, z])\n                rotate([0, -90, 0])\n                    difference() {\n                        cube([20, 2, 2]);\n                        translate([2, 0, 0])\n                            cube([16, 2, 2]);\n                    }\n        }\n    }\n    \n    // Book dividers\n    for (i = [1:3]) {\n        translate([25 * i, 9, 27.5])\n            cube([1, 104, 24]);\n    }\n    \n    // Feet\n    for (x = [10, 90]) {\n        for (y = [10, 110]) {\n            translate([x, y, -3])\n                cylinder(h=3, r=2);\n        }\n    }\n}\n\nbookshelf();",
    "renders": true
  },
  {
    "decorative_art": "block",
    "openscad_code": "// Wooden toy-block style storage stool\n// Overall size: 100×100×100 mm (fits most printers)\n\n// ===== PARAMETERS (easy to tweak) =====\nblock_size = 100;               // overall cube dimension\nwall_thickness = 2.5;           // 3D-printable wall\nstud_diam = 8;                  // classic block stud diameter\nstud_h = 3;                     // stud height\nstud_pitch = 20;                // spacing between studs\ngrip_radius = 4;                // underside grip hole radius\ngrip_depth = 10;                // grip hole depth\n\n// ===== MODULES =====\n// Stud\nmodule stud(h = stud_h, d = stud_diam) {\n    cylinder(h = h, d = d, $fn = 16);\n}\n\n// 2×2 stud pattern for one face\nmodule stud_grid(nx = 4, ny = 4) {\n    for (x = [0:nx-1])\n        for (y = [0:ny-1])\n            translate([x*stud_pitch - (nx-1)*stud_pitch/2,\n                       y*stud_pitch - (ny-1)*stud_pitch/2,\n                       0])\n            stud();\n}\n\n// Hollow box (shell) with optional top studs\nmodule hollow_box(size, wall, with_studs = true) {\n    difference() {\n        // outer cube\n        cube(size, center = true);\n        // inner void\n        translate([0,0, wall/2])\n        cube([size.x - 2*wall, size.y - 2*wall, size.z - wall], center = true);\n    }\n    // studs on top surface\n    if (with_studs) {\n        translate([0,0,size.z/2])\n        stud_grid();\n    }\n}\n\n// Underside grip hollows (makes lifting easy)\nmodule underside_grips() {\n    for (side = [0:90:270]) {\n        rotate([0,0,side])\n        translate([0, block_size/2 - wall_thickness - grip_radius, -block_size/2 + grip_depth/2])\n        rotate([90,0,0])\n        cylinder(h = block_size - 2*wall_thickness, r = grip_radius, $fn = 16);\n    }\n}\n\n// ===== MAIN ASSEMBLY =====\ndifference() {\n    union() {\n        // hollow block body\n        hollow_box([block_size, block_size, block_size], wall_thickness);\n        \n        // decorative faux corner posts (add realism)\n        post_l = block_size - 2*stud_h;\n        post_r = wall_thickness;\n        for (x = [-1,1])\n            for (y = [-1,1])\n                translate([x*(block_size/2 - post_r/2),\n                           y*(block_size/2 - post_r/2),\n                           0])\n                cylinder(h = post_l, r = post_r, center = true, $fn = 8);\n    }\n    \n    // underside grip holes\n    underside_grips();\n}",
    "renders": true
  },
  {
    "decorative_art": "brick",
    "openscad_code": "// Brick-inspired modular stool\n// Dimensions: 200mm(L) x 100mm(W) x 120mm(H)\n// Wall thickness: 2mm for 3D printing\n\nmodule brick_slot(width, depth, height) {\n    // Create a slot for interlocking\n    difference() {\n        cube([width, depth, height], center=true);\n        translate([0, 0, 1])\n        cube([width-4, depth-4, height], center=true);\n    }\n}\n\nmodule brick_core(l, w, h) {\n    // Main brick body with hollow core\n    difference() {\n        // Outer brick shape with rounded edges\n        minkowski() {\n            cube([l-2, w-2, h-2], center=true);\n            sphere(1);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 2])\n        cube([l-6, w-6, h-4], center=true);\n        \n        // Side holes for weight reduction\n        for(x = [-l/3, 0, l/3])\n        for(y = [-w/3, 0, w/3]) {\n            if(x != 0 || y != 0)\n            translate([x, y, h/2-2])\n            cylinder(h=4, r=4, center=true, $fn=16);\n        }\n    }\n}\n\nmodule seating_surface() {\n    // Comfortable seating top with ergonomic curve\n    difference() {\n        // Curved top surface\n        translate([0, 0, 60])\n        scale([1, 1, 0.3])\n        minkowski() {\n            cube([196, 96, 20], center=true);\n            sphere(2);\n        }\n        \n        // Drainage grooves\n        for(i = [-80:20:80]) {\n            translate([i, 0, 75])\n            cube([2, 92, 2], center=true);\n        }\n    }\n}\n\nmodule structural_supports() {\n    // Reinforcement ribs inside brick\n    translate([0, 0, 30])\n    for(dir = [0, 90]) {\n        rotate([0, 0, dir])\n        for(pos = [-60, 0, 60]) {\n            translate([pos, 0, 0])\n            cube([2, 94, 56], center=true);\n        }\n    }\n}\n\nmodule leg_connections() {\n    // Connection points for optional legs\n    translate([0, 0, -58])\n    for(x = [-70, 70])\n    for(y = [-35, 35]) {\n        translate([x, y, 0])\n        cylinder(h=6, r=8, $fn=16);\n        \n        // Screw hole\n        translate([x, y, 3])\n        cylinder(h=6, r=3, $fn=16);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base brick structure\n    brick_core(200, 100, 120);\n    \n    // Seating surface\n    seating_surface();\n    \n    // Internal supports\n    structural_supports();\n    \n    // Connection system on bottom\n    translate([0, 0, -60])\n    brick_slot(180, 80, 2);\n    \n    // Leg connection points\n    leg_connections();\n    \n    // Decorative brick texture on sides\n    for(i = [-90:20:90])\n    for(j = [-40:20:40]) {\n        translate([i, 48, j+60])\n        cube([18, 2, 18], center=true);\n        \n        translate([i, -48, j+60])\n        cube([18, 2, 18], center=true);\n    }\n    \n    // Corner reinforcements\n    for(x = [-98, 98])\n    for(y = [-48, 48]) {\n        translate([x, y, 60])\n        cylinder(h=120, r=3, center=true, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "lego",
    "openscad_code": "// LEGO-style Modern Armchair (realistic, medium complexity)\n// Overall dimensions: ~80 x 80 x 90 mm – good for desktop 3D printing\n\nstud_d  = 4.8;   // real LEGO stud diameter\nstud_h  = 1.8;   // stud height\nwall_t  = 2.0;   // printable wall thickness\nbrick_w = 20;    // LEGO brick width (stud pitch * 5)\nbrick_h = 9.6;   // LEGO brick height (3.2 mm per plate * 3)\n\n// Helper: single round stud\nmodule stud() {\n    cylinder(h = stud_h, d = stud_d, $fn = 16);\n}\n\n// Helper: brick with optional top studs\nmodule brick(x, y, z, studs = true) {\n    // Main block\n    cube([x * brick_w, y * brick_w, z * brick_h]);\n\n    // Top studs\n    if (studs)\n        for (i = [0 : x - 1])\n            for (j = [0 : y - 1])\n                translate([i * brick_w + brick_w/2,\n                           j * brick_w + brick_w/2,\n                           z * brick_h])\n                    stud();\n}\n\n// Armchair module\nmodule armchair() {\n    // Seat base 8×8×3 bricks\n    translate([0, 0, 0])\n        brick(8, 8, 3);\n\n    // Backrest 8×1×4 bricks\n    translate([0, 7 * brick_w, 3 * brick_h])\n        brick(8, 1, 4);\n\n    // Left armrest 1×6×4 bricks\n    translate([0, 1 * brick_w, 3 * brick_h])\n        brick(1, 6, 4);\n\n    // Right armrest 1×6×4 bricks\n    translate([7 * brick_w, 1 * brick_w, 3 * brick_h])\n        brick(1, 6, 4);\n\n    // Front apron – decorative horizontal 8×1×1 brick\n    translate([0, 0, 3 * brick_h])\n        brick(8, 1, 1);\n\n    // Side aprons – decorative 1×7×1 bricks\n    translate([0, 1 * brick_w, 3 * brick_h])\n        brick(1, 7, 1);\n    translate([7 * brick_w, 1 * brick_w, 3 * brick_h])\n        brick(1, 7, 1);\n\n    // Back apron – 8×1×1 brick for symmetry\n    translate([0, 7 * brick_w, 3 * brick_h])\n        brick(8, 1, 1);\n\n    // Cushion: thin plate 6×6×1 on seat top (no studs)\n    translate([1 * brick_w, 1 * brick_w, 3 * brick_h])\n        brick(6, 6, 1, studs = false);\n}\n\n// Render the chair centered on the build plate\ntranslate([-(8 * brick_w)/2, -(8 * brick_w)/2, 0])\n    armchair();",
    "renders": true
  },
  {
    "decorative_art": "buildingblock",
    "openscad_code": "// Realistic Medium-Complexity Building-Block Bookshelf Unit\n// Overall footprint: 120 x 120 x 140 mm\n\n$fn = 50; // smooth curves for printing\n\nmodule shelf_block() {\n    // Main carcass\n    difference() {\n        // outer shell 2 mm walls\n        cube([120, 120, 140], center = true);\n        translate([0, 0, 2])\n            cube([116, 116, 136], center = true);\n    }\n\n    // Dividing shelf plates\n    for (z = [-45, 0, 45]) {\n        translate([0, 0, z])\n            cube([118, 118, 3], center = true);\n    }\n\n    // Back panel with peg holes\n    translate([0, 59, 0])\n        difference() {\n            cube([118, 2, 138], center = true);\n            for (x = [-45, -15, 15, 45])\n                for (z = [-55, -25, 5, 35, 65])\n                    translate([x, 0, z])\n                        rotate([90, 0, 0])\n                            cylinder(h = 3, r = 3, center = true);\n        }\n\n    // Left panel with peg holes\n    translate([-59, 0, 0])\n        difference() {\n            cube([2, 118, 138], center = true);\n            for (y = [-45, -15, 15, 45])\n                for (z = [-55, -25, 5, 35, 65])\n                    translate([0, y, z])\n                        rotate([0, 90, 0])\n                            cylinder(h = 3, r = 3, center = true);\n        }\n\n    // Right panel with peg holes\n    mirror([1, 0, 0])\n        children();\n}\n\n// Decorative front frame\nmodule front_frame() {\n    // Top rail\n    translate([0, 59, 67])\n        cube([118, 2, 12], center = true);\n\n    // Bottom rail\n    translate([0, 59, -67])\n        cube([118, 2, 12], center = true);\n\n    // Vertical stiles\n    for (x = [-55, 55]) {\n        translate([x, 59, 0])\n            cube([12, 2, 140], center = true);\n    }\n}\n\n// Interlocking dovetail pegs (printing-friendly)\nmodule dovetail_peg() {\n    // Reduced dovetail for 45° printing\n    union() {\n        translate([0, 0, 5])\n            cylinder(h = 10, r1 = 4, r2 = 3, center = true);\n        cylinder(h = 3, r = 3, center = true);\n    }\n}\n\n// Assembly\nshelf_block();\nfront_frame();\n\n// Dovetail pegs for stacking\nfor (x = [-45, -15, 15, 45])\n    for (z = [-55, -25, 5, 35, 65]) {\n        translate([x, 45, z])\n            dovetail_peg();\n        translate([-45, x, z])\n            rotate([0, 0, 90])\n                dovetail_peg();\n    }\n\n// Recessed handles on sides\ndifference() {\n    translate([0, 0, 0])\n        cube([120, 120, 140], center = true);\n    translate([0, 61, 20])\n        cube([40, 2, 20], center = true);\n    translate([0, 61, -20])\n        cube([40, 2, 20], center = true);\n}",
    "renders": true
  },
  {
    "decorative_art": "puzzlepiece",
    "openscad_code": "// Puzzlepiece Accent Shelf - Realistic Style\n// A decorative wall shelf shaped like an interlocking puzzle piece\n// Size: 120mm x 80mm x 25mm\n\n// Main parameters\n$fn = 32;\nwall_thickness = 2;\nshelf_depth = 25;\npiece_width = 80;\npiece_height = 120;\n\n// Main puzzle piece body\nmodule puzzle_body() {\n    // Main rectangular base\n    translate([0, 0, wall_thickness])\n    cube([piece_width, piece_height - 20, shelf_depth - wall_thickness*2], center=true);\n    \n    // Top nub (puzzle connector)\n    translate([0, piece_height/2 - 10, 0])\n    union() {\n        cylinder(h=shelf_depth, r=15);\n        cube([30, 20, shelf_depth], center=true);\n    }\n    \n    // Bottom socket (puzzle connector)\n    translate([0, -piece_height/2 + 10, 0])\n    difference() {\n        cube([30, 20, shelf_depth], center=true);\n        cylinder(h=shelf_depth, r=15);\n    }\n}\n\n// Shelf surface with decorative pattern\nmodule shelf_surface() {\n    // Main shelf\n    translate([0, 0, shelf_depth/2])\n    difference() {\n        cube([piece_width - wall_thickness*2, piece_height - 20 - wall_thickness*2, wall_thickness], center=true);\n        \n        // Decorative grid pattern on shelf\n        for(x = [-30:10:30]) {\n            for(y = [-45:10:45]) {\n                translate([x, y, -1])\n                cube([2, 2, wall_thickness+2]);\n            }\n        }\n    }\n}\n\n// Back mounting plate\nmodule mounting_plate() {\n    translate([0, 0, 0])\n    difference() {\n        cube([piece_width, piece_height, wall_thickness], center=true);\n        \n        // Keyhole mounting slots\n        translate([-piece_width/4, -piece_height/4, -1])\n        keyhole_mount();\n        translate([piece_width/4, -piece_height/4, -1])\n        keyhole_mount();\n    }\n}\n\n// Keyhole mounting detail\nmodule keyhole_mount() {\n    union() {\n        cylinder(h=wall_thickness+2, r=3);\n        translate([0, 10, 0])\n        cube([6, 10, wall_thickness+2], center=true);\n    }\n}\n\n// Side decorative ribs for structural strength\nmodule side_ribs() {\n    // Left side rib\n    translate([-piece_width/2 + wall_thickness/2, 0, shelf_depth/2])\n    cube([wall_thickness, piece_height - 20, shelf_depth - wall_thickness*2], center=true);\n    \n    // Right side rib\n    translate([piece_width/2 - wall_thickness/2, 0, shelf_depth/2])\n    cube([wall_thickness, piece_height - 20, shelf_depth - wall_thickness*2], center=true);\n    \n    // Front rib\n    translate([0, piece_height/2 - 10, shelf_depth/2])\n    cube([piece_width - wall_thickness*2, wall_thickness, shelf_depth - wall_thickness*2], center=true);\n}\n\n// Assembly\nunion() {\n    // Main body\n    puzzle_body();\n    \n    // Structural elements\n    side_ribs();\n    \n    // Functional elements\n    shelf_surface();\n    mounting_plate();\n    \n    // Rounded edges for realistic look\n    translate([0, 0, 0])\n    minkowski() {\n        cube([piece_width, piece_height, shelf_depth], center=true);\n        sphere(r=1);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "masonry",
    "openscad_code": "// Masonry Bench (decorative art piece) - OpenSCAD\n// Realistic medium-complexity masonry furniture\n\n// Overall dimensions\nbench_length = 120;\nbench_width = 45;\nbench_height = 50;\nwall_thick = 2;\n\n// Stone block dimensions\nblock_w = 12;\nblock_h = 8;\nblock_d = 22;\nmortar = 1;\n\n// Create stone texture\nmodule stone_block(x,y,z) {\n    // Basic stone shape with slight irregularity\n    translate([x,y,z]) {\n        union() {\n            difference() {\n                cube([block_w,block_d,block_h]);\n                // Add chisel marks\n                for(i=[0:2]) {\n                    translate([block_w/2,block_d*0.2*i,block_h-0.5])\n                        cube([block_w*0.8, 0.5, 1.5], center=true);\n                }\n            }\n            // Add slight rounding to edges\n            translate([0,0,block_h-1])\n                cylinder(h=1, d1=block_w, d2=block_w*0.9, $fn=8);\n        }\n    }\n}\n\n// Mortar joints\nmodule mortar_joint(x,y,z,len) {\n    color(\"lightgray\")\n    translate([x,y,z])\n        cube([len, mortar, block_h]);\n}\n\n// Seat top - flagstone pattern\nmodule seat_top() {\n    difference() {\n        // Main seat\n        translate([-bench_length/2, -bench_width/2, bench_height-wall_thick])\n            cube([bench_length, bench_width, wall_thick]);\n        \n        // Flagstone pattern grooves\n        for(x=[-bench_length/2+10:20:bench_length/2-10]) {\n            translate([x, -bench_width/2, bench_height-wall_thick-0.1])\n                cube([1, bench_width, wall_thick+0.2]);\n        }\n        for(y=[-bench_width/2+10:20:bench_width/2-10]) {\n            translate([-bench_length/2, y, bench_height-wall_thick-0.1])\n                cube([bench_length, 1, wall_thick+0.2]);\n        }\n    }\n}\n\n// Decorative carved legs\nmodule bench_leg(x) {\n    translate([x, 0, 0]) {\n        // Front face with arch pattern\n        for(row=[0:3]) {\n            for(col=[0:2]) {\n                stone_block(\n                    -bench_width/4 + col*(block_w+mortar),\n                    -bench_width/2 - mortar,\n                    row*(block_h+mortar)\n                );\n            }\n        }\n        \n        // Side faces\n        for(row=[0:3]) {\n            stone_block(\n                -bench_width/2 - mortar,\n                -bench_width/4,\n                row*(block_h+mortar)\n            );\n            stone_block(\n                bench_width/4 - mortar,\n                -bench_width/4,\n                row*(block_h+mortar)\n            );\n        }\n        \n        // Decorative arch\n        translate([0, -bench_width/2 - wall_thick, 25])\n            difference() {\n                cube([bench_width/2, wall_thick, 15]);\n                translate([bench_width/4, -1, 0])\n                    cylinder(h=bench_width/2+2, r=7, $fn=20);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat top\n    seat_top();\n    \n    // Left leg\n    bench_leg(-bench_length/2 + bench_width/4);\n    \n    // Right leg\n    bench_leg(bench_length/2 - bench_width/4);\n    \n    // Center support beam (masonry style)\n    translate([-bench_length/2 + bench_width/2, -bench_width/4, 10])\n        difference() {\n            cube([bench_length - bench_width, bench_width/2, wall_thick*3]);\n            // Carved detail\n            for(i=[0:2:15]) {\n                translate([i, 2, -0.1])\n                    cube([1, bench_width/2-4, wall_thick*3+0.2]);\n            }\n        }\n    \n    // Decorative corner stones\n    for(x=[-bench_length/2, bench_length/2 - block_w]) {\n        for(y=[-bench_width/2, bench_width/2 - block_w]) {\n            translate([x, y, bench_height-wall_thick-block_h])\n                stone_block(0,0,0);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "mortar",
    "openscad_code": "// Realistic Mortar Decorative Furniture Piece\n// Overall dimensions: 120mm tall, 80mm diameter\n\n// Parameters\n$fn = 50;\nwall_thickness = 2;\nbody_diameter = 80;\nbody_height = 100;\nbase_thickness = 8;\nrim_height = 6;\nhandle_diameter = 12;\nhandle_length = 40;\n\nmodule mortar_body() {\n    // Main bowl shape\n    difference() {\n        // Outer shape - tapered cylinder\n        cylinder(h=body_height, d1=body_diameter, d2=body_diameter*0.9, center=false);\n        \n        // Inner cavity - leave 2mm walls\n        translate([0, 0, base_thickness])\n        cylinder(h=body_height-base_thickness, d1=body_diameter-wall_thickness*2, d2=body_diameter*0.9-wall_thickness*2, center=false);\n    }\n    \n    // Base plate\n    translate([0, 0, -base_thickness/2])\n    cylinder(h=base_thickness, d=body_diameter*1.1, center=true);\n    \n    // Decorative rim\n    translate([0, 0, body_height])\n    cylinder(h=rim_height, d1=body_diameter*1.05, d2=body_diameter*1.1, center=false);\n}\n\nmodule decorative_band() {\n    // Raised decorative band around body\n    band_height = 8;\n    band_position = body_height * 0.6;\n    \n    translate([0, 0, band_position])\n    difference() {\n        cylinder(h=band_height, d=body_diameter*1.02, center=true);\n        cylinder(h=band_height+0.1, d=body_diameter*0.98, center=true);\n    }\n    \n    // Small repeating rectangular details on band\n    for(i=[0:11]) {\n        rotate([0, 0, i*30])\n        translate([body_diameter/2+1, 0, band_position])\n        cube([3, 2, band_height], center=true);\n    }\n}\n\nmodule handles() {\n    // Left handle\n    translate([-body_diameter/2-handle_length/2, 0, body_height*0.7])\n    rotate([0, 90, 0])\n    cylinder(h=handle_length, d=handle_diameter, center=true);\n    \n    // Right handle\n    translate([body_diameter/2+handle_length/2, 0, body_height*0.7])\n    rotate([0, -90, 0])\n    cylinder(h=handle_length, d=handle_diameter, center=true);\n    \n    // Handle reinforcements\n    // Left reinforcement ring\n    translate([-body_diameter/2-handle_length/2, 0, body_height*0.7])\n    rotate([0, 90, 0])\n    difference() {\n        cylinder(h=4, d=handle_diameter+4, center=true);\n        cylinder(h=4.1, d=handle_diameter, center=true);\n    }\n    \n    // Right reinforcement ring\n    translate([body_diameter/2+handle_length/2, 0, body_height*0.7])\n    rotate([0, -90, 0])\n    difference() {\n        cylinder(h=4, d=handle_diameter+4, center=true);\n        cylinder(h=4.1, d=handle_diameter, center=true);\n    }\n}\n\nmodule base_feet() {\n    // Three decorative feet\n    foot_height = 15;\n    foot_diameter = 20;\n    \n    for(i=[0:2]) {\n        rotate([0, 0, i*120])\n        translate([body_diameter*0.4, 0, -foot_height/2-2])\n        cylinder(h=foot_height, d1=foot_diameter, d2=foot_diameter*0.7, center=true);\n    }\n}\n\nmodule texture_lines() {\n    // Vertical texture lines on body\n    line_width = 1;\n    line_depth = 0.5;\n    num_lines = 16;\n    \n    for(i=[0:num_lines-1]) {\n        rotate([0, 0, i*360/num_lines])\n        translate([body_diameter/2-line_depth/2, -line_width/2, body_height/2])\n        cube([line_depth, line_width, body_height*0.8], center=true);\n    }\n}\n\n// Assemble the complete mortar\nunion() {\n    mortar_body();\n    decorative_band();\n    handles();\n    base_feet();\n    texture_lines();\n}",
    "renders": true
  },
  {
    "decorative_art": "concrete",
    "openscad_code": "// Concrete Plant Stand - Medium Complexity, Realistic Style\n// Overall dimensions: 100mm diameter, 90mm height\n// Wall thickness: 2mm throughout\n// Suitable for small succulent pot\n\n$fn = 32;\n\n// Main module\nmodule plant_stand() {\n    // Base plate\n    difference() {\n        // Solid base\n        cylinder(h = 5, d = 80);\n        \n        // Drainage holes pattern\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                for (j = [1:2]) {\n                    translate([j * 15, 0, 2.5])\n                        cylinder(h = 5.1, d = 4);\n                }\n            }\n        }\n    }\n    \n    // Central column\n    translate([0, 0, 5])\n        difference() {\n            cylinder(h = 60, d = 40);\n            cylinder(h = 61, d = 36);\n        }\n    \n    // Support ribs (4 ribs)\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([20, -2, 5])\n                cube([15, 4, 60]);\n        }\n    }\n    \n    // Top platform\n    translate([0, 0, 65])\n        difference() {\n            // Main platform\n            cylinder(h = 25, d = 100);\n            \n            // Inner cavity for plant pot\n            cylinder(h = 26, d = 96);\n            \n            // Decorative groove pattern on top\n            for (r = [45, 40]) {\n                translate([0, 0, 23])\n                    cylinder(h = 2.1, d = r);\n            }\n        }\n    \n    // Reinforcement ring at top\n    translate([0, 0, 75])\n        difference() {\n            cylinder(h = 5, d = 104);\n            cylinder(h = 6, d = 100);\n        }\n    \n    // Decorative texture rings on column\n    for (h = [15:15:45]) {\n        translate([0, 0, h])\n            difference() {\n                cylinder(h = 2, d = 42);\n                cylinder(h = 2.1, d = 38);\n            }\n    }\n    \n    // Base feet (3 feet for stability)\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120]) {\n            translate([35, 0, -2])\n                cube([15, 8, 4]);\n        }\n    }\n    \n    // Chamfer edges (subtle)\n    translate([0, 0, 2.5])\n        cylinder(h = 5, d1 = 76, d2 = 80);\n    \n    translate([0, 0, 77.5])\n        cylinder(h = 5, d1 = 104, d2 = 100);\n}\n\n// Render the model\nplant_stand();",
    "renders": true
  },
  {
    "decorative_art": "steelbeam",
    "openscad_code": "// Steelbeam Bench - Realistic Style - Medium Complexity\n// A 120mm long decorative bench made from realistic steelbeam sections\n\n// Dimensions\n$fn = 50;\nbeam_width = 20;\nbeam_height = 30;\nbeam_thickness = 2;\nbench_length = 120;\nleg_height = 40;\n\n// Main I-beam module\nmodule i_beam(length, width, height, thickness) {\n    // Top flange\n    translate([0, height/2 - thickness/2, 0])\n        cube([length, thickness, width], center=true);\n    \n    // Bottom flange\n    translate([0, -height/2 + thickness/2, 0])\n        cube([length, thickness, width], center=true);\n    \n    // Web\n    translate([0, 0, 0])\n        cube([length, height - 2*thickness, thickness], center=true);\n    \n    // Realistic details - bolt holes\n    for(i = [-length/2 + 10 : 20 : length/2 - 10]) {\n        translate([i, height/2 - thickness/2, 0])\n            rotate([0, 90, 0])\n                cylinder(h=beam_width, d=3);\n        translate([i, -height/2 + thickness/2, 0])\n            rotate([0, 90, 0])\n                cylinder(h=beam_width, d=3);\n    }\n}\n\n// Support leg module\nmodule leg(height) {\n    difference() {\n        // Main leg beam\n        translate([0, 0, height/2])\n            i_beam(beam_width, beam_width, height, beam_thickness);\n        \n        // Decorative cutouts\n        translate([0, 0, height/4])\n            cube([beam_width - 4, beam_width - 4, height/2 - 4], center=true);\n    }\n}\n\n// Seat slats\nmodule seat_slats() {\n    slat_width = 8;\n    slat_gap = 4;\n    num_slats = bench_length / (slat_width + slat_gap) - 1;\n    \n    for(i = [0 : num_slats - 1]) {\n        translate([-bench_length/2 + slat_width/2 + i*(slat_width + slat_gap), 0, leg_height + beam_height/2 + slat_width/2])\n            cube([slat_width, beam_width - 4, slat_width], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main bench beam\n    translate([0, 0, leg_height + beam_height/2])\n        i_beam(bench_length, beam_width, beam_height, beam_thickness);\n    \n    // Front legs\n    translate([-bench_length/2 + 15, 0, 0])\n        leg(leg_height);\n    translate([bench_length/2 - 15, 0, 0])\n        leg(leg_height);\n    \n    // Seat slats for furniture feel\n    seat_slats();\n    \n    // Decorative end caps\n    translate([-bench_length/2, 0, leg_height + beam_height/2])\n        cylinder(h=beam_width, d=beam_height, center=true);\n    translate([bench_length/2, 0, leg_height + beam_height/2])\n        cylinder(h=beam_width, d=beam_height, center=true);\n    \n    // Support gussets\n    for(pos = [-bench_length/2 + 15, bench_length/2 - 15]) {\n        translate([pos, 0, leg_height/2])\n            rotate([0, 90, 0])\n                cylinder(h=beam_width, d=8);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "girder",
    "openscad_code": "// Girder Stool - Realistic Medium Complexity\n// A functional furniture piece inspired by steel I-beam girders\n// Print size: 100mm x 100mm x 45mm\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main parameters\nstool_width = 100;\nstool_depth = 100;\nstool_height = 45;\nwall_thickness = 2;\nflange_thickness = 4;\nweb_thickness = 3;\n\n// Create the complete stool\nmodule girder_stool() {\n    // Main girder body\n    union() {\n        // Top flange with rounded edges\n        translate([0, 0, stool_height - flange_thickness])\n            rounded_flange(stool_width, stool_depth, flange_thickness);\n        \n        // Web (vertical section)\n        translate([0, 0, 0])\n            cube([web_thickness, stool_depth, stool_height - 2*flange_thickness], center = true);\n        \n        // Bottom flange with rounded edges\n        translate([0, 0, 0])\n            rounded_flange(stool_width, stool_depth, flange_thickness);\n        \n        // Structural reinforcement ribs\n        for (x = [-30, -15, 0, 15, 30]) {\n            for (y = [-30, -15, 0, 15, 30]) {\n                if (abs(x) + abs(y) > 20) {\n                    translate([x, y, stool_height/2])\n                        cylinder(h = stool_height - 2*flange_thickness, r = 1.5, center = true);\n                }\n            }\n        }\n        \n        // Corner support brackets\n        corner_brackets();\n        \n        // Mounting holes for legs (if used as table top)\n        mounting_holes();\n    }\n}\n\n// Flange with rounded edges module\nmodule rounded_flange(width, depth, thickness) {\n    difference() {\n        // Main flange\n        cube([width, depth, thickness], center = true);\n        \n        // Rounded edges using cylinders\n        for (x = [-width/2 + 5, width/2 - 5]) {\n            for (y = [-depth/2 + 5, depth/2 - 5]) {\n                translate([x, y, 0])\n                    cylinder(h = thickness + 1, r = 5, center = true);\n            }\n        }\n    }\n}\n\n// Corner support brackets\nmodule corner_brackets() {\n    for (rot = [0, 90, 180, 270]) {\n        rotate([0, 0, rot])\n        translate([stool_width/2 - 8, stool_depth/2 - 8, stool_height/2])\n            bracket();\n    }\n}\n\n// Individual bracket\nmodule bracket() {\n    difference() {\n        union() {\n            // Main bracket body\n            cube([15, 15, stool_height - 2*flange_thickness], center = true);\n            \n            // Triangular gusset\n            translate([0, 0, stool_height/2 - flange_thickness - 2])\n                rotate([0, 0, 45])\n                scale([1, 0.7, 1])\n                cube([10, 10, 4], center = true);\n        }\n        \n        // Lightening holes\n        translate([0, 0, stool_height/2 - 5])\n            cylinder(h = 10, r = 3, center = true);\n    }\n}\n\n// Mounting holes for optional leg attachment\nmodule mounting_holes() {\n    for (x = [-stool_width/2 + 15, stool_width/2 - 15]) {\n        for (y = [-stool_depth/2 + 15, stool_depth/2 - 15]) {\n            translate([x, y, stool_height - flange_thickness/2])\n                cylinder(h = flange_thickness + 1, r = 2.5, center = true);\n        }\n    }\n}\n\n// Generate the stool\ngirder_stool();",
    "renders": true
  },
  {
    "decorative_art": "pillar",
    "openscad_code": "// Pillar Furniture Item - Realistic Style\n// Medium complexity decorative pillar with classical details\n\n// Parameters\npillar_height = 120;\npillar_diameter = 30;\nbase_height = 8;\ncapital_height = 12;\nflute_count = 16;\nflute_depth = 1.5;\nwall_thickness = 2;\n\nmodule pillar_base() {\n    // Main base disc\n    cylinder(h=base_height, d=pillar_diameter+8, $fn=64);\n    \n    // Decorative ring on base\n    translate([0, 0, base_height-2])\n        cylinder(h=2, d1=pillar_diameter+6, d2=pillar_diameter+4, $fn=64);\n    \n    // Bottom chamfer\n    translate([0, 0, -0.1])\n        cylinder(h=2, d1=pillar_diameter+12, d2=pillar_diameter+8, $fn=64);\n}\n\nmodule pillar_shaft() {\n    // Main shaft with hollow center\n    difference() {\n        // Outer cylinder\n        cylinder(h=pillar_height, d=pillar_diameter, $fn=64);\n        \n        // Inner hollow\n        translate([0, 0, -1])\n            cylinder(h=pillar_height+2, d=pillar_diameter-wall_thickness*2, $fn=64);\n        \n        // Fluting grooves\n        for(i = [0:flute_count-1]) {\n            rotate([0, 0, i * 360/flute_count])\n                translate([pillar_diameter/2 - flute_depth, 0, 0])\n                    cube([flute_depth*2, 1, pillar_height], center=true);\n        }\n    }\n    \n    // Top and bottom rings for structural strength\n    translate([0, 0, -1])\n        cylinder(h=3, d=pillar_diameter+1, $fn=64);\n    translate([0, 0, pillar_height-2])\n        cylinder(h=3, d=pillar_diameter+1, $fn=64);\n}\n\nmodule pillar_capital() {\n    // Main capital\n    translate([0, 0, pillar_height])\n        cylinder(h=capital_height, d=pillar_diameter+6, $fn=64);\n    \n    // Decorative top moldings\n    translate([0, 0, pillar_height+capital_height-3])\n        cylinder(h=3, d1=pillar_diameter+6, d2=pillar_diameter+8, $fn=64);\n    \n    translate([0, 0, pillar_height+capital_height-1])\n        cylinder(h=1, d=pillar_diameter+10, $fn=64);\n}\n\nmodule decorative_bands() {\n    // Mid-height decorative band\n    translate([0, 0, pillar_height/2-2])\n        cylinder(h=4, d=pillar_diameter+2, $fn=64);\n    \n    // Upper decorative band\n    translate([0, 0, pillar_height*0.75-1.5])\n        cylinder(h=3, d=pillar_diameter+1.5, $fn=64);\n}\n\n// Assembly\nunion() {\n    pillar_base();\n    pillar_shaft();\n    pillar_capital();\n    decorative_bands();\n}",
    "renders": true
  },
  {
    "decorative_art": "column",
    "openscad_code": "// Column Furniture Item - Realistic Style, Medium Complexity\n// 3D printable decorative column with classic proportions and details\n// Overall height: 120mm, Base diameter: 40mm\n\n// Parameters\ncolumn_height = 120;\nbase_diameter = 40;\nwall_thickness = 2;\ndetail_radius = 1;\n\n// Base module with decorative molding\nmodule base() {\n    // Main base cylinder\n    cylinder(h = 8, d = base_diameter, $fn = 32);\n    \n    // Decorative bottom molding\n    translate([0, 0, 0])\n    cylinder(h = 3, d1 = base_diameter, d2 = base_diameter + 4, $fn = 32);\n    \n    // Top molding of base\n    translate([0, 0, 5])\n    cylinder(h = 3, d1 = base_diameter + 4, d2 = base_diameter, $fn = 32);\n}\n\n// Shaft with fluted details\nmodule shaft() {\n    // Main shaft cylinder\n    translate([0, 0, 8])\n    cylinder(h = 85, d = base_diameter - 4, $fn = 32);\n    \n    // Fluted details - vertical grooves\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n        translate([base_diameter/2 - 2, -1, 8])\n        cube([2, 2, 85]);\n    }\n    \n    // Middle decorative band\n    translate([0, 0, 45])\n    cylinder(h = 6, d = base_diameter - 2, $fn = 32);\n    \n    // Small details on band\n    for(i = [0:15]) {\n        rotate([0, 0, i * 22.5])\n        translate([(base_diameter - 2)/2 - 1, 0, 48])\n        sphere(r = 1, $fn = 8);\n    }\n}\n\n// Capital with decorative elements\nmodule capital() {\n    // Bottom section\n    translate([0, 0, 93])\n    cylinder(h = 5, d = base_diameter, $fn = 32);\n    \n    // Volutes (scroll details)\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n        translate([base_diameter/2 - 3, 0, 98])\n        rotate([90, 0, 0])\n        cylinder(h = 8, r1 = 3, r2 = 1, $fn = 16);\n    }\n    \n    // Top plate\n    translate([0, 0, 105])\n    cylinder(h = 3, d = base_diameter + 8, $fn = 32);\n    \n    // Small decorative spheres on top\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([(base_diameter + 8)/2 - 2, 0, 108])\n        sphere(r = 1.5, $fn = 8);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    shaft();\n    capital();\n}\n\n// Central support hole for 3D printing (optional - reduces material)\ndifference() {\n    children();\n    translate([0, 0, -1])\n    cylinder(h = 122, d = 8, $fn = 32);\n}",
    "renders": true
  },
  {
    "decorative_art": "foundation",
    "openscad_code": "// Foundation Furniture - Decorative Base with Structural Elements\n// Realistic style, medium complexity, 3D printable\n\nmodule foundation_base() {\n    // Main rectangular base with rounded edges\n    difference() {\n        // Solid base\n        translate([0, 0, 5])\n            minkowski() {\n                cube([80, 60, 10], center=true);\n                cylinder(r=5, h=0.1, center=true);\n            }\n        \n        // Hollow interior for material saving\n        translate([0, 0, 5])\n            minkowski() {\n                cube([76, 56, 12], center=true);\n                cylinder(r=4, h=0.1, center=true);\n            }\n    }\n}\n\nmodule support_legs() {\n    // Four decorative legs with fluted columns\n    positions = [[-30, -20], [30, -20], [30, 20], [-30, 20]];\n    \n    for (pos = positions) {\n        translate([pos[0], pos[1], 0]) {\n            // Main leg post\n            cylinder(h=25, r=4, $fn=12);\n            \n            // Fluted details using subtracted cylinders\n            for (i = [0:11]) {\n                rotate([0, 0, i * 30])\n                    translate([3.5, 0, 0])\n                        cube([1, 2, 25], center=true);\n            }\n            \n            // Decorative base\n            translate([0, 0, -2])\n                cylinder(h=4, r1=6, r2=4, $fn=12);\n        }\n    }\n}\n\nmodule top_frame() {\n    // Top frame with decorative moldings\n    difference() {\n        // Outer frame\n        translate([0, 0, 27])\n            cube([84, 64, 6], center=true);\n        \n        // Inner cutout\n        translate([0, 0, 26.9])\n            cube([78, 58, 6.2], center=true);\n    }\n    \n    // Decorative moldings on top\n    for (x = [-38:8:38]) {\n        translate([x, 0, 30])\n            cube([6, 62, 2], center=true);\n    }\n    \n    for (y = [-28:8:28]) {\n        translate([0, y, 30])\n            cube([82, 6, 2], center=true);\n    }\n}\n\nmodule corner_braces() {\n    // Structural corner braces\n    positions = [[-30, -20], [30, -20], [30, 20], [-30, 20]];\n    \n    for (pos = positions) {\n        translate([pos[0], pos[1], 12]) {\n            rotate([45, 0, 0])\n                cube([3, 15, 3], center=true);\n            rotate([0, 45, 0])\n                cube([15, 3, 3], center=true);\n        }\n    }\n}\n\nmodule center_support() {\n    // Central support beam\n    translate([0, 0, 12])\n        cube([60, 40, 3], center=true);\n    \n    // Decorative center medallion\n    translate([0, 0, 15])\n        cylinder(h=8, r=12, $fn=32);\n    \n    translate([0, 0, 16])\n        cylinder(h=6, r=10, $fn=32);\n}\n\nmodule mounting_holes() {\n    // Holes for furniture mounting\n    positions = [[-25, -15], [25, -15], [25, 15], [-25, 15]];\n    \n    for (pos = positions) {\n        translate([pos[0], pos[1], 30])\n            cylinder(h=10, r=2.5, $fn=16);\n    }\n}\n\n// Assembly\nunion() {\n    foundation_base();\n    support_legs();\n    top_frame();\n    corner_braces();\n    center_support();\n}\n\n// Cut mounting holes after union\ndifference() {\n    children();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "decorative_art": "facade",
    "openscad_code": "// Facade Furniture - Decorative Wall Panel\n// Realistic style, medium complexity\n// Dimensions: 120mm width, 80mm height, 12mm depth\n\n// Overall dimensions\nwidth = 120;\nheight = 80;\ndepth = 12;\n\n// Wall thickness\nwall = 2;\n\n// Main frame module\nmodule main_frame() {\n    // Outer frame\n    difference() {\n        cube([width, height, depth]);\n        translate([wall, wall, wall])\n            cube([width-2*wall, height-2*wall, depth+1]);\n    }\n    \n    // Back panel\n    translate([wall, wall, 0])\n        cube([width-2*wall, height-2*wall, wall]);\n}\n\n// Decorative inner panel with grid pattern\nmodule inner_panel() {\n    panel_width = width - 2*wall - 4;\n    panel_height = height - 2*wall - 4;\n    \n    // Base panel\n    translate([wall+2, wall+2, wall])\n        cube([panel_width, panel_height, wall]);\n    \n    // Vertical slats\n    for (x = [5:15:panel_width-5]) {\n        translate([wall+2+x, wall+2+2, wall+wall])\n            cube([2, panel_height-4, wall]);\n    }\n    \n    // Horizontal slats\n    for (y = [5:15:panel_height-5]) {\n        translate([wall+2+2, wall+2+y, wall+wall])\n            cube([panel_width-4, 2, wall]);\n    }\n}\n\n// Corner brackets for structural support\nmodule corner_brackets() {\n    bracket_size = 8;\n    bracket_thick = 2;\n    \n    for (x = [wall, width-wall-bracket_size]) {\n        for (y = [wall, height-wall-bracket_size]) {\n            translate([x, y, 0])\n                cube([bracket_size, bracket_size, wall]);\n            \n            // Decorative cutouts\n            translate([x+2, y+2, -0.1])\n                cube([bracket_size-4, bracket_size-4, wall+0.2]);\n        }\n    }\n}\n\n// Decorative molding on top\nmodule top_molding() {\n    molding_height = 4;\n    \n    // Base molding\n    translate([wall, height-wall, wall])\n        cube([width-2*wall, wall, depth-wall]);\n    \n    // Decorative elements\n    for (i = [10:20:width-20]) {\n        translate([i, height-wall-molding_height, wall+wall])\n            cylinder(h=molding_height, r=2, $fn=16);\n    }\n}\n\n// Mounting holes for wall attachment\nmodule mounting_holes() {\n    hole_d = 4;\n    hole_depth = 6;\n    \n    for (x = [20, width-20]) {\n        for (y = [20, height-20]) {\n            translate([x, y, -0.1])\n                cylinder(h=hole_depth, d=hole_d, $fn=32);\n        }\n    }\n}\n\n// Assembly\nmain_frame();\ninner_panel();\ncorner_brackets();\ntop_molding();\nmounting_holes();",
    "renders": true
  },
  {
    "decorative_art": "archway",
    "openscad_code": "// Archway Bookend / Decorative Furniture Piece\n// Realistic Medium-Complexity Design\n// Overall dimensions: 80mm width x 40mm depth x 100mm height\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main archway module\nmodule archway_main() {\n    // Base platform for stability\n    translate([0, 0, 0])\n        cube([80, 40, 5], center = true);\n    \n    // Left pillar\n    translate([-35, 0, 2.5])\n        pillar();\n    \n    // Right pillar\n    translate([35, 0, 2.5])\n        pillar();\n    \n    // Main arch structure\n    translate([0, 0, 52.5])\n        arch();\n    \n    // Decorative keystone\n    translate([0, 0, 77.5])\n        keystone();\n    \n    // Crossbar between pillars\n    translate([0, 0, 50])\n        cube([70, 38, 5], center = true);\n}\n\n// Pillar module with decorative fluting\nmodule pillar() {\n    // Main pillar body\n    difference() {\n        cube([10, 36, 50], center = true);\n        \n        // Add fluting on front and back faces\n        for (i = [-12:6:12]) {\n            translate([i, 19, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 50, r = 1, center = true);\n        }\n    }\n    \n    // Pillar base\n    translate([0, 0, -27.5])\n        cube([12, 38, 5], center = true);\n    \n    // Pillar capital\n    translate([0, 0, 27.5])\n        cube([12, 38, 5], center = true);\n}\n\n// Arch module with voussoirs\nmodule arch() {\n    // Main arch body (hollow)\n    difference() {\n        // Outer arch\n        translate([0, 0, 0])\n            scale([1, 0.95, 1])\n                cylinder(h = 25, r = 40, center = true);\n        \n        // Inner arch (hollow)\n        translate([0, 0, 0])\n            scale([1, 0.95, 1])\n                cylinder(h = 25, r = 30, center = true);\n        \n        // Cut bottom half to make arch shape\n        translate([0, 0, -12.5])\n            cube([100, 100, 25], center = true);\n    }\n    \n    // Voussoir details (arch stones)\n    for (angle = [-60:10:60]) {\n        rotate([0, 0, angle])\n            translate([0, 0, 0])\n                voussoir();\n    }\n}\n\n// Individual voussoir stone\nmodule voussoir() {\n    translate([35, 0, 0])\n        cube([4, 36, 3], center = true);\n}\n\n// Decorative keystone\nmodule keystone() {\n    difference() {\n        // Main keystone\n        translate([0, 0, 0])\n            cube([8, 36, 10], center = true);\n        \n        // Decorative groove\n        translate([0, 0, 2])\n            cube([4, 32, 6], center = true);\n    }\n    \n    // Ornamentation on keystone\n    translate([0, 0, 5.5])\n        sphere(d = 6);\n}\n\n// Assembly\narchway_main();",
    "renders": true
  },
  {
    "decorative_art": "buttress",
    "openscad_code": "// Buttress furniture bracket - decorative shelf support\n// Designed for 3D printing with 2mm wall thickness\n// Overall height 120mm, width 80mm, depth 40mm\n\n$fn = 32;\n\nmodule buttress_furniture() {\n    // Main vertical support\n    translate([0, 0, 0])\n        difference() {\n            // Outer profile - Gothic arch shape\n            linear_extrude(height = 120, convexity = 10)\n                polygon(points=[\n                    [0, 0], [80, 0], [80, 100], [40, 120], [0, 100]\n                ]);\n            \n            // Inner hollow - 2mm wall thickness\n            translate([2, 2, 0])\n                linear_extrude(height = 120, convexity = 10)\n                    scale([0.95, 0.95])\n                        polygon(points=[\n                            [0, 0], [80, 0], [80, 100], [40, 120], [0, 100]\n                        ]);\n        }\n    \n    // Base reinforcement plate\n    translate([-10, -20, -5])\n        cube([100, 60, 5]);\n    \n    // Top shelf support platform\n    translate([0, -5, 115])\n        cube([80, 50, 5]);\n    \n    // Decorative ribbing on front face\n    for(i = [1:3]) {\n        translate([i*20, 0, 0])\n            difference() {\n                linear_extrude(height = 120, convexity = 10)\n                    polygon(points=[\n                        [0, 0], [5, 0], [5, 100], [2.5, 110], [0, 100]\n                    ]);\n                \n                translate([0.5, 0.5, 0])\n                    linear_extrude(height = 120, convexity = 10)\n                        scale([0.8, 0.9])\n                            polygon(points=[\n                                [0, 0], [5, 0], [5, 100], [2.5, 110], [0, 100]\n                            ]);\n            }\n    }\n    \n    // Side support braces\n    difference() {\n        // Left brace\n        translate([-5, 0, 30])\n            rotate([0, 90, 45])\n                cylinder(h = 40, r1 = 15, r2 = 10);\n        \n        // Hollow core\n        translate([-3, 0, 30])\n            rotate([0, 90, 45])\n                cylinder(h = 40, r1 = 13, r2 = 8);\n    }\n    \n    difference() {\n        // Right brace\n        translate([85, 0, 30])\n            rotate([0, 90, -45])\n                cylinder(h = 40, r1 = 15, r2 = 10);\n        \n        // Hollow core\n        translate([83, 0, 30])\n            rotate([0, 90, -45])\n                cylinder(h = 40, r1 = 13, r2 = 8);\n    }\n    \n    // Mounting holes for wall attachment\n    translate([10, 25, 60])\n        rotate([90, 0, 0])\n            cylinder(h = 5, r = 3);\n    \n    translate([70, 25, 60])\n        rotate([90, 0, 0])\n            cylinder(h = 5, r = 3);\n    \n    // Decorative crenellations on top\n    for(i = [0:3]) {\n        translate([i*20 + 5, -2.5, 120])\n            cube([10, 5, 5]);\n    }\n    \n    // Bottom decorative molding\n    translate([-10, -20, 0])\n        difference() {\n            cube([100, 5, 10]);\n            for(i = [0:9]) {\n                translate([i*10 + 2.5, 0, 5])\n                    cube([5, 5, 5]);\n            }\n        }\n}\n\n// Render the complete model\nbuttress_furniture();",
    "renders": true
  },
  {
    "decorative_art": "cornice",
    "openscad_code": "// Medium complexity realistic cornice for furniture top\n// Overall size: 100mm wide x 30mm deep x 20mm high\n\n$fn = 36;\n\nmodule cornice_body() {\n    difference() {\n        // Main body block with slight taper\n        hull() {\n            translate([-50, 0, 0]) cube([100, 30, 15], center=true);\n            translate([-48, 0, 7]) cube([96, 28, 8], center=true);\n        }\n        \n        // Recessed back for furniture mounting\n        translate([0, 13, 0]) cube([96, 2, 18], center=true);\n    }\n}\n\nmodule dentil_row() {\n    // Classical dentil molding detail\n    for(i=[-45:5:45]) {\n        translate([i, 0, 10]) cube([3.5, 30, 4], center=true);\n    }\n}\n\nmodule ogee_curve() {\n    // Double ogee decorative profile\n    difference() {\n        // Upper curve\n        translate([0, 0, 17]) cube([100, 30, 5], center=true);\n        \n        // Cutaway for first curve\n        rotate([0, 90, 0]) \n            translate([0, 0, -5]) \n                cylinder(h=100, r1=8, r2=2, center=true);\n        \n        // Cutaway for second curve\n        rotate([0, 90, 0]) \n            translate([0, 0, 1]) \n                cylinder(h=100, r1=2, r2=6, center=true);\n    }\n}\n\nmodule acanthus_leaf() {\n    // Stylized acanthus leaf detail for corners\n    translate([0, 15, 10]) {\n        // Leaf body\n        scale([1, 0.5, 1]) sphere(r=6);\n        \n        // Leaf cuts\n        for(a=[0:45:315]) {\n            rotate([0, 0, a]) \n                translate([2, 0, 0]) \n                    scale([0.3, 1, 1]) \n                        sphere(r=4);\n        }\n    }\n}\n\nmodule corner_rosettes() {\n    // Decorative rosettes at each end\n    for(side=[-1, 1]) {\n        translate([side*45, 0, 18]) {\n            // Rosette base\n            cylinder(h=2, r=8, center=true);\n            \n            // Petals\n            for(p=[0:30:330]) {\n                rotate([0, 0, p]) \n                    translate([5, 0, 1]) \n                        scale([1, 0.3, 0.5]) \n                            sphere(r=3);\n            }\n        }\n    }\n}\n\nmodule mounting_holes() {\n    // Screw holes for furniture attachment\n    for(side=[-1, 1]) {\n        translate([side*35, 15, 0]) {\n            rotate([90, 0, 0]) \n                cylinder(h=30, r=1.5, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    cornice_body();\n    \n    // Add dentil molding\n    dentil_row();\n    \n    // Add ogee profile\n    ogee_curve();\n    \n    // Corner decorations\n    for(side=[-1, 1]) {\n        mirror([side, 0, 0]) acanthus_leaf();\n    }\n    \n    // Rosettes\n    corner_rosettes();\n}\n\n// Remove mounting holes\ndifference() {\n    children();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "decorative_art": "keystone",
    "openscad_code": "// Keystone Furniture Item - Decorative Corner Bracket\n// Realistic style, medium complexity\n// Dimensions: 100mm x 100mm x 25mm overall\n\n// Main parameters\n$fn = 50;\nwall_thickness = 2;\n\n// Main keystone body\nmodule keystone_body() {\n    difference() {\n        // Outer shape - classic keystone with curved top\n        union() {\n            // Base rectangle\n            cube([80, 25, 20], center = true);\n            \n            // Arched top\n            translate([0, -12.5, 10])\n                scale([1, 0.5, 1])\n                cylinder(h = 15, r = 40, center = true);\n        }\n        \n        // Hollow interior for 3D printing\n        translate([0, 0, -8])\n            cube([76, 21, 16], center = true);\n    }\n}\n\n// Decorative carved pattern on front face\nmodule decorative_pattern() {\n    // Central rosette\n    translate([0, 13, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 1, r = 8, center = true);\n    \n    // Rosette details\n    for (i = [0:7]) {\n        rotate([90, 0, i * 45])\n            translate([0, 13, 5])\n                cube([1, 2, 1], center = true);\n    }\n    \n    // Side scrollwork\n    for (x = [-30:10:-10, 10:10:30]) {\n        translate([x, 13, 0])\n            rotate([90, 0, 0])\n            difference() {\n                cylinder(h = 1, r = 4, center = true);\n                translate([0, 0, -1])\n                    cube([2, 8, 3], center = true);\n            }\n    }\n    \n    // Bottom border pattern\n    for (x = [-35:5:35]) {\n        translate([x, 13, -8])\n            cube([1, 1, 1], center = true);\n    }\n}\n\n// Mounting holes for furniture attachment\nmodule mounting_holes() {\n    // Top holes\n    for (x = [-25, 25]) {\n        translate([x, 0, 8])\n            cylinder(h = 20, r = 2.5, center = true);\n    }\n    \n    // Bottom holes\n    for (x = [-30, 30]) {\n        translate([x, 0, -8])\n            cylinder(h = 20, r = 2.5, center = true);\n    }\n}\n\n// Structural reinforcement ribs\nmodule support_ribs() {\n    // Vertical ribs inside\n    for (x = [-20:20:20]) {\n        translate([x, 0, 0])\n            cube([2, 21, 16], center = true);\n    }\n    \n    // Horizontal rib\n    translate([0, 0, 0])\n        cube([76, 21, 2], center = true);\n}\n\n// Assemble the complete keystone\nunion() {\n    // Main body\n    keystone_body();\n    \n    // Add decorative elements\n    decorative_pattern();\n    \n    // Internal structure (only visible if sliced)\n    %support_ribs();\n}\n\n// Remove mounting holes\ndifference() {\n    children();\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "decorative_art": "lintel",
    "openscad_code": "// Lintel Furniture Piece - Decorative Mantel Style\n// Overall dimensions: 120mm wide x 20mm deep x 60mm tall\n\n$fn = 32;\n\n// Main lintel body\nmodule lintel_body() {\n    difference() {\n        // Main beam\n        translate([0, 10, 30])\n            cube([120, 20, 60], center=true);\n        \n        // Hollow center for weight reduction\n        translate([0, 10, 35])\n            cube([116, 16, 50], center=true);\n    }\n}\n\n// Decorative corbel on left side\nmodule left_corbel() {\n    union() {\n        // Main corbel block\n        translate([-50, 10, 15])\n            cube([20, 20, 30], center=true);\n        \n        // Decorative scroll detail\n        for(i = [0:3]) {\n            translate([-50, 10 + i*2, 15 + i*3])\n                rotate([0, 0, 45])\n                scale([0.8, 0.8, 0.8])\n                cylinder(h=2, r1=3-i*0.5, r2=2-i*0.3, center=true);\n        }\n    }\n}\n\n// Decorative corbel on right side (mirrored)\nmodule right_corbel() {\n    mirror([1, 0, 0])\n        left_corbel();\n}\n\n// Dentil molding detail on bottom\nmodule dentil_molding() {\n    for(i = [-5:1:5]) {\n        translate([i*10, 10, 0])\n            cube([8, 20, 4], center=true);\n    }\n}\n\n// Central decorative panel\nmodule central_panel() {\n    difference() {\n        // Raised panel\n        translate([0, 10, 45])\n            cube([40, 16, 10], center=true);\n        \n        // Recessed center\n        translate([0, 10, 49])\n            cube([36, 12, 6], center=true);\n        \n        // Decorative quatrefoil pattern\n        translate([0, 10, 51])\n            scale([1, 0.3, 1])\n            cylinder(h=2, r=8, center=true);\n        \n        rotate([0, 90, 0])\n        translate([0, 10, 51])\n            scale([1, 0.3, 1])\n            cylinder(h=2, r=8, center=true);\n    }\n}\n\n// Top decorative molding\nmodule top_molding() {\n    hull() {\n        translate([-60, 10, 60])\n            cube([2, 20, 4], center=true);\n        translate([60, 10, 60])\n            cube([2, 20, 4], center=true);\n        translate([-60, 10, 64])\n            cube([4, 20, 2], center=true);\n        translate([60, 10, 64])\n            cube([4, 20, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    lintel_body();\n    left_corbel();\n    right_corbel();\n    dentil_molding();\n    central_panel();\n    top_molding();\n}",
    "renders": true
  },
  {
    "decorative_art": "spandrel",
    "openscad_code": "// Spandrel Furniture Panel - Decorative Wall Element\n// Realistic style, medium complexity\n// Overall dimensions: 120mm x 15mm x 80mm\n\nmodule spandrel_panel() {\n    // Main body - slightly curved profile\n    difference() {\n        // Outer curved shell\n        hull() {\n            translate([0, 7.5, 0]) cube([120, 15, 5]);\n            translate([0, 7.5, 80]) cube([120, 15, 5]);\n        }\n        \n        // Inner cavity for material saving\n        translate([5, 7.5, 5]) cube([110, 13, 70]);\n    }\n    \n    // Decorative frame border\n    difference() {\n        // Outer frame\n        translate([-2, -2, -2]) cube([124, 19, 84]);\n        \n        // Inner cutout\n        translate([0, 0, 0]) cube([120, 15, 80]);\n    }\n    \n    // Central medallion\n    translate([60, 7.5, 40]) {\n        difference() {\n            // Medallion base\n            cylinder(h=3, r=25, $fn=64);\n            \n            // Inner circle detail\n            translate([0, 0, -0.1]) cylinder(h=3.2, r=20, $fn=64);\n            \n            // Center motif\n            translate([0, 0, 2.9]) cylinder(h=0.2, r=15, $fn=6);\n        }\n    }\n    \n    // Side scrollwork - left\n    translate([20, 7.5, 20]) {\n        rotate([90, 0, 0]) {\n            for(i=[0:5]) {\n                rotate([0, 0, i*30]) {\n                    translate([0, 0, 0]) \n                        scale([1, 1.5, 1])\n                        cylinder(h=2, r1=3, r2=1.5, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Side scrollwork - right\n    translate([100, 7.5, 20]) {\n        rotate([90, 0, 0]) {\n            for(i=[0:5]) {\n                rotate([0, 0, -i*30]) {\n                    translate([0, 0, 0]) \n                        scale([1, 1.5, 1])\n                        cylinder(h=2, r1=3, r2=1.5, $fn=8);\n                }\n            }\n        }\n    }\n    \n    // Lower decorative band\n    translate([60, 7.5, 5]) {\n        for(pos=[-40:20:40]) {\n            translate([pos, 0, 0]) {\n                difference() {\n                    cube([15, 3, 5]);\n                    translate([2, -0.1, 2]) cube([11, 3.2, 1]);\n                }\n            }\n        }\n    }\n    \n    // Upper decorative acanthus details\n    for(side=[-1:2:1]) {\n        translate([60 + side*35, 7.5, 70]) {\n            rotate([0, 0, side*15]) {\n                // Leaf base\n                scale([1, 0.3, 1]) cylinder(h=2, r=8, $fn=32);\n                \n                // Leaf details\n                for(i=[0:2]) {\n                    rotate([0, 0, i*120]) {\n                        translate([5, 0, 1]) \n                            scale([0.4, 0.2, 0.8])\n                            rotate([0, 110, 0]) \n                            cylinder(h=8, r1=2, r2=0.5, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Mounting holes\n    translate([10, 7.5, 40]) {\n        rotate([90, 0, 0]) cylinder(h=15, r=3, $fn=32);\n    }\n    translate([110, 7.5, 40]) {\n        rotate([90, 0, 0]) cylinder(h=15, r=3, $fn=32);\n    }\n}\n\n// Render the complete spandrel\nspandrel_panel();",
    "renders": true
  },
  {
    "decorative_art": "truss",
    "openscad_code": "// Truss-Style Decorative Stool (120 mm tall, 3D-printable)\n// Realistic proportions, medium complexity, no supports needed\n\n$fn=24; // Higher resolution for curves\n\nmodule leg() {\n    // Single truss leg with triangular bracing\n    difference() {\n        union() {\n            // Main vertical member\n            cube([6, 6, 60], center=true);\n            \n            // Diagonal braces (left)\n            translate([-15, 0, 15]) rotate([0, 45, 0]) \n                cube([6, 6, 35], center=true);\n            translate([-25, 0, 35]) rotate([0, -45, 0]) \n                cube([6, 6, 35], center=true);\n            \n            // Horizontal brace\n            translate([-20, 0, 30]) cube([40, 6, 6], center=true);\n            \n            // Mirror diagonals for right side\n            mirror([1,0,0]) {\n                translate([-15, 0, 15]) rotate([0, 45, 0]) \n                    cube([6, 6, 35], center=true);\n                translate([-25, 0, 35]) rotate([0, -45, 0]) \n                    cube([6, 6, 35], center=true);\n            }\n        }\n        \n        // Lightening holes (printable without supports)\n        for(z=[15:15:45]) {\n            translate([0, 0, z]) rotate([0, 0, 45]) \n                cylinder(h=8, d=4, center=true);\n        }\n    }\n}\n\nmodule seat() {\n    // Circular seat with truss pattern underside\n    difference() {\n        // Main seat top (2mm thick)\n        cylinder(h=2, d=80);\n        \n        // Center hole (weight reduction)\n        cylinder(h=3, d=20);\n        \n        // Decorative truss pattern on underside\n        for(i=[0:30:330]) {\n            rotate([0, 0, i]) translate([25, 0, -1]) \n                cube([50, 3, 2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, 61]) seat();\n    \n    // Four legs in truss arrangement\n    for(i=[0:90:270]) {\n        rotate([0, 0, i]) translate([35, 35, 30]) leg();\n    }\n    \n    // Cross-bracing between legs (lower)\n    for(i=[0:90:270]) {\n        rotate([0, 0, i]) translate([25, 0, 15]) \n            cube([50, 6, 6], center=true);\n    }\n    \n    // Cross-bracing between legs (upper)\n    for(i=[0:90:270]) {\n        rotate([0, 0, i]) translate([25, 0, 45]) \n            cube([50, 6, 6], center=true);\n    }\n    \n    // Foot pads (prevent scratching surfaces)\n    for(i=[0:90:270]) {\n        rotate([0, 0, i]) translate([35, 35, 1]) \n            cylinder(h=2, d=12);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "joist",
    "openscad_code": "// Joist Furniture Decorative Piece\n// Realistic style with medium complexity\n\n$fn = 50;\n\n// Main parameters\njoist_length = 120;\njoist_width = 25;\njoist_height = 40;\nwall_thickness = 2;\n\n// Decorative elements\nhole_diameter = 8;\nbolt_head_diameter = 12;\nbolt_head_height = 3;\ngroove_depth = 1.5;\ngroove_width = 3;\ngroove_spacing = 8;\n\nmodule joist_body() {\n    difference() {\n        // Main rectangular joist\n        cube([joist_length, joist_width, joist_height], center = true);\n        \n        // Hollow center\n        translate([0, 0, 0])\n            cube([joist_length - 2*wall_thickness, joist_width - 2*wall_thickness, joist_height - 2*wall_thickness], center = true);\n        \n        // End holes for bolts\n        translate([joist_length/2 - 10, 0, joist_height/2 - 10])\n            rotate([90, 0, 0])\n                cylinder(h = joist_width, d = hole_diameter, center = true);\n        \n        translate([-joist_length/2 + 10, 0, joist_height/2 - 10])\n            rotate([90, 0, 0])\n                cylinder(h = joist_width, d = hole_diameter, center = true);\n    }\n}\n\nmodule decorative_grooves() {\n    // Top surface grooves\n    for(i = [-joist_length/2 + 10 : groove_spacing : joist_length/2 - 10]) {\n        translate([i, 0, joist_height/2 - groove_depth/2])\n            cube([groove_width, joist_width, groove_depth], center = true);\n    }\n    \n    // Side grooves\n    for(i = [-joist_length/2 + 15 : groove_spacing * 1.5 : joist_length/2 - 15]) {\n        translate([i, joist_width/2 - groove_depth/2, 0])\n            cube([groove_width, groove_depth, joist_height], center = true);\n    }\n}\n\nmodule bolt_heads() {\n    // Bolt heads at ends\n    translate([joist_length/2 - 10, 0, joist_height/2 - 10])\n        rotate([90, 0, 0])\n            cylinder(h = bolt_head_height, d = bolt_head_diameter);\n    \n    translate([-joist_length/2 + 10, 0, joist_height/2 - 10])\n        rotate([90, 0, 0])\n            cylinder(h = bolt_head_height, d = bolt_head_diameter);\n}\n\nmodule support_ribs() {\n    // Internal support ribs for structure\n    for(i = [-joist_length/2 + 20 : 20 : joist_length/2 - 20]) {\n        translate([i, 0, 0])\n            cube([wall_thickness, joist_width - 2*wall_thickness, joist_height - 2*wall_thickness], center = true);\n    }\n}\n\nmodule wood_texture() {\n    // Subtle wood grain texture on top\n    for(i = [-joist_length/2 + 2 : 1 : joist_length/2 - 2]) {\n        translate([i, 0, joist_height/2 - 0.3])\n            cube([0.5, joist_width - 2, 0.3], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    joist_body();\n    support_ribs();\n    decorative_grooves();\n    bolt_heads();\n    wood_texture();\n}",
    "renders": true
  },
  {
    "decorative_art": "rafter",
    "openscad_code": "// RaFTER - Decorative Furniture Element\n// A scaled-down rafter with mortise-and-tenon joint details and carved relief\n// Designed as a 3D-printable decorative or educational piece\n\n$fn = 36;\n\n// Overall dimensions (mm)\nlength = 120;\nwidth = 30;\nheight = 25;\nwall = 2;\n\n// Chamfer helper\nmodule chamfer_cube(s, c) {\n    hull() {\n        translate([c, c, 0]) cube([s.x-2*c, s.y-2*c, s.z]);\n        translate([0, 0, c]) cube([s.x, s.y, s.z-2*c]);\n    }\n}\n\n// Main rafter body\nmodule rafter_body() {\n    difference() {\n        // Tapered body\n        linear_extrude(height=height, scale=[1, 0.85], center=false)\n            square([length, width], center=true);\n        \n        // Hollow out for 3D printing\n        translate([0, 0, wall])\n            linear_extrude(height=height-2*wall, scale=[1, 0.85], center=false)\n                square([length-2*wall, width-2*wall], center=true);\n        \n        // Cut away bottom for mounting\n        translate([0, 0, -1])\n            cube([length+2, width+2, 5], center=true);\n    }\n}\n\n// Mortise detail (cutout)\nmodule mortise() {\n    translate([length*0.7, 0, height*0.6])\n        cube([15, width/3, height*0.4], center=true);\n}\n\n// Tenon detail (protrusion)\nmodule tenon() {\n    translate([-length/2-6, 0, height*0.4])\n        cube([12, width*0.7, height*0.2], center=true);\n}\n\n// Decorative carved pattern\nmodule carved_pattern() {\n    for (i = [0:5]) {\n        translate([length*(0.1 + i*0.15), 0, height-1])\n            rotate([0, 0, 45])\n            difference() {\n                cube([8, 2, 2], center=true);\n                cylinder(h=2.1, r=1.2, center=true);\n            }\n    }\n}\n\n// Side reinforcement ribs\nmodule ribs() {\n    for (i = [0:2]) {\n        translate([length*(0.2 + i*0.3), 0, 0])\n            cube([3, width+0.2, 3], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    rafter_body();\n    \n    difference() {\n        union() {\n            tenon();\n            ribs();\n        }\n        mortise();\n    }\n    \n    // Add carved pattern on top\n    difference() {\n        translate([0, 0, height])\n            cube([length, width, 1], center=true);\n        carved_pattern();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "stud",
    "openscad_code": "// Stud Furniture - Decorative Wall Shelf Bracket\n// Realistic style, medium complexity, 3D printable\n\n$fn = 32;\n\n// Main parameters\nstud_length = 120;\nstud_width = 60;\nstud_thickness = 20;\nwall_thickness = 2;\npeg_diameter = 8;\npeg_length = 15;\nhole_spacing = 10;\n\nmodule stud_body() {\n    difference() {\n        // Main stud body\n        union() {\n            // Central block\n            cube([stud_length, stud_width, stud_thickness], center=true);\n            \n            // Decorative top cap\n            translate([0, 0, stud_thickness/2 + 2.5])\n                cube([stud_length + 10, stud_width + 10, 5], center=true);\n            \n            // Bottom reinforcement\n            translate([0, 0, -stud_thickness/2 - 2.5])\n                cube([stud_length + 10, stud_width + 10, 5], center=true);\n            \n            // Side ribs for strength\n            for (x = [-40, 0, 40]) {\n                translate([x, 0, 0])\n                    cube([10, stud_width + 10, stud_thickness + 10], center=true);\n            }\n        }\n        \n        // Mounting holes\n        for (x = [-40, 0, 40]) {\n            translate([x, 0, 0])\n                rotate([90, 0, 0])\n                    cylinder(h=stud_width + 5, r=3, center=true);\n        }\n        \n        // Weight reduction cavities\n        for (x = [-30, -10, 10, 30]) {\n            for (y = [-20, 0, 20]) {\n                translate([x, y, 0])\n                    cube([8, 8, stud_thickness - 2], center=true);\n            }\n        }\n    }\n}\n\nmodule shelf_peg() {\n    // Peg for shelf support\n    difference() {\n        union() {\n            // Main peg shaft\n            cylinder(h=peg_length, r=peg_diameter/2);\n            \n            // Tapered end\n            translate([0, 0, peg_length])\n                cylinder(h=5, r1=peg_diameter/2, r2=peg_diameter/4);\n            \n            // Base collar\n            translate([0, 0, -2])\n                cylinder(h=4, r=peg_diameter/2 + 2);\n        }\n        \n        // Hollow core for strength\n        cylinder(h=peg_length + 5, r=peg_diameter/2 - wall_thickness);\n    }\n}\n\nmodule decorative_pattern() {\n    // Geometric relief pattern\n    for (x = [-50:10:50]) {\n        for (y = [-25:10:25]) {\n            translate([x, y, stud_thickness/2 + 0.5])\n                linear_extrude(height=1)\n                    offset(r=2)\n                        square([6, 6], center=true);\n        }\n    }\n}\n\nmodule chamfered_edges() {\n    // Add chamfers to edges\n    intersection() {\n        stud_body();\n        \n        // Chamfer cutters\n        for (edge = [[-1, -1], [1, -1], [-1, 1], [1, 1]]) {\n            translate([edge[0] * stud_length/2, edge[1] * stud_width/2, 0])\n                rotate([0, 0, atan2(edge[1], edge[0])])\n                    translate([0, 0, -stud_thickness/2 - 5])\n                        cube([10, 10, stud_thickness + 10], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main stud\n    chamfered_edges();\n    \n    // Decorative pattern\n    decorative_pattern();\n    \n    // Shelf pegs\n    for (i = [-2:1:2]) {\n        translate([i * 15, 0, stud_thickness/2 + peg_length/2 + 2.5])\n            rotate([90, 0, 0])\n                shelf_peg();\n    }\n    \n    // Wall mounting plate\n    translate([0, -stud_width/2 - 3, 0])\n        cube([stud_length + 20, 6, stud_thickness + 10], center=true);\n}",
    "renders": true
  },
  {
    "decorative_art": "beam",
    "openscad_code": "$fa = 1;\n$fs = 0.5;\n\n// Overall beam dimensions (scaled for 3D printing)\nbeam_length = 100;\nbeam_width = 20;\nbeam_height = 30;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Decorative end cap size\ncap_size = 5;\n\n// Beam module\nmodule beam_furniture() {\n    // Main beam body with hollow core\n    difference() {\n        // Outer solid beam\n        cube([beam_length, beam_width, beam_height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 0])\n            cube([beam_length - 2*wall_thickness, \n                  beam_width - 2*wall_thickness, \n                  beam_height - 2*wall_thickness], center = true);\n    }\n    \n    // Left decorative end cap with fluting\n    translate([-beam_length/2 - cap_size/2, 0, 0])\n        decorative_end();\n    \n    // Right decorative end cap (mirrored)\n    translate([beam_length/2 + cap_size/2, 0, 0])\n        mirror([1, 0, 0])\n            decorative_end();\n    \n    // Structural reinforcement ribs inside\n    for (i = [-beam_length/2 + 10 : 20 : beam_length/2 - 10]) {\n        translate([i, 0, 0])\n            cube([wall_thickness, beam_width - 2*wall_thickness, beam_height - 2*wall_thickness], center = true);\n    }\n    \n    // Top decorative pattern - small raised squares\n    for (x = [-beam_length/2 + 5 : 10 : beam_length/2 - 5]) {\n        for (z = [-beam_height/2 + 3 : 6 : beam_height/2 - 3]) {\n            translate([x, beam_width/2, z])\n                cube([3, 1, 3], center = true);\n        }\n    }\n    \n    // Bottom decorative grooves\n    for (x = [-beam_length/2 + 8 : 12 : beam_length/2 - 8]) {\n        translate([x, 0, -beam_height/2 - 0.5])\n            cube([8, beam_width, 1], center = true);\n    }\n}\n\n// Decorative end cap module with fluting\nmodule decorative_end() {\n    // Main cap body\n    difference() {\n        cube([cap_size, beam_width + 2, beam_height + 2], center = true);\n        \n        // Hollow center\n        translate([0, 0, 0])\n            cube([cap_size + 1, beam_width - wall_thickness, beam_height - wall_thickness], center = true);\n    }\n    \n    // Vertical fluting details\n    for (y = [-beam_width/2 + 2 : 3 : beam_width/2 - 2]) {\n        translate([-cap_size/2, y, 0])\n            cylinder(h = cap_size + 0.5, r = 1.5, $fn = 8);\n    }\n    \n    // Corner brackets for joint simulation\n    bracket_pos = beam_width/2 - 1;\n    translate([0, bracket_pos, beam_height/2 - 2])\n        cube([cap_size - 1, 2, 2], center = true);\n    translate([0, -bracket_pos, beam_height/2 - 2])\n        cube([cap_size - 1, 2, 2], center = true);\n    translate([0, bracket_pos, -beam_height/2 + 2])\n        cube([cap_size - 1, 2, 2], center = true);\n    translate([0, -bracket_pos, -beam_height/2 + 2])\n        cube([cap_size - 1, 2, 2], center = true);\n}\n\n// Render the beam furniture\nbeam_furniture();",
    "renders": true
  },
  {
    "decorative_art": "slab",
    "openscad_code": "// Slab Table - Realistic Style, Medium Complexity\n// A modern slab-style coffee table with structural frame and decorative features\n\n// Parameters\ntable_length = 120;\ntable_width = 70;\ntable_height = 45;\nleg_thickness = 4;\nslab_thickness = 8;\nframe_thickness = 3;\nbolt_diameter = 3;\nbolt_head_diameter = 5;\n\n// Main module\nmodule slab_table() {\n    // Top slab with rounded edges\n    translate([0, 0, table_height - slab_thickness/2])\n        rounded_slab(table_length, table_width, slab_thickness);\n    \n    // Support frame structure\n    support_frame();\n    \n    // Legs\n    legs();\n    \n    // Decorative bolts at corners\n    corner_bolts();\n}\n\n// Rounded slab top with beveled edges\nmodule rounded_slab(l, w, h) {\n    // Main slab\n    difference() {\n        // Base slab\n        cube([l, w, h], center = true);\n        \n        // Chamfer edges\n        translate([0, 0, h/2 - 1])\n            cube([l - 4, w - 4, 2], center = true);\n    }\n    \n    // Subtle edge rounding\n    translate([0, 0, h/2 - 0.5])\n        cube([l + 0.5, w + 0.5, 1], center = true);\n}\n\n// Support frame connecting legs\nmodule support_frame() {\n    // Long side rails\n    translate([0, table_width/2 - leg_thickness, table_height/2])\n        cube([table_length - leg_thickness*2, frame_thickness, table_height - slab_thickness], center = true);\n    \n    translate([0, -table_width/2 + leg_thickness, table_height/2])\n        cube([table_length - leg_thickness*2, frame_thickness, table_height - slab_thickness], center = true);\n    \n    // Short cross braces\n    translate([table_length/2 - leg_thickness, 0, table_height/3])\n        cube([frame_thickness, table_width - leg_thickness*2, frame_thickness], center = true);\n    \n    translate([-table_length/2 + leg_thickness, 0, table_height/3])\n        cube([frame_thickness, table_width - leg_thickness*2, frame_thickness], center = true);\n}\n\n// Table legs with taper\nmodule legs() {\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (table_length/2 - leg_thickness), \n                      y * (table_width/2 - leg_thickness), \n                      table_height/2 - slab_thickness/2]) {\n                // Tapered leg\n                linear_extrude(height = table_height - slab_thickness, scale = 0.85)\n                    square([leg_thickness, leg_thickness], center = true);\n                \n                // Leg foot detail\n                translate([0, 0, -(table_height - slab_thickness)/2])\n                    cube([leg_thickness + 1, leg_thickness + 1, 2], center = true);\n            }\n        }\n    }\n}\n\n// Decorative corner bolts\nmodule corner_bolts() {\n    bolt_offset = 8;\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (table_length/2 - bolt_offset), \n                      y * (table_width/2 - bolt_offset), \n                      table_height - slab_thickness - 1]) {\n                // Bolt hole\n                cylinder(d = bolt_diameter, h = slab_thickness + 2, center = true);\n                \n                // Bolt head\n                translate([0, 0, slab_thickness/2 + 1])\n                    cylinder(d = bolt_head_diameter, h = 2, $fn = 6);\n            }\n        }\n    }\n}\n\n// Render the table\nslab_table();",
    "renders": true
  },
  {
    "decorative_art": "tile",
    "openscad_code": "// Tile-style decorative furniture panel\n// Dimensions: 100x100x15 mm, wall thickness 2 mm\n\nmodule leg(x, y) {\n    // Single furniture leg with rounded edges\n    translate([x, y, 0]) {\n        difference() {\n            // Main leg body\n            cylinder(h = 12, r = 4, $fn = 16);\n            // Hollow center\n            cylinder(h = 12, r = 2, $fn = 16);\n        }\n        // Foot detail\n        translate([0, 0, -1]) cylinder(h = 2, r1 = 4.5, r2 = 4, $fn = 16);\n    }\n}\n\nmodule frame() {\n    // Outer frame structure\n    difference() {\n        // Outer frame\n        cube([100, 100, 15], center = true);\n        // Inner cutout\n        cube([96, 96, 16], center = true);\n    }\n    // Top surface panel\n    translate([0, 0, 6.5]) cube([96, 96, 2], center = true);\n}\n\nmodule decorative_pattern() {\n    // Geometric pattern on surface\n    for (i = [-40:10:40]) {\n        for (j = [-40:10:40]) {\n            if ((abs(i) + abs(j)) % 20 == 0) {\n                translate([i, j, 7.6]) \n                    cube([6, 6, 0.5], center = true);\n            }\n        }\n    }\n}\n\nmodule joint_detail() {\n    // Corner joint reinforcements\n    for (x = [-48, 48]) {\n        for (y = [-48, 48]) {\n            translate([x, y, 0]) {\n                difference() {\n                    cube([8, 8, 15], center = true);\n                    cube([6, 6, 17], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base frame\n    frame();\n    \n    // Decorative surface pattern\n    decorative_pattern();\n    \n    // Corner joints\n    joint_detail();\n    \n    // Furniture legs\n    leg(-40, -40);\n    leg(40, -40);\n    leg(-40, 40);\n    leg(40, 40);\n    \n    // Central support beam\n    translate([0, 0, -7.5]) {\n        difference() {\n            cube([60, 8, 15], center = true);\n            cube([58, 6, 17], center = true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "slate",
    "openscad_code": "// Slate Furniture - Decorative Slate Coffee Table\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions (mm)\ntable_length = 120;\ntable_width = 70;\ntable_height = 45;\nslate_thickness = 4;\nleg_thickness = 6;\n\n// Main slate tabletop\nmodule slate_tabletop() {\n    difference() {\n        // Main slate piece\n        translate([0, 0, table_height - slate_thickness/2])\n            cube([table_length, table_width, slate_thickness], center=true);\n        \n        // Rounded corners\n        for(x = [-table_length/2 + 5, table_length/2 - 5]) {\n            for(y = [-table_width/2 + 5, table_width/2 - 5]) {\n                translate([x, y, table_height - slate_thickness/2])\n                    cylinder(h=slate_thickness+1, r=5, center=true, $fn=20);\n            }\n        }\n        \n        // Edge chamfers\n        for(edge = [0:1]) {\n            rotate([0, 0, edge * 90])\n            translate([table_length/2 - 2, 0, table_height - slate_thickness/2])\n                cube([4, table_width, slate_thickness+1], center=true);\n        }\n    }\n}\n\n// Slate texture pattern\nmodule slate_texture() {\n    difference() {\n        // Base texture layer\n        translate([0, 0, table_height - slate_thickness/2 - 0.5])\n            cube([table_length - 4, table_width - 4, 1], center=true);\n        \n        // Random grooves for slate appearance\n        for(i = [0:8]) {\n            rotate([0, 0, i * 20 + 5])\n            translate([0, 0, table_height - slate_thickness/2 - 0.5])\n                cube([table_length - 4, 0.5, 2], center=true);\n        }\n        \n        // Natural slate holes\n        for(pos = [[-20, 15], [25, -10], [-10, -20], [15, 20]]) {\n            translate([pos[0], pos[1], table_height - slate_thickness/2 - 0.5])\n                cylinder(h=2, r=1.5, $fn=8);\n        }\n    }\n}\n\n// Leg structure with joints\nmodule table_leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, table_height/2]) {\n        rotate([0, 0, angle]) {\n            difference() {\n                // Main leg post\n                cube([leg_thickness, leg_thickness, table_height - slate_thickness - 2], center=true);\n                \n                // Decorative cutouts\n                for(h = [-table_height/4, 0, table_height/4]) {\n                    translate([0, 0, h])\n                        cube([leg_thickness - 2, leg_thickness - 2, 3], center=true);\n                }\n            }\n            \n            // Base support pad\n            translate([0, 0, -table_height/2 + 2])\n                cube([leg_thickness + 4, leg_thickness + 4, 4], center=true);\n            \n            // Top joint connector\n            translate([0, 0, table_height/2 - slate_thickness/2 - 1])\n                cylinder(h=4, r=leg_thickness/2 + 1, center=true, $fn=16);\n        }\n    }\n}\n\n// Cross support beams\nmodule support_beam() {\n    // Long side supports\n    for(side = [-1, 1]) {\n        translate([0, side * (table_width/2 - leg_thickness - 2), table_height/3])\n            cube([table_length - leg_thickness*2 - 8, leg_thickness - 2, leg_thickness - 2], center=true);\n    }\n    \n    // Short side supports\n    for(side = [-1, 1]) {\n        translate([side * (table_length/2 - leg_thickness - 2), 0, table_height/3])\n            cube([leg_thickness - 2, table_width - leg_thickness*2 - 8, leg_thickness - 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main tabletop\n    slate_tabletop();\n    \n    // Slate surface texture\n    slate_texture();\n    \n    // Four legs at corners\n    leg_positions = [\n        [-table_length/2 + leg_thickness + 5, -table_width/2 + leg_thickness + 5, 0],\n        [table_length/2 - leg_thickness - 5, -table_width/2 + leg_thickness + 5, 0],\n        [-table_length/2 + leg_thickness + 5, table_width/2 - leg_thickness - 5, 0],\n        [table_length/2 - leg_thickness - 5, table_width/2 - leg_thickness - 5, 0]\n    ];\n    \n    for(pos = leg_positions) {\n        table_leg(pos[0], pos[1], pos[3]);\n    }\n    \n    // Support structure\n    support_beam();\n    \n    // Decorative corner brackets\n    for(x = [-table_length/2 + 10, table_length/2 - 10]) {\n        for(y = [-table_width/2 + 10, table_width/2 - 10]) {\n            translate([x, y, table_height - 8])\n                difference() {\n                    cylinder(h=4, r=3, $fn=6);\n                    cylinder(h=5, r=1.5, $fn=6);\n                }\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "granite",
    "openscad_code": "// Granite-look side table (approx 120 mm tall)\n// Medium-complexity realistic style with repeatable carved patterns\n\n// global parameters\n$fn = 36;\nwall = 2;\n\nmodule granite_block(x,y,z,seed=0){\n    // simple granite texture via small random dents\n    translate([0,0,0]) difference(){\n        cube([x,y,z], center=true);\n        for(i=[0:5:seed]){\n            translate([x*(0.1+rands(-1,1,1)[0]/10),\n                       y*(0.1+rands(-1,1,1)[0]/10),\n                       z*(0.1+rands(-1,1,1)[0]/10)])\n                sphere(d=rands(1,3,1)[0], $fn=12);\n        }\n    }\n}\n\n// top slab\nmodule top_slab(){\n    difference(){\n        granite_block(90,90,6,seed=42);\n        // underside cavity for weight saving / printing\n        translate([0,0,-3]) cube([86,86,4], center=true);\n    }\n}\n\n// leg\nmodule leg(h){\n    difference(){\n        granite_block(10,10,h,seed=12);\n        // hollow core\n        translate([0,0,0]) cube([6,6,h], center=true);\n    }\n}\n\n// decorative apron panel\nmodule apron(){\n    difference(){\n        granite_block(70,10,4,seed=7);\n        // repeating rectangular cutouts\n        for(i=[-30:15:30]){\n            translate([i,0,0]) cube([8,12,6], center=true);\n        }\n    }\n}\n\n// assembly\nunion(){\n    // top\n    translate([0,0,60]) top_slab();\n\n    // four legs\n    for(px=[-35,35])\n        for(py=[-35,35])\n            translate([px,py,0]) leg(57);\n\n    // four aprons\n    translate([0,35,30]) rotate([0,0,0])   apron();\n    translate([0,-35,30]) rotate([0,0,0])  apron();\n    translate([35,0,30]) rotate([0,0,90]) apron();\n    translate([-35,0,30]) rotate([0,0,90]) apron();\n}",
    "renders": true
  },
  {
    "decorative_art": "marble",
    "openscad_code": "// Marble Side Table - Realistic Style with Medium Complexity\n// Overall dimensions: 100mm diameter top, 110mm height\n\n// Parameters\ntable_top_d = 100;\ntable_top_h = 8;\nleg_d = 8;\nleg_h = 100;\nsupport_ring_h = 15;\nbase_d = 60;\nbase_h = 5;\ncorner_radius = 3;\nwall = 2;\n\n// Main module\nmodule marble_side_table() {\n    // Table top with rounded edges\n    difference() {\n        // Main top\n        cylinder(h=table_top_h, d=table_top_d, $fn=64);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=table_top_h+2, d=table_top_d-wall*2, $fn=64);\n        \n        // Rounded top edge\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([table_top_d/2-wall, table_top_d/2-wall, table_top_h-wall])\n                    sphere(r=corner_radius, $fn=16);\n        }\n    }\n    \n    // Decorative marble pattern on top\n    translate([0, 0, table_top_h-1])\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([20, 0, 0])\n                scale([1.5, 0.5, 0.5])\n                    sphere(r=8, $fn=32);\n    }\n    \n    // Support ring with decorative elements\n    translate([0, 0, table_top_h+support_ring_h/2])\n    difference() {\n        cylinder(h=support_ring_h, d=table_top_d*0.7, $fn=48);\n        cylinder(h=support_ring_h+2, d=table_top_d*0.7-wall*2, $fn=48);\n    }\n    \n    // Legs with tapered design\n    for(i=[0:3]) {\n        rotate([0, 0, i*120])\n        translate([(table_top_d*0.3)/2, 0, table_top_h+support_ring_h]) {\n            // Upper leg segment\n            cylinder(h=leg_h*0.4, d1=leg_d, d2=leg_d*0.8, $fn=16);\n            \n            // Middle decorative ring\n            translate([0, 0, leg_h*0.4])\n                cylinder(h=5, d=leg_d*1.2, $fn=16);\n            \n            // Lower leg segment\n            translate([0, 0, leg_h*0.4+5])\n                cylinder(h=leg_h*0.6-5, d1=leg_d*0.8, d2=leg_d*1.1, $fn=16);\n        }\n    }\n    \n    // Base platform\n    translate([0, 0, table_top_h+support_ring_h+leg_h])\n    difference() {\n        cylinder(h=base_h, d=base_d, $fn=64);\n        translate([0, 0, -1])\n            cylinder(h=base_h+2, d=base_d-wall*2, $fn=64);\n    }\n    \n    // Decorative base trim\n    translate([0, 0, table_top_h+support_ring_h+leg_h+base_h])\n    cylinder(h=3, d=base_d+wall*2, $fn=64);\n    \n    // Joint reinforcements\n    for(i=[0:3]) {\n        rotate([0, 0, i*120])\n        translate([(table_top_d*0.3)/2, 0, table_top_h+support_ring_h]) {\n            // Upper joint\n            translate([0, 0, -2])\n                cylinder(h=4, d=leg_d*1.5, $fn=16);\n            \n            // Lower joint\n            translate([0, 0, leg_h-2])\n                cylinder(h=4, d=leg_d*1.5, $fn=16);\n        }\n    }\n}\n\n// Render the table\nmarble_side_table();",
    "renders": true
  },
  {
    "decorative_art": "limestone",
    "openscad_code": "// Limestone Coffee Table\n// Dimensions: 120mm x 80mm x 45mm\n// Realistic limestone furniture with carved details and proper proportions\n\n// Overall dimensions\ntable_length = 120;\ntable_width = 80;\ntable_height = 45;\nleg_height = 35;\nleg_size = 8;\ntop_thickness = 6;\ncarving_depth = 1.5;\n\n// Limestone color\n$fn = 32;\n\n// Carved patterns on table top\nmodule carved_pattern() {\n    for (i = [-1:1]) {\n        for (j = [-1:1]) {\n            translate([i * 30, j * 20, 0]) {\n                difference() {\n                    cube([25, 15, carving_depth], center=true);\n                    cylinder(h=carving_depth + 0.1, r=8, center=true);\n                }\n            }\n        }\n    }\n}\n\n// Table leg with chamfered edges\nmodule table_leg(x, y) {\n    translate([x, y, leg_height/2]) {\n        difference() {\n            // Main leg body\n            cube([leg_size, leg_size, leg_height], center=true);\n            \n            // Chamfer corners\n            for (dx = [-1, 1]) {\n                for (dy = [-1, 1]) {\n                    translate([dx * (leg_size/2 - 1), dy * (leg_size/2 - 1), 0]) {\n                        rotate([0, 0, 45 * dx * dy]) {\n                            cube([2.5, 2.5, leg_height + 2], center=true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Decorative apron rail\nmodule apron_rail(x1, y1, x2, y2) {\n    length = abs(x2 - x1) > abs(y2 - y1) ? abs(x2 - x1) - leg_size : abs(y2 - y1) - leg_size;\n    width = abs(x2 - x1) > abs(y2 - y1) ? 4 : table_width - 2 * leg_size;\n    height = 3;\n    \n    translate([(x1 + x2)/2, (y1 + y2)/2, leg_height - height/2 - 2]) {\n        rotate([0, 0, abs(x2 - x1) > abs(y2 - y1) ? 0 : 90]) {\n            difference() {\n                cube([length, width, height], center=true);\n                // Carved groove\n                translate([0, 0, height/2 + 0.1]) {\n                    cube([length - 10, 2, carving_depth + 0.1], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Main table assembly\nunion() {\n    // Table top with carved details\n    translate([0, 0, table_height - top_thickness/2]) {\n        difference() {\n            // Main top\n            cube([table_length, table_width, top_thickness], center=true);\n            \n            // Rounded top edges\n            translate([0, 0, -top_thickness/2 - 0.1]) {\n                minkowski() {\n                    cube([table_length - 4, table_width - 4, 0.1], center=true);\n                    cylinder(h=0.1, r=2);\n                }\n            }\n        }\n        \n        // Carved patterns on top surface\n        translate([0, 0, top_thickness/2 - carving_depth/2]) {\n            carved_pattern();\n        }\n    }\n    \n    // Four legs\n    table_leg(-table_length/2 + leg_size/2, -table_width/2 + leg_size/2);\n    table_leg(table_length/2 - leg_size/2, -table_width/2 + leg_size/2);\n    table_leg(-table_length/2 + leg_size/2, table_width/2 - leg_size/2);\n    table_leg(table_length/2 - leg_size/2, table_width/2 - leg_size/2);\n    \n    // Apron rails\n    apron_rail(-table_length/2 + leg_size/2, -table_width/2 + leg_size/2, \n               table_length/2 - leg_size/2, -table_width/2 + leg_size/2);\n    apron_rail(-table_length/2 + leg_size/2, table_width/2 - leg_size/2,\n               table_length/2 - leg_size/2, table_width/2 - leg_size/2);\n    apron_rail(-table_length/2 + leg_size/2, -table_width/2 + leg_size/2,\n               -table_length/2 + leg_size/2, table_width/2 - leg_size/2);\n    apron_rail(table_length/2 - leg_size/2, -table_width/2 + leg_size/2,\n               table_length/2 - leg_size/2, table_width/2 - leg_size/2);\n    \n    // Lower shelf\n    translate([0, 0, leg_height/2 - 5]) {\n        difference() {\n            cube([table_length - 20, table_width - 20, 3], center=true);\n            // Shelf ventilation holes\n            for (i = [-40:20:40]) {\n                for (j = [-30:15:30]) {\n                    translate([i, j, -2]) {\n                        cylinder(h=5, r=3);\n                    }\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "sandstone",
    "openscad_code": "// Sandstone Decorative Stool - Realistic Style\n// Medium complexity OpenSCAD model for 3D printing\n\n$fn = 50;  // Smooth curves for printing\n\n// Overall stool dimensions: 80mm diameter, 45mm height\nstool_diameter = 80;\nstool_height = 45;\nwall_thickness = 2;\n\n// Main seat top with sandstone texture pattern\nmodule seat_top() {\n    difference() {\n        // Main circular seat\n        cylinder(h=8, d=stool_diameter, center=false);\n        \n        // Carved rings for sandstone stratification look\n        for(i=[1:3]) {\n            translate([0, 0, -0.1])\n            cylinder(h=8.2, d=stool_diameter - i*8, center=false);\n        }\n        \n        // Drainage/weight reduction holes\n        for(angle=[0:60:359]) {\n            rotate([0, 0, angle])\n            translate([stool_diameter/2 - 10, 0, 4])\n            cylinder(h=4.2, d=4, center=false);\n        }\n    }\n}\n\n// Central support column with fluted details\nmodule central_support() {\n    difference() {\n        // Main support column\n        cylinder(h=25, d=30, center=false);\n        \n        // Fluted grooves for classical look\n        for(i=[0:30:359]) {\n            rotate([0, 0, i])\n            translate([13, 0, -0.1])\n            cube([4, 2, 25.2], center=false);\n        }\n    }\n}\n\n// Base platform with stepped design\nmodule base_platform() {\n    union() {\n        // Bottom base\n        cylinder(h=6, d=stool_diameter, center=false);\n        \n        // Middle step\n        translate([0, 0, 6])\n        cylinder(h=4, d=stool_diameter - 10, center=false);\n        \n        // Top step\n        translate([0, 0, 10])\n        cylinder(h=2, d=stool_diameter - 20, center=false);\n    }\n}\n\n// Decorative corner brackets\nmodule corner_brackets() {\n    for(angle=[45:90:315]) {\n        rotate([0, 0, angle])\n        translate([stool_diameter/2 - 8, 0, 0])\n        union() {\n            // Bracket base\n            translate([-8, -2, 8])\n            cube([16, 4, 8], center=false);\n            \n            // Bracket support\n            translate([-4, -1, 0])\n            cube([8, 2, 8], center=false);\n        }\n    }\n}\n\n// Assembly the stool\ntranslate([0, 0, stool_height])\nrotate([180, 0, 0])\nseat_top();\n\ntranslate([0, 0, 20])\ncentral_support();\n\nbase_platform();\n\ntranslate([0, 0, 8])\ncorner_brackets();",
    "renders": true
  },
  {
    "decorative_art": "adobe",
    "openscad_code": "// Adobe Style Side Table\n// Realistic medium-complexity 3D printable furniture piece\n\n// Parameters\ntable_height = 60;\ntable_top_d = 120;\ntable_top_t = 4;\nleg_size = 8;\nshelf_clearance = 20;\nwall_thickness = 2;\n\n// Adobe texture module\nmodule adobe_texture(h, w, d) {\n    difference() {\n        cube([w, d, h]);\n        // Carve out small irregularities for adobe texture\n        for (i = [0:3:w-3]) {\n            for (j = [0:3:d-3]) {\n                translate([i, j, h - 1.5]) \n                    cylinder(h=2, d=2, $fn=8);\n            }\n        }\n    }\n}\n\n// Table top with rounded edges\nmodule table_top() {\n    difference() {\n        // Main top\n        minkowski() {\n            cube([table_top_d, table_top_d, table_top_t]);\n            cylinder(h=0.1, r=2, $fn=16);\n        }\n        \n        // Hollow out for 3D printing\n        translate([wall_thickness, wall_thickness, -0.1])\n            cube([table_top_d - 2*wall_thickness, table_top_d - 2*wall_thickness, table_top_t + 0.2]);\n    }\n    \n    // Decorative edge pattern\n    for (i = [10:20:table_top_d-10]) {\n        translate([i, 0, table_top_t/2])\n            cube([2, 2, table_top_t]);\n        translate([0, i, table_top_t/2])\n            cube([2, 2, table_top_t]);\n        translate([i, table_top_d-2, table_top_t/2])\n            cube([2, 2, table_top_t]);\n        translate([table_top_d-2, i, table_top_t/2])\n            cube([2, 2, table_top_t]);\n    }\n}\n\n// Adobe style leg\nmodule leg() {\n    // Main leg structure\n    adobe_texture(table_height - table_top_t, leg_size, leg_size);\n    \n    // Decorative bands\n    for (h = [10:15:table_height-15]) {\n        translate([-1, -1, h])\n            adobe_texture(3, leg_size + 2, leg_size + 2);\n    }\n}\n\n// Lower shelf\nmodule shelf() {\n    shelf_d = table_top_d - 20;\n    difference() {\n        cube([shelf_d, shelf_d, table_top_t]);\n        translate([wall_thickness, wall_thickness, -0.1])\n            cube([shelf_d - 2*wall_thickness, shelf_d - 2*wall_thickness, table_top_t + 0.2]);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0]) table_top();\n\n// Four legs at corners\nleg_offset = (table_top_d - leg_size) / 2;\ntranslate([leg_offset, leg_offset, table_top_t]) leg();\ntranslate([-leg_offset, leg_offset, table_top_t]) mirror([1,0,0]) leg();\ntranslate([leg_offset, -leg_offset, table_top_t]) mirror([0,1,0]) leg();\ntranslate([-leg_offset, -leg_offset, table_top_t]) mirror([1,1,0]) leg();\n\n// Lower shelf\ntranslate([10, 10, shelf_clearance]) shelf();",
    "renders": true
  },
  {
    "decorative_art": "stucco",
    "openscad_code": "// Stucco Art Panel - Wall-mounted Decorative Furniture Element\n// Overall size: 120mm x 80mm x 15mm\n\n$fn = 32;\n\n// Main panel dimensions\npanel_w = 120;\npanel_h = 80;\npanel_t = 15;\n\n// Wall thickness\nwall = 2;\n\n// Mounting hole parameters\nmount_d = 4;\nmount_h = 8;\n\nmodule stucco_panel() {\n    // Main rectangular backing panel\n    difference() {\n        // Outer shell\n        cube([panel_w, panel_h, panel_t], center=true);\n        \n        // Hollow out back for material saving\n        translate([0, 0, panel_t/2 - wall])\n            cube([panel_w - 2*wall, panel_h - 2*wall, wall], center=true);\n    }\n}\n\nmodule decorative_frame() {\n    // Outer decorative frame border\n    difference() {\n        // Frame outer shape\n        translate([0, 0, panel_t/2 - 0.5])\n            cube([panel_w, panel_h, 1], center=true);\n        \n        // Cutout inner area\n        translate([0, 0, panel_t/2 - 0.5])\n            cube([panel_w - 8, panel_h - 8, 2], center=true);\n    }\n}\n\nmodule floral_motif() {\n    // Central decorative element\n    translate([0, 0, panel_t/2 + 0.5]) {\n        // Central rosette\n        cylinder(h=2, r=10, center=true);\n        \n        // Petal details\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([7, 0, 0])\n                    scale([1, 0.6, 1])\n                        cylinder(h=2, r=4, center=true);\n        }\n        \n        // Inner detail circle\n        cylinder(h=2.5, r=6, center=true);\n    }\n}\n\nmodule corner_accent() {\n    // Small corner decorations\n    difference() {\n        // Corner scroll base\n        union() {\n            translate([4, 0, 0])\n                cylinder(h=2, r=2, center=true);\n            translate([0, 4, 0])\n                cylinder(h=2, r=2, center=true);\n            translate([2.8, 2.8, 0])\n                cylinder(h=2, r=1.5, center=true);\n        }\n        \n        // Cut decorative holes\n        for(i = [0:90:270]) {\n            rotate([0, 0, i])\n                translate([1, 1, -1])\n                    cylinder(h=4, r=0.5, center=true);\n        }\n    }\n}\n\nmodule corner_decorations() {\n    // Place corner decorations\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (panel_w/2 - 8), y * (panel_h/2 - 8), panel_t/2 + 0.5])\n                corner_accent();\n        }\n    }\n}\n\nmodule side_moldings() {\n    // Vertical side moldings\n    for(side = [-1, 1]) {\n        translate([side * (panel_w/2 - 4), 0, panel_t/2 - 1]) {\n            // Main molding body\n            cube([4, panel_h - 16, 3], center=true);\n            \n            // Decorative ridges\n            for(i = [-20:10:20]) {\n                translate([0, i, 1.5])\n                    cube([2, 2, 0.5], center=true);\n            }\n        }\n    }\n}\n\nmodule mounting_holes() {\n    // Keyhole mounting slots\n    for(x = [-1, 1]) {\n        translate([x * 40, 0, -panel_t/2 + 2]) {\n            // Main hole\n            cylinder(h=mount_h, r=mount_d/2, center=true);\n            \n            // Slot extension\n            translate([mount_d, 0, 0])\n                cube([mount_d*2, mount_d, mount_h], center=true);\n        }\n    }\n}\n\n// Assemble the stucco panel\nunion() {\n    // Main structure\n    stucco_panel();\n    \n    // Decorative elements\n    decorative_frame();\n    floral_motif();\n    corner_decorations();\n    side_moldings();\n    \n    // Functional elements\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "decorative_art": "plaster",
    "openscad_code": "// Plaster Decorative Wall Shelf Unit - Realistic Style\n// Medium complexity furniture piece with ornate details\n\n// Overall dimensions (mm)\nwidth = 120;\nheight = 80;\ndepth = 40;\nwall_thickness = 2;\n\n// Main back plate with rounded edges\nmodule back_plate() {\n    difference() {\n        // Main rectangular back\n        translate([-width/2, -height/2, 0])\n            cube([width, height, wall_thickness]);\n        \n        // Decorative arch pattern at top\n        for(i = [-40:20:40]) {\n            translate([i, height/2 - 10, -1])\n                cylinder(h=wall_thickness+2, r=8, $fn=32);\n        }\n        \n        // Bottom decorative cutouts\n        for(i = [-50:25:50]) {\n            translate([i, -height/2 + 8, -1])\n                cube([8, 8, wall_thickness+2]);\n        }\n    }\n}\n\n// Shelf support brackets\nmodule bracket(pos_x, pos_z) {\n    translate([pos_x, 0, pos_z]) {\n        union() {\n            // Main support triangle\n            linear_extrude(height=wall_thickness)\n                polygon(points=[[0,0], [8,0], [4,12]]);\n            \n            // Decorative scroll detail\n            translate([4, 6, wall_thickness/2])\n                rotate([0, 90, 0])\n                    cylinder(h=6, r1=3, r2=1, $fn=16);\n        }\n    }\n}\n\n// Shelf surface\nmodule shelf(pos_z) {\n    translate([0, 0, pos_z]) {\n        difference() {\n            // Main shelf\n            translate([-width/2 + 10, -depth + wall_thickness, 0])\n                cube([width - 20, depth - wall_thickness, wall_thickness]);\n            \n            // Front edge detail\n            translate([0, -depth + wall_thickness + 2, -1])\n                cube([width - 30, 4, wall_thickness + 2]);\n            \n            // Decorative holes for weight reduction\n            for(x = [-width/2 + 20:20:width/2 - 20]) {\n                for(y = [-depth + 10:10:-10]) {\n                    translate([x, y, -1])\n                        cylinder(h=wall_thickness + 2, r=2, $fn=16);\n                }\n            }\n        }\n    }\n}\n\n// Ornate frame detail around edges\nmodule frame_detail() {\n    // Top frame\n    translate([0, height/2 - 5, wall_thickness/2])\n        cube([width - 10, 10, wall_thickness], center=true);\n    \n    // Side frames\n    translate([-width/2 + 5, 0, wall_thickness/2])\n        cube([10, height - 10, wall_thickness], center=true);\n    translate([width/2 - 5, 0, wall_thickness/2])\n        cube([10, height - 10, wall_thickness], center=true);\n}\n\n// Small decorative elements\nmodule rosette(pos_x, pos_y) {\n    translate([pos_x, pos_y, wall_thickness]) {\n        union() {\n            cylinder(h=3, r=4, $fn=32);\n            for(i = [0:45:315]) {\n                rotate([0, 0, i])\n                    translate([0, 3, 1.5])\n                        cube([1, 3, 3], center=true);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    back_plate();\n    \n    // Frame details\n    frame_detail();\n    \n    // Shelves with supports\n    shelf(15);\n    bracket(-width/2 + 15, 15);\n    bracket(width/2 - 15, 15);\n    \n    shelf(35);\n    bracket(-width/2 + 15, 35);\n    bracket(width/2 - 15, 35);\n    \n    // Decorative elements\n    rosette(-width/2 + 15, height/2 - 15);\n    rosette(width/2 - 15, height/2 - 15);\n    rosette(-width/2 + 15, -height/2 + 15);\n    rosette(width/2 - 15, -height/2 + 15);\n    \n    // Center decorative medallion\n    translate([0, 0, wall_thickness])\n        cylinder(h=5, r=8, $fn=64);\n    translate([0, 0, wall_thickness + 2.5])\n        sphere(r=6, $fn=32);\n}",
    "renders": true
  },
  {
    "decorative_art": "gypsum",
    "openscad_code": "// Gypsum Decorative Wall Shelf - Realistic Style\n// Dimensions: 120mm x 80mm x 25mm\n\n$fn = 32;\n\n// Main shelf body\nmodule shelf_body() {\n    // Base plate with rounded edges\n    difference() {\n        minkowski() {\n            cube([116, 76, 3]);\n            cylinder(r=2, h=1);\n        }\n        translate([2, 2, 1.5])\n            cube([112, 72, 3]);\n    }\n}\n\n// Decorative top molding\nmodule top_molding() {\n    translate([0, 0, 22])\n    difference() {\n        union() {\n            // Main molding body\n            translate([10, 5, 0])\n                cube([96, 66, 3]);\n            \n            // Decorative curved top\n            for(i = [0:11]) {\n                translate([15 + i*8, 10, 3])\n                    cylinder(h=2, r1=4, r2=2);\n            }\n            for(i = [0:7]) {\n                translate([10, 10 + i*8, 3])\n                    cylinder(h=2, r1=4, r2=2);\n            }\n            for(i = [0:11]) {\n                translate([15 + i*8, 70, 3])\n                    cylinder(h=2, r1=4, r2=2);\n            }\n            for(i = [0:7]) {\n                translate([110, 10 + i*8, 3])\n                    cylinder(h=2, r1=4, r2=2);\n            }\n        }\n        \n        // Hollow center\n        translate([15, 15, -0.5])\n            cube([86, 46, 4]);\n    }\n}\n\n// Vertical supports\nmodule side_supports() {\n    // Left support\n    translate([5, 0, 3])\n    difference() {\n        cube([8, 80, 19]);\n        translate([2, 2, 2])\n            cube([4, 76, 15]);\n    }\n    \n    // Right support\n    translate([107, 0, 3])\n    difference() {\n        cube([8, 80, 19]);\n        translate([2, 2, 2])\n            cube([4, 76, 15]);\n    }\n}\n\n// Middle shelf\nmodule middle_shelf() {\n    translate([0, 0, 10])\n    difference() {\n        // Shelf with front lip\n        union() {\n            cube([120, 80, 2]);\n            translate([0, 0, 2])\n                cube([120, 3, 2]);\n        }\n        \n        // Cutouts for supports\n        translate([0, 0, -0.5])\n            cube([5, 80, 5]);\n        translate([115, 0, -0.5])\n            cube([5, 80, 5]);\n    }\n}\n\n// Back mounting plate\nmodule back_mount() {\n    translate([2, 77, 0])\n    difference() {\n        cube([116, 3, 22]);\n        \n        // Screw holes\n        for(x = [20:25:100]) {\n            translate([x, 1.5, 11])\n                cylinder(h=3, r=1.5);\n        }\n    }\n}\n\n// Decorative floral pattern\nmodule floral_detail() {\n    module petal(x, y, rot) {\n        translate([x, y, 20.5])\n        rotate([0, 0, rot])\n        scale([1, 0.6, 1])\n        cylinder(h=1, r1=3, r2=0);\n    }\n    \n    // Center flower\n    for(i = [0:45:315]) {\n        petal(60, 40, i);\n    }\n    translate([60, 40, 20.5])\n        sphere(r=1.5);\n    \n    // Corner flowers\n    for(corner = [[20, 20], [100, 20], [20, 60], [100, 60]]) {\n        for(i = [0:60:300]) {\n            petal(corner[0], corner[1], i);\n        }\n        translate([corner[0], corner[1], 20.5])\n            sphere(r=1);\n    }\n}\n\n// Assembly\nunion() {\n    shelf_body();\n    top_molding();\n    side_supports();\n    middle_shelf();\n    back_mount();\n    floral_detail();\n}",
    "renders": true
  },
  {
    "decorative_art": "cement",
    "openscad_code": "// Cement stool with typical construction-site details\n// Overall height 80 mm, seat Ø 200 mm – prints without supports\n\n$fn = 36;               // Smooth curves\nwall = 2;               // Standard 2 mm walls for FDM printing\n\nmodule bolt_head(h = 3, d = 6)          // Simple hex bolt\n    cylinder(h = h, d = d, $fn = 6);\n\nmodule nut(h = 2.5, d = 6)\n    cylinder(h = h, d = d*1.05, $fn = 6);\n\nmodule rebar_segment(l = 20, d = 3)     // Reinforcing bar piece\n    rotate([0, 90, 0])\n        cylinder(h = l, d = d, $fn = 8);\n\n// Main seat – solid concrete disc with slight top taper\nmodule seat()\ndifference() {\n    cylinder(h = 15, d = 200);\n    translate([0, 0, 13])\n        cylinder(h = 5, d = 196);       // Taper\n    translate([0, 0, -1])\n        cylinder(h = 17, d = 196 - 2*wall); // Hollow core\n}\n\n// Central support pipe – drainage tube look\nmodule pipe()\ndifference() {\n    cylinder(h = 65, d = 40);\n    translate([0, 0, -1])\n        cylinder(h = 67, d = 40 - 2*wall);\n    // Bolt holes for fixing\n    for(z = [15:20:45])\n        translate([0, 0, z])\n            rotate([90, 0, 0])\n                cylinder(h = 50, d = 5, center = true);\n}\n\n// Four L-shaped legs cast from concrete with rebar\nmodule leg()\ndifference() {\n    union() {\n        // Vertical\n        translate([-12, -12, 0])\n            cube([24, 24, 50]);\n        // Horizontal foot\n        translate([-20, -20, -4])\n            cube([40, 40, 8]);\n    }\n    // Hollow inside\n    translate([-10, -10, 2])\n        cube([20, 20, 46]);\n    translate([-18, -18, -2])\n        cube([36, 36, 4]);\n}\n\n// Assembly\nunion() {\n    // Legs at 45°\n    for(a = [0:90:270])\n        rotate([0, 0, a])\n            translate([0, 120, 0])\n                leg();\n\n    // Central pipe\n    translate([0, 0, 15])\n        pipe();\n\n    // Seat on top\n    translate([0, 0, 65])\n        seat();\n\n    // Rebar visible through holes\n    for(a = [0:90:270])\n        rotate([0, 0, a])\n            translate([0, 120 + 20*cos(45), 25])\n                rebar_segment(l = 40);\n\n    // Decorative bolt heads around seat rim\n    for(a = [0:30:330])\n        rotate([0, 0, a])\n            translate([95, 0, 70])\n                bolt_head();\n}",
    "renders": true
  },
  {
    "decorative_art": "rebar",
    "openscad_code": "// Rebar Stool - Realistic Medium Complexity\n// Overall size: 80mm diameter, 100mm height\n\n// Parameters\nseat_d = 80;\nseat_h = 5;\nleg_d = 6;\nleg_h = 95;\nrebar_r = 2.8;\nsupport_r = 1.5;\nfoot_h = 3;\n\nmodule rebar_segment(length, radius) {\n    cylinder(h=length, r=radius, $fn=12);\n}\n\nmodule rebar_bend(outer_r, angle, radius) {\n    rotate([0, 0, 0])\n        rotate_extrude(angle=angle, $fn=32)\n            translate([outer_r, 0, 0])\n                circle(r=radius, $fn=12);\n}\n\n// Seat frame - rebar rings\nmodule seat_frame() {\n    difference() {\n        // Outer ring\n        translate([0, 0, seat_h])\n            rebar_bend(seat_d/2 - rebar_r, 360, rebar_r);\n        \n        // Inner ring cutout\n        translate([0, 0, seat_h - 0.1])\n            rebar_bend(seat_d/2 - rebar_r - 2*rebar_r, 360, rebar_r);\n    }\n}\n\n// Leg structure\nmodule leg(rotation_angle) {\n    rotate([0, 0, rotation_angle]) {\n        // Main leg\n        translate([0, seat_d/2 - leg_d, leg_h/2])\n            rebar_segment(leg_h, rebar_r);\n        \n        // Bottom support ring\n        translate([0, 0, leg_h - foot_h])\n            rebar_bend(seat_d/2 - rebar_r, 360, rebar_r);\n        \n        // Foot plate\n        translate([0, 0, leg_h - foot_h/2])\n            cylinder(h=foot_h, r=seat_d/2 - 2*rebar_r, $fn=24);\n    }\n}\n\n// Cross supports between legs\nmodule cross_support(height) {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([0, seat_d/2 - rebar_r - support_r, height])\n                rotate([90, 0, 0])\n                    rebar_segment(seat_d - 4*rebar_r, support_r);\n        }\n    }\n}\n\n// Rebar texture pattern on seat\nmodule seat_texture() {\n    difference() {\n        // Base seat disc\n        translate([0, 0, seat_h/2])\n            cylinder(h=seat_h, r=seat_d/2 - rebar_r, $fn=64);\n        \n        // Rebar pattern cuts\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([seat_d/4, 0, seat_h/2])\n                    cube([seat_d/2, rebar_r*2, seat_h + 0.2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat components\n    seat_frame();\n    seat_texture();\n    \n    // Leg assemblies\n    for(i = [0:3]) {\n        leg(i * 90);\n    }\n    \n    // Cross supports\n    cross_support(leg_h * 0.3);\n    cross_support(leg_h * 0.6);\n}",
    "renders": true
  },
  {
    "decorative_art": "scaffold",
    "openscad_code": "// Scaffold Bookshelf - Realistic Style, Medium Complexity\n// Overall dimensions: 120mm (W) x 35mm (D) x 150mm (H)\n\n// Parameters\nwall_thickness = 2;\nshelf_thickness = 3;\npost_size = 4;\nshelf_width = 120;\nshelf_depth = 35;\nshelf_spacing = 35;\nnum_shelves = 4;\ntotal_height = 150;\n\n// Main module\nmodule scaffold_bookshelf() {\n    // Base and top frames\n    translate([0, 0, 0]) frame_assembly();\n    \n    // Vertical posts\n    for(x = [0, shelf_width - post_size]) {\n        for(y = [0, shelf_depth - post_size]) {\n            translate([x, y, 0]) vertical_post();\n        }\n    }\n    \n    // Shelves\n    for(i = [0:num_shelves-1]) {\n        z_pos = 10 + i * shelf_spacing;\n        translate([0, 0, z_pos]) shelf();\n    }\n    \n    // Diagonal braces\n    diagonal_braces();\n    \n    // Support brackets\n    support_brackets();\n}\n\n// Frame assembly at top and bottom\nmodule frame_assembly() {\n    // Bottom frame\n    translate([-wall_thickness, -wall_thickness, 0]) \n        cube([shelf_width + 2*wall_thickness, shelf_depth + 2*wall_thickness, wall_thickness]);\n    \n    // Top frame\n    translate([-wall_thickness, -wall_thickness, total_height - wall_thickness]) \n        cube([shelf_width + 2*wall_thickness, shelf_depth + 2*wall_thickness, wall_thickness]);\n}\n\n// Vertical post with realistic profile\nmodule vertical_post() {\n    post_height = total_height;\n    \n    // Main post body\n    difference() {\n        cube([post_size, post_size, post_height]);\n        \n        // Chamfer edges\n        translate([post_size-1, -0.1, 0]) \n            rotate([0, 0, 45]) cube([2, 2, post_height]);\n        translate([-0.1, post_size-1, 0]) \n            rotate([0, 0, 45]) cube([2, 2, post_height]);\n    }\n    \n    // Connection holes\n    for(z = [15:shelf_spacing:total_height-15]) {\n        translate([post_size/2, post_size/2, z]) \n            rotate([90, 0, 0]) cylinder(h=post_size, r=1, $fn=8);\n    }\n}\n\n// Individual shelf with realistic features\nmodule shelf() {\n    // Main shelf\n    difference() {\n        cube([shelf_width, shelf_depth, shelf_thickness]);\n        \n        // Weight reduction holes\n        for(x = [20:30:shelf_width-20]) {\n            for(y = [10:15:shelf_depth-20]) {\n                translate([x, y, -1]) \n                    cube([12, 8, shelf_thickness+2]);\n            }\n        }\n    }\n    \n    // Front edge reinforcement\n    translate([-wall_thickness, -wall_thickness, shelf_thickness]) \n        cube([shelf_width + 2*wall_thickness, wall_thickness, 5]);\n}\n\n// Diagonal braces for structural integrity\nmodule diagonal_braces() {\n    brace_width = 2;\n    \n    // Front diagonal\n    translate([post_size, -0.1, 10]) \n        rotate([0, 90, atan((shelf_depth)/(total_height-20))]) \n            cube([sqrt(shelf_depth*shelf_depth + (total_height-20)*(total_height-20)), brace_width, brace_width]);\n    \n    // Back diagonal\n    translate([shelf_width - post_size - brace_width, shelf_depth - brace_width, 10]) \n        rotate([0, 90, atan((shelf_depth)/(total_height-20))]) \n            cube([sqrt(shelf_depth*shelf_depth + (total_height-20)*(total_height-20)), brace_width, brace_width]);\n}\n\n// Support brackets under shelves\nmodule support_brackets() {\n    bracket_size = 8;\n    bracket_thickness = 2;\n    \n    for(i = [0:num_shelves-1]) {\n        z_pos = 10 + i * shelf_spacing;\n        \n        // Left brackets\n        for(x = [post_size, shelf_width/2, shelf_width - post_size - bracket_size]) {\n            translate([x, 0, z_pos - bracket_thickness]) \n                difference() {\n                    cube([bracket_size, shelf_depth/2, bracket_thickness]);\n                    translate([bracket_size-2, 0, -1]) \n                        cube([2, 2, bracket_thickness+2]);\n                }\n        }\n    }\n}\n\n// Generate the model\nscaffold_bookshelf();",
    "renders": true
  },
  {
    "decorative_art": "framework",
    "openscad_code": "// Framework Bookshelf - Realistic Style, Medium Complexity\n// Dimensions: 120mm wide x 30mm deep x 150mm tall\n// Wall thickness: 2mm throughout for printability\n\nmodule shelf(width, depth, thickness) {\n    // Main shelf panel with rounded front edge\n    difference() {\n        cube([width, depth, thickness]);\n        translate([-1, depth - thickness, -1])\n            cube([width + 2, thickness + 2, thickness + 2]);\n    }\n    // Front rounded edge\n    translate([0, depth - thickness, 0])\n        cylinder(h = thickness, r = thickness/2, $fn = 20);\n}\n\nmodule frame_support(height, depth, thickness) {\n    // Vertical frame member with decorative groove\n    difference() {\n        cube([thickness, depth, height]);\n        // Decorative center groove\n        translate([thickness/2 - 0.5, depth/4, 10])\n            cube([1, depth/2, height - 20]);\n    }\n    \n    // Base foot detail\n    translate([-2, -2, -2])\n        cube([thickness + 4, depth + 4, 2]);\n    \n    // Top cap detail\n    translate([-2, -2, height])\n        cube([thickness + 4, depth + 4, 2]);\n}\n\nmodule back_panel(width, height) {\n    // Decorative back panel with cutout pattern\n    difference() {\n        cube([width, 2, height]);\n        // Geometric cutout pattern\n        for (x = [10:20:width-10]) {\n            for (y = [10:20:height-10]) {\n                translate([x, -0.5, y])\n                    cube([8, 3, 8]);\n            }\n        }\n    }\n}\n\nmodule side_panel(height, depth) {\n    // Side panel with decorative frame\n    difference() {\n        cube([2, depth, height]);\n        // Inner cutout\n        translate([2, 5, 5])\n            cube([2, depth - 10, height - 10]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Left frame\n    translate([0, 0, 0])\n        frame_support(150, 30, 4);\n    \n    // Right frame\n    translate([120-4, 0, 0])\n        frame_support(150, 30, 4);\n    \n    // Back panel\n    translate([0, 0, 0])\n        back_panel(120, 150);\n    \n    // Left side panel\n    translate([0, 0, 0])\n        side_panel(150, 30);\n    \n    // Right side panel\n    translate([120-2, 0, 0])\n        side_panel(150, 30);\n    \n    // Shelves\n    for (z = [30:30:120]) {\n        translate([4, 0, z])\n            shelf(120-8, 30, 2);\n    }\n    \n    // Central support bar (decorative)\n    translate([58, 15, 0])\n        cube([4, 4, 150]);\n    \n    // Shelf support brackets\n    for (z = [30:30:120]) {\n        for (x = [10, 110-4]) {\n            translate([x, 0, z - 2])\n                cube([4, 4, 2]);\n            translate([x, 30-4, z - 2])\n                cube([4, 4, 2]);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "structure",
    "openscad_code": "// Decorative bookshelf unit (realistic style, medium complexity)\n// Overall size: 120mm x 40mm x 150mm\n// Wall thickness: 2mm for 3D printing\n\nmodule shelf_unit() {\n    // Main frame assembly\n    union() {\n        // Left side panel\n        translate([0, 0, 0])\n            cube([2, 40, 150]);\n\n        // Right side panel\n        translate([118, 0, 0])\n            cube([2, 40, 150]);\n\n        // Top panel\n        translate([0, 0, 148])\n            cube([120, 40, 2]);\n\n        // Bottom panel\n        translate([0, 0, 0])\n            cube([120, 40, 2]);\n\n        // Back panel\n        translate([0, 38, 0])\n            cube([120, 2, 150]);\n\n        // Shelves (3 evenly spaced)\n        for(i = [1:3]) {\n            translate([2, 0, i * 36])\n                cube([116, 40, 2]);\n        }\n\n        // Decorative vertical slats on sides\n        for(i = [0:5]) {\n            // Left side decorative slats\n            translate([5, 5, 10 + i * 25])\n                cube([2, 30, 15]);\n\n            // Right side decorative slats\n            translate([113, 5, 10 + i * 25])\n                cube([2, 30, 15]);\n        }\n\n        // Decorative molding on top front\n        for(i = [0:11]) {\n            translate([5 + i * 10, 0, 142])\n                cube([8, 2, 6]);\n        }\n\n        // Support brackets under each shelf\n        for(i = [1:3]) {\n            // Left brackets\n            translate([10, 2, i * 36 - 3])\n                cube([8, 2, 3]);\n            \n            // Right brackets\n            translate([102, 2, i * 36 - 3])\n                cube([8, 2, 3]);\n        }\n\n        // Ornamental feet (4 corners)\n        // Front left foot\n        translate([2, 2, -5])\n            cylinder(h=5, r=3);\n        \n        // Front right foot\n        translate([118, 2, -5])\n            cylinder(h=5, r=3);\n        \n        // Back left foot\n        translate([2, 38, -5])\n            cylinder(h=5, r=3);\n        \n        // Back right foot\n        translate([118, 38, -5])\n            cylinder(h=5, r=3);\n\n        // Center decorative panel with cutout pattern\n        translate([60, 39, 75])\n            difference() {\n                cube([40, 1, 80]);\n                \n                // Cutout circles for decoration\n                for(x = [-15:10:15]) {\n                    for(y = [-30:15:30]) {\n                        translate([x, 0, y])\n                            cylinder(h=2, r=4);\n                    }\n                }\n            }\n    }\n}\n\n// Render the complete bookshelf\nshelf_unit();",
    "renders": true
  },
  {
    "decorative_art": "edifice",
    "openscad_code": "// Realistic style medium-complexity miniature edifice furniture piece\n// A 1:100 scale classical columnar bookshelf / display pedestal with fluted columns\n\n$fn = 36;  // Smooth curves for printing\n\n// Overall dimensions (mm) – fits on 100 mm bed\noverall_h = 95;\nbase_w = 60;\nbase_d = 40;\n\nmodule edifice_pedestal() {\n    // Base plinth – slight taper\n    translate([0,0,0])\n        difference() {\n            cube([base_w, base_d, 8], center=true);\n            translate([0,0,-1])\n                cube([base_w-4, base_d-4, 10], center=true);\n        }\n\n    // Lower drum\n    translate([0,0,8])\n        difference() {\n            cylinder(h=12, d1=base_w-2, d2=base_w-4);\n            translate([0,0,-1])\n                cylinder(h=14, d1=base_w-6, d2=base_w-8);\n        }\n\n    // Fluted columns – four around the perimeter\n    for (i=[0:3]) {\n        rotate([0,0,i*90])\n            translate([base_w/2-8, 0, 20])\n                column();\n    }\n\n    // Entablature with cornice\n    translate([0,0,overall_h-18])\n        entablature();\n\n    // Shelf inside\n    translate([0,0,50])\n        shelf();\n}\n\nmodule column() {\n    // Column shaft\n    difference() {\n        cylinder(h=55, d=8);\n        // Fluting\n        for (i=[0:7]) {\n            rotate([0,0,i*45])\n                translate([0,4,0])\n                    cube([1.5, 8.5, 55], center=true);\n        }\n    }\n\n    // Capital\n    translate([0,0,55])\n        difference() {\n            cylinder(h=5, d1=10, d2=12);\n            translate([0,0,-1])\n                cylinder(h=7, d1=6, d2=8);\n        }\n\n    // Base torus\n    translate([0,0,0])\n        difference() {\n            cylinder(h=4, d1=10, d2=8);\n            translate([0,0,-1])\n                cylinder(h=6, d1=8, d2=6);\n        }\n}\n\nmodule entablature() {\n    // Architrave\n    translate([0,0,0])\n        difference() {\n            cube([base_w-4, base_d-4, 6], center=true);\n            translate([0,0,-1])\n                cube([base_w-8, base_d-8, 8], center=true);\n        }\n\n    // Frieze with triglyphs\n    translate([0,0,6])\n        difference() {\n            cube([base_w-6, base_d-6, 6], center=true);\n            // Triglyphs – simplified grooves\n            for (x=[-1:1]) {\n                translate([x*12, 0, 0])\n                    cube([2, base_d-4, 8], center=true);\n            }\n            for (y=[-1:1]) {\n                translate([0, y*12, 0])\n                    cube([base_w-4, 2, 8], center=true);\n            }\n        }\n\n    // Cornice projection\n    translate([0,0,12])\n        difference() {\n            cube([base_w-2, base_d-2, 6], center=true);\n            translate([0,0,-1])\n                cube([base_w-6, base_d-6, 8], center=true);\n        }\n}\n\nmodule shelf() {\n    // Central shelf plate\n    difference() {\n        cube([base_w-16, base_d-16, 3], center=true);\n        translate([0,0,-1])\n            cube([base_w-20, base_d-20, 5], center=true);\n    }\n}\n\n// Render the model\nedifice_pedestal();",
    "renders": true
  },
  {
    "decorative_art": "skyscraper",
    "openscad_code": "// Skyscraper Bookcase - Realistic Style\n// Overall dimensions: 60mm W x 50mm D x 120mm H\n\nmodule shelf_support(x, z) {\n    translate([x, 0, z]) {\n        difference() {\n            cube([4, 3, 8]);\n            translate([1, -0.1, 1]) cube([2, 3.2, 6]);\n        }\n    }\n}\n\nmodule window_pattern(x, y, z) {\n    translate([x, y, z]) {\n        for (i = [0:2]) {\n            translate([i*4, 0, 0]) cube([2.5, 0.5, 3.5]);\n            translate([i*4, 0, 4.5]) cube([2.5, 0.5, 3.5]);\n        }\n    }\n}\n\nmodule floor_section(floor_num) {\n    floor_height = 15;\n    z_pos = floor_num * floor_height + 2;\n    \n    difference() {\n        // Main floor slab\n        translate([0, 0, z_pos]) {\n            cube([60, 50, 2]);\n        }\n        \n        // Shelf cavity\n        translate([2, 2, z_pos + 2]) {\n            cube([56, 46, 11]);\n        }\n    }\n    \n    // Window details on front\n    window_pattern(8, 49, z_pos + 4);\n    window_pattern(8, 49, z_pos + 9);\n    \n    // Window details on back\n    window_pattern(8, 1, z_pos + 4);\n    window_pattern(8, 1, z_pos + 9);\n    \n    // Support brackets\n    shelf_support(5, z_pos + 2);\n    shelf_support(51, z_pos + 2);\n}\n\nmodule structural_frame() {\n    // Corner pillars\n    pillar_size = 4;\n    \n    // Front pillars\n    translate([0, 0, 0]) cube([pillar_size, pillar_size, 120]);\n    translate([60-pillar_size, 0, 0]) cube([pillar_size, pillar_size, 120]);\n    \n    // Back pillars\n    translate([0, 50-pillar_size, 0]) cube([pillar_size, pillar_size, 120]);\n    translate([60-pillar_size, 50-pillar_size, 0]) cube([pillar_size, pillar_size, 120]);\n    \n    // Mid supports\n    translate([30-pillar_size/2, 0, 0]) cube([pillar_size, pillar_size, 120]);\n    translate([30-pillar_size/2, 50-pillar_size, 0]) cube([pillar_size, pillar_size, 120]);\n}\n\nmodule base_detail() {\n    // Base platform\n    translate([-2, -2, -2]) cube([64, 54, 4]);\n    \n    // Decorative base trim\n    translate([0, 0, 0]) {\n        difference() {\n            cube([60, 50, 2]);\n            translate([2, 2, -0.1]) cube([56, 46, 2.2]);\n        }\n    }\n}\n\nmodule roof_detail() {\n    // Top cap\n    translate([0, 0, 120]) {\n        cube([60, 50, 3]);\n    }\n    \n    // Decorative antenna\n    translate([30, 25, 123]) {\n        cylinder(h=8, r1=1.5, r2=0.5);\n    }\n    \n    // Roof edge detail\n    translate([-1, -1, 120]) {\n        cube([62, 52, 1]);\n    }\n}\n\n// Main assembly\nunion() {\n    // Structural elements\n    structural_frame();\n    \n    // Base details\n    base_detail();\n    \n    // Floor sections\n    for (i = [0:7]) {\n        floor_section(i);\n    }\n    \n    // Roof details\n    roof_detail();\n}",
    "renders": true
  },
  {
    "decorative_art": "tower",
    "openscad_code": "// Tower Bookcase - Realistic Style, Medium Complexity\n// A 5-shelf tower with decorative crown molding and base trim\n// All dimensions in mm, suitable for 3D printing\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Overall dimensions\ntower_width = 80;\ntower_depth = 60;\ntower_height = 140;\nwall_thickness = 2;\n\n// Shelf parameters\nshelf_count = 5;\nshelf_thickness = 3;\nshelf_spacing = (tower_height - 20) / shelf_count;\n\n// Base trim dimensions\nbase_height = 10;\nbase_inset = 5;\n\n// Crown molding dimensions\ncrown_height = 8;\ncrown_outset = 3;\n\nmodule tower_frame() {\n    // Main cabinet body (hollow)\n    difference() {\n        // Outer shell\n        cube([tower_width, tower_depth, tower_height]);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([tower_width - 2*wall_thickness, \n                  tower_depth - 2*wall_thickness, \n                  tower_height - wall_thickness]);\n    }\n}\n\nmodule decorative_base() {\n    // Decorative base trim with curved profile\n    difference() {\n        // Main base block\n        translate([-base_outset, -base_outset, 0])\n            cube([tower_width + 2*base_outset, \n                  tower_depth + 2*base_outset, \n                  base_height]);\n        \n        // Inner cutout for stepped profile\n        translate([base_inset, base_inset, -0.1])\n            cube([tower_width - 2*base_inset, \n                  tower_depth - 2*base_inset, \n                  base_height + 0.2]);\n    }\n    \n    // Add decorative feet at corners\n    for(x = [0, tower_width]) {\n        for(y = [0, tower_depth]) {\n            translate([x - 2, y - 2, -2])\n                cylinder(h=4, r1=4, r2=2);\n        }\n    }\n}\n\nmodule crown_molding() {\n    // Crown molding with traditional profile\n    difference() {\n        // Main crown block\n        translate([-crown_outset, -crown_outset, tower_height - crown_height])\n            cube([tower_width + 2*crown_outset, \n                  tower_depth + 2*crown_outset, \n                  crown_height]);\n        \n        // Inner cutout\n        translate([0, 0, tower_height - crown_height - 0.1])\n            cube([tower_width, tower_depth, crown_height + 0.2]);\n    }\n    \n    // Decorative top edge detail\n    translate([0, 0, tower_height + crown_height - 1])\n        cube([tower_width, tower_depth, 1]);\n}\n\nmodule shelves() {\n    // Generate all shelves\n    for(i = [0:shelf_count-1]) {\n        shelf_z = base_height + (i * shelf_spacing);\n        \n        // Main shelf\n        translate([0, 0, shelf_z])\n            cube([tower_width, tower_depth, shelf_thickness]);\n        \n        // Front edge trim for realistic detail\n        translate([0, tower_depth - wall_thickness, shelf_z])\n            cube([tower_width, wall_thickness, shelf_thickness + 1]);\n    }\n}\n\nmodule back_panel() {\n    // Solid back panel with screw holes for wall mounting\n    translate([wall_thickness/2, wall_thickness/2, base_height])\n        cube([wall_thickness, tower_depth - wall_thickness, \n              tower_height - base_height - crown_height]);\n    \n    // Keyhole mounting slots\n    for(slot_y = [tower_depth/4, 3*tower_depth/4]) {\n        translate([wall_thickness/2, slot_y, tower_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=wall_thickness + 1, r=2);\n    }\n}\n\n// Assemble the complete tower\nunion() {\n    // Main structure\n    tower_frame();\n    \n    // Decorative elements\n    decorative_base();\n    crown_molding();\n    \n    // Functional elements\n    shelves();\n    back_panel();\n    \n    // Side panel details (realistic paneling effect)\n    translate([0, wall_thickness/2, base_height + 5])\n        cube([wall_thickness, tower_depth - wall_thickness, \n              tower_height - base_height - crown_height - 10]);\n    \n    translate([tower_width - wall_thickness, wall_thickness/2, base_height + 5])\n        cube([wall_thickness, tower_depth - wall_thickness, \n              tower_height - base_height - crown_height - 10]);\n}",
    "renders": true
  },
  {
    "decorative_art": "spire",
    "openscad_code": "// Spire Decorative Furniture Piece\n// A 3D printable spire-shaped decorative object with structural details\n\n// Parameters\nbase_width = 40;\nbase_depth = 40;\nbase_height = 8;\npillar_height = 80;\nspire_height = 60;\nwall_thickness = 2;\n\n// Base platform with chamfered edges\nmodule base_platform() {\n    difference() {\n        // Main base\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Chamfer bottom edges\n        translate([0, 0, -base_height/2 + 1])\n        cube([base_width - 4, base_depth - 4, base_height], center=true);\n        \n        // Hollow center\n        translate([0, 0, -base_height/2 + wall_thickness])\n        cube([base_width - wall_thickness*2, base_depth - wall_thickness*2, base_height], center=true);\n    }\n}\n\n// Decorative pillar with fluted columns\nmodule decorative_pillar() {\n    // Main pillar body\n    cylinder(h=pillar_height, r1=12, r2=10, center=false);\n    \n    // Fluted details using 8 columns\n    for(i=[0:7]) {\n        rotate([0, 0, i * 45])\n        translate([11, 0, 0])\n        cylinder(h=pillar_height, r=1.5, center=false);\n    }\n    \n    // Top ring detail\n    translate([0, 0, pillar_height])\n    cylinder(h=4, r1=11, r2=11, center=false);\n}\n\n// Spire with decorative tiers\nmodule spire_top() {\n    // Bottom cone\n    translate([0, 0, pillar_height + 4])\n    cylinder(h=spire_height/3, r1=10, r2=5, center=false);\n    \n    // Middle tier\n    translate([0, 0, pillar_height + 4 + spire_height/3])\n    cylinder(h=spire_height/3, r1=5, r2=3, center=false);\n    \n    // Top spike\n    translate([0, 0, pillar_height + 4 + 2*spire_height/3])\n    cylinder(h=spire_height/3, r1=3, r2=0.5, center=false);\n    \n    // Decorative rings between tiers\n    translate([0, 0, pillar_height + 4 + spire_height/3 - 1])\n    cylinder(h=2, r=6, center=false);\n    \n    translate([0, 0, pillar_height + 4 + 2*spire_height/3 - 1])\n    cylinder(h=1.5, r=4, center=false);\n}\n\n// Support brackets\nmodule support_brackets() {\n    for(i=[0:3]) {\n        rotate([0, 0, i * 90])\n        translate([base_width/2 - 5, 0, 0])\n        cube([10, 6, 15], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base_platform();\n    \n    // Support structure\n    translate([0, 0, base_height/2])\n    support_brackets();\n    \n    // Main pillar\n    translate([0, 0, base_height])\n    decorative_pillar();\n    \n    // Spire top\n    spire_top();\n}\n\n// Decorative inlays on base\nfor(i=[0:7]) {\n    rotate([0, 0, i * 45])\n    translate([base_width/2 - 6, 0, base_height/2])\n    cube([12, 2, 1], center=true);\n}",
    "renders": true
  },
  {
    "decorative_art": "dome",
    "openscad_code": "// Dome-shaped decorative display shelf\n// Overall dimensions: 120mm diameter x 80mm height\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main dome parameters\ndome_radius = 60;\ndome_height = 60;\n\n// Base parameters\nbase_radius = 62;\nbase_height = 8;\n\n// Shelf parameters\nshelf_radius = 40;\nshelf_thickness = 4;\n\n// Leg parameters\nleg_height = 12;\nleg_width = 8;\nleg_count = 4;\n\n// Decorative finial\nfinial_height = 15;\nfinial_radius = 6;\n\n// Module for decorative ring\nmodule decorative_ring(height, radius, count) {\n    for (i = [0:count-1]) {\n        rotate([0, 0, i * 360/count])\n        translate([radius, 0, height/2])\n        cylinder(h=height, r=wall_thickness, center=true);\n    }\n}\n\n// Create hollow dome with opening\nmodule dome_shell() {\n    difference() {\n        // Outer dome\n        scale([1, 1, dome_height/dome_radius])\n        sphere(r=dome_radius);\n        \n        // Inner hollow space\n        translate([0, 0, wall_thickness])\n        scale([1, 1, (dome_height-wall_thickness)/(dome_radius-wall_thickness)])\n        sphere(r=dome_radius-wall_thickness);\n        \n        // Front opening\n        translate([0, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=dome_radius*2, r=dome_radius*0.7, center=true);\n    }\n}\n\n// Create circular shelf inside dome\nmodule shelf() {\n    difference() {\n        cylinder(h=shelf_thickness, r=shelf_radius);\n        translate([0, 0, -1])\n        cylinder(h=shelf_thickness+2, r=shelf_radius-wall_thickness);\n    }\n}\n\n// Create decorative base\nmodule ornate_base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=base_height, r=base_radius);\n        \n        // Recessed bottom\n        translate([0, 0, -1])\n        cylinder(h=base_height/2, r=base_radius-wall_thickness);\n    }\n    \n    // Decorative bottom ring\n    translate([0, 0, base_height/2])\n    decorative_ring(wall_thickness*1.5, base_radius-wall_thickness*2, 24);\n}\n\n// Create legs\nmodule legs() {\n    for (i = [0:leg_count-1]) {\n        rotate([0, 0, i * 360/leg_count + 45])\n        translate([base_radius-leg_width/2-wall_thickness, 0, leg_height/2])\n        cube([leg_width, leg_width, leg_height], center=true);\n    }\n}\n\n// Create finial on top\nmodule finial() {\n    // Main sphere\n    translate([0, 0, dome_height+finial_height/2])\n    sphere(r=finial_radius);\n    \n    // Decorative ring\n    translate([0, 0, dome_height+finial_height/4])\n    decorative_ring(wall_thickness, finial_radius+wall_thickness, 8);\n}\n\n// Assembly\nunion() {\n    // Base structure\n    union() {\n        ornate_base();\n        legs();\n    }\n    \n    // Main dome body\n    translate([0, 0, base_height])\n    dome_shell();\n    \n    // Internal shelf\n    translate([0, 0, base_height + dome_height/3])\n    shelf();\n    \n    // Top decoration\n    finial();\n    \n    // Decorative ridges on dome\n    for (i = [1:3]) {\n        translate([0, 0, base_height + dome_height/4 * i])\n        decorative_ring(wall_thickness, dome_radius-wall_thickness*2, 32);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "vault",
    "openscad_code": "// Realistic 3D-printable vault furniture piece\n// Medium complexity (~100 lines), 80 mm tall\n\n// Main parameters\nvault_w = 60;\nvault_d = 50;\nvault_h = 80;\nwall_t = 2.5;\n\nmodule vault_body() {\n    difference() {\n        // Outer shell\n        cube([vault_w, vault_d, vault_h], center=true);\n        // Hollow interior\n        translate([0, 0, wall_t/2])\n            cube([vault_w-2*wall_t, vault_d-2*wall_t, vault_h-wall_t], center=true);\n    }\n}\n\nmodule rounded_top() {\n    // Cylindrical cap for rounded vault top\n    translate([0, 0, vault_h/2])\n        cylinder(h=wall_t, r=vault_w/2, center=true);\n    // Tapered shoulders\n    for (i=[0:2:20]) {\n        translate([0, 0, vault_h/2 - i])\n            cylinder(h=2, r=vault_w/2 - i*0.8, center=true);\n    }\n}\n\nmodule door() {\n    // Door panel\n    difference() {\n        translate([0, vault_d/2 - wall_t/2, 0])\n            cube([vault_w-4*wall_t, wall_t, vault_h-15], center=true);\n        // Door handle recess\n        translate([vault_w/4, vault_d/2 - wall_t, 0])\n            cube([8, wall_t+1, 4], center=true);\n    }\n    // Handle\n    translate([vault_w/4, vault_d/2 + 1, 0])\n        rotate([90, 0, 0])\n            cylinder(h=6, r=2, center=true);\n}\n\nmodule hinges() {\n    // Door hinges\n    for (z=[-vault_h/3, vault_h/3]) {\n        translate([vault_w/2 - wall_t, vault_d/2 - wall_t, z])\n            rotate([90, 0, 0])\n                cylinder(h=wall_t*2, r=wall_t, center=true);\n    }\n}\n\nmodule base_frame() {\n    // Decorative base frame\n    difference() {\n        translate([0, 0, -vault_h/2 - wall_t])\n            cube([vault_w+6, vault_d+6, wall_t*2], center=true);\n        translate([0, 0, -vault_h/2 - wall_t - 1])\n            cube([vault_w, vault_d, wall_t*4], center=true);\n    }\n}\n\nmodule locking_bolts() {\n    // Four decorative locking bolts\n    for (x=[-vault_w/3, vault_w/3])\n        for (z=[-vault_h/4, vault_h/4]) {\n            translate([x, vault_d/2 - wall_t/2, z])\n                rotate([90, 0, 0])\n                    cylinder(h=wall_t+2, r=wall_t/2, center=true);\n        }\n}\n\n// Assemble the vault\nunion() {\n    vault_body();\n    rounded_top();\n    door();\n    hinges();\n    base_frame();\n    locking_bolts();\n}",
    "renders": true
  },
  {
    "decorative_art": "roofline",
    "openscad_code": "// Roofline furniture - decorative gable shelf unit\n// Overall dimensions: 100mm wide x 80mm deep x 120mm tall\n$fn = 32;\n\n// Wall thickness\nwall = 2;\n\n// Main gable structure\nmodule gable_shelf() {\n    // Base shelf platform\n    difference() {\n        // Main gable shape\n        union() {\n            // Base box\n            translate([0, 0, 5])\n                cube([100, 80, wall], center=true);\n            \n            // Back panel with gable top\n            translate([0, -39, 60])\n                cube([100, wall, 110], center=true);\n            \n            // Gable roof shape\n            for(side = [-1, 1]) {\n                translate([side * 50, -39, 115])\n                    rotate([0, 90, 0])\n                        cylinder(h=50, r1=0, r2=15);\n            }\n            \n            // Front gable peak\n            translate([0, 0, 115])\n                rotate([90, 0, 0])\n                    cylinder(h=100, r1=15, r2=0);\n        }\n        \n        // Cutouts for shelves and access\n        // Shelf openings\n        translate([0, -37, 30])\n            cube([96, wall+2, 50], center=true);\n        translate([0, -37, 70])\n            cube([96, wall+2, 30], center=true);\n        \n        // Top decorative window\n        translate([0, -37, 100])\n            cube([60, wall+2, 20], center=true);\n    }\n    \n    // Actual shelves\n    // Bottom shelf\n    translate([0, -20, 15])\n        cube([94, 38, wall], center=true);\n    \n    // Middle shelf\n    translate([0, -20, 55])\n        cube([94, 38, wall], center=true);\n    \n    // Top shelf\n    translate([0, -20, 85])\n        cube([80, 38, wall], center=true);\n}\n\n// Decorative braces\nmodule braces() {\n    // Side braces\n    for(side = [-1, 1]) {\n        // Lower brace\n        translate([side * 40, -35, 25])\n            rotate([45, 0, 0])\n                cube([wall, wall, 25]);\n        \n        // Upper brace\n        translate([side * 35, -35, 65])\n            rotate([45, 0, 0])\n                cube([wall, wall, 20]);\n    }\n}\n\n// Roof shingles texture\nmodule shingles() {\n    // Back roof shingles\n    for(y = [0:8:48]) {\n        for(x = [-40:8:40]) {\n            translate([x, -39, 75+y])\n                cube([9, wall+1, 3]);\n        }\n    }\n    \n    // Side roof shingles\n    for(side = [-1, 1]) {\n        for(i = [0:8:16]) {\n            translate([side * 50, -39+i, 100+i*0.8])\n                rotate([0, 90, 0])\n                    cube([9, wall+1, 3]);\n        }\n    }\n}\n\n// Support feet\nmodule feet() {\n    for(x = [-40, 40]) {\n        for(y = [-30, 30]) {\n            translate([x, y, 0])\n                cylinder(h=5, r=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    gable_shelf();\n    braces();\n    shingles();\n    feet();\n}",
    "renders": true
  },
  {
    "decorative_art": "entablature",
    "openscad_code": "// Entablature - classical furniture decorative element\n// Overall dimensions: 120mm x 20mm x 45mm\n\nmodule fillet(width, height, depth) {\n    // Creates rounded edge fillet\n    difference() {\n        cube([width, height, depth]);\n        translate([width-2, -1, -1])\n        rotate([0, 90, 0])\n        cylinder(h=width+2, r=2, $fn=20);\n    }\n}\n\nmodule dentil_block(width, height, depth) {\n    // Individual dentil tooth in entablature\n    cube([width, height, depth]);\n    \n    // Small chamfer on bottom\n    translate([0, height-1.5, 0])\n    rotate([0, -45, 0])\n    cube([width, 2, depth]);\n}\n\nmodule dentil_row(length, height, depth, count) {\n    // Row of dentil molding\n    spacing = length / count;\n    for(i = [0:count-1]) {\n        translate([i * spacing + spacing/2 - length/2, 0, 0])\n        dentil_block(spacing*0.8, height, depth);\n    }\n}\n\nmodule egg_and_dart_molding(length, height, depth) {\n    // Decorative egg and dart pattern\n    count = 12;\n    spacing = length / count;\n    \n    for(i = [0:count-1]) {\n        translate([i * spacing - length/2 + spacing/2, 0, 0])\n        union() {\n            // Egg\n            translate([0, height/2, depth/2])\n            scale([0.8, 0.8, 0.6])\n            sphere(r=height/2, $fn=20);\n            \n            // Dart\n            translate([spacing*0.3, height, depth/2])\n            rotate([0, 0, 90])\n            scale([0.4, 0.4, 1])\n            cylinder(h=height*0.8, r1=height*0.3, r2=0, $fn=3);\n        }\n    }\n}\n\nmodule fluted_column(diameter, height, flutes=8) {\n    // Fluted column detail\n    column = cylinder(h=height, r=diameter/2, $fn=32);\n    \n    // Create flutes\n    for(i = [0:flutes-1]) {\n        rotate([0, 0, i*360/flutes])\n        translate([diameter/2-1, -1, -1])\n        cube([2, 2, height+2]);\n    }\n}\n\n// Main entablature assembly\nmodule entablature() {\n    // Base layer - architrave\n    translate([0, 0, 0])\n    cube([120, 20, 8]);\n    \n    // Second layer - frieze with dentils\n    translate([0, 0, 8])\n    cube([120, 20, 12]);\n    \n    // Dentil molding under frieze\n    translate([0, 0, 8])\n    dentil_row(110, 3, 20, 16);\n    \n    // Decorative band above frieze\n    translate([0, 0, 20])\n    cube([120, 20, 3]);\n    \n    // Third layer - cornice base\n    translate([0, 0, 23])\n    cube([120, 20, 5]);\n    \n    // Cornice projection\n    translate([0, 0, 28])\n    cube([130, 20, 4]);\n    \n    // Top cornice molding\n    translate([0, 0, 32])\n    cube([140, 20, 3]);\n    \n    // Egg and dart molding on cornice\n    translate([0, 20, 32])\n    rotate([90, 0, 0])\n    egg_and_dart_molding(120, 5, 3);\n    \n    // Corner blocks with fluted details\n    translate([-55, 10, 15])\n    rotate([0, 90, 0])\n    fluted_column(8, 15, 6);\n    \n    translate([55, 10, 15])\n    rotate([0, 90, 0])\n    fluted_column(8, 15, 6);\n    \n    // Small rosettes on corners\n    translate([-55, 20, 35])\n    rotate([0, 0, 0])\n    scale([1, 1, 0.5])\n    cylinder(h=3, r=4, $fn=8);\n    \n    translate([55, 20, 35])\n    rotate([0, 0, 0])\n    scale([1, 1, 0.5])\n    cylinder(h=3, r=4, $fn=8);\n    \n    // Relief panel details on frieze\n    translate([0, 0, 12])\n    for(i = [-2:2]) {\n        translate([i * 20, 0, 0])\n        difference() {\n            cube([15, 20, 6]);\n            translate([1, 1, 1])\n            cube([13, 18, 4]);\n        }\n    }\n}\n\n// Render the entablature\nentablature();",
    "renders": true
  },
  {
    "decorative_art": "frieze",
    "openscad_code": "// Frieze Furniture - Decorative Panel with Floral Motif\n// Realistic style, medium complexity, 3D printable\n\n$fn = 50;\n\n// Overall dimensions\npanel_width = 120;\npanel_height = 40;\npanel_thickness = 2.5;\n\n// Frame dimensions\nframe_width = 3;\nframe_depth = 2;\n\n// Decorative elements\nflower_radius = 5;\nleaf_length = 8;\nleaf_width = 4;\n\n// Main panel with frame\nmodule frieze_panel() {\n    // Back panel\n    difference() {\n        cube([panel_width, panel_height, panel_thickness]);\n        \n        // Recessed center area\n        translate([frame_width, frame_width, -0.1])\n            cube([panel_width - 2*frame_width, panel_height - 2*frame_width, panel_thickness + 0.2]);\n    }\n    \n    // Frame edges\n    // Top frame\n    translate([0, 0, panel_thickness])\n        cube([panel_width, frame_width, frame_depth]);\n    \n    // Bottom frame\n    translate([0, panel_height - frame_width, panel_thickness])\n        cube([panel_width, frame_width, frame_depth]);\n    \n    // Left frame\n    translate([0, 0, panel_thickness])\n        cube([frame_width, panel_height, frame_depth]);\n    \n    // Right frame\n    translate([panel_width - frame_width, 0, panel_thickness])\n        cube([frame_width, panel_height, frame_depth]);\n}\n\n// Decorative flower element\nmodule flower(x, y) {\n    translate([x, y, panel_thickness + frame_depth])\n    union() {\n        // Center\n        cylinder(h = 1.5, r = flower_radius/2);\n        \n        // Petals in circle\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n            translate([flower_radius/2, 0, 0])\n                scale([1, 0.6, 1])\n                cylinder(h = 1, r1 = flower_radius/2, r2 = 0);\n        }\n    }\n}\n\n// Decorative leaf element\nmodule leaf(x, y, angle) {\n    translate([x, y, panel_thickness + frame_depth])\n    rotate([0, 0, angle])\n    union() {\n        // Main leaf body\n        scale([leaf_length, leaf_width, 1])\n            cylinder(h = 0.8, r = 0.5);\n        \n        // Leaf vein\n        translate([0, 0, 0.5])\n            scale([leaf_length * 0.8, 0.3, 0.3])\n                cube(center = true);\n    }\n}\n\n// Vine connector\nmodule vine(x1, y1, x2, y2) {\n    length = sqrt(pow(x2-x1, 2) + pow(y2-y1, 2));\n    angle = atan2(y2-y1, x2-x1);\n    \n    translate([(x1+x2)/2, (y1+y2)/2, panel_thickness + frame_depth + 0.3])\n    rotate([0, 0, angle])\n    scale([length/2, 0.8, 0.8])\n        cylinder(h = 1, r = 0.5);\n}\n\n// Assembly\nfrieze_panel();\n\n// Central decorative motif\nflower(panel_width/2, panel_height/2);\n\n// Flower pattern positions\nflower_positions = [\n    [30, 12],\n    [panel_width-30, 12],\n    [25, 28],\n    [panel_width-25, 28],\n    [panel_width/2, 8]\n];\n\n// Generate flowers\nfor(pos = flower_positions) {\n    flower(pos[0], pos[1]);\n}\n\n// Leaf accents with vines\nleaf_accent_positions = [\n    [20, 20, 30],\n    [panel_width-20, 20, -30],\n    [35, 30, -45],\n    [panel_width-35, 30, 45],\n    [panel_width/2 - 15, 25, 0],\n    [panel_width/2 + 15, 25, 180]\n];\n\n// Generate leaves and connecting vines\nfor(acc = leaf_accent_positions) {\n    leaf(acc[0], acc[1], acc[2]);\n    \n    // Connect to nearest flower\n    if(acc[0] < panel_width/2) {\n        vine(acc[0], acc[1], 30, 12);\n    } else {\n        vine(acc[0], acc[1], panel_width-30, 12);\n    }\n}\n\n// Corner decorative details\nmodule corner_detail(x, y) {\n    translate([x, y, panel_thickness + frame_depth])\n    union() {\n        // Small rosette\n        cylinder(h = 1, r = 3);\n        \n        // Petal details\n        for(i = [0:60:300]) {\n            rotate([0, 0, i])\n            translate([2, 0, 0.5])\n                scale([1.5, 0.5, 0.5])\n                cylinder(h = 0.5, r = 0.5);\n        }\n    }\n}\n\n// Add corner details\ncorner_detail(8, 8);\ncorner_detail(panel_width-8, 8);\ncorner_detail(8, panel_height-8);\ncorner_detail(panel_width-8, panel_height-8);",
    "renders": true
  },
  {
    "decorative_art": "metope",
    "openscad_code": "// Metope Furniture Panel - Realistic Style\n// Dimensions: 100mm x 100mm x 15mm\n\n$fn = 64;\n\n// Main panel dimensions\npanel_width = 100;\npanel_height = 100;\npanel_thickness = 15;\n\n// Frame dimensions\nframe_width = 8;\ninner_width = panel_width - 2*frame_width;\ninner_height = panel_height - 2*frame_width;\n\n// Decorative triglyph width\ntriglyph_width = 12;\ntriglyph_depth = 3;\ntriglyph_gap = 6;\n\n// Metope relief dimensions\nmetope_relief = 2;\nscroll_depth = 1.5;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\nmodule frame() {\n    // Outer frame structure\n    difference() {\n        // Main frame block\n        cube([panel_width, panel_height, panel_thickness]);\n        \n        // Hollow center\n        translate([frame_width, frame_width, -1])\n            cube([inner_width, inner_height, panel_thickness+2]);\n    }\n    \n    // Back panel (for 3D printing support)\n    translate([0, 0, panel_thickness-wall_thickness])\n        cube([panel_width, panel_height, wall_thickness]);\n}\n\nmodule triglyph() {\n    // Vertical grooves pattern\n    for (i = [0:2]) {\n        translate([i*(triglyph_width/3 + 1) + triglyph_width/6, 0, -1])\n            cube([2, frame_width, panel_thickness+2]);\n    }\n}\n\nmodule triglyphs_section() {\n    // Left triglyph\n    translate([0, 0, 0])\n        triglyph();\n    \n    // Right triglyph (mirrored)\n    translate([panel_width - triglyph_width, 0, 0])\n        mirror([1,0,0])\n            triglyph();\n}\n\nmodule scroll_ornament(x, y, scale) {\n    translate([x, y, panel_thickness - metope_relief]) {\n        scale([scale, scale, 1]) {\n            // Scroll body\n            rotate([90, 0, 0])\n                cylinder(h=scroll_depth, r1=8, r2=6);\n            \n            // Scroll ends\n            translate([6, 0, scroll_depth/2])\n                sphere(r=3);\n            translate([-6, 0, scroll_depth/2])\n                sphere(r=3);\n        }\n    }\n}\n\nmodule central_metope() {\n    // Metope relief background\n    translate([frame_width + triglyph_width + triglyph_gap, \n               frame_width + triglyph_width + triglyph_gap, \n               panel_thickness - metope_relief])\n        cube([inner_width - 2*(triglyph_width + triglyph_gap),\n              inner_height - 2*(triglyph_width + triglyph_gap),\n              metope_relief]);\n    \n    // Decorative scroll pattern\n    scroll_ornament(panel_width/2, panel_height/2, 0.8);\n    scroll_ornament(panel_width/2 - 15, panel_height/2 + 10, 0.5);\n    scroll_ornament(panel_width/2 + 15, panel_height/2 - 10, 0.5);\n}\n\nmodule mounting_holes() {\n    // Keyhole mounting slots\n    for (x = [20, panel_width-20]) {\n        for (y = [20, panel_height-20]) {\n            translate([x, y, panel_thickness - wall_thickness/2]) {\n                rotate([90, 0, 0])\n                    cylinder(h=wall_thickness*2, r=3, $fn=32);\n                translate([0, -3, 0])\n                    cube([6, 6, wall_thickness*2]);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    frame();\n    \n    // Triglyph decorations\n    triglyphs_section();\n    \n    // Central metope decoration\n    central_metope();\n    \n    // Mounting hardware\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "decorative_art": "tympanum",
    "openscad_code": "// Tympanum furniture piece - decorative pediment for cabinets/bookshelf\n// Realistic style, medium complexity\n// Overall size: 120mm width x 80mm height x 25mm depth\n\n$fn = 32;\n\n// Main module\nmodule tympanum() {\n    // Base frame structure\n    difference() {\n        // Outer frame\n        translate([0, 0, 10]) \n            cube([120, 25, 20], center = true);\n        \n        // Inner cutout\n        translate([0, 0, 11])\n            cube([110, 21, 21], center = true);\n    }\n    \n    // Triangular pediment\n    difference() {\n        // Main triangle\n        translate([0, 0, 30])\n            linear_extrude(height = 25, center = true)\n                polygon(points = [[-60, 0], [60, 0], [0, 50]]);\n        \n        // Inner triangle cutout\n        translate([0, 0, 31])\n            linear_extrude(height = 26, center = true)\n                polygon(points = [[-55, 5], [55, 5], [0, 45]]);\n    }\n    \n    // Decorative rosettes (left and right)\n    for(x = [-45, 45]) {\n        translate([x, 0, 42])\n            rotate([90, 0, 0])\n            cylinder(h = 4, r = 8);\n        \n        // Rosette detail rings\n        for(i = [1:3]) {\n            translate([x, 0, 42 + i * 0.5])\n                rotate([90, 0, 0])\n                cylinder(h = 0.5, r = 8 - i * 1.5);\n        }\n    }\n    \n    // Central decorative motif\n    translate([0, 0, 42])\n        sphere(r = 12);\n    \n    // Motif rings\n    for(i = [1:2]) {\n        translate([0, 0, 42])\n            scale([1 + i * 0.2, 1 + i * 0.2, 0.2])\n            sphere(r = 12);\n    }\n    \n    // Side scrollwork supports\n    for(side = [-1, 1]) {\n        // Left scroll\n        translate([side * 45, 0, 20])\n            rotate([0, 90 * side, 0])\n            difference() {\n                cylinder(h = 30, r = 8);\n                translate([0, 0, -1])\n                    cylinder(h = 32, r = 6);\n            }\n        \n        // Scroll cap\n        translate([side * 45, 0, 35])\n            sphere(r = 8);\n    }\n    \n    // Bottom decorative molding\n    for(i = [-40:10:40]) {\n        translate([i, 0, 20])\n            rotate([90, 0, 0])\n            cylinder(h = 2, r = 4);\n    }\n    \n    // Back mounting plate\n    translate([0, -12, 20])\n        cube([100, 4, 40], center = true);\n    \n    // Mounting holes\n    for(x = [-40:40:40]) {\n        translate([x, -12, 30])\n            rotate([90, 0, 0])\n            cylinder(h = 10, r = 2);\n    }\n}\n\n// Render the complete piece\ntympanum();",
    "renders": true
  },
  {
    "decorative_art": "pediment",
    "openscad_code": "// Pediment Furniture Piece - Realistic Style\n// Classic triangular pediment with decorative moldings and acroteria\n\n// Overall dimensions\npediment_width = 100;\npediment_height = 35;\npediment_depth = 15;\nwall_thickness = 2;\n\nmodule base_frame() {\n    // Bottom frame structure\n    difference() {\n        cube([pediment_width, pediment_depth, 5]);\n        translate([wall_thickness, wall_thickness, 1])\n            cube([pediment_width - 2*wall_thickness, pediment_depth - 2*wall_thickness, 5]);\n    }\n}\n\nmodule triangular_pediment() {\n    // Main triangular pediment shape\n    linear_extrude(height = pediment_depth) {\n        polygon(points=[\n            [0, 0],\n            [pediment_width/2, pediment_height],\n            [pediment_width, 0],\n            [0, 0]\n        ]);\n    }\n}\n\nmodule crown_molding() {\n    // Decorative crown molding along top\n    module molding_profile() {\n        difference() {\n            square([5, 5]);\n            translate([2, 2]) circle(r=1, $fn=16);\n        }\n    }\n    \n    translate([0, 0, pediment_height + 3]) {\n        for(i = [0:5:pediment_width]) {\n            translate([i, 0, 0])\n                linear_extrude(height = pediment_depth)\n                    molding_profile();\n        }\n    }\n}\n\nmodule dentil_molding() {\n    // Classical dentil molding detail\n    dentil_width = 3;\n    dentil_height = 2;\n    dentil_depth = 3;\n    \n    translate([0, pediment_depth - dentil_depth, 0]) {\n        for(i = [0:6:pediment_width-6]) {\n            translate([i, 0, 0])\n                cube([dentil_width, dentil_depth, dentil_height]);\n        }\n    }\n}\n\nmodule acroterion() {\n    // Decorative acroteria (corner ornaments)\n    module single_acroterion() {\n        // Base plinth\n        translate([0, 0, 0]) cube([4, 4, 3]);\n        \n        // Ornamental scroll\n        translate([2, 2, 3]) {\n            cylinder(h=2, r=2, $fn=16);\n            translate([0, 0, 2]) sphere(r=2, $fn=16);\n        }\n    }\n    \n    // Left acroterion\n    translate([5, pediment_depth/2 - 2, pediment_height - 2])\n        single_acroterion();\n    \n    // Right acroterion\n    translate([pediment_width - 9, pediment_depth/2 - 2, pediment_height - 2])\n        mirror([1, 0, 0]) single_acroterion();\n}\n\nmodule central_rosette() {\n    // Central decorative rosette\n    translate([pediment_width/2 - 3, pediment_depth/2 - 3, pediment_height - 8]) {\n        // Base disk\n        cylinder(h=1, r=4, $fn=32);\n        \n        // Petal details\n        for(i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([2.5, 0, 1])\n                    cylinder(h=1, r=1.2, $fn=12);\n        }\n        \n        // Center detail\n        translate([0, 0, 2]) sphere(r=1.5, $fn=16);\n    }\n}\n\nmodule support_beam() {\n    // Structural support beams\n    beam_width = 3;\n    \n    // Left support\n    translate([10, 0, 0])\n        cube([beam_width, pediment_depth, pediment_height]);\n    \n    // Right support\n    translate([pediment_width - 10 - beam_width, 0, 0])\n        cube([beam_width, pediment_depth, pediment_height]);\n}\n\n// Main assembly\nunion() {\n    // Base structure\n    base_frame();\n    \n    // Main pediment\n    translate([0, 0, 5])\n        triangular_pediment();\n    \n    // Decorative elements\n    crown_molding();\n    dentil_molding();\n    acroterion();\n    central_rosette();\n    support_beam();\n}",
    "renders": true
  },
  {
    "decorative_art": "colonnade",
    "openscad_code": "// Colonnade Decorative Furniture Piece\n// A small ornamental colonnade structure with classical proportions\n// Overall size: 100mm x 50mm x 70mm\n\n// Wall thickness constant\nwall_thickness = 2;\n\n// Base dimensions\nbase_length = 100;\nbase_width = 50;\nbase_height = 8;\n\n// Column parameters\ncolumn_diameter = 8;\ncolumn_height = 50;\nnum_columns = 6;\ncolumn_spacing = base_length / (num_columns + 1);\n\n// Entablature dimensions\narchitrave_height = 6;\nfrieze_height = 8;\ncornice_height = 5;\n\n// Pedestal dimensions\npedestal_width = 12;\npedestal_height = 10;\n\n// Decorative elements\ndentil_width = 3;\ndentil_height = 2;\n\n// Base platform\nmodule base_platform() {\n    difference() {\n        // Main base\n        cube([base_length, base_width, base_height], center=true);\n        \n        // Hollow bottom for printability\n        translate([0, 0, -base_height/2 + wall_thickness])\n            cube([base_length - 2*wall_thickness, base_width - 2*wall_thickness, base_height], center=true);\n    }\n}\n\n// Classical column with fluting\nmodule column() {\n    union() {\n        // Column shaft\n        cylinder(h=column_height, d=column_diameter, $fn=32);\n        \n        // Fluting details\n        for(i=[0:11]) {\n            rotate([0, 0, i*30])\n                translate([column_diameter/2 - 0.5, -0.5, 0])\n                    cube([1, 1, column_height]);\n        }\n        \n        // Base molding\n        translate([0, 0, 0])\n            cylinder(h=4, d1=column_diameter*1.2, d2=column_diameter, $fn=32);\n        \n        // Capital\n        translate([0, 0, column_height])\n            cylinder(h=6, d1=column_diameter, d2=column_diameter*1.4, $fn=32);\n    }\n}\n\n// Entablature with dentil molding\nmodule entablature() {\n    difference() {\n        // Main block\n        cube([base_length, base_width, architrave_height + frieze_height + cornice_height], center=true);\n        \n        // Hollow bottom\n        translate([0, 0, -(architrave_height + frieze_height + cornice_height)/2 + wall_thickness])\n            cube([base_length - 2*wall_thickness, base_width - 2*wall_thickness, architrave_height + frieze_height + cornice_height], center=true);\n    }\n    \n    // Dentil molding under cornice\n    for(i=[-base_length/2 + 5: dentil_width + 1: base_length/2 - 5]) {\n        translate([i, 0, (architrave_height + frieze_height + cornice_height)/2 - cornice_height - dentil_height/2])\n            cube([dentil_width, base_width, dentil_height], center=true);\n    }\n}\n\n// Pedestal between columns\nmodule pedestal() {\n    difference() {\n        cube([pedestal_width, base_width - 10, pedestal_height], center=true);\n        \n        // Hollow center\n        translate([0, 0, -pedestal_height/2 + wall_thickness])\n            cube([pedestal_width - 2*wall_thickness, base_width - 10 - 2*wall_thickness, pedestal_height], center=true);\n    }\n}\n\n// Decorative rosettes\nmodule rosette() {\n    for(i=[0:5]) {\n        rotate([0, 0, i*60])\n            translate([3, 0, 0])\n                cylinder(h=1, d=2, $fn=6);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base platform\n    base_platform();\n    \n    // Columns\n    for(i=[1:num_columns]) {\n        translate([i*column_spacing - base_length/2 - column_spacing/2, 0, base_height/2 + column_height/2])\n            column();\n    }\n    \n    // Entablature\n    translate([0, 0, base_height/2 + column_height + (architrave_height + frieze_height + cornice_height)/2])\n        entablature();\n    \n    // Pedestals between columns\n    for(i=[1:num_columns-1]) {\n        translate([i*column_spacing - base_length/2 - column_spacing/2, 0, base_height/2 + pedestal_height/2])\n            pedestal();\n    }\n    \n    // Rosettes on entablature\n    for(i=[1:num_columns]) {\n        translate([i*column_spacing - base_length/2 - column_spacing/2, 0, base_height/2 + column_height + architrave_height + frieze_height/2])\n            rosette();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "portico",
    "openscad_code": "// Portico decorative furniture piece\n// Overall dimensions: 100mm x 60mm x 80mm\n\n$fn = 50;\n\n// Main parameters\nbase_width = 100;\nbase_depth = 60;\nbase_height = 5;\ncolumn_height = 60;\ncolumn_diameter = 8;\narch_thickness = 3;\nroof_height = 15;\n\nmodule portico() {\n    // Base platform\n    translate([0, 0, base_height/2]) {\n        cube([base_width, base_depth, base_height], center=true);\n    }\n    \n    // Front columns (4 columns)\n    for(i=[-1, 1]) {\n        translate([i * 35, 0, base_height + column_height/2]) {\n            cylinder(h=column_height, d=column_diameter, center=true);\n        }\n        translate([i * 35, -20, base_height + column_height/2]) {\n            cylinder(h=column_height, d=column_diameter, center=true);\n        }\n    }\n    \n    // Back columns (4 columns)\n    for(i=[-1, 1]) {\n        translate([i * 35, 0, base_height + column_height/2]) {\n            cylinder(h=column_height, d=column_diameter, center=true);\n        }\n        translate([i * 35, 20, base_height + column_height/2]) {\n            cylinder(h=column_height, d=column_diameter, center=true);\n        }\n    }\n    \n    // Column bases\n    for(x=[-35, 35]) {\n        for(y=[-20, 0, 20]) {\n            translate([x, y, base_height + 2]) {\n                cylinder(h=4, d=column_diameter + 4, center=true);\n            }\n        }\n    }\n    \n    // Column capitals\n    for(x=[-35, 35]) {\n        for(y=[-20, 0, 20]) {\n            translate([x, y, base_height + column_height - 2]) {\n                cylinder(h=4, d=column_diameter + 4, center=true);\n            }\n        }\n    }\n    \n    // Front arch\n    translate([0, -20, base_height + column_height - 10]) {\n        difference() {\n            cube([80, arch_thickness, 20], center=true);\n            translate([0, 0, 10]) {\n                cube([76, arch_thickness + 2, 20], center=true);\n            }\n        }\n    }\n    \n    // Back arch\n    translate([0, 20, base_height + column_height - 10]) {\n        difference() {\n            cube([80, arch_thickness, 20], center=true);\n            translate([0, 0, 10]) {\n                cube([76, arch_thickness + 2, 20], center=true);\n            }\n        }\n    }\n    \n    // Side arches\n    translate([-35, 0, base_height + column_height - 10]) {\n        rotate([0, 0, 90]) {\n            difference() {\n                cube([40, arch_thickness, 20], center=true);\n                translate([0, 0, 10]) {\n                    cube([36, arch_thickness + 2, 20], center=true);\n                }\n            }\n        }\n    }\n    \n    translate([35, 0, base_height + column_height - 10]) {\n        rotate([0, 0, 90]) {\n            difference() {\n                cube([40, arch_thickness, 20], center=true);\n                translate([0, 0, 10]) {\n                    cube([36, arch_thickness + 2, 20], center=true);\n                }\n            }\n        }\n    }\n    \n    // Roof structure\n    translate([0, 0, base_height + column_height + roof_height/2]) {\n        cube([base_width + 10, base_depth + 10, roof_height], center=true);\n    }\n    \n    // Roof overhang\n    translate([0, 0, base_height + column_height + roof_height + 2]) {\n        cube([base_width + 20, base_depth + 20, 4], center=true);\n    }\n    \n    // Decorative frieze\n    translate([0, 0, base_height + column_height + 2]) {\n        difference() {\n            cube([base_width - 10, base_depth - 10, 6], center=true);\n            for(x=[-30:15:30]) {\n                for(y=[-15:15:15]) {\n                    translate([x, y, 3]) {\n                        cube([8, 8, 8], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Floor details\n    for(x=[-40:10:40]) {\n        for(y=[-25:10:25]) {\n            translate([x, y, base_height - 1]) {\n                cube([8, 8, 2], center=true);\n            }\n        }\n    }\n}\n\nportico();",
    "renders": true
  },
  {
    "decorative_art": "loggia",
    "openscad_code": "// Loggia Balcony Railing Planter Box with Classical Details\n// Dimensions: 80mm wide x 40mm deep x 60mm tall\n\n// Wall thickness constant\nwall = 2;\n\n// Main planter box\nmodule planter_box() {\n    difference() {\n        // Outer shell\n        cube([80, 40, 60]);\n        \n        // Inner cavity\n        translate([wall, wall, wall])\n            cube([80-wall*2, 40-wall*2, 60-wall]);\n    }\n}\n\n// Decorative balusters\nmodule baluster(x_pos) {\n    translate([x_pos, 20, 0]) {\n        // Base\n        cylinder(h=5, r=3);\n        \n        // Shaft\n        translate([0, 0, 5])\n            cylinder(h=40, r1=2.5, r2=2);\n            \n        // Capital\n        translate([0, 0, 45])\n            cylinder(h=5, r=3.5);\n    }\n}\n\n// Railing top\nmodule railing_top() {\n    translate([-1, -1, 50]) {\n        // Main rail\n        cube([82, 42, 10]);\n        \n        // Decorative groove\n        translate([2, 2, 3])\n            cube([78, 38, 2]);\n    }\n}\n\n// Corner posts\nmodule corner_post(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0]) {\n        difference() {\n            // Post body\n            cube([6, 6, 60]);\n            \n            // Decorative chamfer\n            translate([1.5, 1.5, 0])\n                cube([3, 3, 60]);\n        }\n    }\n}\n\n// Bottom rail with decorative pattern\nmodule bottom_rail() {\n    translate([0, 0, 15]) {\n        difference() {\n            // Main rail\n            cube([80, 4, 3]);\n            \n            // Decorative cutouts\n            for(i = [1:7]) {\n                translate([i*10-5, 0.5, 0])\n                    cylinder(h=4, r=1.5);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base planter\n    planter_box();\n    \n    // Corner posts\n    corner_post(0, 0);\n    corner_post(74, 0);\n    corner_post(0, 34);\n    corner_post(74, 34);\n    \n    // Balusters\n    for(i = [1:6]) {\n        baluster(i*12);\n    }\n    \n    // Rails\n    railing_top();\n    bottom_rail();\n    \n    // Drainage holes\n    translate([20, 20, 0]) {\n        cylinder(h=wall, r=2);\n    }\n    translate([60, 20, 0]) {\n        cylinder(h=wall, r=2);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "atrium",
    "openscad_code": "// Atrium Decorative Plant Stand - Realistic Style (Medium Complexity)\n\n// Parameters\nstand_height = 100;\nbase_diameter = 60;\ntop_diameter = 80;\nleg_count = 4;\nleg_thickness = 4;\nshelf_height = 30;\nwall_thickness = 2;\n\n// Main module\nmodule atrium_plant_stand() {\n    // Base plate\n    difference() {\n        cylinder(h=wall_thickness, d=base_diameter, $fn=64);\n        cylinder(h=wall_thickness+1, d=base_diameter-wall_thickness*2, $fn=64);\n    }\n    \n    // Top ring\n    translate([0, 0, stand_height-wall_thickness]) {\n        difference() {\n            cylinder(h=wall_thickness, d=top_diameter, $fn=64);\n            cylinder(h=wall_thickness+1, d=top_diameter-wall_thickness*2, $fn=64);\n        }\n    }\n    \n    // Decorative legs with curved profile\n    for(i = [0:leg_count-1]) {\n        rotate([0, 0, i * 360/leg_count]) {\n            translate([base_diameter/2 - leg_thickness, -leg_thickness/2, 0]) {\n                // Leg base\n                cube([leg_thickness, leg_thickness, shelf_height]);\n                \n                // Curved transition piece\n                translate([0, 0, shelf_height]) {\n                    rotate([90, 0, 0]) {\n                        difference() {\n                            cylinder(h=top_diameter/2 - base_diameter/2 + leg_thickness, \n                                     r1=leg_thickness/2, r2=leg_thickness/2, $fn=8);\n                            translate([-leg_thickness/2, -leg_thickness/2, -1]) {\n                                cube([leg_thickness*2, leg_thickness*2, \n                                      top_diameter/2 - base_diameter/2 + leg_thickness + 2]);\n                            }\n                        }\n                    }\n                }\n                \n                // Top support\n                translate([top_diameter/2 - base_diameter/2, -leg_thickness/2, stand_height-wall_thickness]) {\n                    cube([leg_thickness, leg_thickness, wall_thickness]);\n                }\n            }\n        }\n    }\n    \n    // Middle shelf\n    translate([0, 0, shelf_height-wall_thickness/2]) {\n        difference() {\n            cylinder(h=wall_thickness, d=(base_diameter+top_diameter)/2, $fn=64);\n            // Decorative cutouts\n            for(j = [0:5]) {\n                rotate([0, 0, j * 60]) {\n                    translate([((base_diameter+top_diameter)/4) * 0.7, 0, -1]) {\n                        cube([20, 5, wall_thickness+2]);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Decorative center post\n    translate([0, 0, wall_thickness]) {\n        difference() {\n            cylinder(h=stand_height-wall_thickness*2, d=10, $fn=32);\n            cylinder(h=stand_height-wall_thickness*2+1, d=6, $fn=32);\n        }\n    }\n    \n    // Top decorative ring\n    translate([0, 0, stand_height-wall_thickness]) {\n        difference() {\n            cylinder(h=10, d=top_diameter+20, $fn=64);\n            cylinder(h=11, d=top_diameter+16, $fn=64);\n        }\n    }\n    \n    // Bottom feet pads\n    for(i = [0:leg_count-1]) {\n        rotate([0, 0, i * 360/leg_count]) {\n            translate([base_diameter/2 - leg_thickness/2, -leg_thickness/2, -2]) {\n                cube([leg_thickness, leg_thickness, 2]);\n            }\n        }\n    }\n}\n\n// Render the model\natrium_plant_stand();",
    "renders": true
  },
  {
    "decorative_art": "courtyard",
    "openscad_code": "// Courtyard Garden Bench - Medium Complexity Realistic Style\n// Overall dimensions: 90mm wide x 35mm deep x 45mm high\n// 2mm wall thickness throughout for 3D printing\n\n// Bench module with decorative slatted back and curved armrests\nmodule garden_bench() {\n    // Bench seat - solid plank with rounded edges\n    difference() {\n        translate([0, 0, 20]) \n            cube([80, 30, 4], center=true);\n        \n        // Rounded edges on seat\n        translate([0, 0, 22]) \n            cube([76, 26, 4.1], center=true);\n    }\n    \n    // Bench legs - four tapered supports\n    module leg(x_pos) {\n        translate([x_pos, 0, 10]) \n            cylinder(h=20, r1=3, r2=2.5, $fn=8);\n    }\n    \n    leg(-35);\n    leg(35);\n    \n    // Back support posts\n    module back_post(x_pos) {\n        translate([x_pos, -12, 32.5]) \n            cylinder(h=25, r=2, $fn=6);\n    }\n    \n    back_post(-30);\n    back_post(30);\n    \n    // Decorative back slats\n    for(i = [-20:10:20]) {\n        translate([i, -12, 37]) \n            cube([6, 2, 10], center=true);\n    }\n    \n    // Armrests - curved supports\n    module armrest(x_pos) {\n        // Support post\n        translate([x_pos, 12, 27]) \n            cylinder(h=15, r=2, $fn=6);\n        \n        // Curved arm surface\n        translate([x_pos, 17, 34]) {\n            rotate([90, 0, 0]) \n                cylinder(h=10, r=2, $fn=8);\n        }\n        \n        // Armrest top\n        translate([x_pos, 17, 35]) \n            cube([8, 4, 2], center=true);\n    }\n    \n    armrest(-35);\n    armrest(35);\n    \n    // Center support beam\n    translate([0, 0, 10]) \n        cube([70, 2, 3], center=true);\n    \n    // Decorative front apron with cutouts\n    difference() {\n        translate([0, 15, 18]) \n            cube([70, 2, 6], center=true);\n        \n        // Arched cutouts\n        for(i = [-20:20:20]) {\n            translate([i, 15.9, 18]) \n                rotate([90, 0, 0]) \n                    cylinder(h=2.1, r=4, $fn=20);\n        }\n    }\n}\n\n// Base courtyard platform\ndifference() {\n    cube([100, 50, 2], center=true);\n    \n    // Drainage holes\n    for(x = [-40:20:40]) {\n        for(y = [-20:20:20]) {\n            translate([x, y, 0]) \n                cylinder(h=2.1, r=1.5, $fn=6);\n        }\n    }\n}\n\n// Position bench on platform\ntranslate([0, 0, 1]) \n    garden_bench();\n\n// Decorative corner posts for courtyard boundary\nmodule corner_post(x, y) {\n    translate([x, y, 0]) {\n        // Post base\n        cylinder(h=3, r=3, $fn=8);\n        \n        // Post body\n        translate([0, 0, 3]) \n            cylinder(h=12, r=2.5, $fn=8);\n        \n        // Post cap\n        translate([0, 0, 15]) \n            sphere(r=3, $fn=12);\n    }\n}\n\ncorner_post(-45, -22);\ncorner_post(45, -22);\ncorner_post(-45, 22);\ncorner_post(45, 22);\n\n// Low border fence sections\nmodule fence_section(x_pos, angle) {\n    translate([x_pos, 0, 1]) {\n        rotate([0, 0, angle]) {\n            for(i = [-20:5:20]) {\n                translate([i, 0, 0]) {\n                    cube([1, 1, 8], center=true);\n                    translate([0, 0, 4]) \n                        sphere(r=0.5, $fn=8);\n                }\n            }\n        }\n    }\n}\n\nfence_section(0, 0);\nfence_section(0, 90);",
    "renders": true
  },
  {
    "decorative_art": "piazza",
    "openscad_code": "// Piazza table - decorative Italian outdoor style\n// Overall dimensions: 120mm diameter, 65mm high\n// Wall thickness: 2mm for 3D printing\n\n$fn = 32;  // Smooth curves\n\n// Main module\nmodule piazza_table() {\n    // Base pedestal\n    union() {\n        // Bottom base plate\n        translate([0, 0, 0]) {\n            cylinder(h=3, d1=80, d2=85);\n        }\n        \n        // Decorative base rings\n        for(i = [1:3]) {\n            translate([0, 0, 3 + (i-1)*4]) {\n                cylinder(h=2, d=75 - i*5);\n            }\n        }\n        \n        // Main pedestal column\n        translate([0, 0, 14]) {\n            cylinder(h=35, d1=60, d2=50);\n        }\n        \n        // Capital detail\n        translate([0, 0, 49]) {\n            cylinder(h=5, d1=55, d2=65);\n        }\n        \n        // Table top support\n        translate([0, 0, 54]) {\n            cylinder(h=3, d=70);\n        }\n        \n        // Table top\n        translate([0, 0, 57]) {\n            difference() {\n                // Main top disk\n                cylinder(h=6, d=120);\n                \n                // Central decorative recess\n                translate([0, 0, 2]) {\n                    cylinder(h=4, d=40);\n                }\n                \n                // Drainage holes pattern\n                for(angle = [0:60:359]) {\n                    rotate([0, 0, angle]) {\n                        translate([35, 0, 2]) {\n                            cylinder(h=4, d=3);\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Decorative edge molding\n        translate([0, 0, 59]) {\n            difference() {\n                cylinder(h=4, d=125);\n                cylinder(h=4.5, d=118);\n            }\n        }\n        \n        // Reinforcement ribs under top\n        for(angle = [0:45:359]) {\n            rotate([0, 0, angle]) {\n                translate([25, 0, 54]) {\n                    cube([30, 3, 3], center=true);\n                }\n            }\n        }\n        \n        // Ornamental scroll supports\n        for(i = [0:3]) {\n            rotate([0, 0, i*90]) {\n                translate([35, 35, 45]) {\n                    scale([1.2, 0.8, 1]) {\n                        rotate([90, 0, 45]) {\n                            difference() {\n                                cylinder(h=15, d=8);\n                                translate([0, 0, 2]) {\n                                    cylinder(h=16, d=4);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Generate the complete table\npiazza_table();",
    "renders": true
  },
  {
    "decorative_art": "plaza",
    "openscad_code": "// Plaza bench with artistic backrest and planter boxes\n// Overall dimensions: 100mm x 50mm x 45mm\n\nmodule bench_seat() {\n    // Main seat plank\n    translate([0, 0, 35])\n        cube([90, 40, 4], center=true);\n}\n\nmodule bench_legs() {\n    // Four support legs\n    for(x = [-35, 35])\n        for(y = [-15, 15])\n            translate([x, y, 17])\n                cube([6, 6, 34], center=true);\n}\n\nmodule backrest_frame() {\n    // Vertical supports for backrest\n    for(x = [-35, -12, 12, 35])\n        translate([x, 18, 42])\n            cube([4, 2, 14], center=true);\n}\n\nmodule backrest_art() {\n    // Decorative pattern in backrest\n    difference() {\n        // Main backrest panel\n        translate([0, 19, 42])\n            cube([80, 2, 14], center=true);\n        \n        // Cut decorative circles\n        for(i = [-3:3])\n            translate([i*10, 19, 42])\n                cylinder(h=3, r=3, center=true);\n    }\n}\n\nmodule planter_boxes() {\n    // Left planter\n    translate([-50, 0, 15])\n        difference() {\n            // Outer box\n            cube([10, 30, 30], center=true);\n            // Inner cavity\n            translate([0, 0, -2])\n                cube([6, 26, 26], center=true);\n        }\n    \n    // Right planter\n    translate([50, 0, 15])\n        difference() {\n            // Outer box\n            cube([10, 30, 30], center=true);\n            // Inner cavity\n            translate([0, 0, -2])\n                cube([6, 26, 26], center=true);\n        }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-35, -22, 42])\n        cube([4, 4, 10], center=true);\n    \n    // Right armrest\n    translate([35, -22, 42])\n        cube([4, 4, 10], center=true);\n}\n\n// Assembly\nunion() {\n    bench_seat();\n    bench_legs();\n    backrest_frame();\n    backrest_art();\n    planter_boxes();\n    armrests();\n}",
    "renders": true
  },
  {
    "decorative_art": "terrace",
    "openscad_code": "// Terrace bench with decorative lattice backrest and tapered legs\n// Overall dimensions: 120 mm (W) x 50 mm (D) x 55 mm (H)\n\n// Main parameters\nseat_w = 120;\nseat_d = 50;\nseat_h = 5;\nback_h = 30;\nleg_h = 40;\nleg_t = 2;\n\n// Tolerance for 3D printing\ntol = 0.2;\n\n// Main bench module\nmodule bench() {\n    // Seat\n    translate([0, 0, leg_h])\n        cube([seat_w, seat_d, seat_h], center = true);\n    \n    // Backrest frame\n    difference() {\n        // Outer frame\n        translate([0, -seat_d/2 - leg_t, leg_h + seat_h + back_h/2])\n            cube([seat_w, leg_t, back_h], center = true);\n        \n        // Inner cutout for lattice\n        translate([0, -seat_d/2 - leg_t + 1, leg_h + seat_h + back_h/2])\n            cube([seat_w - 4, leg_t + 0.1, back_h - 4], center = true);\n    }\n    \n    // Lattice backrest slats\n    for (i = [-4:1:4]) {\n        translate([i * 12, -seat_d/2 - leg_t/2, leg_h + seat_h + 2])\n            cube([2, leg_t, back_h - 4]);\n    }\n    \n    // Front support beam\n    translate([0, seat_d/2 - leg_t/2, leg_h/2])\n        cube([seat_w - 10, leg_t, leg_h], center = true);\n    \n    // Legs (tapered design)\n    module tapered_leg(x_pos) {\n        translate([x_pos, 0, leg_h/2])\n            cylinder(h = leg_h, r1 = leg_t * 2, r2 = leg_t, center = true);\n    }\n    \n    // Front legs\n    tapered_leg(seat_w/2 - 10);\n    tapered_leg(-seat_w/2 + 10);\n    \n    // Back legs\n    translate([seat_w/2 - 10, -seat_d/2 + 5, leg_h/2])\n        cylinder(h = leg_h, r = leg_t * 1.5, center = true);\n    translate([-seat_w/2 + 10, -seat_d/2 + 5, leg_h/2])\n        cylinder(h = leg_h, r = leg_t * 1.5, center = true);\n    \n    // Decorative armrests\n    module armrest(x_pos) {\n        // Armrest post\n        translate([x_pos, seat_d/4, leg_h + seat_h + 5])\n            cylinder(h = 10, r = leg_t, center = true);\n        \n        // Armrest top\n        translate([x_pos, seat_d/4, leg_h + seat_h + 15])\n            cube([20, 8, 2], center = true);\n    }\n    \n    armrest(seat_w/2 - 5);\n    armrest(-seat_w/2 + 5);\n    \n    // Reinforcement slats under seat\n    for (y = [-15:15:15]) {\n        translate([0, y, leg_h - 2])\n            cube([seat_w - 20, 2, 4], center = true);\n    }\n}\n\n// Render the bench\nbench();",
    "renders": true
  },
  {
    "decorative_art": "balcony",
    "openscad_code": "// Balcony Bistro Set - Table and Two Chairs\n// Overall footprint: 100x100x45 mm (table 45mm high, chairs 30mm seat height)\n\nmodule leg(x,y) {\n    // Single table/chair leg with 2mm wall thickness\n    translate([x,y,0])\n        difference() {\n            cylinder(h=30,d=6,$fn=12);       // outer cylinder\n            translate([0,0,2])\n                cylinder(h=28,d=2,$fn=12);   // hollow core\n        }\n}\n\nmodule table_top() {\n    // Circular table top with 2mm thickness\n    difference() {\n        cylinder(h=2,d=40,$fn=48);           // solid top\n        translate([0,0,1])\n            cylinder(h=2,d=36,$fn=48);       // recessed underside\n    }\n}\n\nmodule chair_seat() {\n    // Chair seat with rounded corners\n    difference() {\n        translate([-15,-15,0])\n            cube([30,30,3]);\n        translate([0,0,1])\n            cylinder(h=3,d=28,$fn=32);\n    }\n}\n\nmodule chair_back() {\n    // Decorative chair back with vertical slats\n    translate([-15,10,0]) {\n        difference() {\n            cube([30,2,20]);                 // back frame\n            \n            // Cut decorative holes\n            for(i=[-10:5:10]) {\n                translate([i,0,5])\n                    cube([2,3,10]);\n            }\n        }\n        \n        // Vertical slats\n        for(i=[-10:5:10]) {\n            translate([i,-0.5,10])\n                cube([1,3,10]);\n        }\n    }\n}\n\nmodule table() {\n    union() {\n        // Table top\n        translate([0,0,30])\n            table_top();\n        \n        // Four legs\n        leg(-15,-15);\n        leg(15,-15);\n        leg(-15,15);\n        leg(15,15);\n        \n        // Support ring\n        translate([0,0,15])\n            difference() {\n                cylinder(h=2,d=32,$fn=24);\n                cylinder(h=2,d=28,$fn=24);\n            }\n    }\n}\n\nmodule chair(x,y,rotate=0) {\n    translate([x,y,0])\n    rotate([0,0,rotate])\n    union() {\n        // Seat\n        chair_seat();\n        \n        // Legs\n        leg(-10,-10);\n        leg(10,-10);\n        leg(-10,10);\n        leg(10,10);\n        \n        // Back support\n        chair_back();\n        \n        // Lower support ring\n        translate([0,0,10])\n            difference() {\n                cylinder(h=2,d=22,$fn=20);\n                cylinder(h=2,d=18,$fn=20);\n            }\n    }\n}\n\n// Main assembly\ntable();\nchair(-35,0);\nchair(35,0,180);",
    "renders": true
  },
  {
    "decorative_art": "veranda",
    "openscad_code": "// Veranda Rocking Chair - Realistic style, medium complexity\n// Dimensions: ~100mm width x 120mm depth x 110mm height\n\n// Parameters\nchair_width = 90;\nchair_depth = 100;\nseat_height = 55;\nback_height = 110;\nwall_thickness = 2;\n\nmodule chair_frame() {\n    // Back frame posts\n    for(side = [-1, 1]) {\n        translate([side * (chair_width/2 - 5), 0, 0])\n            cylinder(h = back_height, r = 4, $fn = 12);\n    }\n    \n    // Seat frame\n    translate([0, 0, seat_height/2])\n        cube([chair_width - 8, chair_depth - 20, wall_thickness], center = true);\n    \n    // Front legs\n    for(side = [-1, 1]) {\n        translate([side * (chair_width/2 - 5), chair_depth/2 - 10, seat_height/2])\n            cylinder(h = seat_height, r = 3.5, $fn = 10);\n    }\n}\n\nmodule seat_surface() {\n    // Seat slats\n    for(y = [-30:15:30]) {\n        translate([0, y, seat_height + 1])\n            cube([chair_width - 12, 12, wall_thickness], center = true);\n    }\n}\n\nmodule back_support() {\n    // Back slats with decorative curve\n    for(y = [-35:12:35]) {\n        difference() {\n            translate([0, y, (back_height + seat_height)/2])\n                cube([chair_width - 12, 8, back_height - seat_height], center = true);\n            \n            // Decorative cutouts\n            translate([0, y, (back_height + seat_height)/2 + 10])\n                cube([chair_width - 20, 6, 20], center = true);\n        }\n    }\n}\n\nmodule arm_rests() {\n    for(side = [-1, 1]) {\n        // Arm support posts\n        translate([side * (chair_width/2 - 3), chair_depth/2 - 25, seat_height + 15])\n            cylinder(h = 20, r = 3, $fn = 8);\n        \n        // Armrest surface\n        translate([side * (chair_width/2 - 10), 0, seat_height + 25])\n            rotate([0, side * 10, 0])\n            cube([10, chair_depth/2 + 10, wall_thickness], center = true);\n    }\n}\n\nmodule rockers() {\n    // Rocker base - curved runners\n    difference() {\n        union() {\n            for(side = [-1, 1]) {\n                translate([side * (chair_width/2 - 10), 0, -5])\n                    rotate([90, 0, 0])\n                    cylinder(h = chair_depth + 20, r = 50, center = true, $fn = 50);\n            }\n        }\n        \n        // Hollow out rockers\n        for(side = [-1, 1]) {\n            translate([side * (chair_width/2 - 10), 0, -5])\n                rotate([90, 0, 0])\n                cylinder(h = chair_depth + 25, r = 47, center = true, $fn = 50);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    seat_surface();\n    back_support();\n    arm_rests();\n    rockers();\n    \n    // Decorative finials on back posts\n    for(side = [-1, 1]) {\n        translate([side * (chair_width/2 - 5), 0, back_height + 3])\n            sphere(r = 5, $fn = 12);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "arcade",
    "openscad_code": "// Arcade Cabinet Furniture - Medium Complexity\n// Realistic style with 3D-printable features\n\n$fn = 32;\n\n// Overall dimensions\ncabinet_width = 40;\ncabinet_depth = 35;\ncabinet_height = 80;\n\n// Wall thickness\nwall_thickness = 2;\n\nmodule arcade_cabinet() {\n    // Main cabinet body\n    difference() {\n        // Outer shell\n        cube([cabinet_width, cabinet_depth, cabinet_height], center=false);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([cabinet_width-2*wall_thickness, \n                  cabinet_depth-2*wall_thickness, \n                  cabinet_height-wall_thickness], center=false);\n    }\n    \n    // Base support\n    translate([-2, -2, -5])\n        cube([cabinet_width+4, cabinet_depth+4, 5]);\n    \n    // Screen bezel\n    translate([wall_thickness, wall_thickness, cabinet_height-25])\n        cube([cabinet_width-2*wall_thickness, 5, 20]);\n    \n    // Screen\n    translate([wall_thickness+2, wall_thickness+1, cabinet_height-23])\n        color([0.1,0.1,0.1])\n        cube([cabinet_width-2*wall_thickness-4, 1, 16]);\n    \n    // Control panel\n    translate([wall_thickness, cabinet_depth-wall_thickness-8, 20])\n        cube([cabinet_width-2*wall_thickness, 8, 5]);\n    \n    // Joysticks\n    for(x = [cabinet_width/3, 2*cabinet_width/3]) {\n        translate([x, cabinet_depth-wall_thickness-4, 26])\n            cylinder(h=8, d1=4, d2=2);\n    }\n    \n    // Buttons\n    for(i = [0:3]) {\n        translate([cabinet_width/2 - 6 + i*4, cabinet_depth-wall_thickness-4, 26])\n            cylinder(h=2, d=3);\n    }\n    \n    // Coin slot\n    translate([cabinet_width/2-5, cabinet_depth-1, 40])\n        cube([10, 1, 2]);\n    \n    // Side art panels\n    color([0.8,0.1,0.1])\n    translate([0, 0, 10])\n        cube([wall_thickness, cabinet_depth, 30]);\n    \n    color([0.8,0.1,0.1])\n    translate([cabinet_width-wall_thickness, 0, 10])\n        cube([wall_thickness, cabinet_depth, 30]);\n    \n    // Top marquee\n    translate([0, 0, cabinet_height])\n    difference() {\n        // Marquee frame\n        cube([cabinet_width, cabinet_depth, 8]);\n        \n        // Marquee cutout\n        translate([wall_thickness, wall_thickness, 1])\n            cube([cabinet_width-2*wall_thickness, \n                  cabinet_depth-2*wall_thickness, \n                  6]);\n    }\n    \n    // Structural supports inside\n    translate([cabinet_width/2-wall_thickness/2, wall_thickness, 10])\n        cube([wall_thickness, cabinet_depth-2*wall_thickness, 30]);\n    \n    translate([wall_thickness, cabinet_depth/2-wall_thickness/2, 10])\n        cube([cabinet_width-2*wall_thickness, wall_thickness, 30]);\n}\n\n// Generate the arcade cabinet\narcade_cabinet();",
    "renders": true
  },
  {
    "decorative_art": "cloister",
    "openscad_code": "// Cloister-style miniature bench inspired by monastic refectory seating\n// Dimensions: 100 mm long × 35 mm deep × 45 mm high\n// Wall thickness: 2 mm everywhere for reliable FDM printing\n\n$fn = 30;   // Smooth curves for realism\n\n// Main assembly\nmodule cloister_bench() {\n    union() {\n        seat();\n        left_support();\n        right_support();\n        back_panel();\n        stretcher();\n    }\n}\n\n// Seat slab with rounded front edge and shallow groove decoration\nmodule seat() {\n    difference() {\n        union() {\n            // Main seat block\n            translate([0, 2, 43]) cube([100, 31, 2], center = true);\n            \n            // Rounded front lip\n            translate([0, 18, 42])\n                rotate([90,0,0])\n                    cylinder(h = 2, d1 = 31, d2 = 31, center = true);\n        }\n        \n        // Shallow longitudinal grooves for wood-grain effect\n        for (x = [-45:10:45])\n            translate([x, 2, 44])\n                cube([2, 31, 0.5], center = true);\n    }\n}\n\n// Left trestle support with gothic arch cut-outs\nmodule left_support() {\n    difference() {\n        union() {\n            // Outer frame\n            translate([-45, 0, 22.5]) cube([8, 35, 45], center = true);\n            \n            // Inner vertical slat\n            translate([-45, 0, 22.5]) cube([4, 4, 43], center = true);\n        }\n        \n        // Gothic arch windows\n        translate([-45, 10, 22.5])\n            rotate([0,90,0])\n                cylinder(h = 8.1, r = 10, center = true);\n        translate([-45, -10, 22.5])\n            rotate([0,90,0])\n                cylinder(h = 8.1, r = 10, center = true);\n                \n        // Fillets for printability\n        translate([-45, 0, 1]) cube([8.1, 35, 2], center = true);\n        translate([-45, 0, 44]) cube([8.1, 35, 2], center = true);\n    }\n}\n\n// Right trestle support (mirror of left)\nmodule right_support() {\n    mirror([1,0,0]) left_support();\n}\n\n// Ornate backrest with quatrefoil cut-outs\nmodule back_panel() {\n    difference() {\n        // Main backrest panel\n        translate([0, -15, 32]) cube([96, 2, 20], center = true);\n        \n        // Top edge crenellations\n        for (x = [-40:8:40])\n            translate([x, -15, 42])\n                cube([6, 2, 4], center = true);\n        \n        // Quatrefoil apertures\n        for (x = [-30:20:30])\n            translate([x, -15, 32])\n                rotate([0,0,45])\n                    cylinder(h = 2.1, r = 8, center = true);\n    }\n}\n\n// Lower stretcher rail for rigidity\nmodule stretcher() {\n    translate([0, 0, 2]) cube([90, 2, 4], center = true);\n}\n\n// Render the complete bench\ncloister_bench();",
    "renders": true
  },
  {
    "decorative_art": "gallery",
    "openscad_code": "// Gallery Pedestal Display Stand\n// Medium complexity realistic style\n// Overall dimensions: 80mm x 80mm x 120mm\n\n// Parameters\nbase_size = 80;\ntop_size = 65;\nheight = 120;\nwall_thickness = 2;\nleg_width = 8;\n\n// Main module\nmodule gallery_pedestal() {\n    difference() {\n        union() {\n            // Base platform\n            translate([0, 0, 0])\n                cube([base_size, base_size, 10], center=true);\n            \n            // Tapered body\n            for (i = [0:1:9]) {\n                translate([0, 0, 10 + i * 10])\n                    cube([\n                        base_size - i * 1.5,\n                        base_size - i * 1.5,\n                        10\n                    ], center=true);\n            }\n            \n            // Top platform\n            translate([0, 0, height])\n                cube([top_size, top_size, 8], center=true);\n            \n            // Decorative corner legs\n            for (x = [-1, 1])\n                for (y = [-1, 1]) {\n                    translate([x * (base_size/2 - leg_width/2), \n                              y * (base_size/2 - leg_width/2), \n                              height/2])\n                        rotate([0, 0, 45])\n                        cube([leg_width, leg_width, height], center=true);\n                }\n            \n            // Front decorative panel\n            translate([0, base_size/2 - 5, height/2])\n                cube([top_size - 10, 10, height - 20], center=true);\n            \n            // Back decorative panel\n            translate([0, -base_size/2 + 5, height/2])\n                cube([top_size - 10, 10, height - 20], center=true);\n                \n            // Side panels\n            translate([base_size/2 - 5, 0, height/2])\n                cube([10, top_size - 10, height - 20], center=true);\n            translate([-base_size/2 + 5, 0, height/2])\n                cube([10, top_size - 10, height - 20], center=true);\n        }\n        \n        // Hollow out the interior\n        translate([0, 0, height/2 + 5])\n            cube([\n                base_size - wall_thickness * 2, \n                base_size - wall_thickness * 2, \n                height - 5\n            ], center=true);\n            \n        // Create top display recess\n        translate([0, 0, height + 3.9])\n            cube([top_size - 20, top_size - 20, 5], center=true);\n            \n        // Decorative cutouts on panels\n        for (i = [1:3]) {\n            translate([0, base_size/2 - 5, i * 25])\n                cube([top_size - 30, 12, 5], center=true);\n            translate([0, -base_size/2 + 5, i * 25])\n                cube([top_size - 30, 12, 5], center=true);\n            translate([base_size/2 - 5, 0, i * 25])\n                cube([12, top_size - 30, 5], center=true);\n            translate([-base_size/2 + 5, 0, i * 25])\n                cube([12, top_size - 30, 5], center=true);\n        }\n    }\n    \n    // Add small feet\n    for (x = [-1, 1])\n        for (y = [-1, 1]) {\n            translate([x * (base_size/2 - 5), y * (base_size/2 - 5), -5])\n                cylinder(h=10, r1=4, r2=3, center=true);\n        }\n}\n\n// Render the model\ngallery_pedestal();",
    "renders": true
  },
  {
    "decorative_art": "vestibule",
    "openscad_code": "// Vestibule Furniture - Realistic Style, Medium Complexity\n// Compact decorative vestibule piece with storage and mirror\n\n$fn = 32;\n\n// Overall dimensions\nvestibule_width = 80;\nvestibule_height = 120;\nvestibule_depth = 35;\n\n// Wall thickness\nwall_thickness = 2;\n\nmodule vestibule_base() {\n    // Main body - hollowed box\n    difference() {\n        // Outer shell\n        cube([vestibule_width, vestibule_depth, vestibule_height]);\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([vestibule_width-2*wall_thickness, \n                  vestibule_depth-2*wall_thickness, \n                  vestibule_height-2*wall_thickness]);\n    }\n}\n\nmodule top_cornice() {\n    // Decorative top molding\n    translate([0, 0, vestibule_height])\n    union() {\n        // Main cornice block\n        cube([vestibule_width, vestibule_depth, 8]);\n        \n        // Decorative ridges\n        for(i = [0:3]) {\n            translate([i*20 + 5, -1, 8])\n                cube([10, vestibule_depth+2, 4]);\n        }\n    }\n}\n\nmodule bottom_base() {\n    // Raised base platform\n    translate([-2, -2, 0])\n    cube([vestibule_width+4, vestibule_depth+4, 6]);\n}\n\nmodule mirror_frame() {\n    // Mirror recess at top center\n    translate([(vestibule_width-30)/2, 2, vestibule_height-45])\n    difference() {\n        // Frame\n        cube([30, 4, 35]);\n        \n        // Mirror cutout\n        translate([wall_thickness, -1, wall_thickness])\n            cube([30-2*wall_thickness, 6, 35-2*wall_thickness]);\n    }\n}\n\nmodule hooks() {\n    // Coat hooks below mirror\n    for(i = [0:3]) {\n        translate([20 + i*15, vestibule_depth-1, vestibule_height-60])\n        rotate([90, 0, 0])\n            cylinder(h=8, d1=4, d2=2);\n    }\n}\n\nmodule shoe_shelf() {\n    // Lower shoe storage shelf\n    translate([5, 5, 15])\n    cube([vestibule_width-10, vestibule_depth-10, wall_thickness]);\n}\n\nmodule decorative_panel() {\n    // Side decorative panel with cutouts\n    translate([0, 0, 25])\n    difference() {\n        // Main panel\n        cube([wall_thickness, vestibule_depth, 80]);\n        \n        // Decorative cutouts\n        for(i = [0:2]) {\n            for(j = [0:1]) {\n                translate([wall_thickness, 5 + j*12, 10 + i*25])\n                    rotate([0, 90, 0])\n                        cylinder(h=wall_thickness+1, r=4);\n            }\n        }\n    }\n}\n\nmodule back_supports() {\n    // Rear mounting supports\n    translate([10, vestibule_depth-wall_thickness, 10])\n    cube([8, wall_thickness, vestibule_height-20]);\n    \n    translate([vestibule_width-18, vestibule_depth-wall_thickness, 10])\n    cube([8, wall_thickness, vestibule_height-20]);\n}\n\n// Assembly\nunion() {\n    vestibule_base();\n    top_cornice();\n    bottom_base();\n    mirror_frame();\n    hooks();\n    shoe_shelf();\n    \n    // Left and right decorative panels\n    translate([0, 0, 0])\n        decorative_panel();\n    translate([vestibule_width-wall_thickness, 0, 0])\n        mirror([1, 0, 0])\n            decorative_panel();\n    \n    back_supports();\n}",
    "renders": true
  },
  {
    "decorative_art": "lobby",
    "openscad_code": "// Lobby Coffee Table (realistic style, medium complexity)\n// Overall printable size: ~100mm x 60mm x 45mm\n\n// Global parameters\ntable_length = 100;\ntable_width = 60;\ntable_height = 45;\nwall_thickness = 2;\n\n// Leg parameters\nleg_size = 8;\nleg_height = 40;\nleg_inset = 5;\n\n// Shelf parameters\nshelf_height = 15;\nshelf_clearance = 3;\n\n// Decorative ring parameters\nring_height = 3;\nring_width = 4;\n\n// Main table assembly\nmodule coffee_table() {\n    // Top surface with rounded edge\n    difference() {\n        // Main top slab\n        translate([0, 0, table_height - 4])\n            cube([table_length, table_width, 4], center = true);\n        \n        // Rounded edge detail\n        translate([0, 0, table_height - 2])\n            cube([table_length - 8, table_width - 8, 4], center = true);\n    }\n    \n    // Lower shelf\n    translate([0, 0, shelf_height])\n        cube([table_length - 20, table_width - 20, wall_thickness], center = true);\n    \n    // Corner legs with decorative rings\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            // Main leg\n            translate([x * (table_length/2 - leg_inset - leg_size/2), \n                      y * (table_width/2 - leg_inset - leg_size/2), \n                      leg_height/2])\n                cube([leg_size, leg_size, leg_height], center = true);\n            \n            // Decorative ring at top of leg\n            translate([x * (table_length/2 - leg_inset - leg_size/2), \n                      y * (table_width/2 - leg_inset - leg_size/2), \n                      leg_height - 2])\n                cube([leg_size + ring_width, leg_size + ring_width, ring_height], center = true);\n        }\n    }\n    \n    // Center support beams\n    // Long beam\n    translate([0, 0, shelf_height + wall_thickness/2])\n        cube([table_length - 40, wall_thickness, wall_thickness], center = true);\n    \n    // Short beams\n    for (x = [-1, 1]) {\n        translate([x * (table_length/2 - 30), 0, shelf_height + wall_thickness/2])\n            cube([wall_thickness, table_width - 40, wall_thickness], center = true);\n    }\n    \n    // Decorative panel on lower shelf\n    translate([0, 0, shelf_height + wall_thickness + 1])\n        cube([table_length - 24, table_width - 24, 2], center = true);\n    \n    // Small feet pads\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (table_length/2 - leg_inset - leg_size/2), \n                      y * (table_width/2 - leg_inset - leg_size/2), \n                      1])\n                cylinder(h = 2, r = 4, center = true);\n        }\n    }\n}\n\n// Render the table\ncoffee_table();",
    "renders": true
  },
  {
    "decorative_art": "hallway",
    "openscad_code": "// Hallway console table with drawer and shelf\n// Overall dimensions: 120mm wide x 60mm deep x 75mm high\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main table structure\nmodule table_base() {\n    // Table top\n    translate([0, 0, 70])\n        cube([120, 60, 5], center=true);\n    \n    // Side panels\n    difference() {\n        // Left side\n        translate([-58, 0, 35])\n            cube([4, 60, 70], center=true);\n        // Inner cavity for weight reduction\n        translate([-57, 0, 35])\n            cube([2, 56, 68], center=true);\n    }\n    \n    difference() {\n        // Right side\n        translate([58, 0, 35])\n            cube([4, 60, 70], center=true);\n        // Inner cavity\n        translate([57, 0, 35])\n            cube([2, 56, 68], center=true);\n    }\n    \n    // Back panel\n    difference() {\n        translate([0, 28, 35])\n            cube([120, 4, 70], center=true);\n        // Inner cavity\n        translate([0, 27, 35])\n            cube([116, 2, 68], center=true);\n    }\n}\n\n// Lower shelf\nmodule lower_shelf() {\n    translate([0, 0, 20])\n        cube([112, 52, 3], center=true);\n}\n\n// Drawer module\nmodule drawer() {\n    // Drawer box\n    difference() {\n        translate([0, 0, 52])\n            cube([50, 54, 15], center=true);\n        // Inner cavity\n        translate([0, 0, 53])\n            cube([46, 50, 13], center=true);\n    }\n    \n    // Drawer front\n    difference() {\n        translate([0, -28, 45])\n            cube([54, 4, 18], center=true);\n        // Recessed panel\n        translate([0, -26, 45])\n            cube([48, 2, 14], center=true);\n    }\n    \n    // Drawer handle\n    translate([0, -31, 45])\n        rotate([90, 0, 0])\n            cylinder(h=15, r1=3, r2=3, center=true);\n}\n\n// Decorative legs\nmodule legs() {\n    // Front left leg\n    translate([-50, -20, 10])\n        cylinder(h=20, r1=2, r2=2, center=true);\n    \n    // Front right leg\n    translate([50, -20, 10])\n        cylinder(h=20, r1=2, r2=2, center=true);\n    \n    // Back legs (hidden against wall)\n    translate([-50, 20, 10])\n        cylinder(h=20, r1=2, r2=2, center=true);\n    \n    translate([50, 20, 10])\n        cylinder(h=20, r1=2, r2=2, center=true);\n}\n\n// Decorative back panel pattern\nmodule back_pattern() {\n    for(i = [-50:10:50]) {\n        translate([i, 30, 52.5])\n            cube([2, 2, 5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    table_base();\n    lower_shelf();\n    drawer();\n    legs();\n    back_pattern();\n}",
    "renders": true
  },
  {
    "decorative_art": "corridor",
    "openscad_code": "/* Corridor console table - 120 mm wide, 75 mm high, 35 mm deep\n   Wall-mountable slim hallway table with drawer and decorative front frame\n   Designed for FDM printing (no overhangs >45°, 2 mm walls, 0.2 mm detail) */\n\n$fn = 32;\n\n/* overall dimensions */\nwidth = 120;       // mm\ndepth = 35;        // mm\nheight = 75;       // mm\nwall = 2;          // mm shell thickness\n\nmodule table_top() {\n    difference() {\n        /* main slab */\n        translate([0, depth/2, height - wall])\n            cube([width, depth, wall], center = true);\n        /* finger-grip under-cut (print-friendly) */\n        translate([0, depth - wall - 1, height - wall - 1])\n            cube([width - 4*wall, 2, 2], center = true);\n    }\n}\n\nmodule front_frame() {\n    /* decorative beveled frame around drawer */\n    frame_w = width - 6*wall;\n    frame_h = height/3.5;\n    thickness = 2.5;\n\n    translate([0, depth/2 - wall, height/2])\n    difference() {\n        cube([frame_w + 2*thickness, thickness, frame_h + 2*thickness], center = true);\n        cube([frame_w, thickness + 0.1, frame_h], center = true);\n    }\n}\n\nmodule drawer_box() {\n    drawer_w = width - 10*wall;\n    drawer_d = depth - 3*wall;\n    drawer_h = height/3.8;\n\n    translate([0, drawer_d/2 + wall/2, height/2])\n    difference() {\n        /* outer shell */\n        cube([drawer_w, drawer_d, drawer_h], center = true);\n        /* cavity */\n        cube([drawer_w - 2*wall, drawer_d - wall, drawer_h - wall], center = true);\n    }\n}\n\nmodule drawer_face() {\n    face_w = width - 8*wall;\n    face_h = height/3.5;\n    translate([0, wall/2, height/2])\n    difference() {\n        cube([face_w, wall + 0.2, face_h], center = true);\n        /* slot handle */\n        translate([0, -wall/2, 0])\n            cube([face_w/2, wall + 1, 4], center = true);\n    }\n}\n\nmodule legs() {\n    leg_w = wall;\n    leg_h = height - wall;\n    leg_d = depth - 2*wall;\n    /* two side legs only (rear against wall) */\n    for (x = [-width/2 + leg_w/2, width/2 - leg_w/2])\n        translate([x, leg_d/2 + wall, leg_h/2])\n            cube([leg_w, leg_d, leg_h], center = true);\n}\n\nmodule back_panel() {\n    /* thin rear panel for wall mounting */\n    translate([0, wall/2, height/2 - wall/2])\n        cube([width, wall, height - wall], center = true);\n}\n\nmodule key_hook_bar() {\n    /* small rail under tabletop front edge */\n    hook_bar_w = width - 10*wall;\n    translate([0, depth - wall, height - 2*wall])\n        cube([hook_bar_w, wall, wall], center = true);\n}\n\n/* build the console */\nunion() {\n    table_top();\n    back_panel();\n    legs();\n    front_frame();\n    drawer_box();\n    drawer_face();\n    key_hook_bar();\n}",
    "renders": true
  },
  {
    "decorative_art": "passage",
    "openscad_code": "// Passage bench with arched backrest and turned legs\n// Overall footprint: 100mm x 40mm x 80mm (bench seat height 45mm)\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main seat plank\nmodule seat() {\n    difference() {\n        cube([100, 40, 6]);  // Seat surface\n        translate([wall, wall, -1])\n            cube([100-2*wall, 40-2*wall, 8]);  // Hollow out bottom\n    }\n}\n\n// Turned leg with rings\nmodule turned_leg(h) {\n    union() {\n        cylinder(h=h, d1=8, d2=8, $fn=20);  // Main shaft\n        \n        // Decorative rings\n        for(i = [0:3]) {\n            translate([0,0,i*h/4])\n                cylinder(h=2, d1=10, d2=10, $fn=20);\n        }\n    }\n}\n\n// Arched backrest slat\nmodule arched_slat(w, h, curve) {\n    difference() {\n        intersection() {\n            // Base slat\n            translate([-w/2, 0, 0])\n                cube([w, 4, h]);\n            \n            // Arch curve\n            translate([0, 2, curve])\n                sphere(r=curve, $fn=40);\n        }\n        // Hollow out\n        translate([-w/2+wall, wall, wall])\n            cube([w-2*wall, 4-wall, h-wall]);\n    }\n}\n\n// Decorative panel with cutouts\nmodule back_panel() {\n    difference() {\n        // Main panel\n        cube([90, 4, 30]);\n        \n        // Arched top edge\n        translate([45, 4, 0])\n            rotate([0,90,0])\n                cylinder(h=90, r=30, $fn=40);\n        \n        // Decorative cutouts\n        for(i = [15:30:75]) {\n            translate([i, 2, 10])\n                cylinder(h=4.1, r=6, $fn=20);\n        }\n    }\n}\n\n// Assemble the bench\nunion() {\n    // Seat\n    translate([0, 0, 45])\n        seat();\n    \n    // Backrest assembly\n    translate([5, 4, 51])\n        back_panel();\n    \n    // Three arched slats above back panel\n    for(i = [0:2]) {\n        translate([20 + i*30, 4, 81])\n            rotate([0, 0, 0])\n                arched_slat(25, 20, 25);\n    }\n    \n    // Four turned legs\n    translate([10, 10, 0])\n        turned_leg(45);\n    translate([90, 10, 0])\n        turned_leg(45);\n    translate([10, 30, 0])\n        turned_leg(45);\n    translate([90, 30, 0])\n        turned_leg(45);\n    \n    // Stretcher between front legs\n    translate([50, 20, 25])\n        rotate([90, 0, 0])\n            cylinder(h=80, r=3, $fn=16);\n    \n    // Side stretchers\n    translate([10, 25, 25])\n        rotate([90, 90, 0])\n            cylinder(h=20, r=3, $fn=16);\n    translate([90, 25, 25])\n        rotate([90, 90, 0])\n            cylinder(h=20, r=3, $fn=16);\n}",
    "renders": true
  },
  {
    "decorative_art": "stairwell",
    "openscad_code": "// Stairwell Bookcase - Realistic Style, Medium Complexity\n// Dimensions: 100mm x 60mm x 120mm (L x W x H)\n\n$fn = 32;\nwall_thickness = 2;\nscale_factor = 1;\n\nmodule post(width, depth, height) {\n    // Main post structure\n    difference() {\n        cube([width, depth, height]);\n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([width-2*wall_thickness, depth-2*wall_thickness, height-wall_thickness]);\n    }\n    \n    // Decorative cap\n    translate([0, 0, height])\n    difference() {\n        cube([width*1.2, depth*1.2, 3]);\n        translate([wall_thickness, wall_thickness, 0])\n            cube([width*1.2-2*wall_thickness, depth*1.2-2*wall_thickness, 3]);\n    }\n}\n\nmodule step(width, depth, thickness, height) {\n    // Main step\n    difference() {\n        cube([width, depth, thickness]);\n        translate([wall_thickness, wall_thickness, 0])\n            cube([width-2*wall_thickness, depth-2*wall_thickness, thickness-wall_thickness]);\n    }\n    \n    // Anti-slip ridges\n    for (i = [1:3]) {\n        translate([i*width/4, 0, thickness])\n            cube([1, depth, 1]);\n    }\n}\n\nmodule riser(width, height, thickness) {\n    difference() {\n        cube([width, thickness, height]);\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([width-2*wall_thickness, thickness-wall_thickness, height-2*wall_thickness]);\n    }\n}\n\nmodule back_panel(width, height, thickness) {\n    difference() {\n        cube([width, thickness, height]);\n        // Window cutouts\n        translate([10, wall_thickness, 20])\n            cube([width-20, thickness-wall_thickness*2, 15]);\n        translate([10, wall_thickness, 45])\n            cube([width-20, thickness-wall_thickness*2, 15]);\n    }\n}\n\nmodule stairwell() {\n    // Left post\n    post(6, 6, 100);\n    \n    // Right post\n    translate([94, 0, 0])\n        post(6, 6, 100);\n    \n    // Steps\n    for (i = [0:4]) {\n        translate([0, 6, i*20])\n            step(100-6, 60-12, 4, 20);\n        \n        // Risers\n        translate([0, 6, i*20+4])\n            riser(100-6, 16, 4);\n    }\n    \n    // Top platform\n    translate([0, 6, 100])\n        step(100-6, 60-12, 4, 20);\n    \n    // Back panel\n    translate([0, 60-6, 0])\n        back_panel(100, 100, 4);\n    \n    // Side rails\n    translate([0, 6, 80])\n        cube([4, 60-12, 4]);\n    translate([100-4, 6, 80])\n        cube([4, 60-12, 4]);\n    \n    // Middle support posts\n    translate([30, 6, 0])\n        post(4, 4, 100);\n    translate([70, 6, 0])\n        post(4, 4, 100);\n}\n\n// Main assembly\nstairwell();",
    "renders": true
  },
  {
    "decorative_art": "elevator",
    "openscad_code": "// Elevator Furniture Model - Realistic Style\n// Medium complexity elevator with proper furniture proportions\n\n// Main parameters\nwall_thickness = 2;\nelevator_width = 40;\nelevator_depth = 40;\nelevator_height = 80;\ndoor_width = 20;\ndoor_height = 60;\n\n// Frame module with rounded corners\nmodule frame_piece(length, width, height, radius) {\n    difference() {\n        cube([length, width, height]);\n        translate([radius, radius, -1])\n            cube([length-radius*2, width-radius*2, height+2]);\n        translate([length-radius, radius, -1])\n            cube([radius, width-radius*2, height+2]);\n        translate([radius, width-radius, -1])\n            cube([length-radius*2, radius, height+2]);\n        translate([length-radius, width-radius, -1])\n            cube([radius, radius, height+2]);\n    }\n}\n\n// Decorative panel with grooves\nmodule decorative_panel(width, height, depth) {\n    difference() {\n        cube([width, depth, height]);\n        // Vertical grooves\n        for(i = [1:2:width-2]) {\n            translate([i, depth-1, 2])\n                cube([1, 2, height-4]);\n        }\n        // Top border groove\n        translate([2, depth-1, height-3])\n            cube([width-4, 2, 1]);\n        // Bottom border groove\n        translate([2, depth-1, 2])\n            cube([width-4, 2, 1]);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    union() {\n        // Panel base\n        translate([-wall_thickness, -wall_thickness, elevator_height-20])\n            cube([15, wall_thickness+2, 15]);\n        \n        // Buttons\n        for(i = [0:2]) {\n            translate([2+i*4, -wall_thickness-1, elevator_height-18+i*4])\n                sphere(1.2);\n        }\n        \n        // Display\n        translate([2, -wall_thickness-1, elevator_height-8])\n            cube([10, 0.5, 5]);\n    }\n}\n\n// Door handle\nmodule door_handle() {\n    union() {\n        // Handle base\n        translate([0, -wall_thickness-1, door_height/2])\n            cube([3, wall_thickness+2, 2]);\n        \n        // Handle grip\n        translate([-1, -wall_thickness-3, door_height/2-2])\n            rotate([0, 90, 0])\n                cylinder(h=8, r=1, $fn=12);\n    }\n}\n\n// Main elevator structure\nmodule elevator() {\n    difference() {\n        // Outer shell\n        union() {\n            // Back wall\n            translate([0, 0, 0])\n                cube([elevator_width, wall_thickness, elevator_height]);\n            \n            // Left wall\n            translate([0, 0, 0])\n                cube([wall_thickness, elevator_depth, elevator_height]);\n            \n            // Right wall\n            translate([elevator_width-wall_thickness, 0, 0])\n                cube([wall_thickness, elevator_depth, elevator_height]);\n            \n            // Top\n            translate([0, 0, elevator_height-wall_thickness])\n                cube([elevator_width, elevator_depth, wall_thickness]);\n            \n            // Bottom floor\n            translate([wall_thickness, wall_thickness, 0])\n                cube([elevator_width-wall_thickness*2, elevator_depth-wall_thickness, wall_thickness]);\n            \n            // Frame around door opening\n            translate([0, elevator_depth-wall_thickness, 0])\n                frame_piece(door_width, wall_thickness, door_height, 2);\n            translate([door_width, elevator_depth-wall_thickness, 0])\n                frame_piece(elevator_width-door_width, wall_thickness, door_height, 2);\n            translate([0, elevator_depth-wall_thickness, door_height])\n                frame_piece(elevator_width, wall_thickness, elevator_height-door_height, 2);\n        }\n        \n        // Door opening\n        translate([wall_thickness, elevator_depth-wall_thickness, wall_thickness])\n            cube([door_width-wall_thickness*2, wall_thickness+1, door_height-wall_thickness]);\n    }\n    \n    // Interior decorative panels\n    translate([wall_thickness+2, wall_thickness+1, wall_thickness+2])\n        decorative_panel(elevator_width-wall_thickness*4-4, elevator_height-wall_thickness*4, 1);\n    \n    // Side decorative panels\n    translate([wall_thickness+1, wall_thickness+2, wall_thickness+2])\n        rotate([0, 0, 90])\n            decorative_panel(elevator_depth-wall_thickness*4-2, elevator_height-wall_thickness*4, 1);\n    \n    // Control panel on right wall\n    translate([elevator_width-wall_thickness-3, wall_thickness+2, 0])\n        control_panel();\n    \n    // Doors (closed position)\n    translate([wall_thickness, elevator_depth-wall_thickness-1, wall_thickness])\n        cube([door_width/2-wall_thickness, wall_thickness+2, door_height-wall_thickness]);\n    translate([wall_thickness+door_width/2, elevator_depth-wall_thickness-1, wall_thickness])\n        cube([door_width/2-wall_thickness, wall_thickness+2, door_height-wall_thickness]);\n    \n    // Door handles\n    translate([wall_thickness+door_width/2-2, elevator_depth-wall_thickness-1, wall_thickness+10])\n        door_handle();\n    translate([wall_thickness+door_width/2+2, elevator_depth-wall_thickness-1, wall_thickness+door_height-15])\n        mirror([1, 0, 0])\n            door_handle();\n}\n\n// Generate the elevator\nelevator();",
    "renders": true
  },
  {
    "decorative_art": "escalator",
    "openscad_code": "// Realistic Escalator Furniture Item\n// Medium complexity decorative art piece\n\n// Parameters\nstep_width = 8;\nstep_thickness = 2;\nstep_height = 5;\nnum_steps = 10;\nangle = 30;\npillar_width = 6;\nwall_thickness = 2;\nhandrail_height = 15;\nlength = 80;\nheight = 40;\n\n// Main escalator structure\nmodule escalator() {\n    // Base platform\n    translate([0, 0, 0])\n        cube([length + 10, step_width + 20, 3], center = true);\n    \n    // Left structural wall\n    translate([-length/2 - 5, -step_width/2 - 10, height/2])\n        cube([wall_thickness, 10, height]);\n    \n    // Right structural wall\n    translate([-length/2 - 5, step_width/2 + 10, height/2])\n        cube([wall_thickness, 10, height]);\n    \n    // Steps module\n    for (i = [0:num_steps-1]) {\n        translate([\n            -length/2 + i * (length/num_steps),\n            0,\n            i * (height/num_steps) * sin(angle)\n        ]) rotate([0, -angle, 0])\n            cube([step_thickness, step_width, step_height], center = true);\n    }\n    \n    // Handrail left\n    translate([-length/2, -step_width/2 - 5, handrail_height])\n        cylinder(h = length, r = 1, center = true);\n    translate([-length/2, -step_width/2 - 5, 3])\n        cylinder(h = handrail_height - 3, r = 1);\n    \n    // Handrail right\n    translate([-length/2, step_width/2 + 5, handrail_height])\n        cylinder(h = length, r = 1, center = true);\n    translate([-length/2, step_width/2 + 5, 3])\n        cylinder(h = handrail_height - 3, r = 1);\n    \n    // Support pillars\n    for (pos = [-length/3, 0, length/3]) {\n        translate([pos, 0, 0])\n            cylinder(h = 5, r = pillar_width/2, center = true);\n    }\n    \n    // Decorative side panels with pattern\n    module side_panel(x) {\n        translate([x, 0, height/2 + 5])\n            cube([wall_thickness, step_width + 20, 5], center = true);\n        \n        // Decorative holes\n        for (i = [-3:3]) {\n            translate([x, i * 5, height/2 + 5])\n                cylinder(h = 6, r = 1.5, center = true);\n        }\n    }\n    \n    side_panel(-length/2 - 5);\n    side_panel(length/2 + 5);\n    \n    // Top landing platform\n    translate([length/2, 0, height + 2])\n        cube([15, step_width + 20, 4], center = true);\n    \n    // Bottom landing platform\n    translate([-length/2, 0, 0])\n        cube([15, step_width + 20, 4], center = true);\n    \n    // Support beams underneath\n    translate([0, -step_width/2 - 5, -2])\n        cube([length + 10, 3, 4], center = true);\n    translate([0, step_width/2 + 5, -2])\n        cube([length + 10, 3, 4], center = true);\n}\n\n// Main assembly\nescalator();\n\n// Decorative end caps\ntranslate([-length/2 - 7.5, 0, 0])\n    sphere(r = 3);\n\ntranslate([length/2 + 7.5, 0, height + 4])\n    sphere(r = 3);",
    "renders": true
  },
  {
    "decorative_art": "mezzanine",
    "openscad_code": "// Mezzanine bed frame with integrated desk and bookshelf\n// Overall size: 100mm x 80mm x 60mm (L x W x H)\n\n$fn = 32;\nwall_thickness = 2;\nbed_length = 100;\nbed_width = 60;\nbed_height = 25;\ndesk_height = 30;\nleg_size = 4;\n\n// Main bed platform\nmodule bed_platform() {\n    difference() {\n        // Main bed surface\n        translate([0, 0, bed_height - 2])\n            cube([bed_length, bed_width, 2], center = true);\n        \n        // Headboard cutout\n        translate([bed_length/2 - 15, 0, bed_height - 2])\n            cube([30, bed_width - 4, 4], center = true);\n    }\n    \n    // Side rails\n    translate([0, bed_width/2 - wall_thickness/2, bed_height/2])\n        cube([bed_length - 4, wall_thickness, bed_height], center = true);\n    translate([0, -bed_width/2 + wall_thickness/2, bed_height/2])\n        cube([bed_length - 4, wall_thickness, bed_height], center = true);\n}\n\n// Support legs\nmodule support_legs() {\n    for(x = [-bed_length/2 + 5, bed_length/2 - 5]) {\n        for(y = [-bed_width/2 + 5, bed_width/2 - 5]) {\n            translate([x, y, bed_height/2])\n                cube([leg_size, leg_size, bed_height], center = true);\n        }\n    }\n}\n\n// Desk surface underneath\nmodule desk() {\n    // Main desk surface\n    translate([0, 0, desk_height/2])\n        cube([bed_length - 20, bed_width - 10, 2], center = true);\n    \n    // Desk front edge\n    translate([0, -bed_width/2 + 5 + 1, desk_height/2])\n        cube([bed_length - 20, 2, desk_height], center = true);\n}\n\n// Bookshelf support structure\nmodule bookshelf() {\n    // Vertical supports\n    translate([bed_length/2 - 10, 0, (bed_height + desk_height)/2])\n        cube([wall_thickness, bed_width - 10, bed_height - desk_height], center = true);\n    \n    // Shelves\n    for(z = [desk_height + 5, desk_height + 10, desk_height + 15]) {\n        translate([bed_length/2 - 15, 0, z])\n            cube([10, bed_width - 14, 2], center = true);\n    }\n}\n\n// Ladder\nmodule ladder() {\n    // Side rails\n    translate([bed_length/2 - 5, bed_width/2 - 5, (bed_height + 5)/2])\n        cube([wall_thickness, leg_size, bed_height + 5], center = true);\n    translate([bed_length/2 - 15, bed_width/2 - 5, (bed_height + 5)/2])\n        cube([wall_thickness, leg_size, bed_height + 5], center = true);\n    \n    // Rungs\n    for(i = [1:3]) {\n        translate([bed_length/2 - 10, bed_width/2 - 5, i * 5])\n            cube([10, leg_size, wall_thickness], center = true);\n    }\n}\n\n// Safety railing\nmodule safety_railing() {\n    // Back railing\n    translate([-bed_length/2 + 5, 0, bed_height + 3])\n        cube([10, bed_width - 4, wall_thickness], center = true);\n    \n    // Side railing posts\n    for(x = [-bed_length/2 + 10:15:bed_length/2 - 20]) {\n        translate([x, bed_width/2 - 3, bed_height + 3])\n            cylinder(r=1, h=6);\n    }\n}\n\n// Assembly\nunion() {\n    bed_platform();\n    support_legs();\n    desk();\n    bookshelf();\n    ladder();\n    safety_railing();\n}",
    "renders": true
  },
  {
    "decorative_art": "loft",
    "openscad_code": "// Loft-style industrial side table\n// Dimensions: 80mm x 60mm x 100mm\n\nmodule leg(x, y) {\n    // Main leg post - 2mm wall thickness\n    difference() {\n        cylinder(h=100, d=8, $fn=16);\n        translate([0, 0, 2])\n            cylinder(h=98, d=4, $fn=16);\n    }\n    \n    // Base foot\n    translate([0, 0, -1])\n        cylinder(h=3, d=12, $fn=16);\n    \n    // Top connector\n    translate([0, 0, 100])\n        cylinder(h=5, d=10, $fn=16);\n}\n\nmodule shelf(width, depth, height, thickness=2) {\n    // Main shelf surface\n    difference() {\n        cube([width, depth, thickness]);\n        // Grid pattern cutouts\n        for(x = [width/4:width/4:width-width/4])\n            for(y = [depth/4:depth/4:depth-depth/4])\n                translate([x-3, y-3, -1])\n                    cube([6, 6, thickness+2]);\n    }\n    \n    // Edge trim\n    color(\"gray\")\n    translate([0, 0, thickness])\n        cube([width, depth, 1]);\n}\n\nmodule cross_brace() {\n    // Diagonal support bar\n    rotate([0, 0, 45])\n        cube([2, 50*sqrt(2), 6]);\n}\n\n// Main table assembly\nunion() {\n    // Top shelf\n    shelf(80, 60, 100, 3);\n    \n    // Bottom shelf\n    translate([0, 0, 30])\n        shelf(80, 60, 30, 3);\n    \n    // Four legs\n    leg(-35, -25);\n    leg(35, -25);\n    leg(-35, 25);\n    leg(35, 25);\n    \n    // Side cross braces\n    translate([0, 0, 65])\n        rotate([90, 0, 0])\n            cross_brace();\n    \n    translate([0, 0, 65])\n        rotate([0, 90, 0])\n            cross_brace();\n    \n    // Back panel with cutout\n    difference() {\n        translate([-40, -30, 15])\n            cube([2, 60, 70]);\n        \n        // Circular cutout for cable management\n        translate([-41, 0, 50])\n            rotate([0, 90, 0])\n                cylinder(h=3, d=20, $fn=32);\n    }\n    \n    // Industrial rivet details\n    module rivet(x, y, z) {\n        translate([x, y, z])\n            sphere(d=3, $fn=16);\n    }\n    \n    // Rivets on legs\n    for(i = [0:3]) {\n        angle = i * 90;\n        x = cos(angle) * 35;\n        y = sin(angle) * 25;\n        for(h = [10:20:90]) {\n            rivet(x, y, h);\n        }\n    }\n    \n    // Bottom support frame\n    translate([-40, -30, 30])\n        cube([80, 2, 3]);\n    translate([-40, 28, 30])\n        cube([80, 2, 3]);\n    translate([-40, -30, 30])\n        cube([2, 60, 3]);\n    translate([38, -30, 30])\n        cube([2, 60, 3]);\n}",
    "renders": true
  },
  {
    "decorative_art": "attic",
    "openscad_code": "// Attic Chest Trunk - Realistic Style\n// A medium-complexity decorative storage trunk suitable for 3D printing\n\n$fn = 32;\n\n// Main dimensions\ntrunk_length = 100;\ntrunk_width = 60;\ntrunk_height = 50;\nwall_thickness = 2;\n\nmodule trunk_body() {\n    difference() {\n        // Main body\n        cube([trunk_length, trunk_width, trunk_height], center=true);\n        \n        // Hollow inside\n        translate([0, 0, wall_thickness/2])\n            cube([trunk_length-wall_thickness*2, trunk_width-wall_thickness*2, trunk_height-wall_thickness*2], center=true);\n    }\n}\n\nmodule curved_lid() {\n    difference() {\n        // Curved top using scaled cylinder\n        translate([0, 0, trunk_height/2])\n            scale([trunk_length/2, trunk_width/2, trunk_height/4])\n                sphere(r=1);\n        \n        // Remove bottom half\n        translate([0, 0, 0])\n            cube([trunk_length*2, trunk_width*2, trunk_height/2], center=true);\n    }\n}\n\nmodule metal_band(pos) {\n    translate([pos, 0, 0]) {\n        // Vertical band\n        cube([wall_thickness, trunk_width+2, trunk_height+2], center=true);\n        \n        // Top rivets\n        for(i = [-trunk_width/3, 0, trunk_width/3]) {\n            translate([0, i, trunk_height/2-2])\n                sphere(r=1.5);\n        }\n        \n        // Bottom rivets\n        for(i = [-trunk_width/3, 0, trunk_width/3]) {\n            translate([0, i, -trunk_height/2+2])\n                sphere(r=1.5);\n        }\n    }\n}\n\nmodule lock_plate() {\n    translate([trunk_length/2+1, 0, 0]) {\n        // Lock plate\n        cube([wall_thickness*3, 15, 20], center=true);\n        \n        // Lock hasp\n        translate([wall_thickness*1.5, 0, trunk_height/4])\n            rotate([90, 0, 0])\n                cylinder(h=8, r1=3, r2=3);\n        \n        // Keyhole\n        translate([wall_thickness*1.5, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=10, r1=2, r2=1.5);\n    }\n}\n\nmodule side_handles() {\n    // Left handle\n    translate([-trunk_length/2-5, 0, 0])\n        rotate([0, 0, 90])\n            cylinder(h=10, r=2, center=true);\n    \n    // Right handle\n    translate([trunk_length/2+5, 0, 0])\n        rotate([0, 0, 90])\n            cylinder(h=10, r=2, center=true);\n}\n\nmodule decorative_corners() {\n    // Front corners\n    for(x = [-trunk_length/2+2, trunk_length/2-2])\n        for(y = [-trunk_width/2+2, trunk_width/2-2]) {\n            translate([x, y, trunk_height/2-2])\n                rotate([0, 0, 45])\n                    cube([4, 4, 4], center=true);\n        }\n}\n\n// Assemble the trunk\nunion() {\n    // Main body\n    trunk_body();\n    \n    // Lid\n    translate([0, 0, trunk_height/2])\n        curved_lid();\n    \n    // Metal bands\n    metal_band(-trunk_length/3);\n    metal_band(0);\n    metal_band(trunk_length/3);\n    \n    // Lock mechanism\n    lock_plate();\n    \n    // Side handles\n    side_handles();\n    \n    // Decorative corner pieces\n    decorative_corners();\n}",
    "renders": true
  },
  {
    "decorative_art": "basement",
    "openscad_code": "// Basement Storage Cabinet with Reinforced Frame and Ventilation\n// Overall dimensions: 100mm W x 50mm D x 120mm H\n\nmodule storage_cabinet() {\n    // Main cabinet body\n    difference() {\n        // Outer shell with 2mm walls\n        cube([100, 50, 120], center=false);\n        // Hollow interior\n        translate([2, 2, 2])\n            cube([96, 46, 116], center=false);\n    }\n    \n    // Reinforced base frame\n    translate([-5, -5, -5]) {\n        // Front base beam\n        translate([0, 0, 0])\n            cube([110, 10, 5], center=false);\n        // Rear base beam\n        translate([0, 45, 0])\n            cube([110, 10, 5], center=false);\n        // Left base beam\n        translate([0, 0, 0])\n            cube([10, 50, 5], center=false);\n        // Right base beam\n        translate([95, 0, 0])\n            cube([10, 50, 5], center=false);\n    }\n    \n    // Door panels with hinges\n    module door() {\n        difference() {\n            cube([48, 4, 114], center=false);\n            translate([2, 2, 2])\n                cube([44, 2, 110], center=false);\n        }\n        // Door handle\n        translate([20, 2, 55])\n            cylinder(h=10, r=2, center=false);\n        // Hinge cylinders\n        for(i=[0:1]) {\n            translate([0, 2, 20 + i*70])\n                rotate([90, 0, 0])\n                    cylinder(h=3, r=2, center=false);\n        }\n    }\n    \n    // Left door\n    translate([2, 0, 2])\n        door();\n    \n    // Right door\n    translate([50, 0, 2])\n        door();\n    \n    // Internal shelf supports\n    for(level=[1:2]) {\n        translate([2, 2, 40*level]) {\n            difference() {\n                cube([96, 2, 2], center=false);\n                // Ventilation holes\n                for(i=[0:4]) {\n                    translate([10 + i*20, 0, 0])\n                        cube([5, 2, 2], center=false);\n                }\n            }\n        }\n    }\n    \n    // Middle shelf\n    translate([2, 4, 42])\n        cube([96, 42, 2], center=false);\n    \n    // Ventilation grille on rear panel\n    translate([97, 5, 60]) {\n        for(row=[0:5]) {\n            for(col=[0:3]) {\n                translate([col*10, 0, row*15])\n                    cube([8, 2, 2], center=false);\n            }\n        }\n    }\n    \n    // Side panel strengthening ribs\n    for(side=[0,1]) {\n        translate([side*98, 0, 0]) {\n            for(i=[0:4]) {\n                translate([2, 5, 20 + i*20])\n                    cube([2, 40, 10], center=false);\n            }\n        }\n    }\n    \n    // Top decorative molding\n    translate([0, 0, 118]) {\n        difference() {\n            cube([100, 50, 4], center=false);\n            translate([2, 2, 2])\n                cube([96, 46, 4], center=false);\n        }\n        // Crown details\n        for(i=[0:3]) {\n            translate([10 + i*25, 0, 4])\n                cube([15, 2, 2], center=false);\n        }\n    }\n}\n\n// Assembly\nstorage_cabinet();",
    "renders": true
  },
  {
    "decorative_art": "cellar",
    "openscad_code": "// OpenSCAD cellar wine rack – 3D-printable, realistic, medium complexity\n// External size ≈ 120 mm (W) × 60 mm (D) × 110 mm (H)\n\n$fa = 1;\n$fs = 1;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Overall outside dimensions\now = 120;     // width\nod = 60;      // depth\noh = 110;     // height\n\n// Inner cavity for bottles\niw = ow - 2*wall;\nid = od - 2*wall;\nih = oh - 4*wall;   // leave base + top\n\n// Bottle hole parameters\nbottle_d = 22;      // Bordeaux style\nbottle_r = bottle_d/2;\nrows = 3;\ncols = 4;\nspacing = 32;\n\n// Base thickness\nbase_h = 15;\n\n// Door frame\ndoor_w = ow * 0.45;\ndoor_h = oh - 10;\n\n// Legs\nleg = 8;\nleg_h = 15;\n\n// MODULES --------------------------------------------------------------\n\nmodule body() {\n    difference() {\n        // Main box\n        cube([ow, od, oh]);\n        // Hollow inside\n        translate([wall, wall, base_h])\n            cube([iw, id, ih + 2]);   // cut slightly higher to clean top\n    }\n}\n\nmodule legs() {\n    for (x = [leg/2, ow - leg/2], y = [leg/2, od - leg/2]) {\n        translate([x, y, 0])\n            cube([leg, leg, leg_h], center = true);\n    }\n}\n\nmodule bottle_holes() {\n    // Center grid in cavity\n    gx = (cols - 1) * spacing;\n    gy = (rows - 1) * spacing;\n    ox = (ow - gx)/2;\n    oy = (od - gy)/2;\n    for (i = [0 : cols-1], j = [0 : rows-1]) {\n        translate([ox + i*spacing, oy + j*spacing, base_h + bottle_r])\n            rotate([90, 0, 0])\n                cylinder(h = id + 2, r = bottle_r + 0.5, $fn = 32);\n    }\n}\n\nmodule door() {\n    difference() {\n        // Frame\n        translate([ow - door_w - 2, -0.1, (oh - door_h)/2])\n            cube([door_w + 2, wall + 0.2, door_h]);\n        // Window\n        translate([ow - door_w + 2, -0.05, (oh - door_h)/2 + 5])\n            cube([door_w - 8, wall + 0.1, door_h - 10]);\n    }\n    // Handle\n    translate([ow - 5, -wall - 1, (oh - door_h)/2 + door_h/2])\n        rotate([90, 0, 0])\n            cylinder(h = 10, r = 2, $fn = 16);\n}\n\nmodule arch_detail() {\n    // Decorative arch on top front\n    difference() {\n        translate([ow/2, od, oh])\n            scale([1.1, 0.6, 0.3])\n                sphere(r = ow/2.5, $fn = 64);\n        // Flat bottom\n        translate([0, 0, oh - 1])\n            cube([ow*2, od*2, 2]);\n    }\n}\n\n// ASSEMBLY --------------------------------------------------------------\n\nunion() {\n    legs();\n    body();\n    bottle_holes();\n    door();\n    arch_detail();\n}",
    "renders": true
  },
  {
    "decorative_art": "substructure",
    "openscad_code": "// Substructure Furniture Item: Decorative Bracket Shelf Support\n// Realistic style with medium complexity\n// Dimensions: 120mm x 80mm x 40mm (L x H x D)\n\n$fn = 32; // Smooth curves for realistic appearance\n\n// Main parameters\nwall_thickness = 2;\nbracket_length = 120;\nbracket_height = 80;\nbracket_depth = 40;\n\n// Decorative elements\nfillet_radius = 4;\nscrew_head_diameter = 8;\nscrew_hole_diameter = 4;\n\nmodule main_bracket() {\n    difference() {\n        // Main body with rounded edges\n        union() {\n            // Central spine\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([bracket_length - 2*wall_thickness, bracket_height - 2*wall_thickness, bracket_depth - 2*wall_thickness]);\n            \n            // Top flange\n            translate([0, bracket_height - wall_thickness, 0])\n                cube([bracket_length, wall_thickness, bracket_depth]);\n            \n            // Bottom flange\n            translate([0, 0, 0])\n                cube([bracket_length, wall_thickness, bracket_depth]);\n            \n            // Side ribs for strength\n            for(i = [1:3]) {\n                translate([i * bracket_length/4 - wall_thickness/2, wall_thickness, wall_thickness])\n                    cube([wall_thickness, bracket_height - 2*wall_thickness, bracket_depth - 2*wall_thickness]);\n            }\n            \n            // Decorative curve support\n            translate([bracket_length - 20, 0, bracket_depth/2])\n                rotate([90, 0, 0])\n                    cylinder(h = 20, r1 = 10, r2 = 5);\n        }\n        \n        // Screw holes (3 along top flange)\n        for(i = [0:2]) {\n            translate([20 + i * 40, bracket_height - wall_thickness/2, bracket_depth/2])\n                rotate([90, 0, 0])\n                    cylinder(h = wall_thickness + 1, r = screw_hole_diameter/2);\n        }\n        \n        // Wall mounting holes (2 on back)\n        for(i = [0:1]) {\n            translate([30 + i * 60, bracket_height/2, wall_thickness/2])\n                rotate([0, 90, 0])\n                    cylinder(h = wall_thickness + 1, r = screw_hole_diameter/2);\n        }\n        \n        // Lightening holes in side ribs\n        for(i = [1:3]) {\n            translate([i * bracket_length/4, bracket_height/2, bracket_depth/2])\n                rotate([0, 90, 0])\n                    cylinder(h = wall_thickness + 1, r = 3);\n        }\n    }\n}\n\nmodule decorative_pattern() {\n    // Victorian-style cutout pattern\n    difference() {\n        // Pattern base\n        translate([10, 10, wall_thickness])\n            cube([bracket_length - 20, bracket_height - 20, wall_thickness]);\n        \n        // Decorative circles\n        for(i = [1:2]) {\n            for(j = [1:3]) {\n                translate([i * bracket_length/3, j * bracket_height/4, wall_thickness - 0.5])\n                    cylinder(h = wall_thickness + 1, r = 4);\n            }\n        }\n        \n        // Center diamond\n        translate([bracket_length/2, bracket_height/2, wall_thickness - 0.5])\n            rotate([0, 0, 45])\n                cube([12, 12, wall_thickness + 1]);\n    }\n}\n\nmodule support_gussets() {\n    // Triangular gussets for reinforcement\n    for(pos = [20, bracket_length - 20]) {\n        translate([pos, wall_thickness, 0])\n            rotate([0, -90, 0])\n                linear_extrude(height = wall_thickness)\n                    polygon(points=[[0,0], [0,15], [15,0]]);\n    }\n}\n\n// Assembly\nunion() {\n    main_bracket();\n    decorative_pattern();\n    support_gussets();\n}\n\n// Optional mounting plate detail\ntranslate([0, -1, bracket_depth/2 - wall_thickness/2])\n    cube([bracket_length, 1, wall_thickness]);",
    "renders": true
  },
  {
    "decorative_art": "superstructure",
    "openscad_code": "// Superstructure Bookcase Model\n// Realistic style, medium complexity\n\n// Overall dimensions\nwidth = 80;\ndepth = 30;\nheight = 120;\nwall_thickness = 2;\n\nmodule bookcase_frame() {\n    // Bottom base frame\n    translate([0, 0, 0])\n        cube([width, depth, wall_thickness]);\n    \n    // Top frame\n    translate([0, 0, height - wall_thickness])\n        cube([width, depth, wall_thickness]);\n    \n    // Left side\n    translate([0, 0, 0])\n        cube([wall_thickness, depth, height]);\n    \n    // Right side\n    translate([width - wall_thickness, 0, 0])\n        cube([wall_thickness, depth, height]);\n    \n    // Back panel\n    translate([0, depth - wall_thickness, 0])\n        cube([width, wall_thickness, height]);\n}\n\nmodule shelves() {\n    shelf_spacing = height / 5;\n    for(i = [1:4]) {\n        translate([wall_thickness, wall_thickness, i * shelf_spacing])\n            cube([width - 2 * wall_thickness, depth - 2 * wall_thickness, wall_thickness]);\n    }\n}\n\nmodule vertical_divider() {\n    center_x = width / 2;\n    translate([center_x - wall_thickness/2, wall_thickness, wall_thickness])\n        cube([wall_thickness, depth - 2 * wall_thickness, height - 2 * wall_thickness]);\n}\n\nmodule back_panel_detail() {\n    // Decorative holes pattern\n    hole_size = 3;\n    hole_spacing = 10;\n    \n    difference() {\n        translate([0, depth - wall_thickness, 0])\n            cube([width, wall_thickness, height]);\n        \n        for(x = [hole_spacing:hole_spacing:width - hole_spacing]) {\n            for(y = [hole_spacing:hole_spacing:height - hole_spacing]) {\n                translate([x, depth - wall_thickness - 0.5, y])\n                    rotate([90, 0, 0])\n                        cylinder(h = wall_thickness + 1, r = hole_size/2, $fn = 16);\n            }\n        }\n    }\n}\n\nmodule support_brackets() {\n    bracket_size = 8;\n    bracket_thickness = 2;\n    \n    // Left brackets\n    for(z = [height/5:height/5:height - height/5]) {\n        translate([wall_thickness, wall_thickness, z - bracket_size/2])\n            cube([bracket_size, bracket_thickness, bracket_size]);\n    }\n    \n    // Right brackets\n    for(z = [height/5:height/5:height - height/5]) {\n        translate([width - wall_thickness - bracket_size, wall_thickness, z - bracket_size/2])\n            cube([bracket_size, bracket_thickness, bracket_size]);\n    }\n}\n\nmodule top_molding() {\n    molding_height = 5;\n    molding_width = 2;\n    \n    // Front molding\n    translate([-molding_width, -molding_width, height])\n        cube([width + 2 * molding_width, depth + 2 * molding_width, molding_height]);\n    \n    // Inner cutout for profile\n    translate([0, 0, height + molding_height - wall_thickness])\n        cube([width, depth, molding_height]);\n}\n\n// Main assembly\nunion() {\n    bookcase_frame();\n    shelves();\n    vertical_divider();\n    back_panel_detail();\n    support_brackets();\n    top_molding();\n}",
    "renders": true
  },
  {
    "decorative_art": "pinnacle",
    "openscad_code": "// Pinnacle Furniture Piece - Decorative Wall Shelf\n// Realistic style, medium complexity\n// Height: 120mm, Width: 100mm, Depth: 45mm\n\nmodule shelf_base() {\n    // Main shelf platform with rounded edges\n    difference() {\n        // Main platform\n        translate([0, 0, 2]) {\n            cube([100, 45, 4], center=true);\n        }\n        // Rounded edges\n        translate([48, 0, 2]) {\n            cube([4, 45, 4], center=true);\n        }\n        translate([-48, 0, 2]) {\n            cube([4, 45, 4], center=true);\n        }\n    }\n}\n\nmodule side_supports() {\n    // Left support with decorative cutouts\n    translate([-45, 0, 31]) {\n        difference() {\n            cube([8, 45, 58], center=true);\n            // Decorative circles\n            for(i = [-1, 0, 1]) {\n                translate([0, 0, i * 15]) {\n                    cylinder(h=10, r=3, center=true);\n                }\n            }\n        }\n    }\n    \n    // Right support with decorative cutouts\n    translate([45, 0, 31]) {\n        difference() {\n            cube([8, 45, 58], center=true);\n            // Decorative circles\n            for(i = [-1, 0, 1]) {\n                translate([0, 0, i * 15]) {\n                    cylinder(h=10, r=3, center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule back_panel() {\n    // Decorative back panel with pinnacle shape\n    translate([0, 22.5, 60]) {\n        difference() {\n            // Main back structure\n            union() {\n                // Base rectangle\n                cube([90, 2, 60], center=true);\n                \n                // Pinnacle top\n                translate([0, 0, 40]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=30, r1=45, r2=5, center=false);\n                    }\n                }\n            }\n            \n            // Decorative cutouts in back panel\n            for(x = [-30, 0, 30]) {\n                translate([x, 0, 10]) {\n                    cube([10, 2.5, 20], center=true);\n                }\n            }\n            for(x = [-20, 20]) {\n                translate([x, 0, 35]) {\n                    cube([10, 2.5, 15], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule top_detail() {\n    // Ornate pinnacle cap detail\n    translate([0, 0, 118]) {\n        union() {\n            // Base of cap\n            cube([20, 45, 4], center=true);\n            \n            // Decorative spheres\n            for(x = [-7, 0, 7]) {\n                translate([x, 0, 4]) {\n                    sphere(r=3);\n                }\n            }\n            \n            // Central spire\n            translate([0, 0, 10]) {\n                cylinder(h=15, r1=3, r2=1, center=false);\n            }\n        }\n    }\n}\n\nmodule bottom_feet() {\n    // Support feet with rounded edges\n    for(x = [-35, 35]) {\n        translate([x, 0, 0]) {\n            difference() {\n                // Main foot block\n                cube([10, 45, 4], center=true);\n                \n                // Rounded bottom\n                translate([0, 0, -2]) {\n                    cylinder(h=4, r=5, center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule front_trim() {\n    // Decorative front trim piece\n    translate([0, -22.5, 4]) {\n        difference() {\n            // Main trim\n            cube([96, 2, 8], center=true);\n            \n            // Decorative notches\n            for(x = [-40, -20, 0, 20, 40]) {\n                translate([x, 0, 0]) {\n                    cube([8, 3, 6], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly of all components\nunion() {\n    shelf_base();\n    side_supports();\n    back_panel();\n    top_detail();\n    bottom_feet();\n    front_trim();\n}",
    "renders": true
  },
  {
    "decorative_art": "finial",
    "openscad_code": "// Realistic Furniture Finial - Medium Complexity\n// Overall height: 100mm, designed for 3D printing with 2mm walls\n\n$fn = 32;\n\nmodule finial_base() {\n    // Base plate - 30mm diameter, 3mm thick\n    cylinder(h=3, d=30, center=true);\n    \n    // Decorative ring detail\n    translate([0, 0, 1.5])\n    difference() {\n        cylinder(h=2, d1=28, d2=26);\n        cylinder(h=2.1, d1=24, d2=22);\n    }\n}\n\nmodule tapered_shaft() {\n    // Main tapered shaft - 60mm tall\n    linear_extrude(height=60, scale=[0.3, 0.3])\n    offset(delta=2)\n    circle(d=25);\n    \n    // Decorative reeded columns (8 ribs)\n    for (i = [0:7]) {\n        rotate([0, 0, i * 45])\n        translate([9.5, 0, 30])\n        cylinder(h=30, d=3, center=true);\n    }\n}\n\nmodule acorn_cap() {\n    // Acorn-style cap\n    translate([0, 0, 63])\n    union() {\n        // Main acorn body\n        sphere(d=22);\n        \n        // Stem detail\n        translate([0, 0, 11])\n        cylinder(h=8, d1=6, d2=4);\n        \n        // Decorative collar\n        translate([0, 0, 7])\n        cylinder(h=2, d=12);\n    }\n}\n\nmodule mounting_pin() {\n    // 8mm diameter mounting pin with 2mm hole\n    translate([0, 0, -5])\n    difference() {\n        cylinder(h=10, d=8);\n        cylinder(h=11, d=4);\n    }\n}\n\nmodule decorative_flutes() {\n    // Vertical flutes on shaft\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n        translate([8, 0, 15])\n        scale([1, 0.2, 1])\n        cylinder(h=30, d=4);\n    }\n}\n\nmodule finial() {\n    union() {\n        // Base section\n        finial_base();\n        \n        // Main shaft\n        tapered_shaft();\n        \n        // Acorn cap\n        acorn_cap();\n        \n        // Mounting hardware\n        mounting_pin();\n        \n        // Decorative elements\n        decorative_flutes();\n    }\n}\n\n// Render the complete finial\nfinial();",
    "renders": true
  },
  {
    "decorative_art": "cupola",
    "openscad_code": "// Cupola furniture piece - decorative architectural element\n// Dimensions: 120mm tall x 100mm wide x 100mm deep\n\n$fn = 36;  // Smooth curves\n\nmodule cupola_base() {\n    // Main base platform\n    difference() {\n        cube([80, 80, 8], center=true);\n        translate([0, 0, -1]) cube([76, 76, 10], center=true);  // Hollow center\n    }\n    \n    // Decorative base molding\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([35, 0, 4])\n        cylinder(h=4, r1=6, r2=4);\n    }\n}\n\nmodule columns() {\n    // Four corner columns with classical styling\n    for(x = [-30, 30])\n    for(y = [-30, 30]) {\n        translate([x, y, 8])\n        difference() {\n            cylinder(h=50, r=4);\n            translate([0, 0, -1]) cylinder(h=52, r=2);  // Hollow for material saving\n        }\n        \n        // Column capital\n        translate([x, y, 58])\n        cylinder(h=3, r=5);\n    }\n}\n\nmodule arches() {\n    // Arched openings between columns\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([35, 0, 33])\n        rotate([90, 0, 0])\n        difference() {\n            cylinder(h=60, r=25);\n            translate([0, 0, -1]) cylinder(h=62, r=22);  // Arch thickness\n            translate([0, 0, 30]) cube([50, 50, 50], center=true);  // Cut half\n            translate([0, 0, -30]) cube([50, 50, 30], center=true);  // Cut bottom\n        }\n    }\n}\n\nmodule dome() {\n    // Main dome structure\n    translate([0, 0, 61])\n    difference() {\n        sphere(r=40);\n        translate([0, 0, -40]) cube([80, 80, 40], center=true);  // Flat bottom\n        sphere(r=38);  // Hollow interior\n    }\n    \n    // Dome base ring\n    translate([0, 0, 60])\n    cylinder(h=2, r=40);\n}\n\nmodule lantern() {\n    // Small lantern structure on top\n    translate([0, 0, 95])\n    union() {\n        // Base\n        cylinder(h=3, r=12);\n        \n        // Windows\n        for(i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([8, 0, 1.5])\n            cube([6, 2, 8], center=true);\n        }\n        \n        // Roof\n        translate([0, 0, 8])\n        cylinder(h=8, r1=12, r2=8);\n        \n        // Finial\n        translate([0, 0, 16])\n        sphere(r=3);\n    }\n}\n\nmodule decorative_panels() {\n    // Decorative panels on each side\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n        translate([0, 38, 33])\n        difference() {\n            cube([50, 2, 25], center=true);\n            for(row = [-1, 0, 1]) {\n                translate([row*12, 0, 8])\n                cube([8, 3, 8], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\ncupola_base();\ncolumns();\narches();\ndome();\nlantern();\ndecorative_panels();",
    "renders": true
  },
  {
    "decorative_art": "turret",
    "openscad_code": "// Turret furniture piece - decorative side table\n// Overall dimensions: 100mm diameter, 150mm height\n// Wall thickness: 2mm throughout\n\n$fn = 36;\n\n// Main turret body\nmodule turret_body() {\n    // Cylindrical base with slight taper\n    cylinder(h = 80, r1 = 48, r2 = 45, center = false);\n    \n    // Top rim with decorative edge\n    translate([0, 0, 80])\n        difference() {\n            cylinder(h = 5, r = 47, center = false);\n            translate([0, 0, 1])\n                cylinder(h = 5, r = 45, center = false);\n        }\n}\n\n// Battlements/crown detail\nmodule battlements() {\n    battlement_width = 8;\n    battlement_height = 10;\n    battlement_depth = 3;\n    \n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([42, 0, 85])\n                cube([battlement_width, battlement_depth, battlement_height], center = true);\n    }\n}\n\n// Support arches between legs\nmodule support_arches() {\n    arch_thickness = 2;\n    arch_height = 15;\n    \n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([35, 0, 20])\n                difference() {\n                    // Main arch\n                    rotate([90, 0, 0])\n                        cylinder(h = 30, r = 20, center = true);\n                    \n                    // Cutout for hollow arch\n                    rotate([90, 0, 0])\n                        cylinder(h = 30, r = 18, center = true);\n                    \n                    // Trim ends\n                    translate([0, -20, 0])\n                        cube([40, 40, 40], center = true);\n                }\n    }\n}\n\n// Decorative window details\nmodule windows() {\n    window_height = 25;\n    window_width = 12;\n    \n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([35, 0, 40])\n                difference() {\n                    // Window frame\n                    cube([window_width + 4, 2, window_height + 4], center = true);\n                    \n                    // Window opening\n                    translate([0, 1, 0])\n                        cube([window_width, 4, window_height], center = true);\n                }\n    }\n}\n\n// Leg structure with decorative feet\nmodule legs() {\n    leg_radius = 4;\n    leg_height = 20;\n    \n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([35, 0, 10])\n                cylinder(h = leg_height, r = leg_radius, center = true);\n    }\n    \n    // Decorative feet\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([35, 0, 0])\n                sphere(r = 6);\n    }\n}\n\n// Top surface/table top\nmodule table_top() {\n    // Main surface\n    translate([0, 0, 90])\n        difference() {\n            cylinder(h = 10, r = 50, center = false);\n            translate([0, 0, 2])\n                cylinder(h = 10, r = 48, center = false);\n        }\n    \n    // Small decorative center detail\n    translate([0, 0, 100])\n        cylinder(h = 5, r = 15, center = false);\n    \n    translate([0, 0, 105])\n        sphere(r = 8);\n}\n\n// Assemble the complete turret table\nunion() {\n    // Main structure\n    turret_body();\n    \n    // Decorative elements\n    battlements();\n    support_arches();\n    windows();\n    legs();\n    \n    // Functional top\n    table_top();\n}",
    "renders": true
  },
  {
    "decorative_art": "minaret",
    "openscad_code": "// Minaret Decorative Furniture Piece\n// 3D printable decorative minaret (90mm tall, 50mm base)\n\n$fn = 32;\n\n// Main module\nmodule minaret() {\n    // Base platform\n    difference() {\n        cylinder(h=4, d=50, center=true);\n        cylinder(h=5, d=46, center=true); // Hollow base\n    }\n    \n    // Main body - octagonal tower\n    translate([0,0,4]) {\n        difference() {\n            cylinder(h=60, d=40, $fn=8);\n            cylinder(h=61, d=36, $fn=8); // Hollow tower\n        }\n    }\n    \n    // Balcony ring\n    translate([0,0,64]) {\n        difference() {\n            cylinder(h=3, d=48);\n            cylinder(h=4, d=40);\n        }\n    }\n    \n    // Balcony railing posts\n    for(i=[0:7]) {\n        rotate([0,0,i*45]) {\n            translate([22,0,64.5]) {\n                cylinder(h=5, d=2);\n            }\n        }\n    }\n    \n    // Second tier - smaller octagon\n    translate([0,0,67]) {\n        difference() {\n            cylinder(h=15, d=30, $fn=8);\n            cylinder(h=16, d=26, $fn=8);\n        }\n    }\n    \n    // Decorative band\n    translate([0,0,75]) {\n        cylinder(h=2, d=32);\n    }\n    \n    // Dome base\n    translate([0,0,77]) {\n        difference() {\n            cylinder(h=3, d=28);\n            cylinder(h=4, d=24);\n        }\n    }\n    \n    // Crescent moon finial\n    translate([0,0,84]) {\n        // Crescent shape\n        difference() {\n            sphere(d=10);\n            translate([3,0,0]) sphere(d=10);\n        }\n    }\n    \n    // Decorative windows on main body\n    window_pattern();\n    \n    // Structural support ribs\n    support_ribs();\n}\n\n// Window pattern module\nmodule window_pattern() {\n    for(level=[0:2]) {\n        for(side=[0:7]) {\n            rotate([0,0,side*45]) {\n                translate([17,0,15+level*20]) {\n                    // Window arch\n                    difference() {\n                        cube([8,2,6], center=true);\n                        cube([6,3,4], center=true);\n                    }\n                    // Window sill\n                    translate([0,0,-3.5]) {\n                        cube([10,2,1], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Structural support ribs\nmodule support_ribs() {\n    for(i=[0:7]) {\n        rotate([0,0,i*45]) {\n            translate([20,0,34]) {\n                cube([3,2,30], center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nminaret();",
    "renders": true
  },
  {
    "decorative_art": "obelisk",
    "openscad_code": "// Obelisk Decorative Furniture Piece (Medium Complexity)\n// Realistic style with 3D-printable features\n\n// Overall dimensions\ntotal_height = 120;\nbase_width = 35;\npyramid_height = 40;\nplinth_height = 15;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule obelisk_body() {\n    // Main pyramid top\n    translate([0, 0, total_height - pyramid_height]) {\n        cylinder(h = pyramid_height, r1 = base_width/2, r2 = 0, $fn = 4);\n    }\n    \n    // Main shaft - hollow\n    difference() {\n        // Outer shaft\n        cube([base_width, base_width, total_height - pyramid_height - plinth_height], center = true);\n        \n        // Inner hollow\n        translate([0, 0, wall/2])\n            cube([base_width - 2*wall, base_width - 2*wall, total_height - pyramid_height - plinth_height - wall], center = true);\n    }\n    \n    // Decorative rings around shaft\n    for(i = [1:3]) {\n        translate([0, 0, i * (total_height - pyramid_height - plinth_height)/4])\n            cylinder(h = 2, r1 = base_width/2 + 1, r2 = base_width/2 + 1, $fn = 64);\n    }\n}\n\nmodule base_plinth() {\n    // Decorative base with stepped design\n    difference() {\n        // Main base block\n        cube([base_width + 10, base_width + 10, plinth_height], center = true);\n        \n        // Relief patterns on sides\n        for(x = [-1, 1]) {\n            for(y = [-1, 1]) {\n                translate([x * (base_width/2 + 2), y * (base_width/2 + 2), -1])\n                    cube([4, 4, plinth_height + 2], center = true);\n            }\n        }\n    }\n    \n    // Corner reinforcements\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (base_width/2 + 3), y * (base_width/2 + 3), plinth_height/2])\n                cylinder(h = plinth_height, r = 2, $fn = 16);\n        }\n    }\n}\n\nmodule hieroglyphic_details() {\n    // Decorative hieroglyphic patterns\n    for(face = [0:3]) {\n        rotate([0, 0, face * 90])\n        translate([base_width/2 + 0.1, 0, plinth_height + 10])\n            for(row = [0:4]) {\n                for(col = [-2:2]) {\n                    translate([0, col * 3, row * 8])\n                        cube([0.5, 2, 1], center = true);\n                }\n            }\n    }\n}\n\nmodule internal_structure() {\n    // Internal support ribs for 3D printing stability\n    for(i = [1:3]) {\n        translate([0, 0, plinth_height + i * 20])\n            cube([base_width - wall, wall, 2], center = true);\n            \n        translate([0, 0, plinth_height + i * 20])\n            rotate([0, 0, 90])\n                cube([base_width - wall, wall, 2], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Assemble the obelisk\n    translate([0, 0, plinth_height/2])\n        base_plinth();\n    \n    translate([0, 0, plinth_height/2])\n        obelisk_body();\n    \n    translate([0, 0, plinth_height/2])\n        hieroglyphic_details();\n    \n    // Internal supports (for 3D printing)\n    internal_structure();\n}",
    "renders": true
  },
  {
    "decorative_art": "monolith",
    "openscad_code": "// Monolith Furniture - Decorative Side Table\n// A minimalist monolith structure with functional table surface and storage cavity\n// Overall dimensions: 120mm height x 80mm width x 60mm depth\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main monolith body - slightly tapered for visual appeal\nmodule monolith_body() {\n    difference() {\n        // Outer monolith shape with 2mm wall thickness\n        union() {\n            // Base block\n            translate([0, 0, 60]) \n                cube([80, 60, 120], center = true);\n            \n            // Top chamfer for softer appearance\n            translate([0, 0, 125]) \n                scale([0.9, 0.9, 1])\n                cylinder(h = 10, r1 = 40, r2 = 38, center = true);\n        }\n        \n        // Hollow interior cavity for storage\n        translate([0, 0, 60]) \n            cube([76, 56, 116], center = true);\n        \n        // Top opening for access\n        translate([0, 0, 121]) \n            cube([60, 40, 4], center = true);\n    }\n}\n\n// Structural base support with decorative elements\nmodule base_support() {\n    // Main base platform\n    difference() {\n        // Base platform\n        translate([0, 0, 2]) \n            cube([90, 70, 4], center = true);\n        \n        // Recessed center for visual depth\n        translate([0, 0, 2]) \n            cube([86, 66, 2], center = true);\n    }\n    \n    // Decorative corner feet\n    for(x = [-35, 35])\n    for(y = [-25, 25]) {\n        translate([x, y, 0]) \n            cylinder(h = 4, r = 5, center = false);\n    }\n}\n\n// Table surface detail with subtle pattern\nmodule table_surface() {\n    // Main surface\n    translate([0, 0, 120]) \n        difference() {\n            cube([78, 58, 3], center = true);\n            \n            // Subtle grip pattern\n            for(i = [-30:10:30]) {\n                translate([i, 0, 121.5]) \n                    cube([2, 54, 1], center = true);\n            }\n        }\n}\n\n// Side ventilation slots for 3D printing and design\nmodule ventilation_slots() {\n    for(z = [20:20:100]) {\n        difference() {\n            translate([0, 0, z]) \n                cube([82, 64, 2], center = true);\n            \n            // Horizontal slots on front/back\n            translate([0, 0, z]) \n                cube([78, 50, 4], center = true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base foundation\n    base_support();\n    \n    // Main monolith structure\n    monolith_body();\n    \n    // Table top surface\n    table_surface();\n    \n    // Decorative ventilation\n    ventilation_slots();\n}",
    "renders": true
  },
  {
    "decorative_art": "megalith",
    "openscad_code": "// Megalith-inspired side table (realistic style, medium complexity)\n// Overall dimensions: 120mm x 120mm x 70mm\n\n$fn = 36;\nwall_thickness = 2;\n\n// Main stone slab (table top)\nmodule stone_slab() {\n    difference() {\n        // Main slab\n        translate([0, 0, 65])\n            cube([120, 120, 10], center=true);\n        \n        // Subtle weathering on top surface\n        for (i = [0:20]) {\n            translate([rand(-50,50, i*3), rand(-50,50, i*7), 70.1])\n                sphere(d=rand(3,8, i*11));\n        }\n    }\n}\n\n// Megalith support stone\nmodule megalith_support() {\n    difference() {\n        // Main support\n        translate([0, 0, 32.5])\n            cube([25, 80, 65], center=true);\n        \n        // Ancient carvings (spiral pattern)\n        for (angle = [0:30:359]) {\n            rotate([0, 0, angle])\n                translate([7.5, 32, 32.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=60, d1=2, d2=0.5, center=true);\n        }\n    }\n}\n\n// Base platform\nfunction rand(min, max, seed) = min + (max-min)*(sin(seed*123.456)+1)/2;\n\nmodule base_platform() {\n    difference() {\n        // Main base\n        translate([0, 0, 1])\n            cube([100, 100, 2], center=true);\n        \n        // Ground contact points\n        for (x = [-40:20:40])\n            for (y = [-40:20:40]) {\n                translate([x, y, -0.1])\n                    cylinder(h=2.2, d=8);\n            }\n    }\n}\n\n// Joints and connections\nmodule joints() {\n    // Interlocking tabs\n    for (pos = [[-30, 0], [30, 0]]) {\n        translate([pos[0], pos[1], 60])\n            cube([20, 15, wall_thickness*2], center=true);\n    }\n}\n\n// Decorative runic inscriptions\nmodule runes() {\n    for (i = [0:4]) {\n        translate([rand(-40,40,i*13), rand(-40,40,i*17), 70.5])\n            rotate([0, 0, rand(0,360,i*19)])\n                linear_extrude(height=0.5)\n                    text(\"ᚱᛟᚲ\", size=8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    stone_slab();\n    \n    // Four megalith supports\n    for (x = [-35, 35])\n        for (y = [-35, 35]) {\n            translate([x, y, 0])\n                megalith_support();\n        }\n    \n    // Structural elements\n    base_platform();\n    \n    // Joints connecting top to supports\n    translate([0, 0, 0])\n        joints();\n    \n    // Decorative elements\n    runes();\n    \n    // Reinforcement beams between supports\n    for (axis = [0, 90]) {\n        rotate([0, 0, axis])\n            translate([0, 35, 30])\n                cube([90, wall_thickness*2, 60], center=true);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "dolmen",
    "openscad_code": "// Dolmen-inspired accent table / side table\n// 120 x 90 x 55 mm overall – fits most FDM printers\n// Wall thickness ≈ 2 mm everywhere for easy printing\n\n// Parameters\nwall = 2;               // 2 mm walls\ntop_slab_w = 120;\ntop_slab_d = 90;\ntop_slab_h =  8;\n\nleg_w = 12;\nleg_d = 12;\nleg_h = 47;\n\narch_clear_h = 30;      // height under the lintel\narch_thick   = wall;\n\n// Decorative pattern parameters\ngrove_w = 3;\ngrove_d = 1;\ngrove_step = 10;\n\nmodule slab(x, y, z){\n    difference(){\n        cube([x,y,z], center=true);\n        translate([0,0,-z/2-0.1])\n            cube([x-wall, y-wall, z+0.2], center=true);\n    }\n}\n\nmodule leg(x, y, z){\n    difference(){\n        cube([x,y,z], center=true);\n        translate([0,0,-z/2-0.1])\n            cube([x-wall, y-wall, z+0.2], center=true);\n    }\n}\n\nmodule lintel(){\n    // Main lintel\n    slab(top_slab_w, top_slab_d, top_slab_h);\n\n    // Decorative grooves along the long edges\n    for(i = [-top_slab_w/2+grove_step/2 : grove_step : top_slab_w/2-grove_step/2]){\n        translate([i, top_slab_d/2-grove_d/2, 0])\n            cube([grove_w, grove_d, top_slab_h], center=true);\n        translate([i, -top_slab_d/2+grove_d/2, 0])\n            cube([grove_w, grove_d, top_slab_h], center=true);\n    }\n}\n\nmodule dolmen_assembly(){\n    // Lintel (table top)\n    translate([0,0, leg_h + top_slab_h/2])\n        lintel();\n\n    // Front legs\n    translate([ top_slab_w/2-leg_w/2,  top_slab_d/2-leg_d/2, leg_h/2])\n        leg(leg_w, leg_d, leg_h);\n    translate([-top_slab_w/2+leg_w/2,  top_slab_d/2-leg_d/2, leg_h/2])\n        leg(leg_w, leg_d, leg_h);\n\n    // Rear legs\n    translate([ top_slab_w/2-leg_w/2, -top_slab_d/2+leg_d/2, leg_h/2])\n        leg(leg_w, leg_d, leg_h);\n    translate([-top_slab_w/2+leg_w/2, -top_slab_d/2+leg_d/2, leg_h/2])\n        leg(leg_w, leg_d, leg_h);\n\n    // Arch brace between front legs for stability\n    difference(){\n        translate([0, top_slab_d/2 - leg_d/2, arch_clear_h/2])\n            cube([top_slab_w - leg_w, arch_thick, arch_clear_h], center=true);\n        // Lightening cut to save material\n        translate([0, top_slab_d/2 - leg_d/2, arch_clear_h/2])\n            cube([top_slab_w - leg_w - 2*wall, arch_thick+0.2, arch_clear_h - 2*wall], center=true);\n    }\n\n    // Matching brace on rear\n    difference(){\n        translate([0, -top_slab_d/2 + leg_d/2, arch_clear_h/2])\n            cube([top_slab_w - leg_w, arch_thick, arch_clear_h], center=true);\n        translate([0, -top_slab_d/2 + leg_d/2, arch_clear_h/2])\n            cube([top_slab_w - leg_w - 2*wall, arch_thick+0.2, arch_clear_h - 2*wall], center=true);\n    }\n}\n\n// Render the assembly\ndolmen_assembly();",
    "renders": true
  },
  {
    "decorative_art": "cairn",
    "openscad_code": "// Cairn Bookcase / Display Stand\n// Medium complexity furniture piece inspired by stacked stone cairns\n// Overall dimensions: 120mm x 80mm x 160mm (W x D x H)\n\nwall_thickness = 2;\nbase_width = 120;\nbase_depth = 80;\ntotal_height = 160;\n\nmodule stone_block(x, y, w, d, h, rot) {\n    translate([x, y, 0])\n        rotate([0, 0, rot])\n        difference() {\n            // Main stone shape with rounded edges\n            minkowski() {\n                cube([w, d, h], center = true);\n                sphere(2);\n            }\n            // Hollow interior for 3D printing\n            minkowski() {\n                cube([w - wall_thickness*2, d - wall_thickness*2, h - wall_thickness], center = true);\n                sphere(1);\n            }\n        }\n}\n\nmodule stone_shelf(x, y, w, d, thickness) {\n    // Shelf platform between stone blocks\n    translate([x, y, -thickness/2])\n        minkowski() {\n            cube([w, d, thickness], center = true);\n            sphere(1);\n        }\n}\n\nmodule structural_support() {\n    // Vertical support pillar disguised as stacked stones\n    for (i = [0:5]) {\n        h = 25 + i*2;\n        w = 15 + sin(i*30)*3;\n        d = 12 + cos(i*45)*2;\n        stone_block(\n            sin(i*25)*5,\n            cos(i*35)*3,\n            w,\n            d,\n            h,\n            i*15\n        );\n    }\n}\n\nmodule decorative_carving(x, y, z, size) {\n    // Celtic knot-inspired carving\n    translate([x, y, z])\n        for (i = [0:3]) {\n            rotate([0, 0, i*90])\n            translate([size/2, 0, 0])\n            cylinder(h=0.5, r1=size/4, r2=size/4, center=true);\n        }\n}\n\nmodule base_platform() {\n    // Bottom platform with carved details\n    difference() {\n        // Main base\n        stone_block(0, 0, base_width, base_depth, 20, 0);\n        \n        // Carved grooves for drainage/weight reduction\n        for (x = [-40:20:40]) {\n            translate([x, 0, 8])\n                cube([2, base_depth-20, 4], center=true);\n        }\n    }\n    \n    // Decorative elements on front\n    for (x = [-35:10:35]) {\n        decorative_carving(x, base_depth/2 - 5, 10, 8);\n    }\n}\n\nmodule middle_section() {\n    // Middle stacked section with shelves\n    stone_block(0, 0, 100, 60, 30, 15);\n    stone_shelf(0, 0, 90, 50, 5);\n    translate([0, 0, 35])\n        stone_block(0, 0, 90, 50, 25, -10);\n    stone_shelf(0, 0, 80, 40, 5);\n}\n\nmodule top_section() {\n    // Top section with smaller stones\n    for (i = [0:2]) {\n        angle = i*120;\n        r = 20;\n        stone_block(\n            sin(angle)*r,\n            cos(angle)*r,\n            25 + i*5,\n            20 + i*3,\n            20 + i*2,\n            angle\n        );\n    }\n    \n    // Top capstone\n    translate([0, 0, 110])\n        stone_block(0, 0, 40, 30, 15, 45);\n}\n\n// Assembly\nunion() {\n    // Base\n    base_platform();\n    \n    // Structural support on back right\n    translate([30, -20, 20])\n        structural_support();\n    \n    // Main cairn body\n    translate([0, 0, 20])\n        union() {\n            middle_section();\n            translate([0, 0, 60])\n                top_section();\n        }\n    \n    // Additional support stones for stability\n    translate([-30, 15, 20])\n        stone_block(0, 0, 20, 15, 40, -20);\n    translate([20, 15, 20])\n        stone_block(0, 0, 18, 18, 35, 30);\n}",
    "renders": true
  },
  {
    "decorative_art": "cromlech",
    "openscad_code": "// Cromlech Bookshelf / Display Stand\n// Inspired by ancient stone circles turned into functional furniture\n// Overall dimensions: 100mm x 60mm x 120mm\n\n$fn = 32;\nwall_thickness = 2;\n\n// Main module\nmodule cromlech_shelf() {\n    // Base stone circle platform\n    base_stones();\n    \n    // Central standing stone back panel\n    central_stone();\n    \n    // Three shelves between stones\n    shelves();\n    \n    // Decorative lintel across top\n    lintel();\n    \n    // Supporting stone legs\n    support_stones();\n}\n\n// Base stone circle\nmodule base_stones() {\n    // Main circular base\n    difference() {\n        cylinder(h = 8, d = 100);\n        translate([0, 0, -1])\n            cylinder(h = 10, d = 96);\n    }\n    \n    // Individual stone segments\n    for (i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([42, 0, 0])\n            stone_block(12, 8, 8);\n    }\n}\n\n// Individual stone block\nmodule stone_block(w, h, d) {\n    difference() {\n        cube([w, d, h], center = true);\n        \n        // Rounded edges\n        translate([w/2-1, 0, 0])\n            sphere(r = 1);\n        translate([-w/2+1, 0, 0])\n            sphere(r = 1);\n    }\n}\n\n// Central standing stone (back panel)\nmodule central_stone() {\n    translate([0, -20, 50])\n    rotate([0, 10, 0])\n    difference() {\n        cube([60, wall_thickness, 100], center = true);\n        \n        // Carved rune decorations\n        for (y = [-30, 0, 30]) {\n            translate([y, wall_thickness/2+1, 0])\n                rotate([90, 0, 0])\n                    cylinder(h = 1, d = 8);\n        }\n    }\n}\n\n// Three horizontal shelves\nmodule shelves() {\n    // Bottom shelf\n    shelf(15);\n    \n    // Middle shelf\n    shelf(45);\n    \n    // Top shelf\n    shelf(75);\n}\n\n// Individual shelf\nmodule shelf(height) {\n    translate([0, -5, height])\n    difference() {\n        // Main shelf platform\n        cube([70, 50, wall_thickness], center = true);\n        \n        // Rounded front edge\n        translate([0, 25-wall_thickness/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 70, r = wall_thickness);\n        \n        // Carved grooves for decoration\n        for (x = [-25:10:25]) {\n            translate([x, 0, wall_thickness/2+0.5])\n                cube([1, 48, 1], center = true);\n        }\n    }\n}\n\n// Top lintel stone\nmodule lintel() {\n    translate([0, -10, 105])\n    rotate([0, 5, 0])\n    difference() {\n        cube([80, 10, wall_thickness], center = true);\n        \n        // Mortise joints\n        translate([-35, 0, 0])\n            cube([wall_thickness*2, 12, wall_thickness*2], center = true);\n        translate([35, 0, 0])\n            cube([wall_thickness*2, 12, wall_thickness*2], center = true);\n    }\n}\n\n// Supporting stone legs\nmodule support_stones() {\n    // Left support\n    translate([-30, 20, 40])\n    rotate([0, -5, 0])\n        tapered_stone();\n    \n    // Right support\n    translate([30, 20, 40])\n    rotate([0, 5, 0])\n        tapered_stone();\n}\n\n// Tapered support stone\nmodule tapered_stone() {\n    difference() {\n        union() {\n            // Base\n            cylinder(h = 60, d1 = 15, d2 = 8);\n            \n            // Joint to shelf\n            translate([0, 0, 60])\n                sphere(d = 10);\n        }\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 5])\n            cylinder(h = 50, d = 8);\n    }\n}\n\n// Generate the model\ncromlech_shelf();",
    "renders": true
  },
  {
    "decorative_art": "ziggurat",
    "openscad_code": "// Ziggurat Decorative Display Shelf\n// Realistic medium-complexity furniture piece\n// Overall size: 100mm wide x 100mm deep x 120mm tall\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main parameters\nbase_width = 100;\nbase_depth = 100;\ntier_height = 20;\nwall_thickness = 2;\nstep_width = 8;\n\n// Create the complete ziggurat shelf\nunion() {\n    // Base tier with storage compartment\n    translate([0, 0, 0])\n        tier_with_storage(base_width, base_depth, tier_height, 0);\n    \n    // Second tier\n    translate([0, 0, tier_height])\n        tier(base_width - 2*step_width, base_depth - 2*step_width, tier_height, 1);\n    \n    // Third tier\n    translate([0, 0, 2*tier_height])\n        tier(base_width - 4*step_width, base_depth - 4*step_width, tier_height, 2);\n    \n    // Fourth tier\n    translate([0, 0, 3*tier_height])\n        tier(base_width - 6*step_width, base_depth - 6*step_width, tier_height, 3);\n    \n    // Top platform with decorative elements\n    translate([0, 0, 4*tier_height])\n        top_platform(base_width - 8*step_width, base_depth - 8*step_width, tier_height/2);\n    \n    // Decorative corner pillars\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x*(base_width/2 - step_width), y*(base_depth/2 - step_width), 0])\n                pillar(tier_height*4 + tier_height/2);\n}\n\n// Module for creating a storage tier\nmodule tier_with_storage(w, d, h, level) {\n    difference() {\n        // Outer shell\n        cube([w, d, h], center=true);\n        \n        // Storage cavity\n        translate([0, 0, wall_thickness])\n            cube([w - 2*wall_thickness, d - 2*wall_thickness, h - wall_thickness], center=true);\n    }\n    \n    // Decorative relief patterns on sides\n    relief_pattern(w, d, h, level);\n}\n\n// Module for regular tiers\nmodule tier(w, d, h, level) {\n    difference() {\n        // Main block\n        cube([w, d, h], center=true);\n        \n        // Internal cavity for weight reduction\n        translate([0, 0, wall_thickness])\n            cube([w - 2*wall_thickness, d - 2*wall_thickness, h - 2*wall_thickness], center=true);\n    }\n    \n    // Decorative elements\n    relief_pattern(w, d, h, level);\n}\n\n// Decorative relief pattern\nmodule relief_pattern(w, d, h, level) {\n    // Indentation around the top edge\n    translate([0, 0, h/2 - wall_thickness/2])\n        cube([w - 2*wall_thickness, d - 2*wall_thickness, wall_thickness], center=true);\n    \n    // Geometric carvings on sides\n    for (i = [-2:2]) {\n        for (j = [-2:2]) {\n            if (abs(i) + abs(j) <= 2) {\n                translate([i*(w/6), j*(d/6), h/2 - wall_thickness])\n                    difference() {\n                        cube([3, 3, wall_thickness], center=true);\n                        cube([2, 2, wall_thickness*1.5], center=true);\n                    }\n            }\n        }\n    }\n}\n\n// Top platform with decorative elements\nmodule top_platform(w, d, h) {\n    // Main platform\n    cube([w, d, h], center=true);\n    \n    // Decorative crown molding effect\n    translate([0, 0, h/2 + wall_thickness/2])\n        cube([w + wall_thickness, d + wall_thickness, wall_thickness], center=true);\n    \n    // Central decorative element\n    translate([0, 0, h + wall_thickness/2])\n        cylinder(h=wall_thickness*2, r1=w/8, r2=w/12, center=false);\n}\n\n// Decorative corner pillar\nmodule pillar(height) {\n    // Base\n    cylinder(h=wall_thickness*3, r=wall_thickness*1.5, center=false);\n    \n    // Shaft with fluting\n    for (i = [0:11]) {\n        rotate([0, 0, i*30])\n            translate([wall_thickness*1.4, 0, wall_thickness*3])\n                cube([wall_thickness/2, wall_thickness/2, height - wall_thickness*3], center=true);\n    }\n    \n    // Capital\n    translate([0, 0, height - wall_thickness*2])\n        cylinder(h=wall_thickness*2, r1=wall_thickness*1.8, r2=wall_thickness*1.5, center=false);\n}",
    "renders": true
  },
  {
    "decorative_art": "pyramid",
    "openscad_code": "// Pyramid Accent Table (Realistic Style, Medium Complexity)\n// Dimensions: 100mm base, 80mm height, 2mm wall thickness\n\nmodule pyramid_table() {\n    // Main pyramid structure with hollow interior\n    difference() {\n        // Outer pyramid\n        pyramid_shell(100, 80);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            pyramid_shell(96, 76);\n    }\n    \n    // Reinforcement frame inside\n    for(i = [1:3]) {\n        translate([0, 0, i * 20])\n            rotate([0, 0, 45])\n            cube([100 - i * 30, 100 - i * 30, 2], center = true);\n    }\n    \n    // Base platform\n    translate([0, 0, -2])\n        cube([110, 110, 4], center = true);\n    \n    // Decorative corner posts\n    for(x = [-45, 45])\n    for(y = [-45, 45]) {\n        translate([x, y, 0])\n            corner_post(80);\n    }\n    \n    // Top surface with decorative pattern\n    translate([0, 0, 78])\n        decorative_top();\n    \n    // Side panels with relief pattern\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle])\n        translate([0, -50, 40])\n            side_panel();\n    }\n}\n\nmodule pyramid_shell(base, height) {\n    linear_extrude(height = height, scale = 0.01, slices = 20)\n        square(base, center = true);\n}\n\nmodule corner_post(height) {\n    difference() {\n        // Main post\n        cylinder(h = height, r = 4, $fn = 16);\n        \n        // Decorative grooves\n        for(h = [10:20:height-10]) {\n            translate([0, 0, h])\n                cylinder(h = 2, r = 5, $fn = 16);\n        }\n    }\n}\n\nmodule decorative_top() {\n    difference() {\n        // Top surface\n        cube([60, 60, 4], center = true);\n        \n        // Geometric pattern\n        for(x = [-20:20:20]) {\n            for(y = [-20:20:20]) {\n                translate([x, y, -1])\n                    cube([8, 8, 6], center = true);\n            }\n        }\n    }\n    \n    // Border detail\n    translate([0, 0, 2])\n        difference() {\n            cube([64, 64, 2], center = true);\n            cube([58, 58, 3], center = true);\n        }\n}\n\nmodule side_panel() {\n    rotate([90, 0, 0])\n    translate([0, 0, 40])\n    difference() {\n        // Panel base\n        cube([80, 2, 80]);\n        \n        // Diamond pattern cutouts\n        for(i = [1:3]) {\n            for(j = [1:3]) {\n                translate([-30 + i * 20, -1, -30 + j * 20])\n                    rotate([0, 45, 0])\n                    cube([8, 4, 8]);\n            }\n        }\n    }\n}\n\n// Render the pyramid table\npyramid_table();",
    "renders": true
  },
  {
    "decorative_art": "mastaba",
    "openscad_code": "// Mastaba Decorative Storage Box\n// Inspired by ancient Egyptian mastaba architecture\n// 3D printable decorative furniture piece\n\n$fn = 30;\nwall_thickness = 2;\n\n// Main dimensions\nbase_length = 90;\nbase_width = 60;\nbase_height = 40;\nslope_angle = 75;\n\n// Decorative elements\ninset_depth = 1.5;\nband_height = 4;\nband_spacing = 8;\n\nmodule mastaba_base() {\n    // Main box structure\n    difference() {\n        // Outer shell with sloped top\n        hull() {\n            translate([0, 0, base_height/2])\n                cube([base_length, base_width, base_height], center=true);\n            translate([0, 0, base_height + 8])\n                cube([base_length - 20, base_width - 20, 16], center=true);\n        }\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness])\n            cube([base_length - 2*wall_thickness, base_width - 2*wall_thickness, base_height + 15], center=true);\n    }\n}\n\nmodule decorative_bands() {\n    // Horizontal decorative bands\n    for (h = [band_height + 5, band_height*2 + band_spacing + 5]) {\n        translate([0, 0, h])\n            cube([base_length + 2, base_width + 2, band_height], center=true);\n    }\n    \n    // Vertical corner details\n    for (x = [-base_length/2 + wall_thickness, base_length/2 - wall_thickness])\n        for (y = [-base_width/2 + wall_thickness, base_width/2 - wall_thickness])\n            translate([x, y, base_height/2 + 5])\n                cylinder(h=base_height, r=wall_thickness*1.5, center=true);\n}\n\nmodule hieroglyphic_pattern() {\n    // Simplified hieroglyphic pattern on front face\n    pattern_width = 30;\n    pattern_height = 20;\n    \n    for (i = [-1, 0, 1]) {\n        for (j = [-1, 0, 1]) {\n            translate([i * 10, -base_width/2 - inset_depth/2, j * 8 + base_height/2])\n                sphere(r=2);\n        }\n    }\n}\n\nmodule lid() {\n    // Removable lid with handle\n    difference() {\n        // Lid base\n        translate([0, 0, base_height + 16])\n            cube([base_length - 19, base_width - 19, 4], center=true);\n        \n        // Handle recess\n        translate([0, 0, base_height + 18])\n            cube([20, 10, 2], center=true);\n    }\n    \n    // Handle grip\n    translate([0, 0, base_height + 20])\n        cylinder(h=6, r=3, center=true);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    mastaba_base();\n    \n    // Decorative elements\n    decorative_bands();\n    \n    // Side patterns\n    translate([0, base_width/2 + inset_depth/2, 0])\n        mirror([0, 1, 0])\n            hieroglyphic_pattern();\n    \n    translate([0, -base_width/2 - inset_depth/2, 0])\n        hieroglyphic_pattern();\n    \n    // Lid\n    lid();\n}",
    "renders": true
  },
  {
    "decorative_art": "tholos",
    "openscad_code": "$fs = 0.5;\n$fa = 2;\n\nmodule tholos_base() {\n    difference() {\n        cylinder(h=8, r1=30, r2=28, center=true);\n        translate([0,0,4]) cylinder(h=10, r1=28, r2=26, center=true);\n    }\n    for (i=[0:11]) {\n        rotate([0,0,i*30]) translate([25,0,-2]) cube([2,4,8], center=true);\n    }\n}\n\nmodule tholos_column() {\n    for (h=[0:4:20]) {\n        translate([0,0,h-10]) cylinder(h=3, r=4, center=true);\n    }\n    cylinder(h=20, r=3.8, center=true);\n}\n\nmodule tholos_entablature() {\n    difference() {\n        cylinder(h=5, r1=20, r2=22, center=true);\n        translate([0,0,2]) cylinder(h=6, r1=18, r2=20, center=true);\n    }\n    for (i=[0:17]) {\n        rotate([0,0,i*20]) translate([19,0,-1]) cube([2,3,7], center=true);\n    }\n}\n\nmodule tholos_roof() {\n    cylinder(h=3, r=22, center=true);\n    translate([0,0,3]) cylinder(h=2, r=21, center=true);\n    translate([0,0,5]) cylinder(h=2, r=20, center=true);\n    translate([0,0,7]) cylinder(h=2, r=19, center=true);\n    translate([0,0,9]) cylinder(h=2, r=18, center=true);\n    translate([0,0,11]) cylinder(h=2, r=17, center=true);\n    translate([0,0,13]) cylinder(h=2, r=16, center=true);\n    translate([0,0,15]) cylinder(h=2, r=15, center=true);\n    sphere(r=15);\n}\n\nmodule tholos_doorway() {\n    difference() {\n        translate([0,0,-6]) cube([8,2,12], center=true);\n        translate([0,-1.1,0]) cube([6,2,10], center=true);\n    }\n    translate([0,1,-10]) cube([2,2,2], center=true);\n}\n\nunion() {\n    translate([0,0,-15]) tholos_base();\n    translate([0,0,-2]) tholos_column();\n    translate([0,0,11]) tholos_entablature();\n    translate([0,0,18]) tholos_roof();\n    translate([0,30,-2]) rotate([90,0,0]) tholos_doorway();\n}",
    "renders": true
  },
  {
    "decorative_art": "rotunda",
    "openscad_code": "// Rotunda Display Stand\n// Overall dimensions: 100mm diameter x 120mm height\n\n$fn = 50;  // Smooth curves for 3D printing\n\n// Main parameters\nbase_d = 100;\nbase_h = 8;\npillar_d = 20;\npillar_h = 80;\ntop_d = 60;\ntop_h = 25;\nwall_t = 2.5;\n\n// Base module with decorative molding\nmodule base() {\n    difference() {\n        cylinder(d = base_d, h = base_h, center = false);\n        // Hollow out base for material savings\n        translate([0, 0, wall_t])\n            cylinder(d = base_d - 2*wall_t, h = base_h - wall_t + 0.1, center = false);\n    }\n    \n    // Decorative molding ring\n    translate([0, 0, base_h])\n        cylinder(d1 = base_d, d2 = base_d * 0.9, h = 4);\n}\n\n// Central pillar with fluting\nmodule pillar() {\n    union() {\n        // Main pillar body\n        difference() {\n            cylinder(d = pillar_d, h = pillar_h, center = false);\n            // Hollow center\n            translate([0, 0, wall_t])\n                cylinder(d = pillar_d - 2*wall_t, h = pillar_h - wall_t + 0.1, center = false);\n        }\n        \n        // Decorative fluting\n        for(i = [0:11]) {\n            rotate([0, 0, i * 30])\n                translate([pillar_d/2 - wall_t, -1.5, 5])\n                    cube([wall_t, 3, pillar_h - 10]);\n        }\n    }\n}\n\n// Top platform with gallery rail\nmodule top_platform() {\n    union() {\n        // Main platform\n        difference() {\n            cylinder(d = top_d, h = top_h, center = false);\n            // Hollow out\n            translate([0, 0, wall_t])\n                cylinder(d = top_d - 2*wall_t, h = top_h - wall_t + 0.1, center = false);\n        }\n        \n        // Gallery rail posts\n        for(i = [0:15]) {\n            rotate([0, 0, i * 22.5])\n                translate([top_d/2 - 4, -1.5, top_h])\n                    cube([3, 3, 8]);\n        }\n        \n        // Rail top ring\n        translate([0, 0, top_h + 8])\n            cylinder(d = top_d - 2, d1 = top_d - 2, d2 = top_d - 6, h = 3);\n    }\n}\n\n// Assembly\ntranslate([0, 0, 0])\n    base();\n\ntranslate([0, 0, base_h + 4])\n    pillar();\n\ntranslate([0, 0, base_h + 4 + pillar_h])\n    top_platform();",
    "renders": true
  },
  {
    "decorative_art": "basilica",
    "openscad_code": "// Basilica-inspired decorative cabinet\n// Overall dimensions: 100mm wide x 40mm deep x 120mm tall\n\n// Parameters\nwall_thickness = 2;\nscale_factor = 1;\n\n// Main cabinet structure\nmodule cabinet_body() {\n    // Base frame\n    difference() {\n        cube([100, 40, 120]);\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([100-2*wall_thickness, 40-2*wall_thickness, 120-2*wall_thickness]);\n    }\n}\n\n// Arched door with basilica-style detailing\nmodule arched_door(x_pos) {\n    // Door panel\n    translate([x_pos, 0, 0]) {\n        difference() {\n            // Main door rectangle\n            translate([5, 5, 10])\n                cube([40, 30, 80]);\n            \n            // Arched top cutout\n            translate([25, 5, 85])\n                cylinder(h=30, r=20, $fn=32);\n            translate([5, 5, 85])\n                cube([40, 30, 30]);\n            \n            // Inner panel recess\n            translate([10, 8, 15])\n                cube([30, 24, 70]);\n        }\n        \n        // Vertical decorative ribs\n        for(i = [-1:1]) {\n            translate([25 + i*10, 6, 15])\n                cube([2, 26, 70]);\n        }\n        \n        // Door handle\n        translate([42, 20, 50])\n            cylinder(h=5, r=3, $fn=16);\n    }\n}\n\n// Column details on sides\nmodule side_column(x_pos) {\n    translate([x_pos, -2, 0]) {\n        // Base\n        translate([0, 0, 0])\n            cylinder(h=5, r=4, $fn=24);\n        \n        // Column shaft\n        translate([0, 0, 5])\n            cylinder(h=110, r=3, $fn=24);\n        \n        // Capital\n        translate([0, 0, 115])\n            cylinder(h=5, r=4, $fn=24);\n    }\n}\n\n// Decorative top with architrave\nmodule basilica_top() {\n    // Main top\n    translate([-5, -5, 120])\n        cube([110, 50, 5]);\n    \n    // Architrave detail\n    translate([0, 0, 125]) {\n        for(i = [0:9]) {\n            translate([i*10, 0, 0])\n                cube([8, 40, 3]);\n        }\n    }\n    \n    // Small pediment peaks\n    translate([50, 20, 128]) {\n        rotate([90, 0, 0])\n            cylinder(h=10, r1=5, r2=0, $fn=3);\n    }\n}\n\n// Shelf supports inside\nmodule shelf_supports() {\n    for(z = [30, 60, 90]) {\n        translate([10, wall_thickness, z])\n            cube([80, 2, 2]);\n        translate([10, 40-wall_thickness-2, z])\n            cube([80, 2, 2]);\n    }\n}\n\n// Assembly\nunion() {\n    cabinet_body();\n    \n    // Doors\n    arched_door(5);\n    arched_door(55);\n    \n    // Columns\n    side_column(0);\n    side_column(100);\n    \n    // Top decoration\n    basilica_top();\n    \n    // Interior shelf supports\n    shelf_supports();\n    \n    // Bottom base molding\n    translate([-2, -2, -3])\n        cube([104, 44, 3]);\n}",
    "renders": true
  },
  {
    "decorative_art": "cathedral",
    "openscad_code": "// Cathedral-inspired Decorative Bookend\n// Realistic style, medium complexity, 3D printable\n\nwall_thickness = 2;\nmodule main_arch() {\n    // Central gothic arch\n    difference() {\n        cube([30, 20, 50], center=true);\n        translate([0, 0, 15])\n            cube([26, 22, 40], center=true);\n    }\n}\n\nmodule side_pillar() {\n    // Pillar with base and capital\n    union() {\n        // Base\n        translate([0, 0, -23])\n            cube([10, 10, 6], center=true);\n        // Shaft\n        translate([0, 0, 0])\n            cube([8, 8, 40], center=true);\n        // Capital\n        translate([0, 0, 25])\n            cube([10, 10, 4], center=true);\n    }\n}\n\nmodule rose_window() {\n    // Circular window with tracery\n    difference() {\n        cylinder(h=wall_thickness, r=8, $fn=32);\n        cylinder(h=wall_thickness+1, r=6, $fn=32);\n        // Tracery pattern\n        for(i=[0:6]) {\n            rotate([0, 0, i*60])\n                translate([0, 7, -0.5])\n                    cube([2, 14, wall_thickness+1], center=true);\n        }\n    }\n}\n\nmodule flying_butress() {\n    // Support arch\n    union() {\n        translate([0, -5, 10])\n            rotate([0, 0, 30])\n            cube([20, 2, 2], center=true);\n        translate([0, -10, 5])\n            cube([2, 2, 10], center=true);\n    }\n}\n\nmodule decorative_spire() {\n    // Pointed spire with layers\n    union() {\n        for(i=[0:3]) {\n            translate([0, 0, 25+i*3])\n                scale([1-i*0.15, 1-i*0.15, 1])\n                cylinder(h=3, r=4-i, $fn=8);\n        }\n        // Cross on top\n        translate([0, 0, 37])\n            union() {\n                cube([0.5, 4, 0.5], center=true);\n                cube([4, 0.5, 0.5], center=true);\n            }\n    }\n}\n\nmodule gothic_tracery() {\n    // Decorative pattern for sides\n    for(i=[0:2]) {\n        translate([0, 0, -15+i*15])\n            difference() {\n                cube([25, wall_thickness, 10], center=true);\n                for(j=[0:3]) {\n                    translate([-10+j*7, 0, 0])\n                        scale([1, 1, 0.7])\n                        cylinder(h=12, r=2, $fn=3);\n                }\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    // Central structure\n    main_arch();\n    \n    // Side pillars\n    translate([-20, 0, 0]) side_pillar();\n    translate([20, 0, 0]) side_pillar();\n    \n    // Rose window\n    translate([0, 11, 10]) rose_window();\n    \n    // Flying butresses\n    translate([-20, 0, 0]) flying_butress();\n    translate([20, 0, 0]) mirror([1,0,0]) flying_butress();\n    \n    // Spires on pillars\n    translate([-20, 0, 30]) decorative_spire();\n    translate([20, 0, 30]) decorative_spire();\n    \n    // Base platform\n    translate([0, 0, -28])\n        cube([50, 15, 4], center=true);\n    \n    // Back support for bookend function\n    translate([0, -7.5, 0])\n        cube([50, 2, 50], center=true);\n    \n    // Side decorations\n    translate([0, 10, 0]) gothic_tracery();\n}",
    "renders": true
  },
  {
    "decorative_art": "temple",
    "openscad_code": "// Temple-style Altar with ornate details\n// Overall dimensions: 90 x 60 x 110 mm\n\n$fn = 32;\n\n// Main altar structure\nmodule altar_base() {\n    // Base platform\n    difference() {\n        cube([90, 60, 8], center=true);\n        \n        // Decorative recess pattern on top\n        for(x = [-30, -10, 10, 30]) {\n            for(y = [-20, 0, 20]) {\n                translate([x, y, 3.9])\n                    cube([8, 8, 2], center=true);\n            }\n        }\n    }\n}\n\n// Decorative columns\nmodule column(x_pos) {\n    translate([x_pos, 0, 0]) {\n        union() {\n            // Column base\n            cylinder(h=4, r1=6, r2=6);\n            translate([0, 0, 2])\n                cylinder(h=4, r1=7, r2=6);\n            \n            // Column shaft\n            translate([0, 0, 4]) {\n                difference() {\n                    cylinder(h=70, r1=5, r2=5);\n                    \n                    // Fluting detail\n                    for(i = [0:11]) {\n                        rotate([0, 0, i*30])\n                            translate([4.8, 0, 0])\n                                cube([2, 0.5, 70], center=true);\n                    }\n                }\n            }\n            \n            // Column capital\n            translate([0, 0, 74])\n                cylinder(h=6, r1=7, r2=5);\n        }\n    }\n}\n\n// Altar top with temple roof styling\nmodule altar_top() {\n    translate([0, 0, 85]) {\n        difference() {\n            // Main altar surface\n            cube([80, 50, 6], center=true);\n            \n            // Sacrificial depression\n            translate([0, 0, 2.9])\n                cube([40, 25, 4], center=true);\n        }\n        \n        // Miniature temple roof structure\n        translate([0, 0, 6]) {\n            // Roof base\n            cube([85, 55, 4], center=true);\n            \n            // Stepped temple roof\n            for(i = [0:3]) {\n                translate([0, 0, 6 + i*3])\n                    cube([85 - i*8, 55 - i*8, 3], center=true);\n            }\n            \n            // Finial\n            translate([0, 0, 18])\n                cylinder(h=8, r1=3, r2=0);\n        }\n    }\n}\n\n// Decorative side panels\nmodule side_panel(y_pos) {\n    translate([0, y_pos, 8]) {\n        difference() {\n            // Panel base\n            cube([86, 2, 77], center=true);\n            \n            // Lotus pattern cutouts\n            for(x = [-35:10:35]) {\n                for(z = [5:15:70]) {\n                    translate([x, 0, z])\n                        rotate([90, 0, 0])\n                            cylinder(h=2, r1=4, r2=0);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base structure\n    altar_base();\n    \n    // Four columns at corners\n    column(-35);\n    column(35);\n    column(-35);\n    scale([1, -1, 1])\n        translate([0, 0, 0])\n            column(35);\n    \n    // Side panels\n    side_panel(-29);\n    scale([1, -1, 1])\n        translate([0, 0, 0])\n            side_panel(29);\n    \n    // Top altar and temple roof\n    altar_top();\n}",
    "renders": true
  },
  {
    "decorative_art": "shrine",
    "openscad_code": "// Realistic Medium-Complexity Shrine Cabinet\n// Overall footprint ~60 x 40 mm, height ~110 mm\n// Wall thickness = 2 mm\n\nmodule shrine() {\n    // Main carcase\n    difference() {\n        // Outer shell\n        cube([60, 40, 110], center = true);\n        // Hollow core\n        translate([0, 0, 1])\n            cube([56, 36, 106], center = true);\n    }\n\n    // Base plinth\n    translate([0, 0, -56])\n    difference() {\n        cube([66, 46, 12], center = true);\n        translate([0, 0, 2])\n            cube([62, 42, 10], center = true);\n    }\n\n    // Roof crown\n    translate([0, 0, 56])\n    union() {\n        // Roof slab\n        cube([70, 50, 6], center = true);\n        // Overhanging lip front & back\n        translate([0, 0, 4])\n            cube([74, 54, 2], center = true);\n    }\n\n    // Double doors with frames\n    translate([0, 20, 0])\n    union() {\n        // Door frame\n        difference() {\n            cube([52, 4, 90], center = true);\n            translate([0, 1, 0])\n                cube([48, 5, 86], center = true);\n        }\n        // Left door\n        translate([-13, 0, 0])\n        difference() {\n            cube([24, 2, 86], center = true);\n            // Door panel recess\n            translate([0, 1, 0])\n                cube([20, 3, 82], center = true);\n            // Handle hole\n            translate([10, 1, -30])\n                cylinder(h = 4, d = 4, center = true);\n        }\n        // Right door (mirror)\n        translate([13, 0, 0])\n        mirror([1, 0, 0])\n        difference() {\n            cube([24, 2, 86], center = true);\n            translate([0, 1, 0])\n                cube([20, 3, 82], center = true);\n            translate([10, 1, -30])\n                cylinder(h = 4, d = 4, center = true);\n        }\n    }\n\n    // Interior shelf\n    translate([0, 0, -20])\n        cube([54, 2, 36], center = true);\n\n    // Decorative front pillars\n    for (x = [-25, 25]) {\n        translate([x, 0, 0])\n        difference() {\n            cylinder(h = 110, d = 6, center = true);\n            translate([0, 0, 1])\n                cylinder(h = 106, d = 2, center = true);\n        }\n    }\n\n    // Ornate ridge cap\n    translate([0, 0, 60])\n    union() {\n        cube([6, 54, 4], center = true);\n        // Ridge spheres\n        for (x = [-20, -10, 0, 10, 20]) {\n            translate([x, 0, 3])\n                sphere(d = 4);\n        }\n    }\n\n    // Back panel lattice detail\n    translate([0, -21, 0])\n    for (z = [-40, -20, 0, 20, 40]) {\n        translate([0, 0, z])\n            cube([54, 2, 8], center = true);\n    }\n}\n\nshrine();",
    "renders": true
  },
  {
    "decorative_art": "pagoda",
    "openscad_code": "// Pagoda Furniture - Decorative Display Shelf\n// Medium complexity realistic style with 3D-printable features\n// Overall size: 100mm wide x 100mm deep x 150mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main pagoda shelf structure\nmodule pagoda_shelf() {\n    \n    // Base platform\n    translate([0, 0, 0])\n    cube([100, 100, 5], center = true);\n    \n    // Corner posts\n    for(x = [-45, 45])\n    for(y = [-45, 45])\n    translate([x, y, 7.5])\n    cylinder(h = 135, r = 3, $fn = 16);\n    \n    // First tier - bottom shelf\n    translate([0, 0, 15])\n    difference() {\n        cube([90, 90, 10], center = true);\n        translate([0, 0, -1])\n        cube([90 - wall*2, 90 - wall*2, 12], center = true);\n    }\n    \n    // First roof tier\n    translate([0, 0, 25])\n    roof_tier(100, 10);\n    \n    // Second tier - middle shelf\n    translate([0, 0, 45])\n    difference() {\n        cube([80, 80, 8], center = true);\n        translate([0, 0, -1])\n        cube([80 - wall*2, 80 - wall*2, 10], center = true);\n    }\n    \n    // Second roof tier\n    translate([0, 0, 53])\n    roof_tier(90, 8);\n    \n    // Third tier - top shelf\n    translate([0, 0, 71])\n    difference() {\n        cube([70, 70, 6], center = true);\n        translate([0, 0, -1])\n        cube([70 - wall*2, 70 - wall*2, 8], center = true);\n    }\n    \n    // Third roof tier\n    translate([0, 0, 77])\n    roof_tier(80, 6);\n    \n    // Top spire\n    translate([0, 0, 83])\n    spire();\n    \n    // Decorative brackets\n    for(x = [-40, 40])\n    for(y = [-40, 40])\n    bracket(x, y, 25);\n    \n    for(x = [-35, 35])\n    for(y = [-35, 35])\n    bracket(x, y, 53);\n    \n    for(x = [-30, 30])\n    for(y = [-30, 30])\n    bracket(x, y, 77);\n}\n\n// Roof tier module with upturned corners\nmodule roof_tier(base_width, height) {\n    difference() {\n        // Main roof block\n        cube([base_width, base_width, height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n        cube([base_width - wall*2, base_width - wall*2, height + 2], center = true);\n    }\n    \n    // Corner details\n    for(x = [-base_width/2 + 5, base_width/2 - 5])\n    for(y = [-base_width/2 + 5, base_width/2 - 5])\n    translate([x, y, height/2 + 2])\n    cube([8, 8, 4], center = true);\n}\n\n// Spire module\nmodule spire() {\n    // Base spire\n    cylinder(h = 20, r1 = 8, r2 = 4, $fn = 16);\n    \n    // Middle spire\n    translate([0, 0, 20])\n    cylinder(h = 15, r1 = 4, r2 = 2, $fn = 16);\n    \n    // Top ball\n    translate([0, 0, 35])\n    sphere(r = 3, $fn = 16);\n}\n\n// Decorative bracket module\nmodule bracket(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos])\n    rotate([0, 0, 45])\n    cube([6, 6, 4], center = true);\n}\n\n// Main assembly\npagoda_shelf();",
    "renders": true
  },
  {
    "decorative_art": "stupa",
    "openscad_code": "// Stupa-inspired decorative side table\n// Overall dimensions: 120mm height, 80mm diameter\n\n// Wall thickness constant\nwall = 2;\n\n// Main module for the stupa table\nmodule stupa_table() {\n    // Base platform\n    difference() {\n        cylinder(h = 8, d = 80, $fn = 64);\n        translate([0, 0, 6])\n            cylinder(h = 4, d = 76, $fn = 64);\n    }\n    \n    // Main stupa body - inverted dome\n    translate([0, 0, 8])\n    difference() {\n        cylinder(h = 25, d = 70, $fn = 64);\n        translate([0, 0, wall])\n            cylinder(h = 23, d = 70 - 2*wall, $fn = 64);\n    }\n    \n    // Harmika platform (square with rounded edges)\n    translate([0, 0, 33])\n    difference() {\n        minkowski() {\n            cube([45, 45, 8], center = true);\n            cylinder(h = 0.1, d = 5, $fn = 16);\n        }\n        translate([0, 0, wall])\n            minkowski() {\n                cube([45 - 2*wall, 45 - 2*wall, 6], center = true);\n                cylinder(h = 0.1, d = 5, $fn = 16);\n            }\n    }\n    \n    // Spire base cylinder\n    translate([0, 0, 41])\n    difference() {\n        cylinder(h = 12, d = 20, $fn = 32);\n        translate([0, 0, wall])\n            cylinder(h = 10, d = 20 - 2*wall, $fn = 32);\n    }\n    \n    // Umbrella rings with realistic proportions\n    for(i = [0:2]) {\n        translate([0, 0, 53 + i*5])\n        difference() {\n            cylinder(h = 3, d = 25 - i*3, $fn = 32);\n            translate([0, 0, wall])\n                cylinder(h = 1, d = 25 - i*3 - 2*wall, $fn = 32);\n        }\n    }\n    \n    // Final spire point\n    translate([0, 0, 68])\n    difference() {\n        cylinder(h1 = 15, h2 = 0, r1 = 8, r2 = 0, $fn = 32);\n        translate([0, 0, wall])\n            cylinder(h1 = 13, h2 = 0, r1 = 8 - wall, r2 = 0, $fn = 32);\n    }\n    \n    // Decorative rings around base\n    translate([0, 0, 15])\n    for(i = [0:2]) {\n        translate([0, 0, i*6])\n        difference() {\n            cylinder(h = 2, d = 72 - i*4, $fn = 64);\n            translate([0, 0, wall])\n                cylinder(h = 0.5, d = 72 - i*4 - 2*wall, $fn = 64);\n        }\n    }\n    \n    // Structural support ribs inside body\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([0, 26, 20.5])\n        cube([wall, 8, 21], center = true);\n    }\n}\n\n// Generate the table\nstupa_table();",
    "renders": true
  },
  {
    "decorative_art": "velocity",
    "openscad_code": "// Velocity Furniture - Modern Console Table\n// 3D printable with 2mm wall thickness and no overhangs\n\nwall_thickness = 2;\nscale_factor = 3;\n\n// Main body dimensions\nbody_width = 120 * scale_factor;\nbody_depth = 30 * scale_factor;\nbody_height = 80 * scale_factor;\n\n// Leg dimensions\nleg_width = 8 * scale_factor;\nleg_depth = body_depth;\nleg_height = 60 * scale_factor;\n\n// Shelf dimensions\nshelf_thickness = 4 * scale_factor;\nshelf_width = body_width - 20;\nshelf_depth = body_depth - 10;\n\n// Decorative velocity elements\nvelocity_width = 40 * scale_factor;\nvelocity_height = 15 * scale_factor;\nvelocity_depth = 2 * scale_factor;\n\n// Create the velocity console table\nmodule velocity_table() {\n    // Main body - hollowed for printing\n    difference() {\n        cube([body_width, body_depth, body_height], center=true);\n        translate([0, 0, wall_thickness/2])\n        cube([body_width-wall_thickness*2, body_depth-wall_thickness, body_height-wall_thickness], center=true);\n    }\n    \n    // Front velocity pattern\n    for(i = [-2:2]) {\n        translate([i * velocity_width/2, body_depth/2 - velocity_depth/2, body_height/2 - velocity_height])\n        rotate([90, 0, 0])\n        velocity_shape();\n    }\n    \n    // Rear velocity pattern\n    for(i = [-2:2]) {\n        translate([i * velocity_width/2, -body_depth/2 + velocity_depth/2, body_height/2 - velocity_height])\n        rotate([-90, 0, 0])\n        velocity_shape();\n    }\n    \n    // Left legs\n    translate([-body_width/2 + leg_width/2, 0, -leg_height/2])\n    leg();\n    \n    translate([-body_width/2 + leg_width*1.5, 0, -leg_height/2])\n    leg();\n    \n    // Right legs\n    translate([body_width/2 - leg_width/2, 0, -leg_height/2])\n    leg();\n    \n    translate([body_width/2 - leg_width*1.5, 0, -leg_height/2])\n    leg();\n    \n    // Middle shelf\n    translate([0, 0, -body_height/4])\n    shelf();\n    \n    // Bottom shelf\n    translate([0, 0, -body_height/2 + shelf_thickness])\n    shelf();\n    \n    // Decorative top rail\n    translate([0, 0, body_height/2 + wall_thickness/2])\n    cube([body_width+wall_thickness*2, body_depth+wall_thickness*2, wall_thickness], center=true);\n    \n    // Side decorative panels\n    side_panel(-body_width/2);\n    side_panel(body_width/2);\n}\n\n// Velocity shape module\nmodule velocity_shape() {\n    // Create arrow-like velocity pattern\n    difference() {\n        // Main arrow body\n        cube([velocity_width, velocity_depth, velocity_height], center=true);\n        \n        // Cutout for arrow shape\n        translate([velocity_width/4, 0, velocity_height/4])\n        cube([velocity_width/2, velocity_depth+1, velocity_height/2], center=true);\n        \n        // Arrow head\n        translate([velocity_width/2 - velocity_width/8, 0, 0])\n        rotate([0, 90, 0])\n        cylinder(h=velocity_width/4, r=velocity_height/4, center=true);\n    }\n}\n\n// Leg module with reinforcement\nmodule leg() {\n    difference() {\n        cube([leg_width, leg_depth, leg_height], center=true);\n        // Hollow core for material saving\n        translate([0, 0, 0])\n        cube([leg_width-wall_thickness*2, leg_depth-wall_thickness*2, leg_height-wall_thickness], center=true);\n    }\n    \n    // Reinforcement ribs\n    for(i = [-1, 1]) {\n        translate([i * (leg_width/2 - wall_thickness/2), 0, 0])\n        cube([wall_thickness, leg_depth/2, leg_height], center=true);\n    }\n}\n\n// Shelf module with velocity pattern\nmodule shelf() {\n    difference() {\n        cube([shelf_width, shelf_depth, shelf_thickness], center=true);\n        // Hollow underside\n        translate([0, 0, shelf_thickness/2 - wall_thickness/2])\n        cube([shelf_width-wall_thickness*2, shelf_depth-wall_thickness*2, wall_thickness], center=true);\n    }\n    \n    // Velocity cutouts on shelf\n    for(i = [-2:2]) {\n        translate([i * velocity_width/2, 0, shelf_thickness/2])\n        rotate([0, 0, 0])\n        scale([0.7, 0.5, 1])\n        velocity_shape();\n    }\n}\n\n// Side panel with velocity pattern\nmodule side_panel(x_pos) {\n    translate([x_pos, 0, 0])\n    rotate([0, 90, 0])\n    difference() {\n        cube([body_height, body_depth, wall_thickness], center=true);\n        \n        // Velocity pattern cutouts\n        for(i = [-1:1]) {\n            translate([i * body_height/3, 0, 0])\n            rotate([0, 0, 90])\n            scale([0.5, 0.5, 1])\n            velocity_shape();\n        }\n    }\n}\n\n// Render the complete table\nvelocity_table();",
    "renders": true
  },
  {
    "decorative_art": "thunder",
    "openscad_code": "// Thunder-shaped side table with bolt legs and cloud shelf\n// Overall size: 120mm wide x 80mm deep x 110mm tall\n// Wall thickness: 2mm throughout\n\nmodule thunder_table() {\n    // Main cloud shelf\n    translate([0, 0, 85]) cloud_shelf();\n    \n    // Four lightning bolt legs\n    translate([50, 30, 0]) bolt_leg();\n    translate([-50, 30, 0]) mirror([1,0,0]) bolt_leg();\n    translate([50, -30, 0]) mirror([0,1,0]) bolt_leg();\n    translate([-50, -30, 0]) mirror([1,1,0]) bolt_leg();\n}\n\nmodule cloud_shelf() {\n    difference() {\n        // Main cloud body\n        union() {\n            // Central body\n            translate([0, 0, 0]) scale([1, 0.7, 1]) sphere(d=100, $fn=50);\n            \n            // Side puffs\n            translate([40, 0, 5]) scale([0.8, 0.6, 0.8]) sphere(d=50, $fn=30);\n            translate([-40, 0, 5]) scale([0.8, 0.6, 0.8]) sphere(d=50, $fn=30);\n            translate([0, 25, 8]) scale([0.7, 0.5, 0.7]) sphere(d=40, $fn=30);\n            translate([0, -25, 8]) scale([0.7, 0.5, 0.7]) sphere(d=40, $fn=30);\n        }\n        \n        // Hollow center for 2mm walls\n        translate([0, 0, -2]) scale([0.96, 0.66, 0.96]) sphere(d=100, $fn=50);\n        \n        // Bolt leg holes (4 holes)\n        for (x = [50, -50])\n            for (y = [30, -30])\n                translate([x, y, -10]) cylinder(h=20, d=5);\n    }\n}\n\nmodule bolt_leg() {\n    difference() {\n        // Main bolt shape\n        union() {\n            // Vertical sections\n            for (i = [0:1:4]) {\n                translate([0, 0, i*20]) \n                    rotate([0, 0, i%2*30]) \n                    cube([8, 8, 20], center=true);\n            }\n            \n            // Diagonal connectors\n            for (i = [0:1:3]) {\n                translate([0, 0, i*20+10]) \n                    rotate([0, 0, i%2*30+15]) \n                    scale([1.2, 1, 1]) \n                    cube([8, 8, 10], center=true);\n            }\n            \n            // Base foot\n            translate([0, 0, 0]) \n                cube([15, 15, 5], center=true);\n                \n            // Top connector\n            translate([0, 0, 100]) \n                cylinder(h=10, d=8);\n        }\n        \n        // Hollow center for 2mm walls\n        difference() {\n            // Main hollow\n            for (i = [0:1:4]) {\n                translate([0, 0, i*20]) \n                    rotate([0, 0, i%2*30]) \n                    cube([4, 4, 20], center=true);\n            }\n            \n            // Diagonal hollows\n            for (i = [0:1:3]) {\n                translate([0, 0, i*20+10]) \n                    rotate([0, 0, i%2*30+15]) \n                    scale([1.2, 1, 1]) \n                    cube([4, 4, 10], center=true);\n            }\n        }\n    }\n}\n\n// Generate the table\nthunder_table();",
    "renders": true
  },
  {
    "decorative_art": "turbine",
    "openscad_code": "// Turbine Furniture Art Piece - Decorative Side Table\n// Dimensions: 120mm diameter x 45mm height\n// Wall thickness: 2mm throughout for 3D printing\n// Features turbine blade design as decorative base with functional top surface\n\n$fn = 50; // Smooth curves for realistic appearance\n\n// Main module for the complete turbine table\nmodule turbine_table() {\n    // Base support ring\n    base_ring();\n    \n    // Central hub with structural support\n    central_hub();\n    \n    // Turbine blades (6 blades for symmetry and balance)\n    for (i = [0:5]) {\n        rotate([0, 0, i * 60])\n            turbine_blade();\n    }\n    \n    // Top surface - functional table top\n    table_top();\n    \n    // Decorative trim ring\n    trim_ring();\n}\n\n// Base ring - provides stability and houses blade roots\nmodule base_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h = 8, d = 120, center = true);\n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h = 10, d = 116, center = true);\n    }\n}\n\n// Central hub - structural connection point\nmodule central_hub() {\n    // Main hub body\n    cylinder(h = 45, d = 30, center = false);\n    \n    // Decorative top detail\n    translate([0, 0, 45])\n        cylinder(h = 3, d = 35, center = false);\n    \n    // Hub cavity (reduces material, maintains strength)\n    difference() {\n        translate([0, 0, 5])\n            cylinder(h = 35, d = 26, center = false);\n    }\n}\n\n// Individual turbine blade - aerodynamic shape\nmodule turbine_blade() {\n    // Blade root connection\n    translate([50, 0, 0])\n        rotate([90, 0, 90])\n            cylinder(h = 15, d1 = 10, d2 = 8, center = true);\n    \n    // Main blade body - tapered airfoil shape\n    translate([35, 0, 8])\n        rotate([0, 90, 0])\n            scale([1, 0.3, 1])\n                cylinder(h = 35, d1 = 8, d2 = 3, center = true);\n    \n    // Blade support strut\n    translate([42, 0, 4])\n        rotate([0, 90, 0])\n            cylinder(h = 20, d = 4, center = true);\n    \n    // Decorative curve at blade tip\n    translate([20, 0, 12])\n        rotate([0, 90, 0])\n            scale([1, 0.2, 1])\n                sphere(d = 5);\n}\n\n// Table top - functional surface with decorative edge\nmodule table_top() {\n    // Main top surface\n    translate([0, 0, 40])\n        difference() {\n            cylinder(h = 5, d = 100, center = false);\n            // Lightening holes - reduce material while maintaining strength\n            for (i = [0:5]) {\n                rotate([0, 0, i * 60 + 30])\n                    translate([35, 0, -1])\n                        cylinder(h = 7, d = 8, center = false);\n            }\n        }\n    \n    // Slight dome shape for realistic appearance\n    translate([0, 0, 45])\n        scale([1, 1, 0.2])\n            sphere(d = 95);\n}\n\n// Decorative trim ring around top edge\nmodule trim_ring() {\n    translate([0, 0, 42.5])\n        difference() {\n            cylinder(h = 2, d = 102, center = true);\n            cylinder(h = 3, d = 98, center = true);\n        }\n}\n\n// Generate the complete turbine table\nturbine_table();",
    "renders": true
  },
  {
    "decorative_art": "rail",
    "openscad_code": "// Rail / Balustrade furniture item\n// Overall dimensions: 120mm (L) x 20mm (W) x 80mm (H)\n\n// Parameters\nrail_length = 120;\nrail_height = 80;\nrail_width  = 20;\nwall        = 2;\n\n// Main module\nmodule rail_furniture(){\n    // Top hand-rail\n    translate([0,0,rail_height-10])\n        cube([rail_length, rail_width, 10], center=true);\n\n    // Bottom base rail\n    translate([0,0,0])\n        cube([rail_length, rail_width, 10], center=true);\n\n    // Vertical balusters\n    module baluster(x){\n        translate([x,0,5])\n            difference(){\n                cube([8, rail_width-4, rail_height-20], center=true);\n                // Decorative cut-out\n                translate([0,0,(rail_height-20)/2-15])\n                    rotate([0,0,45])\n                        cube([6, rail_width, 20], center=true);\n            }\n    }\n\n    // Generate balusters\n    for(x = [-rail_length/2+10 : 20 : rail_length/2-10]){\n        baluster(x);\n    }\n\n    // Decorative end caps\n    module end_cap(x){\n        translate([x,0,rail_height/2])\n            difference(){\n                rotate([0,90,0])\n                    cylinder(h=10, d=rail_width, center=true);\n                // Hollow inside\n                rotate([0,90,0])\n                    cylinder(h=12, d=rail_width-2*wall, center=true);\n            }\n    }\n\n    end_cap(-rail_length/2);\n    end_cap(rail_length/2);\n\n    // Reinforcing middle bracket\n    translate([0,0,5])\n        difference(){\n            cube([30, rail_width+4, rail_height-10], center=true);\n            // Cut-outs for weight reduction and style\n            translate([0,0,(rail_height-10)/2-10])\n                cube([26, rail_width+8, 15], center=true);\n        }\n}\n\n// Render\nrail_furniture();",
    "renders": true
  },
  {
    "decorative_art": "marina",
    "openscad_code": "// Marina Bench – OpenSCAD 3D-printable furniture\n// Overall footprint 120 mm (L) × 45 mm (W) × 45 mm (H)\n\nmodule main_assembly() {\n    \n    // --- Seat slats ----------------------------------------------------------\n    for (i = [0:3]) {\n        translate([i*30, 0, 40])        // 4 slats, 30 mm spacing\n            cube([28, 45, 2], center=true);\n    }\n    \n    // --- Arm-rest / side frame ----------------------------------------------\n    module side_frame(x) {\n        translate([x, 0, 0])\n        union() {\n            // Front leg\n            translate([0, 22, 20])\n                cube([4, 4, 40], center=true);\n            // Rear leg\n            translate([0, -22, 20])\n                cube([4, 4, 40], center=true);\n            // Top rail (arm-rest)\n            translate([0, 0, 39])\n                cube([4, 48, 4], center=true);\n            // Bottom stretcher\n            translate([0, 0, 4])\n                cube([4, 48, 4], center=true);\n        }\n    }\n    side_frame(0);       // left side\n    side_frame(120);     // right side\n    \n    // --- Cross-braces for strength ------------------------------------------\n    module cross_brace(y) {\n        translate([60, y, 20])\n            cube([116, 2, 4], center=true);\n    }\n    cross_brace(15);     // front\n    cross_brace(-15);    // back\n    \n    // --- Decorative nautical wheel on back-rest -----------------------------\n    translate([60, 0, 42]) {\n        rotate([90, 0, 0]) {\n            // Wheel rim\n            cylinder(h=3, d=30, center=true, $fn=64);\n            difference() {\n                cylinder(h=3.2, d=26, center=true, $fn=64);\n                cylinder(h=3.4, d=22, center=true, $fn=64);\n            }\n            // Spokes\n            for (a = [0:45:315]) {\n                rotate([0, 0, a])\n                    translate([11, 0, 0])\n                        cube([22, 2, 3], center=true);\n            }\n            // Hub\n            cylinder(h=4, d=4, center=true, $fn=32);\n        }\n    }\n    \n    // --- Mooring-bollard feet (decorative & stable) --------------------------\n    module bollard(x, y) {\n        translate([x, y, 0])\n        union() {\n            cylinder(h=4, d=10, $fn=32);\n            translate([0, 0, 2])\n                for (i = [0:3])\n                    rotate([0, 0, i*90])\n                        translate([4, 0, 0])\n                            cube([2, 2, 2], center=true);\n        }\n    }\n    bollard(10, 20);\n    bollard(10, -20);\n    bollard(110, 20);\n    bollard(110, -20);\n}\n\nmain_assembly();",
    "renders": true
  },
  {
    "decorative_art": "torque",
    "openscad_code": "// Torque Decorative Furniture Piece - OpenSCAD\n// Realistic style, medium complexity\n// Wall thickness: 2mm throughout\n// Overall dimensions: ~120mm diameter, 80mm height\n\n$fn=50;\n\n// Main parameters\ntorque_radius = 60;\ntorque_height = 80;\nwall_thickness = 2;\nleg_height = 15;\n\nmodule torque_frame() {\n    // Outer decorative ring\n    difference() {\n        cylinder(h=torque_height, r=torque_radius, center=true);\n        cylinder(h=torque_height+2, r=torque_radius-wall_thickness, center=true);\n    }\n    \n    // Inner structural ring\n    difference() {\n        cylinder(h=torque_height-10, r=torque_radius-15, center=true);\n        cylinder(h=torque_height+2, r=torque_radius-15-wall_thickness, center=true);\n    }\n    \n    // Decorative spindles connecting rings\n    for(i=[0:11]) {\n        rotate([0,0,i*30]) translate([torque_radius-10, 0, -torque_height/2+5]) {\n            difference() {\n                cube([15, 6, torque_height-10], center=true);\n                cube([13, 4, torque_height-8], center=true);\n            }\n        }\n    }\n}\n\nmodule decorative_pattern() {\n    // Top decorative band\n    translate([0, 0, torque_height/2-3]) {\n        difference() {\n            cylinder(h=6, r=torque_radius-5, center=true);\n            cylinder(h=8, r=torque_radius-10, center=true);\n        }\n    }\n    \n    // Bottom decorative band\n    translate([0, 0, -torque_height/2+3]) {\n        difference() {\n            cylinder(h=6, r=torque_radius-5, center=true);\n            cylinder(h=8, r=torque_radius-10, center=true);\n        }\n    }\n    \n    // Decorative spheres at intersections\n    for(i=[0:5]) {\n        rotate([0,0,i*60]) translate([torque_radius-8, 0, torque_height/2-3]) {\n            sphere(r=3);\n        }\n        rotate([0,0,i*60]) translate([torque_radius-8, 0, -torque_height/2+3]) {\n            sphere(r=3);\n        }\n    }\n}\n\nmodule support_base() {\n    // Central support column\n    difference() {\n        cylinder(h=leg_height, r=torque_radius-25, center=false);\n        cylinder(h=leg_height+2, r=torque_radius-25-wall_thickness, center=false);\n    }\n    \n    // Base plate\n    translate([0, 0, -leg_height/2-2]) {\n        difference() {\n            cylinder(h=4, r=torque_radius-20, center=true);\n            cylinder(h=6, r=torque_radius-22, center=true);\n        }\n    }\n    \n    // Support feet\n    for(i=[0:3]) {\n        rotate([0,0,i*90]) translate([torque_radius-35, 0, -leg_height/2-4]) {\n            difference() {\n                cube([20, 8, 6], center=true);\n                cube([18, 6, 8], center=true);\n            }\n        }\n    }\n}\n\nmodule torque_assembly() {\n    // Main structure\n    union() {\n        torque_frame();\n        decorative_pattern();\n        support_base();\n        \n        // Central decorative element\n        translate([0, 0, 0]) {\n            difference() {\n                cylinder(h=torque_height-20, r=torque_radius-35, center=true);\n                cylinder(h=torque_height-18, r=torque_radius-35-wall_thickness, center=true);\n            }\n        }\n        \n        // Cross braces for stability\n        for(i=[0:1]) {\n            rotate([0,0,i*90]) translate([0, 0, -10]) {\n                difference() {\n                    cube([torque_radius*2-70, 4, 20], center=true);\n                    cube([torque_radius*2-72, 2, 22], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Generate the complete torque furniture piece\ntorque_assembly();",
    "renders": true
  },
  {
    "decorative_art": "chassis",
    "openscad_code": "// Realistic Chassis-style Furniture - Decorative Shelf Unit\n// Medium complexity with 2mm wall thickness for 3D printing\n\n$fn = 40;  // Circle resolution for smooth curves\n\nmodule chassis_frame() {\n    // Main rectangular frame structure\n    difference() {\n        // Outer frame\n        cube([100, 50, 80]);\n        \n        // Hollow center\n        translate([2, 2, 2])\n            cube([96, 46, 76]);\n    }\n}\n\nmodule vertical_supports() {\n    // Four corner posts\n    for(x = [5, 85]) {\n        for(y = [5, 35]) {\n            translate([x, y, 0])\n                cylinder(h = 80, r = 4);\n        }\n    }\n}\n\nmodule cross_braces() {\n    // Horizontal braces at top and bottom\n    for(z = [10, 70]) {\n        // Front braces\n        translate([10, 5, z])\n            cube([80, 2, 2]);\n            \n        // Side braces\n        translate([5, 10, z])\n            cube([2, 30, 2]);\n    }\n}\n\nmodule shelf_supports() {\n    // Triangular shelf brackets\n    module bracket() {\n        difference() {\n            // Main bracket body\n            translate([0, 0, 0])\n                cube([20, 2, 15]);\n                \n            // Lightening holes\n            for(i = [1, 2]) {\n                translate([i * 5, -0.5, 5])\n                    cylinder(h = 3, r = 1.5);\n            }\n        }\n        \n        // Decorative gusset\n        translate([0, 1, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 14, r1 = 10, r2 = 0);\n    }\n    \n    // Position brackets\n    translate([15, 25, 40])\n        bracket();\n    translate([65, 25, 40])\n        mirror([1, 0, 0])\n            bracket();\n}\n\nmodule shelves() {\n    // Main shelf platforms\n    module shelf(width) {\n        difference() {\n            // Platform\n            translate([0, 0, 0])\n                cube([width, 40, 2]);\n                \n            // Ventilation slots\n            for(x = [10:20:width-10]) {\n                translate([x, 5, -0.5])\n                    cube([2, 30, 3]);\n            }\n        }\n    }\n    \n    // Position shelves\n    translate([10, 5, 42])\n        shelf(80);\n    translate([15, 5, 20])\n        shelf(70);\n}\n\nmodule back_panel() {\n    // Perforated back panel\n    difference() {\n        // Solid back\n        translate([2, 48, 2])\n            cube([96, 2, 76]);\n            \n        // Hexagonal ventilation pattern\n        for(row = [0:3]) {\n            for(col = [0:4]) {\n                translate([10 + col * 20, 48.5, 10 + row * 20])\n                    rotate([0, 90, 0])\n                        cylinder(h = 3, r = 4, $fn = 6);\n            }\n        }\n    }\n}\n\nmodule base_feet() {\n    // Adjustable feet\n    module foot() {\n        difference() {\n            // Main foot body\n            cylinder(h = 8, r = 6);\n            \n            // Recessed adjustment point\n            translate([0, 0, -1])\n                cylinder(h = 10, r = 3);\n        }\n    }\n    \n    // Position feet at corners\n    for(x = [10, 90]) {\n        for(y = [10, 40]) {\n            translate([x, y, -8])\n                foot();\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chassis_frame();\n    vertical_supports();\n    cross_braces();\n    shelf_supports();\n    shelves();\n    back_panel();\n    base_feet();\n}",
    "renders": true
  },
  {
    "decorative_art": "cruiser",
    "openscad_code": "// Cruiser-style decorative side table\n// Realistic medium-complexity furniture piece\n\n// Parameters\ntable_height = 45;\ntable_width = 40;\ntable_depth = 30;\nleg_thickness = 4;\ntop_thickness = 3;\nrail_height = 8;\n\n// Main module\nmodule cruiser_table() {\n    // Table top with cruiser-inspired curves\n    difference() {\n        hull() {\n            translate([0, 0, table_height]) \n                cube([table_width, table_depth, top_thickness], center=true);\n            translate([0, 0, table_height + 2]) \n                scale([0.9, 0.85, 1]) \n                    cube([table_width, table_depth, top_thickness], center=true);\n        }\n        \n        // Rounded edges detail\n        for(x = [-table_width/2 + 5, table_width/2 - 5])\n            for(y = [-table_depth/2 + 5, table_depth/2 - 5])\n                translate([x, y, table_height + top_thickness])\n                    cylinder(h=3, r=2, $fn=16);\n    }\n    \n    // Legs with cruiser styling\n    for(x = [-1, 1])\n        for(y = [-1, 1]) {\n            // Main leg post\n            translate([x * (table_width/2 - leg_thickness), \n                      y * (table_depth/2 - leg_thickness), \n                      table_height/2]) {\n                rotate([0, 0, 45])\n                    cube([leg_thickness * 1.5, leg_thickness * 1.5, table_height], center=true);\n            }\n            \n            // Decorative foot base\n            translate([x * (table_width/2 - leg_thickness), \n                      y * (table_depth/2 - leg_thickness), \n                      2]) {\n                rotate([0, 0, 45])\n                    difference() {\n                        cube([leg_thickness * 2, leg_thickness * 2, 4], center=true);\n                        cube([leg_thickness * 1.2, leg_thickness * 1.2, 5], center=true);\n                    }\n            }\n        }\n    \n    // Lower shelf with cruiser curves\n    translate([0, 0, table_height/3])\n        difference() {\n            hull() {\n                cube([table_width * 0.7, table_depth * 0.7, 2], center=true);\n                translate([0, 0, -1])\n                    cube([table_width * 0.6, table_depth * 0.6, 2], center=true);\n            }\n            \n            // Cutout pattern\n            for(i = [-2:2])\n                translate([i * 6, 0, 0])\n                    cylinder(h=3, r=2, $fn=16);\n        }\n    \n    // Side rails with decorative cutouts\n    for(side = [-1, 1]) {\n        // Long side rails\n        translate([0, side * (table_depth/2 - rail_height/2), table_height - rail_height/2])\n            difference() {\n                cube([table_width * 0.8, leg_thickness, rail_height], center=true);\n                for(i = [-1.5:1.5])\n                    translate([i * 8, 0, 0])\n                        cube([leg_thickness * 0.8, leg_thickness + 1, rail_height - 2], center=true);\n            }\n        \n        // Short side rails\n        translate([side * (table_width/2 - rail_height/2), 0, table_height - rail_height/2])\n            rotate([0, 0, 90])\n                difference() {\n                    cube([table_depth * 0.8, leg_thickness, rail_height], center=true);\n                    for(i = [-1:1])\n                        translate([i * 6, 0, 0])\n                            cube([leg_thickness * 0.8, leg_thickness + 1, rail_height - 2], center=true);\n                }\n    }\n    \n    // Central support column\n    translate([0, 0, table_height/2])\n        cylinder(h=table_height - 4, r=3, $fn=32);\n}\n\n// Generate the table\ncruiser_table();",
    "renders": true
  },
  {
    "decorative_art": "skid",
    "openscad_code": "// Skid Furniture - Realistic Medium Complexity\n// A decorative wooden skid with structural details and realistic proportions\n\n// Overall dimensions (mm)\nlength = 120;\nwidth = 80;\nheight = 20;\n\n// Wood plank dimensions\nplank_width = 15;\nplank_height = 8;\ngap = 2;\n\n// Number of planks\nnum_planks = floor(width / (plank_width + gap));\n\n// Support block dimensions\nblock_width = 10;\nblock_height = 15;\n\n// Create the main skid structure\nmodule skid_plank(l, w, h) {\n    difference() {\n        cube([l, w, h]);\n        \n        // Add wood grain texture\n        for (i = [1:4:l]) {\n            translate([i, w/4, h-0.5])\n                cube([0.5, w/2, 1]);\n        }\n    }\n}\n\n// Create support blocks with angled edges\nmodule support_block(l, w, h) {\n    difference() {\n        cube([l, w, h]);\n        \n        // Chamfer top edges\n        translate([-1, -1, h-2])\n            cube([l+2, w+2, 2]);\n        translate([0, 0, h])\n            cube([l, w, 2]);\n    }\n}\n\n// Create nail heads\nmodule nail_head() {\n    cylinder(h=1, d=2, $fn=8);\n}\n\n// Main assembly\nunion() {\n    // Top deck planks\n    for (i = [0:num_planks-1]) {\n        translate([0, i*(plank_width+gap), plank_height])\n            skid_plank(length, plank_width, plank_height);\n    }\n    \n    // Bottom support beams\n    translate([5, 5, 0])\n        support_block(length-10, block_width, block_height);\n    translate([5, width-5-block_width, 0])\n        support_block(length-10, block_width, block_height);\n    \n    // Center support beam\n    translate([5, width/2-block_width/2, 0])\n        support_block(length-10, block_width, block_height);\n    \n    // End caps\n    translate([0, 5, 0])\n        support_block(5, width-10, block_height);\n    translate([length-5, 5, 0])\n        support_block(5, width-10, block_height);\n    \n    // Nail heads on top planks\n    for (i = [0:num_planks-1]) {\n        for (j = [1:3]) {\n            translate([j*length/4, i*(plank_width+gap)+plank_width/2, plank_height*2+0.5])\n                nail_head();\n        }\n    }\n    \n    // Side reinforcement strips\n    translate([-2, 5, block_height/2])\n        cube([2, width-10, block_height/2]);\n    translate([length, 5, block_height/2])\n        cube([2, width-10, block_height/2]);\n    \n    // Decorative corner braces\n    module corner_brace() {\n        difference() {\n            cube([8, 8, 5]);\n            translate([2, 2, 0])\n                cylinder(h=5, d=3, $fn=16);\n        }\n    }\n    \n    // Add corner braces\n    translate([0, 0, block_height+plank_height*2])\n        corner_brace();\n    translate([length-8, 0, block_height+plank_height*2])\n        corner_brace();\n    translate([0, width-8, block_height+plank_height*2])\n        corner_brace();\n    translate([length-8, width-8, block_height+plank_height*2])\n        corner_brace();\n}",
    "renders": true
  },
  {
    "decorative_art": "pilot",
    "openscad_code": "// Pilot Chair - Realistic Style, Medium Complexity\n// Dimensions: 120mm height, 80mm width, 90mm depth\n\n// Chair parameters\nseat_height = 45;\nseat_width = 60;\nseat_depth = 55;\nback_height = 75;\nleg_height = 40;\narmrest_height = 65;\nwall_thickness = 2;\n\nmodule chair_frame() {\n    // Main seat frame\n    translate([0, 0, leg_height])\n    difference() {\n        cube([seat_width, seat_depth, wall_thickness*3], center=true);\n        cube([seat_width-wall_thickness*2, seat_depth-wall_thickness*2, wall_thickness*4], center=true);\n    }\n    \n    // Back frame\n    translate([0, -seat_depth/2 + wall_thickness, leg_height + back_height/2])\n    difference() {\n        cube([seat_width, wall_thickness*3, back_height], center=true);\n        cube([seat_width-wall_thickness*2, wall_thickness*4, back_height-wall_thickness*2], center=true);\n    }\n    \n    // Legs\n    for(x=[-seat_width/2+5, seat_width/2-5])\n    for(y=[-seat_depth/2+5, seat_depth/2-5]) {\n        translate([x, y, leg_height/2])\n        cylinder(h=leg_height, r=3, center=true);\n    }\n}\n\nmodule seat_cushion() {\n    translate([0, 0, leg_height + wall_thickness*1.5])\n    difference() {\n        cube([seat_width-10, seat_depth-10, 8], center=true);\n        cube([seat_width-12, seat_depth-12, 9], center=true);\n    }\n    \n    // Cushion details\n    for(i=[-20:10:20])\n    for(j=[-20:10:20]) {\n        translate([i, j, leg_height + wall_thickness*1.5 + 4])\n        cylinder(h=1, r=1);\n    }\n}\n\nmodule back_cushion() {\n    translate([0, -seat_depth/2 + wall_thickness + 5, leg_height + back_height/2])\n    difference() {\n        cube([seat_width-10, 6, back_height-10], center=true);\n        cube([seat_width-12, 7, back_height-12], center=true);\n    }\n    \n    // Vertical cushion details\n    for(i=[-20:10:20]) {\n        translate([i, -seat_depth/2 + wall_thickness + 5, leg_height + back_height/2])\n        cube([2, 7, back_height-12], center=true);\n    }\n}\n\nmodule armrests() {\n    // Left armrest\n    translate([-seat_width/2-2, 0, armrest_height])\n    difference() {\n        cube([4, seat_depth-10, 8], center=true);\n        cube([2, seat_depth-12, 6], center=true);\n    }\n    \n    // Right armrest\n    translate([seat_width/2+2, 0, armrest_height])\n    difference() {\n        cube([4, seat_depth-10, 8], center=true);\n        cube([2, seat_depth-12, 6], center=true);\n    }\n    \n    // Armrest supports\n    translate([-seat_width/2-2, 0, (armrest_height+leg_height)/2])\n    cylinder(h=armrest_height-leg_height, r=2, center=true);\n    \n    translate([seat_width/2+2, 0, (armrest_height+leg_height)/2])\n    cylinder(h=armrest_height-leg_height, r=2, center=true);\n}\n\nmodule pilot_details() {\n    // Headrest\n    translate([0, -seat_depth/2 + wall_thickness, leg_height + back_height - 5])\n    difference() {\n        cube([30, 15, 10], center=true);\n        cube([28, 13, 12], center=true);\n    }\n    \n    // Side bolsters\n    for(side=[-1, 1]) {\n        translate([side*(seat_width/2-5), 0, leg_height + back_height/2])\n        difference() {\n            cube([10, seat_depth/2, back_height-20], center=true);\n            cube([8, seat_depth/2-2, back_height-22], center=true);\n        }\n    }\n    \n    // Base support bar\n    translate([0, 0, leg_height/2])\n    rotate([90, 0, 0])\n    cylinder(h=seat_width-20, r=3, center=true);\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    seat_cushion();\n    back_cushion();\n    armrests();\n    pilot_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "rudder",
    "openscad_code": "// Rudder Furniture - Decorative Wall Art Piece\n// Realistic style, medium complexity\n// Overall dimensions: ~120mm height x ~80mm width x ~20mm depth\n\n// Parameters\nwall_thickness = 2;\nblade_width = 70;\nblade_height = 100;\nhandle_length = 40;\nhandle_diameter = 8;\nbase_width = 80;\nbase_height = 25;\nbase_depth = 15;\ndetail_radius = 1.5;\n\n// Main blade with tapered shape\nmodule rudder_blade() {\n    // Tapered blade shape using hull of scaled cubes\n    hull() {\n        translate([0, 0, -blade_height/2]) \n            cube([blade_width, wall_thickness, blade_height/8], center=true);\n        translate([0, 0, blade_height/2 - blade_height/8]) \n            scale([0.7, 1, 1]) \n            cube([blade_width, wall_thickness, blade_height/8], center=true);\n    }\n    \n    // Reinforcement ribs\n    for(i = [-2:1:2]) {\n        translate([i * blade_width/6, 0, 0])\n            cube([2, wall_thickness + 1, blade_height * 0.8], center=true);\n    }\n    \n    // Decorative circular details\n    for(i = [-1.5:1:1.5]) {\n        for(j = [-0.5:0.5:0.5]) {\n            translate([i * blade_width/4, 0, j * blade_height/3])\n                cylinder(r=detail_radius, h=wall_thickness + 0.5, center=true);\n        }\n    }\n}\n\n// Handle with ergonomic grip\nmodule rudder_handle() {\n    // Main handle shaft\n    translate([0, 0, blade_height/2 + handle_length/2])\n        rotate([90, 0, 0])\n        cylinder(h=handle_length, r=handle_diameter/2, center=true);\n    \n    // Grip rings for better handling\n    for(pos = [0.2, 0.5, 0.8]) {\n        translate([0, 0, blade_height/2 + handle_length * pos])\n            rotate([90, 0, 0])\n            cylinder(h=3, r=handle_diameter/2 + 1, center=true);\n    }\n    \n    // End cap\n    translate([0, 0, blade_height/2 + handle_length])\n        sphere(r=handle_diameter/2 + 1);\n}\n\n// Mounting base plate\nmodule mounting_base() {\n    // Base plate with rounded edges\n    difference() {\n        translate([0, 0, -blade_height/2 - base_height/2])\n            cube([base_width, base_depth, base_height], center=true);\n        \n        // Rounded edges\n        translate([base_width/2 - 5, 0, -blade_height/2 - base_height/2])\n            rotate([0, 90, 0])\n            cylinder(h=base_depth, r=5, center=true);\n        translate([-base_width/2 + 5, 0, -blade_height/2 - base_height/2])\n            rotate([0, 90, 0])\n            cylinder(h=base_depth, r=5, center=true);\n    }\n    \n    // Mounting holes\n    for(x = [-1, 1]) {\n        for(z = [-1, 1]) {\n            translate([x * (base_width/2 - 15), 0, -blade_height/2 - base_height/2 + z * 8])\n                cylinder(h=base_depth + 1, r=2.5, center=true);\n        }\n    }\n}\n\n// Decorative trim elements\nmodule decorative_trim() {\n    // Top decorative piece\n    translate([0, 0, blade_height/2 + 5])\n        cube([blade_width * 0.4, wall_thickness + 1, 10], center=true);\n    \n    // Side scrolls\n    for(side = [-1, 1]) {\n        translate([side * blade_width/2 - side * 5, 0, 0])\n            rotate([0, side * 10, 0])\n            scale([0.5, 1, 1])\n            cylinder(h=blade_height * 0.9, r=5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    rudder_blade();\n    rudder_handle();\n    mounting_base();\n    decorative_trim();\n}",
    "renders": true
  },
  {
    "decorative_art": "chopper",
    "openscad_code": "// Chopper-style bar stool (realistic, medium complexity)\n// Overall height ~110 mm, suitable for 3D printing\n\n$fn = 36;          // Circle resolution for smooth curves\nwall = 2;          // Uniform wall thickness for printability\n\nmodule seat() {\n    // Main saddle seat with chopper styling\n    difference() {\n        // Slightly contoured seat top\n        scale([1, 1.2, 0.2])\n            cylinder(h = 15, d = 80);\n        \n        // Gentle saddle dip\n        translate([0, 0, 13])\n            scale([0.8, 1, 0.5])\n                cylinder(h = 10, d = 60);\n        \n        // Stitching detail grooves\n        for (x = [-25, 0, 25]) {\n            translate([x, 0, 14.9])\n                cube([1.5, 60, 0.5], center = true);\n        }\n    }\n}\n\nmodule backrest() {\n    // Chopper-style sissy bar backrest\n    // Main uprights\n    for (x = [-20, 20]) {\n        translate([x, -45, 0])\n            rotate([0, 10, 0])\n                cylinder(h = 60, d = 6);\n    }\n    \n    // Horizontal support bars\n    for (z = [15, 35, 55]) {\n        translate([0, -45, z])\n            rotate([0, 10, 0])\n                scale([1, 0.2, 0.2])\n                    cylinder(h = 45, d = 8);\n    }\n    \n    // Diamond plate pattern on backrest panel\n    translate([0, -50, 30])\n        rotate([0, 10, 0])\n            scale([0.8, 0.05, 0.5])\n                cube([50, 2, 50]);\n    \n    // Diamond plate texture (simplified)\n    for (i = [-20:10:20])\n        for (j = [0:10:40])\n            translate([i, -48.9, j])\n                scale([0.5, 0.1, 0.5])\n                    rotate([0, 90, 45])\n                        cylinder(h = 5, d = 3);\n}\n\nmodule gas_shock() {\n    // Motorcycle-style adjustable gas shock\n    difference() {\n        // Outer cylinder\n        cylinder(h = 80, d = 12);\n        \n        // Inner cylinder detail\n        translate([0, 0, -1])\n            cylinder(h = 82, d = 8);\n    }\n    \n    // Top mounting bracket\n    translate([0, 0, 80])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 8);\n    \n    // Bottom mounting bracket\n    translate([0, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = 15, d = 8);\n}\n\nmodule footrest() {\n    // Chopper-style foot pegs and support ring\n    // Main support ring\n    rotate_extrude()\n        translate([60, 0, 0])\n            square([wall, 15]);\n    \n    // Foot pegs (4 positions)\n    for (a = [0:90:270]) {\n        rotate([0, 0, a])\n            translate([60, 0, 7.5])\n                rotate([90, 0, 0])\n                    scale([0.3, 1, 1])\n                        cylinder(h = 20, d = 12);\n    }\n    \n    // Support struts\n    for (a = [45:90:315]) {\n        rotate([0, 0, a])\n            translate([30, 0, 0])\n                cube([30, wall*2, 15]);\n    }\n}\n\nmodule base() {\n    // Heavy circular base with chopper wheel styling\n    difference() {\n        // Main base disc\n        cylinder(h = 15, d = 100);\n        \n        // Center hub\n        translate([0, 0, -1])\n            cylinder(h = 17, d = 20);\n        \n        // Weight reduction holes (spoke pattern)\n        for (a = [0:30:330]) {\n            rotate([0, 0, a])\n                translate([35, 0, -1])\n                    cylinder(h = 17, d = 15);\n        }\n    }\n    \n    // Hub details\n    translate([0, 0, 15])\n        cylinder(h = 5, d = 25);\n    \n    // Axle bolt detail\n    translate([0, 0, 20])\n        cylinder(h = 3, d = 8);\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Gas shock assembly\n    translate([0, 0, 15])\n        gas_shock();\n    \n    // Footrest at mid-height\n    translate([0, 0, 40])\n        footrest();\n    \n    // Seat\n    translate([0, 0, 95])\n        seat();\n    \n    // Backrest\n    translate([0, 0, 95])\n        backrest();\n}",
    "renders": true
  },
  {
    "decorative_art": "streamline",
    "openscad_code": "// Streamline Art-Deco Side Table  \n// Overall footprint: 90 mm x 90 mm, height 110 mm  \n// Wall thickness: 2 mm throughout for easy 3D printing  \n\n// MAIN BODY -------------------------------------------------------------\nmodule table_assembly() {\n    // Base ring\n    difference() {\n        cylinder(h = 2, d = 90, $fn = 64);\n        cylinder(h = 3, d = 86, $fn = 64);\n    }\n\n    // Four hollow legs with streamline taper\n    for (a = [0, 90, 180, 270]) {\n        rotate([0, 0, a])\n            translate([32, 0, 2])\n                scale([1.5, 1, 1])\n                    leg();\n    }\n\n    // Top disk\n    translate([0, 0, 108])\n        difference() {\n            cylinder(h = 2, d = 90, $fn = 64);\n            cylinder(h = 3, d = 86, $fn = 64);\n        }\n\n    // Central support post\n    translate([0, 0, 2])\n        cylinder(h = 106, d = 12, $fn = 32);\n}\n\n// LEG MODULE ------------------------------------------------------------\nmodule leg() {\n    difference() {\n        // Outer streamlined shape\n        hull() {\n            translate([0, -5, 0]) cylinder(h = 2, d = 10, $fn = 16);\n            translate([0, -3, 106]) cylinder(h = 2, d = 5, $fn = 16);\n        }\n\n        // Hollow core\n        hull() {\n            translate([0, -5, 0]) cylinder(h = 3, d = 6, $fn = 16);\n            translate([0, -3, 106]) cylinder(h = 3, d = 1, $fn = 16);\n        }\n    }\n}\n\n// DECORATIVE SIDE PANELS -------------------------------------------------\nmodule side_panels() {\n    for (a = [45, 135, 225, 315]) {\n        rotate([0, 0, a])\n            translate([0, 0, 55])\n                panel();\n    }\n}\n\nmodule panel() {\n    difference() {\n        // Panel frame\n        translate([0, 0, 0])\n            scale([1, 0.2, 1])\n                cylinder(h = 50, d = 60, $fn = 6);\n\n        // Cut-outs for Art-Deco pattern\n        for (i = [1:3]) {\n            translate([0, -1, i * 12])\n                scale([0.6, 0.5, 0.3])\n                    cube([40, 2, 8], center = true);\n        }\n    }\n}\n\n// ASSEMBLE FINAL MODEL ---------------------------------------------------\nunion() {\n    table_assembly();\n    side_panels();\n}",
    "renders": true
  },
  {
    "decorative_art": "spoiler",
    "openscad_code": "// 3D Printable Decorative Furniture Spoiler\n// Dimensions: 120mm wide x 40mm deep x 35mm tall\n\n$fn = 50;  // Circle resolution\n\nmodule spoiler_base() {\n    // Main rectangular base plate (2mm thick)\n    difference() {\n        cube([120, 40, 2], center=true);\n        \n        // Mounting holes pattern\n        for(x = [-45, -15, 15, 45]) {\n            for(y = [-12, 12]) {\n                translate([x, y, -1.1])\n                    cylinder(h=2.2, r=2.5, center=true);\n            }\n        }\n    }\n}\n\nmodule side_support(width, height, depth) {\n    // Trapezoidal side support structure\n    hull() {\n        translate([-width/2, -depth/2, 0])\n            cube([width, depth, 2]);\n        translate([-width/2+3, -depth/2+2, height])\n            cube([width-6, depth-4, 2]);\n    }\n}\n\nmodule spoiler_wing() {\n    // Main wing surface with aerodynamic curve\n    difference() {\n        union() {\n            // Wing body\n            translate([0, 0, 12])\n                scale([1, 0.6, 0.3])\n                    cube([110, 38, 20], center=true);\n            \n            // Wing tips\n            translate([-55, 0, 12])\n                rotate([0, 15, 0])\n                    scale([1, 0.6, 0.3])\n                        cube([20, 38, 20], center=true);\n            translate([55, 0, 12])\n                rotate([0, -15, 0])\n                    scale([1, 0.6, 0.3])\n                        cube([20, 38, 20], center=true);\n        }\n        \n        // Decorative cutouts\n        for(i = [-40, -20, 0, 20, 40]) {\n            translate([i, 0, 16])\n                scale([1, 0.8, 1])\n                    cylinder(h=15, r=4, center=true);\n        }\n    }\n}\n\nmodule center_fin() {\n    // Vertical stabilizer fin\n    difference() {\n        hull() {\n            translate([0, 0, 15])\n                cube([20, 2, 15], center=true);\n            translate([0, 0, 30])\n                cube([8, 2, 2], center=true);\n        }\n        \n        // Speed holes\n        for(h = [20, 25]) {\n            translate([0, -1.1, h])\n                rotate([90, 0, 0])\n                    cylinder(h=2.2, r=2);\n        }\n    }\n}\n\nmodule decorative_mesh() {\n    // Mesh pattern on wing surface\n    for(x = [-50:10:50]) {\n        for(y = [-15:5:15]) {\n            if((x/10 + y/5) % 2 == 0) {\n                translate([x, y, 25.9])\n                    cube([6, 2, 0.2], center=true);\n            }\n        }\n    }\n}\n\nmodule gurney_flap() {\n    // Small rear flap for adjustment\n    translate([0, 19, 8])\n        rotate([20, 0, 0])\n            cube([100, 2, 5], center=true);\n}\n\n// Assembly\nunion() {\n    // Base structure\n    spoiler_base();\n    \n    // Side supports\n    translate([-50, 0, 1])\n        side_support(8, 20, 38);\n    translate([50, 0, 1])\n        side_support(8, 20, 38);\n    \n    // Wing assembly\n    spoiler_wing();\n    \n    // Center fin\n    center_fin();\n    \n    // Details\n    decorative_mesh();\n    gurney_flap();\n}",
    "renders": true
  },
  {
    "decorative_art": "diesel",
    "openscad_code": "// Diesel-inspired decorative side table\n// Overall size: 120mm x 70mm x 110mm\n// Realistic style with diesel engine aesthetics\n\n// Main parameters\nwall_thickness = 2;\nmain_color = \"gray\";\n\n// Engine block base\nmodule engine_block() {\n    difference() {\n        // Main block\n        cube([90, 60, 80], center=true);\n        \n        // Cylinder cutouts\n        for(i=[-20, 0, 20]) {\n            translate([i, 0, 0])\n                cylinder(h=85, r=8, center=true);\n        }\n        \n        // Oil pan recess\n        translate([0, 0, -30])\n            cube([85, 55, 20], center=true);\n    }\n}\n\n// Cylinder heads on top\nmodule cylinder_heads() {\n    for(i=[-25, 0, 25]) {\n        translate([i, 0, 45])\n            cube([18, 50, 20], center=true);\n    }\n}\n\n// Exhaust pipe legs\nmodule exhaust_legs() {\n    // Front legs\n    translate([-35, -25, -45]) {\n        rotate([0, 90, 0])\n            cylinder(h=50, r=4);\n    }\n    translate([35, -25, -45]) {\n        rotate([0, 90, 0])\n            cylinder(h=50, r=4);\n    }\n    \n    // Rear legs with bend\n    translate([-35, 25, -45]) {\n        rotate([0, 90, 0])\n            cylinder(h=30, r=4);\n        translate([0, 0, 15])\n            rotate([0, 0, 90])\n            cylinder(h=35, r=4);\n    }\n    translate([35, 25, -45]) {\n        rotate([0, 90, 0])\n            cylinder(h=30, r=4);\n        translate([0, 0, 15])\n            rotate([0, 0, 90])\n            cylinder(h=35, r=4);\n    }\n}\n\n// Table top\nmodule table_top() {\n    difference() {\n        // Main surface\n        translate([0, 0, 60])\n            cube([120, 70, 4], center=true);\n        \n        // Cooling fins\n        for(i=[-45:15:45]) {\n            translate([i, 0, 62])\n                cube([10, 65, 2], center=true);\n        }\n    }\n}\n\n// Valve covers\nmodule valve_covers() {\n    for(i=[-25, 0, 25]) {\n        translate([i, 0, 55])\n            cube([15, 45, 8], center=true);\n    }\n}\n\n// Bolt heads for detail\nmodule bolts() {\n    // Corner bolts\n    for(x=[-40, 40])\n    for(y=[-20, 20]) {\n        translate([x, y, 62])\n            cylinder(h=3, r=3);\n    }\n    \n    // Engine block bolts\n    for(x=[-35:35:35])\n    for(y=[-22:44:44]) {\n        translate([x, y, 42])\n            cylinder(h=4, r=2);\n    }\n}\n\n// Air intake\nmodule air_intake() {\n    translate([0, -35, 30]) {\n        rotate([90, 0, 0])\n            cylinder(h=40, r=8);\n        translate([0, 0, 20])\n            cube([16, 16, 20], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    engine_block();\n    cylinder_heads();\n    exhaust_legs();\n    table_top();\n    valve_covers();\n    bolts();\n    air_intake();\n}",
    "renders": true
  },
  {
    "decorative_art": "voyage",
    "openscad_code": "// Voyage Suitcase Stool - Medium Complexity\n// A decorative furniture piece combining a vintage suitcase with stool functionality\n\n// Overall dimensions\ncase_length = 80;\ncase_width = 50;\ncase_height = 30;\nleg_height = 40;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Create the main suitcase body\nmodule suitcase_body() {\n    // Bottom shell\n    difference() {\n        // Outer shell\n        cube([case_length, case_width, case_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall/2])\n            cube([case_length-wall*2, case_width-wall*2, case_height-wall], center=true);\n    }\n}\n\n// Create the suitcase lid\nmodule suitcase_lid() {\n    difference() {\n        // Outer lid\n        translate([0, 0, case_height/2 + wall/2])\n            cube([case_length, case_width, wall*2], center=true);\n        \n        // Hollow interior\n        translate([0, 0, case_height/2 + wall])\n            cube([case_length-wall*2, case_width-wall*2, wall], center=true);\n    }\n}\n\n// Decorative corner protectors\nmodule corner_protectors() {\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (case_length/2 - wall), y * (case_width/2 - wall), 0])\n                cylinder(h=case_height+wall*2, r=wall*1.5, center=true);\n        }\n    }\n}\n\n// Leather straps\nmodule leather_straps() {\n    // Long straps\n    for(x = [-case_length/4, case_length/4]) {\n        translate([x, 0, case_height/2 - wall])\n            cube([wall*1.5, case_width-wall*4, wall], center=true);\n    }\n    \n    // Short straps\n    for(y = [-case_width/4, case_width/4]) {\n        translate([0, y, case_height/2 - wall])\n            cube([case_length-wall*4, wall*1.5, wall], center=true);\n    }\n}\n\n// Metal clasps\nmodule clasps() {\n    for(x = [-1, 1]) {\n        translate([x * (case_length/2 - wall*2), case_width/2 - wall, wall])\n            cube([wall*2, wall*2, wall*2]);\n        translate([x * (case_length/2 - wall*2), case_width/2 - wall, wall*3])\n            sphere(r=wall);\n    }\n}\n\n// Stool legs\nmodule legs() {\n    leg_positions = [\n        [-case_length/2 + wall*2, -case_width/2 + wall*2, 0],\n        [case_length/2 - wall*2, -case_width/2 + wall*2, 0],\n        [case_length/2 - wall*2, case_width/2 - wall*2, 0],\n        [-case_length/2 + wall*2, case_width/2 - wall*2, 0]\n    ];\n    \n    for(pos = leg_positions) {\n        translate([pos[0], pos[1], -leg_height/2 - case_height/2])\n            cylinder(h=leg_height, r=wall*2, center=true);\n    }\n}\n\n// Cross support between legs\nmodule cross_supports() {\n    // Front and back\n    translate([0, -case_width/2 + wall*2, -case_height/2 - leg_height/2 + wall*4])\n        cube([case_length - wall*4, wall*2, wall*2], center=true);\n    translate([0, case_width/2 - wall*2, -case_height/2 - leg_height/2 + wall*4])\n        cube([case_length - wall*4, wall*2, wall*2], center=true);\n    \n    // Left and right\n    translate([-case_length/2 + wall*2, 0, -case_height/2 - leg_height/2 + wall*4])\n        cube([wall*2, case_width - wall*4, wall*2], center=true);\n    translate([case_length/2 - wall*2, 0, -case_height/2 - leg_height/2 + wall*4])\n        cube([wall*2, case_width - wall*4, wall*2], center=true);\n}\n\n// Handle\nmodule handle() {\n    translate([case_length/2, 0, case_height/2 + wall*2])\n        rotate([0, 90, 0])\n            cylinder(h=case_width/4, r=wall, center=false);\n}\n\n// Assembly\nunion() {\n    // Main suitcase body\n    suitcase_body();\n    \n    // Lid (slightly offset for open position effect)\n    translate([0, 0, wall*2])\n        suitcase_lid();\n    \n    // Corner protectors\n    corner_protectors();\n    \n    // Leather straps\n    leather_straps();\n    \n    // Metal clasps\n    clasps();\n    \n    // Handle\n    handle();\n    \n    // Stool structure\n    legs();\n    cross_supports();\n}",
    "renders": true
  },
  {
    "decorative_art": "throttle",
    "openscad_code": "// Realistic Throttle Furniture Art Piece - Medium Complexity\n// Decorative wall-mounted throttle sculpture with structural furniture elements\n\n// Overall dimensions\noverall_width = 120;\noverall_height = 80;\noverall_depth = 40;\n\n$fn = 32;\n\nmodule throttle_body() {\n    // Main body frame with furniture-style construction\n    difference() {\n        // Solid body\n        translate([0, 0, overall_depth/2])\n            cube([overall_width, overall_height, overall_depth], center=true);\n        \n        // Hollow interior for 3D printing\n        translate([0, 0, overall_depth/2])\n            cube([overall_width-4, overall_height-4, overall_depth-2], center=true);\n    }\n}\n\nmodule throttle_handle() {\n    // Rotating handle mechanism with furniture joints\n    translate([0, overall_height/2 - 10, overall_depth - 15]) {\n        // Handle pivot joint\n        cylinder(h=20, r=8);\n        \n        // Handle grip\n        translate([0, 0, 10])\n            rotate([90, 0, 0])\n                cylinder(h=50, r=6);\n        \n        // Handle grip end cap\n        translate([0, 0, 60])\n            rotate([90, 0, 0])\n                sphere(r=8);\n        \n        // Decorative rings on handle\n        for(i=[0:2]) {\n            translate([0, 0, 15 + i*15])\n                rotate([90, 0, 0])\n                    cylinder(h=2, r=7);\n        }\n    }\n}\n\nmodule control_panel() {\n    // Front control panel with furniture-style details\n    translate([0, 0, overall_depth]) {\n        difference() {\n            // Panel base\n            cube([overall_width - 20, overall_height - 20, 4], center=true);\n            \n            // Panel recess\n            cube([overall_width - 24, overall_height - 24, 2], center=true);\n        }\n        \n        // Knobs and indicators in a row\n        for(i=[-2:2]) {\n            // Indicator lights\n            translate([i * 20, -20, 2.5])\n                cylinder(h=3, r=4);\n            \n            // Control knobs\n            translate([i * 20, 20, 2.5])\n                cylinder(h=8, r=5);\n            \n            // Knob caps\n            translate([i * 20, 20, 10.5])\n                sphere(r=5);\n        }\n    }\n}\n\nmodule mounting_system() {\n    // Wall mounting brackets\n    for(side=[-1, 1]) {\n        translate([side * (overall_width/2 - 10), 0, overall_depth/2]) {\n            // Main bracket\n            cube([20, 8, overall_depth], center=true);\n            \n            // Screw holes\n            translate([0, 0, overall_depth/2])\n                cylinder(h=overall_depth+2, r=2);\n            \n            // Decorative bracket caps\n            translate([0, 0, 0])\n                sphere(r=10);\n        }\n    }\n}\n\nmodule decorative_details() {\n    // Ornamental strips along sides\n    for(side=[-1, 1]) {\n        translate([side * (overall_width/2 - 2), 0, overall_depth/2]) {\n            cube([4, overall_height - 10, overall_depth - 10], center=true);\n        }\n    }\n    \n    // Top decorative element\n    translate([0, overall_height/2 + 5, overall_depth/2])\n        cube([overall_width - 30, 6, overall_depth - 10], center=true);\n    \n    // Bottom decorative element\n    translate([0, -overall_height/2 - 5, overall_depth/2])\n        cube([overall_width - 30, 6, overall_depth - 10], center=true);\n}\n\n// Main assembly\nunion() {\n    throttle_body();\n    throttle_handle();\n    control_panel();\n    mounting_system();\n    decorative_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "anchor",
    "openscad_code": "// Anchor Decorative Furniture Piece\n// Dimensions: ~120mm height, realistic proportions for shelf display\n\nmodule anchor_base() {\n    // Main anchor shaft (vertical bar)\n    translate([0, 0, 5]) {\n        cylinder(h=70, d=12, $fn=32);\n    }\n    \n    // Anchor crown (top crossbar)\n    translate([0, 0, 75]) {\n        rotate([90, 0, 0]) {\n            cylinder(h=35, d=10, $fn=32);\n        }\n    }\n    \n    // Crown balls (decorative spheres)\n    translate([17.5, 0, 75]) sphere(d=12, $fn=20);\n    translate([-17.5, 0, 75]) sphere(d=12, $fn=20);\n    \n    // Anchor arms (angled bars)\n    difference() {\n        union() {\n            // Left arm\n            translate([-10, 0, 35]) {\n                rotate([0, 0, -30]) {\n                    cylinder(h=40, d=8, $fn=32);\n                }\n            }\n            // Right arm\n            translate([10, 0, 35]) {\n                rotate([0, 0, 30]) {\n                    cylinder(h=40, d=8, $fn=32);\n                }\n            }\n        }\n        // Cut ends at 45 degrees\n        translate([-30, 0, 25]) {\n            rotate([0, 0, 15]) {\n                cube([40, 20, 20], center=true);\n            }\n        }\n        translate([30, 0, 25]) {\n            rotate([0, 0, -15]) {\n                cube([40, 20, 20], center=true);\n            }\n        }\n    }\n    \n    // Anchor flukes (curved hooks)\n    module fluke(side) {\n        translate([side * 20, 0, 10]) {\n            rotate([0, 0, side * 45]) {\n                difference() {\n                    union() {\n                        // Main fluke body\n                        translate([0, 0, 0]) {\n                            rotate([90, 0, 0]) {\n                                cylinder(h=25, d=6, $fn=32);\n                            }\n                        }\n                        // Fluke hook\n                        translate([0, 12.5, 0]) {\n                            rotate([90, 0, 0]) {\n                                rotate_extrude(angle=90) {\n                                    translate([6, 0, 0]) {\n                                        circle(r=3, $fn=20);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    // Cut bottom flat\n                    translate([0, -5, -5]) {\n                        cube([15, 10, 10], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    fluke(1);\n    fluke(-1);\n    \n    // Base plate (furniture mounting plate)\n    difference() {\n        translate([0, 0, -2]) {\n            cube([25, 25, 4], center=true);\n        }\n        // Mounting holes\n        for (x = [-8, 8]) {\n            for (y = [-8, 8]) {\n                translate([x, y, -1]) {\n                    cylinder(h=6, d=4, $fn=16);\n                }\n            }\n        }\n    }\n    \n    // Decorative rope detail\n    module rope_segment(height) {\n        translate([0, -8, height]) {\n            rotate([90, 0, 0]) {\n                difference() {\n                    cylinder(h=16, d=3, $fn=8);\n                    // Twist detail\n                    for (i = [0:3]) {\n                        rotate([0, 0, i * 90]) {\n                            translate([0, 1.5, 2]) {\n                                cube([2, 3, 12], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    rope_segment(55);\n    rope_segment(45);\n    rope_segment(25);\n}\n\n// Main assembly\nanchor_base();",
    "renders": true
  },
  {
    "decorative_art": "hull",
    "openscad_code": "// Hull Furniture - Decorative Boat-Shaped Shelf\n// Realistic style, medium complexity\n// Overall size: 150mm length x 60mm width x 80mm height\n\n$fn = 50;\n\n// Main hull body\nmodule hull_body() {\n    difference() {\n        // Main curved hull shape\n        hull() {\n            translate([-70, -25, 0]) cylinder(h=50, r1=15, r2=25);\n            translate([70, -25, 0]) cylinder(h=50, r1=15, r2=25);\n            translate([-70, 25, 0]) cylinder(h=50, r1=15, r2=25);\n            translate([70, 25, 0]) cylinder(h=50, r1=15, r2=25);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 2]) hull() {\n            translate([-65, -20, 0]) cylinder(h=46, r1=10, r2=20);\n            translate([65, -20, 0]) cylinder(h=46, r1=10, r2=20);\n            translate([-65, 20, 0]) cylinder(h=46, r1=10, r2=20);\n            translate([65, 20, 0]) cylinder(h=46, r1=10, r2=20);\n        }\n    }\n}\n\n// Deck with shelf supports\nmodule deck() {\n    // Main deck surface\n    translate([0, 0, 50]) cube([140, 50, 3], center=true);\n    \n    // Shelf supports\n    for(x = [-40, 0, 40]) {\n        translate([x, 0, 26.5]) cube([4, 46, 47], center=true);\n    }\n}\n\n// Bow detail with curved front\nmodule bow_detail() {\n    // Curved bow cap\n    translate([70, 0, 25]) rotate([0, 90, 0]) \n        cylinder(h=25, r1=25, r2=15);\n    \n    // Bow rail posts\n    for(y = [-20:10:20]) {\n        translate([70, y, 52]) cylinder(h=8, r=2);\n    }\n}\n\n// Stern detail with decorative back\nmodule stern_detail() {\n    // Stern panel\n    translate([-70, 0, 25]) cube([3, 50, 50], center=true);\n    \n    // Decorative porthole windows\n    for(z = [15:10:45]) {\n        translate([-71.5, 0, z]) \n            difference() {\n                cylinder(h=3, r=6);\n                cylinder(h=4, r=4);\n            }\n    }\n}\n\n// Side railings\nmodule railings() {\n    // Left railing\n    translate([0, 25.5, 56]) cube([136, 3, 6], center=true);\n    for(x = [-65:10:65]) {\n        translate([x, 25.5, 53]) cylinder(h=12, r=1.5);\n    }\n    \n    // Right railing\n    translate([0, -25.5, 56]) cube([136, 3, 6], center=true);\n    for(x = [-65:10:65]) {\n        translate([x, -25.5, 53]) cylinder(h=12, r=1.5);\n    }\n}\n\n// Central shelf\nmodule central_shelf() {\n    translate([0, 0, 28]) cube([132, 44, 2], center=true);\n}\n\n// Keel reinforcement\nmodule keel() {\n    translate([0, 0, -2]) cube([140, 4, 4], center=true);\n}\n\n// Assembly\nhull_body();\ndeck();\nbow_detail();\nstern_detail();\nrailings();\ncentral_shelf();\nkeel();",
    "renders": true
  },
  {
    "decorative_art": "jetstream",
    "openscad_code": "// Jetstream Bookshelf - Medium complexity realistic furniture piece\n// Size: 120mm wide x 80mm deep x 150mm tall\n\n$fn = 30;\n\n// Main parameters\nthickness = 2;          // Wall thickness for 3D printing\nshelf_w = 120;          // Overall width\nshelf_d = 80;           // Overall depth\nshelf_h = 150;          // Overall height\n\nmodule jetstream_shelf() {\n    // Base frame - creates the jetstream silhouette\n    difference() {\n        // Main body with curved top\n        hull() {\n            translate([-shelf_w/2, -shelf_d/2, 0])\n                cube([shelf_w, shelf_d, shelf_h*0.3]);\n            translate([-shelf_w/2, -shelf_d/2, shelf_h])\n                cube([shelf_w, shelf_d, thickness]);\n        }\n        \n        // Cut curved top\n        translate([0, -shelf_d/2 - 5, shelf_h*0.7])\n            rotate([0, 0, 15])\n            cylinder(h = shelf_d + 10, r = shelf_w/1.5, center = true);\n    }\n    \n    // Side supports - jet engine nacelles\n    module engine_nacelle(x_pos) {\n        difference() {\n            // Main nacelle body\n            union() {\n                // Cylindrical body\n                translate([x_pos, -shelf_d/2 + 15, 20])\n                    rotate([90, 0, 0])\n                    cylinder(h = shelf_d - 30, r = 15, center = true);\n                \n                // Intake\n                translate([x_pos, -shelf_d/2 + 5, 20])\n                    rotate([90, 0, 0])\n                    cylinder(h = 10, r1 = 18, r2 = 15);\n                \n                // Exhaust\n                translate([x_pos, shelf_d/2 - 5, 20])\n                    rotate([90, 0, 0])\n                    cylinder(h = 10, r1 = 15, r2 = 12);\n            }\n            \n            // Hollow out\n            translate([x_pos, -shelf_d/2 + 15, 20])\n                rotate([90, 0, 0])\n                cylinder(h = shelf_d - 30 + 2, r = 13, center = true);\n        }\n    }\n    \n    engine_nacelle(-shelf_w/3);\n    engine_nacelle(shelf_w/3);\n    \n    // Shelves - 3 levels\n    module shelf(level) {\n        h_pos = 20 + level * 40;\n        \n        // Shelf surface\n        difference() {\n            translate([-shelf_w/2 + 10, -shelf_d/2 + 5, h_pos])\n                cube([shelf_w - 20, shelf_d - 10, thickness]);\n            \n            // Weight reduction pattern - jetstream vents\n            for(i = [-1:1]) {\n                translate([i * 30, -shelf_d/2 + 15, h_pos - 1])\n                    cube([8, shelf_d - 30, thickness + 2]);\n            }\n        }\n        \n        // Front support beam\n        translate([-shelf_w/2 + 5, -shelf_d/2 + 2, h_pos])\n            cube([shelf_w - 10, 4, 8]);\n    }\n    \n    // Generate shelves\n    for(level = [0:2]) {\n        shelf(level);\n    }\n    \n    // Wing supports - decorative elements\n    module wing_support(y_pos, angle) {\n        difference() {\n            // Main wing\n            translate([0, y_pos, shelf_h*0.6])\n                rotate([0, angle, 0])\n                cube([shelf_w - 20, thickness, 30], center = true);\n            \n            // Cutout for style\n            translate([0, y_pos, shelf_h*0.6 + 10])\n                rotate([0, angle, 0])\n                cube([shelf_w - 40, thickness + 2, 8], center = true);\n        }\n    }\n    \n    wing_support(-shelf_d/2 + 20, 30);\n    wing_support(shelf_d/2 - 20, -30);\n    \n    // Tail fin\n    difference() {\n        translate([0, shelf_d/2 - 5, shelf_h*0.5])\n            rotate([0, 0, 0])\n            cube([thickness*3, shelf_d/2, shelf_h*0.4], center = true);\n        \n        // Rounded top\n        translate([0, shelf_d/2 - 5, shelf_h*0.9])\n            rotate([90, 0, 0])\n            cylinder(h = thickness*3, r = shelf_d/4, center = true);\n    }\n    \n    // Landing gear / feet\n    module foot(x_pos) {\n        translate([x_pos, -shelf_d/2 + 5, 0])\n            cylinder(h = 5, r = 8);\n    }\n    \n    foot(-shelf_w/2 + 15);\n    foot(shelf_w/2 - 15);\n}\n\n// Render the model\njetstream_shelf();",
    "renders": true
  },
  {
    "decorative_art": "prop",
    "openscad_code": "// Prop Victorian-style decorative side table\n// Overall height 90 mm, tabletop 60x60 mm, suitable for desk display\n\n$fn = 24;  // Smooth curves\n\n// Table module\nmodule side_table() {\n    // Tabletop - 60x60x4 mm with rounded edge\n    difference() {\n        translate([0, 0, 86]) cube([60, 60, 4], center = true);\n        translate([0, 0, 88]) cube([58, 58, 4.1], center = true);\n    }\n    \n    // Tabletop edge molding\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([30, 0, 86]) \n                cylinder(h = 4, r1 = 2, r2 = 1.5, center = true);\n    }\n    \n    // Four legs - 2x2 mm square profile\n    leg_positions = [[-25, -25], [25, -25], [25, 25], [-25, 25]];\n    for (pos = leg_positions) {\n        // Main leg\n        translate([pos[0], pos[1], 43]) cube([2, 2, 86], center = true);\n        \n        // Leg foot - decorative sphere\n        translate([pos[0], pos[1], 1]) sphere(r = 2);\n        \n        // Leg cap under tabletop\n        translate([pos[0], pos[1], 84]) cylinder(h = 2, r = 1.5, center = true);\n    }\n    \n    // Lower shelf - 50x50 mm\n    translate([0, 0, 40]) {\n        difference() {\n            cube([50, 50, 2], center = true);\n            // Cutouts for legs\n            for (pos = leg_positions) {\n                translate([pos[0]/1.25, pos[1]/1.25, 0]) \n                    cube([3, 3, 2.1], center = true);\n            }\n        }\n    }\n    \n    // Decorative apron panels between legs\n    apron_heights = [65, 35];\n    for (h = apron_hearts) {\n        // Front and back aprons\n        translate([0, -25, h]) cube([56, 2, 4], center = true);\n        translate([0, 25, h]) cube([56, 2, 4], center = true);\n        \n        // Left and right aprons\n        translate([-25, 0, h]) cube([2, 56, 4], center = true);\n        translate([25, 0, h]) cube([2, 56, 4], center = true);\n    }\n    \n    // Central decorative finial\n    translate([0, 0, 75]) {\n        cylinder(h = 6, r1 = 3, r2 = 2);\n        sphere(r = 2);\n    }\n    \n    // Drawer front detail\n    translate([0, 25, 70]) {\n        difference() {\n            cube([20, 1, 8], center = true);\n            // Drawer pull\n            translate([0, 0.6, 0]) cylinder(h = 1, r = 1);\n        }\n    }\n}\n\n// Render the table\nside_table();",
    "renders": true
  },
  {
    "decorative_art": "helix",
    "openscad_code": "// Helix Side Table - Decorative Furniture Piece\n// Modern spiral design with functional table surface\n\n$fn = 36;  // Smooth curves for realistic appearance\nwall_thickness = 2;  // 3D printable wall thickness\n\n// Overall dimensions\ntable_height = 120;\ntable_top_diameter = 80;\nhelix_radius = 35;\nhelix_turns = 3;\nhelix_tube_diameter = 8;\n\nmodule helix_support() {\n    // Main structural helix with proper wall thickness\n    for (i = [0:helix_turns*360]) {\n        rotate([0, 0, i])\n        translate([helix_radius, 0, i/3])\n        rotate([90, 0, 0])\n        cylinder(h=helix_tube_diameter, d=helix_tube_diameter, center=true);\n    }\n}\n\nmodule table_top() {\n    // Circular table surface with decorative edge\n    difference() {\n        // Main tabletop\n        cylinder(h=wall_thickness*2, d=table_top_diameter);\n        \n        // Central hole for visual lightness\n        cylinder(h=wall_thickness*2 + 1, d=20);\n        \n        // Decorative concentric grooves on top\n        for (r = [15:10:35]) {\n            translate([0, 0, wall_thickness*2 - 0.5])\n            cylinder(h=1, d=r, center=true);\n        }\n    }\n    \n    // Reinforcement ring underneath\n    translate([0, 0, -wall_thickness])\n    cylinder(h=wall_thickness, d=table_top_diameter - 10);\n    \n    // Connection points to helix\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle])\n        translate([25, 0, -wall_thickness])\n        cube([12, wall_thickness*2, wall_thickness], center=true);\n    }\n}\n\nmodule base() {\n    // Stable weighted base\n    difference() {\n        cylinder(h=wall_thickness*3, d=50);\n        \n        // Weight reduction cavity\n        cylinder(h=wall_thickness*3 + 1, d=40);\n        \n        // Cable management hole\n        rotate([90, 0, 0])\n        translate([0, 0, -wall_thickness*1.5])\n        cylinder(h=10, d=8);\n    }\n    \n    // Decorative base ring\n    translate([0, 0, -0.5])\n    cylinder(h=wall_thickness + 1, d=52);\n    \n    // Rubber feet positions\n    for (angle = [45:90:315]) {\n        rotate([0, 0, angle])\n        translate([20, 0, -wall_thickness*3 - 1])\n        cylinder(h=2, d=4);\n    }\n}\n\nmodule decorative_details() {\n    // Modern geometric pattern along helix\n    for (i = [0:30:helix_turns*360]) {\n        rotate([0, 0, i])\n        translate([helix_radius, 0, i/3])\n        rotate([0, 90, 0])\n        scale([0.8, 0.8, 0.3])\n        cube([helix_tube_diameter, helix_tube_diameter, helix_tube_diameter], center=true);\n    }\n    \n    // Subtle texture rings on tabletop\n    for (r = [20:5:38]) {\n        translate([0, 0, wall_thickness*2 + 0.1])\n        cylinder(h=0.2, d=r, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    helix_support();\n    \n    // Functional elements\n    translate([0, 0, table_height - wall_thickness*2])\n    table_top();\n    \n    translate([0, 0, wall_thickness*3])\n    base();\n    \n    // Decorative elements\n    decorative_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "sprint",
    "openscad_code": "// Sprint Chair - Decorative furniture art piece\n// Realistic style with medium complexity\n\n// Overall dimensions (mm)\nchair_width = 120;\nchair_depth = 120;\nchair_height = 150;\nseat_height = 75;\nbackrest_height = 75;\n\n// Material thickness\nthickness = 2;\n\n// Leg profile\nleg_width = 4;\nleg_depth = 4;\n\n// Seat module with rounded edges\nmodule seat() {\n    // Main seat panel\n    translate([0, 0, seat_height - thickness]) \n        cube([chair_width, chair_depth, thickness], center=true);\n    \n    // Rounded front edge\n    translate([0, chair_depth/2 - 2, seat_height - thickness/2]) \n        rotate([90, 0, 0]) \n            cylinder(h=chair_width, r=2, center=true);\n}\n\n// Backrest with decorative sprint pattern\nmodule backrest() {\n    // Main backrest panel\n    translate([0, 0, seat_height + backrest_height/2]) \n        cube([chair_width, thickness, backrest_height], center=true);\n    \n    // Decorative sprint pattern - vertical slats\n    for(i = [-2:1:2]) {\n        translate([i * 20, 0, seat_height + backrest_height/2]) \n            cube([thickness, thickness + 2, backrest_height - 4], center=true);\n    }\n    \n    // Top rail curve\n    translate([0, 0, seat_height + backrest_height - 1]) \n        cube([chair_width + 4, thickness + 2, thickness], center=true);\n    \n    translate([0, 0, seat_height + backrest_height + 1]) \n        rotate([90, 0, 0]) \n            cylinder(h=chair_width + 4, r=2, center=true);\n}\n\n// Leg assembly with stretchers\nmodule leg_assembly() {\n    // Front legs\n    translate([chair_width/2 - leg_width, chair_depth/2 - leg_depth, seat_height/2]) \n        cube([leg_width, leg_depth, seat_height], center=true);\n        \n    translate([-chair_width/2 + leg_width, chair_depth/2 - leg_depth, seat_height/2]) \n        cube([leg_width, leg_depth, seat_height], center=true);\n    \n    // Back legs\n    translate([chair_width/2 - leg_width, -chair_depth/2 + leg_depth, chair_height/2]) \n        cube([leg_width, leg_depth, chair_height], center=true);\n        \n    translate([-chair_width/2 + leg_width, -chair_depth/2 + leg_depth, chair_height/2]) \n        cube([leg_width, leg_depth, chair_height], center=true);\n    \n    // Side stretchers\n    translate([0, chair_depth/2 - leg_depth, seat_height/3]) \n        cube([chair_width - 2*leg_width, thickness, leg_width], center=true);\n    \n    translate([0, -chair_depth/2 + leg_depth, seat_height/3]) \n        cube([chair_width - 2*leg_width, thickness, leg_width], center=true);\n    \n    // Back stretcher\n    translate([0, 0, seat_height/3]) \n        cube([thickness, chair_depth - 2*leg_depth, leg_width], center=true);\n}\n\n// Decorative support brackets\nmodule brackets() {\n    // Front brackets\n    for(x = [chair_width/2 - leg_width - 5, -chair_width/2 + leg_width + 5]) {\n        translate([x, chair_depth/2 - 5, seat_height - 10]) \n            cube([10, 5, 10], center=true);\n    }\n    \n    // Back brackets\n    for(x = [chair_width/2 - leg_width - 5, -chair_width/2 + leg_width + 5]) {\n        translate([x, -chair_depth/2 + 5, seat_height - 10]) \n            cube([10, 5, 10], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    seat();\n    backrest();\n    leg_assembly();\n    brackets();\n}",
    "renders": true
  },
  {
    "decorative_art": "stratos",
    "openscad_code": "// Stratos Lounge Chair - Realistic Style, Medium Complexity\n// Dimensions: 120mm (W) x 110mm (D) x 90mm (H)\n\n$fn = 50;\n\n// Main seat shell\nmodule seat_shell() {\n    // Base seat\n    difference() {\n        translate([0, 0, 40])\n            scale([1, 1.2, 0.4])\n                sphere(d = 80);\n        \n        // Hollow center\n        translate([0, -5, 30])\n            scale([0.8, 1, 0.3])\n                sphere(d = 60);\n    }\n    \n    // Backrest\n    translate([0, 20, 70])\n        rotate([15, 0, 0])\n            scale([1, 0.8, 1.2])\n                sphere(d = 75);\n}\n\n// Support frame\nmodule frame() {\n    // Front legs\n    for(x = [-35, 35]) {\n        translate([x, -40, 20])\n            cylinder(h = 40, d = 8);\n    }\n    \n    // Rear legs\n    for(x = [-30, 30]) {\n        translate([x, 45, 25])\n            cylinder(h = 45, d = 8);\n    }\n    \n    // Cross supports\n    translate([0, 0, 15])\n        cube([80, 90, 3], center = true);\n    translate([0, 0, 5])\n        cube([75, 85, 3], center = true);\n}\n\n// Armrests\nmodule armrests() {\n    for(side = [-1, 1]) {\n        // Armrest structure\n        translate([side * 45, 0, 55])\n            rotate([0, 15 * side, 0])\n                cube([6, 60, 25]);\n        \n        // Support struts\n        translate([side * 45, -30, 35])\n            cylinder(h = 20, d = 5);\n        translate([side * 45, 30, 35])\n            cylinder(h = 20, d = 5);\n    }\n}\n\n// Cushion details\nmodule cushions() {\n    // Seat cushion\n    translate([0, 0, 50])\n        scale([1, 1.1, 0.3])\n            sphere(d = 70);\n    \n    // Back cushion\n    translate([0, 25, 65])\n        rotate([10, 0, 0])\n            scale([1, 0.7, 0.4])\n                sphere(d = 65);\n}\n\n// Decorative pattern on shell\nmodule shell_pattern() {\n    for(i = [0:30:360]) {\n        rotate([0, 0, i])\n            translate([0, 35, 45])\n                rotate([90, 0, 0])\n                    cylinder(h = 2, d1 = 3, d2 = 1);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    seat_shell();\n    frame();\n    armrests();\n    cushions();\n    \n    // Add decorative elements\n    shell_pattern();\n    \n    // Floor protection pads\n    for(x = [-35, 35]) {\n        translate([x, -40, 0])\n            cylinder(h = 2, d = 10);\n    }\n    for(x = [-30, 30]) {\n        translate([x, 45, 0])\n            cylinder(h = 2, d = 10);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "cargo",
    "openscad_code": "// Cargo Storage Ottoman - Realistic Style, Medium Complexity\n// Dimensions: 120mm x 80mm x 90mm (printable)\n\n// Wall thickness constant\nwall = 2;\n\n// Main body module\nmodule ottoman_body() {\n    // Outer shell with rounded edges\n    difference() {\n        // Main box shape\n        minkowski() {\n            cube([116, 76, 86]);\n            sphere(r=3);\n        }\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n        minkowski() {\n            cube([116-2*wall, 76-2*wall, 86-2*wall]);\n            sphere(r=2);\n        }\n    }\n}\n\n// Lid module with hinges\nmodule ottoman_lid() {\n    // Main lid\n    translate([0, 0, 86])\n    difference() {\n        // Lid base\n        minkowski() {\n            cube([116, 76, 6]);\n            sphere(r=3);\n        }\n        \n        // Interior recess\n        translate([wall, wall, -2])\n        minkowski() {\n            cube([116-2*wall, 76-2*wall, 4]);\n            sphere(r=2);\n        }\n    }\n    \n    // Hinge details\n    for(i = [0, 1]) {\n        translate([10 + i*96, -1, 86])\n        rotate([90, 0, 0])\n        cylinder(h=10, r=3, $fn=20);\n    }\n}\n\n// Cargo straps\nmodule cargo_straps() {\n    // Horizontal straps\n    for(y = [20, 56]) {\n        translate([5, y, 43])\n        cube([106, 4, 2]);\n    }\n    \n    // Vertical straps\n    for(x = [20, 58, 96]) {\n        translate([x, 5, 43])\n        cube([2, 66, 2]);\n    }\n}\n\n// Metal corner protectors\nmodule corner_protectors() {\n    for(x = [0, 116]) {\n        for(y = [0, 76]) {\n            translate([x, y, 0])\n            cube([4, 4, 86]);\n            translate([x - 4*abs(x-58)/58, y - 4*abs(y-38)/38, 86 - 4])\n            cube([4, 4, 4]);\n        }\n    }\n}\n\n// Latch detail\nmodule latch() {\n    translate([58, -2, 86])\n    difference() {\n        cube([8, 4, 4]);\n        translate([2, -1, 2])\n        cylinder(h=4, r=1, $fn=20);\n    }\n}\n\n// Fabric texture simulation\nmodule fabric_texture() {\n    for(i = [0:4]) {\n        for(j = [0:3]) {\n            translate([10 + i*24, 10 + j*18, 0.1])\n            cube([20, 14, 0.2]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main ottoman parts\n    ottoman_body();\n    ottoman_lid();\n    \n    // Decorative elements\n    color(\"brown\") cargo_straps();\n    color(\"silver\") corner_protectors();\n    color(\"silver\") latch();\n    \n    // Texture on top surfaces\n    color(\"tan\") {\n        translate([0, 0, 0.1]) fabric_texture();\n        translate([0, 0, 86.1]) fabric_texture();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "wake",
    "openscad_code": "// Wake furniture piece - decorative memorial bench\n// Overall dimensions: 120mm x 50mm x 70mm\n\n$fn = 32; // Smooth curves for 3D printing\n\nmodule bench_leg(x_pos, z_pos) {\n    // Main leg structure - 2mm wall thickness\n    translate([x_pos, 0, z_pos]) {\n        difference() {\n            // Outer profile\n            cube([8, 6, 35]);\n            // Inner hollow\n            translate([2, 2, 2]) cube([4, 2, 31]);\n        }\n    }\n}\n\nmodule decorative_panel() {\n    // Decorative memorial panel with embossed cross\n    translate([60, 25, 35]) {\n        difference() {\n            // Panel base\n            cube([100, 2, 25]);\n            \n            // Cross relief\n            translate([50, 0, 12]) {\n                // Vertical bar\n                cube([4, 2, 18]);\n                // Horizontal bar\n                translate([-5, 0, 5]) cube([14, 2, 4]);\n            }\n            \n            // Decorative border pattern\n            for(i = [5:10:95]) {\n                translate([i, -0.5, 5]) cube([2, 3, 2]);\n                translate([i, -0.5, 18]) cube([2, 3, 2]);\n            }\n        }\n    }\n}\n\nmodule seat_support() {\n    // Structural support under seat\n    translate([60, 5, 20]) {\n        difference() {\n            // Main support beam\n            cube([110, 4, 4]);\n            // Lightening holes\n            for(i = [10:20:100]) {\n                translate([i, 1, 1]) cylinder(h = 3, r = 1);\n            }\n        }\n    }\n}\n\nmodule backrest() {\n    // Curved backrest with memorial inscription area\n    translate([60, 45, 52.5]) {\n        difference() {\n            // Main backrest\n            scale([1, 1, 0.8]) sphere(r = 35);\n            \n            // Cut to proper shape\n            translate([-60, -45, -35]) cube([120, 90, 35]);\n            \n            // Hollow back for material saving\n            translate([0, -2, -15]) scale([0.9, 0.8, 0.8]) sphere(r = 32);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Seat\n    translate([60, 25, 35]) {\n        difference() {\n            // Seat base\n            cube([120, 4, 6]);\n            \n            // Drainage grooves\n            for(i = [10:20:110]) {\n                translate([i, 0, 2]) cube([1, 4, 2]);\n            }\n        }\n    }\n    \n    // Legs\n    bench_leg(10, 0);\n    bench_leg(110, 0);\n    \n    // Backrest\n    backrest();\n    \n    // Decorative memorial panel\n    decorative_panel();\n    \n    // Seat support structure\n    seat_support();\n    \n    // Armrests\n    translate([10, 30, 45]) {\n        difference() {\n            cube([6, 20, 4]);\n            // Rounded top edge\n            translate([3, 20, 4]) rotate([90, 0, 0]) cylinder(h = 6, r = 2);\n        }\n    }\n    \n    translate([110, 30, 45]) {\n        mirror([1, 0, 0]) {\n            difference() {\n                cube([6, 20, 4]);\n                translate([3, 20, 4]) rotate([90, 0, 0]) cylinder(h = 6, r = 2);\n            }\n        }\n    }\n    \n    // Base stabilizers\n    translate([60, 2, 0]) {\n        cube([116, 4, 2]);\n    }\n    \n    translate([60, 48, 0]) {\n        cube([116, 4, 2]);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "nitro",
    "openscad_code": "// Nitro Furniture - Art Deco Side Table with Nitro Racing Theme\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions\ntable_height = 100;\ntable_width = 80;\ntable_depth = 80;\nwall_thickness = 2;\n\n// Nitro bottle parameters\nnitro_height = 60;\nnitro_radius = 15;\nnitro_wall = 2;\n\n// Base frame\nmodule base_frame() {\n    union() {\n        // Front frame\n        translate([0, -table_depth/2, 0])\n            cube([table_width, wall_thickness, table_height], center=true);\n        \n        // Back frame\n        translate([0, table_depth/2, 0])\n            cube([table_width, wall_thickness, table_height], center=true);\n        \n        // Left frame\n        translate([-table_width/2, 0, 0])\n            cube([wall_thickness, table_depth, table_height], center=true);\n        \n        // Right frame\n        translate([table_width/2, 0, 0])\n            cube([wall_thickness, table_depth, table_height], center=true);\n        \n        // Bottom support\n        translate([0, 0, -table_height/2 + wall_thickness])\n            cube([table_width, table_depth, wall_thickness], center=true);\n    }\n}\n\n// Decorative nitro bottle holder\nmodule nitro_bottle() {\n    // Bottle body\n    difference() {\n        cylinder(h=nitro_height, r=nitro_radius, center=true, $fn=32);\n        translate([0, 0, nitro_wall])\n            cylinder(h=nitro_height, r=nitro_radius-nitro_wall, center=true, $fn=32);\n    }\n    \n    // Bottle cap\n    translate([0, 0, nitro_height/2 + 2])\n        cylinder(h=8, r=nitro_radius*0.8, $fn=16);\n    \n    // Cap details\n    translate([0, 0, nitro_height/2 + 6])\n        cylinder(h=3, r=nitro_radius*0.9, $fn=16);\n}\n\n// Table top with racing stripe pattern\nmodule table_top() {\n    difference() {\n        // Main top\n        cube([table_width+4, table_depth+4, wall_thickness], center=true);\n        \n        // Racing stripe grooves\n        for(i=[-3:1:3]) {\n            translate([i*8, 0, -wall_thickness/2])\n                cube([2, table_depth, wall_thickness+1], center=true);\n        }\n    }\n    \n    // Raised edge\n    translate([0, 0, wall_thickness/2 + 1])\n        cube([table_width+8, table_depth+8, 2], center=true);\n}\n\n// Support brackets\nmodule support_brackets() {\n    for(x=[-table_width/3, table_width/3])\n        for(y=[-table_depth/3, table_depth/3]) {\n            translate([x, y, table_height/4])\n                rotate([0, 45, 0])\n                cube([wall_thickness*3, wall_thickness*3, table_height/2], center=true);\n        }\n}\n\n// Decorative racing details\nmodule racing_details() {\n    // Number plates\n    translate([0, -table_depth/4, table_height/2])\n        cube([20, 12, 2], center=true);\n    \n    // Checkered pattern on number plate\n    for(i=[-1, 1])\n        for(j=[-1, 1])\n            translate([i*5, j*3, table_height/2 + 1.1])\n                cube([2, 2, 1], center=true);\n    \n    // Exhaust pipe details\n    translate([table_width/2 + 3, 0, table_height/4])\n        rotate([0, 90, 0])\n        cylinder(h=15, r=3, $fn=12);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    base_frame();\n    \n    // Table top positioned above frame\n    translate([0, 0, table_height/2 + wall_thickness])\n        table_top();\n    \n    // Support brackets\n    support_brackets();\n    \n    // Nitro bottle holder in center\n    translate([0, 0, table_height/4])\n        nitro_bottle();\n    \n    // Racing details\n    racing_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "prowler",
    "openscad_code": "// Prowler Furniture Decorative Art Piece\n// Realistic style, medium complexity\n\n// Constants\n$fn = 32;\nwall_thickness = 2;\nscale_factor = 0.8;\n\n// Main module\nmodule prowler_furniture() {\n    // Base frame structure\n    translate([0, 0, 5]) frame();\n    \n    // Top decorative prowler head\n    translate([0, 0, 85]) prowler_head();\n    \n    // Side support panels\n    for(side = [-1, 1]) {\n        translate([side * 20, 0, 45]) support_panel(side);\n    }\n    \n    // Front decorative grille\n    translate([0, 28, 45]) grille();\n    \n    // Back support bar\n    translate([0, -28, 65]) back_bar();\n}\n\n// Frame structure\nmodule frame() {\n    difference() {\n        // Main rectangular frame\n        cube([60, 60, 80], center = true);\n        \n        // Hollow out center\n        translate([0, 0, 5]) cube([56, 56, 75], center = true);\n    }\n    \n    // Bottom reinforcing bars\n    for(x = [-20, 0, 20]) {\n        translate([x, 0, 2]) cube([5, 56, 4], center = true);\n    }\n}\n\n// Prowler head decoration\nmodule prowler_head() {\n    union() {\n        // Main head shape\n        translate([0, 0, 10]) scale([1.2, 1, 1]) sphere(15);\n        \n        // Snout\n        translate([0, 18, 5]) scale([0.8, 1.5, 0.8]) sphere(8);\n        \n        // Ears\n        for(angle = [-35, 35]) {\n            rotate([0, 0, angle]) translate([12, 5, 20]) rotate([15, 0, 0]) \n                scale([0.5, 1, 2]) cylinder(h = 8, r1 = 4, r2 = 2);\n        }\n        \n        // Eyes\n        for(x = [-5, 5]) {\n            translate([x, 8, 18]) sphere(3);\n            translate([x, 9, 18]) sphere(1.5);\n        }\n        \n        // Teeth pattern base\n        translate([0, 20, 2]) {\n            for(i = [-6:3:6]) {\n                translate([i, 0, 0]) cube([2, 2, 4]);\n            }\n        }\n    }\n}\n\n// Side support panel\nmodule support_panel(side) {\n    difference() {\n        // Panel\n        cube([wall_thickness, 25, 40], center = true);\n        \n        // Cutout pattern\n        for(y = [-10:5:10]) {\n            translate([0, y, 0]) cylinder(h = wall_thickness + 1, r = 3, center = true);\n        }\n    }\n    \n    // Decorative ridge\n    translate([side * wall_thickness/2, 0, 0]) {\n        cube([wall_thickness/2, 25, 40], center = true);\n    }\n}\n\n// Front grille\nmodule grille() {\n    // Frame\n    difference() {\n        cube([50, wall_thickness, 30], center = true);\n        translate([0, 0, 0]) cube([46, wall_thickness + 1, 26], center = true);\n    }\n    \n    // Horizontal bars\n    for(z = [-10:5:10]) {\n        translate([0, 0, z]) cube([50, wall_thickness, 2], center = true);\n    }\n    \n    // Vertical bars\n    for(x = [-20:5:20]) {\n        translate([x, 0, 0]) cube([2, wall_thickness, 30], center = true);\n    }\n}\n\n// Back support bar\nmodule back_bar() {\n    rotate([90, 0, 0]) cylinder(h = 50, r = 3, center = true);\n    \n    // End caps\n    for(x = [-25, 25]) {\n        translate([x, 0, 0]) sphere(3);\n    }\n}\n\n// Scale and render\nscale([scale_factor, scale_factor, scale_factor]) prowler_furniture();",
    "renders": true
  },
  {
    "decorative_art": "keel",
    "openscad_code": "// Keel Furniture - Realistic Style, Medium Complexity\n// Decorative keel-shaped wall shelf unit with structural frame\n\n// Overall dimensions\nlength = 120;    // mm\nwidth = 40;      // mm\nheight = 80;     // mm\nwall_thickness = 2;  // mm for 3D printing\n\nmodule keel_shelf() {\n    // Main keel body - hollow for lightweight printing\n    difference() {\n        // Outer shape - boat keel profile\n        hull() {\n            // Bottom point\n            translate([length/2, width/2, 0])\n                cube([1, 1, 5], center=true);\n            \n            // Mid section\n            translate([length/2 - 20, width/2, height/2])\n                cube([40, width - 4, height], center=true);\n            \n            // Top section\n            translate([10, width/2, height - 5])\n                cube([20, width - 8, 10], center=true);\n        }\n        \n        // Hollow interior\n        scale([0.9, 0.85, 0.9])\n            hull() {\n                translate([length/2, width/2, 0])\n                    cube([1, 1, 5], center=true);\n                translate([length/2 - 20, width/2, height/2])\n                    cube([40, width - 4, height], center=true);\n                translate([10, width/2, height - 5])\n                    cube([20, width - 8, 10], center=true);\n            }\n    }\n}\n\nmodule structural_frame() {\n    // Internal support ribs\n    for(pos = [20, 50, 80, 100]) {\n        translate([pos, 0, 0]) {\n            // Vertical rib\n            difference() {\n                cube([wall_thickness, width, height * 0.8]);\n                translate([wall_thickness/2, width/2, 0])\n                    cylinder(h=height * 0.8, r1=wall_thickness/2, r2=1, center=true);\n            }\n        }\n    }\n    \n    // Wall mounting plate\n    translate([-5, width/2 - 15, height - 15]) {\n        difference() {\n            cube([10, 30, 30]);\n            for(x = [-10, 10]) {\n                for(y = [-10, 10]) {\n                    translate([5, 15 + x, 15 + y])\n                        cylinder(h=11, r=2, $fn=16);\n                }\n            }\n        }\n    }\n}\n\nmodule decorative_elements() {\n    // Nautical rope pattern along top edge\n    for(i = [0:3:length - 10]) {\n        translate([i + 5, width/2, height - 2])\n            rotate([90, 0, 0])\n                cylinder(h=3, r=1.5, $fn=8);\n    }\n    \n    // Ornate brackets\n    module bracket() {\n        difference() {\n            // Main bracket shape\n            translate([0, 0, 0])\n                cube([8, wall_thickness + 2, 15]);\n            \n            // Decorative cutouts\n            translate([2, wall_thickness + 3, 5])\n                sphere(r=2, $fn=16);\n            translate([6, wall_thickness + 3, 10])\n                sphere(r=2, $fn=16);\n        }\n    }\n    \n    // Place brackets along sides\n    for(side = [0, 1]) {\n        mirror([0, side, 0]) {\n            translate([10, 0, height/2])\n                bracket();\n            translate([length - 20, 0, height/2])\n                bracket();\n        }\n    }\n    \n    // Keel stripe detail\n    translate([length/2, width/2, height/3])\n        cube([length - 10, wall_thickness, wall_thickness * 3]);\n}\n\n// Assembly\nunion() {\n    keel_shelf();\n    structural_frame();\n    decorative_elements();\n}",
    "renders": true
  },
  {
    "decorative_art": "aileron",
    "openscad_code": "// Aileron Decorative Shelf - Realistic Style, Medium Complexity\n// Overall size: 120mm x 40mm x 150mm\n\n// Main wing structure\nmodule wing_body() {\n    difference() {\n        // Main wing shape\n        translate([0, 0, 75]) \n            cube([120, 40, 6], center=true);\n        \n        // Taper trailing edge\n        translate([55, 0, 72]) \n            rotate([0, 45, 0])\n            cube([30, 45, 10]);\n        \n        // Leading edge taper\n        translate([-55, 0, 72]) \n            rotate([0, -45, 0])\n            cube([30, 45, 10]);\n    }\n}\n\n// Control surface hinge detail\nmodule hinge_detail(x_pos) {\n    translate([x_pos, -20, 75]) {\n        // Hinge pin\n        cylinder(h=8, d=3, $fn=8);\n        // Hinge bracket\n        translate([0, 5, 0])\n            cube([6, 10, 2], center=true);\n    }\n    translate([x_pos, 20, 75]) {\n        cylinder(h=8, d=3, $fn=8);\n        translate([0, -5, 0])\n            cube([6, 10, 2], center=true);\n    }\n}\n\n// Decorative ribs\nmodule wing_ribs() {\n    for (i = [-40:20:40]) {\n        translate([i, 0, 78]) \n            cube([2, 36, 2], center=true);\n    }\n}\n\n// Mounting bracket for wall attachment\nmodule mounting_bracket() {\n    translate([-60, 0, 85]) {\n        union() {\n            // Main bracket\n            cube([30, 20, 4]);\n            // Screw holes\n            for (y = [-5, 5]) {\n                translate([20, y, 2]) \n                    cylinder(h=5, d=3.5, $fn=16);\n            }\n            // Support gusset\n            translate([15, 0, 2])\n                rotate([90, 0, 0])\n                cylinder(h=20, d1=8, d2=4, $fn=4);\n        }\n    }\n}\n\n// Control surface (aileron)\nmodule aileron() {\n    translate([0, 0, 68]) {\n        difference() {\n            // Main aileron\n            cube([100, 38, 4], center=true);\n            // Taper ends\n            translate([-48, 0, 2])\n                rotate([0, 45, 0])\n                cube([10, 40, 6]);\n            translate([48, 0, 2])\n                rotate([0, -45, 0])\n                cube([10, 40, 6]);\n        }\n    }\n}\n\n// Surface panel lines\nmodule panel_lines() {\n    // Longitudinal lines\n    for (y = [-12, 0, 12]) {\n        translate([0, y, 78.5])\n            cube([110, 1, 0.5], center=true);\n    }\n    // Transverse lines\n    for (x = [-40:20:40]) {\n        translate([x, 0, 78.5])\n            cube([1, 36, 0.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main wing\n    wing_body();\n    \n    // Hinges\n    hinge_detail(-30);\n    hinge_detail(0);\n    hinge_detail(30);\n    \n    // Structural details\n    wing_ribs();\n    \n    // Wall mounting\n    mounting_bracket();\n    \n    // Control surface\n    aileron();\n    \n    // Surface details\n    panel_lines();\n}",
    "renders": true
  },
  {
    "decorative_art": "tarmac",
    "openscad_code": "// Tarmac-inspired side table\n// Overall dimensions: 120mm diameter, 420mm height\n\n$fn = 48;  // Smooth curves for 3D printing\n\n// Base plate resembling tarmac surface\nmodule tarmac_base() {\n    difference() {\n        // Main base disk\n        cylinder(h = 8, d = 120);\n        \n        // Tarmac texture - random holes\n        for (i = [0:15]) {\n            translate([\n                sin(i * 137.5) * 45,\n                cos(i * 137.5) * 45,\n                4\n            ])\n            cylinder(h = 10, d = 4 + sin(i * 5) * 2, $fn = 6);\n        }\n        \n        // Drainage channel\n        rotate([0, 90, 0])\n        translate([0, 0, -5])\n        cylinder(h = 130, d = 6);\n    }\n}\n\n// Support column with tarmac aggregate texture\nmodule support_column() {\n    difference() {\n        // Main column\n        cylinder(h = 350, d = 50);\n        \n        // Decorative grooves\n        for (i = [0:6]) {\n            rotate([0, 0, i * 60])\n            translate([0, 25, 0])\n            cube([2, 50, 350], center = true);\n        }\n        \n        // Hidden cable channel (for realism)\n        rotate([0, 90, 0])\n        translate([0, 0, -30])\n        cylinder(h = 60, d = 10);\n    }\n}\n\n// Top surface with tarmac texture\nmodule table_top() {\n    difference() {\n        // Main top surface\n        cylinder(h = 6, d = 100);\n        \n        // Road line markings\n        color(\"white\")\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n            translate([0, 35, 3])\n            cube([30, 2, 3]);\n        }\n        \n        // Manhole cover detail\n        translate([0, 0, 3])\n        difference() {\n            cylinder(h = 3, d = 20);\n            cylinder(h = 4, d = 16);\n        }\n        \n        // Small drainage holes\n        for (i = [0:7]) {\n            a = i * 51.4;\n            translate([\n                sin(a) * 40,\n                cos(a) * 40,\n                3\n            ])\n            cylinder(h = 4, d = 3);\n        }\n    }\n}\n\n// Reinforcement ring (structural element)\nmodule reinforcement_ring(h, d) {\n    difference() {\n        cylinder(h = h, d = d + 4);\n        cylinder(h = h + 1, d = d);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    color([0.2, 0.2, 0.2])\n    tarmac_base();\n    \n    // Support column\n    translate([0, 0, 8])\n    color([0.25, 0.25, 0.25])\n    support_column();\n    \n    // Reinforcement rings\n    translate([0, 0, 8])\n    reinforcement_ring(4, 50);\n    \n    translate([0, 0, 354])\n    reinforcement_ring(4, 50);\n    \n    // Top surface\n    translate([0, 0, 358])\n    color([0.18, 0.18, 0.18])\n    table_top();\n    \n    // Rubber feet for stability\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([40, 0, -2])\n        cylinder(h = 2, d = 8);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "turbo",
    "openscad_code": "// Turbo-inspired decorative stool\n// Realistic style, medium complexity\n\n// Parameters\n$fn = 50;\nseat_dia = 80;\nseat_thick = 12;\nleg_h = 100;\nleg_rad = 4;\nspoke_rad = 3;\nspoke_count = 8;\nhub_rad = 12;\nhub_h = 8;\nbase_thick = 6;\n\nmodule turbo_stool() {\n    // Central hub\n    union() {\n        // Hub cylinder\n        cylinder(h=hub_h, r=hub_rad);\n        \n        // Hub spokes\n        for(i = [0:spoke_count-1]) {\n            rotate([0, 0, i * 360/spoke_count])\n            translate([hub_rad, -spoke_rad/2, 0])\n            cube([seat_dia/2 - hub_rad, spoke_rad, hub_h]);\n        }\n    }\n    \n    // Seat surface\n    translate([0, 0, hub_h])\n    difference() {\n        cylinder(h=seat_thick, r=seat_dia/2);\n        \n        // Turbo blade cutouts\n        for(i = [0:spoke_count-1]) {\n            rotate([0, 0, i * 360/spoke_count + 22.5])\n            translate([seat_dia/4, -2, -1])\n            cube([seat_dia/2, 4, seat_thick+2]);\n        }\n    }\n    \n    // Structural legs\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n        translate([seat_dia/2 * 0.6, -leg_rad, 0])\n        cylinder(h=leg_h, r=leg_rad);\n    }\n    \n    // Base ring\n    translate([0, 0, leg_h])\n    difference() {\n        cylinder(h=base_thick, r=seat_dia/2 + 8);\n        cylinder(h=base_thick+2, r=seat_dia/2 - 2);\n    }\n    \n    // Turbo blade supports\n    for(i = [0:spoke_count-1]) {\n        rotate([0, 0, i * 360/spoke_count])\n        translate([seat_dia/4, -1, hub_h])\n        cube([seat_dia/2 - seat_dia/4, 2, seat_thick]);\n    }\n}\n\n// Assembly\nturbo_stool();",
    "renders": true
  },
  {
    "decorative_art": "flare",
    "openscad_code": "// Flare Furniture - Decorative Art Piece\n// Realistic style, medium complexity\n\nmodule leg_support(height)\n{\n    difference()\n    {\n        cylinder(h=height, r=5, $fn=20);\n        translate([0, 0, height-2])\n            cylinder(h=2, r=3.5, $fn=20);\n    }\n}\n\nmodule decorative_pattern()\n{\n    for(i=[0:30:360])\n    {\n        rotate([0, 0, i])\n        translate([8, 0, 0])\n            cylinder(h=3, r=1, $fn=8);\n    }\n}\n\nmodule flare_base()\n{\n    difference()\n    {\n        cylinder(h=15, r=40, $fn=100);\n        translate([0, 0, 13])\n            cylinder(h=2, r=38, $fn=100);\n    }\n    \n    for(i=[0:45:360])\n    {\n        rotate([0, 0, i])\n        translate([30, 0, 15])\n            rotate([90, 0, 0])\n                cylinder(h=20, r=2, $fn=8);\n    }\n}\n\nmodule flare_center()\n{\n    translate([0, 0, 15])\n    {\n        cylinder(h=25, r=25, $fn=60);\n        \n        translate([0, 0, 25])\n            cylinder(h=5, r=28, $fn=60);\n        \n        difference()\n        {\n            translate([0, 0, 30])\n                cylinder(h=15, r=35, $fn=80);\n            translate([0, 0, 30])\n                cylinder(h=15, r=33, $fn=80);\n        }\n        \n        decorative_pattern();\n    }\n}\n\nmodule flare_top()\n{\n    translate([0, 0, 45])\n    {\n        difference()\n        {\n            cylinder(h=10, r=45, $fn=100);\n            translate([0, 0, 8])\n                cylinder(h=2, r=43, $fn=100);\n        }\n        \n        translate([0, 0, 10])\n            cylinder(h=8, r=35, $fn=80);\n        \n        translate([0, 0, 18])\n            sphere(r=30, $fn=60);\n        \n        difference()\n        {\n            translate([0, 0, 18])\n                sphere(r=28, $fn=60);\n            scale([1.2, 1.2, 0.5])\n                translate([0, 0, 40])\n                    sphere(r=20, $fn=60);\n        }\n    }\n}\n\nmodule support_structure()\n{\n    for(i=[0:120:360])\n    {\n        rotate([0, 0, i])\n        {\n            translate([20, 0, 15])\n                leg_support(30);\n            \n            translate([10, 0, 45])\n                rotate([0, 60, 0])\n                    leg_support(20);\n            \n            translate([30, 0, 45])\n                rotate([0, -60, 0])\n                    leg_support(20);\n        }\n    }\n}\n\n// Main assembly\nunion()\n{\n    flare_base();\n    flare_center();\n    flare_top();\n    support_structure();\n    \n    // Decorative rings\n    translate([0, 0, 20])\n        difference()\n        {\n            cylinder(h=2, r=28, $fn=100);\n            cylinder(h=2, r=26, $fn=100);\n        }\n    \n    translate([0, 0, 35])\n        difference()\n        {\n            cylinder(h=2, r=32, $fn=100);\n            cylinder(h=2, r=30, $fn=100);\n        }\n}",
    "renders": true
  },
  {
    "decorative_art": "galleon",
    "openscad_code": "// Galleon Furniture - Realistic Style, Medium Complexity\n// Decorative wooden galleon-shaped bookshelf/console piece\n\n// Overall dimensions\nlength = 120;\nwidth = 40;\nheight = 80;\n\n// Hull parameters\nhull_height = height * 0.6;\nhull_width = width * 0.9;\ndeck_length = length * 0.8;\nbow_length = length * 0.2;\n\nmodule hull() {\n    // Main hull body\n    difference() {\n        // Basic hull shape\n        union() {\n            // Main hull section\n            translate([0, 0, hull_height/2])\n                scale([deck_length, hull_width, hull_height])\n                cube([1, 1, 1], center=true);\n            \n            // Bow - tapered front\n            translate([deck_length/2 + bow_length/2 - 5, 0, hull_height/2])\n                scale([bow_length, hull_width * 0.8, hull_height * 0.9])\n                rotate([0, 0, 0])\n                cube([1, 1, 1], center=true);\n            \n            // Stern - raised back\n            translate([-deck_length/2 - 5, 0, hull_height/2 + 5])\n                scale([bow_length * 0.7, hull_width * 0.9, hull_height * 1.2])\n                cube([1, 1, 1], center=true);\n        }\n        \n        // Hollow interior for storage\n        translate([0, 0, hull_height/2 - 2])\n            scale([deck_length - 4, hull_width - 4, hull_height - 4])\n            cube([1, 1, 1], center=true);\n    }\n}\n\nmodule deck() {\n    // Main deck planks\n    for (i = [-deck_length/2 + 5 : 10 : deck_length/2 - 5]) {\n        translate([i, 0, hull_height + 1])\n            scale([8, hull_width * 0.9, 2])\n            cube([1, 1, 1], center=true);\n    }\n}\n\nmodule masts() {\n    // Main mast\n    translate([0, 0, hull_height + 3])\n        cylinder(h=height * 0.4, r=2, $fn=8);\n    \n    // Fore mast\n    translate([deck_length/3, 0, hull_height + 3])\n        cylinder(h=height * 0.35, r=1.5, $fn=8);\n    \n    // Mizzen mast\n    translate([-deck_length/3, 0, hull_height + 3])\n        cylinder(h=height * 0.3, r=1.5, $fn=8);\n}\n\nmodule rigging() {\n    // Cross-spars\n    for (i = [0 : height * 0.1 : height * 0.3]) {\n        translate([0, 0, hull_height + 5 + i])\n            rotate([90, 0, 0])\n            cylinder(h=hull_width * 0.8, r=0.5, $fn=6);\n    }\n}\n\nmodule cannon_ports() {\n    // Decorative cannon ports along hull sides\n    for (i = [-deck_length/2 + 10 : 15 : deck_length/2 - 10]) {\n        // Port side\n        translate([i, -hull_width/2 + 1, hull_height/2])\n            rotate([0, 90, 0])\n            cylinder(h=3, r=2, $fn=12);\n        \n        // Starboard side\n        translate([i, hull_width/2 - 1, hull_height/2])\n            rotate([0, 90, 0])\n            cylinder(h=3, r=2, $fn=12);\n    }\n}\n\nmodule stern_castle() {\n    // Raised stern structure\n    difference() {\n        translate([-deck_length/2 + 5, 0, hull_height + 10])\n            scale([bow_length * 0.6, hull_width * 0.7, height * 0.3])\n            cube([1, 1, 1], center=true);\n        \n        // Windows\n        for (i = [-hull_width/3 : hull_width/3 : hull_width/3]) {\n            translate([-deck_length/2 + 5, i, hull_height + 15])\n                cube([2, 3, 4], center=true);\n        }\n    }\n}\n\nmodule figurehead() {\n    // Decorative figurehead at bow\n    translate([deck_length/2 + bow_length/2, 0, hull_height * 0.7])\n        union() {\n            // Body\n            rotate([90, 0, 0])\n                cylinder(h=8, r=3, $fn=6);\n            \n            // Head\n            translate([0, 0, 5])\n                sphere(r=2.5, $fn=8);\n        }\n}\n\nmodule support_base() {\n    // Structural support base for stability\n    difference() {\n        translate([0, 0, -2])\n            scale([length + 10, width + 10, 4])\n            cube([1, 1, 1], center=true);\n        \n        // Weight reduction\n        translate([0, 0, -1])\n            scale([length + 6, width + 6, 4])\n            cube([1, 1, 1], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    support_base();\n    hull();\n    deck();\n    masts();\n    rigging();\n    cannon_ports();\n    stern_castle();\n    figurehead();\n}",
    "renders": true
  },
  {
    "decorative_art": "pylon",
    "openscad_code": "// Pylon Furniture - Decorative Side Table\n// Realistic style with medium complexity\n\n$fn = 32;\n\n// Overall dimensions\npylon_height = 120;\npylon_width = 80;\npylon_depth = 60;\n\n// Wall thickness\nwall = 2;\n\n// Base module\nmodule pylon_base() {\n    // Main base structure\n    difference() {\n        // Outer base\n        cube([pylon_width, pylon_depth, 15], center=true);\n        // Hollow center\n        translate([0, 0, 7.5])\n            cube([pylon_width-wall*2, pylon_depth-wall*2, 15], center=true);\n    }\n    \n    // Decorative feet\n    for(x=[-1, 1]) {\n        for(y=[-1, 1]) {\n            translate([x*(pylon_width/2-8), y*(pylon_depth/2-8), -7.5])\n                cylinder(h=15, r1=6, r2=4);\n        }\n    }\n}\n\n// Tapering body module\nmodule pylon_body() {\n    // Lower section\n    difference() {\n        cube([pylon_width, pylon_depth, pylon_height/3], center=true);\n        translate([0, 0, pylon_height/6])\n            cube([pylon_width-wall*2, pylon_depth-wall*2, pylon_height/3], center=true);\n    }\n    \n    // Middle section (tapered)\n    difference() {\n        translate([0, 0, pylon_height/2])\n            cube([pylon_width*0.8, pylon_depth*0.8, pylon_height/3], center=true);\n        translate([0, 0, pylon_height/2])\n            cube([pylon_width*0.8-wall*2, pylon_depth*0.8-wall*2, pylon_height/3], center=true);\n    }\n    \n    // Top section (further tapered)\n    difference() {\n        translate([0, 0, pylon_height*5/6])\n            cube([pylon_width*0.6, pylon_depth*0.6, pylon_height/3], center=true);\n        translate([0, 0, pylon_height*5/6])\n            cube([pylon_width*0.6-wall*2, pylon_depth*0.6-wall*2, pylon_height/3], center=true);\n    }\n}\n\n// Decorative panels\nmodule decorative_panels() {\n    // Front panel\n    translate([0, pylon_depth/2-wall/2, pylon_height/2])\n        difference() {\n            cube([pylon_width*0.9, wall, pylon_height*0.8], center=true);\n            // Decorative cutouts\n            for(i=[-1, 0, 1]) {\n                translate([i*20, 0, 0])\n                    cylinder(h=wall+1, r=8);\n            }\n            // Additional pattern\n            translate([0, 0, -20])\n                sphere(r=10);\n        }\n    \n    // Side panels\n    translate([pylon_width/2-wall/2, 0, pylon_height/2])\n        rotate([0, 90, 0])\n            difference() {\n                cube([pylon_depth*0.9, wall, pylon_height*0.8], center=true);\n                // Diamond pattern\n                for(i=[-1, 1]) {\n                    for(j=[-1, 1]) {\n                        translate([i*15, 0, j*25])\n                            rotate([0, 90, 0])\n                                cylinder(h=wall+1, r=5);\n                    }\n                }\n            }\n}\n\n// Top surface\nmodule pylon_top() {\n    difference() {\n        // Main top\n        translate([0, 0, pylon_height-7.5])\n            cube([pylon_width*0.5, pylon_depth*0.5, 15], center=true);\n        // Hollow center\n        translate([0, 0, pylon_height-7.5])\n            cube([pylon_width*0.5-wall*2, pylon_depth*0.5-wall*2, 15], center=true);\n    }\n    \n    // Decorative edge\n    translate([0, 0, pylon_height-15])\n        difference() {\n            cube([pylon_width*0.5+10, pylon_depth*0.5+10, 5], center=true);\n            cube([pylon_width*0.5+6, pylon_depth*0.5+6, 6], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    pylon_base();\n    pylon_body();\n    decorative_panels();\n    pylon_top();\n}",
    "renders": true
  },
  {
    "decorative_art": "transit",
    "openscad_code": "// Transit Bench - Modern Urban Transit Furniture\n// Realistic style with medium complexity\n// Overall dimensions: 120mm (L) x 45mm (D) x 45mm (H)\n\nmodule bench_seat() {\n    // Main seat panel - 2mm thick for 3D printing\n    difference() {\n        // Seat base\n        translate([0, 0, 42])\n            cube([120, 45, 3], center=true);\n        \n        // Drainage grooves\n        for (i = [-40:20:40]) {\n            translate([i, 0, 41])\n                cube([3, 45, 5], center=true);\n        }\n    }\n}\n\nmodule bench_support(x_pos, mirror_support=false) {\n    // Support leg with decorative cutouts\n    translate([x_pos, 0, 21]) {\n        if (mirror_support) {\n            mirror([1, 0, 0]) {\n                support_structure();\n            }\n        } else {\n            support_structure();\n        }\n    }\n}\n\nmodule support_structure() {\n    difference() {\n        // Main support block\n        cube([6, 45, 42], center=true);\n        \n        // Decorative cutout pattern\n        for (i = [-15:10:15]) {\n            for (j = [-15:10:15]) {\n                translate([i, j, 0])\n                    cylinder(h=50, r=2, center=true);\n            }\n        }\n        \n        // Ground clearance\n        translate([0, 0, -22])\n            cube([8, 47, 5], center=true);\n    }\n}\n\nmodule backrest() {\n    // Curved backrest with slats\n    translate([0, -20, 30]) {\n        rotate([0, 10, 0]) {\n            // Backrest frame\n            difference() {\n                cube([120, 4, 25], center=true);\n                \n                // Slat gaps\n                for (i = [-50:10:50]) {\n                    translate([i, 0, 0])\n                        cube([6, 5, 27], center=true);\n                }\n            }\n        }\n    }\n}\n\nmodule armrest(x_pos) {\n    // Armrest with rounded edges\n    translate([x_pos, 20, 35]) {\n        difference() {\n            // Main armrest\n            translate([0, 0, 0])\n                cube([8, 15, 4], center=true);\n            \n            // Rounded top\n            translate([0, 0, 2])\n                scale([1, 1, 0.5])\n                    sphere(r=4);\n        }\n    }\n}\n\nmodule bench_base() {\n    // Base frame connecting supports\n    translate([0, 0, 2]) {\n        cube([130, 50, 4], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    bench_seat();\n    backrest();\n    \n    // Left support\n    bench_support(-50);\n    \n    // Right support\n    bench_support(50);\n    \n    // Center support\n    bench_support(0);\n    \n    // Armrests\n    armrest(-50);\n    armrest(50);\n    \n    // Base frame\n    bench_base();\n    \n    // Decorative end caps\n    for (x = [-55, 55]) {\n        translate([x, 0, 22]) {\n            cylinder(h=42, r=3, center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "knot",
    "openscad_code": "// Knot-inspired Decorative Table - Realistic Style, Medium Complexity\n// A 3D printable art furniture piece featuring an overhand knot base with tabletop\n\n// Overall dimensions\ntable_height = 100;\ntable_top_d = 120;\nknot_thickness = 12;\nwall_thickness = 2;\n\n// Knot parameters\nknot_radius = 35;\nloop_radius = 25;\ntwist_angle = 90;\n\n// Create the complete table\nunion() {\n    // Main knot base structure\n    knot_base();\n\n    // Tabletop\n    translate([0, 0, table_height - 15])\n        tabletop();\n}\n\n// Module for the knot base\nmodule knot_base() {\n    // First loop - horizontal\n    rotate([0, 0, 0])\n        knot_loop(0);\n    \n    // Second loop - twisted 90 degrees\n    rotate([90, 0, 0])\n        translate([0, 0, knot_radius])\n        knot_loop(90);\n    \n    // Third loop - completing the overhand knot\n    rotate([45, 45, 45])\n        translate([0, 0, -knot_radius/2])\n        knot_loop(135);\n    \n    // Structural support cylinders between loops\n    support_structure();\n}\n\n// Single knot loop with hollow center\nmodule knot_loop(rotation) {\n    difference() {\n        // Outer tube\n        rotate_extrude(angle = 360, $fn = 32)\n            translate([knot_radius, 0, 0])\n                circle(r = loop_radius);\n        \n        // Inner hollow\n        rotate_extrude(angle = 360, $fn = 32)\n            translate([knot_radius, 0, 0])\n                circle(r = loop_radius - wall_thickness);\n    }\n}\n\n// Support cylinders for structural integrity\nmodule support_structure() {\n    // Vertical supports\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([knot_radius, 0, 0])\n                cylinder(h = table_height - 15, r = knot_thickness/2, $fn = 16);\n    }\n    \n    // Diagonal braces\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([knot_radius * 0.7, 0, table_height/2])\n                rotate([90, 0, 45])\n                    cylinder(h = knot_radius * 1.4, r = knot_thickness/3, $fn = 12);\n    }\n}\n\n// Tabletop with decorative edge\nmodule tabletop() {\n    difference() {\n        // Main tabletop\n        cylinder(h = 15, r = table_top_d/2, $fn = 48);\n        \n        // Hollow center\n        cylinder(h = 15, r = table_top_d/2 - wall_thickness, $fn = 48);\n        \n        // Decorative edge pattern\n        for (i = [0:23]) {\n            rotate([0, 0, i * 15])\n                translate([table_top_d/2 - 8, 0, 0])\n                    cube([8, 3, 15], center = true);\n        }\n    }\n    \n    // Top surface decorative inlay\n    translate([0, 0, 7.5])\n        difference() {\n            cylinder(h = 1, r = table_top_d/2 - 10, $fn = 48);\n            cylinder(h = 1, r = table_top_d/2 - 15, $fn = 48);\n        }\n}\n\n// Add small feet for stability\nfor (i = [0:3]) {\n    rotate([0, 0, i * 90])\n        translate([knot_radius * 1.2, 0, 0])\n            cylinder(h = 5, r = 8, $fn = 16);\n}",
    "renders": true
  },
  {
    "decorative_art": "roar",
    "openscad_code": "// Roar Armchair - Realistic Medium Complexity\n// Dimensions: 120mm W x 110mm D x 100mm H\n\n// Parameters\nseat_height = 40;\nback_height = 100;\nseat_width = 120;\nseat_depth = 110;\nleg_height = 40;\nwall_thickness = 2;\n\n// Main seat frame\nmodule seat_frame() {\n    // Seat base\n    difference() {\n        cube([seat_width, seat_depth, 6], center=true);\n        translate([0, 0, 1])\n            cube([seat_width-4, seat_depth-4, 6], center=true);\n    }\n    \n    // Seat cushion\n    translate([0, 0, 4])\n        cube([seat_width-8, seat_depth-8, 8], center=true);\n}\n\n// Roaring face backrest\nmodule roar_backrest() {\n    // Main back panel\n    difference() {\n        cube([seat_width, 8, back_height-seat_height], center=true);\n        translate([0, 2, 0])\n            cube([seat_width-4, 8, back_height-seat_height-4], center=true);\n    }\n    \n    // Roar mouth opening\n    translate([0, -5, 40]) {\n        rotate([0, 0, 0])\n            difference() {\n                cube([60, 10, 30], center=true);\n                translate([0, 0, -5])\n                    cube([50, 12, 20], center=true);\n            }\n    }\n    \n    // Teeth\n    for(i = [-20:10:20]) {\n        translate([i, -10, 35])\n            rotate([90, 0, 0])\n                cylinder(h=8, r1=3, r2=1, $fn=6);\n    }\n    \n    // Eyes\n    translate([-25, -5, 60])\n        sphere(d=10, $fn=16);\n    translate([25, -5, 60])\n        sphere(d=10, $fn=16);\n    \n    // Eyebrows\n    translate([-25, -10, 70])\n        rotate([0, 30, 0])\n            cube([20, 4, 8], center=true);\n    translate([25, -10, 70])\n        rotate([0, -30, 0])\n            cube([20, 4, 8], center=true);\n}\n\n// Armrests\nmodule armrest(side) {\n    translate([side*(seat_width/2-10), 0, seat_height+15]) {\n        // Armrest support\n        cube([20, 8, 30], center=true);\n        \n        // Armrest top\n        translate([0, 0, 15])\n            cube([30, 20, 4], center=true);\n        \n        // Claw details\n        for(i = [-8:4:8]) {\n            translate([i, 12, 12])\n                rotate([0, -30, 0])\n                    cylinder(h=10, r1=3, r2=1, $fn=6);\n        }\n    }\n}\n\n// Legs with paw feet\nmodule leg(offset_x, offset_z) {\n    translate([offset_x, offset_z, -leg_height/2]) {\n        // Leg post\n        difference() {\n            cube([12, 12, leg_height], center=true);\n            translate([0, 0, 2])\n                cube([8, 8, leg_height-4], center=true);\n        }\n        \n        // Paw foot\n        translate([0, 0, -leg_height/2-5])\n            sphere(d=20, $fn=16);\n        \n        // Toe details\n        for(angle = [0:72:360]) {\n            rotate([0, 0, angle])\n                translate([7, 0, -leg_height/2-10])\n                    sphere(d=4, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    translate([0, 0, seat_height/2+leg_height])\n        seat_frame();\n    \n    // Backrest\n    translate([0, seat_depth/2-4, (back_height+seat_height)/2])\n        roar_backrest();\n    \n    // Armrests\n    armrest(1);\n    armrest(-1);\n    \n    // Legs\n    for(x = [-seat_width/2+20:seat_width-40:seat_width-40])\n        for(z = [-seat_depth/2+20:seat_depth-40:seat_depth-40])\n            leg(x, z);\n}",
    "renders": true
  },
  {
    "decorative_art": "lift",
    "openscad_code": "// Lift-style side table / plant stand\n// Overall height 120 mm, footprint 60 x 60 mm\n// 2 mm wall thickness for 3D-printability\n\n$fa = 2;\n$fs = 0.5;\n\n// Main assembly\ndifference() {\n    union() {\n        // Base platform\n        translate([0, 0, 5])\n            platform(60, 2);\n\n        // Top platform\n        translate([0, 0, 115])\n            platform(50, 2);\n\n        // Four vertical posts\n        posts();\n    }\n\n    // Cable hole through top platform\n    translate([0, 0, 116])\n        cylinder(h = 4, d = 6, $fn = 20);\n}\n\n// Cross-bracing bars for stability\nbracing();\n\n// Decorative lift handle\nhandle();\n\nmodule platform(size, thick) {\n    // Top surface\n    cube([size, size, thick], center = true);\n\n    // Chamfered underside lip\n    difference() {\n        translate([0, 0, -thick/2])\n            cube([size, size, thick + 0.2], center = true);\n        \n        for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (size/2 - 1.5), y * (size/2 - 1.5), -thick/2 - 0.1])\n                cube([size - 3, size - 3, thick + 0.2], center = true);\n    }\n}\n\nmodule posts() {\n    post_d = 6;\n    post_h = 110;\n    spacing = 54;\n\n    for (i = [0:3])\n        rotate([0, 0, i * 90])\n            translate([spacing/2, spacing/2, 5 + post_h/2])\n                cylinder(h = post_h, d = post_d, $fn = 20);\n}\n\nmodule bracing() {\n    bar_w = 4;\n    bar_h = 3;\n    spacing = 54;\n\n    // Lower X-brace pair\n    for (z = [35, 75])\n        for (ang = [45, 135])\n            rotate([0, 0, ang])\n                translate([0, 0, z])\n                    cube([spacing * 1.414 + 2, bar_w, bar_h], center = true);\n\n    // Upper parallel bars\n    translate([0, 0, 95])\n        for (dir = [0, 90])\n            rotate([0, 0, dir])\n                cube([spacing + 2, bar_w, bar_h], center = true);\n}\n\nmodule handle() {\n    // Mounting block\n    translate([0, 0, 117])\n        cube([8, 8, 3], center = true);\n\n    // Grip bar\n    translate([0, -12, 117 + 3 + 5])\n        rotate([90, 0, 0])\n            cylinder(h = 24, d = 4, $fn = 20);\n\n    // Side supports\n    for (y = [-12 - 2, 12 - 2])\n        translate([0, y, 117 + 3])\n            rotate([90, 0, 0])\n                cylinder(h = 10, d = 2, $fn = 10);\n}",
    "renders": true
  },
  {
    "decorative_art": "fathom",
    "openscad_code": "// Fathom Decorative Side Table - Realistic Style\n// Overall dimensions: 100mm diameter x 120mm height\n\n// Main table top\nmodule table_top() {\n    difference() {\n        // Solid top\n        cylinder(h=8, d=100, $fn=64);\n        \n        // Central fathom symbol relief\n        translate([0, 0, -0.1])\n            linear_extrude(height=2)\n                offset(-1)\n                    text(\"⚓\", size=40, halign=\"center\", valign=\"center\", $fn=32);\n        \n        // Decorative border pattern\n        for(i=[0:15:360]) {\n            rotate([0, 0, i])\n                translate([42, 0, -0.1])\n                    cylinder(h=2, d=4, $fn=6);\n        }\n    }\n}\n\n// Table leg with nautical rope detail\nmodule table_leg() {\n    // Main leg structure\n    difference() {\n        cylinder(h=100, d=8, $fn=16);\n        \n        // Spiral groove for rope effect\n        for(i=[0:5:100]) {\n            rotate([0, 0, i*3.6])\n                translate([4, 0, i])\n                    cube([2, 8, 2], center=true);\n        }\n    }\n}\n\n// Base with nautical wheel design\nmodule table_base() {\n    difference() {\n        union() {\n            // Main base disk\n            cylinder(h=12, d=60, $fn=64);\n            \n            // Radial spokes\n            for(i=[0:45:360]) {\n                rotate([0, 0, i])\n                    translate([15, 0, 6])\n                        cube([30, 4, 12], center=true);\n            }\n            \n            // Center hub\n            translate([0, 0, 6])\n                cylinder(h=12, d=16, $fn=32);\n        }\n        \n        // Central hole\n        translate([0, 0, -0.1])\n            cylinder(h=14, d=8, $fn=16);\n        \n        // Decorative holes\n        for(i=[0:90:360]) {\n            rotate([0, 0, i])\n                translate([25, 0, 6])\n                    cylinder(h=14, d=6, $fn=16);\n        }\n    }\n}\n\n// Support ring for legs\nmodule support_ring(height) {\n    color(\"DarkSlateGray\")\n    difference() {\n        cylinder(h=4, d=80, $fn=64);\n        \n        // Leg mounting holes\n        for(i=[0:120:360]) {\n            rotate([0, 0, i])\n                translate([30, 0, -0.1])\n                    cylinder(h=6, d=10, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0, 0, 120])\n        table_top();\n    \n    // Legs\n    for(i=[0:120:360]) {\n        rotate([0, 0, i])\n            translate([30, 0, 12])\n                table_leg();\n    }\n    \n    // Support ring\n    translate([0, 0, 70])\n        support_ring(70);\n    \n    // Base\n    translate([0, 0, 0])\n        table_base();\n    \n    // Decorative corner brackets\n    for(i=[0:120:360]) {\n        rotate([0, 0, i])\n            translate([30, 0, 116])\n                cube([2, 10, 6], center=true);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "scud",
    "openscad_code": "// Scud-inspired decorative shelf unit - medium complexity\n// Overall dimensions: 120mm wide x 80mm deep x 150mm tall\n\n$fn = 32;\n\n// Main body shell with scud-like curved form\nmodule scud_body() {\n    // Base platform\n    translate([0, 0, 10]) \n        cube([120, 80, 4], center=true);\n    \n    // Curved back wall\n    for(i = [0:10:100]) {\n        translate([i-50, 0, 70]) \n            rotate([90, 0, 0]) \n            cylinder(h=2, r1=40-i/6, r2=40-i/5, center=true);\n    }\n    \n    // Side walls with organic curves\n    translate([-60, 0, 80]) \n        rotate([0, 10, 0]) \n        cube([4, 76, 140], center=true);\n    translate([60, 0, 80]) \n        rotate([0, -10, 0]) \n        cube([4, 76, 140], center=true);\n}\n\n// Internal shelves with support ribs\nmodule shelves() {\n    // Three curved shelves\n    for(z = [40, 80, 120]) {\n        translate([0, 0, z]) \n            scale([1, 0.8, 1]) \n            rotate([0, 0, 5]) \n            difference() {\n                cylinder(h=3, r=55, center=true);\n                cube([110, 70, 5], center=true);\n            }\n        \n        // Support ribs underneath\n        for(x = [-40:40:40]) {\n            translate([x, 0, z-3]) \n                cube([6, 2, 6], center=true);\n        }\n    }\n}\n\n// Decorative scud-like patterns\nmodule patterns() {\n    // Organic holes in back wall\n    for(i = [0:3]) {\n        translate([-40+i*30, 0, 50+i*20]) \n            rotate([0, 20-i*10, 0]) \n            difference() {\n                sphere(r=8);\n                cube([16, 16, 16], center=true);\n            }\n    }\n    \n    // Surface texture ribs\n    for(y = [-30:15:30]) {\n        translate([0, y, 25]) \n            rotate([90, 0, 0]) \n            cylinder(h=2, r1=50, r2=45, center=true);\n    }\n}\n\n// Structural base with feet\nmodule base() {\n    // Central support column\n    translate([0, 0, 5]) \n        cylinder(h=10, r=15, center=true);\n    \n    // Four curved feet\n    for(angle = [0:90:270]) {\n        rotate([0, 0, angle]) \n            translate([45, 0, 5]) \n                rotate([0, 90, 0]) \n                cylinder(h=30, r=8, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    scud_body();\n    shelves();\n    patterns();\n    base();\n}\n\n// Wall mounting bracket\ntranslate([0, -40, 140]) \n    difference() {\n        cube([60, 4, 20], center=true);\n        translate([0, 0, 8]) \n            cube([50, 6, 10], center=true);\n    }",
    "renders": true
  },
  {
    "decorative_art": "tug",
    "openscad_code": "// Tug Boat Furniture - Decorative Side Table / Stool\n// Realistic style, medium complexity\n// Overall dimensions: 120mm L x 50mm W x 60mm H\n\n// Parameters\nhull_length = 120;\nhull_width = 50;\nhull_height = 30;\ndeck_height = 15;\ncabin_height = 25;\nwheelhouse_height = 20;\nwall_thickness = 2;\n\nmodule tug_boat_furniture() {\n    // Main hull - hollow for weight reduction\n    difference() {\n        // Outer hull\n        hull_shape();\n        \n        // Inner cavity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n        scale([(hull_length-2*wall_thickness)/hull_length,\n               (hull_width-2*wall_thickness)/hull_width,\n               (hull_height-2*wall_thickness)/hull_height])\n        hull_shape();\n    }\n    \n    // Deck surface\n    translate([0, 0, hull_height])\n    difference() {\n        cube([hull_length, hull_width, deck_height], center=true);\n        translate([0, 0, wall_thickness])\n        cube([hull_length-2*wall_thickness, hull_width-2*wall_thickness, deck_height], center=true);\n    }\n    \n    // Cabin structure\n    translate([0, 0, hull_height + deck_height])\n    cabin();\n    \n    // Wheelhouse\n    translate([-hull_length/4, 0, hull_height + deck_height + cabin_height])\n    wheelhouse();\n    \n    // Smoke stack\n    translate([hull_length/3, 0, hull_height + deck_height + cabin_height + wheelhouse_height])\n    smoke_stack();\n    \n    // Bollards along deck edges\n    for(x = [-hull_length/3, 0, hull_length/3]) {\n        translate([x, hull_width/2 - 5, hull_height + deck_height/2])\n        bollard();\n        translate([x, -hull_width/2 + 5, hull_height + deck_height/2])\n        bollard();\n    }\n    \n    // Rudder support (leg)\n    translate([hull_length/2 - 5, 0, -5])\n    rudder_leg();\n}\n\nmodule hull_shape() {\n    // Tapered hull with rounded front\n    hull() {\n        // Front rounded section\n        translate([hull_length/2 - hull_width/2, 0, 0])\n        scale([1, 1, 0.8])\n        sphere(d=hull_width);\n        \n        // Main hull body\n        cube([hull_length, hull_width, hull_height], center=true);\n        \n        // Tapered rear\n        translate([-hull_length/2, 0, 0])\n        rotate([0, 0, 180])\n        cylinder(h=hull_width, r1=hull_width/2, r2=0, center=true);\n    }\n}\n\nmodule cabin() {\n    // Main cabin block\n    difference() {\n        cube([hull_length/2, hull_width * 0.8, cabin_height], center=true);\n        translate([0, 0, wall_thickness])\n        cube([hull_length/2 - 2*wall_thickness, hull_width * 0.8 - 2*wall_thickness, cabin_height], center=true);\n    }\n    \n    // Cabin roof with slight curve\n    translate([0, 0, cabin_height/2])\n    scale([1, 1, 0.3])\n    cylinder(h=cabin_height, d=hull_width * 0.8, center=true);\n}\n\nmodule wheelhouse() {\n    // Raised wheelhouse structure\n    difference() {\n        cube([hull_length/3, hull_width * 0.6, wheelhouse_height], center=true);\n        translate([0, 0, wall_thickness])\n        cube([hull_length/3 - 2*wall_thickness, hull_width * 0.6 - 2*wall_thickness, wheelhouse_height], center=true);\n    }\n    \n    // Wheelhouse roof\n    translate([0, 0, wheelhouse_height/2])\n    cube([hull_length/3 + 2, hull_width * 0.7, 3], center=true);\n}\n\nmodule smoke_stack() {\n    // Cylindrical smoke stack\n    difference() {\n        cylinder(h=20, d=8, center=true);\n        translate([0, 0, wall_thickness])\n        cylinder(h=20 - 2*wall_thickness, d=8 - 2*wall_thickness, center=true);\n    }\n    \n    // Stack top\n    translate([0, 0, 10])\n    cylinder(h=2, d=10, center=true);\n}\n\nmodule bollard() {\n    // Decorative bollard posts\n    cylinder(h=8, d=4);\n    translate([0, 0, 4])\n    sphere(d=4);\n}\n\nmodule rudder_leg() {\n    // Support leg shaped like rudder\n    difference() {\n        cube([10, 20, 10], center=true);\n        translate([0, 0, -wall_thickness])\n        cube([10 - 2*wall_thickness, 20 - 2*wall_thickness, 10], center=true);\n    }\n    \n    // Rudder detail\n    translate([0, 8, 0])\n    cube([6, 2, 8], center=true);\n}\n\n// Generate the model\ntug_boat_furniture();",
    "renders": true
  },
  {
    "decorative_art": "caravan",
    "openscad_code": "// Caravan Bookshelf Unit\n// A medium-complexity 3D printable bookshelf designed in the shape of a classic caravan\n// Overall dimensions: 120mm wide x 60mm deep x 80mm tall\n// Wall thickness: 2mm throughout for 3D printing\n\n$fn = 32;\n\n// Main body module\nmodule caravan_body() {\n    difference() {\n        // Main shell with curved roof\n        union() {\n            // Lower rectangular part\n            cube([100, 50, 40], center=true);\n            \n            // Curved roof section\n            translate([0, 0, 30])\n                scale([1, 0.5, 1])\n                    sphere(d=100);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 5])\n            cube([96, 46, 78], center=true);\n    }\n}\n\n// Front window\nmodule front_window() {\n    translate([0, -26, 15])\n        difference() {\n            cube([60, 2, 20], center=true);\n            translate([0, 0, 0])\n                cube([56, 3, 16], center=true);\n        }\n}\n\n// Side windows (repeated on both sides)\nmodule side_windows() {\n    for(side = [-1, 1]) {\n        translate([side * 51, 0, 15])\n            rotate([0, 90, 0])\n                difference() {\n                    cube([30, 2, 20], center=true);\n                    translate([0, 0, 0])\n                        cube([26, 3, 16], center=true);\n                }\n    }\n}\n\n// Door with handle\nmodule door() {\n    translate([30, -26, 0])\n        difference() {\n            cube([20, 2, 35], center=true);\n            translate([0, 0, 0])\n                cube([18, 3, 33], center=true);\n        }\n    \n    // Door handle\n    translate([38, -27, 5])\n        cylinder(h=3, d=3);\n}\n\n// Bookshelf shelves\nmodule shelves() {\n    for(i = [1:3]) {\n        translate([0, 0, -25 + i * 20])\n            cube([94, 45, 2], center=true);\n    }\n}\n\n// Wheel wells and wheels\nmodule wheels() {\n    for(side = [-1, 1]) {\n        // Wheel arch\n        translate([side * 30, 26, -20])\n            difference() {\n                cube([25, 5, 15], center=true);\n                translate([0, -3, 5])\n                    cube([20, 5, 5], center=true);\n            }\n        \n        // Wheel\n        translate([side * 30, 30, -20])\n            rotate([90, 0, 0])\n                cylinder(h=5, d=18);\n        \n        // Hubcap\n        translate([side * 30, 33, -20])\n            rotate([90, 0, 0])\n                cylinder(h=2, d=10);\n    }\n}\n\n// Roof vent\nmodule roof_vent() {\n    translate([0, 0, 55])\n        difference() {\n            cube([20, 10, 8], center=true);\n            translate([0, 0, -1])\n                cube([16, 6, 10], center=true);\n        }\n}\n\n// Tow hitch\nmodule tow_hitch() {\n    translate([0, 30, -15])\n        union() {\n            cube([10, 15, 5], center=true);\n            translate([0, 10, 0])\n                cylinder(h=10, d=5);\n        }\n}\n\n// Decorative stripe\nmodule stripe() {\n    translate([0, 0, 5])\n        cube([104, 52, 1], center=true);\n}\n\n// Assembly\nunion() {\n    // Main body\n    caravan_body();\n    \n    // Windows\n    front_window();\n    side_windows();\n    \n    // Door\n    door();\n    \n    // Internal shelves\n    shelves();\n    \n    // Wheels and arches\n    wheels();\n    \n    // Roof details\n    roof_vent();\n    \n    // Tow hitch\n    tow_hitch();\n    \n    // Decorative stripe\n    color(\"red\")\n        stripe();\n}",
    "renders": true
  },
  {
    "decorative_art": "blade",
    "openscad_code": "// Blade Furniture - Decorative Table Knife Stand\n// Overall dimensions: 120mm length x 35mm width x 70mm height\n\n$fn = 32;\n\n// Main blade support structure\nmodule bladeStand() {\n    // Base platform\n    difference() {\n        // Main base\n        translate([0, 0, 2]) cube([100, 30, 4], center = true);\n        \n        // Decorative cutouts in base\n        for (i = [-35, 0, 35]) {\n            translate([i, 0, 2]) cylinder(h = 5, r = 8);\n        }\n    }\n    \n    // Central blade holder\n    difference() {\n        // Main holder block\n        translate([0, 0, 20]) cube([8, 25, 40], center = true);\n        \n        // Blade slot (3mm thick knife)\n        translate([0, 0, 30]) cube([3.5, 26, 50], center = true);\n    }\n    \n    // Decorative side supports\n    for (side = [-1, 1]) {\n        // Curved support arms\n        translate([side * 30, 0, 25]) rotate([0, 90, side * 15]) \n            cylinder(h = 35, r1 = 4, r2 = 6);\n        \n        // Support base extensions\n        translate([side * 40, 0, 2]) cube([15, 25, 4], center = true);\n    }\n    \n    // Front decorative panel\n    difference() {\n        translate([0, 13, 35]) cube([80, 3, 30], center = true);\n        \n        // Geometric pattern cutouts\n        for (x = [-30, -15, 0, 15, 30]) {\n            translate([x, 13, 35]) cube([8, 4, 8], center = true);\n        }\n    }\n    \n    // Rear support brace\n    translate([0, -13, 35]) cube([90, 3, 30], center = true);\n    \n    // Top decorative finial\n    difference() {\n        translate([0, 0, 65]) cylinder(h = 8, r1 = 12, r2 = 8);\n        translate([0, 0, 67]) cube([20, 3, 12], center = true);\n    }\n    \n    // Blade retention clips\n    for (y = [-8, 8]) {\n        translate([0, y, 45]) rotate([90, 0, 0]) \n            difference() {\n                cylinder(h = 15, r = 3);\n                translate([0, -2, 0]) cube([6, 4, 15], center = true);\n            }\n    }\n    \n    // Bottom reinforcement ribs\n    for (x = [-25, 0, 25]) {\n        translate([x, 0, 1]) cube([2, 28, 2], center = true);\n    }\n}\n\n// Assembly\nbladeStand();",
    "renders": true
  },
  {
    "decorative_art": "ferry",
    "openscad_code": "// Ferry Furniture - Decorative Shelf Unit in the form of a Ferry Boat\n// Medium complexity, realistic style, 3D printable\n\n$fn = 32;\n\n// Main dimensions\nferry_length = 120;\nferry_width = 35;\nferry_height = 45;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Hull module with smooth curved shape\nmodule hull() {\n    difference() {\n        // Main hull body\n        hull_shape();\n        \n        // Interior cavity for storage\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            scale([0.85, 0.85, 0.8])\n            hull_shape();\n    }\n}\n\n// Basic hull shape with curved bottom\nmodule hull_shape() {\n    hull_points = [\n        [0, 0, 0],\n        [ferry_length, 0, 0],\n        [ferry_length, ferry_width, 0],\n        [0, ferry_width, 0],\n        [5, 5, ferry_height],\n        [ferry_length-5, 5, ferry_height],\n        [ferry_length-5, ferry_width-5, ferry_height],\n        [5, ferry_width-5, ferry_height]\n    ];\n    \n    hull() {\n        for (p = hull_points) {\n            translate(p) sphere(2);\n        }\n    }\n}\n\n// Superstructure - passenger deck\nmodule superstructure() {\n    translate([ferry_length*0.2, wall_thickness, ferry_height*0.6])\n        difference() {\n            // Main deck house\n            cube([ferry_length*0.6, ferry_width-wall_thickness*2, ferry_height*0.4]);\n            \n            // Door opening\n            translate([ferry_length*0.3, wall_thickness, 0])\n                cube([8, wall_thickness, 12]);\n            \n            // Windows\n            for (i = [0:3]) {\n                translate([ferry_length*0.25 + i*15, 0, ferry_height*0.2])\n                    cube([6, wall_thickness, 8]);\n                translate([ferry_length*0.25 + i*15, ferry_width-wall_thickness*2, ferry_height*0.2])\n                    cube([6, wall_thickness, 8]);\n            }\n        }\n}\n\n// Bridge structure\nmodule bridge() {\n    translate([ferry_length*0.75, ferry_width/2-wall_thickness, ferry_height*1.1])\n        difference() {\n            // Bridge house\n            cube([ferry_length*0.2, wall_thickness*4, ferry_height*0.3]);\n            \n            // Bridge windows\n            for (i = [0:1]) {\n                translate([i*10, 0, wall_thickness])\n                    cube([6, wall_thickness, 8]);\n            }\n        }\n}\n\n// Lifeboats on deck\nmodule lifeboats() {\n    for (side = [0, 1]) {\n        for (i = [0:2]) {\n            translate([ferry_length*0.3 + i*20, side*(ferry_width-wall_thickness*3), ferry_height*0.65])\n                rotate([0, 90, 0])\n                cylinder(h=12, r1=3, r2=3);\n        }\n    }\n}\n\n// Railings around the deck\nmodule railings() {\n    railing_height = 4;\n    post_spacing = 10;\n    \n    // Side railings\n    for (side = [0, 1]) {\n        for (x = [ferry_length*0.1:post_spacing:ferry_length*0.9]) {\n            translate([x, side*ferry_width, ferry_height*0.6])\n                cylinder(h=railing_height, r=1);\n        }\n        \n        // Top rail\n        translate([ferry_length/2, side*ferry_width, ferry_height*0.6+railing_height])\n            rotate([90, 0, 0])\n            cylinder(h=ferry_length*0.8, r=1);\n    }\n}\n\n// Smoke stack\nmodule smoke_stack() {\n    translate([ferry_length*0.6, ferry_width/2, ferry_height*1.4])\n        cylinder(h=15, r1=5, r2=7);\n}\n\n// Anchor detail at bow\nmodule anchor() {\n    translate([wall_thickness*2, ferry_width/2, ferry_height*0.3])\n        rotate([0, 90, 0])\n        cylinder(h=8, r=2);\n}\n\n// Support legs for furniture stability\nmodule support_legs() {\n    leg_height = 10;\n    for (corner = [[0, 0], [0, 1], [1, 0], [1, 1]]) {\n        translate([\n            corner[0]*ferry_length*0.8 + ferry_length*0.1,\n            corner[1]*ferry_width*0.8 + ferry_width*0.1,\n            -leg_height\n        ])\n            cylinder(h=leg_height, r=3);\n    }\n}\n\n// Assembly\nunion() {\n    // Main ferry structure\n    hull();\n    superstructure();\n    bridge();\n    smoke_stack();\n    \n    // Furniture elements\n    support_legs();\n    \n    // Decorative details\n    lifeboats();\n    railings();\n    anchor();\n}",
    "renders": true
  },
  {
    "decorative_art": "sail",
    "openscad_code": "// Sail Furniture Art Piece - Realistic Style\n// A decorative sail-inspired furniture element for 3D printing\n\n$fn = 50;\nwall_thickness = 2;\n\n// Overall dimensions\nbase_length = 120;\nbase_width = 80;\nbase_height = 10;\nmast_height = 100;\nsail_height = 85;\nsail_width = 60;\n\nmodule sail_furniture() {\n    union() {\n        // Base platform\n        difference() {\n            // Main base\n            translate([0, 0, base_height/2])\n                cube([base_length, base_width, base_height], center=true);\n            \n            // Center hole for mast\n            translate([0, 0, -1])\n                cylinder(h=base_height+2, r=wall_thickness+3, center=false);\n            \n            // Decorative edge pattern\n            for (i = [-1, 1]) {\n                translate([i * (base_length/2 - 5), 0, base_height - 3])\n                    cube([10, base_width - 20, 3], center=true);\n            }\n        }\n        \n        // Mast\n        translate([0, 0, base_height])\n            cylinder(h=mast_height, r=wall_thickness+2, center=false);\n        \n        // Sail structure\n        translate([0, 0, base_height + 5])\n            rotate([0, 0, -10])\n            sail();\n        \n        // Support cables\n        cable_supports();\n        \n        // Decorative base details\n        base_details();\n    }\n}\n\nmodule sail() {\n    hull() {\n        // Main sail body\n        difference() {\n            // Curved sail shape\n            union() {\n                translate([0, 0, sail_height/2])\n                    scale([1, 0.7, 1])\n                    sphere(d=sail_width);\n                \n                // Bottom edge reinforcement\n                translate([0, 0, 5])\n                    cube([sail_width, wall_thickness, 10], center=true);\n            }\n            \n            // Interior hollow\n            translate([0, 0, sail_height/2])\n                scale([0.85, 0.5, 0.9])\n                sphere(d=sail_width - wall_thickness*2);\n        }\n        \n        // Sail seam details\n        for (i = [1:3]) {\n            translate([0, 0, i * sail_height/4])\n                cube([sail_width - 10, wall_thickness/2, 1], center=true);\n        }\n        \n        // Reinforcement rings\n        translate([sail_width/3, 0, sail_height - 10])\n            cylinder(h=wall_thickness, r=wall_thickness+1, center=true);\n        \n        translate([-sail_width/3, 0, sail_height - 10])\n            cylinder(h=wall_thickness, r=wall_thickness+1, center=true);\n    }\n}\n\nmodule cable_supports() {\n    // Top cables\n    for (angle = [30, 150]) {\n        rotate([0, 0, angle])\n        translate([sail_width/2, 0, base_height + mast_height - 10])\n            cylinder(h=30, r=wall_thickness/2, center=true);\n    }\n    \n    // Bottom cables\n    for (angle = [45, 135]) {\n        rotate([0, 0, angle])\n        translate([base_length/3, 0, base_height + 5])\n            cylinder(h=25, r=wall_thickness/2, center=true);\n    }\n}\n\nmodule base_details() {\n    // Corner supports\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (base_length/2 - 5), y * (base_width/2 - 5), base_height/2])\n                cylinder(h=base_height, r=wall_thickness+3, center=true);\n        }\n    }\n    \n    // Decorative inlays\n    for (i = [-1, 0, 1]) {\n        translate([i * 20, 0, base_height - 1])\n            cube([15, base_width - 40, 1], center=true);\n    }\n}\n\nsail_furniture();",
    "renders": true
  },
  {
    "decorative_art": "racer",
    "openscad_code": "// Racing Chair Furniture Art Piece\n// Dimensions: ~120mm wide x 130mm deep x 140mm tall\n\n$fn = 32;\n\n// Wall thickness\nwall = 2;\n\n// Chair base module\nmodule chair_base() {\n    // Seat base platform\n    translate([0, 0, 5])\n        cube([80, 90, wall], center=true);\n    \n    // Seat cushion\n    translate([0, 0, 12])\n        cube([75, 85, 10], center=true);\n    \n    // Seat side bolsters\n    for(side = [-1, 1]) {\n        translate([side * 35, 0, 15])\n            cube([10, 80, 15], center=true);\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    // Main backrest panel\n    translate([0, -40, 70])\n        cube([70, wall, 110], center=true);\n    \n    // Upper headrest\n    translate([0, -40, 120])\n        cube([50, wall, 20], center=true);\n    \n    // Side wings\n    for(side = [-1, 1]) {\n        translate([side * 30, -40, 60])\n            rotate([0, side * 10, 0])\n            cube([wall, 15, 90], center=true);\n    }\n}\n\n// Armrest module\nmodule armrest() {\n    // Left armrest\n    translate([-38, 0, 35])\n        difference() {\n            cube([wall, 60, 20], center=true);\n            // Cutout for style\n            translate([0, 10, 0])\n                cube([wall+1, 30, 15], center=true);\n        }\n    \n    // Right armrest\n    translate([38, 0, 35])\n        difference() {\n            cube([wall, 60, 20], center=true);\n            // Cutout for style\n            translate([0, 10, 0])\n                cube([wall+1, 30, 15], center=true);\n        }\n}\n\n// Wheel base module\nmodule wheel_base() {\n    // Central pole\n    translate([0, 0, -10])\n        cylinder(h=30, r=4);\n    \n    // Star base legs\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72])\n        translate([0, 25, -20])\n            cube([wall, 50, wall], center=true);\n        \n        // Wheels\n        rotate([0, 0, i * 72])\n        translate([0, 50, -20])\n            rotate([90, 0, 0])\n            cylinder(h=wall+1, r=6, center=true);\n    }\n}\n\n// Racing stripes detail\nmodule racing_stripes() {\n    // Horizontal stripes on backrest\n    for(i = [0:2]) {\n        translate([0, -40, 50 + i * 25])\n            cube([60, wall+1, 8], center=true);\n    }\n    \n    // Vertical stripe on seat\n    translate([0, 0, 20])\n        cube([wall+1, 60, 5], center=true);\n}\n\n// Assembly\nunion() {\n    chair_base();\n    backrest();\n    armrest();\n    wheel_base();\n    racing_stripes();\n}",
    "renders": true
  },
  {
    "decorative_art": "quay",
    "openscad_code": "// Quay Bench - Realistic Style, Medium Complexity\n// Dimensions: 120mm (L) x 45mm (W) x 40mm (H)\n\nmodule wood_plank(length, width, height) {\n    difference() {\n        // Main plank\n        cube([length, width, height], center = true);\n        \n        // Rounded edges - remove corners\n        for (x = [-length/2+1, length/2-1])\n            for (y = [-width/2+1, width/2-1])\n                translate([x, y, height/2-1])\n                    sphere(r = 1.5, $fn = 8);\n    }\n}\n\nmodule bench_leg(height) {\n    // Main support post\n    difference() {\n        cylinder(h = height, r = 3, $fn = 12);\n        // Cable hole\n        translate([0, 0, height/2])\n            rotate([90, 0, 0])\n                cylinder(h = 8, r = 1.5, $fn = 8);\n    }\n    \n    // Base plate\n    translate([0, 0, -2])\n        cylinder(h = 4, r = 6, $fn = 20);\n    \n    // Decorative ring\n    translate([0, 0, height-2])\n        cylinder(h = 4, r = 3.5, $fn = 20);\n}\n\nmodule bench_seat() {\n    // Main seat planks (5 planks)\n    for (i = [-2:2]) {\n        translate([0, i*8, 15])\n            wood_plank(110, 6, 2);\n    }\n    \n    // Support bars underneath\n    translate([0, 0, 13])\n        cube([100, 40, 2], center = true);\n}\n\nmodule backrest() {\n    // Backrest planks\n    for (i = [-2:2]) {\n        translate([0, i*8, 25])\n            rotate([10, 0, 0])\n                wood_plank(110, 6, 2);\n    }\n    \n    // Decorative top rail\n    translate([0, 0, 32])\n        wood_plank(115, 8, 3);\n}\n\nmodule armrest() {\n    // Armrest support\n    translate([50, 20, 20])\n        rotate([0, -10, 0])\n            cube([2, 15, 15], center = true);\n    \n    // Armrest top\n    translate([50, 25, 26])\n        rotate([0, -10, 0])\n            wood_plank(20, 8, 2);\n}\n\n// Main assembly\nunion() {\n    // Seat assembly\n    bench_seat();\n    \n    // Backrest\n    backrest();\n    \n    // Legs - 4 legs\n    for (x = [-45, 45])\n        for (y = [-15, 15]) {\n            translate([x, y, 7])\n                bench_leg(14);\n        }\n    \n    // Armrests\n    armrest();\n    mirror([1, 0, 0])\n        armrest();\n    \n    // Center support beam\n    translate([0, 0, 8])\n        cube([90, 6, 4], center = true);\n    \n    // Decorative end caps\n    for (x = [-55, 55]) {\n        translate([x, 0, 15])\n            cylinder(h = 8, r = 4, $fn = 20);\n        translate([x, 0, 32])\n            cylinder(h = 5, r = 4, $fn = 20);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "aero",
    "openscad_code": "// Aero-inspired decorative side table\n// Overall dimensions: ~120mm diameter x 450mm height\n\n$fn = 36;  // Smooth curves for 3D printing\n\n// Main module\nmodule aero_table() {\n    union() {\n        // Base support ring\n        translate([0, 0, 10])\n            base_ring();\n        \n        // Central column with aerodynamic shaping\n        central_column();\n        \n        // Three curved support legs\n        for(i = [0:120:359]) {\n            rotate([0, 0, i])\n                support_leg();\n        }\n        \n        // Top surface with wing-inspired design\n        translate([0, 0, 420])\n            table_top();\n        \n        // Decorative fin details\n        for(i = [0:60:359]) {\n            rotate([0, 0, i])\n                translate([0, 0, 380])\n                    decorative_fin();\n        }\n    }\n}\n\n// Base ring for stability\nmodule base_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h = 20, r1 = 60, r2 = 65);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h = 22, r1 = 55, r2 = 60);\n        \n        // Lightening holes\n        for(i = [0:45:359]) {\n            rotate([0, 0, i])\n                translate([57.5, 0, 10])\n                    rotate([90, 0, 0])\n                        cylinder(h = 20, r = 3);\n        }\n    }\n}\n\n// Aerodynamic central column\nmodule central_column() {\n    difference() {\n        // Main tapered column\n        cylinder(h = 400, r1 = 25, r2 = 15);\n        \n        // Internal hollow for weight reduction\n        translate([0, 0, 5])\n            cylinder(h = 390, r1 = 23, r2 = 13);\n        \n        // Vertical airflow grooves\n        for(i = [0:30:359]) {\n            rotate([0, 0, i])\n                translate([20, 0, 0])\n                    cube([4, 2, 390], center = true);\n        }\n    }\n}\n\n// Curved support legs with airfoil profile\nmodule support_leg() {\n    // Main leg structure\n    translate([35, 0, 20])\n        rotate([0, 75, 0])\n            scale([1, 0.6, 1])\n                cylinder(h = 150, r1 = 8, r2 = 6);\n    \n    // Secondary support strut\n    translate([45, 0, 50])\n        rotate([0, 85, 0])\n            scale([0.8, 0.4, 1])\n                cylinder(h = 120, r1 = 5, r2 = 3);\n    \n    // Connection bracket to column\n    translate([25, 0, 30])\n        rotate([0, 0, 0])\n            cube([10, 15, 4], center = true);\n}\n\n// Wing-inspired table top\nmodule table_top() {\n    difference() {\n        // Main disc\n        translate([0, 0, 0])\n            cylinder(h = 10, r = 60);\n        \n        // Tapered edge profile\n        translate([0, 0, 5])\n            cylinder(h = 6, r = 58);\n        \n        // Central hole for cable management (optional)\n        translate([0, 0, -1])\n            cylinder(h = 12, r = 8);\n        \n        // Air intake vents\n        for(i = [0:72:359]) {\n            rotate([0, 0, i])\n                translate([45, 0, 5])\n                    scale([1, 0.3, 1])\n                        cylinder(h = 5, r = 8);\n        }\n    }\n    \n    // Raised lip for items\n    translate([0, 0, 10])\n        cylinder(h = 3, r = 59, r2 = 60);\n}\n\n// Decorative fins mimicking aircraft winglets\nmodule decorative_fin() {\n    // Main fin\n    translate([30, 0, 0])\n        rotate([0, -15, 0])\n            difference() {\n                // Outer fin shape\n                cube([25, 2, 15], center = true);\n                \n                // Inner cutout for style\n                translate([5, 0, 0])\n                    cube([15, 2.2, 10], center = true);\n            }\n    \n    // Support bracket\n    translate([15, 0, -5])\n        cube([5, 4, 5], center = true);\n}\n\n// Render the complete table\naero_table();",
    "renders": true
  },
  {
    "decorative_art": "shift",
    "openscad_code": "// Decorative Shift Furniture: Shift-shaped console table with artistic frame and shelf\n// Overall dimensions: 120mm (W) x 70mm (D) x 80mm (H)\n// Wall thickness: 2mm for 3D printing\n\n// Main parameters\ntable_width = 120;\ntable_depth = 70;\ntable_height = 80;\nwall_thickness = 2;\nshelf_height = 30;\n\n// Module for rounded rectangle profile (used for tabletop and shelf)\nmodule rounded_rect(width, depth, height, radius) {\n    difference() {\n        cube([width, depth, height], center = true);\n        // Round corners by subtracting cylinders\n        for (x = [-width/2 + radius, width/2 - radius]) {\n            for (y = [-depth/2 + radius, depth/2 - radius]) {\n                translate([x, y, -height/2 - 0.1])\n                    cylinder(h = height + 0.2, r = radius, $fn = 20);\n            }\n        }\n    }\n}\n\n// Shift symbol tabletop - thick top with beveled edges\nmodule shift_tabletop() {\n    difference() {\n        union() {\n            // Main rectangular part\n            rounded_rect(table_width, table_depth, 6, 8);\n            \n            // Shift arrow extension\n            translate([table_width/2 - 15, 0, 0])\n                cube([30, 12, 6], center = true);\n        }\n        \n        // Bevel edges on top surface\n        translate([0, 0, 2.9])\n            rounded_rect(table_width - 4, table_depth - 4, 2, 6);\n    }\n}\n\n// Decorative frame legs with cross-bracing\nmodule decorative_frame() {\n    // Left leg - vertical with decorative cutout\n    difference() {\n        translate([-table_width/2 + 8, 0, table_height/2 - 20])\n            cube([8, table_depth - 10, 40], center = true);\n        \n        // Decorative circle cutout\n        translate([-table_width/2 + 8, 0, table_height/2 - 20])\n            rotate([90, 0, 0])\n                cylinder(h = 10, r = 3, $fn = 20);\n    }\n    \n    // Right leg - matching left\n    difference() {\n        translate([table_width/2 - 8, 0, table_height/2 - 20])\n            cube([8, table_depth - 10, 40], center = true);\n        \n        translate([table_width/2 - 8, 0, table_height/2 - 20])\n            rotate([90, 0, 0])\n                cylinder(h = 10, r = 3, $fn = 20);\n    }\n    \n    // Cross brace between legs\n    translate([0, 0, shelf_height/2 + 5])\n        cube([table_width - 10, 6, wall_thickness], center = true);\n}\n\n// Lower shelf for stability and storage\nmodule lower_shelf() {\n    rounded_rect(table_width - 20, table_depth - 10, 4, 5);\n    \n    // Shelf support brackets\n    for (x = [-table_width/2 + 15, table_width/2 - 15]) {\n        translate([x, 0, -2])\n            cube([6, table_depth - 10, 4], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main tabletop\n    translate([0, 0, table_height - 3])\n        shift_tabletop();\n    \n    // Decorative frame structure\n    translate([0, 0, 0])\n        decorative_frame();\n    \n    // Lower shelf\n    translate([0, 0, shelf_height])\n        lower_shelf();\n    \n    // Rear support panel for stability\n    translate([0, table_depth/2 - 3, table_height/2 - 20])\n        cube([table_width - 10, wall_thickness, table_height - 20], center = true);\n    \n    // Front decorative trim piece\n    translate([0, -table_depth/2 + 3, table_height - 15])\n        cube([table_width - 10, wall_thickness, 10], center = true);\n}",
    "renders": true
  },
  {
    "decorative_art": "beacon",
    "openscad_code": "// Beacon Table Lamp – OpenSCAD  \n// 110 mm high, 80 mm Ø footprint, 2 mm wall thickness  \n// Realistic style, medium complexity, 3D-printable  \n\n$fn = 64;                // gives smooth curves without tiny facets  \n\n// Parameters  \nbase_h      = 15;        // base height  \nstem_h      = 55;        // central post  \nshade_h     = 40;        // translucent shade\nwall_t      = 2;         // constant wall thickness\ndia_out     = 80;        // overall diameter\ndia_in      = dia_out - 2*wall_t;\n\nmodule beacon_lamp(){\n    // Base disc with subtle rings for realism\n    difference(){\n        cylinder(h=base_h, d=dia_out, center=false);\n        translate([0,0,-1])\n            cylinder(h=base_h+2, d=dia_in, center=false);\n    }\n\n    // Structural stem – hollow tube\n    translate([0,0,base_h]){\n        difference(){\n            cylinder(h=stem_h, d=20, center=false);\n            translate([0,0,-1])\n                cylinder(h=stem_h+2, d=16, center=false);\n        }\n    }\n\n    // Beacon shade – flared lighthouse shape\n    translate([0,0,base_h+stem_h]){\n        difference(){\n            cylinder(h1=dia_out, h2=dia_out*0.7, h=shade_h, center=false);\n            translate([0,0,-1])\n                cylinder(h1=dia_in, h2=dia_in*0.7-2*wall_t, h=shade_h+2, center=false);\n        }\n    }\n\n    // Internal LED shelf inside shade (print-in-place support)\n    translate([0,0,base_h+stem_h+shade_h*0.3]){\n        difference(){\n            cylinder(h=2, d=dia_in-4, center=false);\n            // light aperture\n            translate([0,0,-1])\n                cylinder(h=4, d=20, center=false);\n        }\n    }\n\n    // Decorative radial ribs around shade (realistic stiffeners)\n    module rib(i){\n        rotate([0,0,i*360/12])\n            translate([dia_out/2 - wall_t, 0, base_h+stem_h])\n                cube([wall_t, wall_t, shade_h], center=true);\n    }\n    for(i=[0:11]) rib(i);\n\n    // Subtle top cap with drip edge\n    translate([0,0,base_h+stem_h+shade_h]){\n        difference(){\n            cylinder(h=5, d=dia_out, center=false);\n            translate([0,0,-1])\n                cylinder(h=7, d=dia_in, center=false);\n        }\n    }\n}\n\nbeacon_lamp();",
    "renders": true
  },
  {
    "decorative_art": "storm",
    "openscad_code": "// Storm-themed decorative furniture piece - \"Tempest Bench\"\n// A 100mm long bench resembling a stormy seascape frozen in furniture form\n\n// Global parameters\nlength = 100;\nwidth = 40;\nheight = 50;\nwall_thickness = 2;\n\nmodule wave_leg(x_pos, z_rot) {\n    // Creates a wave-shaped bench leg with structural support\n    translate([x_pos, 0, 0])\n    rotate([0, 0, z_rot])\n    union() {\n        // Main wave curve\n        difference() {\n            // Outer wave shape\n            translate([0, -width/4, 0])\n            scale([1, 0.8, 1])\n            cylinder(h=height-10, r=width/3, $fn=50);\n            \n            // Inner hollow for 3D printing\n            translate([0, -width/4+wall_thickness, wall_thickness])\n            scale([0.7, 0.6, 0.9])\n            cylinder(h=height-12, r=width/3-wall_thickness, $fn=50);\n        }\n        \n        // Base stabilizer\n        translate([0, -width/4, -2])\n        cube([width/3, width/2, 4], center=true);\n    }\n}\n\nmodule storm_seat() {\n    // Main seat with storm wave patterns\n    translate([0, 0, height])\n    difference() {\n        // Solid seat base\n        cube([length, width, wall_thickness*2], center=true);\n        \n        // Lightning bolt cutout pattern\n        for(i=[-length/3, 0, length/3]) {\n            translate([i, 0, wall_thickness])\n            rotate([0, 0, 45])\n            scale([0.3, 1, 1])\n            cube([15, 3, wall_thickness*2], center=true);\n        }\n    }\n}\n\nmodule cloud_backrest() {\n    // Cloud-shaped backrest with storm details\n    translate([0, -width/2+5, height-wall_thickness])\n    union() {\n        // Main cloud mass\n        difference() {\n            // Puffy cloud shape\n            hull() {\n                for(x=[-length/2+10:length/4:length/2-10]) {\n                    translate([x, 0, 0])\n                    sphere(r=10, $fn=20);\n                }\n            }\n            \n            // Hollow for 3D printing\n            translate([0, wall_thickness, 0])\n            scale([0.8, 0.6, 0.8])\n            cube([length-20, 20, 15], center=true);\n        }\n        \n        // Rain droplets detail\n        for(i=[-length/2+15:10:length/2-15]) {\n            translate([i, 0, -12])\n            cylinder(h=8, r=1.5, $fn=8);\n        }\n    }\n}\n\nmodule structural_braces() {\n    // Hidden structural support braces\n    for(x=[-length/3, length/3]) {\n        translate([x, 0, height/2])\n        rotate([0, 90, 0])\n        difference() {\n            cylinder(h=width/2-5, r=wall_thickness, $fn=12);\n            translate([0, 0, -wall_thickness])\n            cube([wall_thickness*2, wall_thickness*2, wall_thickness*4], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Left wave leg\n    wave_leg(-length/2+15, 15);\n    \n    // Right wave leg\n    wave_leg(length/2-15, -15);\n    \n    // Seat surface\n    storm_seat();\n    \n    // Backrest\n    cloud_backrest();\n    \n    // Structural braces\n    structural_braces();\n    \n    // Lightning accent on back\n    translate([0, -width/2+2, height+8])\n    rotate([90, 0, 0])\n    linear_extrude(height=wall_thickness)\n    polygon(points=[[0,0], [2,-5], [4,0], [5,-8], [7,-3], [9,-10], [11,-5], [13,-12], [15,-5], [17,-8], [19,-2], [21,-6], [23,0]]);\n}",
    "renders": true
  },
  {
    "decorative_art": "yawl",
    "openscad_code": "// Yawl furniture decorative model\n// Overall dimensions: ~120mm length, ~80mm height, ~40mm width\n// Wall thickness: 2mm throughout, designed for 3D printing\n\n$fn = 50;\n\nmodule hull_base() {\n    // Main hull body with furniture-style proportions\n    difference() {\n        // Outer hull shell\n        hull() {\n            translate([-55, 0, 0]) cylinder(h=20, d1=25, d2=20);\n            translate([55, 0, 0]) cylinder(h=20, d1=20, d2=25);\n        }\n        \n        // Hollow interior\n        translate([0, 0, 2]) cube([110, 21, 16], center=true);\n    }\n}\n\nmodule deck() {\n    // Furniture-style flat deck with decorative edge\n    difference() {\n        // Main deck platform\n        translate([0, 0, 20]) cube([110, 25, 3], center=true);\n        \n        // Decorative groove pattern\n        for(i = [-40:20:40]) {\n            translate([i, 0, 22]) cube([15, 23, 1], center=true);\n        }\n    }\n    \n    // Rounded deck edges for furniture aesthetic\n    translate([0, 12.5, 21.5]) cylinder(h=2, r=1.5, $fn=20);\n    translate([0, -12.5, 21.5]) cylinder(h=2, r=1.5, $fn=20);\n}\n\nmodule mast(position, height, diameter) {\n    // Furniture-grade mast with tapered design\n    translate([position, 0, 23]) \n        cylinder(h=height, d1=diameter+1, d2=diameter, $fn=8);\n    \n    // Decorative base ring\n    translate([position, 0, 23]) \n        cylinder(h=2, d=diameter+3, $fn=20);\n}\n\nmodule boom(mast_pos, boom_len) {\n    // Furniture-style boom with clean lines\n    translate([mast_pos + boom_len/2, 0, 35]) \n        rotate([90, 0, 0]) \n            cylinder(h=boom_len, d=3, $fn=8);\n    \n    // Reinforcement joint\n    translate([mast_pos, 0, 35]) \n        sphere(d=4, $fn=12);\n}\n\nmodule keel() {\n    // Furniture-style decorative keel with step design\n    difference() {\n        // Main keel body\n        translate([0, 0, -8]) cube([90, 8, 12], center=true);\n        \n        // Stepped detail for furniture aesthetic\n        for(i = [-35:10:35]) {\n            translate([i, 0, -10]) cube([8, 12, 4], center=true);\n        }\n    }\n}\n\nmodule rudder() {\n    // Furniture-style rudder with traditional profile\n    difference() {\n        // Main rudder blade\n        translate([58, 0, 10]) cube([15, 2, 18], center=true);\n        \n        // Decorative cutout\n        translate([58, 0, 14]) cube([10, 3, 8], center=true);\n    }\n    \n    // Rudder post detail\n    translate([58, 0, 20]) cylinder(h=5, d=4, $fn=12);\n}\n\nmodule cabin() {\n    // Furniture-style cabin with windows\n    difference() {\n        // Main cabin structure\n        translate([-25, 0, 25]) cube([35, 20, 18], center=true);\n        \n        // Windows\n        for(x = [-35:10:-15]) {\n            translate([x, 10, 32]) cube([6, 1, 6], center=true);\n            translate([x, -10, 32]) cube([6, 1, 6], center=true);\n        }\n    }\n    \n    // Cabin roof with furniture-style overhang\n    translate([-25, 0, 34]) cube([37, 22, 2], center=true);\n}\n\n// Assembly\nunion() {\n    hull_base();\n    deck();\n    keel();\n    rudder();\n    cabin();\n    \n    // Main mast and boom\n    mast(0, 40, 4);\n    boom(0, 35);\n    \n    // Mizzen mast\n    mast(35, 30, 3);\n    boom(35, 25);\n    \n    // Decorative furniture feet\n    for(pos = [-45, 45]) {\n        translate([pos, 12, -10]) cylinder(h=3, d=6, $fn=20);\n        translate([pos, -12, -10]) cylinder(h=3, d=6, $fn=20);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "vector",
    "openscad_code": "// Vector-style chair with frame and seat design, 100 mm tall, 2 mm wall thickness\n// All parts printable without support, decorative cut-outs create vector aesthetic\n\n$fa = 2; $fs = 0.5;\n\nmodule chair_leg(x,y) {\n    translate([x,y,0]) {\n        difference() {\n            // Outer leg square 10x10mm\n            cube([10,10,100], center=true);\n            // Hollow interior 6x6mm\n            translate([0,0,2]) cube([6,6,100], center=true);\n        }\n    }\n}\n\nmodule back_rail() {\n    difference() {\n        // Top rail 2mm thick, 50mm wide\n        translate([0,0,90]) cube([50,10,2], center=true);\n        // Vector cut-outs\n        for(i=[-20:10:20]) {\n            translate([i,0,1]) cube([6,6,2], center=true);\n        }\n    }\n}\n\nmodule side_rail() {\n    difference() {\n        // Side rail 2mm thick\n        translate([25,0,50]) rotate([0,90,0]) cube([50,10,2], center=true);\n        // Vector triangles\n        for(i=[-20:10:20]) {\n            translate([i,0,0]) rotate([90,0,0]) \n                cylinder(h=6, r1=3, r2=0, center=true);\n        }\n    }\n}\n\nmodule seat() {\n    difference() {\n        // Seat platform 50x50x2mm\n        translate([0,0,50]) cube([50,50,2], center=true);\n        // Grid pattern cut-outs\n        for(x=[-20:10:20])\n        for(y=[-20:10:20]) {\n            translate([x,y,1]) cube([6,6,2], center=true);\n        }\n    }\n}\n\nmodule back_support() {\n    difference() {\n        // Back panel 50x50x2mm\n        translate([0,20,75]) cube([50,2,50], center=true);\n        // Vertical vector slots\n        for(x=[-20:10:20]) {\n            translate([x,0,0]) cube([4,2,40], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Four legs\n    chair_leg(-20,-20);\n    chair_leg(20,-20);\n    chair_leg(-20,20);\n    chair_leg(20,20);\n    \n    // Structural rails\n    back_rail();\n    mirror([0,1,0]) back_rail();\n    side_rail();\n    mirror([1,0,0]) side_rail();\n    \n    // Seat and back\n    seat();\n    back_support();\n}",
    "renders": true
  },
  {
    "decorative_art": "dash",
    "openscad_code": "// Dash-shaped decorative shelf bracket / wall accent\n// Overall size: ~100mm wide x 55mm high x 20mm deep\n// Wall-mountable dash symbol with subtle shelf function\n\n// ----- Parameters -----\nwall_thickness = 2;        // 3D-print friendly walls\ndash_length = 100;         // total width\ndash_height = 55;          // total height\ndash_depth  = 20;          // front-to-back\nfillet_r    = 3;           // edge softening radius\nmount_hole_d= 4;           // screw clearance\nshelf_depth = 8;           // usable shelf depth\n\n// ----- Helper module for rounded ends -----\nmodule rounded_cube(size, r)\n{\n    x = size.x - 2*r;\n    y = size.y - 2*r;\n    z = size.z - 2*r;\n    translate([r,r,r])\n    hull()\n    {\n        cube([x,y,z]);\n        for(dx=[0,x], dy=[0,y], dz=[0,z])\n            translate([dx,dy,dz]) sphere(r);\n    }\n}\n\n// ----- Main dash shape -----\nmodule dash_body()\n{\n    // central bar\n    rounded_cube([dash_length, dash_height/3, dash_depth], fillet_r);\n\n    // left flare\n    translate([-dash_length/2 + 20, 0, 0])\n        rounded_cube([40, dash_height, dash_depth], fillet_r);\n\n    // right flare\n    translate([ dash_length/2 - 20, 0, 0])\n        rounded_cube([40, dash_height, dash_depth], fillet_r);\n}\n\n// ----- Shelf top surface -----\nmodule shelf_surface()\n{\n    translate([0, dash_height/2, dash_depth/2 - shelf_depth/2])\n        rounded_cube([dash_length - 12, wall_thickness, shelf_depth], fillet_r);\n}\n\n// ----- Mounting holes (keyholes) -----\nmodule keyhole()\n{\n    // keyhole: round + slot\n    union()\n    {\n        cylinder(h=wall_thickness+1, d=mount_hole_d, $fn=20);\n        translate([-mount_hole_d/2, 0, 0])\n            cube([mount_hole_d, mount_hole_d/2, wall_thickness+1]);\n    }\n}\n\nmodule mounting_holes()\n{\n    for(x=[-dash_length/2 + 15, dash_length/2 - 15])\n        translate([x, 0, -1])\n            rotate([0,180,0])\n                keyhole();\n}\n\n// ----- Decorative ribs -----\nmodule ribs()\n{\n    ribs = 6;\n    for(i=[0:ribs-1])\n    {\n        x = -dash_length/2 + 5 + i*(dash_length-10)/(ribs-1);\n        translate([x, 0, 0])\n            rounded_cube([3, dash_height - 8, wall_thickness], 1);\n    }\n}\n\n// ----- Final assembly -----\ndifference()\n{\n    union()\n    {\n        dash_body();\n        shelf_surface();\n        ribs();\n    }\n    mounting_holes();\n}",
    "renders": true
  },
  {
    "decorative_art": "vessel",
    "openscad_code": "// Vessel Furniture: Decorative Wooden Vase with Base\n// Realistic style, medium complexity\n\n// Parameters\nvase_height = 100;\nvase_top_diameter = 40;\nvase_bottom_diameter = 30;\nwall_thickness = 2;\nbase_height = 15;\nbase_width = 50;\ndetail_radius = 1.5;\n\n// Main module\nmodule decorative_vase() {\n    // Wooden base\n    difference() {\n        // Main base block\n        translate([0, 0, base_height/2])\n            cube([base_width, base_width, base_height], center=true);\n        \n        // Rounded corners\n        for(x = [-base_width/2 + detail_radius, base_width/2 - detail_radius])\n            for(y = [-base_width/2 + detail_radius, base_width/2 - detail_radius])\n                translate([x, y, 0])\n                    cylinder(h=base_height*2, r=detail_radius, center=true);\n        \n        // Center hole for vase\n        translate([0, 0, -1])\n            cylinder(h=base_height+2, r=vase_bottom_diameter/2 + wall_thickness, $fn=32);\n    }\n    \n    // Decorative grooves on base\n    for(i = [-1, 0, 1]) {\n        rotate([0, 0, i * 45])\n            translate([0, 0, base_height - 1])\n                cube([base_width * 0.8, 1, 2], center=true);\n    }\n    \n    // Vase body\n    difference() {\n        // Outer shape - curved profile\n        union() {\n            // Bottom cylinder\n            translate([0, 0, base_height + vase_bottom_diameter/2])\n                cylinder(h=vase_bottom_diameter, r=vase_bottom_diameter/2, $fn=32);\n            \n            // Main curved body using stacked cylinders\n            for(i = [0:5]) {\n                h = base_height + vase_bottom_diameter + i * (vase_height - vase_bottom_diameter)/5;\n                r = vase_bottom_diameter/2 + (vase_top_diameter/2 - vase_bottom_diameter/2) * (i/5);\n                translate([0, 0, h])\n                    cylinder(h=(vase_height - vase_bottom_diameter)/5 + 0.1, r=r, $fn=32);\n            }\n        }\n        \n        // Hollow interior\n        translate([0, 0, base_height + wall_thickness])\n            cylinder(h=vase_height - wall_thickness, r=vase_bottom_diameter/2 - wall_thickness, $fn=32);\n    }\n    \n    // Decorative rim at top\n    translate([0, 0, base_height + vase_height])\n        difference() {\n            cylinder(h=wall_thickness * 2, r=vase_top_diameter/2 + wall_thickness, $fn=32);\n            cylinder(h=wall_thickness * 2 + 1, r=vase_top_diameter/2, $fn=32);\n        }\n    \n    // Vertical decorative ridges\n    for(i = [0:7]) {\n        rotate([0, 0, i * 45])\n            translate([vase_top_diameter/2 - wall_thickness/2, 0, base_height + vase_height/2])\n                cube([wall_thickness, vase_top_diameter/4, vase_height], center=true);\n    }\n}\n\n// Render the model\ndecorative_vase();",
    "renders": true
  },
  {
    "decorative_art": "glider",
    "openscad_code": "// Glider Furniture - Realistic Style, Medium Complexity\n// Overall dimensions: ~120mm width x ~85mm depth x ~100mm height\n\n$fn = 50;  // Smooth curves\n\n// Main dimensions\nglider_width = 120;\nglider_depth = 85;\nglider_height = 100;\nseat_height = 45;\narmrest_height = 65;\nbackrest_height = 55;\n\n// Structural parameters\nframe_thickness = 3;\ncushion_thickness = 8;\nrocker_radius = 200;\n\n// Color definitions\nframe_color = \"Tan\";\ncushion_color = \"SaddleBrown\";\n\nmodule glider_chair() {\n    color(frame_color) {\n        // Rocking base frame\n        translate([0, 0, frame_thickness/2]) {\n            difference() {\n                // Main curved rocker\n                rotate([90, 0, 0]) {\n                    cylinder(h = glider_depth, r = rocker_radius, center = true);\n                }\n                // Hollow out the rocker\n                translate([0, 0, -frame_thickness]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h = glider_depth + 1, r = rocker_radius - frame_thickness, center = true);\n                    }\n                }\n            }\n        }\n        \n        // Side frames\n        for(side = [-1, 1]) {\n            translate([side * (glider_width/2 - frame_thickness), 0, seat_height/2 + frame_thickness]) {\n                cube([frame_thickness, glider_depth - 10, seat_height], center = true);\n            }\n        }\n        \n        // Back frame\n        translate([0, -glider_depth/2 + frame_thickness/2, seat_height + backrest_height/2]) {\n            cube([glider_width - 2*frame_thickness, frame_thickness, backrest_height], center = true);\n        }\n        \n        // Front frame\n        translate([0, glider_depth/2 - frame_thickness/2, seat_height/2 + frame_thickness/2]) {\n            cube([glider_width - 2*frame_thickness, frame_thickness, seat_height], center = true);\n        }\n        \n        // Armrest supports\n        for(side = [-1, 1]) {\n            translate([side * (glider_width/2 - frame_thickness - 5), glider_depth/4, armrest_height/2 + seat_height/2]) {\n                cube([frame_thickness, 10, armrest_height], center = true);\n            }\n        }\n        \n        // Armrests\n        for(side = [-1, 1]) {\n            translate([side * (glider_width/2 - 15), 0, seat_height + armrest_height]) {\n                rotate([10, 0, 0]) {\n                    cube([30, glider_depth - 20, frame_thickness], center = true);\n                }\n            }\n        }\n        \n        // Back support slats\n        for(i = [-2:1:2]) {\n            translate([i * 20, -glider_depth/2 + 10, seat_height + backrest_height/2]) {\n                cube([frame_thickness, 10, backrest_height - 10], center = true);\n            }\n        }\n    }\n    \n    // Cushions\n    color(cushion_color) {\n        // Seat cushion\n        translate([0, 0, seat_height + cushion_thickness/2]) {\n            cube([glider_width - 20, glider_depth - 20, cushion_thickness], center = true);\n        }\n        \n        // Back cushion\n        translate([0, -glider_depth/2 + 10, seat_height + backrest_height/2 + cushion_thickness/2]) {\n            rotate([10, 0, 0]) {\n                cube([glider_width - 20, cushion_thickness, backrest_height - 10], center = true);\n            }\n        }\n        \n        // Decorative cushion buttons\n        for(x = [-40:40:40]) {\n            for(y = [-20:20:20]) {\n                translate([x, y, seat_height + cushion_thickness + 1]) {\n                    cylinder(h = 2, r = 3, $fn = 20);\n                }\n            }\n        }\n    }\n    \n    // Rocking mechanism detail\n    color(\"Silver\") {\n        for(side = [-1, 1]) {\n            translate([side * (glider_width/2 - 10), 0, frame_thickness]) {\n                cylinder(h = 5, r = 3, center = true);\n            }\n        }\n    }\n}\n\nglider_chair();",
    "renders": true
  },
  {
    "decorative_art": "scorch",
    "openscad_code": "// Scorch Bench - Realistic Style, Medium Complexity\n// Decorative furniture piece inspired by scorch marks\n\n// Overall dimensions\nbench_len = 120;\nbench_width = 40;\nbench_height = 45;\nleg_thick = 4;\nslat_thick = 3;\nframe_thick = 2;\n\n// Scorch pattern module\nmodule scorch_mark(radius, depth) {\n    difference() {\n        cylinder(h = depth, r = radius, $fn = 32);\n        translate([0, 0, -0.1])\n            cylinder(h = depth + 0.2, r = radius * 0.7, $fn = 32);\n    }\n}\n\n// Bench legs with scorch details\nmodule bench_leg(x_pos, y_pos) {\n    // Main leg frame\n    translate([x_pos, y_pos, 0]) {\n        difference() {\n            cube([leg_thick, leg_thick, bench_height - slat_thick]);\n            \n            // Scorch patterns on leg\n            for(i = [5:10:bench_height-10]) {\n                translate([leg_thick/2, leg_thick/2, i])\n                    rotate([90, 0, 0])\n                        scorch_mark(2, 1);\n            }\n        }\n    }\n}\n\n// Decorative scorched slats\nmodule bench_slat(pos, len) {\n    translate([0, pos, bench_height - slat_thick]) {\n        difference() {\n            cube([len, 8, slat_thick]);\n            \n            // Scorched grooves\n            for(x = [10:10:len-10]) {\n                translate([x, 4, -0.1])\n                    cube([1, 8.2, slat_thick + 0.2]);\n            }\n        }\n        \n        // Scorch marks on edges\n        for(edge = [0, 8]) {\n            for(x = [5:15:len-5]) {\n                translate([x, edge, slat_thick/2])\n                    rotate([0, 90, 0])\n                        scorch_mark(1.5, 1);\n            }\n        }\n    }\n}\n\n// Support frame with scorch damage\nmodule support_frame() {\n    // Front frame\n    translate([-frame_thick, -frame_thick, bench_height - 15]) {\n        difference() {\n            cube([bench_len + 2*frame_thick, frame_thick, 15]);\n            \n            // Scorched areas\n            for(x = [10:20:bench_len]) {\n                translate([x, frame_thick/2, 7])\n                    rotate([90, 0, 0])\n                        scorch_mark(3, 2);\n            }\n        }\n    }\n    \n    // Side frames\n    translate([-frame_thick, 0, bench_height - 15]) {\n        difference() {\n            cube([frame_thick, bench_width, 15]);\n            \n            for(y = [5:10:bench_width-5]) {\n                translate([frame_thick/2, y, 7])\n                    rotate([90, 0, 90])\n                        scorch_mark(2.5, 1.5);\n            }\n        }\n    }\n    \n    mirror([1, 0, 0])\n        translate([-bench_len, 0, 0])\n            cube([frame_thick, bench_width, 15]);\n}\n\n// Main bench assembly\nunion() {\n    // Create four legs\n    bench_leg(10, 10);\n    bench_leg(bench_len-10, 10);\n    bench_leg(10, bench_width-10);\n    bench_leg(bench_len-10, bench_width-10);\n    \n    // Support structure\n    support_frame();\n    \n    // Bench slats\n    for(y = [15:15:bench_width-15]) {\n        bench_slat(y, bench_len - 20);\n    }\n    \n    // Backrest with scorch pattern\n    translate([-5, bench_width/2 - 5, bench_height - 5]) {\n        difference() {\n            cube([bench_len + 10, 10, 20]);\n            \n            // Scorched design\n            for(x = [10:20:bench_len]) {\n                for(z = [5:5:15]) {\n                    translate([x, 5, z])\n                        rotate([0, 90, 0])\n                            scorch_mark(2, 1.5);\n                }\n            }\n        }\n    }\n}\n\n// Add scorched decorative elements on corners\nmodule corner_detail(x, y) {\n    translate([x, y, bench_height + 10]) {\n        difference() {\n            cylinder(h = 5, r = 3, $fn = 16);\n            \n            for(angle = [0:45:315]) {\n                rotate([0, 0, angle])\n                    translate([0, 0, -0.1])\n                        cube([4, 1, 5.2]);\n            }\n        }\n    }\n}\n\ncorner_detail(10, 10);\ncorner_detail(bench_len-10, 10);\ncorner_detail(10, bench_width-10);\ncorner_detail(bench_len-10, bench_width-10);",
    "renders": true
  },
  {
    "decorative_art": "dock",
    "openscad_code": "// Dock Furniture - Medium Complexity Realistic Style\n// Wooden dock segment with furniture-like details\n\n$fn = 32;\n\n// Overall dimensions (mm)\ndock_length = 120;\ndock_width = 80;\ndock_height = 15;\n\n// Plank dimensions\nplank_width = 10;\nplank_thickness = 2;\ngap = 1;\n\n// Support beam dimensions\nbeam_width = 8;\nbeam_height = 12;\n\n// Post dimensions\npost_size = 6;\npost_height = 25;\n\n// Railing dimensions\nrail_diameter = 4;\nrail_spacing = 12;\n\nmodule dock_planks() {\n    // Create multiple planks with gaps\n    for (i = [0:floor(dock_width/(plank_width+gap))-1]) {\n        translate([(dock_length-plank_width)/2, \n                   -dock_width/2 + i*(plank_width+gap) + plank_width/2, \n                   dock_height/2])\n            cube([dock_length, plank_width, plank_thickness], center=true);\n    }\n}\n\nmodule support_beams() {\n    // Under-structure beams\n    translate([0, 0, dock_height/2 - beam_height/2 - plank_thickness/2])\n        cube([dock_length, dock_width*0.8, beam_height], center=true);\n    \n    // Cross beams\n    for (i = [-1, 1]) {\n        translate([i*dock_length/4, 0, dock_height/2 - beam_height - plank_thickness/2])\n            cube([beam_width, dock_width*0.8, beam_height], center=true);\n    }\n}\n\nmodule posts() {\n    // Corner posts\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x*dock_length/2.2, y*dock_width/2.2, post_height/2 + dock_height])\n                cube([post_size, post_size, post_height], center=true);\n        }\n    }\n}\n\nmodule railings() {\n    // Top rail\n    translate([0, 0, dock_height + post_height - rail_diameter/2])\n        cube([dock_length*1.1, rail_diameter, rail_diameter], center=true);\n    \n    // Vertical rails\n    rail_count = floor(dock_length/rail_spacing);\n    for (i = [-rail_count/2:rail_count/2]) {\n        if (abs(i) > 0.5) {\n            translate([i*rail_spacing, 0, dock_height + post_height/2])\n                cylinder(h=post_height, d=rail_diameter/2, center=true);\n        }\n    }\n}\n\nmodule decorative_elements() {\n    // Ornamental post caps\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x*dock_length/2.2, y*dock_width/2.2, dock_height + post_height + 3])\n                cylinder(h=3, d1=post_size*1.2, d2=post_size*0.8, center=false);\n        }\n    }\n    \n    // Center medallion\n    translate([0, 0, dock_height + 1])\n        difference() {\n            cylinder(h=2, d=20, center=true);\n            cylinder(h=3, d=12, center=true);\n        }\n}\n\nmodule dock_furniture() {\n    union() {\n        // Main structure\n        dock_planks();\n        support_beams();\n        posts();\n        \n        // Furniture elements\n        railings();\n        decorative_elements();\n        \n        // Side bench\n        translate([0, dock_width/2 - plank_width, dock_height + 2])\n            cube([dock_length*0.6, plank_width*2, 8], center=true);\n        \n        // Bench support\n        translate([0, dock_width/2 - plank_width, dock_height + 2 - 4])\n            cube([dock_length*0.6, 4, 4], center=true);\n    }\n}\n\n// Render the dock furniture\ndock_furniture();",
    "renders": true
  },
  {
    "decorative_art": "rotor",
    "openscad_code": "// Rotor Furniture - Decorative Side Table\n// Realistic style, medium complexity\n// Overall dimensions: 120mm diameter, 450mm height\n\n$fn = 50;\n\n// Main module for the rotor table\nmodule rotor_table() {\n    // Base foundation\n    base();\n    \n    // Central shaft\n    central_shaft();\n    \n    // Rotor blades as table supports\n    rotor_blades();\n    \n    // Table top\n    table_top();\n    \n    // Decorative elements\n    decorative_rings();\n}\n\n// Base foundation - weighted bottom\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = 30, d1 = 80, d2 = 90, center = true);\n        \n        // Hollow center for weight reduction\n        translate([0, 0, 5])\n            cylinder(h = 40, d = 40, center = true);\n    }\n}\n\n// Central shaft structure\nmodule central_shaft() {\n    translate([0, 0, 30])\n    union() {\n        // Main shaft tube\n        difference() {\n            cylinder(h = 380, d = 30, center = true);\n            cylinder(h = 385, d = 26, center = true);\n        }\n        \n        // Shaft collar at bottom\n        translate([0, 0, -190])\n            cylinder(h = 10, d = 40, center = true);\n    }\n}\n\n// Rotor blades as structural supports\nmodule rotor_blades() {\n    // Create 3 blades spaced 120 degrees apart\n    for (i = [0:120:359]) {\n        rotate([0, 0, i]) {\n            translate([0, 0, 100])\n            rotor_blade();\n        }\n    }\n}\n\n// Individual rotor blade\nmodule rotor_blade() {\n    union() {\n        // Main blade body\n        translate([50, 0, 0])\n            rotate([90, 0, 0])\n                scale([1, 0.3, 1])\n                    cylinder(h = 100, d = 8, center = true);\n        \n        // Blade root connection\n        translate([0, 0, 0])\n            rotate([90, 0, 0])\n                scale([0.8, 0.8, 0.8])\n                    cylinder(h = 20, d = 12, center = true);\n        \n        // Support strut\n        translate([35, 0, -25])\n            rotate([45, 0, 90])\n                cylinder(h = 35, d = 6, center = true);\n    }\n}\n\n// Table top\nmodule table_top() {\n    translate([0, 0, 400])\n    difference() {\n        // Main table surface\n        cylinder(h = 20, d = 120, center = true);\n        \n        // Edge detail groove\n        translate([0, 0, 5])\n            cylinder(h = 15, d = 110, center = true);\n        \n        // Central hole for shaft\n        translate([0, 0, -15])\n            cylinder(h = 50, d = 32, center = true);\n    }\n}\n\n// Decorative rings and details\nmodule decorative_rings() {\n    // Upper decorative ring\n    translate([0, 0, 380])\n    difference() {\n        cylinder(h = 8, d = 60, center = true);\n        cylinder(h = 10, d = 34, center = true);\n    }\n    \n    // Mid decorative ring\n    translate([0, 0, 250])\n    difference() {\n        cylinder(h = 6, d = 50, center = true);\n        cylinder(h = 8, d = 34, center = true);\n    }\n    \n    // Lower decorative ring\n    translate([0, 0, 120])\n    difference() {\n        cylinder(h = 5, d = 45, center = true);\n        cylinder(h = 7, d = 34, center = true);\n    }\n}\n\n// Generate the complete model\nrotor_table();",
    "renders": true
  },
  {
    "decorative_art": "haul",
    "openscad_code": "// Realistic Haul Chest – 3D-printable\n// Overall size: 100 x 60 x 45 mm (fits most printers)\n\n// Parameters\nwall = 2;             // Shell thickness for 3D printing\nbody_l = 100;         // Length\nbody_w = 60;          // Width\nbody_h = 35;          // Height of main body\nlid_h = 10;           // Lid thickness\nhandle_r = 4;         // Handle bar radius\nhandle_w = 45;        // Handle width\nhandle_clear = 3;     // Clearance above lid\nbase_h = 5;           // Skirt/base height\nscrew_d = 3;          // Decorative screw head diameter\nscrew_h = 1;          // Screw protrusion\n\n// Main body shell\nmodule body_shell() {\n    difference() {\n        // Outer block\n        cube([body_l, body_w, body_h], center=true);\n        // Inner cavity\n        translate([0,0, wall/2])\n            cube([body_l-2*wall, body_w-2*wall, body_h-wall], center=true);\n    }\n}\n\n// Horizontal handle bar on lid\nmodule handle_bar() {\n    translate([0, 0, body_h/2 + lid_h + handle_clear + handle_r])\n        rotate([90,0,0])\n            cylinder(h=handle_w, r=handle_r, center=true);\n}\n\n// Simple domed lid\nmodule lid() {\n    difference() {\n        union() {\n            // Flat lid block\n            translate([0,0, body_h/2 + lid_h/2])\n                cube([body_l, body_w, lid_h], center=true);\n            // Gentle dome on top\n            scale([1, 0.6, 1])\n                translate([0, 0, body_h/2 + lid_h + 5])\n                    sphere(d=body_w*0.9, $fn=60);\n        }\n        // Hollow underside\n        translate([0,0, body_h/2 + lid_h - wall/2])\n            cube([body_l-2*wall, body_w-2*wall, lid_h], center=true);\n    }\n}\n\n// Recessed base/skirt\nmodule base_skirt() {\n    difference() {\n        // Skirt\n        translate([0,0, -body_h/2 - base_h/2])\n            cube([body_l, body_w, base_h], center=true);\n        // Recess inside\n        translate([0,0, -body_h/2 - base_h/2])\n            cube([body_l-2*wall, body_w-2*wall, base_h+0.01], center=true);\n    }\n}\n\n// Decorative screws at corners\nmodule screws() {\n    for (dx=[-1,1], dy=[-1,1]) {\n        translate([dx*(body_l/2 - 6), dy*(body_w/2 - 6), -body_h/2 - base_h/2 - 0.01])\n            cylinder(h=screw_h+0.01, d=screw_d, $fn=12);\n    }\n}\n\n// Assembly\nunion() {\n    color(\"BurlyWood\") {\n        base_skirt();\n        body_shell();\n        lid();\n    }\n    color(\"SaddleBrown\") {\n        handle_bar();\n        screws();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "fleet",
    "openscad_code": "// Fleet Chair - Realistic Style, Medium Complexity\n// A recognizable office-style chair with rolling base and adjustable features\n\n$fn = 50; // Smooth curves for realistic appearance\n\n// Overall dimensions\nchair_height = 120;\nseat_height = 45;\nseat_width = 50;\nseat_depth = 50;\nback_height = 75;\n\n// Main chair assembly\nmodule fleet_chair() {\n    // Rolling base\n    translate([0, 0, 0]) rolling_base();\n    \n    // Gas lift cylinder\n    translate([0, 0, 20]) gas_lift();\n    \n    // Seat mechanism\n    translate([0, 0, 45]) seat_mechanism();\n    \n    // Seat cushion\n    translate([0, 0, 48]) seat_cushion();\n    \n    // Backrest\n    translate([0, -seat_depth/2 + 5, 48 + back_height/2]) backrest();\n    \n    // Armrests\n    translate([-seat_width/2 - 5, 0, 65]) armrest(true);\n    translate([seat_width/2 + 5, 0, 65]) armrest(false);\n}\n\n// Rolling base with 5 casters\nmodule rolling_base() {\n    // Central hub\n    cylinder(h=15, r=20);\n    \n    // Star base legs\n    for(i = [0:4]) {\n        rotate([0, 0, i * 72]) {\n            translate([0, 0, 7.5]) {\n                // Leg\n                cube([45, 10, 15], center=true);\n                \n                // Caster wheel\n                translate([45/2 + 10, 0, -7.5]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=8, r=8);\n                        sphere(r=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Gas lift cylinder\nmodule gas_lift() {\n    // Outer cylinder\n    cylinder(h=25, r=6);\n    \n    // Inner cylinder detail\n    translate([0, 0, 25]) {\n        cylinder(h=5, r=4);\n    }\n}\n\n// Seat adjustment mechanism\nmodule seat_mechanism() {\n    // Main plate\n    cube([40, 40, 5], center=true);\n    \n    // Control lever\n    translate([20, 0, 2.5]) {\n        rotate([0, -30, 0]) {\n            cylinder(h=15, r=2);\n        }\n    }\n}\n\n// Seat cushion with realistic padding\nmodule seat_cushion() {\n    // Base\n    cube([seat_width, seat_depth, 10], center=true);\n    \n    // Rounded top surface\n    translate([0, 0, 5]) {\n        scale([seat_width/2, seat_depth/2, 5]) {\n            sphere(r=1);\n        }\n    }\n    \n    // Ventilation holes pattern\n    for(x = [-20:10:20]) {\n        for(y = [-20:10:20]) {\n            translate([x, y, 5]) {\n                cylinder(h=10, r=1.5, $fn=6);\n            }\n        }\n    }\n}\n\n// Backrest with lumbar support\nmodule backrest() {\n    // Main frame\n    cube([seat_width, 8, back_height], center=true);\n    \n    // Lumbar curve\n    translate([0, 0, -back_height/4]) {\n        scale([seat_width - 5, 8, back_height/2]) {\n            sphere(r=1);\n        }\n    }\n    \n    // Mesh pattern\n    for(x = [-20:5:20]) {\n        for(z = [-30:5:30]) {\n            translate([x, 0, z]) {\n                cube([1, 9, 1]);\n            }\n        }\n    }\n    \n    // Headrest support\n    translate([0, -4, back_height/2 + 10]) {\n        cube([30, 8, 20], center=true);\n    }\n}\n\n// Armrest with adjustment mechanism\nmodule armrest(left=true) {\n    // Vertical post\n    cylinder(h=20, r=2);\n    \n    // Horizontal support\n    translate([0, 0, 20]) {\n        rotate([90, 0, left ? 20 : -20]) {\n            cylinder(h=25, r=2);\n        }\n    }\n    \n    // Arm pad\n    translate([0, left ? 15 : -15, 20]) {\n        rotate([0, 0, left ? 20 : -20]) {\n            cube([25, 8, 2], center=true);\n        }\n    }\n}\n\n// Generate the chair\nfleet_chair();",
    "renders": true
  },
  {
    "decorative_art": "surge",
    "openscad_code": "// Surge furniture - decorative wave shelf unit\n// Dimensions: 120mm wide x 80mm deep x 100mm tall\n\nmodule shelf_wave(height, width, depth, thickness) {\n    // Create wave-shaped shelf\n    difference() {\n        union() {\n            // Main shelf body\n            translate([0, 0, height/2])\n                cube([width, depth, thickness], center=true);\n            \n            // Front wave decoration\n            for (i = [-width/2+5:10:width/2-5]) {\n                translate([i, depth/2, height])\n                    cylinder(h=thickness*2, d=8, $fn=20);\n            }\n        }\n        \n        // Cut wave pattern into shelf\n        for (i = [-width/2+10:20:width/2-10]) {\n            translate([i, 0, height])\n                rotate([90, 0, 0])\n                    cylinder(h=depth+2, d=6, $fn=20);\n        }\n    }\n}\n\nmodule support_leg(height, width, depth) {\n    // Tapered support leg\n    translate([width/2-5, 0, height/2])\n        cylinder(h=height, d1=8, d2=6, center=false, $fn=12);\n}\n\nmodule back_panel(width, height, thickness) {\n    // Decorative back panel with surge pattern\n    translate([0, -40, height/2])\n        cube([width, thickness, height], center=true);\n    \n    // Surge wave cutouts\n    for (y = [10:15:height-10]) {\n        for (x = [-width/2+10:20:width/2-10]) {\n            translate([x, -40, y])\n                rotate([0, 90, 0])\n                    cylinder(h=thickness+1, d=8, $fn=3);\n        }\n    }\n}\n\nmodule base_frame(width, depth) {\n    // Main supporting frame\n    difference() {\n        // Outer frame\n        translate([0, 0, 5])\n            cube([width+4, depth+4, 10], center=true);\n        \n        // Inner cutout\n        translate([0, 0, 5])\n            cube([width-4, depth-4, 12], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base frame\n    base_frame(120, 80);\n    \n    // Back panel\n    back_panel(120, 100, 4);\n    \n    // Support legs\n    support_leg(100, 120, 80);\n    mirror([1, 0, 0])\n        support_leg(100, 120, 80);\n    \n    // Shelves\n    shelf_wave(20, 110, 70, 3);\n    shelf_wave(50, 110, 70, 3);\n    shelf_wave(80, 110, 70, 3);\n    \n    // Decorative surge elements\n    for (x = [-50:25:50]) {\n        translate([x, 40, 95])\n            rotate([45, 0, 0])\n                cylinder(h=15, d1=4, d2=8, $fn=8);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "traction",
    "openscad_code": "// Traction Coffee Table - Realistic Style, Medium Complexity\n// 3D printable with 2mm walls and no overhangs\n\n$fn = 32;\n\n// Overall dimensions\ntable_width = 120;\ntable_depth = 70;\ntable_height = 45;\nleg_height = 40;\ntop_thickness = 5;\n\n// Vertical slat details\nslat_width = 8;\nslat_gap = 6;\nnum_slats = 8;\n\n// Lower shelf details\nshelf_thickness = 3;\nshelf_clearance = 10;\n\n// Decorative metal rod details\nrod_radius = 2;\nrod_spacing = 15;\n\n// Chamfer helper\nmodule chamfered_cube(size, chamfer) {\n    hull() {\n        translate([chamfer, chamfer, 0])\n            cube([size.x - 2*chamfer, size.y - 2*chamfer, size.z]);\n        translate([0, 0, chamfer])\n            cube([size.x, size.y, size.z - 2*chamfer]);\n    }\n}\n\n// Single table leg\nmodule table_leg() {\n    difference() {\n        // Main leg body\n        chamfered_cube([6, 6, leg_height], 1);\n        \n        // Interior hollow for 2mm walls\n        translate([2, 2, 2])\n            cube([2, 2, leg_height - 4]);\n    }\n}\n\n// Vertical slat for side panels\nmodule vertical_slat() {\n    difference() {\n        // Slat body\n        cube([slat_width, 3, leg_height - shelf_clearance - shelf_thickness]);\n        \n        // Hollow interior\n        translate([2, 1, 2])\n            cube([slat_width - 4, 1, leg_height - shelf_clearance - shelf_thickness - 4]);\n    }\n}\n\n// Decorative metal rod\nmodule metal_rod() {\n    rotate([90, 0, 0])\n        cylinder(h = table_depth - 12, r = rod_radius);\n}\n\n// Side panel assembly\nmodule side_panel() {\n    // Frame top\n    translate([0, 0, leg_height - shelf_clearance - shelf_thickness])\n        cube([(slat_width + slat_gap) * num_slats - slat_gap, 3, 3]);\n    \n    // Frame bottom\n    translate([0, 0, 0])\n        cube([(slat_width + slat_gap) * num_slats - slat_gap, 3, 3]);\n    \n    // Vertical slats\n    for (i = [0 : num_slats - 1]) {\n        translate([i * (slat_width + slat_gap), 0, 3])\n            vertical_slat();\n    }\n    \n    // Decorative rods\n    for (i = [1 : 3]) {\n        translate([i * rod_spacing, 1.5, leg_height/2])\n            metal_rod();\n    }\n}\n\n// Main table assembly\nmodule coffee_table() {\n    // Table top\n    difference() {\n        // Main top\n        translate([-table_width/2, -table_depth/2, leg_height])\n            chamfered_cube([table_width, table_depth, top_thickness], 2);\n        \n        // Underside hollow\n        translate([-table_width/2 + 4, -table_depth/2 + 4, leg_height + 2])\n            cube([table_width - 8, table_depth - 8, top_thickness - 2]);\n    }\n    \n    // Lower shelf\n    translate([-table_width/2 + 10, -table_depth/2 + 10, shelf_clearance])\n        difference() {\n            cube([table_width - 20, table_depth - 20, shelf_thickness]);\n            translate([2, 2, 2])\n                cube([table_width - 24, table_depth - 24, shelf_thickness - 2]);\n        }\n    \n    // Four legs\n    translate([table_width/2 - 5, table_depth/2 - 5, 0])\n        table_leg();\n    translate([-table_width/2 + 5, table_depth/2 - 5, 0])\n        table_leg();\n    translate([table_width/2 - 5, -table_depth/2 + 5, 0])\n        table_leg();\n    translate([-table_width/2 + 5, -table_depth/2 + 5, 0])\n        table_leg();\n    \n    // Side panels\n    translate([-table_width/2 + 8, -table_depth/2 + 3, shelf_clearance + shelf_thickness])\n        rotate([0, 0, 0])\n            side_panel();\n    translate([-table_width/2 + 8, table_depth/2 - 6, shelf_clearance + shelf_thickness])\n        rotate([0, 0, 0])\n            side_panel();\n}\n\n// Render the table\ncoffee_table();",
    "renders": true
  },
  {
    "decorative_art": "wing",
    "openscad_code": "// Wing Wall Shelf - Realistic Style, Medium Complexity\n// Decorative wall-mounted shelf shaped like a feathered wing\n\n// Overall dimensions\nwing_length = 120;\nwing_height = 60;\nwing_thickness = 25;\nfeather_count = 8;\n\n// Wall mounting bracket\nmodule mounting_bracket() {\n    // Main bracket plate\n    translate([0, wing_height/2 - 5, wing_thickness/2 - 2]) {\n        difference() {\n            cube([40, 10, 4], center = true);\n            // Screw holes\n            for (x = [-15, 15]) {\n                translate([x, 0, 2]) {\n                    cylinder(h = 5, r = 2.5, $fn = 20);\n                }\n            }\n        }\n    }\n}\n\n// Individual feather module\nmodule feather(length, width, angle, z_offset) {\n    translate([0, 0, z_offset]) {\n        rotate([0, 0, angle]) {\n            // Feather shaft\n            translate([0, 0, 0]) {\n                cube([length * 0.1, width * 0.3, 2], center = true);\n            }\n            \n            // Feather vane - left side\n            translate([-length * 0.25, 0, 0]) {\n                rotate([0, 0, -5]) {\n                    scale([length * 0.4, width * 0.7, 1]) {\n                        cube([1, 1, 2], center = true);\n                    }\n                }\n            }\n            \n            // Feather vane - right side\n            translate([length * 0.25, 0, 0]) {\n                rotate([0, 0, 5]) {\n                    scale([length * 0.4, width * 0.7, 1]) {\n                        cube([1, 1, 2], center = true);\n                    }\n                }\n            }\n            \n            // Feather tip\n            translate([length/2 - 2, 0, 0]) {\n                scale([1, 1, 2]) {\n                    rotate([0, 90, 0]) {\n                        cylinder(h = 1, r1 = width/2, r2 = 1, $fn = 8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Wing frame structure\nmodule wing_frame() {\n    // Main wing body\n    difference() {\n        // Outer shell\n        hull() {\n            // Upper curve\n            translate([-wing_length/2 + 10, wing_height/2 - 10, 0]) {\n                cylinder(h = wing_thickness, r = 10, $fn = 20);\n            }\n            \n            // Lower curve\n            translate([-wing_length/2 + 10, -wing_height/2 + 10, 0]) {\n                cylinder(h = wing_thickness, r = 10, $fn = 20);\n            }\n            \n            // Tip\n            translate([wing_length/2 - 5, 0, 0]) {\n                cylinder(h = wing_thickness, r = 8, $fn = 20);\n            }\n            \n            // Root\n            translate([-wing_length/2 + 5, 0, 0]) {\n                cylinder(h = wing_thickness, r = 15, $fn = 20);\n            }\n        }\n        \n        // Hollow interior for 3D printing\n        scale([0.8, 0.8, 0.85]) {\n            hull() {\n                translate([-wing_length/2 + 10, wing_height/2 - 10, 0]) {\n                    cylinder(h = wing_thickness, r = 8, $fn = 20);\n                }\n                \n                translate([-wing_length/2 + 10, -wing_height/2 + 10, 0]) {\n                    cylinder(h = wing_thickness, r = 8, $fn = 20);\n                }\n                \n                translate([wing_length/2 - 5, 0, 0]) {\n                    cylinder(h = wing_thickness, r = 6, $fn = 20);\n                }\n                \n                translate([-wing_length/2 + 5, 0, 0]) {\n                    cylinder(h = wing_thickness, r = 12, $fn = 20);\n                }\n            }\n        }\n    }\n}\n\n// Shelf surface\nmodule shelf_surface() {\n    // Main shelf\n    difference() {\n        translate([0, 0, wing_thickness/2 - 1]) {\n            scale([0.9, 0.85, 1]) {\n                cube([wing_length - 10, wing_height - 10, 2], center = true);\n            }\n        }\n        \n        // Drainage holes for 3D printing\n        for (i = [1:feather_count - 1]) {\n            angle = (i - feather_count/2) * 8;\n            x_pos = (i - feather_count/2) * wing_length/(feather_count * 1.5);\n            y_pos = sin(angle) * wing_height/3;\n            translate([x_pos, y_pos, wing_thickness/2]) {\n                cylinder(h = 3, r = 3, $fn = 8);\n            }\n        }\n    }\n}\n\n// Decorative quill details\nmodule quill_details() {\n    // Central ridge\n    translate([0, 0, 0]) {\n        for (i = [0:feather_count - 1]) {\n            x_pos = (i - feather_count/2) * wing_length/(feather_count * 2);\n            y_pos = (i - feather_count/2) * 3;\n            translate([x_pos, y_pos, wing_thickness/2]) {\n                rotate([0, 0, (i - feather_count/2) * 3]) {\n                    cube([wing_length/15, 2, wing_thickness], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main wing structure\n    wing_frame();\n    \n    // Shelf surface\n    shelf_surface();\n    \n    // Feathers\n    for (i = [0:feather_count - 1]) {\n        feather_length = wing_length * (0.7 - i * 0.05);\n        feather_width = wing_height * 0.15;\n        angle = (i - feather_count/2) * 12;\n        z_offset = wing_thickness/2 - 3;\n        feather(feather_length, feather_width, angle, z_offset);\n    }\n    \n    // Quill details\n    quill_details();\n    \n    // Mounting bracket\n    mounting_bracket();\n}",
    "renders": true
  },
  {
    "decorative_art": "launch",
    "openscad_code": "// Launch furniture art piece\n// A stylized rocket ship as decorative furniture element\n\n// Overall dimensions\nlength = 120;\nwidth = 45;\nheight = 150;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule rocket_body() {\n    // Main rocket body - cylindrical\n    cylinder(h=length/2, r1=width/2, r2=width/2.5);\n    \n    // Nose cone\n    translate([0,0,length/2]) \n        cylinder(h=length/3, r1=width/2.5, r2=0);\n}\n\nmodule fins(count=4) {\n    // Rocket fins with structural supports\n    for(i=[0:count-1]) {\n        rotate([0,0,i*360/count]) {\n            translate([width/2-1.5, -width/8, -length/4])\n                cube([width/3, width/4, length/2]);\n            \n            // Support strut\n            translate([width/2+width/6-1.5, 0, -length/4+length/8])\n                rotate([30,0,0])\n                    cylinder(h=length/4, r=wall);\n        }\n    }\n}\n\nmodule engine_section() {\n    // Engine cluster\n    translate([0,0,-length/4]) {\n        // Main engine bell\n        cylinder(h=length/6, r1=width/3, r2=width/4);\n        \n        // Smaller vernier engines\n        for(i=[0:3]) {\n            rotate([0,0,i*90]) {\n                translate([width/3-1, 0, 0])\n                    cylinder(h=length/8, r1=width/8, r2=width/10);\n            }\n        }\n    }\n}\n\nmodule launch_pad() {\n    // Launch pad base\n    translate([0,0,-length/3]) {\n        difference() {\n            cylinder(h=length/12, r=width);\n            cylinder(h=length/12+1, r=width-wall);\n        }\n        \n        // Support arms\n        for(i=[0:3]) {\n            rotate([0,0,i*90]) {\n                translate([width-wall, -wall/2, 0])\n                    cube([width/2, wall, length/8]);\n            }\n        }\n    }\n}\n\nmodule payload_bay() {\n    // Payload section with window details\n    translate([0,0,length/4]) {\n        // Main bay\n        cylinder(h=length/6, r1=width/2.5, r2=width/2.5);\n        \n        // Windows\n        for(i=[0:5]) {\n            rotate([0,0,i*60]) {\n                translate([width/2.5-wall/2, 0, length/12])\n                    rotate([90,0,0])\n                        cylinder(h=wall, r=wall*2);\n            }\n        }\n    }\n}\n\nmodule structural_details() {\n    // Interstage connectors\n    translate([0,0,length/3]) {\n        cylinder(h=wall, r=width/2.5);\n    }\n    \n    translate([0,0,length/2+length/3]) {\n        cylinder(h=wall, r=width/3);\n    }\n    \n    // Fuel line details\n    for(i=[0:3]) {\n        rotate([0,0,i*90]) {\n            translate([width/2.5, 0, 0])\n                rotate([0,90,0])\n                    cylinder(h=length/2, r=wall/2);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    rocket_body();\n    fins();\n    engine_section();\n    payload_bay();\n    structural_details();\n    launch_pad();\n}",
    "renders": true
  },
  {
    "decorative_art": "titan",
    "openscad_code": "// Titan Throne - Medium Complexity Realistic Style\n// Overall dimensions: 100mm wide x 90mm deep x 120mm tall\n// Wall thickness: 2mm throughout for 3D printing\n\n$fn = 32;\n\nmodule throne_base() {\n    // Main base platform\n    difference() {\n        cube([100, 90, 8], center=true);\n        translate([0, 0, -0.5])\n            cube([96, 86, 9], center=true);\n    }\n    \n    // Decorative trim around base\n    for(i = [1:4]) {\n        rotate([0, 0, i*90])\n            translate([40, 40, 4])\n                cylinder(h=8, r1=4, r2=2);\n    }\n}\n\nmodule seat_back() {\n    // Main backrest panel\n    difference() {\n        cube([80, 8, 60], center=true);\n        translate([0, 0, 10])\n            cube([76, 12, 56], center=true);\n    }\n    \n    // Decorative titan face pattern\n    translate([0, 4.5, 20])\n        difference() {\n            cube([40, 2, 30], center=true);\n            // Eye sockets\n            translate([-12, 0, 8])\n                sphere(r=4);\n            translate([12, 0, 8])\n                sphere(r=4);\n            // Mouth line\n            translate([0, 0, -8])\n                cube([20, 2, 4], center=true);\n        }\n}\n\nmodule armrest() {\n    // Armrest structure\n    difference() {\n        cube([12, 45, 30], center=true);\n        translate([0, 0, 15])\n            cube([8, 41, 28], center=true);\n    }\n    \n    // Support pillar\n    translate([0, 18, -10])\n        cylinder(h=20, r=5);\n}\n\nmodule seat_cushion() {\n    // Seat surface with ergonomic curve\n    difference() {\n        translate([0, 0, 12])\n            cube([70, 60, 15], center=true);\n        translate([0, 0, 10])\n            sphere(r=45);\n    }\n    \n    // Support beams underneath\n    for(x = [-25, 0, 25]) {\n        translate([x, 0, 4])\n            cube([6, 50, 6], center=true);\n    }\n}\n\nmodule leg_support() {\n    // Front legs with titan motif\n    translate([30, -35, -25])\n        difference() {\n            cylinder(h=50, r=6);\n            translate([0, 0, 2])\n                cylinder(h=46, r=4);\n        }\n    \n    translate([-30, -35, -25])\n        difference() {\n            cylinder(h=50, r=6);\n            translate([0, 0, 2])\n                cylinder(h=46, r=4);\n        }\n    \n    // Rear legs\n    translate([30, 35, -25])\n        cylinder(h=50, r=5);\n    \n    translate([-30, 35, -25])\n        cylinder(h=50, r=5);\n}\n\nmodule decorative_details() {\n    // Side panels with titan patterns\n    for(side = [-1, 1]) {\n        translate([side*45, 0, 30])\n            difference() {\n                cube([8, 80, 50], center=true);\n                // Cutout pattern\n                for(i = [0:3]) {\n                    translate([0, -30 + i*20, 5])\n                        sphere(r=8);\n                }\n            }\n    }\n    \n    // Top crest\n    translate([0, 0, 70])\n        difference() {\n            cube([60, 6, 15], center=true);\n            translate([0, 0, 5])\n                sphere(r=35);\n        }\n}\n\n// Assembly\nunion() {\n    throne_base();\n    translate([0, -30, 0])\n        seat_back();\n    translate([0, 0, 0])\n        seat_cushion();\n    translate([40, 0, 27])\n        armrest();\n    translate([-40, 0, 27])\n        mirror([1, 0, 0])\n            armrest();\n    leg_support();\n    decorative_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "rudderless",
    "openscad_code": "// Rudderless Decorative Shelf Unit - Realistic Style\n// Wall-mounted shelf inspired by ship rudder aesthetics\n// 3D printable with 2mm walls and no overhangs\n\nmodule shelf_unit() {\n    // Main body - rudder-inspired shape\n    difference() {\n        // Outer shell\n        linear_extrude(height=8) {\n            polygon(points=[\n                [0, 0], [5, 0], [10, 5], [20, 10], [35, 15],\n                [40, 25], [42, 40], [40, 55], [35, 65],\n                [20, 70], [10, 75], [5, 80], [0, 80],\n                [-5, 75], [-10, 70], [-20, 65], [-35, 55],\n                [-40, 40], [-38, 25], [-30, 15], [-20, 10],\n                [-10, 5], [-5, 0]\n            ]);\n        }\n        \n        // Inner cutout\n        translate([0, 40, 2])\n        linear_extrude(height=8) {\n            polygon(points=[\n                [0, -30], [5, -28], [12, -20], [15, -5],\n                [15, 5], [12, 20], [5, 28], [0, 30],\n                [-5, 28], [-12, 20], [-15, 5], [-15, -5],\n                [-12, -20], [-5, -28]\n            ]);\n        }\n    }\n    \n    // Top shelf\n    translate([0, 65, 8])\n    cube([36, 30, 2], center=true);\n    \n    // Bottom shelf\n    translate([0, 15, 8])\n    cube([36, 30, 2], center=true);\n    \n    // Middle shelf\n    translate([0, 40, 8])\n    cube([30, 24, 2], center=true);\n    \n    // Decorative frame elements\n    for(y = [15, 40, 65]) {\n        // Front frame\n        translate([18, y, 8])\n        cube([2, 30, 6]);\n        translate([-18, y, 8])\n        cube([2, 30, 6]);\n        \n        // Side frame\n        translate([0, y-15, 8])\n        cube([40, 2, 6]);\n        translate([0, y+15, 8])\n        cube([40, 2, 6]);\n    }\n    \n    // Reinforcement ribs\n    for(y = [25, 40, 55]) {\n        translate([0, y, 4])\n        cube([38, 2, 8], center=true);\n    }\n    \n    // Mounting holes (2mm diameter)\n    translate([0, 5, 4])\n    cylinder(h=10, d=2, center=true);\n    translate([0, 75, 4])\n    cylinder(h=10, d=2, center=true);\n    \n    // Decorative circles\n    for(y = [25, 40, 55]) {\n        translate([0, y, 2])\n        cylinder(h=2, d=8);\n    }\n}\n\n// Scale to 80mm height\nscale(80/80)\nshelf_unit();",
    "renders": true
  },
  {
    "decorative_art": "forge",
    "openscad_code": "// Forge Furniture - Realistic Style, Medium Complexity\n// A decorative forge designed as a furniture piece (table centerpiece or display model)\n\n// Overall dimensions (mm)\nforge_length = 100;\nforge_width = 60;\nforge_height = 45;\n\n// Wall thickness for 3D printing\nwall_thick = 2;\n\n// Main forge body\nmodule forge_body() {\n    difference() {\n        // Outer shell\n        cube([forge_length, forge_width, forge_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thick/2])\n            cube([forge_length-wall_thick*2, forge_width-wall_thick*2, forge_height-wall_thick], center=true);\n    }\n}\n\n// Forge opening with arch\nmodule forge_opening() {\n    arch_height = 25;\n    arch_width = 35;\n    \n    difference() {\n        // Front face\n        translate([0, forge_width/2, 0])\n            cube([forge_length, wall_thick, forge_height], center=true);\n        \n        // Arch opening\n        translate([0, forge_width/2 - wall_thick/2, -forge_height/2 + arch_height/2])\n            union() {\n                // Rectangular base of arch\n                cube([arch_width, wall_thick+1, arch_height-10], center=true);\n                \n                // Curved top\n                translate([0, 0, arch_height/2 - 5])\n                    scale([1, 0.1, 1])\n                    cylinder(h=wall_thick+1, r=arch_width/2, center=true, $fn=30);\n            }\n    }\n}\n\n// Chimney stack\nmodule chimney() {\n    chimney_w = 20;\n    chimney_h = 30;\n    \n    translate([0, -forge_width/4, forge_height/2 + chimney_h/2])\n        difference() {\n            // Outer chimney\n            cube([chimney_w, chimney_w, chimney_h], center=true);\n            \n            // Hollow interior\n            translate([0, 0, wall_thick/2])\n                cube([chimney_w-wall_thick*2, chimney_w-wall_thick*2, chimney_h-wall_thick], center=true);\n        }\n}\n\n// Decorative iron bands\nmodule iron_bands() {\n    band_height = 3;\n    band_offset = 8;\n    \n    for (z = [-forge_height/2 + 10, 0, forge_height/2 - 10]) {\n        translate([0, 0, z])\n            cube([forge_length + 2, forge_width + 2, band_height], center=true);\n    }\n}\n\n// Forge legs\nmodule legs() {\n    leg_size = 4;\n    leg_height = 15;\n    \n    for (x = [-forge_length/2 + 10, forge_length/2 - 10])\n        for (y = [-forge_width/2 + 10, forge_width/2 - 10]) {\n            translate([x, y, -forge_height/2 - leg_height/2])\n                cube([leg_size, leg_size, leg_height], center=true);\n        }\n}\n\n// Coal bed detail\nmodule coal_bed() {\n    coal_height = 5;\n    \n    translate([0, 0, -forge_height/2 + coal_height/2 + 2])\n        cube([forge_length - 20, forge_width - 20, coal_height], center=true);\n}\n\n// Decorative rivets\nmodule rivets() {\n    rivet_r = 1.5;\n    rivet_h = 2;\n    \n    // Rivets along bands\n    for (x = [-forge_length/2 + 15 : 20 : forge_length/2 - 15]) {\n        for (z = [-forge_height/2 + 11, 1, forge_height/2 - 9]) {\n            translate([x, forge_width/2 + 1, z])\n                cylinder(h=rivet_h, r=rivet_r, center=true, $fn=8);\n            translate([x, -forge_width/2 - 1, z])\n                cylinder(h=rivet_h, r=rivet_r, center=true, $fn=8);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    forge_body();\n    \n    // Front opening\n    forge_opening();\n    \n    // Chimney\n    chimney();\n    \n    // Iron bands\n    iron_bands();\n    \n    // Legs\n    legs();\n    \n    // Coal bed\n    coal_bed();\n    \n    // Rivets\n    rivets();\n}",
    "renders": true
  },
  {
    "decorative_art": "blitz",
    "openscad_code": "// Blitz Furniture - Decorative Side Table\n// Realistic style with medium complexity\n// Overall size: ~100mm x 100mm x 120mm\n\n// Main dimensions\ntable_top_d = 100;\ntable_top_h = 8;\nleg_d = 12;\nleg_h = 80;\nbrace_h = 15;\nshelf_d = 70;\n\n// Wall thickness for 3D printing\nwall_t = 2;\n\n// Module for rounded rectangle (table top)\nmodule rounded_top(w, d, h, r) {\n    difference() {\n        // Main top\n        cube([w, d, h], center=true);\n        \n        // Chamfer bottom edges\n        translate([0, 0, -h/2-0.1])\n        difference() {\n            cube([w-wall_t*2, d-wall_t*2, h], center=true);\n            translate([0, 0, -1])\n            cube([w-wall_t*2-r*2, d-wall_t*2-r*2, h+2], center=true);\n        }\n    }\n}\n\n// Module for tapered leg\nmodule tapered_leg(h, d1, d2) {\n    difference() {\n        // Main leg\n        cylinder(h1=h, r1=d1/2, r2=d2/2, center=false);\n        \n        // Hollow core\n        translate([0, 0, wall_t])\n        cylinder(h1=h-wall_t*2, r1=(d1-wall_t*2)/2, r2=(d2-wall_t*2)/2, center=false);\n    }\n}\n\n// Module for decorative brace\nmodule decorative_brace(w, h, d) {\n    difference() {\n        // Main brace\n        translate([-w/2, -d/2, 0])\n        cube([w, d, h]);\n        \n        // Cutout pattern - series of circles\n        for (x = [-w/2+10:15:w/2-10]) {\n            for (y = [-d/2+10:15:d/2-10]) {\n                translate([x, y, -1])\n                cylinder(h=h+2, r=3, center=false);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    translate([0, 0, leg_h+table_top_h/2])\n    rounded_top(table_top_d, table_top_d, table_top_h, 8);\n    \n    // Four legs\n    leg_offset = table_top_d/2 - leg_d/2 - 10;\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x*leg_offset, y*leg_offset, 0])\n            tapered_leg(leg_h, leg_d, leg_d*0.8);\n        }\n    }\n    \n    // Lower shelf\n    translate([0, 0, leg_h/3])\n    difference() {\n        // Main shelf\n        cube([shelf_d, shelf_d, wall_t], center=true);\n        \n        // Rounded corners\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x*(shelf_d/2-5), y*(shelf_d/2-5), -1])\n                cylinder(h=wall_t+2, r=5, center=false);\n            }\n        }\n    }\n    \n    // Decorative braces between legs\n    brace_z = leg_h - brace_h - 10;\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            if (x == 1 && y == 1) {\n                translate([x*(leg_offset-20), y*(leg_offset-20)/2, brace_z])\n                rotate([0, 0, 45])\n                decorative_brace(40, brace_h, wall_t);\n            }\n            if (x == -1 && y == -1) {\n                translate([x*(leg_offset-20), y*(leg_offset-20)/2, brace_z])\n                rotate([0, 0, 45])\n                decorative_brace(40, brace_h, wall_t);\n            }\n        }\n    }\n    \n    // Central support column\n    difference() {\n        translate([0, 0, leg_h/2])\n        cylinder(h=leg_h, r=8, center=true);\n        \n        // Hollow core\n        translate([0, 0, leg_h/2])\n        cylinder(h=leg_h-wall_t*2, r=8-wall_t, center=true);\n    }\n    \n    // Decorative rings on legs\n    for (z = [20, 60]) {\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x*leg_offset, y*leg_offset, z])\n                difference() {\n                    cylinder(h=wall_t*1.5, r=leg_d/2+wall_t, center=true);\n                    cylinder(h=wall_t*1.5+1, r=leg_d/2, center=true);\n                }\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "pilotless",
    "openscad_code": "// Pilotless (drone) decorative furniture piece – medium complexity\n// Overall size ~120 mm wide, 90 mm deep, 60 mm tall\n// Wall thickness 2 mm for easy 3D printing\n\n$fn = 36;\n\nmodule bodyShell() {\n    // Main central body – hollow cylinder with rounded top\n    difference() {\n        union() {\n            cylinder(h = 28, d = 40);                    // main body\n            translate([0,0,28]) cylinder(h = 12, d1 = 40, d2 = 30);  // tapered dome\n        }\n        translate([0,0,-1]) cylinder(h = 42, d = 36);    // hollow cavity\n    }\n}\n\nmodule arm() {\n    // Single structural arm with motor pod\n    union() {\n        // Arm beam (2 mm thick shell)\n        difference() {\n            translate([-20, -4, 12]) cube([40, 8, 5]);\n            translate([-19, -3, 13]) cube([38, 6, 3]);\n        }\n        // Motor pod cylinder\n        translate([20, 0, 12]) cylinder(h = 10, d = 12);\n    }\n}\n\nmodule propeller() {\n    // Simple 2-blade propeller\n    rotate([0,0,45]) union() {\n        translate([0, -12, 0]) cube([2, 24, 1]);\n        translate([-12, 0, 0]) cube([24, 2, 1]);\n    }\n}\n\nmodule landingFoot() {\n    // Curved foot for furniture styling\n    difference() {\n        translate([-4, 0, 0]) cube([8, 8, 15]);\n        translate([-2, -2, 1]) cube([4, 12, 13]);\n    }\n}\n\nmodule furnitureDetail() {\n    // Ornamental lattice on body – looks like carved wood panel\n    for (a = [0:60:359])\n        rotate([0,0,a])\n            translate([20, 0, 10])\n                rotate([90,0,0])\n                    cylinder(h = 8, d = 2);\n}\n\n// Assembly\nunion() {\n    bodyShell();\n    furnitureDetail();\n\n    // Four arms with motor pods & props\n    for (a = [0:90:270]) {\n        rotate([0,0,a]) {\n            arm();\n            translate([20, 0, 22]) propeller();\n        }\n    }\n\n    // Four landing feet\n    translate([-20, 20, -2]) landingFoot();\n    translate([20, 20, -2]) mirror([1,0,0]) landingFoot();\n    translate([-20, -20, -2]) mirror([0,1,0]) landingFoot();\n    translate([20, -20, -2]) mirror([1,1,0]) landingFoot();\n}",
    "renders": true
  },
  {
    "decorative_art": "steamer",
    "openscad_code": "// Steamer Trunk - Realistic Medium Complexity\n// Dimensions: 120mm x 80mm x 60mm\n\n$fn = 50;\n\nmodule trunk_body() {\n    difference() {\n        // Main body\n        cube([120, 80, 60], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n        cube([116, 76, 58], center = true);\n    }\n}\n\nmodule top_lid() {\n    difference() {\n        // Lid\n        translate([0, 0, 30])\n        cube([120, 80, 8], center = true);\n        \n        // Interior curve\n        translate([0, 0, 34])\n        cube([116, 76, 6], center = true);\n    }\n}\n\nmodule corner_guard(x, y, z) {\n    translate([x, y, z])\n    cylinder(h = 8, r1 = 4, r2 = 4);\n}\n\nmodule metal_strap() {\n    // Side straps\n    for(i = [-1, 1]) {\n        translate([i * 55, 0, 0])\n        cube([4, 80, 2]);\n    }\n    \n    // End straps\n    for(i = [-1, 1]) {\n        translate([0, i * 35, 0])\n        cube([120, 4, 2]);\n    }\n}\n\nmodule handle() {\n    // Handle base\n    for(i = [-1, 1]) {\n        translate([i * 50, 0, 34])\n        cube([8, 20, 4], center = true);\n    }\n    \n    // Handle grip\n    translate([0, 0, 38])\n    rotate([90, 0, 0])\n    cylinder(h = 100, r = 3);\n}\n\nmodule lock_plate() {\n    translate([0, 35, 34])\n    cube([30, 8, 2], center = true);\n    \n    // Lock detail\n    translate([0, 39, 35])\n    cylinder(h = 4, r = 4);\n}\n\nmodule hinge() {\n    for(i = [-40, -20, 0, 20, 40]) {\n        translate([i, -40, 30])\n        cube([8, 6, 4], center = true);\n    }\n}\n\nmodule decorative_rivets() {\n    // Rivets on corners\n    for(x = [-55, 55])\n    for(y = [-35, 35])\n    for(z = [28, -28]) {\n        translate([x, y, z])\n        sphere(r = 1.5);\n    }\n}\n\nmodule wood_texture_strips() {\n    // Simulated wood planks on sides\n    for(i = [-30, -10, 10, 30]) {\n        translate([i, 0, 0])\n        cube([2, 80, 60.1], center = true);\n    }\n    \n    for(i = [-20, 0, 20]) {\n        translate([0, i, 0])\n        cube([120.1, 2, 60.1], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body and components\n    trunk_body();\n    \n    // Top lid with hinges\n    union() {\n        top_lid();\n        hinge();\n    }\n    \n    // Metal reinforcements\n    color(\"silver\") {\n        metal_strap();\n        \n        // Corner guards\n        for(x = [-58, 58])\n        for(y = [-38, 38])\n        for(z = [-28, 28]) {\n            corner_guard(x, y, z);\n        }\n        \n        handle();\n        lock_plate();\n        decorative_rivets();\n    }\n    \n    // Wood texture\n    color(\"burlywood\") {\n        wood_texture_strips();\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "cutter",
    "openscad_code": "// Realistic Cutter Furniture Art Piece\n// Dimensions: ~70mm wide, ~50mm deep, ~100mm tall\n// Wall thickness: 2mm for 3D printability\n\n$fn = 32;\n\nmodule cutter_frame() {\n    // Main rectangular frame body\n    difference() {\n        // Outer frame\n        cube([65, 45, 8]);\n        // Hollow center\n        translate([2, 2, -1]) cube([61, 41, 10]);\n    }\n}\n\nmodule decorative_pattern() {\n    // Geometric pattern for front face\n    for (i = [0:6]) {\n        for (j = [0:4]) {\n            translate([5 + i*9, 5 + j*8, 4.5]) \n                cylinder(h=1, r=2);\n        }\n    }\n}\n\nmodule vertical_supports() {\n    // Left support pillar\n    translate([5, 5, 8]) {\n        cube([5, 35, 85]);\n        // Decorative groove\n        translate([1, 2, 10]) cube([1, 31, 65]);\n    }\n    \n    // Right support pillar\n    translate([55, 5, 8]) {\n        cube([5, 35, 85]);\n        // Decorative groove\n        translate([3, 2, 10]) cube([1, 31, 65]);\n    }\n}\n\nmodule back_panel() {\n    // Decorative back panel with arch design\n    translate([10, 40, 8]) {\n        difference() {\n            // Main panel\n            cube([45, 5, 85]);\n            // Arch cutout\n            translate([22.5, 3, 70]) \n                rotate([90, 0, 0]) \n                    cylinder(h=6, r=15);\n            // Small windows\n            for (k = [0:2]) {\n                translate([10 + k*12.5, 2, 30]) \n                    cube([7, 3, 15]);\n            }\n        }\n    }\n}\n\nmodule base_platform() {\n    // Raised platform base\n    translate([2, 2, -5]) {\n        difference() {\n            cube([61, 41, 5]);\n            // Chamfer edges\n            translate([-1, -1, 4]) \n                cube([63, 43, 2]);\n        }\n    }\n}\n\nmodule top_trim() {\n    // Decorative top molding\n    translate([0, 0, 93]) {\n        cube([65, 45, 5]);\n        // Crown detail\n        for (x = [0:6]) {\n            translate([5 + x*9, 5, 5]) \n                cube([7, 35, 3]);\n        }\n    }\n}\n\nmodule side_details() {\n    // Side lattice details\n    translate([0, 20, 15]) {\n        for (y = [0:3]) {\n            cube([2, 5, 15]);\n            translate([63, 0, 0]) cube([2, 5, 15]);\n            translate([0, 0, 20]) cube([2, 5, 15]);\n            translate([63, 0, 20]) cube([2, 5, 15]);\n            translate([0, 0, 40]) cube([2, 5, 15]);\n            translate([63, 0, 40]) cube([2, 5, 15]);\n            translate([0, y*10 + 5, 0]) cube([2, 5, 75]);\n            translate([63, y*10 + 5, 0]) cube([2, 5, 75]);\n        }\n    }\n}\n\n// Assemble the complete piece\nunion() {\n    // Base structure\n    base_platform();\n    \n    // Main frame\n    translate([0, 0, 0]) cutter_frame();\n    \n    // Support elements\n    vertical_supports();\n    \n    // Decorative elements\n    translate([0, 0, 0]) decorative_pattern();\n    \n    // Back panel\n    back_panel();\n    \n    // Top trim\n    top_trim();\n    \n    // Side decorations\n    side_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "schooner",
    "openscad_code": "// Schooner furniture piece - decorative shelf unit\n// Represents a sailing schooner as functional furniture\n\nhull_length = 120;\nhull_width = 40;\nhull_height = 25;\nmast_height = 80;\nshelf_thickness = 2;\n\nmodule hull_base() {\n    difference() {\n        // Main hull shape - curved deck\n        hull_points = [\n            [0, 0, 0],\n            [hull_length, 0, 0],\n            [hull_length, hull_width, 0],\n            [0, hull_width, 0],\n            [hull_length*0.1, hull_width*0.1, hull_height],\n            [hull_length*0.9, hull_width*0.1, hull_height],\n            [hull_length*0.9, hull_width*0.9, hull_height],\n            [hull_length*0.1, hull_width*0.9, hull_height]\n        ];\n        \n        hull_faces = [\n            [0,1,2,3], // bottom\n            [4,5,1,0], // front\n            [5,6,2,1], // right\n            [6,7,3,2], // back\n            [7,4,0,3], // left\n            [4,5,6,7]  // top\n        ];\n        \n        polyhedron(points=hull_points, faces=hull_faces);\n        \n        // Hollow out interior\n        translate([shelf_thickness, shelf_thickness, shelf_thickness])\n            cube([hull_length-shelf_thickness*2, hull_width-shelf_thickness*2, hull_height-shelf_thickness]);\n    }\n}\n\nmodule mast() {\n    // Main mast structure\n    translate([hull_length/2, hull_width/2, hull_height])\n        cylinder(h=mast_height, r1=2.5, r2=2, $fn=16);\n    \n    // Mast base reinforcement\n    translate([hull_length/2, hull_width/2, hull_height])\n        cylinder(h=5, r1=4, r2=4, $fn=16);\n}\n\nmodule sail_support() {\n    // Horizontal boom\n    translate([hull_length/2+15, hull_width/2, hull_height+mast_height*0.3])\n        rotate([0, 90, 0])\n            cylinder(h=30, r=1.5, $fn=8);\n    \n    // Gaff support\n    translate([hull_length/2-5, hull_width/2, hull_height+mast_height*0.7])\n        rotate([30, 0, 90])\n            cylinder(h=25, r=1.2, $fn=8);\n}\n\nmodule deck_details() {\n    // Cabin structure (storage compartment)\n    translate([hull_length*0.7, hull_width*0.3, hull_height])\n        cube([25, 20, 15]);\n    \n    // Cabin roof\n    translate([hull_length*0.7+12.5, hull_width*0.3+10, hull_height+15])\n        rotate([90, 0, 0])\n            cylinder(h=25, r1=10, r2=0, $fn=3);\n    \n    // Porthole details\n    for(i=[1:3]) {\n        translate([hull_length*0.2*i, hull_width*0.15, hull_height*0.5])\n            rotate([90, 0, 0])\n                difference() {\n                    cylinder(h=2, r=3, $fn=16);\n                    cylinder(h=3, r=2, $fn=16);\n                }\n    }\n}\n\nmodule rudder() {\n    // Rudder structure\n    translate([5, hull_width/2, hull_height*0.5])\n        rotate([0, -10, 0])\n            cube([15, 2, hull_height*0.8]);\n}\n\nmodule bow_sprit() {\n    // Forward spar\n    translate([hull_length+2, hull_width/2, hull_height*0.6])\n        rotate([0, 0, -15])\n            cylinder(h=20, r=1.5, $fn=8);\n}\n\nmodule shelf_supports() {\n    // Lower shelf supports\n    for(x=[hull_length*0.2, hull_length*0.8]) {\n        translate([x, 0, -5])\n            cube([2, shelf_thickness, 5]);\n        translate([x, hull_width-shelf_thickness, -5])\n            cube([2, shelf_thickness, 5]);\n    }\n}\n\n// Main assembly\nunion() {\n    hull_base();\n    mast();\n    sail_support();\n    deck_details();\n    rudder();\n    bow_sprit();\n    shelf_supports();\n    \n    // Add decorative railing\n    for(x=[hull_length*0.1:hull_length*0.8:hull_length*0.7]) {\n        translate([x, shelf_thickness, hull_height+2])\n            cylinder(h=5, r=1, $fn=8);\n        translate([x, hull_width-shelf_thickness*2, hull_height+2])\n            cylinder(h=5, r=1, $fn=8);\n    }\n    \n    // Railing connector\n    translate([hull_length*0.45, shelf_thickness, hull_height+4])\n        cube([hull_length*0.5, 1, 1]);\n    translate([hull_length*0.45, hull_width-shelf_thickness*2, hull_height+4])\n        cube([hull_length*0.5, 1, 1]);\n}",
    "renders": true
  },
  {
    "decorative_art": "rampage",
    "openscad_code": "// Rampage Decorative Shelf - Realistic Style\n// Medium complexity furniture piece with structural details\n\n// Dimensions (in mm)\nshelf_width = 120;\nshelf_height = 80;\nshelf_depth = 40;\nwall_thickness = 2;\nsupport_diameter = 8;\n\n// Main shelf body\nmodule shelf_body() {\n    difference() {\n        // Main shelf structure\n        union() {\n            // Bottom shelf\n            translate([0, 0, 0])\n                cube([shelf_width, shelf_depth, wall_thickness], center=true);\n            \n            // Top shelf\n            translate([0, 0, shelf_height-wall_thickness])\n                cube([shelf_width, shelf_depth, wall_thickness], center=true);\n            \n            // Side supports\n            translate([shelf_width/2-wall_thickness/2, 0, shelf_height/2])\n                cube([wall_thickness, shelf_depth, shelf_height], center=true);\n            translate([-shelf_width/2+wall_thickness/2, 0, shelf_height/2])\n                cube([wall_thickness, shelf_depth, shelf_height], center=true);\n            \n            // Back panel\n            translate([0, shelf_depth/2-wall_thickness/2, shelf_height/2])\n                cube([shelf_width, wall_thickness, shelf_height], center=true);\n        }\n        \n        // Decorative cutouts\n        for (x = [-40:20:40]) {\n            for (y = [-15:15:15]) {\n                translate([x, y, shelf_height/2])\n                    cylinder(h=shelf_height+2, r=5, center=true);\n            }\n        }\n    }\n}\n\n// Decorative rampage pattern supports\nmodule rampage_supports() {\n    // Front decorative posts\n    for (i = [-1, 1]) {\n        translate([i * 50, 0, -wall_thickness])\n            cylinder(h=shelf_height+wall_thickness*2, r=support_diameter/2, center=false);\n        \n        // Angled supports\n        translate([i * 45, shelf_depth/2-5, shelf_height/4])\n            rotate([0, 30, 0])\n                cylinder(h=30, r=3, center=false);\n    }\n    \n    // Center decorative element\n    translate([0, shelf_depth/4, shelf_height/2])\n        scale([1, 0.7, 1])\n            sphere(d=20);\n    \n    // Additional structural braces\n    translate([0, 0, shelf_height/3])\n        cube([shelf_width-20, 2, wall_thickness], center=true);\n}\n\n// Mounting brackets\nmodule mounting_brackets() {\n    for (i = [-40:80:80]) {\n        translate([i, shelf_depth/2+5, shelf_height-5])\n            union() {\n                cube([10, 5, 10], center=true);\n                translate([0, 2.5, 0])\n                    cylinder(h=5, r=2.5, center=true);\n            }\n    }\n}\n\n// Assembly\nunion() {\n    shelf_body();\n    rampage_supports();\n    mounting_brackets();\n}",
    "renders": true
  },
  {
    "decorative_art": "breeze",
    "openscad_code": "// Breeze Wall Shelf - Medium Complexity Realistic Style\n// Dimensions: 120mm wide x 80mm tall x 30mm deep\n\nmodule shelf_base() {\n    // Main shelf platform - 2mm thick\n    difference() {\n        translate([0, 0, 78]) cube([120, 30, 2], center=true);\n        // Cable management slot\n        translate([0, 0, 79]) cube([80, 10, 4], center=true);\n    }\n}\n\nmodule back_panel() {\n    // Decorative perforated back panel\n    difference() {\n        // Main panel\n        translate([-59, 0, 40]) cube([2, 30, 78], center=true);\n        // Perforation pattern - breeze-inspired\n        for (i = [0:3]) {\n            for (j = [0:5]) {\n                translate([-58, -12 + j*5, 5 + i*18]) \n                    rotate([0, 0, 30]) \n                    cylinder(h=3, r=2.5, center=true, $fn=6);\n            }\n        }\n    }\n}\n\nmodule side_support(type) {\n    // Triangular side support brackets\n    if (type == \"left\") {\n        translate([-58, 0, 40]) {\n            difference() {\n                linear_extrude(height=2) polygon([[0,0], [0,38], [25,0]]);\n                // Weight reduction cutouts\n                for (i = [0:2]) {\n                    translate([5 + i*7, 5 + i*10, 0]) circle(r=2);\n                }\n            }\n        }\n    } else {\n        translate([58, 0, 40]) {\n            mirror([1,0,0]) {\n                difference() {\n                    linear_extrude(height=2) polygon([[0,0], [0,38], [25,0]]);\n                    for (i = [0:2]) {\n                        translate([5 + i*7, 5 + i*10, 0]) circle(r=2);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule mounting_holes() {\n    // Keyhole mounting brackets\n    for (i = [-1, 1]) {\n        translate([i*40, 0, 75]) {\n            difference() {\n                cylinder(h=5, r=4, center=true, $fn=20);\n                translate([0, 0, 1]) cylinder(h=7, r=2.5, center=true, $fn=20);\n            }\n        }\n    }\n}\n\nmodule front_lip() {\n    // Decorative front lip with curved profile\n    translate([0, -14, 75]) {\n        difference() {\n            cube([116, 4, 6], center=true);\n            // Rounding the top edge\n            translate([0, -12, 78]) cube([112, 8, 6], center=true);\n        }\n    }\n}\n\nmodule support_rods() {\n    // Decorative support rods between back and front\n    for (i = [-40, -20, 0, 20, 40]) {\n        translate([i, -12, 75]) {\n            rotate([90, 0, 0]) cylinder(h=24, r=1.5, $fn=12);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    shelf_base();\n    back_panel();\n    side_support(\"left\");\n    side_support(\"right\");\n    mounting_holes();\n    front_lip();\n    support_rods();\n}",
    "renders": true
  },
  {
    "decorative_art": "jetway",
    "openscad_code": "// Jetway Furniture – decorative art piece / small display shelf\n// Medium complexity, realistic style, 3D-printable\n\n// Overall scale; 1 unit = 1 mm\n$fa = 1;\n$fs = 0.4;\n\nmodule jetway_furniture() {\n    // Wall thickness\n    wall = 2;\n\n    // Proportions taken from a 1:400 jetbridge scaled to ~120 mm length\n    len = 120;\n    wid = 34;\n    h_body = 28;\n    h_tube = 22;\n    cab_len = 28;\n    wheel_d = 8;\n\n    // 1. Main tube body – hollow cylinder\n    difference() {\n        cylinder(h = h_body, d = wid, center = true);\n        translate([0,0,-wall])          // inner cavity\n            cylinder(h = h_body + 2*wall, d = wid - 2*wall, center = true);\n    }\n\n    // 2. Extendable cabin – slightly smaller tube\n    translate([len/2 - cab_len/2, 0, 0])\n    difference() {\n        cylinder(h = h_tube, d = wid - 4, center = true);\n        translate([0,0,-wall])\n            cylinder(h = h_tube + 2*wall, d = wid - 4 - 2*wall, center = true);\n    }\n\n    // 3. Floor plates inside tubes – usable as tiny shelves\n    for (z = [-h_body/4, h_body/4]) {\n        translate([0, 0, z])\n            cube([len, wid - 2*wall, wall], center = true);\n    }\n\n    // 4. Cabin front with rounded corners (frame)\n    translate([len/2, 0, 0])\n    difference() {\n        hull() {\n            translate([0,  wid/2 - wall,  h_tube/2 - wall])\n                sphere(d = wall*2);\n            translate([0, -wid/2 + wall,  h_tube/2 - wall])\n                sphere(d = wall*2);\n            translate([0,  wid/2 - wall, -h_tube/2 + wall])\n                sphere(d = wall*2);\n            translate([0, -wid/2 + wall, -h_tube/2 + wall])\n                sphere(d = wall*2);\n        }\n        // cut hole\n        translate([wall, 0, 0])\n            cube([wall*4, wid - 4*wall, h_tube - 3*wall], center = true);\n    }\n\n    // 5. Articulation joint – simplified ball-socket\n    translate([-len/2 + 10, 0, 0])\n    rotate([90,0,0])\n    difference() {\n        sphere(d = wid - 2*wall);\n        sphere(d = wid - 4*wall);\n    }\n\n    // 6. Support column with gentle taper\n    column_h = 60;\n    translate([-len/2, 0, -h_body/2 - column_h/2])\n    cylinder(h1 = column_h, h2 = column_h, r1 = 8, r2 = 6, center = true);\n\n    // 7. Base platform\n    difference() {\n        translate([-len/2, 0, -h_body/2 - column_h - 4])\n            cube([30, 50, 8], center = true);\n        translate([-len/2, 0, -h_body/2 - column_h - 4 + wall])\n            cube([30 - 2*wall, 50 - 2*wall, 8], center = true);\n    }\n\n    // 8. Under-body wheel pairs (decorative)\n    for (x = [-len/2 + 20, -len/2 + 35, -len/2 + 50]) {\n        translate([x,  wid/2 + 2, -h_body/2 - 4])\n            rotate([90,0,0])\n            cylinder(h = 6, d = wheel_d, center = true);\n        translate([x, -wid/2 - 2, -h_body/2 - 4])\n            rotate([90,0,0])\n            cylinder(h = 6, d = wheel_d, center = true);\n    }\n\n    // 9. Roof walkway guardrails (thin cylinders)\n    for (x = [-len/2 + 5 : 10 : len/2 - 10]) {\n        translate([x,  wid/2 - wall, h_body/2 + 1])\n            cylinder(h = 4, d = wall);\n        translate([x, -wid/2 + wall, h_body/2 + 1])\n            cylinder(h = 4, d = wall);\n    }\n}\n\njetway_furniture();",
    "renders": true
  },
  {
    "decorative_art": "hydro",
    "openscad_code": "// Hydro-inspired decorative stool\n// A stylized water droplet-shaped stool with flowing support structure\n// Overall dimensions: 120mm diameter, 150mm height\n\n// Parameters\ndroplet_height = 120;\nbase_diameter = 120;\nleg_count = 5;\nwall_thickness = 2;\n\n// Main droplet-shaped seat\nmodule seat() {\n    // Outer shell - elongated sphere for water droplet shape\n    scale([1, 1, 1.3])\n    sphere(d=base_diameter, $fn=60);\n    \n    // Hollow out interior\n    difference() {\n        scale([1, 1, 1.3])\n        sphere(d=base_diameter, $fn=60);\n        \n        translate([0, 0, -5])\n        scale([1 - (wall_thickness*2/base_diameter), 1 - (wall_thickness*2/base_diameter), 1 - (wall_thickness*2/base_diameter)])\n        sphere(d=base_diameter - wall_thickness, $fn=60);\n    }\n}\n\n// Water ripple base\nmodule ripple_base() {\n    for (i = [1:3]) {\n        translate([0, 0, -wall_thickness*i*2])\n        cylinder(h=wall_thickness, d=base_diameter + i*20, $fn=60);\n    }\n}\n\n// Flowing support legs\nmodule support_legs() {\n    for (i = [0:leg_count-1]) {\n        angle = i * 360/leg_count;\n        \n        // Leg base at bottom\n        translate([0, 0, -wall_thickness*6])\n        rotate([0, 0, angle])\n        translate([base_diameter/2 - 15, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h=20, d=8, $fn=20);\n        \n        // Flowing curved support\n        rotate([0, 0, angle])\n        translate([base_diameter/2 - 20, 0, -wall_thickness*6])\n        scale([1, 1, 0.5])\n        sphere(d=12, $fn=20);\n        \n        // Connection to seat\n        rotate([0, 0, angle])\n        translate([base_diameter/2 - 25, 0, droplet_height*0.3])\n        cylinder(h=droplet_height*0.7 - droplet_height*0.3, d=6, $fn=20);\n    }\n}\n\n// Water droplet details on seat surface\nmodule droplet_details() {\n    for (i = [0:15]) {\n        angle = i * 24;\n        radius = base_diameter/2 * 0.7;\n        \n        translate([\n            cos(angle) * radius * (0.3 + 0.5 * sin(i*5)),\n            sin(angle) * radius * (0.3 + 0.5 * sin(i*5)),\n            droplet_height*0.65 + 2\n        ])\n        sphere(d=4, $fn=12);\n    }\n}\n\n// Assembly\nunion() {\n    // Main seat structure\n    translate([0, 0, droplet_height*0.35])\n    seat();\n    \n    // Base platform\n    ripple_base();\n    \n    // Support structure\n    support_legs();\n    \n    // Decorative details\n    droplet_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "rover",
    "openscad_code": "// Realistic Rover Furniture - Decorative Art Piece\n// Medium complexity decorative rover sculpture with furniture-like finish\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Overall dimensions\nrover_width = 80;\nrover_length = 120;\nrover_height = 45;\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule rover_body() {\n    // Main chassis with furniture-style rounded edges\n    hull() {\n        translate([-rover_length/2+5, -rover_width/2+5, 0])\n            cube([rover_length-10, rover_width-10, rover_height-15]);\n        translate([-rover_length/2+10, -rover_width/2+10, 5])\n            cube([rover_length-20, rover_width-20, rover_height-15]);\n    }\n    \n    // Top surface with decorative panel lines\n    difference() {\n        translate([-rover_length/2, -rover_width/2, rover_height-15])\n            cube([rover_length, rover_width, 5]);\n        \n        // Decorative grooves (furniture-style)\n        for(i = [-2:2]) {\n            translate([i * 20, -rover_width/2, rover_height-12])\n                cube([2, rover_width, 1]);\n        }\n    }\n}\n\nmodule wheels() {\n    // Create 6 wheels with furniture caster-style design\n    module wheel(pos_x, pos_y, angle) {\n        translate([pos_x, pos_y, 8]) {\n            rotate([0, 0, angle]) {\n                // Wheel tire\n                color(\"dimgray\")\n                cylinder(h=8, r=12);\n                \n                // Wheel hub cap (decorative furniture hardware)\n                color(\"silver\")\n                translate([0, 0, 4])\n                    cylinder(h=2, r=8);\n                \n                // Spoke pattern\n                for(i = [0:45:315]) {\n                    rotate([0, 0, i])\n                        translate([6, 0, 2])\n                        cube([8, 2, 4]);\n                }\n            }\n        }\n    }\n    \n    // Front wheels\n    wheel(-rover_length/2 + 15, -rover_width/2 + 15, 0);\n    wheel(-rover_length/2 + 15, rover_width/2 - 15, 0);\n    \n    // Middle wheels\n    wheel(0, -rover_width/2 + 15, 0);\n    wheel(0, rover_width/2 - 15, 0);\n    \n    // Rear wheels\n    wheel(rover_length/2 - 15, -rover_width/2 + 15, 0);\n    wheel(rover_length/2 - 15, rover_width/2 - 15, 0);\n}\n\nmodule solar_panels() {\n    // Furniture-style decorative panels\n    color(\"darkslategray\")\n    translate([-rover_length/2 + 10, -rover_width/2 - 3, rover_height-10])\n        cube([rover_length - 20, 3, 10]);\n    \n    color(\"darkslategray\")\n    translate([-rover_length/2 + 10, rover_width/2, rover_height-10])\n        cube([rover_length - 20, 3, 10]);\n    \n    // Panel grid pattern\n    color(\"black\")\n    for(i = [0:4]) {\n        translate([-rover_length/2 + 15 + i*18, -rover_width/2 - 2, rover_height-5])\n            cube([15, 1, 8]);\n        translate([-rover_length/2 + 15 + i*18, rover_width/2 + 1, rover_height-5])\n            cube([15, 1, 8]);\n    }\n}\n\nmodule antenna() {\n    // Decorative furniture-style antenna\n    color(\"silver\")\n    translate([rover_length/2 - 20, 0, rover_height-5])\n        cylinder(h=25, r1=3, r2=1);\n    \n    // Antenna dish (decorative element)\n    color(\"silver\")\n    translate([rover_length/2 - 20, 0, rover_height+20])\n        sphere(r=8);\n    \n    // Support struts\n    color(\"silver\")\n    for(angle = [0:120:359]) {\n        rotate([0, 0, angle])\n            translate([rover_length/2 - 20, 6, rover_height-2])\n                cylinder(h=8, r=1);\n    }\n}\n\nmodule camera_mount() {\n    // Camera housing with furniture-style finish\n    color(\"black\")\n    translate([-rover_length/2 + 5, 0, rover_height-10])\n        cube([15, 12, 12]);\n    \n    // Camera lens\n    color(\"lightgray\")\n    translate([-rover_length/2 + 2, 0, rover_height-4])\n        cylinder(h=8, r=5);\n    \n    // Decorative ring around lens\n    color(\"silver\")\n    translate([-rover_length/2 + 2, 0, rover_height-4])\n        cylinder(h=1, r=6);\n}\n\nmodule structural_details() {\n    // Furniture-style corner brackets\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            color(\"brass\")\n            translate([x * rover_length/2 - 5, y * rover_width/2 - 5, 0])\n                cube([5, 5, 10]);\n        }\n    }\n    \n    // Decorative rivets along sides\n    color(\"brass\")\n    for(i = [-2:2]) {\n        if(i != 0) {\n            translate([i * 20, -rover_width/2, 10])\n                sphere(r=1.5);\n            translate([i * 20, rover_width/2, 10])\n                sphere(r=1.5);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    rover_body();\n    wheels();\n    solar_panels();\n    antenna();\n    camera_mount();\n    structural_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "dive",
    "openscad_code": "// Dive-inspired shelf unit (realistic style, medium complexity)\n// Overall size: 120mm wide x 80mm deep x 140mm high\n\n$fn = 32;  // Smooth curves for 3D printing\n\n// Main parameters\nshelf_width = 120;\nshelf_depth = 80;\nshelf_thickness = 2;\npost_size = 8;\nshell_thickness = 2;\nwave_amplitude = 3;\n\nmodule wave_profile(height, length) {\n    // Creates a wave pattern for decorative edge\n    difference() {\n        cube([length, shell_thickness, height]);\n        for (i = [0:5:length-5]) {\n            translate([i+2.5, -0.1, height/2])\n                rotate([0, 90, 0])\n                    cylinder(h=6, r=wave_amplitude, $fn=16);\n        }\n    }\n}\n\nmodule shelf_with_waves() {\n    // Main shelf with decorative wave edge\n    union() {\n        // Main shelf platform\n        translate([0, 0, 0])\n            cube([shelf_width, shelf_depth, shelf_thickness]);\n        \n        // Front wave decoration\n        translate([0, shelf_depth-shell_thickness, 0])\n            wave_profile(shelf_thickness, shelf_width);\n        \n        // Back wave decoration\n        translate([0, 0, 0])\n            wave_profile(shelf_thickness, shelf_width);\n    }\n}\n\nmodule support_post(height, x_pos, y_pos) {\n    // Vertical support post with rounded top\n    union() {\n        // Main post\n        translate([x_pos, y_pos, 0])\n            cube([post_size, post_size, height]);\n        \n        // Rounded top cap\n        translate([x_pos+post_size/2, y_pos+post_size/2, height])\n            sphere(r=post_size/2);\n    }\n}\n\nmodule dive_tank_holder() {\n    // Central tank holder with curved supports\n    tank_radius = 15;\n    holder_height = 25;\n    \n    difference() {\n        // Main holder body\n        translate([shelf_width/2, shelf_depth/2, 0])\n            cylinder(h=holder_height, r=tank_radius+5);\n        \n        // Cutout for tank\n        translate([shelf_width/2, shelf_depth/2, -1])\n            cylinder(h=holder_height+2, r=tank_radius);\n    }\n    \n    // Support ribs around holder\n    for (angle = [0:60:359]) {\n        rotate([0, 0, angle])\n            translate([shelf_width/2, shelf_depth/2 + tank_radius + 2, holder_height/2])\n                cube([2, 8, holder_height]);\n    }\n}\n\nmodule regulator_hook() {\n    // Side hook for regulator storage\n    hook_width = 8;\n    hook_height = 15;\n    \n    translate([post_size-2, shelf_depth-20, 110])\n        union() {\n            // Base plate\n            cube([hook_width, 4, hook_height]);\n            \n            // Hook curve\n            translate([hook_width-1, 4, hook_height-5])\n                rotate([90, 0, 0])\n                    cylinder(h=10, r=3);\n        }\n}\n\n// Main assembly\nmodule dive_shelf() {\n    // Bottom shelf\n    translate([post_size, post_size, 0])\n        shelf_with_waves();\n    \n    // Middle shelf\n    translate([post_size, post_size, 60])\n        shelf_with_waves();\n    \n    // Top shelf\n    translate([post_size, post_size, 120])\n        shelf_with_waves();\n    \n    // Support posts - four corners\n    support_post(140, 0, 0);\n    support_post(140, 0, shelf_depth+post_size*2);\n    support_post(140, shelf_width+post_size, 0);\n    support_post(140, shelf_width+post_size, shelf_depth+post_size*2);\n    \n    // Dive tank holder on middle shelf\n    translate([0, 0, 60+shelf_thickness])\n        dive_tank_holder();\n    \n    // Regulator hook on side\n    regulator_hook();\n    \n    // Mesh backing panel\n    translate([post_size-2, post_size-2, 0])\n        for (x = [0:10:shelf_width+post_size*2-10]) {\n            for (y = [0:10:shelf_depth+post_size*2-10]) {\n                translate([x, y, 0])\n                    cube([2, 2, 140]);\n            }\n        }\n}\n\ndive_shelf();",
    "renders": true
  },
  {
    "decorative_art": "helm",
    "openscad_code": "// Helm Furniture - Decorative Display Piece\n// Realistic style, medium complexity\n\n$fn = 32;\n\n// Overall dimensions\nhelm_height = 80;\nhelm_width = 60;\nhelm_depth = 70;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main helmet shell\nmodule helmet_shell() {\n    difference() {\n        // Outer dome\n        scale([1, 1.2, 1])\n        sphere(d = helm_width);\n        \n        // Inner cavity\n        translate([0, 0, -wall])\n        scale([1, 1.2, 1])\n        sphere(d = helm_width - wall*2);\n        \n        // Bottom cut\n        translate([0, 0, -helm_height/2 + 10])\n        cube([helm_width*2, helm_width*2, helm_height], center=true);\n    }\n}\n\n// Face opening\nmodule face_opening() {\n    difference() {\n        translate([0, -helm_width/3, helm_height/4])\n        rotate([0, 0, 0])\n        scale([1, 0.8, 1.2])\n        sphere(d = helm_width/2);\n        \n        // Taper the opening\n        translate([0, -helm_width/2 - 5, helm_height/4])\n        cube([helm_width, helm_width, helm_height], center=true);\n    }\n}\n\n// Eye slit\nmodule eye_slit() {\n    translate([0, -helm_width/2.5, helm_height/3])\n    rotate([0, 10, 0])\n    cube([helm_width/3, wall, helm_width/10], center=true);\n}\n\n// Decorative ridge on top\nmodule helmet_ridge() {\n    for(i = [-2:1:2]) {\n        translate([i*5, 0, helm_height/2 - 5])\n        rotate([90, 0, 0])\n        cylinder(h = helm_width/2, d = wall*2, center=true);\n    }\n}\n\n// Ventilation holes pattern\nmodule ventilation_holes() {\n    for(angle = [30:30:150]) {\n        rotate([0, 0, angle])\n        translate([0, helm_width/2 - wall, helm_height/4])\n        rotate([90, 0, 0])\n        cylinder(h = wall*1.5, d = wall, center=true);\n    }\n}\n\n// Structural base ring\nmodule base_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h = wall*2, d = helm_width + 10);\n        \n        // Inner cutout\n        translate([0, 0, -0.1])\n        cylinder(h = wall*2 + 0.2, d = helm_width + 10 - wall*2);\n    }\n}\n\n// Decorative rivets\nmodule rivets() {\n    for(angle = [0:45:315]) {\n        rotate([0, 0, angle])\n        translate([helm_width/2 - wall, 0, 0])\n        sphere(d = wall*1.5);\n    }\n}\n\n// Support brackets for furniture stability\nmodule support_brackets() {\n    // Front bracket\n    translate([0, -helm_width/3, -helm_height/2 + 5])\n    cube([helm_width/2, wall*3, wall*5], center=true);\n    \n    // Rear bracket\n    translate([0, helm_width/3, -helm_height/2 + 5])\n    cube([helm_width/2, wall*3, wall*5], center=true);\n}\n\n// Assembly\nunion() {\n    // Main helmet structure\n    helmet_shell();\n    \n    // Cut face opening\n    difference() {\n        // Placeholder for boolean operations\n        cube([0.1, 0.1, 0.1], center=true);\n        face_opening();\n    }\n    \n    // Add decorative elements\n    helmet_ridge();\n    eye_slit();\n    ventilation_holes();\n    rivets();\n    \n    // Furniture base\n    translate([0, 0, -helm_height/2 + wall])\n    base_ring();\n    \n    // Support structure\n    support_brackets();\n}",
    "renders": true
  },
  {
    "decorative_art": "flank",
    "openscad_code": "// Flank furniture piece - decorative side table with storage\n// Realistic style, medium complexity\n// Overall dimensions: 100x50x120mm\n\n$fn = 50;  // Smooth curves for printing\n\n// Main parameters\ntable_width = 100;\ntable_depth = 50;\ntable_height = 120;\nwall_thickness = 2;\n\nmodule flank_table() {\n    // Base assembly\n    union() {\n        // Bottom shelf\n        translate([0, 0, 10])\n            cube([table_width-4, table_depth-4, wall_thickness], center=true);\n        \n        // Main body frame\n        body_frame();\n        \n        // Decorative side panels\n        side_panels();\n        \n        // Top surface\n        translate([0, 0, table_height-2])\n            cube([table_width, table_depth, 4], center=true);\n        \n        // Drawer compartment\n        drawer_section();\n        \n        // Support brackets\n        support_brackets();\n    }\n}\n\nmodule body_frame() {\n    // Left vertical post\n    translate([-table_width/2+2, 0, table_height/2])\n        cube([wall_thickness*2, table_depth-4, table_height-20], center=true);\n    \n    // Right vertical post\n    translate([table_width/2-2, 0, table_height/2])\n        cube([wall_thickness*2, table_depth-4, table_height-20], center=true);\n    \n    // Back horizontal brace\n    translate([0, -table_depth/2+2, table_height/2+10])\n        cube([table_width-4, wall_thickness*2, table_height-40], center=true);\n}\n\nmodule side_panels() {\n    // Left decorative panel with cutouts\n    difference() {\n        translate([-table_width/2+wall_thickness, 0, table_height/2])\n            cube([wall_thickness, table_depth-8, table_height-20], center=true);\n        \n        // Decorative pattern - vertical slots\n        for(i = [1:3]) {\n            translate([-table_width/2+wall_thickness, 0, 20*i+20])\n                cube([wall_thickness+1, table_depth-12, 8], center=true);\n        }\n    }\n    \n    // Right decorative panel (mirrored)\n    mirror([1, 0, 0])\n        translate([-table_width/2+wall_thickness, 0, table_height/2])\n            cube([wall_thickness, table_depth-8, table_height-20], center=true);\n}\n\nmodule drawer_section() {\n    // Drawer housing\n    difference() {\n        translate([0, 0, 70])\n            cube([table_width-20, table_depth-6, 30], center=true);\n        \n        // Drawer cavity\n        translate([0, 0, 71])\n            cube([table_width-24, table_depth-10, 28], center=true);\n    }\n    \n    // Drawer front\n    translate([0, 0, 55.5])\n        cube([table_width-20, table_depth-4, 3], center=true);\n    \n    // Drawer handle\n    translate([0, table_depth/2-2, 55.5])\n        cylinder(h=15, r=2, center=true);\n}\n\nmodule support_brackets() {\n    // Corner brackets for stability\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(table_width/2-10), y*(table_depth/2-10), 5])\n                rotate([0, 0, 45])\n                cube([wall_thickness*3, wall_thickness*3, 10], center=true);\n        }\n    }\n    \n    // Central support beam\n    translate([0, 0, 35])\n        cube([table_width-40, wall_thickness*2, 5], center=true);\n}\n\n// Generate the complete table\nflank_table();",
    "renders": true
  },
  {
    "decorative_art": "roamer",
    "openscad_code": "// Roamer Furniture - Decorative Side Table\n// Overall dimensions: 120mm wide x 120mm deep x 100mm tall\n\n$fn = 32;\n\nmodule table_top() {\n    // Main circular top with beveled edge\n    difference() {\n        cylinder(h=8, r=55, center=true);\n        translate([0,0,-1]) cylinder(h=10, r=52, center=true);\n    }\n    \n    // Decorative edge pattern\n    for(i=[0:15:359]) {\n        rotate([0,0,i]) \n            translate([50,0,4]) \n                cube([8,2,4], center=true);\n    }\n}\n\nmodule legs() {\n    // Four tapered legs with decorative joints\n    for(x=[-45,45]) {\n        for(y=[-45,45]) {\n            translate([x,y,-45]) {\n                // Main leg\n                difference() {\n                    cylinder(h=90, r1=4, r2=6, center=false);\n                    // Hollow for material saving\n                    translate([0,0,5]) cylinder(h=80, r1=3, r2=5, center=false);\n                }\n                \n                // Decorative joint collar at top\n                translate([0,0,2]) cylinder(h=6, r=7, center=false);\n                \n                // Foot detail\n                translate([0,0,-46]) {\n                    sphere(r=5);\n                    cylinder(h=5, r=4, center=false);\n                }\n            }\n        }\n    }\n}\n\nmodule support_frame() {\n    // Lower support ring\n    translate([0,0,-40]) {\n        difference() {\n            cylinder(h=6, r=48, center=true);\n            cylinder(h=8, r=45, center=true);\n        }\n        \n        // Cross support bars\n        for(angle=[0,90]) {\n            rotate([0,0,angle]) {\n                translate([0,30,0]) cube([60,4,6], center=true);\n                translate([0,-30,0]) cube([60,4,6], center=true);\n            }\n        }\n    }\n}\n\nmodule decorative_center() {\n    // Central decorative element\n    translate([0,0,-20]) {\n        difference() {\n            cylinder(h=15, r=20, center=true);\n            cylinder(h=17, r=17, center=true);\n        }\n        \n        // Carved details\n        for(i=[0:45:359]) {\n            rotate([0,0,i]) {\n                translate([0,19,0]) {\n                    cube([4,2,15], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    table_top();\n    legs();\n    support_frame();\n    decorative_center();\n}",
    "renders": true
  },
  {
    "decorative_art": "crestline",
    "openscad_code": "// Crestline-style decorative shelf unit\n// Inspired by classic furniture design with arched top and paneled sides\n\n// Overall dimensions\nwidth = 80;\ndepth = 40;\nheight = 100;\nwall_thickness = 2;\n\n// Create main body with back panel\nmodule main_body() {\n    difference() {\n        // Main box\n        cube([width, depth, height]);\n        \n        // Hollow out interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([width-2*wall_thickness, depth-2*wall_thickness, height-2*wall_thickness]);\n    }\n}\n\n// Create arched crest at top\nmodule crest_top() {\n    // Main arch\n    translate([width/2, depth/2, height])\n        rotate([90, 0, 0])\n            cylinder(h=width/2, r=height/4, $fn=50);\n    \n    // Remove back half\n    translate([width/2, depth/2, height])\n        rotate([90, 0, 0])\n            translate([0, 0, -height/4])\n                cube([width, height/4, height/4], center=true);\n}\n\n// Create vertical dividers for shelf compartments\nmodule dividers() {\n    // Left divider\n    translate([width/3, 0, wall_thickness])\n        cube([wall_thickness, depth-2*wall_thickness, height-2*wall_thickness]);\n    \n    // Right divider\n    translate([2*width/3, 0, wall_thickness])\n        cube([wall_thickness, depth-2*wall_thickness, height-2*wall_thickness]);\n}\n\n// Create shelves\nmodule shelves() {\n    // Bottom shelf\n    translate([wall_thickness, wall_thickness, wall_thickness])\n        cube([width-2*wall_thickness, depth-2*wall_thickness, wall_thickness]);\n    \n    // Middle shelf\n    translate([wall_thickness, wall_thickness, height/2])\n        cube([width-2*wall_thickness, depth-2*wall_thickness, wall_thickness]);\n    \n    // Top shelf (below arch)\n    translate([wall_thickness, wall_thickness, height-wall_thickness*3])\n        cube([width-2*wall_thickness, depth-2*wall_thickness, wall_thickness]);\n}\n\n// Create decorative panels on sides\nmodule side_panels() {\n    // Left side panel\n    translate([0, 0, height/2])\n        cube([wall_thickness, depth, height/2-wall_thickness]);\n    \n    // Right side panel\n    translate([width-wall_thickness, 0, height/2])\n        cube([wall_thickness, depth, height/2-wall_thickness]);\n}\n\n// Create decorative molding around edges\nmodule molding() {\n    // Front top edge\n    translate([wall_thickness, depth-wall_thickness, height-wall_thickness])\n        cube([width-2*wall_thickness, wall_thickness, wall_thickness]);\n    \n    // Front bottom edge\n    translate([wall_thickness, depth-wall_thickness, wall_thickness])\n        cube([width-2*wall_thickness, wall_thickness, wall_thickness]);\n    \n    // Side edges\n    for(side = [0, width-wall_thickness]) {\n        translate([side, depth-wall_thickness, wall_thickness])\n            cube([wall_thickness, wall_thickness, height-2*wall_thickness]);\n    }\n}\n\n// Create decorative feet\nmodule feet() {\n    // Front left foot\n    translate([wall_thickness*2, wall_thickness*2, 0])\n        cylinder(h=wall_thickness*2, r=wall_thickness*1.5, $fn=20);\n    \n    // Front right foot\n    translate([width-wall_thickness*3, wall_thickness*2, 0])\n        cylinder(h=wall_thickness*2, r=wall_thickness*1.5, $fn=20);\n    \n    // Back left foot\n    translate([wall_thickness*2, depth-wall_thickness*3, 0])\n        cylinder(h=wall_thickness*2, r=wall_thickness*1.5, $fn=20);\n    \n    // Back right foot\n    translate([width-wall_thickness*3, depth-wall_thickness*3, 0])\n        cylinder(h=wall_thickness*2, r=wall_thickness*1.5, $fn=20);\n}\n\n// Combine all components\nunion() {\n    main_body();\n    crest_top();\n    dividers();\n    shelves();\n    side_panels();\n    molding();\n    feet();\n}",
    "renders": true
  },
  {
    "decorative_art": "runway",
    "openscad_code": "// Runway Bench / Display Plinth – realistic style, medium complexity\n// 120 mm long × 40 mm deep × 40 mm high, wall-thickness 2 mm throughout\n// No severe over-angles: 45° max for 3D-printability\n\n// Overall dimensions\nbench_len = 120;\nbench_dep = 40;\nbench_h   = 40;\n\nwall = 2;\n\n$fn = 36;           // smoother cylinders / spheres\n\n// ------------------------------------------\n// Utility module for hollow box with fillet\nmodule hollow_box(l, w, h, wall, top_open=false){\n    difference(){\n        cube([l, w, h]);                       // outer block\n        translate([wall, wall, 0])\n        cube([l-2*wall, w-2*wall, h+1]);       // hollow cavity\n        if(top_open)\n            translate([0, 0, h-wall])\n            cube([l, w, wall+1]);              // open top\n    }\n}\n\n// ------------------------------------------\n// Main bench body – hollow plinth with open top\nmodule bench_body(){\n    hollow_box(bench_len, bench_dep, bench_h, wall, true);\n}\n\n// ------------------------------------------\n// Recessed LED strip surround (decorative detail)\n// Runs along front & back top edges\nmodule led_recess(){\n    recess_w = 3;\n    recess_d = 1.5;\n    for(side=[0,1])           // 0=front, 1=back\n        translate([bench_len*0.05, side ? bench_dep-recess_w : 0, bench_h-1])\n        cube([bench_len*0.9, recess_w, recess_d]);\n}\n\n// ------------------------------------------\n// Support ribs inside hollow body for stiffness\nmodule internal_ribs(){\n    rib_h = bench_h - 2*wall;\n    rib_t = wall;\n    n = 3;                    // three ribs evenly spaced\n    for(i=[1:n-1]){\n        translate([bench_len*i/n - rib_t/2, wall, wall])\n        cube([rib_t, bench_dep-2*wall, rib_h]);\n    }\n}\n\n// ------------------------------------------\n// Bolt caps – decorative, mimicking real furniture joints\nmodule bolt_caps(){\n    cap_d = 6;\n    cap_h = 1;\n    positions = [\n        [10, 10], [10, bench_dep-10],\n        [bench_len-10, 10], [bench_len-10, bench_dep-10]\n    ];\n    for(p = positions)\n        translate([p.x, p.y, 0])\n        difference(){\n            cylinder(h=cap_h+1, d=cap_d);\n            translate([0, 0, -1])\n            cylinder(h=cap_h+2, d=cap_d-2*wall);\n        }\n}\n\n// ------------------------------------------\n// Subtle surface texture (light diamond pattern)\n// Implemented as shallow subtracted grooves\nmodule surface_texture(){\n    groove_w = 1;\n    groove_d = 0.4;\n    spacing  = 6;\n    n_x = floor(bench_len/spacing);\n    n_y = floor(bench_dep/spacing);\n    translate([0, 0, bench_h-0.5]) {\n        for(i=[0:n_x]){\n            translate([i*spacing, 0, 0])\n            cube([groove_w, bench_dep, groove_d]);\n        }\n        for(j=[0:n_y]){\n            translate([0, j*spacing, 0])\n            cube([bench_len, groove_w, groove_d]);\n        }\n    }\n}\n\n// ------------------------------------------\n// Assemble all parts\nunion(){\n    bench_body();\n    internal_ribs();\n    led_recess();\n    bolt_caps();\n    surface_texture();\n}",
    "renders": true
  },
  {
    "decorative_art": "sailwind",
    "openscad_code": "// Sailwind Furniture Item - Decorative Wall-Mounted Sailwind\n// Realistic style, medium complexity\n// Dimensions: 120mm height, 100mm width, 20mm depth\n\n$fn = 32; // Smoother curves for realistic appearance\n\n// Main sailwind assembly\nmodule sailwind() {\n    // Wall mounting bracket\n    union() {\n        // Back mounting plate\n        translate([0, -10, 0])\n            cube([80, 2, 60], center=true);\n        \n        // Top support bracket\n        translate([0, -9, 25])\n            cube([70, 4, 8], center=true);\n        \n        // Bottom support bracket\n        translate([0, -9, -25])\n            cube([70, 4, 8], center=true);\n    }\n    \n    // Central mast post\n    translate([0, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(h=100, d=8, center=true);\n    \n    // Main sail blades\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90])\n            translate([0, 10, 0])\n                sail_blade();\n    }\n    \n    // Decorative hub center\n    translate([0, 10, 0])\n        sphere(d=12);\n    \n    // Structural support arms\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45])\n            translate([0, 5, 0])\n                support_arm();\n    }\n}\n\n// Individual sail blade module\nmodule sail_blade() {\n    // Main blade body\n    difference() {\n        // Outer blade shape\n        translate([0, 15, 0])\n            scale([1, 2.5, 0.3])\n                sphere(d=30);\n        \n        // Inner cutout for lighter weight\n        translate([0, 15, 0])\n            scale([0.7, 2.2, 0.5])\n                sphere(d=20);\n    }\n    \n    // Blade spine reinforcement\n    translate([0, 5, 0])\n        cube([4, 20, 2], center=true);\n    \n    // Decorative end cap\n    translate([0, 30, 0])\n        cylinder(h=3, d=6, center=true);\n}\n\n// Support arm module\nmodule support_arm() {\n    // Main support strut\n    translate([0, 8, 0])\n        cube([3, 14, 2], center=true);\n    \n    // Decorative brace detail\n    translate([0, 8, 1.5])\n        rotate([90, 0, 0])\n            cylinder(h=3, d=5, center=true);\n}\n\n// Generate the complete sailwind\nsailwind();",
    "renders": true
  },
  {
    "decorative_art": "crane",
    "openscad_code": "// Crane Furniture - Decorative Art Piece\n// Medium complexity realistic style\n\n$fn = 50;\n\n// Base dimensions\nbase_len = 80;\nbase_wid = 60;\nbase_height = 8;\npost_height = 120;\nboom_len = 150;\nhook_len = 25;\n\nmodule base() {\n    // Main base platform\n    difference() {\n        cube([base_len, base_wid, base_height], center=true);\n        \n        // Cable routing holes\n        for (i = [-1, 1]) {\n            translate([i * 20, 0, -base_height/2]) {\n                cylinder(h=base_height+1, r=3, center=true);\n            }\n        }\n    }\n    \n    // Base feet\n    for (x = [-base_len/2+10, base_len/2-10]) {\n        for (y = [-base_wid/2+10, base_wid/2-10]) {\n            translate([x, y, -base_height/2]) {\n                cylinder(h=base_height+2, r=6, center=true);\n            }\n        }\n    }\n}\n\nmodule post() {\n    // Main vertical post\n    difference() {\n        cylinder(h=post_height, r=6, center=false);\n        \n        // Decorative grooves\n        for (h = [10:20:post_height-10]) {\n            translate([0, 0, h]) {\n                cylinder(h=2, r=7, center=true);\n            }\n        }\n    }\n    \n    // Support brackets\n    for (angle = [0:120:240]) {\n        rotate([0, 0, angle]) {\n            translate([5, 0, post_height/4]) {\n                difference() {\n                    cube([15, 4, 8], center=true);\n                    translate([7.5, 0, 0]) {\n                        cylinder(h=10, r=2, center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule boom() {\n    // Main boom arm\n    union() {\n        // Boom structure\n        difference() {\n            hull() {\n                translate([0, 0, 0]) {\n                    cylinder(h=boom_len, r=5, center=false);\n                }\n                translate([0, 0, boom_len]) {\n                    cylinder(h=5, r=3, center=false);\n                }\n            }\n            \n            // Lightening holes\n            for (i = [20:20:boom_len-20]) {\n                translate([0, 0, i]) {\n                    rotate([90, 0, 0]) {\n                        cylinder(h=12, r=2.5, center=true);\n                    }\n                }\n            }\n        }\n        \n        // Support cables\n        for (i = [0:30:boom_len-30]) {\n            hull() {\n                translate([0, 0, i]) {\n                    sphere(r=1.5);\n                }\n                translate([0, 0, post_height-10]) {\n                    sphere(r=1.5);\n                }\n            }\n        }\n    }\n}\n\nmodule hook() {\n    // Hook assembly\n    translate([0, 0, boom_len]) {\n        rotate([90, 0, 0]) {\n            // Hook cable\n            cylinder(h=hook_len, r=1.5, center=false);\n            \n            // Hook head\n            translate([0, 0, hook_len]) {\n                difference() {\n                    // Hook body\n                    rotate_extrude(angle=360) {\n                        translate([4, 0, 0]) {\n                            circle(r=2);\n                        }\n                    }\n                    \n                    // Hook opening\n                    translate([0, 4, 0]) {\n                        cube([6, 8, 6], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule operator_cab() {\n    // Operator cabin\n    translate([0, 0, post_height-20]) {\n        difference() {\n            // Cabin body\n            cube([14, 12, 10], center=true);\n            \n            // Windows\n            translate([7.5, 0, 0]) {\n                cube([1, 8, 6], center=true);\n            }\n            translate([-7.5, 0, 0]) {\n                cube([1, 8, 6], center=true);\n            }\n        }\n    }\n}\n\nmodule counterweight() {\n    // Counterweight block\n    translate([0, 0, post_height-15]) {\n        rotate([90, 0, 0]) {\n            difference() {\n                cube([20, 15, 12], center=true);\n                \n                // Detail grooves\n                for (y = [-5, 0, 5]) {\n                    translate([0, y, 0]) {\n                        cube([20, 1, 12], center=true);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    \n    translate([0, 0, base_height/2]) {\n        post();\n        \n        operator_cab();\n        counterweight();\n        \n        translate([0, 0, post_height]) {\n            rotate([0, -30, 0]) {\n                boom();\n                hook();\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "brig",
    "openscad_code": "// Brig Furniture - Realistic Style, Medium Complexity\n// A small decorative brig-style storage cabinet with panel doors and bracket feet\n\n// Overall dimensions\nwidth = 80;\ndepth = 45;\nheight = 60;\nwall_thickness = 2;\n\nmodule cabinet_body() {\n    // Main carcass\n    difference() {\n        // Outer shell\n        cube([width, depth, height], center = true);\n        \n        // Hollow interior\n        translate([0, 0, wall_thickness/2])\n        cube([width - 2*wall_thickness, depth - 2*wall_thickness, height - wall_thickness], center = true);\n    }\n}\n\nmodule feet() {\n    foot_height = 8;\n    foot_width = 12;\n    foot_depth = 8;\n    \n    // Four bracket feet\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (width/2 - foot_width/2), y * (depth/2 - foot_depth/2), -height/2 - foot_height/2]) {\n                // Main foot block\n                cube([foot_width, foot_depth, foot_height], center = true);\n                \n                // Decorative bracket detail\n                translate([0, 0, foot_height/2 - 1])\n                cube([foot_width + 4, foot_depth + 2, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule doors() {\n    door_width = (width - 2*wall_thickness - 4)/2;\n    door_height = height * 0.8;\n    \n    // Left door\n    translate([-door_width/2 - 1, 0, 0]) {\n        difference() {\n            // Door panel\n            translate([0, depth/2 - wall_thickness - 1, 0])\n            cube([door_width, wall_thickness, door_height], center = true);\n            \n            // Panel molding\n            translate([0, 0, 0])\n            cube([door_width - 8, wall_thickness + 0.1, door_height - 8], center = true);\n        }\n        \n        // Handle\n        translate([door_width/2 - 6, depth/2, -door_height/2 + 10])\n        cylinder(h = wall_thickness + 2, r = 2, center = true);\n    }\n    \n    // Right door (mirror of left)\n    translate([door_width/2 + 1, 0, 0]) {\n        difference() {\n            translate([0, depth/2 - wall_thickness - 1, 0])\n            cube([door_width, wall_thickness, door_height], center = true);\n            \n            translate([0, 0, 0])\n            cube([door_width - 8, wall_thickness + 0.1, door_height - 8], center = true);\n        }\n        \n        translate([-door_width/2 + 6, depth/2, -door_height/2 + 10])\n        cylinder(h = wall_thickness + 2, r = 2, center = true);\n    }\n}\n\nmodule top_molding() {\n    // Decorative crown molding\n    translate([0, 0, height/2 + 3])\n    difference() {\n        cube([width + 6, depth + 6, 6], center = true);\n        translate([0, 0, -1])\n        cube([width + 2, depth + 2, 8], center = true);\n    }\n}\n\nmodule back_panel() {\n    // Decorative back panel with vertical slats\n    slat_width = 4;\n    slat_gap = 2;\n    num_slats = floor(width / (slat_width + slat_gap));\n    \n    translate([0, -depth/2 + wall_thickness/2, 0])\n    difference() {\n        // Back panel\n        cube([width - 4, wall_thickness, height - 4], center = true);\n        \n        // Cut grooves for slats\n        for (i = [-num_slats/2:num_slats/2]) {\n            translate([i * (slat_width + slat_gap), 0, 0])\n            cube([slat_gap - 0.5, wall_thickness + 0.2, height - 8], center = true);\n        }\n    }\n}\n\n// Assemble the brig cabinet\nunion() {\n    cabinet_body();\n    feet();\n    top_molding();\n    back_panel();\n    doors();\n}",
    "renders": true
  },
  {
    "decorative_art": "painting",
    "openscad_code": "// Realistic 3D-printable wall painting with ornate wooden frame\n// Overall outer dimensions: 100 x 80 x 12 mm\n// Frame thickness: 4 mm walls around canvas\n// Canvas recess: 2 mm deep\n\nmodule rounded_cube(size, r) {\n    // Simple rounded-cube with spheres at corners\n    hull() {\n        translate([r,r,r]) sphere(r);\n        translate([size.x-r,r,r]) sphere(r);\n        translate([r,size.y-r,r]) sphere(r);\n        translate([size.x-r,size.y-r,r]) sphere(r);\n        translate([r,r,size.z-r]) sphere(r);\n        translate([size.x-r,r,size.z-r]) sphere(r);\n        translate([r,size.y-r,size.z-r]) sphere(r);\n        translate([size.x-r,size.y-r,size.z-r]) sphere(r);\n    }\n}\n\nmodule frame(width, height, depth, thickness, r) {\n    // Outer frame solid block\n    difference() {\n        rounded_cube([width, height, depth], r);\n        // Hollow out inside for canvas\n        translate([thickness, thickness, 2])\n            rounded_cube([width-2*thickness, height-2*thickness, depth], r-1);\n    }\n    \n    // Back panel for stability\n    translate([0, 0, -1])\n        cube([width, height, 2]);\n}\n\nmodule ornament(pos, rot, scale) {\n    // Small decorative leaf-like element\n    translate(pos)\n    rotate([0, 0, rot])\n    scale([scale, scale, scale]) {\n        // Central leaf\n        cylinder(h=1.2, d1=4, d2=1.5, $fn=8);\n        // Side lobes\n        translate([1.2, 0, 0]) rotate([0, 0, 30]) cylinder(h=1, d1=2.5, d2=1, $fn=6);\n        translate([-1.2, 0, 0]) rotate([0, 0, -30]) cylinder(h=1, d1=2.5, d2=1, $fn=6);\n    }\n}\n\nmodule canvas(width, height) {\n    // Recessed canvas panel with painted texture\n    translate([4, 4, 2])\n        cube([width-8, height-8, 1.8]);\n    \n    // Abstract painted strokes\n    for (i=[0:3]) {\n        translate([6 + i*20, 8, 4])\n            rotate([90, 0, 0])\n                cylinder(h=0.2, d=2*(4-i), $fn=20);\n    }\n    for (j=[0:2]) {\n        translate([25 + j*25, 25 + j*15, 4])\n            rotate([90, 0, 0])\n                cylinder(h=0.2, d=3*(3-j), $fn=20);\n    }\n}\n\n// Main assembly\nframe_width = 100;\nframe_height = 80;\nframe_depth = 12;\nframe_thick = 4;\ncorner_r = 6;\n\n// Frame body\nframe(frame_width, frame_height, frame_depth, frame_thick, corner_r);\n\n// Canvas inset\ncanvas(frame_width, frame_height);\n\n// Ornamental corner decorations\nornament([frame_thick, frame_thick, frame_depth-1], 0, 1);\nornament([frame_width-frame_thick, frame_thick, frame_depth-1], 90, 1);\nornament([frame_width-frame_thick, frame_height-frame_thick, frame_depth-1], 180, 1);\nornament([frame_thick, frame_height-frame_thick, frame_depth-1], 270, 1);\n\n// Mid-side ornaments\nornament([frame_width/2, frame_thick, frame_depth-1], 0, 0.8);\nornament([frame_width/2, frame_height-frame_thick, frame_depth-1], 180, 0.8);\nornament([frame_thick, frame_height/2, frame_depth-1], 90, 0.8);\nornament([frame_width-frame_thick, frame_height/2, frame_depth-1], 270, 0.8);\n\n// Keyhole slot for wall mounting\ntranslate([frame_width/2-2, 2, frame_depth/2])\n    rotate([90, 0, 0])\n    cylinder(h=frame_thick, d=6, $fn=20);\ntranslate([frame_width/2-2, 2, frame_depth/2-1])\n    cube([4, 2, 2]);",
    "renders": true
  },
  {
    "decorative_art": "drawing",
    "openscad_code": "// Drawing table for artist with tilted top and storage compartments\n// Overall dimensions: 120mm W x 80mm D x 100mm H\n\n// Main body frame\nmodule table_frame() {\n    // Base frame - 2mm thick walls\n    difference() {\n        // Outer frame\n        cube([120, 80, 100]);\n        \n        // Hollow interior\n        translate([2, 2, 2])\n            cube([116, 76, 96]);\n    }\n}\n\n// Tilting drawing surface (tabletop)\nmodule drawing_surface() {\n    // Main surface\n    translate([10, 5, 85])\n        rotate([15, 0, 0])\n            cube([100, 70, 3]);\n    \n    // Front lip to hold paper\n    translate([10, 5, 82.5])\n        rotate([15, 0, 0])\n            cube([100, 5, 6]);\n}\n\n// Support legs (4 legs with cross-bracing)\nmodule legs() {\n    // Front left leg\n    translate([8, 8, 0])\n        cylinder(h=85, r=4);\n    \n    // Front right leg\n    translate([112, 8, 0])\n        cylinder(h=85, r=4);\n    \n    // Back left leg\n    translate([8, 72, 0])\n        cylinder(h=85, r=4);\n    \n    // Back right leg\n    translate([112, 72, 0])\n        cylinder(h=85, r=4);\n    \n    // Cross braces between legs\n    translate([60, 40, 30])\n        rotate([90, 0, 0])\n            cylinder(h=104, r=2);\n    \n    translate([60, 40, 60])\n        rotate([90, 0, 0])\n            cylinder(h=104, r=2);\n}\n\n// Storage compartments\nmodule storage() {\n    // Left compartment with divider\n    translate([10, 10, 15]) {\n        // Outer box\n        difference() {\n            cube([35, 60, 65]);\n            translate([2, 2, 2])\n                cube([31, 56, 61]);\n        }\n        \n        // Divider shelf\n        translate([2, 2, 22])\n            cube([31, 56, 2]);\n    }\n    \n    // Right compartment with drawer\n    translate([55, 10, 15]) {\n        // Cabinet body\n        difference() {\n            cube([55, 60, 65]);\n            translate([2, 2, 2])\n                cube([51, 56, 61]);\n        }\n        \n        // Drawer front\n        translate([2, 2, 32])\n            cube([51, 56, 4]);\n        \n        // Drawer handle\n        translate([28, 30, 37])\n            cylinder(h=8, r=3);\n    }\n}\n\n// Decorative elements (carved details)\nmodule decorations() {\n    // Side panel pattern\n    for (x = [15:20:105]) {\n        translate([x, 2, 50])\n            cylinder(h=2, r=3);\n    }\n    \n    // Front apron detail\n    for (y = [15:15:65]) {\n        translate([2, y, 45])\n            rotate([0, 90, 0])\n                cylinder(h=2, r=2);\n    }\n    \n    // Corner brackets\n    translate([10, 10, 85])\n        rotate([0, 0, 45])\n            cube([8, 8, 3]);\n    \n    translate([110, 10, 85])\n        rotate([0, 0, -45])\n            cube([8, 8, 3]);\n}\n\n// Main assembly\nunion() {\n    table_frame();\n    legs();\n    drawing_surface();\n    storage();\n    decorations();\n}",
    "renders": true
  },
  {
    "decorative_art": "etching",
    "openscad_code": "// Etching Furniture - Decorative Wall Panel with Frame\n// Realistic style, medium complexity\n// Dimensions: 120mm wide x 90mm tall x 8mm deep\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main frame dimensions\nframe_width = 120;\nframe_height = 90;\nframe_depth = 8;\nframe_thickness = 4;\n\n// Panel dimensions (inside frame)\npanel_width = frame_width - 2 * frame_thickness;\npanel_height = frame_height - 2 * frame_thickness;\npanel_depth = frame_depth - wall_thickness;\n\n// Ornate corner decoration size\ncorner_size = 12;\n\n// Flower decoration parameters\nflower_center_radius = 3;\nflower_petal_length = 6;\nflower_petal_width = 2;\nflower_petals = 8;\n\n// Create the complete etching\nmodule etching_furniture() {\n    // Main frame\n    difference() {\n        // Outer frame\n        cube([frame_width, frame_height, frame_depth], center = true);\n        \n        // Hollow out center\n        translate([0, 0, -wall_thickness/2])\n            cube([panel_width, panel_height, frame_depth + 1], center = true);\n    }\n    \n    // Back panel with etched design\n    translate([0, 0, -frame_depth/2 + wall_thickness/2])\n        cube([panel_width, panel_height, wall_thickness], center = true);\n    \n    // Add ornate corners\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * (panel_width/2 - corner_size/2), \n                      y * (panel_height/2 - corner_size/2), \n                      -frame_depth/2 + wall_thickness + 0.1])\n                corner_decoration(corner_size, corner_size, wall_thickness * 0.8);\n        }\n    }\n    \n    // Add central flower decoration\n    translate([0, 0, -frame_depth/2 + wall_thickness + 0.1])\n        flower_decoration(flower_center_radius, flower_petal_length, \n                         flower_petal_width, flower_petals, wall_thickness * 0.8);\n    \n    // Add vertical decorative bars\n    for (i = [-1, 0, 1]) {\n        if (i != 0) {\n            translate([i * (panel_width/4), 0, \n                     -frame_depth/2 + wall_thickness + 0.1])\n                cube([wall_thickness * 1.5, panel_height * 0.7, wall_thickness * 0.6], \n                     center = true);\n        }\n    }\n    \n    // Add horizontal decorative bar\n    translate([0, 0, \n             -frame_depth/2 + wall_thickness + 0.1])\n        cube([panel_width * 0.7, wall_thickness * 1.5, wall_thickness * 0.6], \n             center = true);\n}\n\n// Corner decoration module with floral pattern\nmodule corner_decoration(w, h, depth) {\n    difference() {\n        // Base corner shape\n        union() {\n            cube([w, wall_thickness, depth]);\n            cube([wall_thickness, h, depth]);\n        }\n        \n        // Cut decorative circles in corner\n        for (i = [1, 2]) {\n            translate([i * w/3, i * h/3, -0.1])\n                cylinder(r = wall_thickness * 0.8, h = depth + 0.2, $fn = 16);\n        }\n    }\n}\n\n// Flower decoration module\nmodule flower_decoration(center_r, petal_l, petal_w, petals, depth) {\n    // Flower center\n    translate([0, 0, -0.1])\n        cylinder(r = center_r, h = depth + 0.2, $fn = 16);\n    \n    // Flower petals\n    for (i = [0:petals-1]) {\n        rotate([0, 0, i * 360/petals])\n            translate([0, petal_l/2, 0])\n                cube([petal_w, petal_l, depth + 0.2], center = true);\n    }\n    \n    // Inner circle detail\n    translate([0, 0, depth/2 - 0.1])\n        cylinder(r = center_r * 1.2, h = depth/2 + 0.2, $fn = 16);\n}\n\n// Generate the etching\netching_furniture();",
    "renders": true
  },
  {
    "decorative_art": "pottery",
    "openscad_code": "// Medium-complexity pottery display stand\n// Realistic style, 3D-printable, ~120 mm tall\n\n// Parameters\nbase_d = 90;            // Footprint diameter\nbase_h = 8;             // Base thickness\npost_d = 22;            // Central post diameter\npost_h = 95;            // Central post height\nring_d = 65;            // Ring diameter for pot rest\nring_t = 4;             // Ring thickness\nring_h = 12;            // Ring height\nwall = 2.2;             // Minimum wall thickness for printing\nnum_legs = 3;           // Number of support legs\nleg_w = 6;              // Leg width\nleg_h = 12;             // Leg height (decorative band)\n\n// Base with decorative ring\nmodule base() {\n    difference() {\n        // Solid base\n        cylinder(d = base_d, h = base_h, $fn = 50);\n        // Chamfer underside\n        translate([0, 0, -0.01])\n            cylinder(d1 = base_d - 6, d2 = base_d, h = 2.5, $fn = 50);\n        // Central hole for post\n        translate([0, 0, -0.01])\n            cylinder(d = post_d, h = base_h + 0.02, $fn = 30);\n        // Cable notch (optional for lighting)\n        translate([base_d/2 - 4, 0, -0.01])\n            cube([8, 8, base_h + 0.02], center = true);\n    }\n}\n\n// Central support post\nmodule post() {\n    union() {\n        // Main cylinder\n        cylinder(d = post_d, h = post_h, $fn = 30);\n        // Decorative collar at top\n        translate([0, 0, post_h - 5])\n            cylinder(d1 = post_d, d2 = post_d + 6, h = 5, $fn = 30);\n    }\n}\n\n// Decorative support ring for pottery\nmodule pot_ring() {\n    difference() {\n        // Outer ring\n        cylinder(d = ring_d, h = ring_h, $fn = 50);\n        // Inner hole\n        translate([0, 0, -0.01])\n            cylinder(d = ring_d - 2*ring_t, h = ring_h + 0.02, $fn = 50);\n        // Top chamfer\n        translate([0, 0, ring_h - 2])\n            cylinder(d1 = ring_d - 2*ring_t - 2, d2 = ring_d - 2*ring_t, h = 2.5, $fn = 50);\n    }\n}\n\n// Decorative legs for stability\nmodule legs() {\n    for(i = [0 : num_legs - 1]) {\n        rotate([0, 0, i * 360/num_legs])\n        translate([(base_d - leg_w)/2, 0, 0])\n            rotate([90, 0, 0])\n                cylinder(d = leg_w, h = leg_h, $fn = 20);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Legs\n    translate([0, 0, base_h])\n        legs();\n    \n    // Post\n    translate([0, 0, base_h])\n        post();\n    \n    // Pot ring\n    translate([0, 0, base_h + post_h - ring_h/2])\n        pot_ring();\n}",
    "renders": true
  },
  {
    "decorative_art": "weaving",
    "openscad_code": "// Woven Stool – 3D-printable decorative furniture piece\n// Height ~60 mm, seat Ø ~80 mm, printable without supports\n\n// Overall dimensions\nstool_h = 60;         // total height\nseat_d = 80;          // seat diameter\nleg_t = 4;            // leg thickness\nwall_t = 2;           // 3D-print wall thickness\nweave_t = 2;          // weave strand thickness\nseat_th = 5;          // seat thickness\n\n// Helper: round-cornered box\nmodule rounded_box(x,y,z,r=2)\n{\n    hull() {\n        for(dx=[0,x], dy=[0,y], dz=[0,z])\n            translate([dx,dy,dz]) sphere(r);\n    }\n}\n\n// Seat frame (hollow disk)\nmodule seat_frame()\n{\n    difference() {\n        cylinder(h=seat_th, d=seat_d);\n        translate([0,0,-0.01])\n            cylinder(h=seat_th+0.02, d=seat_d-2*wall_t);\n    }\n}\n\n// Single strand of the weave\nmodule weave_strand(len,angle)\n{\n    rotate([0,0,angle])\n        translate([-len/2,-weave_t/2,seat_th])\n            cube([len,weave_t,weave_t]);\n}\n\n// Weave lattice on seat\nmodule seat_weave()\n{\n    for(i=[-3:1:3])\n        weave_strand(seat_d-10, i*30);\n    for(i=[-3:1:3])\n        weave_strand(seat_d-10, i*30+90);\n}\n\n// Single leg\nmodule leg()\n{\n    // simple tapered rectangular leg\n    linear_extrude(height=stool_h-seat_th, scale=[0.8,0.8], center=false)\n        square([leg_t,leg_t], center=true);\n}\n\n// Four legs attached to seat\nmodule legs()\n{\n    r = (seat_d-leg_t)/2;\n    for(a=[0:90:270])\n        rotate([0,0,a])\n            translate([r,r,seat_th])\n                leg();\n}\n\n// Decorative foot ring for stability\nmodule foot_ring()\n{\n    difference() {\n        cylinder(h=wall_t, d=seat_d-10);\n        translate([0,0,-0.01])\n            cylinder(h=wall_t+0.02, d=seat_d-10-2*wall_t);\n    }\n}\n\n// Assembly\nunion() {\n    seat_frame();\n    seat_weave();\n    legs();\n    translate([0,0,-wall_t]) foot_ring();\n}",
    "renders": true
  },
  {
    "decorative_art": "calligraphy",
    "openscad_code": "// Calligraphy Desk - A decorative miniature desk shaped like flowing calligraphy\n// Overall dimensions: 120mm wide x 80mm deep x 100mm high\n\n// Parameters\nwall_thickness = 2;\ndesk_width = 120;\ndesk_depth = 80;\ndesk_height = 100;\nleg_height = 75;\ntop_thickness = 4;\n\n// Main desk body\nmodule desk_body() {\n    // Base frame - flowing calligraphic shape\n    difference() {\n        // Main flowing shape\n        union() {\n            // Left flowing leg structure\n            translate([-40, 0, 0]) {\n                rotate([0, 0, -15])\n                scale([1, 0.7, 1])\n                cylinder(h=leg_height, d1=30, d2=20, $fn=32);\n            }\n            \n            // Right flowing leg structure\n            translate([40, 0, 0]) {\n                rotate([0, 0, 15])\n                scale([1, 0.7, 1])\n                cylinder(h=leg_height, d1=30, d2=20, $fn=32);\n            }\n            \n            // Connecting base\n            translate([0, -30, leg_height/2-10])\n            scale([1.2, 0.3, 0.2])\n            sphere(d=80, $fn=32);\n            \n            // Central support pillar\n            translate([0, 0, leg_height/2])\n            scale([0.3, 0.8, 1])\n            sphere(d=50, $fn=32);\n        }\n        \n        // Hollow out interior for 3D printing\n        translate([0, 0, leg_height/2])\n        scale([0.9, 0.9, 0.9])\n        cube([50, 50, leg_height+10], center=true);\n    }\n}\n\n// Desktop with calligraphic curves\nmodule desktop() {\n    // Main desktop surface\n    difference() {\n        // Flowing desktop shape\n        union() {\n            // Main desktop\n            translate([0, 0, leg_height])\n            scale([1, 0.8, 0.1])\n            sphere(d=desk_width, $fn=32);\n            \n            // Front lip with calligraphic curve\n            translate([0, -35, leg_height-2])\n            rotate([0, 15, 0])\n            scale([1.1, 0.3, 0.3])\n            cylinder(h=30, d1=20, d2=5, $fn=16);\n            \n            // Back curve\n            translate([0, 35, leg_height-2])\n            rotate([0, -15, 0])\n            scale([1.1, 0.3, 0.3])\n            cylinder(h=30, d1=5, d2=20, $fn=16);\n        }\n        \n        // Hollow out desktop\n        translate([0, 0, leg_height+1])\n        scale([0.9, 0.7, 0.5])\n        sphere(d=desk_width-10, $fn=32);\n    }\n}\n\n// Decorative calligraphic details on legs\nmodule leg_details() {\n    for(i = [0:30:330]) {\n        rotate([0, 0, i])\n        translate([-35, 0, leg_height/2])\n        rotate([90, 0, 0])\n        scale([0.5, 2, 0.5])\n        cylinder(h=20, d=3, $fn=8);\n        \n        rotate([0, 0, -i])\n        translate([35, 0, leg_height/2])\n        rotate([90, 0, 0])\n        scale([0.5, 2, 0.5])\n        cylinder(h=20, d=3, $fn=8);\n    }\n}\n\n// Paper support rail (calligraphic pen rest)\nmodule paper_support() {\n    translate([0, 25, leg_height+5])\n    rotate([0, 10, 0])\n    scale([0.8, 0.1, 0.1])\n    sphere(d=desk_width-20, $fn=32);\n    \n    // Pen rest grooves\n    for(x = [-40:20:40]) {\n        translate([x, 28, leg_height+5])\n        cube([3, 5, 1], center=true);\n    }\n}\n\n// Inkwell holder (decorative element)\nmodule inkwell_holder() {\n    translate([-30, 0, leg_height+2])\n    difference() {\n        cylinder(h=8, d=15, $fn=32);\n        translate([0, 0, -1])\n        cylinder(h=10, d=11, $fn=32);\n    }\n}\n\n// Assemble the calligraphy desk\nunion() {\n    desk_body();\n    desktop();\n    leg_details();\n    paper_support();\n    inkwell_holder();\n}",
    "renders": true
  },
  {
    "decorative_art": "mosaic",
    "openscad_code": "// Mosaic Stool – OpenSCAD\n// Overall height 70 mm, seat diameter 140 mm\n// Wall thickness 2 mm, printable without supports\n\nseat_d = 140;            // seat diameter\nleg_h = 50;              // leg height\nwall = 2;                // wall thickness\ntile = 4;                // small square tile size\ngap = 1.2;               // grout gap between tiles\n\n// Main seat shell\nmodule seat_shell() {\n    difference() {\n        cylinder(h = 10, d = seat_d, center = true, $fn = 90);\n        translate([0, 0, -1])\n            cylinder(h = 12, d = seat_d - 2*wall, center = true, $fn = 90);\n    }\n}\n\n// Structural ring under seat for strength\nmodule ring() {\n    difference() {\n        cylinder(h = 8, d = seat_d - 4, $fn = 90);\n        translate([0, 0, -1])\n            cylinder(h = 10, d = seat_d - 4 - 2*wall, $fn = 90);\n    }\n}\n\n// Single square mosaic tile\nmodule single_tile() {\n    color(\"slateblue\")\n        cube([tile, tile, wall + 1], center = true);\n}\n\n// Grout line (negative for subtraction)\nmodule grout_line() {\n    cube([tile + gap, gap, wall + 3], center = true);\n}\n\n// Mosaic pattern on the seat top\nmodule mosaic_top() {\n    difference() {\n        // solid seat surface\n        translate([0, 0, 5])\n            cylinder(h = wall, d = seat_d - 4, $fn = 90);\n        \n        // cut grout grid\n        for (i = [-7:7])\n            translate([0, i*(tile + gap), 0])\n                grout_line();\n        for (j = [-7:7])\n            rotate([0, 0, 90])\n                translate([0, j*(tile + gap), 0])\n                    grout_line();\n    }\n    \n    // individual tiles\n    for (i = [-7:7])\n        for (j = [-7:7]) {\n            if (pow(i,2) + pow(j,2) < pow((seat_d/2 - 6)/(tile + gap), 2))\n                translate([i*(tile + gap), j*(tile + gap), 5 + wall/2])\n                    single_tile();\n        }\n}\n\n// Simple cylindrical leg\nmodule leg() {\n    cylinder(h = leg_h, d1 = 12, d2 = 10, $fn = 40);\n}\n\n// Decorative foot ring connecting legs\nmodule foot_ring() {\n    difference() {\n        cylinder(h = 4, d = seat_d*0.8, $fn = 90);\n        translate([0, 0, -1])\n            cylinder(h = 6, d = seat_d*0.8 - 2*wall, $fn = 90);\n    }\n}\n\n// Full stool assembly\nunion() {\n    // seat parts\n    translate([0, 0, leg_h + 5]) {\n        seat_shell();\n        mosaic_top();\n    }\n    \n    // structural ring under seat\n    translate([0, 0, leg_h + 1])\n        ring();\n    \n    // legs (three for stability)\n    for (a = [0:120:240])\n        rotate([0, 0, a])\n            translate([seat_d*0.36, 0, leg_h/2])\n                leg();\n    \n    // foot ring\n    translate([0, 0, 2])\n        foot_ring();\n}",
    "renders": true
  },
  {
    "decorative_art": "fresco",
    "openscad_code": "// Fresco Furniture - Decorative Wall Panel with Frame\n// Medium complexity realistic style with 3D printable features\n\n$fn = 32;\n\nmodule fresco_panel() {\n    // Main panel body (optimized for 3D printing - flat back)\n    difference() {\n        // Base panel slab\n        cube([80, 60, 4], center=true);\n        \n        // Recessed center area for fresco\n        translate([0, 0, 1])\n            cube([74, 54, 3], center=true);\n    }\n}\n\nmodule frame_profile() {\n    // Ornate frame cross-section for sweep\n    difference() {\n        // Main frame thickness\n        square([6, 12]);\n        \n        // Inner decorative groove\n        translate([2, 2])\n            square([2, 8]);\n        \n        // Outer decorative ridge\n        translate([0, 10])\n            square([6, 2]);\n    }\n}\n\nmodule ornate_frame() {\n    // Bottom frame piece\n    translate([-40, -32, 2])\n        linear_extrude(height=80)\n            frame_profile();\n    \n    // Top frame piece\n    translate([-40, 20, 2])\n        linear_extrude(height=80)\n            frame_profile();\n    \n    // Left frame piece\n    rotate([0, 0, 90])\n        translate([-30, -40, 2])\n            linear_extrude(height=60)\n                frame_profile();\n    \n    // Right frame piece\n    rotate([0, 0, 90])\n        translate([30, -40, 2])\n            linear_extrude(height=60)\n                frame_profile();\n}\n\nmodule decorative_motif(x, y, scale) {\n    translate([x, y, 2.1])\n    scale([scale, scale, 1])\n    union() {\n        // Central rosette\n        cylinder(h=1, r=3, center=true);\n        \n        // Petals around rosette\n        for(i=[0:45:315]) {\n            rotate([0, 0, i])\n            translate([5, 0, 0])\n            cylinder(h=1, r=2, center=true);\n        }\n        \n        // Connecting ring\n        cylinder(h=1, r=7, center=true);\n    }\n}\n\nmodule fresco_details() {\n    // Classical fresco elements in bas-relief\n    \n    // Central medallion\n    translate([0, 0, 2.1])\n    difference() {\n        cylinder(h=2, r=15, center=true);\n        cylinder(h=2.1, r=12, center=true);\n    }\n    \n    // Corner decorations\n    decorative_motif(-25, -15, 0.8);\n    decorative_motif(25, -15, 0.8);\n    decorative_motif(-25, 15, 0.8);\n    decorative_motif(25, 15, 0.8);\n    \n    // Side scrollwork\n    module scroll_element(offset_x, offset_y, rotation) {\n        translate([offset_x, offset_y, 2.1])\n        rotate([0, 0, rotation])\n        for(i=[0:30:180]) {\n            rotate([0, 0, i])\n            translate([10 + i/10, 0, 0])\n            cylinder(h=1, r=1.5, center=true);\n        }\n    }\n    \n    scroll_element(-35, 0, 0);\n    scroll_element(35, 0, 180);\n    scroll_element(0, -22, 90);\n    scroll_element(0, 22, -90);\n    \n    // Classical pattern border\n    translate([0, 0, 2.1])\n    difference() {\n        cube([70, 50, 1], center=true);\n        cube([66, 46, 1.1], center=true);\n    }\n    \n    // Inner pattern details\n    for(x=[-25:10:25]) {\n        for(y=[-15:10:15]) {\n            translate([x, y, 3.1])\n            cylinder(h=0.5, r=1, center=true);\n        }\n    }\n}\n\nmodule hanging_hardware() {\n    // Keyhole hangers for wall mounting\n    translate([-30, 0, 2])\n    difference() {\n        cube([8, 4, 2], center=true);\n        translate([2, 0, -1])\n            cylinder(h=5, r=1.5, center=true);\n    }\n    \n    translate([30, 0, 2])\n    difference() {\n        cube([8, 4, 2], center=true);\n        translate([-2, 0, -1])\n            cylinder(h=5, r=1.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    fresco_panel();\n    ornate_frame();\n    fresco_details();\n    hanging_hardware();\n}",
    "renders": true
  },
  {
    "decorative_art": "stainedglass",
    "openscad_code": "// Stained-glass decorative side table (medium complexity)\n// 100 mm diameter top, 120 mm height\n// 3D-printable with 2 mm walls and minimal overhangs\n\n$fn = 60;\n\n// Overall dimensions\ntable_h = 120;\ntable_top_d = 100;\ntable_top_t = 5;\nleg_t = 4;\nframe_w = 4;\n\n// Module: hexagon cell for stained-glass pattern\nmodule hex_cell(r_outer, r_inner, h) {\n    difference() {\n        cylinder(h = h, r = r_outer, center = true);\n        cylinder(h = h + 0.1, r = r_inner, center = true);\n    }\n}\n\n// Module: decorative frame ring\nmodule frame_ring(od, id, h) {\n    difference() {\n        cylinder(h = h, d = od, center = true);\n        cylinder(h = h + 0.1, d = id, center = true);\n    }\n}\n\n// Table top with stained-glass pattern\nmodule table_top() {\n    // Solid top base\n    color(\"darkslategray\")\n    difference() {\n        cylinder(h = table_top_t, d = table_top_d);\n        translate([0, 0, -0.1])\n            cylinder(h = table_top_t + 0.2, d = table_top_d - 8);\n    }\n\n    // Stained-glass hexagonal pattern\n    for (r = [10:10:35]) {\n        for (a = [0:30:359]) {\n            translate([r * cos(a), r * sin(a), table_top_t/2])\n                rotate([0, 0, a])\n                color([0.9, 0.5, 0.5])\n                hex_cell(5, 3, table_top_t + 0.1);\n        }\n    }\n\n    // Central rosette\n    translate([0, 0, table_top_t/2])\n        color([0.2, 0.4, 0.9])\n        difference() {\n            cylinder(h = table_top_t + 0.1, d = 16);\n            cylinder(h = table_top_t + 0.2, d = 12);\n        }\n}\n\n// Leg with stained-glass strip\nmodule leg() {\n    // Structural leg\n    color(\"dimgray\")\n    cube([leg_t, leg_t, table_h - table_top_t], center = true);\n\n    // Stained-glass inlay\n    translate([0, 0, (table_h - table_top_t)/2 - 10])\n        color([0.5, 0.7, 0.2])\n        cube([leg_t + 0.1, leg_t - 1, 20], center = true);\n}\n\n// Decorative stretcher frame\nmodule stretcher() {\n    height = (table_h - table_top_t) * 0.4;\n    color(\"dimgray\")\n    rotate([90, 0, 0])\n    frame_ring(table_top_d - 10, table_top_d - 10 - 2*frame_w, frame_w);\n}\n\n// Assembly\ntable_top();\n\n// Four legs at corners\nfor (ang = [45, 135, 225, 315]) {\n    translate([(table_top_d/2 - 10) * cos(ang),\n               (table_top_d/2 - 10) * sin(ang),\n               -table_h/2 + table_top_t/2])\n        rotate([0, 0, ang])\n        leg();\n}\n\n// Lower stretcher\ntranslate([0, 0, -table_h + table_top_t + 30])\n    stretcher();",
    "renders": true
  },
  {
    "decorative_art": "woodcarving",
    "openscad_code": "// Carved Wooden Keepsake Box (Medium Complexity Woodcarving)\n// Dimensions: 80mm x 50mm x 40mm\n// Wall thickness: 2mm for 3D printing\n\n$fn = 32;\n\nmodule box_body() {\n    difference() {\n        // Main box\n        cube([80, 50, 40], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cube([76, 46, 38], center = true);\n    }\n}\n\nmodule carved_feet() {\n    for(x = [-35, 35]) {\n        for(y = [-20, 20]) {\n            translate([x, y, -21])\n                difference() {\n                    // Foot base\n                    cylinder(h = 6, r1 = 6, r2 = 4);\n                    \n                    // Carved recess\n                    translate([0, 0, 2])\n                        cylinder(h = 4, r1 = 4, r2 = 2);\n                    \n                    // Decorative cut\n                    rotate([0, 90, 0])\n                        cylinder(h = 8, r = 1);\n                }\n        }\n    }\n}\n\nmodule carved_sides() {\n    // Front and back panels\n    for(side = [-1, 1]) {\n        translate([0, side * 25, 10])\n            difference() {\n                // Panel base\n                cube([76, 2, 18], center = true);\n                \n                // Carved diamond pattern\n                for(i = [-2:2]) {\n                    translate([i * 15, 0, 0])\n                        rotate([0, 90, 45])\n                            cylinder(h = 3, r1 = 5, r2 = 0);\n                }\n            }\n    }\n    \n    // Left and right panels\n    for(side = [-1, 1]) {\n        translate([side * 40, 0, 10])\n            difference() {\n                // Panel base\n                cube([2, 46, 18], center = true);\n                \n                // Vertical carved lines\n                for(i = [-1:1]) {\n                    translate([0, i * 15, 0])\n                        cube([2, 2, 16], center = true);\n                }\n            }\n    }\n}\n\nmodule hinged_lid() {\n    translate([0, 0, 22])\n        union() {\n            // Lid base\n            cube([82, 52, 4], center = true);\n            \n            // Carved top pattern\n            for(x = [-30:15:30]) {\n                for(y = [-20:10:20]) {\n                    translate([x, y, 2.5])\n                        difference() {\n                            cylinder(h = 1.5, r = 6);\n                            cylinder(h = 1.5, r = 4);\n                        }\n                }\n            }\n            \n            // Hinge detail\n            translate([0, -27, 0])\n                cube([20, 4, 6], center = true);\n                \n            // Handle\n            translate([0, 0, 3])\n                difference() {\n                    cylinder(h = 8, r = 4);\n                    cylinder(h = 9, r = 2);\n                }\n        }\n}\n\nmodule decorative_corners() {\n    for(x = [-38, 38]) {\n        for(y = [-23, 23]) {\n            translate([x, y, 15])\n                cylinder(h = 25, r = 3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    box_body();\n    carved_feet();\n    carved_sides();\n    decorative_corners();\n    hinged_lid();\n}",
    "renders": true
  },
  {
    "decorative_art": "enameling",
    "openscad_code": "// Enameling Cabinet - Medium Complexity\n// Realistic style with decorative enamel panel details\n// Dimensions: 120mm (W) x 60mm (D) x 150mm (H)\n\nmodule cabinet_frame() {\n    // Main frame structure\n    difference() {\n        // Outer shell with 2mm walls\n        cube([120, 60, 150], center=true);\n        translate([0, 0, 2])\n            cube([116, 56, 146], center=true);\n    }\n    \n    // Base plinth\n    translate([0, 0, -75])\n        cube([124, 64, 8], center=true);\n}\n\nmodule enamel_panel(x_pos, y_pos, z_pos, width, height) {\n    // Recessed panel area\n    translate([x_pos, y_pos, z_pos]) {\n        difference() {\n            cube([width, 2, height], center=true);\n            translate([0, 0, 0])\n                cube([width-4, 2, height-4], center=true);\n        }\n        \n        // Decorative enamel pattern - flower motif\n        for (i = [-1, 0, 1]) {\n            translate([i*8, 0, 0])\n                cylinder(h=2.1, r=3, center=true);\n            translate([i*4, 0, 8])\n                cylinder(h=2.1, r=2, center=true);\n            translate([i*4, 0, -8])\n                cylinder(h=2.1, r=2, center=true);\n        }\n    }\n}\n\nmodule door() {\n    // Door assembly\n    translate([0, 30, 0]) {\n        // Door panel\n        difference() {\n            cube([50, 2, 80], center=true);\n            translate([0, 0, 0])\n                cube([46, 2.1, 76], center=true);\n        }\n        \n        // Enamel panels on door\n        enamel_panel(0, 1.1, 20, 40, 30);\n        enamel_panel(0, 1.1, -20, 40, 30);\n        \n        // Door handle\n        translate([15, 2, 0])\n            rotate([90, 0, 0])\n                cylinder(h=15, r=3, center=true);\n    }\n}\n\nmodule legs() {\n    // Four turned legs\n    for (x = [-50, 50]) {\n        for (y = [-20, 20]) {\n            translate([x, y, -83]) {\n                cylinder(h=16, r=4);\n                translate([0, 0, 8])\n                    cylinder(h=8, r=3.5);\n            }\n        }\n    }\n}\n\nmodule back_panel() {\n    // Decorative back panel with enamel details\n    translate([0, -30, 0]) {\n        difference() {\n            cube([116, 2, 140], center=true);\n            translate([0, 0, 0])\n                cube([112, 2.1, 136], center=true);\n        }\n        \n        // Central enamel medallion\n        enamel_panel(0, 1.1, 0, 60, 60);\n    }\n}\n\nmodule top_detail() {\n    // Decorative top molding\n    translate([0, 0, 77]) {\n        cube([124, 64, 4], center=true);\n        translate([0, 0, 2])\n            cube([120, 60, 6], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    cabinet_frame();\n    legs();\n    door();\n    back_panel();\n    top_detail();\n    \n    // Side enamel panels\n    rotate([0, 0, 90])\n        translate([30, 0, 0])\n            enamel_panel(0, 1.1, 0, 60, 100);\n    \n    rotate([0, 0, -90])\n        translate([30, 0, 0])\n            enamel_panel(0, 1.1, 0, 60, 100);\n}",
    "renders": true
  },
  {
    "decorative_art": "illumination",
    "openscad_code": "// Table-top Art-Deco lamp with integrated LED diffuser\n// Dimensions ~120 mm tall, ~100 mm wide, 3D-printable\n\n$fn = 50;          // Smooth curves\nwall = 2;          // Uniform 2 mm wall thickness\nscaleFactor = 1;   // Easy resizing for printing\n\nmodule base() {\n    // Weighted circular base Ø100 mm × 12 mm\n    difference() {\n        cylinder(h = 12, d = 100);\n        translate([0,0,-1]) cylinder(h = 14, d = 96); // hollow core\n    }\n}\n\nmodule stem() {\n    // Central post Ø20 mm × 60 mm\n    difference() {\n        cylinder(h = 60, d = 20);\n        translate([0,0,-1]) cylinder(h = 62, d = 16);\n    }\n}\n\nmodule shade() {\n    // Flared art-deco shade, 100 mm across\n    difference() {\n        union() {\n            cylinder(h1 = 40, h2 = 25, r1 = 50, r2 = 40); // outer cone\n            // Decorative ribs every 30°\n            for (a = [0:30:359]) {\n                rotate([0,0,a]) translate([42,0,20]) cube([4, 4, 25], center=true);\n            }\n        }\n        // Inner cavity for LED diffuser\n        cylinder(h1 = 38, h2 = 23, r1 = 48, r2 = 38);\n    }\n}\n\nmodule diffuser() {\n    // Frosted LED diffuser disc Ø90 mm × 2 mm\n    translate([0,0,22]) cylinder(h = 2, d = 90);\n}\n\nmodule switch_housing() {\n    // Tiny switch enclosure on stem Ø10 mm × 8 mm\n    translate([0,-12,30]) rotate([90,0,0]) difference() {\n        cylinder(h = 10, d = 12);\n        translate([0,0,-1]) cylinder(h = 12, d = 8);\n    }\n}\n\nmodule cable_slot() {\n    // 4 mm slot in base for USB-C cable\n    translate([0,-48,-1]) cube([8, 10, 14], center=true);\n}\n\n// Assembly\nscale([scaleFactor,scaleFactor,scaleFactor]) {\n    base();\n    cable_slot();\n    translate([0,0,12]) stem();\n    translate([0,0,72]) shade();\n    translate([0,0,72]) diffuser();\n    translate([0,0,42]) switch_housing();\n}",
    "renders": true
  },
  {
    "decorative_art": "engraving",
    "openscad_code": "// Engraved Picture Frame Stand - Realistic Style\n// Medium complexity decorative furniture piece\n// Overall dimensions: 120mm x 80mm x 25mm\n\n// Parameters\nframe_width = 120;\nframe_height = 80;\nframe_depth = 8;\nwall_thick = 2;\nstand_angle = 15;\n\n// Main frame structure\nmodule frame() {\n    difference() {\n        // Outer frame\n        cube([frame_width, frame_height, frame_depth]);\n        \n        // Inner cutout for picture\n        translate([wall_thick, wall_thick, -1])\n            cube([frame_width-2*wall_thick, frame_height-2*wall_thick, frame_depth+2]);\n        \n        // Front bevel\n        translate([wall_thick/2, wall_thick/2, frame_depth-wall_thick])\n            cube([frame_width-wall_thick, frame_height-wall_thick, wall_thick+1]);\n    }\n}\n\n// Decorative corner ornaments\nmodule corner_ornament(pos_x, pos_y) {\n    translate([pos_x, pos_y, frame_depth]) {\n        // Base scroll\n        difference() {\n            cylinder(h=wall_thick, r=6, $fn=32);\n            translate([0, 0, -1])\n                cylinder(h=wall_thick+2, r=4, $fn=32);\n        }\n        \n        // Scroll details\n        for(i=[0:3]) {\n            rotate([0, 0, i*90])\n                translate([3, 0, wall_thick/2])\n                    rotate([90, 0, 0])\n                        cylinder(h=4, r1=1, r2=0.5, $fn=16);\n        }\n    }\n}\n\n// Engraved floral pattern\nmodule floral_engraving() {\n    // Center flower\n    translate([frame_width/2, frame_height/2, frame_depth-wall_thick]) {\n        for(petals=[0:5]) {\n            rotate([0, 0, petals*60])\n                translate([8, 0, 0])\n                    scale([1, 0.5, 0.3])\n                        sphere(r=3, $fn=16);\n        }\n        \n        // Flower center\n        sphere(r=2, $fn=16);\n    }\n    \n    // Side vines\n    for(side=[-1, 1]) {\n        translate([frame_width/2 + side*25, frame_height/2, frame_depth-wall_thick]) {\n            for(leaf=[0:3]) {\n                rotate([0, 0, side*leaf*30])\n                    translate([leaf*3, 0, 0])\n                        scale([0.8, 0.4, 0.3])\n                            sphere(r=2.5, $fn=16);\n            }\n        }\n    }\n}\n\n// Supporting stand\nmodule stand() {\n    translate([frame_width/2, frame_height, 0]) {\n        rotate([stand_angle, 0, 0]) {\n            // Main support\n            translate([-5, 0, 0])\n                cube([10, 20, wall_thick]);\n            \n            // Stabilizing foot\n            translate([-15, 19, -2])\n                cube([30, 4, wall_thick+4]);\n        }\n        \n        // Hinge detail\n        translate([0, -3, frame_depth/2])\n            rotate([90, 0, 0])\n                cylinder(h=frame_depth, r=3, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Main frame\n    frame();\n    \n    // Corner ornaments\n    corner_ornament(wall_thick, wall_thick);\n    corner_ornament(frame_width-wall_thick, wall_thick);\n    corner_ornament(wall_thick, frame_height-wall_thick);\n    corner_ornament(frame_width-wall_thick, frame_height-wall_thick);\n    \n    // Engraved details\n    floral_engraving();\n    \n    // Supporting stand\n    stand();\n}\n\n// Picture placeholder (visualization only)\n%translate([wall_thick+2, wall_thick+2, frame_depth-wall_thick-1])\n    cube([frame_width-2*wall_thick-4, frame_height-2*wall_thick-4, 1]);",
    "renders": true
  },
  {
    "decorative_art": "lithography",
    "openscad_code": "// Lithography printing press - medium complexity realistic style\n// Overall dimensions: 120 x 80 x 100 mm\n\n$fn = 32;\n\n// Main assembly\nmodule lithography_press() {\n    // Base frame\n    translate([0, 0, 10]) base_frame();\n    \n    // Printing bed\n    translate([0, 0, 30]) printing_bed();\n    \n    // Vertical posts\n    translate([-45, -30, 20]) vertical_post();\n    translate([45, -30, 20]) vertical_post();\n    translate([-45, 30, 20]) vertical_post();\n    translate([45, 30, 20]) vertical_post();\n    \n    // Top frame\n    translate([0, 0, 90]) top_frame();\n    \n    // Press mechanism\n    translate([0, 0, 95]) press_mechanism();\n    \n    // Decorative lithographic stone\n    translate([0, 0, 35]) lithographic_stone();\n    \n    // Side supports\n    translate([-55, 0, 20]) side_support();\n    translate([55, 0, 20]) side_support();\n}\n\n// Base frame with joints\nmodule base_frame() {\n    difference() {\n        // Main base\n        cube([110, 70, 20], center = true);\n        \n        // Decorative cutouts\n        for (x = [-40, 0, 40]) {\n            translate([x, 0, 10]) cube([15, 60, 2], center = true);\n        }\n    }\n}\n\n// Printing bed with adjustment mechanism\nmodule printing_bed() {\n    union() {\n        // Bed surface\n        difference() {\n            translate([0, 0, 5]) cube([90, 60, 10], center = true);\n            \n            // Surface texture pattern\n            for (x = [-40:10:40]) {\n                for (y = [-25:10:25]) {\n                    translate([x, y, 10]) cube([8, 8, 1], center = true);\n                }\n            }\n        }\n        \n        // Adjustment rails\n        translate([-50, 0, 0]) cube([10, 60, 2], center = true);\n        translate([50, 0, 0]) cube([10, 60, 2], center = true);\n    }\n}\n\n// Vertical support posts\nmodule vertical_post() {\n    difference() {\n        // Main post\n        cylinder(h = 70, r = 4, center = false);\n        \n        // Decorative fluting\n        for (i = [0:45:315]) {\n            rotate([0, 0, i])\n                translate([3.5, 0, 0])\n                    cube([1, 0.5, 70], center = true);\n        }\n    }\n}\n\n// Top frame with joints\nmodule top_frame() {\n    difference() {\n        // Main frame\n        cube([100, 60, 10], center = true);\n        \n        // Central opening\n        translate([0, 0, 5]) cube([60, 40, 2], center = true);\n        \n        // Bolt holes\n        for (x = [-40, 40]) {\n            for (y = [-20, 20]) {\n                translate([x, y, 5]) cylinder(h = 10, r = 2, center = true);\n            }\n        }\n    }\n}\n\n// Press mechanism\nmodule press_mechanism() {\n    union() {\n        // Main screw\n        cylinder(h = 30, r = 8, center = true);\n        \n        // Press bar\n        translate([0, 0, -15])\n            rotate([90, 0, 0])\n                cylinder(h = 80, r = 3, center = true);\n        \n        // Handle\n        translate([0, 0, 15])\n            rotate([0, 90, 0])\n                cylinder(h = 40, r = 2, center = true);\n    }\n}\n\n// Lithographic stone with engraved pattern\nmodule lithographic_stone() {\n    difference() {\n        // Main stone\n        cube([80, 50, 5], center = true);\n        \n        // Engraved artwork pattern\n        translate([0, 0, 2.5])\n            for (i = [-30:5:30]) {\n                for (j = [-20:5:20]) {\n                    if ((i + j) % 10 == 0) {\n                        translate([i, j, 0])\n                            cylinder(h = 1, r1 = 3, r2 = 1, center = true);\n                    }\n                }\n            }\n    }\n}\n\n// Side support braces\nmodule side_support() {\n    union() {\n        // Main brace\n        cube([10, 60, 5], center = true);\n        \n        // Triangular gusset\n        translate([0, 0, -2.5])\n            rotate([90, 0, 0])\n                cylinder(h = 60, r1 = 5, r2 = 2, center = true);\n    }\n}\n\n// Render the complete model\nlithography_press();",
    "renders": true
  },
  {
    "decorative_art": "bronze",
    "openscad_code": "// Bronze decorative furniture item - Art Nouveau plant stand\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions\nstand_height = 120;\nbase_diameter = 80;\ntop_diameter = 70;\n\n// Wall thickness\nwall = 2;\n\n// Main body module\nmodule bronze_stand() {\n    // Base with decorative feet\n    union() {\n        // Central base cylinder\n        cylinder(h=15, d=base_diameter, $fn=64);\n        \n        // Decorative feet - 4 curved supports\n        for(i=[0:3]) {\n            rotate([0,0,i*90]) \n            translate([base_diameter/2 - 10, -5, 0])\n            union() {\n                // Foot base\n                cube([20, 10, 5]);\n                // Curved support\n                translate([10, 5, 5])\n                rotate([90,0,0])\n                cylinder(h=15, d1=10, d2=5, $fn=16);\n            }\n        }\n    }\n    \n    // Central column with decorative rings\n    translate([0,0,15]) {\n        // Main column\n        cylinder(h=90, d=20, $fn=32);\n        \n        // Decorative rings\n        for(h=[20:25:90]) {\n            translate([0,0,h])\n            cylinder(h=3, d=25, $fn=32);\n        }\n    }\n    \n    // Top platform with raised edge\n    translate([0,0,105]) {\n        // Main platform\n        cylinder(h=3, d=top_diameter, $fn=64);\n        \n        // Raised edge\n        translate([0,0,3])\n        difference() {\n            cylinder(h=5, d=top_diameter, $fn=64);\n            cylinder(h=5, d=top_diameter-wall*2, $fn=64);\n        }\n        \n        // Decorative inner pattern - 8 radial ribs\n        for(i=[0:7]) {\n            rotate([0,0,i*45])\n            translate([top_diameter/4, -wall, 3])\n            cube([top_diameter/4, wall, 5]);\n        }\n    }\n    \n    // Side decorative brackets\n    translate([0,0,50]) {\n        for(angle=[0,120,240]) {\n            rotate([0,0,angle])\n            translate([10,0,0])\n            union() {\n                // Bracket arm\n                rotate([0,90,0])\n                cylinder(h=30, d=6, $fn=16);\n                \n                // Decorative end cap\n                translate([30,0,0])\n                sphere(d=8, $fn=16);\n            }\n        }\n    }\n}\n\n// Generate the complete model\nbronze_stand();",
    "renders": true
  },
  {
    "decorative_art": "ceramics",
    "openscad_code": "// Ceramic Garden Stool (Medium Complexity)\n// Overall dimensions: 120mm diameter x 450mm height\n// Wall thickness: 2mm throughout for 3D printing\n\n$fn = 36;  // Smooth curves for printing\n\nmodule cylindrical_wall(outer_r, inner_r, h) {\n    difference() {\n        cylinder(r = outer_r, h = h, center = false);\n        translate([0, 0, 2])  // Leave bottom solid\n            cylinder(r = inner_r, h = h, center = false);\n    }\n}\n\nmodule top_surface() {\n    difference() {\n        // Main top disc\n        cylinder(r = 60, h = 8, center = false);\n        \n        // Central hole for drainage/plant\n        translate([0, 0, 2])\n            cylinder(r = 15, h = 8, center = false);\n        \n        // Decorative ring recess\n        translate([0, 0, 2])\n            cylinder(r1 = 45, r2 = 42, h = 6, center = false);\n    }\n}\n\nmodule decorative_cutouts() {\n    // Create 6 decorative oval cutouts around the body\n    for(i = [0:5]) {\n        rotate([0, 0, i * 60])\n            translate([45, 0, 200])\n                rotate([90, 0, 0])\n                    scale([1, 1.5, 1])\n                        cylinder(r = 12, h = 80, center = true);\n    }\n}\n\nmodule foot_ring() {\n    difference() {\n        // Outer ring\n        cylinder(r1 = 62, r2 = 58, h = 15, center = false);\n        \n        // Inner cutout\n        translate([0, 0, 2])\n            cylinder(r1 = 56, r2 = 52, h = 15, center = false);\n    }\n}\n\nmodule body_texture() {\n    // Raised vertical ribs for grip and decoration\n    for(i = [0:11]) {\n        rotate([0, 0, i * 30])\n            translate([58, -2, 20])\n                cube([4, 4, 380]);\n    }\n}\n\nmodule handle_holes() {\n    // Two side holes for lifting\n    rotate([0, 90, 0])\n        translate([0, 0, 200])\n            cylinder(r = 8, h = 30, center = true);\n    \n    rotate([0, 90, 0])\n        translate([0, 0, 250])\n            cylinder(r = 8, h = 30, center = true);\n}\n\n// Main assembly\nunion() {\n    // Base foot ring\n    foot_ring();\n    \n    // Main cylindrical body\n    translate([0, 0, 15])\n        cylindrical_wall(60, 58, 415);\n    \n    // Add texture ribs\n    translate([0, 0, 15])\n        body_texture();\n    \n    // Decorative cutouts\n    translate([0, 0, 15])\n        difference() {\n            cylindrical_wall(60, 58, 415);\n            decorative_cutouts();\n        }\n    \n    // Handle holes\n    translate([0, 0, 15])\n        difference() {\n            cylindrical_wall(60, 58, 415);\n            handle_holes();\n        }\n    \n    // Top surface\n    translate([0, 0, 430])\n        top_surface();\n}",
    "renders": true
  },
  {
    "decorative_art": "glassblowing",
    "openscad_code": "// Glassblowing bench - torch station with marver and tool rack\n// Overall footprint 120 x 80 x 75 mm\n\n$fa = 2;\n$fs = 0.5;\n\n// Parameters\nleg_h = 70;\nleg_w = 4;\nwall = 2;\nbench_w = 120;\nbench_d = 80;\nbench_t = 3;\ntorch_r = 8;\ntorch_h = 25;\nmarver_w = 40;\nmarver_t = 5;\nrod_r = 1.5;\nrod_n = 5;\n\n// Wood texture module (simulated with small cylinders)\nmodule wood_grain(x, y, z) {\n    for (i = [0:2:z]) {\n        translate([x/2, i - y/2, 0])\n            rotate([90, 0, 0])\n                cylinder(h = x, r = 0.3, $fn = 8);\n    }\n}\n\n// Leg assembly\nmodule leg(x, y) {\n    difference() {\n        union() {\n            // Main leg post\n            translate([x, y, leg_h/2])\n                cube([leg_w, leg_w, leg_h], center = true);\n            \n            // Foot pad\n            translate([x, y, 1])\n                cube([leg_w + 2, leg_w + 2, 2], center = true);\n            \n            // Top brace\n            translate([x, y, leg_h - 1])\n                cube([leg_w + 2, leg_w + 2, 2], center = true);\n        }\n        \n        // Cable channel\n        translate([x, y, 20])\n            rotate([90, 0, 0])\n                cylinder(h = leg_w + 1, r = 1.5, center = true);\n    }\n}\n\n// Torch holder with heat shield\nmodule torch_holder(x, y, z) {\n    // Base plate\n    translate([x, y, z])\n        cube([20, 15, wall], center = true);\n    \n    // Torch cradle\n    translate([x, y, z + wall + torch_r])\n        rotate([90, 0, 0])\n            cylinder(h = 12, r = torch_r + wall, center = true);\n    \n    // Heat shield\n    translate([x + 15, y, z + torch_h/2])\n        cube([wall, 20, torch_h], center = true);\n}\n\n// Tool rack for punties and rods\nmodule tool_rack(x, y, z) {\n    // Back plate\n    translate([x, y, z + 5])\n        cube([wall, 60, 10], center = true);\n    \n    // Rod holders\n    for (i = [0:rod_n - 1]) {\n        translate([x + 5, y - 25 + i * 10, z + 10])\n            rotate([90, 0, 0])\n                cylinder(h = wall + 1, r = rod_r + 1, center = true);\n    }\n}\n\n// Marver plate\nmodule marver(x, y, z) {\n    // Base\n    translate([x, y, z])\n        cube([marver_w, marver_w, marver_t], center = true);\n    \n    // Polished surface groove\n    translate([x, y, z + marver_t/2 + 0.5])\n        cube([marver_w - 10, marver_w/3, 1], center = true);\n    \n    // Edge bevel\n    for (ang = [0:90:270]) {\n        translate([x + cos(ang) * (marver_w/2 - 2), \n                  y + sin(ang) * (marver_w/2 - 2), z + marver_t/2])\n            rotate([0, 0, ang])\n                cylinder(h = marver_t, r = 2, center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Bench top\n    difference() {\n        translate([0, 0, leg_h])\n            cube([bench_w, bench_d, bench_t], center = true);\n        \n        // Cutout for torch area\n        translate([-bench_w/4, 0, leg_h + bench_t/2])\n            cube([bench_w/2, bench_d/2, bench_t + 1], center = true);\n    }\n    \n    // Wood grain on top\n    wood_grain(bench_w - 4, bench_d - 4, bench_t);\n    \n    // Legs\n    leg(-bench_w/2 + leg_w/2, -bench_d/2 + leg_w/2);\n    leg(bench_w/2 - leg_w/2, -bench_d/2 + leg_w/2);\n    leg(-bench_w/2 + leg_w/2, bench_d/2 - leg_w/2);\n    leg(bench_w/2 - leg_w/2, bench_d/2 - leg_w/2);\n    \n    // Cross braces\n    translate([0, -bench_d/2 + leg_w/2, leg_h/2])\n        cube([bench_w - leg_w, leg_w, leg_w], center = true);\n    translate([0, bench_d/2 - leg_w/2, leg_h/2])\n        cube([bench_w - leg_w, leg_w, leg_w], center = true);\n    \n    // Torch station\n    torch_holder(-bench_w/2 + 25, 0, leg_h + bench_t + 2);\n    \n    // Marver\n    marver(bench_w/2 - 25, 0, leg_h + bench_t);\n    \n    // Tool rack\n    tool_rack(-bench_w/2 + wall/2, 0, leg_h + bench_t + 2);\n    \n    // Lower shelf\n    translate([0, 0, leg_h/3])\n        cube([bench_w - 10, bench_d - 10, bench_t], center = true);\n    \n    // Glass rod storage tubes (decorative)\n    for (i = [0:3]) {\n        translate([bench_w/4, -bench_d/4 + i * 10, leg_h + bench_t + 2])\n            rotate([90, 0, 0])\n                cylinder(h = 20, r = 3, wall, center = true);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "origami",
    "openscad_code": "// Origami Chair - Realistic Style\n// 3D printable with 2mm wall thickness and no overhangs\n\nwall_thickness = 2;\nscale_factor = 1.2;\nchair_width = 80;\nchair_depth = 60;\nchair_height = 85;\nseat_height = 45;\n\n// Main chair module\nmodule origami_chair() {\n    // Seat base - folded paper effect\n    difference() {\n        // Main seat box\n        translate([0, 0, seat_height/2])\n        cube([chair_width, chair_depth, wall_thickness], center=true);\n        \n        // Decorative fold lines\n        for(i = [-1, 1]) {\n            translate([i * chair_width/4, 0, seat_height/2 + 1])\n            cube([wall_thickness, chair_depth - 10, wall_thickness + 0.1], center=true);\n        }\n    }\n    \n    // Backrest - angular origami folds\n    module backrest_fold(x_offset, y_offset, angle) {\n        translate([x_offset, y_offset, seat_height + 20])\n        rotate([angle, 0, 0])\n        cube([chair_width - 20, wall_thickness, 40], center=true);\n    }\n    \n    // Multiple backrest folds\n    backrest_fold(0, 0, -15);\n    backrest_fold(0, 0, -25);\n    backrest_fold(0, 0, -35);\n    \n    // Legs - folded paper supports\n    module leg(x_pos, y_pos) {\n        // Front legs\n        translate([x_pos, y_pos, seat_height/2])\n        cube([wall_thickness * 3, wall_thickness * 3, seat_height], center=true);\n        \n        // Decorative fold at bottom\n        translate([x_pos, y_pos, wall_thickness])\n        rotate([45, 0, 0])\n        cube([wall_thickness * 3, wall_thickness * 2, 10], center=true);\n    }\n    \n    // Position legs\n    leg(chair_width/2 - 5, chair_depth/2 - 5);\n    leg(-chair_width/2 + 5, chair_depth/2 - 5);\n    leg(chair_width/2 - 5, -chair_depth/2 + 5);\n    leg(-chair_width/2 + 5, -chair_depth/2 + 5);\n    \n    // Armrests - origami style\n    module armrest(side) {\n        // Support\n        translate([side * (chair_width/2 - 5), 0, seat_height + 15])\n        cube([wall_thickness * 2, chair_depth/2, wall_thickness * 2], center=true);\n        \n        // Top surface\n        translate([side * (chair_width/2 - 5), chair_depth/4, seat_height + 25])\n        rotate([0, side * 15, 0])\n        cube([chair_width/4, wall_thickness, 10], center=true);\n    }\n    \n    armrest(1);\n    armrest(-1);\n    \n    // Decorative paper texture on back\n    for(i = [1:3]) {\n        translate([0, -chair_depth/2 + 5, seat_height + 10 * i])\n        rotate([0, 30, 0])\n        cube([chair_width - 10, wall_thickness, 5], center=true);\n    }\n    \n    // Reinforcement folds at joints\n    module joint_reinforcement(x, y, z) {\n        translate([x, y, z])\n        difference() {\n            sphere(wall_thickness * 2);\n            sphere(wall_thickness * 1.5);\n        }\n    }\n    \n    // Add reinforcements at key joints\n    joint_reinforcement(chair_width/2 - 5, chair_depth/2 - 5, seat_height);\n    joint_reinforcement(-chair_width/2 + 5, chair_depth/2 - 5, seat_height);\n    joint_reinforcement(chair_width/2 - 5, -chair_depth/2 + 5, seat_height);\n    joint_reinforcement(-chair_width/2 + 5, -chair_depth/2 + 5, seat_height);\n}\n\n// Scale and center the chair\nscale([scale_factor, scale_factor, scale_factor])\norigami_chair();",
    "renders": true
  },
  {
    "decorative_art": "quilting",
    "openscad_code": "// Quilting Frame - Miniature Furniture for 3D Printing\n// Realistic style quilting rack with fabric rolls and thread spools\n\n$fn = 32;  // Smooth curves for printing\n\n// Overall dimensions\nframe_width = 80;\nframe_depth = 60;\nframe_height = 45;\n\n// Wall thickness\nwall = 2;\n\nmodule quilting_frame() {\n    // Base frame - four legs with stretchers\n    difference() {\n        // Main frame structure\n        union() {\n            // Four legs\n            for (x = [-1, 1])\n                for (z = [-1, 1])\n                    translate([x * (frame_width/2 - 3), 0, z * (frame_depth/2 - 3)])\n                        cube([4, frame_height, 4], center = true);\n            \n            // Front and back stretchers\n            translate([0, frame_height/2 - 2, 0])\n                cube([frame_width - 4, wall, 2], center = true);\n            translate([0, frame_height/2 - 2, 0])\n                cube([frame_width - 4, wall, 2], center = true);\n            \n            // Side stretchers\n            rotate([0, 90, 0])\n                translate([0, frame_height/2 - 2, 0])\n                    cube([frame_depth - 4, wall, 2], center = true);\n            rotate([0, 90, 0])\n                translate([0, frame_height/2 - 2, 0])\n                    cube([frame_depth - 4, wall, 2], center = true);\n        }\n    }\n}\n\nmodule fabric_roll(diameter = 12, length = 50) {\n    // Fabric roll with visible layers\n    difference() {\n        // Main roll body\n        rotate([90, 0, 0])\n            cylinder(h = length, d = diameter, center = true);\n        \n        // Hollow center\n        rotate([90, 0, 0])\n            cylinder(h = length + 1, d = 3, center = true);\n    }\n    \n    // Fabric layers texture\n    for (i = [1:3]) {\n        rotate([90, 0, 0])\n            translate([0, 0, -length/2 + i * length/4])\n                cylinder(h = 0.5, d = diameter - 1, center = false);\n    }\n}\n\nmodule thread_spool() {\n    // Thread spool with thread\n    difference() {\n        // Spool body\n        cylinder(h = 8, d = 8, center = true);\n        translate([0, 0, -4.5])\n            cylinder(h = 1, d = 12, center = false);\n        translate([0, 0, 3.5])\n            cylinder(h = 1, d = 12, center = false);\n        \n        // Center hole\n        cylinder(h = 10, d = 2, center = true);\n    }\n    \n    // Thread wrapped around\n    for (i = [0:9]) {\n        rotate([0, 0, i * 36])\n            translate([3.5, 0, -3 + i * 0.6])\n                cube([0.8, 0.8, 0.5], center = true);\n    }\n}\n\nmodule quilt_in_progress() {\n    // Partially completed quilt on frame\n    \n    // Quilt base layer\n    translate([0, frame_height/2 + 1, 0])\n        cube([frame_width - 10, wall - 0.5, frame_depth - 10], center = true);\n    \n    // Visible quilted sections\n    for (x = [-30:15:30])\n        for (z = [-20:15:20]) {\n            translate([x, frame_height/2 + 1.5, z])\n                cube([10, 0.5, 10], center = true);\n        }\n}\n\n// Assemble the quilting setup\nunion() {\n    // Main frame\n    quilting_frame();\n    \n    // Fabric rolls on side supports\n    translate([-frame_width/2 + 10, frame_height/2 + 5, frame_depth/2 - 10])\n        rotate([0, 0, 15])\n            fabric_roll();\n    \n    translate([frame_width/2 - 10, frame_height/2 + 5, -frame_depth/2 + 10])\n        rotate([0, 0, -15])\n            fabric_roll();\n    \n    // Thread spools arranged on side\n    for (i = [0:3]) {\n        translate([frame_width/2 - 15, frame_height/2 + i * 3, frame_depth/2 - 15])\n            thread_spool();\n    }\n    \n    // Quilt in progress on frame\n    quilt_in_progress();\n}",
    "renders": true
  },
  {
    "decorative_art": "embroidery",
    "openscad_code": "// Embroidery Hoop Frame Stand\n// A decorative stand to hold an embroidery hoop in progress\n// Realistic style with medium complexity\n// Overall dimensions: 120mm height x 100mm width x 80mm depth\n\n// Parameters\nframe_thickness = 2;\nbase_width = 80;\nbase_depth = 60;\nbase_height = 5;\npost_height = 100;\npost_width = 15;\nhoop_diameter = 120;\nhoop_thickness = 3;\nhoop_stand_width = 30;\nhoop_stand_depth = 10;\nornament_size = 8;\n\n// Base with decorative corners\nmodule base() {\n    difference() {\n        // Main base platform\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Decorative corner cutouts\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x * 30, y * 20, -1]) \n                    cylinder(h=base_height+2, r=10, $fn=32);\n            }\n        }\n    }\n}\n\n// Decorative post with grooves\nmodule post() {\n    union() {\n        // Main post\n        translate([0, 0, post_height/2 + base_height])\n            cube([post_width, post_width, post_height], center=true);\n        \n        // Decorative grooves\n        for (i = [1:5]) {\n            translate([0, 0, base_height + i * 18])\n                difference() {\n                    cube([post_width+0.1, post_width+0.1, 2], center=true);\n                    cube([post_width-2, post_width-2, 3], center=true);\n                }\n        }\n        \n        // Top ornament\n        translate([0, 0, base_height + post_height + ornament_size/2])\n            sphere(d=ornament_size, $fn=32);\n    }\n}\n\n// Hoop support arms\nmodule hoop_support() {\n    // Left arm\n    translate([-hoop_stand_width/2 - post_width/2 - 2, 0, base_height + post_height - 30])\n        rotate([0, 90, 0])\n            cylinder(h=hoop_stand_width/2, r=hoop_stand_depth/2, $fn=32);\n    \n    // Right arm\n    translate([hoop_stand_width/2 + post_width/2 + 2, 0, base_height + post_height - 30])\n        rotate([0, 90, 0])\n            cylinder(h=hoop_stand_width/2, r=hoop_stand_depth/2, $fn=32);\n    \n    // Support braces\n    for (side = [-1, 1]) {\n        translate([side * 25, 0, base_height + 40])\n            rotate([0, 45 * side, 0])\n                cube([30, 8, frame_thickness], center=true);\n    }\n}\n\n// Embroidery hoop (decorative element)\nmodule embroidery_hoop() {\n    // Outer hoop\n    translate([0, 0, base_height + post_height - 30])\n        rotate([90, 0, 0])\n            cylinder(h=hoop_thickness, r=hoop_diameter/2, $fn=64);\n    \n    // Inner hoop (slightly smaller)\n    translate([0, 0, base_height + post_height - 30])\n        rotate([90, 0, 0])\n            cylinder(h=hoop_thickness-0.5, r=hoop_diameter/2 - 3, $fn=64);\n    \n    // Tightening screw\n    translate([hoop_diameter/2, 0, base_height + post_height - 30])\n        rotate([0, 90, 0])\n            union() {\n                cylinder(h=15, r=4, $fn=16);\n                translate([7, 0, 0])\n                    sphere(r=4, $fn=16);\n            }\n}\n\n// Fabric representation with simple texture\nmodule fabric() {\n    translate([0, 0, base_height + post_height - 30.5])\n        rotate([90, 0, 0])\n            cylinder(h=0.5, r=hoop_diameter/2 - 6, $fn=64);\n}\n\n// Assembly\nunion() {\n    // Structural elements\n    base();\n    post();\n    hoop_support();\n    \n    // Decorative elements\n    embroidery_hoop();\n    fabric();\n    \n    // Additional decorative details\n    // Base feet\n    for (x = [-30, 30]) {\n        for (y = [-20, 20]) {\n            translate([x, y, base_height/2])\n                cylinder(h=base_height+1, r=5, $fn=16);\n        }\n    }\n    \n    // Side decorations on post\n    for (angle = [0:60:300]) {\n        rotate([0, 0, angle])\n            translate([post_width/2 + 3, 0, base_height + 60])\n                sphere(d=4, $fn=16);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "lacquer",
    "openscad_code": "// Lacquer Display Cabinet - Realistic Style\n// Medium complexity 3D printable model\n\n$fn = 50;\n\n// Main dimensions\ncabinet_width = 80;\ncabinet_depth = 40;\ncabinet_height = 120;\nwall_thickness = 2;\n\nmodule cabinet_body() {\n    // Main cabinet shell\n    difference() {\n        // Outer shell\n        cube([cabinet_width, cabinet_depth, cabinet_height], center=false);\n        \n        // Hollow interior\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([cabinet_width-2*wall_thickness, cabinet_depth-2*wall_thickness, cabinet_height-wall_thickness], center=false);\n        \n        // Front opening\n        translate([wall_thickness, wall_thickness, cabinet_height*0.3])\n            cube([cabinet_width-2*wall_thickness, wall_thickness+1, cabinet_height*0.65], center=false);\n    }\n}\n\nmodule lacquer_trim() {\n    // Top decorative trim\n    translate([-2, -2, cabinet_height-4])\n        cube([cabinet_width+4, cabinet_depth+4, 4]);\n    \n    // Bottom base trim\n    translate([-2, -2, 0])\n        cube([cabinet_width+4, cabinet_depth+4, 4]);\n}\n\nmodule traditional_pattern() {\n    // Traditional cloud pattern on doors\n    for (x = [10:20:cabinet_width-20]) {\n        for (y = [5:15:cabinet_depth-10]) {\n            translate([x, y, cabinet_height*0.3+1])\n                rotate([0, 90, 0])\n                    cylinder(h=1, r1=3, r2=3);\n        }\n    }\n}\n\nmodule doors() {\n    // Left door\n    translate([wall_thickness, wall_thickness, cabinet_height*0.3])\n        cube([(cabinet_width-4*wall_thickness)/2, wall_thickness, cabinet_height*0.65]);\n    \n    // Right door\n    translate([cabinet_width/2+wall_thickness, wall_thickness, cabinet_height*0.3])\n        cube([(cabinet_width-4*wall_thickness)/2, wall_thickness, cabinet_height*0.65]);\n    \n    // Door handles\n    translate([cabinet_width/4, wall_thickness+3, cabinet_height*0.65])\n        sphere(r=2);\n    translate([3*cabinet_width/4, wall_thickness+3, cabinet_height*0.65])\n        sphere(r=2);\n}\n\nmodule shelves() {\n    // Middle shelf\n    translate([wall_thickness, wall_thickness, cabinet_height*0.5])\n        cube([cabinet_width-2*wall_thickness, cabinet_depth-2*wall_thickness, wall_thickness]);\n    \n    // Lower shelf\n    translate([wall_thickness, wall_thickness, cabinet_height*0.25])\n        cube([cabinet_width-2*wall_thickness, cabinet_depth-2*wall_thickness, wall_thickness]);\n}\n\nmodule support_frame() {\n    // Back frame supports\n    translate([0, cabinet_depth-wall_thickness, 0])\n        cube([wall_thickness, wall_thickness, cabinet_height]);\n    translate([cabinet_width-wall_thickness, cabinet_depth-wall_thickness, 0])\n        cube([wall_thickness, wall_thickness, cabinet_height]);\n    \n    // Side frame supports\n    translate([0, 0, 0])\n        cube([wall_thickness, wall_thickness, cabinet_height]);\n    translate([cabinet_width-wall_thickness, 0, 0])\n        cube([wall_thickness, wall_thickness, cabinet_height]);\n}\n\n// Assembly\nunion() {\n    cabinet_body();\n    lacquer_trim();\n    traditional_pattern();\n    doors();\n    shelves();\n    support_frame();\n}",
    "renders": true
  },
  {
    "decorative_art": "gilding",
    "openscad_code": "// Gilded Picture Frame with Decorative Details\n// Overall dimensions: 100x80x12mm\n\n// Parameters\nframe_width = 100;\nframe_height = 80;\nframe_depth = 12;\nwall_thickness = 2;\ngold_color = \"Gold\";\n\n// Main frame body\nmodule frame_body() {\n    difference() {\n        // Outer frame\n        cube([frame_width, frame_height, frame_depth]);\n        \n        // Inner cutout for picture\n        translate([wall_thickness, wall_thickness, -1])\n            cube([frame_width-wall_thickness*2, frame_height-wall_thickness*2, frame_depth+2]);\n        \n        // Back recess for glass/picture\n        translate([wall_thickness*2, wall_thickness*2, frame_depth-wall_thickness])\n            cube([frame_width-wall_thickness*4, frame_height-wall_thickness*4, wall_thickness]);\n    }\n}\n\n// Decorative corner brackets\nmodule corner_bracket(x, y) {\n    translate([x, y, frame_depth-wall_thickness]) {\n        union() {\n            // Main bracket\n            cube([8, 8, 4]);\n            \n            // Ornate detail\n            for (i = [1:2:7]) {\n                translate([i, i, 4])\n                    cylinder(h=2, r=0.5, $fn=8);\n            }\n        }\n    }\n}\n\n// Decorative rosettes along edges\nmodule edge_rosette(x, y, angle) {\n    translate([x, y, frame_depth-wall_thickness/2]) {\n        rotate([0, 0, angle]) {\n            for (i = [0:45:315]) {\n                rotate([0, 0, i]) {\n                    translate([0, 3, 0])\n                        cube([1, 6, 2]);\n                }\n            }\n            cylinder(h=2.5, r=2, $fn=16);\n        }\n    }\n}\n\n// Raised decorative panel\nmodule center_panel() {\n    translate([frame_width/2, frame_height/2, 0]) {\n        difference() {\n            // Raised panel\n            translate([-20, -15, frame_depth-wall_thickness])\n                cube([40, 30, 3]);\n            \n            // Inner carving\n            translate([-15, -10, frame_depth-wall_thickness+1])\n                cube([30, 20, 3]);\n        }\n        \n        // Decorative spheres\n        for (i = [-1:1]) {\n            translate([i*10, 0, frame_depth-wall_thickness+3])\n                sphere(r=1.5, $fn=16);\n        }\n    }\n}\n\n// Supporting stand\nmodule stand() {\n    translate([frame_width/2-20, -5, 0]) {\n        union() {\n            // Base\n            cube([40, 5, 5]);\n            \n            // Support struts\n            translate([5, 5, 0])\n                cube([5, 15, frame_depth]);\n            translate([30, 5, 0])\n                cube([5, 15, frame_depth]);\n                \n            // Cross brace\n            translate([5, 15, frame_depth/2-2.5])\n                cube([30, 2, 5]);\n        }\n    }\n}\n\n// Assembly\ncolor(gold_color) {\n    // Main frame\n    frame_body();\n    \n    // Corner decorations\n    corner_bracket(2, 2);\n    corner_bracket(frame_width-10, 2);\n    corner_bracket(2, frame_height-10);\n    corner_bracket(frame_width-10, frame_height-10);\n    \n    // Edge rosettes\n    for (i = [1:5:frame_width-10]) {\n        edge_rosette(i, 2, 0);\n        edge_rosette(i, frame_height-2, 180);\n    }\n    for (i = [1:5:frame_height-10]) {\n        edge_rosette(2, i, 90);\n        edge_rosette(frame_width-2, i, 270);\n    }\n    \n    // Center decoration\n    center_panel();\n    \n    // Stand\n    stand();\n}",
    "renders": true
  },
  {
    "decorative_art": "silversmithing",
    "openscad_code": "// Silversmithing Workbench - Realistic Medium Complexity\n// Overall dimensions: 90mm wide x 50mm deep x 45mm high\n\n$fn = 32;\n\n// Main workbench module\nmodule workbench() {\n    // Tabletop with rounded edges\n    translate([0, 0, 40]) {\n        difference() {\n            cube([90, 50, 5], center = true);\n            // Rounded edges\n            translate([0, 0, 2.5]) {\n                for (x = [-42, 42]) {\n                    for (y = [-22, 22]) {\n                        translate([x, y, 0]) cylinder(r = 2.5, h = 6, center = true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Legs\n    for (x = [-35, 35]) {\n        for (y = [-20, 20]) {\n            translate([x, y, 0]) {\n                difference() {\n                    cube([6, 6, 40], center = true);\n                    // Taper legs slightly\n                    translate([0, 0, -5]) cylinder(r1 = 2.5, r2 = 3.5, h = 35, center = true);\n                }\n            }\n        }\n    }\n    \n    // Lower shelf\n    translate([0, 0, 18]) {\n        cube([80, 40, 2], center = true);\n    }\n    \n    // Back tool rack\n    translate([0, -22.5, 32.5]) {\n        cube([85, 5, 15], center = true);\n    }\n    \n    // Tool hooks on back rack\n    for (i = [-35:10:35]) {\n        translate([i, -22.5, 39]) {\n            rotate([90, 0, 0]) cylinder(r = 1, h = 4, center = true);\n        }\n    }\n    \n    // Front drawer\n    translate([0, 20, 30]) {\n        difference() {\n            cube([30, 3, 8], center = true);\n            // Drawer handle\n            translate([0, 2, 0]) cylinder(r = 1.5, h = 4, center = true);\n            // Drawer face detail\n            translate([-12, 0, 0]) cube([2, 3, 8], center = true);\n            translate([12, 0, 0]) cube([2, 3, 8], center = true);\n        }\n    }\n    \n    // Bench pin slot\n    translate([0, 0, 42.5]) {\n        difference() {\n            cube([30, 3, 2], center = true);\n            translate([0, 0, 0]) cube([25, 2, 1], center = true);\n        }\n    }\n    \n    // Side tool trays\n    translate([-42.5, 0, 35]) {\n        difference() {\n            cube([5, 20, 10], center = true);\n            // Hollow out\n            translate([2, 0, 2]) cube([2, 16, 8], center = true);\n        }\n    }\n    \n    translate([42.5, 0, 35]) {\n        difference() {\n            cube([5, 20, 10], center = true);\n            // Hollow out\n            translate([-2, 0, 2]) cube([2, 16, 8], center = true);\n        }\n    }\n    \n    // Support braces\n    translate([-35, 0, 18]) {\n        rotate([0, 90, 0]) cylinder(r = 1.5, h = 70, center = true);\n    }\n    translate([35, 0, 18]) {\n        rotate([0, 90, 0]) cylinder(r = 1.5, h = 70, center = true);\n    }\n}\n\n// Render the workbench\nworkbench();",
    "renders": true
  },
  {
    "decorative_art": "goldsmithing",
    "openscad_code": "// Goldsmith's Bench Pin - a classic jewelry workbench attachment\n// Realistic style with medium complexity\n\n// Overall dimensions\nbench_width = 80;\nbench_depth = 40;\nbench_height = 35;\nwall_thickness = 2;\n\n// Main bench pin body\nmodule bench_pin() {\n    difference() {\n        // Main tapered pin\n        hull() {\n            translate([-bench_width/2, 0, 0])\n                cube([wall_thickness, bench_depth, bench_height]);\n            translate([bench_width/2 - wall_thickness, 0, 0])\n                cube([wall_thickness, bench_depth, bench_height]);\n            translate([-bench_width/2 - 5, bench_depth, 0])\n                cube([wall_thickness, wall_thickness, bench_height - 5]);\n            translate([bench_width/2 + 5, bench_depth, 0])\n                cube([wall_thickness, wall_thickness, bench_height - 5]);\n        }\n        \n        // Taper the top\n        translate([0, 0, bench_height - 2])\n            cube([bench_width + 20, bench_depth + 10, 5], center=true);\n        \n        // Cut V-slot for sawing\n        translate([0, bench_depth - 10, bench_height/2])\n            rotate([0, 45, 0])\n            cube([30, 20, 20], center=true);\n        \n        // Lightening holes\n        for(x = [-20, 0, 20]) {\n            translate([x, bench_depth/2, bench_height/2])\n                rotate([90, 0, 0])\n                cylinder(h=50, d=8, $fn=16);\n        }\n    }\n}\n\n// Mounting bracket\nmodule mounting_bracket() {\n    difference() {\n        // Base plate\n        translate([0, -5, -2])\n            cube([bench_width + 20, 10, 4], center=true);\n        \n        // Screw holes\n        for(x = [-25, -10, 10, 25]) {\n            translate([x, -5, 0])\n                rotate([90, 0, 0])\n                cylinder(h=10, d=3.2, $fn=16);\n        }\n    }\n}\n\n// Decorative scroll work on sides\nmodule scroll_detail() {\n    for(side = [-1, 1]) {\n        translate([side * (bench_width/2 - 2), bench_depth/2, bench_height/2])\n            rotate([0, 90, 0])\n            for(i = [0:5]) {\n                rotate([0, 0, i * 60])\n                translate([0, 0, 5])\n                scale([1, 1.2, 1])\n                sphere(d=4, $fn=8);\n            }\n    }\n}\n\n// Tool rest rail\nmodule tool_rail() {\n    translate([0, bench_depth - 3, bench_height - 8])\n        difference() {\n            cube([bench_width - 10, 6, 4], center=true);\n            for(i = [-3:3]) {\n                translate([i * 10, 0, 0])\n                    cylinder(h=8, d=4, $fn=16, center=true);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    bench_pin();\n    mounting_bracket();\n    scroll_detail();\n    tool_rail();\n    \n    // Small pegs for hanging tools\n    for(pos = [-30, -15, 15, 30]) {\n        translate([pos, bench_depth/2, bench_height - 4])\n            rotate([90, 0, 0])\n            cylinder(h=8, d=3, $fn=12);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "blacksmithing",
    "openscad_code": "// Blacksmith's Trestle Table - Medium Complexity Realistic Style\n// Dimensions: 120mm long x 70mm deep x 75mm high\n\n// Parameters\ntable_length = 120;\ntable_depth = 70;\ntable_height = 75;\nleg_width = 6;\ntop_thickness = 4;\nstretcher_height = 15;\n\n// Main assembly\nmodule table() {\n    union() {\n        // Table top with decorative edge\n        table_top();\n        \n        // Leg assemblies (4 legs)\n        for(x = [-1, 1])\n        for(z = [-1, 1]) {\n            translate([x * (table_length - leg_width)/2, \n                      z * (table_depth - leg_width)/2, 0]) {\n                leg();\n            }\n        }\n        \n        // Long stretchers\n        translate([0, (table_depth - leg_width)/2, stretcher_height])\n            stretcher(table_length - leg_width, 3);\n        translate([0, -(table_depth - leg_width)/2, stretcher_height])\n            stretcher(table_length - leg_width, 3);\n            \n        // Short stretchers\n        translate([(table_length - leg_width)/2, 0, stretcher_height])\n            rotate([0, 0, 90]) stretcher(table_depth - leg_width, 3);\n        translate([-(table_length - leg_width)/2, 0, stretcher_height])\n            rotate([0, 0, 90]) stretcher(table_depth - leg_width, 3);\n            \n        // Decorative corner braces\n        corner_braces();\n    }\n}\n\n// Table top with decorative elements\nmodule table_top() {\n    difference() {\n        // Main top\n        translate([0, 0, table_height - top_thickness/2])\n            cube([table_length, table_depth, top_thickness], center=true);\n            \n        // Decorative grooves\n        for(i = [-2, 0, 2]) {\n            translate([i * 15, 0, table_height - top_thickness/2])\n                cube([2, table_depth - 10, top_thickness + 0.1], center=true);\n        }\n        \n        // Drainage channel\n        translate([0, 0, table_height - 1])\n            cube([table_length - 10, table_depth - 10, 1], center=true);\n    }\n    \n    // Decorative rivets around edge\n    for(i = [-1, 1]) {\n        for(j = [-1, 1]) {\n            translate([i * (table_length/2 - 5), \n                      j * (table_depth/2 - 5), \n                      table_height - 1])\n                cylinder(h=2, r=1.5, $fn=8);\n        }\n    }\n}\n\n// Tapered leg with decorative details\nmodule leg() {\n    union() {\n        // Main leg\n        linear_extrude(height=table_height - stretcher_height) {\n            polygon([\n                [-leg_width/2, -leg_width/2],\n                [leg_width/2, -leg_width/2],\n                [leg_width*0.7, leg_width*0.7],\n                [-leg_width*0.7, leg_width*0.7]\n            ]);\n        }\n        \n        // Decorative bands\n        for(h = [10, 25, 40]) {\n            translate([0, 0, h])\n                difference() {\n                    cylinder(h=3, r=leg_width*0.8, $fn=6);\n                    cylinder(h=3.5, r=leg_width*0.6, $fn=6);\n                }\n        }\n    }\n}\n\n// Stretcher between legs\nmodule stretcher(len, thickness) {\n    difference() {\n        cube([len, thickness, thickness], center=true);\n        // Decorative cutouts\n        for(i = [-len/3, 0, len/3]) {\n            translate([i, 0, 0])\n                cube([len/6, thickness + 0.1, thickness - 1], center=true);\n        }\n    }\n}\n\n// Decorative corner braces\nmodule corner_braces() {\n    for(x = [-1, 1])\n    for(y = [-1, 1]) {\n        translate([x * (table_length - leg_width)/2 * 0.7,\n                  y * (table_depth - leg_width)/2 * 0.7,\n                  stretcher_height/2]) {\n            rotate([0, 0, x * y * 45])\n                difference() {\n                    cube([15, 3, stretcher_height], center=true);\n                    cylinder(h=stretcher_height + 0.2, r=1.5, center=true, $fn=6);\n                }\n        }\n    }\n}\n\n// Render the table\ntable();",
    "renders": true
  },
  {
    "decorative_art": "bookbinding",
    "openscad_code": "// Bookbinding Press - Realistic Style, Medium Complexity\n// A traditional bookbinder's finishing press with decorative elements\n\n$fn = 50;  // Smooth curves for realistic appearance\n\n// Overall dimensions\npress_length = 120;\npress_width = 60;\npress_height = 80;\n\n// Material thickness\nwall_thickness = 2.5;\n\n// Base assembly\nmodule base_assembly() {\n    // Main base platform\n    difference() {\n        cube([press_length, press_width, 8], center=true);\n        \n        // Decorative recess pattern on top\n        for(i = [-2:2]) {\n            translate([i*25, 0, 3.9])\n                cube([20, press_width-20, 0.5], center=true);\n        }\n    }\n    \n    // Front and back decorative skirts\n    translate([0, press_width/2-2.5, -2])\n        cube([press_length, 5, 8], center=true);\n    translate([0, -press_width/2+2.5, -2])\n        cube([press_length, 5, 8], center=true);\n}\n\n// Side columns with decorative capitals\nmodule column(x_pos) {\n    // Main column body\n    translate([x_pos, 0, press_height/2-4])\n        difference() {\n            cylinder(h=press_height-8, r=8);\n            cylinder(h=press_height-8.5, r=5.5);\n        }\n    \n    // Decorative capital (top)\n    translate([x_pos, 0, press_height-8])\n        difference() {\n            cylinder(h=6, r=12);\n            translate([0, 0, -0.1])\n                cylinder(h=6.2, r=9);\n        }\n    \n    // Decorative base\n    translate([x_pos, 0, 0])\n        difference() {\n            cylinder(h=6, r=12);\n            translate([0, 0, 0.1])\n                cylinder(h=5.8, r=9);\n        }\n}\n\n// Pressing beam with threaded mechanism\nmodule pressing_beam() {\n    // Main beam\n    difference() {\n        translate([0, 0, press_height-20])\n            cube([press_length, press_width-10, 12], center=true);\n        \n        // Central screw hole\n        translate([0, 0, press_height-20])\n            cylinder(h=13, r=5, center=true);\n    }\n    \n    // Reinforcement ribs\n    for(side = [-1, 1]) {\n        translate([side*30, 0, press_height-26])\n            cube([8, press_width-10, 24], center=true);\n    }\n}\n\n// Threaded screw mechanism\nmodule screw_mechanism() {\n    // Screw shaft\n    translate([0, 0, press_height-45])\n        cylinder(h=50, r=4.5);\n    \n    // Screw handle (wheel)\n    translate([0, 0, press_height-12])\n        difference() {\n            cylinder(h=8, r=15);\n            for(i = [0:5]) {\n                rotate([0, 0, i*60])\n                    translate([11, 0, -0.1])\n                        cube([8, 3, 8.2], center=true);\n            }\n            cylinder(h=9, r=3, center=true);\n        }\n    \n    // Pressing plate\n    translate([0, 0, press_height-40])\n        difference() {\n            cube([press_length-40, press_width-30, 4], center=true);\n            // Relief pattern\n            for(x = [-20:10:20]) {\n                for(y = [-10:10:20]) {\n                    translate([x, y, 2.1])\n                        cube([6, 2, 0.5], center=true);\n                }\n            }\n        }\n}\n\n// Decorative corner brackets\nmodule corner_brackets() {\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x*(press_length/2-6), y*(press_width/2-6), 4])\n                difference() {\n                    cube([12, 12, 8], center=true);\n                    translate([x*3, y*3, -0.1])\n                        cube([6, 6, 8.2], center=true);\n                }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base_assembly();\n    \n    // Columns\n    column(press_length/2-15);\n    column(-press_length/2+15);\n    \n    // Press mechanism\n    pressing_beam();\n    screw_mechanism();\n    \n    // Decorative elements\n    corner_brackets();\n}",
    "renders": true
  },
  {
    "decorative_art": "papermaking",
    "openscad_code": "// Papermaking Mould & Deckle Set (realistic, medium complexity)\n// Overall dimensions: 120 x 90 x 45 mm\n\n$fn=64;\nwall=2;\n\n// Whole assembly\nunion(){\n    // Mould frame\n    translate([0,0,0]) mould_frame();\n\n    // Deckle frame\n    translate([0,0,25]) deckle_frame();\n\n    // Support legs under mould\n    translate([15,15,0]) support_leg();\n    translate([-15,15,0]) mirror([1,0,0]) support_leg();\n    translate([15,-15,0]) mirror([0,1,0]) support_leg();\n    translate([-15,-15,0]) mirror([1,1,0]) support_leg();\n}\n\nmodule mould_frame(){\n    difference(){\n        // Outer frame body\n        cube([120,90,wall], center=true);\n        \n        // Inner cavity\n        translate([0,0,-wall/2-0.1]) cube([116,86,wall+0.2], center=true);\n    }\n    \n    // Screen mesh pattern (raised)\n    for(x=[-55:5:55]){\n        for(y=[-40:5:40]){\n            translate([x,y,wall/2+0.5]) cube([0.5,0.5,0.5], center=true);\n        }\n    }\n    \n    // Decorative corner brackets\n    corner_bracket(55,40);\n    corner_bracket(-55,40);\n    corner_bracket(55,-40);\n    corner_bracket(-55,-40);\n}\n\nmodule deckle_frame(){\n    difference(){\n        // Outer frame body\n        cube([116,86,wall], center=true);\n        \n        // Inner cavity\n        translate([0,0,-wall/2-0.1]) cube([112,82,wall+0.2], center=true);\n    }\n    \n    // Handle on one side\n    translate([0,50,0]) rotate([90,0,0]) cylinder(h=20, r=5, center=true);\n}\n\nmodule support_leg(){\n    difference(){\n        // Main leg\n        cylinder(h=15, r1=8, r2=5);\n        \n        // Hollow center\n        translate([0,0,wall]) cylinder(h=13, r1=6, r2=3);\n    }\n    \n    // Foot pad\n    translate([0,0,-1]) cylinder(h=3, r=10);\n}\n\nmodule corner_bracket(x,y){\n    translate([x,y,wall/2+0.1]){\n        // Main bracket\n        cube([8,8,1.5], center=true);\n        \n        // Screw hole detail\n        translate([0,0,0.8]) cylinder(h=1, r=1.5, center=true);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "printmaking",
    "openscad_code": "// Printmaking Furniture: Miniature Etching Press\n// Dimensions: 120 x 80 x 65 mm\n\n$fn=32;\nwall=2;\n\nmodule base() {\n    // Main base frame\n    difference() {\n        cube([100,60,8], center=true);\n        translate([0,0,4]) cube([96,56,8], center=true);\n    }\n}\n\nmodule legs() {\n    // Four support legs\n    for(x=[-45,45]) for(y=[-25,25]) {\n        translate([x,y,-20]) \n            cube([6,6,40], center=true);\n    }\n}\n\nmodule bed() {\n    // Printing bed with felt surface\n    difference() {\n        cube([90,50,4], center=true);\n        translate([0,0,2]) cube([86,46,4], center=true);\n    }\n    // Felt texture\n    for(i=[-40:5:40]) \n        translate([i,0,2.1]) cube([0.5,46,0.2], center=true);\n}\n\nmodule rollers() {\n    // Top pressure roller\n    translate([0,0,25])\n        rotate([90,0,0])\n        cylinder(h=50, r1=8, r2=8, center=true);\n    \n    // Bottom roller\n    translate([0,0,-5])\n        rotate([90,0,0])\n        cylinder(h=50, r1=6, r2=6, center=true);\n}\n\nmodule pressure_mechanism() {\n    // Top cross beam\n    translate([0,0,40])\n        cube([80,10,5], center=true);\n    \n    // Adjustment screws\n    for(x=[-30,0,30]) {\n        translate([x,0,47.5])\n            cylinder(h=10, r=3, center=true);\n        translate([x,0,52.5])\n            sphere(r=4);\n    }\n}\n\nmodule side_frames() {\n    // Left frame\n    translate([-45,0,12.5])\n        difference() {\n            cube([4,40,25], center=true);\n            translate([0,0,10]) cube([2,38,20], center=true);\n        }\n    \n    // Right frame\n    translate([45,0,12.5])\n        difference() {\n            cube([4,40,25], center=true);\n            translate([0,0,10]) cube([2,38,20], center=true);\n        }\n}\n\nmodule decorative_elements() {\n    // Front maker's plate\n    translate([0,-32,0])\n        cube([20,2,6], center=true);\n    \n    // Side handles\n    for(y=[-30,30]) {\n        translate([55,y,0])\n            rotate([0,90,0])\n            cylinder(h=10, r=3, center=true);\n    }\n    \n    // Pattern on base\n    for(i=[-40:10:40]) for(j=[-20:10:20]) {\n        translate([i,j,-3.9])\n            cube([2,2,1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    legs();\n    bed();\n    rollers();\n    pressure_mechanism();\n    side_frames();\n    decorative_elements();\n}",
    "renders": true
  },
  {
    "decorative_art": "watercolor",
    "openscad_code": "// Watercolor Paint Box Furniture\n// A miniature watercolor paint box that opens like a small cabinet\n// Sized for 3D printing, ~120mm wide\n\n$fn = 32;  // Smooth curves\nwall = 2;  // 3D printable wall thickness\n\nmodule rounded_box(size, radius) {\n    // Create a box with rounded edges\n    x = size[0]; y = size[1]; z = size[2];\n    hull() {\n        translate([radius-wall, radius-wall, radius-wall])\n            sphere(r=radius);\n        translate([x-radius+wall, radius-wall, radius-wall])\n            sphere(r=radius);\n        translate([radius-wall, y-radius+wall, radius-wall])\n            sphere(r=radius);\n        translate([x-radius+wall, y-radius+wall, radius-wall])\n            sphere(r=radius);\n        translate([radius-wall, radius-wall, z-radius+wall])\n            sphere(r=radius);\n        translate([x-radius+wall, radius-wall, z-radius+wall])\n            sphere(r=radius);\n        translate([radius-wall, y-radius+wall, z-radius+wall])\n            sphere(r=radius);\n        translate([x-radius+wall, y-radius+wall, z-radius+wall])\n            sphere(r=radius);\n    }\n}\n\nmodule paint_well() {\n    // Individual paint well\n    difference() {\n        cylinder(h=3, r1=6, r2=6.5);\n        translate([0, 0, -0.1])\n            cylinder(h=3.2, r1=5, r2=5.5);\n    }\n}\n\nmodule paint_tray(rows, cols) {\n    // Grid of paint wells\n    spacing = 15;\n    for (i = [0:rows-1]) {\n        for (j = [0:cols-1]) {\n            translate([j*spacing - (cols-1)*spacing/2, \n                      i*spacing - (rows-1)*spacing/2, 0])\n            paint_well();\n        }\n    }\n}\n\nmodule brush_slot() {\n    // Slot for holding brushes\n    difference() {\n        cube([40, 8, 5]);\n        translate([5, -0.1, 2])\n            cube([30, 8.2, 3]);\n    }\n}\n\nmodule palette() {\n    // Mixing palette area\n    difference() {\n        cube([80, 30, 3]);\n        translate([5, 5, -0.1])\n            cube([70, 20, 3.2]);\n    }\n}\n\nmodule hinge() {\n    // Simple hinge mechanism\n    rotate([90, 0, 0])\n        cylinder(h=20, r=2);\n}\n\n// Main box base\ndifference() {\n    rounded_box([120, 80, 25], 5);\n    translate([wall, wall, wall])\n        rounded_box([120-2*wall, 80-2*wall, 25-wall], 5-wall);\n}\n\n// Paint tray insert\ntranslate([0, -10, 2]) {\n    paint_tray(3, 4);\n}\n\n// Palette area\ntranslate([0, 25, 2]) {\n    palette();\n}\n\n// Brush holder\ntranslate([0, -25, 2]) {\n    brush_slot();\n}\n\n// Box lid\ntranslate([0, 0, 25]) {\n    rotate([60, 0, 0]) {\n        difference() {\n            rounded_box([120, 80, 15], 5);\n            translate([wall, wall, wall])\n                rounded_box([120-2*wall, 80-2*wall, 15-wall], 5-wall);\n        }\n    }\n}\n\n// Hinges (2 pieces)\ntranslate([40, 0, 25]) {\n    hinge();\n}\ntranslate([-40, 0, 25]) {\n    hinge();\n}\n\n// Handle on front\ntranslate([0, -45, 35]) {\n    rotate([90, 0, 0]) {\n        difference() {\n            cylinder(h=8, r=4);\n            translate([0, 0, -0.1])\n                cylinder(h=8.2, r=2.5);\n        }\n    }\n}\n\n// Legs for standing\ntranslate([50, 35, -2]) {\n    cube([4, 4, 10]);\n}\ntranslate([-50, 35, -2]) {\n    cube([4, 4, 10]);\n}\ntranslate([50, -35, -2]) {\n    cube([4, 4, 10]);\n}\ntranslate([-50, -35, -2]) {\n    cube([4, 4, 10]);\n}",
    "renders": true
  },
  {
    "decorative_art": "tempera",
    "openscad_code": "// Tempera Chair - Realistic Style, Medium Complexity\n// 3D printable tempera furniture piece with classic proportions\n\n// Parameters\nseat_height = 45;\nseat_width = 40;\nseat_depth = 40;\nback_height = 50;\nleg_thickness = 4;\nwall_thickness = 2;\n\n// Main assembly\nmodule tempera_chair() {\n    // Chair legs with tapered design\n    union() {\n        // Front left leg\n        translate([-seat_width/2 + leg_thickness/2, -seat_depth/2 + leg_thickness/2, 0])\n            tapered_leg();\n        \n        // Front right leg\n        translate([seat_width/2 - leg_thickness/2, -seat_depth/2 + leg_thickness/2, 0])\n            tapered_leg();\n        \n        // Back left leg\n        translate([-seat_width/2 + leg_thickness/2, seat_depth/2 - leg_thickness/2, 0])\n            tapered_leg();\n        \n        // Back right leg\n        translate([seat_width/2 - leg_thickness/2, seat_depth/2 - leg_thickness/2, 0])\n            tapered_leg();\n        \n        // Seat surface with rounded edges\n        seat_surface();\n        \n        // Backrest with decorative cutouts\n        backrest();\n        \n        // Support stretchers between legs\n        front_stretcher();\n        back_stretcher();\n        left_stretcher();\n        right_stretcher();\n    }\n}\n\n// Tapered leg module\nmodule tapered_leg() {\n    translate([0, 0, seat_height/2])\n        cylinder(h = seat_height, r1 = leg_thickness/2, r2 = leg_thickness/2 * 0.8, $fn = 16);\n}\n\n// Seat surface with slight dome and edge rounding\nmodule seat_surface() {\n    // Main seat\n    translate([0, 0, seat_height - wall_thickness/2])\n        cube([seat_width, seat_depth, wall_thickness], center = true);\n    \n    // Comfort dome\n    translate([0, 0, seat_height])\n        scale([1, 1, 0.3])\n            sphere(r = seat_width/2 * 0.8, $fn = 32);\n}\n\n// Backrest with traditional tempera styling\nmodule backrest() {\n    // Main backrest frame\n    translate([0, seat_depth/2 - wall_thickness/2, seat_height + back_height/2])\n        cube([seat_width * 0.9, wall_thickness, back_height], center = true);\n    \n    // Vertical slats\n    for(i = [-1:1]) {\n        translate([i * seat_width/6, seat_depth/2 - wall_thickness/2, seat_height + back_height * 0.6])\n            cube([wall_thickness * 2, wall_thickness, back_height * 0.8], center = true);\n    }\n    \n    // Top rail curve\n    translate([0, seat_depth/2 - wall_thickness/2, seat_height + back_height - wall_thickness])\n        rotate([90, 0, 0])\n            cylinder(h = seat_width * 0.9, r = wall_thickness * 2, center = true, $fn = 32);\n}\n\n// Front stretcher for stability\nmodule front_stretcher() {\n    translate([0, -seat_depth/2 + leg_thickness/2, seat_height * 0.3])\n        cube([seat_width - leg_thickness, wall_thickness, wall_thickness * 2], center = true);\n}\n\n// Back stretcher\nmodule back_stretcher() {\n    translate([0, seat_depth/2 - leg_thickness/2, seat_height * 0.3])\n        cube([seat_width - leg_thickness, wall_thickness, wall_thickness * 2], center = true);\n}\n\n// Left side stretcher\nmodule left_stretcher() {\n    translate([-seat_width/2 + leg_thickness/2, 0, seat_height * 0.3])\n        rotate([0, 0, 90])\n            cube([seat_depth - leg_thickness, wall_thickness, wall_thickness * 2], center = true);\n}\n\n// Right side stretcher\nmodule right_stretcher() {\n    translate([seat_width/2 - leg_thickness/2, 0, seat_height * 0.3])\n        rotate([0, 0, 90])\n            cube([seat_depth - leg_thickness, wall_thickness, wall_thickness * 2], center = true);\n}\n\n// Generate the complete chair\ntempera_chair();",
    "renders": true
  },
  {
    "decorative_art": "oilpaint",
    "openscad_code": "// Oil Paint Furniture - Decorative Paint Brush Holder\n// A 3D printable furniture piece that holds oil paint tubes and brushes\n// Designed for 3D printing with 2mm wall thickness\n\n// Dimensions (mm)\nbase_width = 80;\nbase_depth = 60;\nbase_height = 8;\nleg_height = 25;\nshelf_clearance = 20;\ntube_holder_height = 40;\nbrush_holder_diameter = 15;\n\n// Module for rounded rectangle\nmodule rounded_rect(width, depth, height, radius) {\n    hull() {\n        translate([radius, radius, 0]) cylinder(h=height, r=radius);\n        translate([width-radius, radius, 0]) cylinder(h=height, r=radius);\n        translate([width-radius, depth-radius, 0]) cylinder(h=height, r=radius);\n        translate([radius, depth-radius, 0]) cylinder(h=height, r=radius);\n    }\n}\n\n// Base structure\ndifference() {\n    // Main base\n    rounded_rect(base_width, base_depth, base_height, 5);\n    \n    // Decorative groove pattern\n    for(i = [1:3]) {\n        translate([i*20, 5, base_height-1]) \n            cube([2, base_depth-10, 2]);\n    }\n}\n\n// Legs at corners\nmodule leg() {\n    difference() {\n        // Main leg\n        translate([-2, -2, 0]) \n            cylinder(h=leg_height, r=4);\n        \n        // Center hole for weight reduction\n        translate([0, 0, -1])\n            cylinder(h=leg_height+2, r=2);\n    }\n}\n\n// Place legs\nfor(x = [10, base_width-10]) {\n    for(y = [10, base_depth-10]) {\n        translate([x, y, base_height])\n            leg();\n    }\n}\n\n// Lower shelf\ntranslate([0, 0, base_height+leg_height])\n    rounded_rect(base_width, base_depth, 4, 5);\n\n// Oil paint tube holder\ntranslate([base_width/2-15, base_depth/2-15, base_height+leg_height+4])\n    difference() {\n        // Main tube holder block\n        cube([30, 30, tube_holder_height]);\n        \n        // Tube slots (6 tubes)\n        for(i = [0:2]) {\n            for(j = [0:1]) {\n                translate([5+i*10, 5+j*10, 0])\n                    cylinder(h=tube_holder_height+1, r=4);\n            }\n        }\n    }\n\n// Brush holder cylinders\nmodule brush_holder() {\n    difference() {\n        // Main cylinder\n        cylinder(h=30, r=brush_holder_diameter/2);\n        \n        // Center hole\n        translate([0, 0, -1])\n            cylinder(h=32, r=5);\n        \n        // Side slot for brush handle\n        translate([0, -brush_holder_diameter/2, 0])\n            cube([3, brush_holder_diameter, 30]);\n    }\n}\n\n// Place brush holders\ntranslate([10, base_depth-20, base_height+leg_height+4])\n    brush_holder();\ntranslate([base_width-10, base_depth-20, base_height+leg_height+4])\n    brush_holder();\n\n// Back support frame\ntranslate([-2, -2, base_height])\n    difference() {\n        // Main frame\n        cube([4, base_depth+4, leg_height+tube_holder_height]);\n        \n        // Decorative cutouts\n        for(i = [1:3]) {\n            translate([0, i*15, leg_height/2])\n                cube([4, 8, 8]);\n        }\n    }\n\n// Side support frames\ntranslate([-2, -2, base_height])\n    difference() {\n        cube([base_width+4, 4, leg_height+tube_holder_height]);\n        \n        for(i = [1:3]) {\n            translate([i*20, 0, leg_height/2])\n                cube([8, 4, 8]);\n        }\n    }\n\n// Top decorative rail\ntranslate([-2, -2, base_height+leg_height+tube_holder_height])\n    difference() {\n        cube([base_width+4, base_depth+4, 4]);\n        \n        // Recessed center\n        translate([5, 5, 0])\n            cube([base_width-10, base_depth-10, 5]);\n    }",
    "renders": true
  },
  {
    "decorative_art": "pastel",
    "openscad_code": "// Pastel bedside table with drawer\n// Overall dimensions: 120mm wide x 90mm deep x 150mm tall\n\n// Parameters\nwall_thickness = 2;\ndrawer_height = 30;\nleg_height = 100;\nleg_size = 15;\ntabletop_thickness = 8;\n\n// Pastel color - light mint green\ncolor([0.7, 0.9, 0.8])\n\n// Main structure\ndifference() {\n    union() {\n        // Tabletop\n        translate([0, 0, leg_height + tabletop_thickness/2])\n            cube([120, 90, tabletop_thickness], center=true);\n        \n        // Four legs\n        leg_positions = [[-50, -35], [50, -35], [50, 35], [-50, 35]];\n        for(pos = leg_positions) {\n            translate([pos[0], pos[1], leg_height/2])\n                cylinder(h=leg_height, r=leg_size/2, center=true);\n        }\n        \n        // Drawer frame\n        translate([0, 0, leg_height - drawer_height/2])\n            cube([110 - wall_thickness*2, 80 - wall_thickness*2, drawer_height], center=true);\n    }\n    \n    // Hollow out drawer space\n    translate([0, 0, leg_height - drawer_height/2 + wall_thickness])\n        cube([110 - wall_thickness*4, 80 - wall_thickness*4, drawer_height + 1], center=true);\n}\n\n// Drawer\ntranslate([0, 0, leg_height - drawer_height/2 + wall_thickness/2])\n    difference() {\n        // Drawer body\n        cube([110 - wall_thickness*4 - 2, 80 - wall_thickness*4 - 2, drawer_height - wall_thickness - 2], center=true);\n        \n        // Hollow out drawer\n        translate([0, 0, -wall_thickness/2])\n            cube([110 - wall_thickness*6, 80 - wall_thickness*6, drawer_height], center=true);\n    }\n\n// Drawer handle\ntranslate([0, (80 - wall_thickness*4)/2 + 5, leg_height - drawer_height/2 + wall_thickness/2])\n    rotate([90, 0, 0])\n        cylinder(h=15, r=4, center=true);\n\n// Decorative beveled edge on tabletop\ndifference() {\n    translate([0, 0, leg_height + tabletop_thickness])\n        cube([120, 90, 2], center=true);\n    \n    translate([0, 0, leg_height + tabletop_thickness - 1])\n        cube([120 - 6, 90 - 6, 4], center=true);\n}\n\n// Bottom shelf support bars\nbar_positions = [[-50, 0], [50, 0], [0, -35], [0, 35]];\nfor(pos = bar_positions) {\n    if(pos[0] == 0) {\n        translate([pos[0], pos[1], leg_height/2])\n            rotate([90, 0, 0])\n                cube([70, wall_thickness, wall_thickness], center=true);\n    } else {\n        translate([pos[0], pos[1], leg_height/2])\n            rotate([0, 90, 0])\n                cube([90, wall_thickness, wall_thickness], center=true);\n    }\n}\n\n// Shelf\ntranslate([0, 0, leg_height/2 - 5])\n    cube([100, 70, wall_thickness], center=true);",
    "renders": true
  },
  {
    "decorative_art": "charcoal",
    "openscad_code": "// Charcoal-inspired decorative side table\n// Realistic style, medium complexity\n// Approx. 100mm x 80mm x 120mm\n\n// Overall dimensions\ntable_width = 100;\ntable_depth = 80;\ntable_height = 120;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Charcoal texture pattern\nmodule charcoal_texture(size, depth) {\n    for (x = [0:2:size-4]) {\n        for (y = [0:2:size-4]) {\n            translate([x, y, -depth/2])\n                cube([2, 2, depth], center=true);\n        }\n    }\n}\n\n// Charcoal block with rounded edges\nmodule charcoal_block(w, d, h) {\n    difference() {\n        // Main block\n        minkowski() {\n            cube([w-4, d-4, h-4], center=true);\n            sphere(2);\n        }\n        \n        // Hollow inside\n        translate([0, 0, -wall])\n            minkowski() {\n                cube([w-4-wall*2, d-4-wall*2, h-4-wall*2], center=true);\n                sphere(1);\n            }\n        \n        // Charcoal texture on top\n        translate([0, 0, h/2-1])\n            charcoal_texture(w-8, 2);\n    }\n}\n\n// Table top with charcoal pattern\nmodule table_top() {\n    difference() {\n        // Main top\n        translate([0, 0, table_height-8])\n            cube([table_width, table_depth, 8], center=true);\n        \n        // Recessed area\n        translate([0, 0, table_height-7])\n            cube([table_width-4, table_depth-4, 4], center=true);\n    }\n    \n    // Charcoal inlays\n    for (i = [0:3]) {\n        translate([-30 + i*20, 0, table_height-7])\n            charcoal_block(12, 12, 3);\n    }\n    \n    for (i = [0:2]) {\n        translate([0, -20 + i*20, table_height-7])\n            charcoal_block(12, 12, 3);\n    }\n}\n\n// Leg with charcoal accent\nmodule leg(x, y) {\n    // Main leg\n    translate([x, y, table_height/2-4])\n        cube([6, 6, table_height-8], center=true);\n    \n    // Charcoal accent\n    translate([x, y, table_height/2-4])\n        rotate([0, 0, 45])\n        charcoal_block(8, 8, 30);\n    \n    // Base support\n    translate([x, y, 2])\n        cube([10, 10, 4], center=true);\n}\n\n// Side panel with charcoal grid\nmodule side_panel(w, h, angle) {\n    rotate([0, angle, 0])\n    translate([0, 0, h/2+4])\n    difference() {\n        // Main panel\n        cube([w, wall, h], center=true);\n        \n        // Charcoal holes\n        for (i = [0:4]) {\n            for (j = [0:3]) {\n                translate([-w/2+10+i*15, 0, -h/2+10+j*20])\n                    rotate([90, 0, 0])\n                    cylinder(h=wall+1, r=3, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Table top\n    table_top();\n    \n    // Four legs\n    leg(-table_width/2+8, -table_depth/2+8);\n    leg(table_width/2-8, -table_depth/2+8);\n    leg(-table_width/2+8, table_depth/2-8);\n    leg(table_width/2-8, table_depth/2-8);\n    \n    // Side panels\n    side_panel(table_width-16, table_height-20, 0);\n    translate([0, table_depth/2, 0])\n        side_panel(table_width-16, table_height-20, 0);\n    \n    // Lower shelf with charcoal supports\n    translate([0, 0, 30])\n    difference() {\n        cube([table_width-16, table_depth-16, 4], center=true);\n        \n        // Charcoal supports\n        for (x = [-30:30:30]) {\n            for (y = [-25:25:25]) {\n                translate([x, y, -2])\n                    charcoal_block(8, 8, 6);\n            }\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "ink",
    "openscad_code": "// Inkwell Desk Caddy - A realistic ink furniture piece\n// Overall dimensions: 100mm x 80mm x 120mm\n\n$fn = 50;\n\n// Main body - ink bottle shaped container\nmodule ink_bottle() {\n    // Base cylinder\n    cylinder(h = 80, r1 = 35, r2 = 30, center = false);\n    \n    // Neck transition\n    translate([0, 0, 80])\n        cylinder(h = 15, r1 = 30, r2 = 20, center = false);\n    \n    // Rim\n    translate([0, 0, 95])\n        cylinder(h = 5, r1 = 22, r2 = 25, center = false);\n}\n\n// Internal cavity for holding pens\nmodule ink_cavity() {\n    // Main cavity\n    translate([0, 0, -1])\n        cylinder(h = 82, r1 = 33, r2 = 28, center = false);\n    \n    // Neck cavity\n    translate([0, 0, 81])\n        cylinder(h = 17, r1 = 28, r2 = 18, center = false);\n}\n\n// Decorative base with feet\nmodule decorative_base() {\n    difference() {\n        // Main base\n        union() {\n            // Center platform\n            translate([0, 0, 2])\n                cylinder(h = 8, r = 45, center = false);\n            \n            // Four decorative feet\n            for (i = [0:3]) {\n                rotate([0, 0, i * 90])\n                    translate([38, 0, 0])\n                        cube([12, 8, 10], center = true);\n            }\n        }\n        \n        // Hollow out center\n        translate([0, 0, -1])\n            cylinder(h = 12, r = 40, center = false);\n    }\n}\n\n// Pen rest slots on top\nmodule pen_rests() {\n    for (i = [-1, 1]) {\n        translate([i * 15, 0, 100])\n            rotate([90, 0, 0])\n                cylinder(h = 25, r1 = 6, r2 = 4, center = true);\n    }\n}\n\n// Decorative ring around neck\nmodule neck_ring() {\n    difference() {\n        // Main ring\n        translate([0, 0, 87])\n            cylinder(h = 8, r1 = 35, r2 = 35, center = false);\n        \n        // Inner cutout\n        translate([0, 0, 86])\n            cylinder(h = 10, r1 = 25, r2 = 25, center = false);\n    }\n}\n\n// Quill holder attachment\nmodule quill_holder() {\n    translate([0, 45, 40]) {\n        // Main support\n        cube([8, 8, 60], center = true);\n        \n        // Top cross bar\n        translate([0, 10, 20])\n            cube([6, 20, 4], center = true);\n        \n        // Decorative finial\n        translate([0, 15, 42])\n            sphere(r = 4);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body assembly\n    difference() {\n        union() {\n            // Ink bottle shape\n            ink_bottle();\n            \n            // Decorative base\n            decorative_base();\n            \n            // Neck ring\n            neck_ring();\n        }\n        \n        // Internal cavity\n        ink_cavity();\n    }\n    \n    // Pen rests\n    pen_rests();\n    \n    // Quill holder\n    quill_holder();\n}",
    "renders": true
  },
  {
    "decorative_art": "seal",
    "openscad_code": "// Seal-shaped decorative furniture stool / side table\n// Overall dimensions: 150mm long x 80mm wide x 120mm high\n// Wall thickness: 2 mm throughout\n\n// Main body module\nmodule seal_body() {\n    // Central body - ellipsoid\n    scale([1, 0.7, 0.8])\n        sphere(d = 60, $fn = 40);\n    \n    // Tail - tapered cylinder\n    translate([-35, 0, 0])\n        rotate([0, 90, 0])\n            cylinder(d1 = 30, d2 = 15, h = 40, $fn = 20);\n}\n\n// Flippers module\nmodule seal_flippers() {\n    // Left flipper\n    translate([10, 25, -20])\n        rotate([0, 30, 45])\n            scale([1, 0.3, 0.15])\n                sphere(d = 40, $fn = 15);\n    \n    // Right flipper\n    translate([10, -25, -20])\n        rotate([0, -30, -45])\n            scale([1, 0.3, 0.15])\n                sphere(d = 40, $fn = 15);\n}\n\n// Head module\nmodule seal_head() {\n    // Main head sphere\n    translate([35, 0, 25])\n        sphere(d = 45, $fn = 30);\n    \n    // Snout\n    translate([50, 0, 20])\n        scale([1.5, 0.8, 0.6])\n            sphere(d = 20, $fn = 20);\n    \n    // Eyes\n    for(side = [-1, 1]) {\n        translate([40, side * 8, 35])\n            sphere(d = 8, $fn = 12);\n    }\n    \n    // Nose\n    translate([55, 0, 22])\n        sphere(d = 5, $fn = 10);\n}\n\n// Whiskers\nmodule whiskers() {\n    for(side = [-1, 1]) {\n        for(i = [1:3]) {\n            rotate([0, 0, side * i * 15])\n                translate([52, side * 12 + i * 2, 20])\n                    cylinder(d = 1.5, h = 10, $fn = 8);\n        }\n    }\n}\n\n// Structural base - hollow cylinder for stability\nmodule base() {\n    difference() {\n        // Outer base\n        translate([0, 0, -60])\n            cylinder(d = 80, h = 60, $fn = 40);\n        \n        // Inner hollow\n        translate([0, 0, -58])\n            cylinder(d = 76, h = 58, $fn = 40);\n    }\n}\n\n// Decorative pattern on body\nmodule body_pattern() {\n    for(i = [0:5:60]) {\n        rotate([0, 0, i * 6])\n            translate([0, 0, -i / 2])\n                scale([1, 0.9, 0.1])\n                    sphere(d = 8, $fn = 8);\n    }\n}\n\n// Assembly\nunion() {\n    // Main seal structure\n    union() {\n        seal_body();\n        seal_flippers();\n        seal_head();\n        whiskers();\n    }\n    \n    // Structural elements\n    base();\n    \n    // Decorative elements\n    body_pattern();\n}",
    "renders": true
  },
  {
    "decorative_art": "scroll",
    "openscad_code": "// Scroll Furniture - Decorative Wall Mount Scroll\n// Realistic style, medium complexity, 3D printable\n\n$fn = 50; // Smooth curves for printing\n\n// Overall dimensions (mm)\nscroll_length = 120;\nscroll_diameter = 25;\nwall_mount_thickness = 3;\npaper_thickness = 2;\n\n// Decorative elements\nend_cap_height = 8;\nend_cap_diameter = 28;\nscroll_pattern_width = 2;\nscroll_pattern_depth = 1;\n\nmodule scroll_end_cap() {\n    // Main end cap cylinder\n    cylinder(h = end_cap_height, d = end_cap_diameter, center = true);\n    \n    // Decorative ring pattern\n    difference() {\n        cylinder(h = end_cap_height, d = end_cap_diameter - 2, center = true);\n        cylinder(h = end_cap_height + 0.1, d = end_cap_diameter - 6, center = true);\n    }\n    \n    // Central decorative boss\n    translate([0, 0, end_cap_height/2])\n        cylinder(h = 2, d = 12, center = false);\n}\n\nmodule scroll_rod() {\n    // Main scroll rod\n    cylinder(h = scroll_length, d = scroll_diameter, center = true);\n    \n    // Decorative spiral pattern along rod\n    for (i = [-scroll_length/2 + 5 : 10 : scroll_length/2 - 5]) {\n        rotate([0, 90, 0])\n        translate([i, 0, 0])\n        rotate_extrude(angle = 360, $fn = 20)\n        translate([scroll_diameter/2 + scroll_pattern_depth/2, 0, 0])\n        square([scroll_pattern_depth, scroll_pattern_width], center = true);\n    }\n}\n\nmodule paper_sheet() {\n    // Rolled paper emerging from scroll\n    translate([0, 0, 0])\n    rotate([90, 0, 0])\n    linear_extrude(height = paper_thickness, center = true)\n    for (i = [0 : 5 : 180]) {\n        rotate([0, 0, i])\n        translate([scroll_diameter/2 + paper_thickness/2 + i*0.5, 0, 0])\n        square([3, 2], center = true);\n    }\n}\n\nmodule wall_mount() {\n    // Back mounting plate\n    translate([0, -scroll_diameter/2 - wall_mount_thickness/2, 0])\n    cube([scroll_length + 20, wall_mount_thickness, scroll_diameter + 10], center = true);\n    \n    // Keyhole mounting slots\n    for (x = [-scroll_length/3, 0, scroll_length/3]) {\n        translate([x, -scroll_diameter/2 - wall_mount_thickness, scroll_diameter/4])\n        rotate([0, 90, 0])\n        cylinder(h = wall_mount_thickness + 1, d = 6, center = true);\n        \n        translate([x, -scroll_diameter/2 - wall_mount_thickness, scroll_diameter/4 - 8])\n        rotate([0, 90, 0])\n        cylinder(h = wall_mount_thickness + 1, d = 3, center = true);\n    }\n}\n\nmodule decorative_details() {\n    // Small decorative studs on end caps\n    for (angle = [0 : 45 : 315]) {\n        rotate([0, 90, angle])\n        translate([scroll_length/2 + end_cap_height/2, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 2, d = 4, center = true);\n        \n        rotate([0, 90, angle])\n        translate([-scroll_length/2 - end_cap_height/2, 0, 0])\n        rotate([90, 0, 0])\n        cylinder(h = 2, d = 4, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Left end cap\n    translate([-scroll_length/2 - end_cap_height/2, 0, 0])\n    scroll_end_cap();\n    \n    // Right end cap\n    translate([scroll_length/2 + end_cap_height/2, 0, 0])\n    scroll_end_cap();\n    \n    // Main scroll rod\n    scroll_rod();\n    \n    // Paper sheet\n    paper_sheet();\n    \n    // Wall mount\n    wall_mount();\n    \n    // Decorative elements\n    decorative_details();\n}",
    "renders": true
  },
  {
    "decorative_art": "manuscript",
    "openscad_code": "// Manuscript Cabinet - Realistic Style (Medium Complexity)\n// A small cabinet designed to hold and display ancient manuscripts\n// Overall dimensions: 100mm x 80mm x 120mm\n\n$fn = 50;\n\n// Main cabinet body\nmodule cabinet_body() {\n    // Bottom base\n    difference() {\n        cube([100, 80, 10], center=true);\n        translate([0, 0, -5])\n            cube([96, 76, 10], center=true);\n    }\n    \n    // Main box structure\n    difference() {\n        cube([90, 70, 100], center=true);\n        // Interior cavity\n        translate([0, 0, 5])\n            cube([86, 66, 96], center=true);\n    }\n}\n\n// Decorative front frame\nmodule front_frame() {\n    // Left vertical frame\n    translate([-43, -35, 0])\n        cube([4, 70, 100], center=true);\n    \n    // Right vertical frame\n    translate([43, -35, 0])\n        cube([4, 70, 100], center=true);\n    \n    // Top horizontal frame\n    translate([0, -35, 48])\n        cube([90, 4, 4], center=true);\n    \n    // Bottom horizontal frame\n    translate([0, -35, -48])\n        cube([90, 4, 4], center=true);\n}\n\n// Ornate legs\nmodule legs() {\n    for(x=[-40, 40])\n    for(y=[-30, 30]) {\n        translate([x, y, -65])\n            cylinder(h=30, r1=5, r2=3);\n    }\n}\n\n// Cabinet doors with manuscript motif\nmodule doors() {\n    // Left door\n    translate([-22.5, -30.5, 0])\n    difference() {\n        cube([43, 3, 90], center=true);\n        // Manuscript viewing window\n        translate([0, 0, 15])\n            cube([35, 4, 50], center=true);\n        \n        // Decorative circles (manuscript seals)\n        for(i=[-20, 0, 20])\n            translate([i, 0, -20])\n                rotate([90, 0, 0])\n                    cylinder(h=4, r=3);\n    }\n    \n    // Right door\n    translate([22.5, -30.5, 0])\n    difference() {\n        cube([43, 3, 90], center=true);\n        // Manuscript viewing window\n        translate([0, 0, 15])\n            cube([35, 4, 50], center=true);\n        \n        // Decorative circles (manuscript seals)\n        for(i=[-20, 0, 20])\n            translate([i, 0, -20])\n                rotate([90, 0, 0])\n                    cylinder(h=4, r=3);\n    }\n}\n\n// Cabinet top with crown molding\nmodule top_molding() {\n    // Main top\n    translate([0, 0, 55])\n    difference() {\n        cube([94, 74, 6], center=true);\n        translate([0, 0, -3])\n            cube([90, 70, 6], center=true);\n    }\n    \n    // Crown detail\n    translate([0, 0, 58])\n    cube([98, 78, 3], center=true);\n}\n\n// Back panel with manuscript storage slots\nmodule back_panel() {\n    translate([0, 34.5, 0])\n    difference() {\n        cube([86, 3, 90], center=true);\n        \n        // Manuscript slots (3 vertical slots)\n        for(i=[-25, 0, 25])\n            translate([i, -1, 0])\n                cube([15, 5, 80], center=true);\n    }\n}\n\n// Decorative handles\nmodule handles() {\n    // Left door handle\n    translate([-12, -28, 0])\n    rotate([0, 90, 0])\n        cylinder(h=15, r=2);\n    \n    // Right door handle\n    translate([12, -28, 0])\n    rotate([0, 90, 0])\n        cylinder(h=15, r=2);\n}\n\n// Shelves inside cabinet\nmodule shelves() {\n    translate([0, 0, -20])\n        cube([84, 64, 2], center=true);\n    \n    translate([0, 0, 10])\n        cube([84, 64, 2], center=true);\n}\n\n// Assembly\nunion() {\n    cabinet_body();\n    front_frame();\n    legs();\n    top_molding();\n    back_panel();\n    doors();\n    handles();\n    shelves();\n}",
    "renders": true
  },
  {
    "decorative_art": "iconography",
    "openscad_code": "// Iconography Cabinet - Medium Complexity Realistic Style\n// A functional miniature cabinet with decorative religious iconography panels\n\n$fn = 32;\n\n// Overall dimensions\ncabinet_width = 80;\ncabinet_depth = 40;\ncabinet_height = 120;\n\n// Wall thickness\nwall_thick = 2;\n\n// Door dimensions\ndoor_width = (cabinet_width - wall_thick*3)/2;\ndoor_height = cabinet_height - wall_thick*2 - 15;\n\n// Base dimensions\nbase_height = 15;\nbase_overhang = 3;\n\n// Icon panel dimensions\nicon_width = door_width - 10;\nicon_height = door_height - 30;\nicon_depth = 1;\n\n// Ornate top decoration\ntop_height = 12;\ntop_width = cabinet_width + 8;\n\n// Cornice profile\nmodule cornice_profile(width, depth, height) {\n    difference() {\n        cube([width, depth, height]);\n        translate([wall_thick, wall_thick, wall_thick])\n        cube([width - wall_thick*2, depth - wall_thick*2, height]);\n    }\n}\n\n// Decorative cornice\nmodule cornice() {\n    union() {\n        cornice_profile(top_width, cabinet_depth + base_overhang*2, top_height);\n        \n        // Front decorative molding\n        for(i = [0:7]) {\n            translate([i * 10 + 5, -1, 0])\n            cube([2, cabinet_depth + base_overhang*2, top_height]);\n        }\n    }\n}\n\n// Icon panel with relief\nmodule icon_panel(width, height, depth) {\n    difference() {\n        // Main panel\n        cube([width, depth, height]);\n        \n        // Central cross relief\n        translate([width/2 - 2, -0.5, height/2 - 10])\n        cube([4, depth + 1, 20]);\n        translate([width/2 - 10, -0.5, height/2 - 2])\n        cube([20, depth + 1, 4]);\n        \n        // Corner decorations\n        for(x = [5, width - 8]) {\n            for(y = [5, height - 8]) {\n                translate([x, -0.5, y])\n                sphere(d=6);\n            }\n        }\n    }\n}\n\n// Door with icon panel\nmodule door(side) {\n    translate([side * (cabinet_width/2 + wall_thick/2), 0, base_height]) {\n        rotate([0, side * 90, 0])\n        union() {\n            // Door frame\n            difference() {\n                cube([door_width, wall_thick, door_height]);\n                translate([wall_thick, -1, wall_thick])\n                cube([door_width - wall_thick*2, wall_thick + 2, door_height - wall_thick*2]);\n            }\n            \n            // Icon panel\n            translate([(door_width - icon_width)/2, wall_thick/2, (door_height - icon_height)/2])\n            icon_panel(icon_width, icon_height, icon_depth);\n            \n            // Door handle\n            translate([side * (door_width - wall_thick*2 - 5), wall_thick + 2, door_height/2])\n            cylinder(h=8, d=4);\n        }\n    }\n}\n\n// Cabinet body\nmodule cabinet_body() {\n    difference() {\n        // Main box\n        cube([cabinet_width, cabinet_depth, cabinet_height]);\n        \n        // Hollow interior\n        translate([wall_thick, wall_thick, base_height + wall_thick])\n        cube([cabinet_width - wall_thick*2, cabinet_depth - wall_thick*2, cabinet_height - base_height - wall_thick*2]);\n        \n        // Door openings\n        translate([0, -0.5, base_height + wall_thick])\n        cube([wall_thick, cabinet_depth + 1, door_height + wall_thick*2]);\n        translate([cabinet_width - wall_thick, -0.5, base_height + wall_thick])\n        cube([wall_thick, cabinet_depth + 1, door_height + wall_thick*2]);\n        \n        // Shelf slots\n        for(z = [base_height + wall_thick + 20, base_height + wall_thick + 40, base_height + wall_thick + 60]) {\n            translate([wall_thick, -0.5, z])\n            cube([cabinet_width - wall_thick*2, cabinet_depth + 1, 2]);\n        }\n    }\n}\n\n// Decorative base\nmodule base() {\n    union() {\n        // Main base\n        cube([cabinet_width + base_overhang*2, cabinet_depth + base_overhang*2, base_height]);\n        \n        // Base molding\n        translate([base_overhang/2, base_overhang/2, 0])\n        cube([cabinet_width + base_overhang, cabinet_depth + base_overhang, wall_thick]);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([-base_overhang, -base_overhang, 0])\n    base();\n    \n    // Main cabinet\n    translate([0, 0, base_height])\n    cabinet_body();\n    \n    // Cornice\n    translate([-4, -base_overhang, cabinet_height + base_height])\n    cornice();\n    \n    // Doors\n    door(0);\n    door(1);\n}",
    "renders": true
  },
  {
    "decorative_art": "relief",
    "openscad_code": "// Relief Wall Art - Art-Deco Cabinet\n// Dimensions: 100mm wide x 80mm tall x 15mm deep relief\n\nwall_thickness = 2;\nrelief_depth = 15;\nwidth = 100;\nheight = 80;\ndepth = 15;\n\nmodule relief_cabinet() {\n    difference() {\n        // Main cabinet body\n        cube([width, height, depth]);\n        \n        // Hollow out back\n        translate([wall_thickness, wall_thickness, -1])\n            cube([width-wall_thickness*2, height-wall_thickness*2, depth+2]);\n    }\n    \n    // Cabinet frame detail\n    translate([0, 0, depth-2])\n    difference() {\n        cube([width, height, 2]);\n        translate([wall_thickness*2, wall_thickness*2, -1])\n            cube([width-wall_thickness*4, height-wall_thickness*4, 4]);\n    }\n    \n    // Vertical dividers\n    for (x = [25, 50, 75]) {\n        translate([x, 0, 0])\n            cube([wall_thickness, height, depth]);\n    }\n    \n    // Horizontal shelves\n    for (y = [20, 40, 60]) {\n        translate([0, y, 0])\n            cube([width, wall_thickness, depth]);\n    }\n    \n    // Art-Deco door handles (raised relief)\n    for (x = [12.5, 37.5, 62.5, 87.5]) {\n        translate([x, 10, depth-1])\n            cylinder(h=1, r=2, $fn=6);\n    }\n    \n    // Decorative top molding\n    translate([-2, height-6, depth-4])\n    for (i = [0:10:104]) {\n        translate([i, 0, 0])\n            cube([8, 6, 4]);\n    }\n    \n    // Side panel details\n    module side_detail() {\n        for (i = [10:10:70]) {\n            translate([0, i, 3])\n                cube([wall_thickness, 5, 4]);\n        }\n    }\n    \n    translate([0, 0, 0]) side_detail();\n    translate([width-wall_thickness, 0, 0]) mirror([1,0,0]) side_detail();\n    \n    // Base platform\n    translate([-5, -5, 0])\n        cube([width+10, 5, wall_thickness]);\n    \n    // Back mounting holes (2mm diameter)\n    translate([20, 40, -1])\n        cylinder(h=wall_thickness+2, r=1.2, $fn=16);\n    translate([width-20, 40, -1])\n        cylinder(h=wall_thickness+2, r=1.2, $fn=16);\n}\n\n// Render the relief\nrelief_cabinet();",
    "renders": true
  },
  {
    "decorative_art": "basrelief",
    "openscad_code": "// Bas-relief of a Rococo-style side table (front view, 2.5D relief)\n// Overall footprint: 120 mm wide × 90 mm high, relief depth 15 mm\n// Wall thickness 2 mm for all printable parts\n\n$fn = 24;\n\nmodule relief_base() {\n    // Full back plate (2 mm thick)\n    difference() {\n        translate([0, 0, -2])\n            cube([120, 90, 2], center = true);\n        \n        // Optional keyhole slot for wall mounting\n        translate([0, 35, -1])\n            rotate([90, 0, 0])\n                cylinder(h = 10, r1 = 3, r2 = 3, center = true);\n    }\n}\n\nmodule tabletop() {\n    // Top slab (rounded front edge)\n    translate([0, 35, 7])\n        difference() {\n            cube([110, 20, 4], center = true);\n            translate([0, -10, 2])\n                cube([110, 20, 4], center = true);\n            translate([0, -10, 0])\n                rotate([0, 90, 0])\n                    cylinder(h = 110, r = 4, center = true);\n        }\n}\n\nmodule cabriole_leg(x_pos) {\n    // Single cabriole leg (sculpted relief)\n    translate([x_pos, 15, 0]) {\n        // Leg body\n        hull() {\n            translate([0, 0, 2])\n                sphere(d = 6);\n            translate([0, -10, 2])\n                sphere(d = 5);\n            translate([0, -20, 2])\n                sphere(d = 4);\n            translate([0, -30, 2])\n                sphere(d = 6);\n        }\n        // Ornamental acanthus scroll at knee\n        translate([2, -12, 3])\n            rotate([0, 0, 30])\n                scale([1, 0.6, 1])\n                    sphere(d = 5);\n    }\n}\n\nmodule apron() {\n    // Curved apron with carved shell\n    translate([0, 15, 4])\n        difference() {\n            // Main apron body\n            scale([1, 0.5, 1])\n                cube([100, 20, 3], center = true);\n            \n            // Inner shell relief\n            translate([0, 0, 1.5])\n                scale([0.6, 0.6, 1])\n                    sphere(d = 30);\n            \n            // Groove lines\n            for (i = [-1:1]) {\n                translate([i * 15, 0, 1.5])\n                    rotate([0, 0, 45 * i])\n                        cube([15, 1, 3], center = true);\n            }\n        }\n}\n\nmodule drawer() {\n    // Small drawer front with brass pull\n    translate([0, 5, 3])\n        difference() {\n            cube([40, 10, 3], center = true);\n            \n            // Panel molding\n            translate([0, 0, 1.5])\n                cube([36, 8, 0.5], center = true);\n            \n            // Keyhole\n            translate([0, 2, 1.6])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, r1 = 1.5, r2 = 1, center = true);\n        }\n}\n\nmodule lower_stretcher() {\n    // H-shaped stretcher with turned finials\n    translate([0, -20, 2]) {\n        // Stretcher bar\n        cube([90, 6, 4], center = true);\n        \n        // Finials at ends\n    for (x = [-40, 40]) {\n            translate([x, 0, 3])\n                cylinder(h = 4, r = 3, center = true);\n                translate([x, 0, 5])\n                    sphere(d = 4);\n        }\n    }\n}\n\n// Assembly\nrelief_base();\ntabletop();\ncabriole_leg(-45);\ncabriole_leg(45);\napron();\ndrawer();\nlower_stretcher();",
    "renders": true
  },
  {
    "decorative_art": "intaglio",
    "openscad_code": "// Intaglio Carved Jewelry Box - Realistic Style\n// External size: 100x70x45 mm\n// Wall thickness: 2 mm for 3D printing\n\nmodule box_base() {\n    // Main hollow box with intaglio patterns\n    difference() {\n        // Outer shell\n        cube([100, 70, 45], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 2.5])\n            cube([96, 66, 40], center=true);\n    }\n}\n\nmodule carved_rosette(x, y, z, size) {\n    // Intaglio rosette pattern\n    translate([x, y, z]) {\n        difference() {\n            cylinder(h=2, r=size, center=true);\n            for(i=[0:6]) {\n                rotate([0, 0, i*60])\n                    translate([size*0.4, 0, -1])\n                        cube([size*0.8, size*0.15, 4], center=true);\n            }\n            cylinder(h=3, r=size*0.2, center=true);\n        }\n    }\n}\n\nmodule carved_border() {\n    // Intaglio leaf motif border\n    for(side=[0:3]) {\n        rotate([0, 0, side*90])\n            translate([40, 35-2, 19.5]) {\n                for(i=[0:19]) {\n                    translate([i*4-40, 0, 0])\n                        rotate([90, 0, 0])\n                            difference() {\n                                cylinder(h=2, r1=1.5, r2=1, center=true);\n                                translate([0.5, -0.5, 0])\n                                    cube([1.5, 1, 3], center=true);\n                            }\n                }\n            }\n    }\n}\n\nmodule decorative_feet() {\n    // Four ornate feet with intaglio details\n    module foot(x, y) {\n        translate([x, y, 22.5]) {\n            difference() {\n                // Main foot\n                cylinder(h=5, r=6, center=true);\n                \n                // Intaglio spiral\n                for(i=[0:3]) {\n                    rotate([0, 0, i*90])\n                        translate([2, 0, -3])\n                            rotate([90, 0, 0])\n                                cylinder(h=5, r1=3, r2=1, center=true);\n                }\n                \n                // Center hole\n                cylinder(h=6, r=2, center=true);\n            }\n        }\n    }\n    \n    foot(40, 25);\n    foot(-40, 25);\n    foot(40, -25);\n    foot(-40, -25);\n}\n\nmodule lid() {\n    // Hinged lid with intaglio central medallion\n    translate([0, 0, 25]) {\n        difference() {\n            // Lid base\n            cube([98, 68, 4], center=true);\n            \n            // Interior cavity\n            translate([0, 0, -1])\n                cube([94, 64, 4], center=true);\n        }\n        \n        // Intaglio central medallion\n        translate([0, 0, 2]) {\n            difference() {\n                cylinder(h=2, r=20, center=true);\n                \n                // Geometric intaglio pattern\n                for(i=[0:7]) {\n                    rotate([0, 0, i*45])\n                        translate([10, 0, -1])\n                            cube([15, 3, 4], center=true);\n                }\n                \n                // Central flower\n                for(i=[0:5]) {\n                    rotate([0, 0, i*72])\n                        translate([7, 0, -1])\n                            rotate([0, 0, 30])\n                                cube([5, 2, 4], center=true);\n                }\n            }\n        }\n        \n        // Decorative rim\n        translate([0, 0, 2]) {\n            difference() {\n                cube([96, 66, 1.5], center=true);\n                cube([92, 62, 2], center=true);\n            }\n        }\n    }\n}\n\nmodule hinge_pins() {\n    // Small hinge pins on back\n    translate([0, 35, 23]) {\n        for(i=[-30:30:60]) {\n            translate([i, 0, 0])\n                cylinder(h=5, r=1.5, center=true);\n        }\n    }\n}\n\n// Assemble the jewelry box\nunion() {\n    box_base();\n    carved_border();\n    \n    // Front panel intaglio decoration\n    translate([0, 33, 0]) {\n        carved_rosette(-30, 0, 19.5, 8);\n        carved_rosette(0, 0, 19.5, 10);\n        carved_rosette(30, 0, 19.5, 8);\n    }\n    \n    // Side panel decorations\n    carved_rosette(48, 0, 19.5, 6);\n    carved_rosette(-48, 0, 19.5, 6);\n    \n    decorative_feet();\n    lid();\n    hinge_pins();\n}",
    "renders": true
  },
  {
    "decorative_art": "mezzotint",
    "openscad_code": "// Mezzotint Display Frame with Ornate Stand\n// Realistic style, medium complexity\n\n// Overall dimensions\nframe_width = 100;\nframe_height = 120;\nframe_depth = 8;\nstand_height = 40;\nwall_thickness = 2;\n\nmodule frame_profile() {\n    // Outer frame\n    difference() {\n        cube([frame_width, frame_height, frame_depth], center=true);\n        translate([0, 0, wall_thickness])\n            cube([frame_width-wall_thickness*2, frame_height-wall_thickness*2, frame_depth], center=true);\n    }\n    \n    // Decorative inner lip\n    translate([0, 0, frame_depth/2 - wall_thickness])\n        cube([frame_width-wall_thickness*4, frame_height-wall_thickness*4, wall_thickness], center=true);\n}\n\nmodule ornamental_corner() {\n    // Corner decoration with mezzotint pattern\n    for(i=[0:45:315]) {\n        rotate([0, 0, i])\n            translate([frame_width/2 - wall_thickness*3, frame_height/2 - wall_thickness*3, 0])\n                cylinder(h=wall_thickness*1.5, r1=wall_thickness, r2=0, center=true);\n    }\n}\n\nmodule mezzotint_texture() {\n    // Dot pattern for mezzotint effect\n    for(x=[-frame_width/2+10:5:frame_width/2-10]) {\n        for(y=[-frame_height/2+10:5:frame_height/2-10]) {\n            translate([x, y, frame_depth/2 - wall_thickness/2])\n                sphere(d=0.8, $fn=8);\n        }\n    }\n}\n\nmodule stand_base() {\n    // Ornate base with curved legs\n    union() {\n        // Center pedestal\n        cylinder(h=stand_height/2, r1=frame_width/3, r2=frame_width/4, center=true);\n        \n        // Decorative feet\n        for(angle=[0:90:270]) {\n            rotate([0, 0, angle])\n                translate([frame_width/3, 0, -stand_height/4])\n                    rotate([90, 0, 0])\n                        cylinder(h=frame_width/6, r1=wall_thickness*2, r2=wall_thickness, center=true);\n        }\n    }\n}\n\nmodule support_brace() {\n    // Curved support from base to frame\n    translate([0, 0, stand_height/4])\n        rotate([90, 0, 0])\n            cylinder(h=stand_height/2, r1=wall_thickness*2, r2=wall_thickness, center=true);\n}\n\n// Assembly\nunion() {\n    // Frame assembly\n    translate([0, 0, stand_height/2 + frame_depth/2])\n        union() {\n            frame_profile();\n            \n            // Add corner decorations\n            for(x=[-1,1]) {\n                for(y=[-1,1]) {\n                    translate([x*frame_width/2, y*frame_height/2, 0])\n                        ornamental_corner();\n                }\n            }\n            \n            // Mezzotint texture panel\n            mezzotint_texture();\n        }\n    \n    // Stand assembly\n    translate([0, 0, -stand_height/4])\n        union() {\n            stand_base();\n            support_brace();\n        }\n}\n\n// Hidden support structure for 3D printing\ntranslate([0, 0, -stand_height/2 - wall_thickness])\n    cube([frame_width/4, frame_height/4, wall_thickness], center=true);",
    "renders": true
  },
  {
    "decorative_art": "aquatint",
    "openscad_code": "// Aquatint decorative chair - medium complexity realistic style\n// Overall dimensions: 120mm H x 80mm W x 80mm D\n\nchair_height = 120;\nseat_height = 45;\nback_height = chair_height - seat_height;\nwidth = 80;\ndepth = 80;\nleg_thickness = 4;\nwall_thickness = 2.5;\n\n// Main chair module\nmodule aquatint_chair() {\n    // Chair legs\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * (width/2 - leg_thickness), y * (depth/2 - leg_thickness), 0])\n                leg();\n        }\n    }\n    \n    // Seat panel\n    translate([0, 0, seat_height/2])\n        cube([width - leg_thickness*2, depth - leg_thickness*2, wall_thickness*2], center=true);\n    \n    // Backrest frame\n    translate([0, -depth/2 + leg_thickness + wall_thickness, seat_height + back_height/2])\n        cube([width - leg_thickness*2, wall_thickness*2, back_height], center=true);\n    \n    // Backrest decorative aquatint pattern\n    translate([0, -depth/2 + leg_thickness + wall_thickness*2, seat_height + back_height*0.7])\n        aquatint_pattern();\n    \n    // Side support rails\n    for(side = [-1, 1]) {\n        translate([side * (width/2 - leg_thickness), 0, seat_height/2])\n            rotate([0, 90, 0])\n                cube([seat_height, leg_thickness, leg_thickness], center=true);\n    }\n}\n\n// Chair leg with taper\nmodule leg() {\n    union() {\n        // Main leg\n        cylinder(h=seat_height, r1=leg_thickness, r2=leg_thickness*0.8, center=false);\n        \n        // Foot detail\n        translate([0, 0, -wall_thickness])\n            cylinder(h=wall_thickness*2, r=leg_thickness*1.2, center=true);\n    }\n}\n\n// Aquatint decorative pattern for backrest\nmodule aquatint_pattern() {\n    pattern_width = width - leg_thickness*4;\n    pattern_height = back_height * 0.6;\n    \n    difference() {\n        // Base panel\n        cube([pattern_width, wall_thickness*2, pattern_height], center=true);\n        \n        // Etched circles creating aquatint texture\n        for(i = [-4:4]) {\n            for(j = [-2:2]) {\n                translate([i * (pattern_width/8), 0, j * (pattern_height/4)])\n                    sphere(r=3);\n            }\n        }\n        \n        // Additional texture dots\n        for(i = [-8:8]) {\n            for(j = [-6:6]) {\n                if((i+j)%2 == 0) {\n                    translate([i * (pattern_width/16), 0, j * (pattern_height/12)])\n                        sphere(r=1.5);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\naquatint_chair();",
    "renders": true
  },
  {
    "decorative_art": "drypoint",
    "openscad_code": "// Drypoint furniture art piece - Side table with decorative frame\n// Wall thickness 2mm, overall size 80 x 80 x 40 mm\n\nmodule leg(x, y, h=38) {\n    // Tapered square leg with 2mm wall\n    difference() {\n        cube([6, 6, h], center=true);\n        translate([0, 0, 2]) cube([2, 2, h], center=true);\n    }\n    // Decorative ring 3mm from bottom\n    translate([0, 0, 17]) cube([7, 7, 2], center=true);\n}\n\nmodule shelf() {\n    // Top shelf with 2mm rim\n    difference() {\n        cube([76, 76, 4], center=true);\n        translate([0, 0, 2]) cube([72, 72, 2], center=true);\n    }\n    // Decorative grid pattern on top\n    for (i = [-30:15:30]) {\n        translate([i, 0, 2.1]) cube([2, 70, 0.5]);\n        translate([0, i, 2.1]) cube([70, 2, 0.5]);\n    }\n}\n\nmodule side_panel() {\n    // Decorative side panel with geometric pattern\n    difference() {\n        cube([76, 2, 38], center=true);\n        // Cut rectangular openings\n        for (i = [-25:25:25]) {\n            for (j = [-12:12:12]) {\n                translate([i, 0, j]) cube([10, 3, 8]);\n            }\n        }\n    }\n}\n\nmodule drypoint_base() {\n    // Main assembly\n    union() {\n        // Top shelf\n        translate([0, 0, 20]) shelf();\n        \n        // Four legs\n        leg(-34, -34);\n        leg(34, -34);\n        leg(-34, 34);\n        leg(34, 34);\n        \n        // Side panels\n        translate([0, -37, 0]) side_panel();\n        translate([0, 37, 0]) side_panel();\n        \n        // Lower support frame\n        translate([0, 0, -17]) {\n            difference() {\n                cube([74, 74, 4], center=true);\n                translate([0, 0, 2]) cube([70, 70, 2], center=true);\n            }\n        }\n        \n        // Corner brackets\n        module bracket() {\n            difference() {\n                cube([8, 8, 8], center=true);\n                translate([2, 2, 2]) cube([4, 4, 4], center=true);\n            }\n        }\n        \n        translate([-34, -34, 10]) bracket();\n        translate([34, -34, 10]) mirror([1,0,0]) bracket();\n        translate([-34, 34, 10]) mirror([0,1,0]) bracket();\n        translate([34, 34, 10]) mirror([1,1,0]) bracket();\n    }\n}\n\n// Render the furniture piece\ndrypoint_base();",
    "renders": true
  },
  {
    "decorative_art": "collagraph",
    "openscad_code": "// Collagraph side table inspired by traditional wood-joinery\n// Overall footprint ~100 mm diameter, 60 mm height\n// Wall thickness 2 mm throughout for 3D printability\n\n$fn = 36;\n\n// --- Table top: circular plate with raised collagraph pattern ---\nmodule tableTop() {\n    difference() {\n        // Main disc\n        cylinder(h = 4, d = 100, center = true);\n        \n        // Reverse-engraved concentric rings forming collagraph relief\n        for (r = [45, 35, 25, 15]) {\n            translate([0, 0, -1])\n                cylinder(h = 2.5, d = r * 2, center = true);\n        }\n        \n        // Radial grooves (decorative joint lines)\n        for (a = [0 : 30 : 179]) {\n            rotate([0, 0, a])\n                translate([-60, -2, -1])\n                    cube([120, 4, 3]);\n        }\n    }\n}\n\n// --- Leg set: three splayed legs with stretcher ring ---\nmodule legAssembly() {\n    // Central hub\n    cylinder(h = 6, d = 12, center = true);\n    \n    // Three legs\n    for (a = [0 : 120 : 359]) {\n        rotate([0, 0, a])\n        translate([6, 0, -30]) {\n            // Leg shaft (tapered)\n            scale([1, 0.8, 1])\n                cylinder(h = 54, d1 = 6, d2 = 4, center = false);\n            \n            // Peg tenon detail at top\n            translate([0, 0, 54])\n                cylinder(h = 4, d = 5, center = true);\n        }\n    }\n    \n    // Lower stretcher ring (structural & decorative)\n    translate([0, 0, -54])\n    difference() {\n        cylinder(h = 4, d = 70, center = true);\n        cylinder(h = 5, d = 66, center = true);\n    }\n}\n\n// --- Shelf: circular mid-shelf with grid pattern ---\nmodule shelf() {\n    difference() {\n        cylinder(h = 3, d = 70, center = true);\n        // Perforated grid for collagraph texture\n        for (x = [-30 : 10 : 30])\n            for (y = [-30 : 10 : 30])\n                translate([x, y, -1])\n                    cylinder(h = 4, d = 5, center = true);\n    }\n}\n\n// --- Assembly ---\ntranslate([0, 0, 32])\n    tableTop();\n\ntranslate([0, 0, 0])\n    legAssembly();\n\ntranslate([0, 0, -18])\n    shelf();",
    "renders": true
  },
  {
    "decorative_art": "monotype",
    "openscad_code": "// Monotype Chair - Realistic Style, Medium Complexity\n// A decorative art furniture piece inspired by monotype printing aesthetics\n\n// Overall dimensions (in mm)\nchair_width = 80;\nchair_depth = 85;\nchair_height = 110;\nseat_height = 45;\nback_height = 65;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Seat module with rounded corners and monotype pattern\nmodule seat() {\n    union() {\n        // Main seat platform\n        translate([0, 0, seat_height/2])\n            cube([chair_width - 6, chair_depth - 6, seat_height/6], center=true);\n        \n        // Monotype pattern - circular depressions\n        for (x = [-30:15:30]) {\n            for (y = [-25:15:25]) {\n                translate([x, y, seat_height + 1])\n                    rotate([180, 0, 0])\n                        cylinder(h=2, r1=4, r2=3, $fn=16);\n            }\n        }\n    }\n}\n\n// Backrest with artistic cutouts\nmodule backrest() {\n    difference() {\n        // Main backrest panel\n        translate([0, -chair_depth/2 + 10, seat_height + back_height/2])\n            cube([chair_width - 10, wall_thickness*2, back_height], center=true);\n        \n        // Monotype-inspired cutout pattern\n        for (i = [1:3]) {\n            translate([-20 + i*20, -chair_depth/2 + 10, seat_height + 15 + i*15])\n                rotate([0, 90, 0])\n                    cylinder(h=wall_thickness*2 + 1, r=5 + i*2, $fn=32);\n        }\n    }\n}\n\n// Leg structure with decorative joints\nmodule leg(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0])\n        rotate([0, 0, angle]) {\n            // Main leg post\n            cylinder(h=seat_height - 2, r=3, center=false, $fn=16);\n            \n            // Decorative joint ring at top\n            translate([0, 0, seat_height - 4])\n                cylinder(h=4, r=4, $fn=16);\n            \n            // Joint reinforcement\n            translate([0, 0, seat_height - 6])\n                sphere(r=3.5, $fn=16);\n        }\n}\n\n// Support stretchers between legs\nmodule stretcher(x1, y1, x2, y2, z) {\n    length = sqrt(pow(x2-x1, 2) + pow(y2-y1, 2));\n    angle = atan2(y2-y1, x2-x1);\n    \n    translate([(x1+x2)/2, (y1+y2)/2, z])\n        rotate([0, 0, angle])\n            cube([length, wall_thickness, wall_thickness*1.5], center=true);\n}\n\n// Decorative back support bars\nmodule back_bar(offset) {\n    translate([offset, -chair_depth/2 + 15, seat_height + back_height/3])\n        rotate([15, 0, 0])\n            cube([wall_thickness*1.5, 2, back_height/2]);\n}\n\n// Main chair assembly\nunion() {\n    // Seat\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Four legs\n    leg(chair_width/2 - 5, chair_depth/2 - 5, 0);\n    leg(-chair_width/2 + 5, chair_depth/2 - 5, 0);\n    leg(chair_width/2 - 5, -chair_depth/2 + 5, 0);\n    leg(-chair_width/2 + 5, -chair_depth/2 + 5, 0);\n    \n    // Side stretchers\n    stretcher(-chair_width/2 + 5, chair_depth/2 - 5, -chair_width/2 + 5, -chair_depth/2 + 5, seat_height/2);\n    stretcher(chair_width/2 - 5, chair_depth/2 - 5, chair_width/2 - 5, -chair_depth/2 + 5, seat_height/2);\n    \n    // Front and back stretchers\n    stretcher(-chair_width/2 + 5, -chair_depth/2 + 5, chair_width/2 - 5, -chair_depth/2 + 5, seat_height/3);\n    stretcher(-chair_width/2 + 5, chair_depth/2 - 5, chair_width/2 - 5, chair_depth/2 - 5, seat_height/3);\n    \n    // Decorative back bars\n    for (i = [-20:10:20]) {\n        back_bar(i);\n    }\n    \n    // Monotype signature plate\n    translate([chair_width/2 - 8, chair_depth/2 - 8, 2])\n        cube([12, 8, wall_thickness]);\n    translate([chair_width/2 - 5, chair_depth/2 - 5, wall_thickness + 0.5])\n        linear_extrude(height=1)\n            text(\"1/1\", size=3, halign=\"center\");\n}",
    "renders": true
  },
  {
    "decorative_art": "screenprint",
    "openscad_code": "// Screenprint Furniture - A stylized screenprint frame with legs\n// Overall dimensions: 120mm wide x 80mm deep x 100mm tall\n\nmodule leg(width, depth, height) {\n    // Main leg post\n    cube([width, depth, height], center=true);\n    \n    // Foot detail\n    translate([0, 0, -height/2 - 2])\n    cube([width + 2, depth + 2, 4], center=true);\n}\n\nmodule frame(width, height, thickness) {\n    // Outer frame\n    difference() {\n        cube([width + 6, height + 6, thickness], center=true);\n        cube([width, height, thickness + 2], center=true);\n    }\n    \n    // Inner lip for screen mesh\n    difference() {\n        cube([width, height, thickness/2], center=true);\n        cube([width - 6, height - 6, thickness], center=true);\n    }\n}\n\nmodule screen_mesh(width, height) {\n    // Screen mesh pattern\n    for (i = [-width/2:2:width/2]) {\n        translate([i, 0, 0])\n        cube([0.5, height, 0.5], center=true);\n    }\n    for (j = [-height/2:2:height/2]) {\n        translate([0, j, 0])\n        cube([width, 0.5, 0.5], center=true);\n    }\n}\n\nmodule cross_support(length) {\n    // Cross support between legs\n    cube([length, 8, 8], center=true);\n    \n    // Decorative groove\n    translate([0, 0, 0])\n    cube([length - 4, 4, 4], center=true);\n}\n\n// Main assembly\nunion() {\n    // Frame assembly\n    translate([0, 0, 70])\n    union() {\n        // Frame\n        frame(80, 60, 8);\n        \n        // Screen mesh\n        translate([0, 0, -2])\n        screen_mesh(74, 54);\n    }\n    \n    // Front legs\n    translate([-35, 25, 30])\n    leg(6, 6, 60);\n    \n    translate([35, 25, 30])\n    leg(6, 6, 60);\n    \n    // Back legs\n    translate([-35, -25, 30])\n    leg(6, 6, 60);\n    \n    translate([35, -25, 30])\n    leg(6, 6, 60);\n    \n    // Lower cross supports\n    translate([0, 0, 10])\n    rotate([0, 0, 90])\n    cross_support(70);\n    \n    translate([0, 0, 25])\n    rotate([0, 0, 0])\n    cross_support(50);\n    \n    // Upper stabilizers\n    translate([-35, 0, 55])\n    rotate([0, 90, 0])\n    cube([6, 50, 6], center=true);\n    \n    translate([35, 0, 55])\n    rotate([0, 90, 0])\n    cube([6, 50, 6], center=true);\n    \n    // Decorative corner brackets\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * 40, y * 30, 65])\n            rotate([0, 0, (x == y ? 45 : -45)])\n            cube([8, 2, 8], center=true);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "woodcut",
    "openscad_code": "// Woodcut style decorative chair - OpenSCAD\n// Medium complexity realistic style furniture piece\n\n// Overall dimensions\nchair_width = 45;\nchair_depth = 40;\nchair_height = 55;\nseat_height = 25;\nleg_thickness = 3;\nback_thickness = 2;\nslat_width = 4;\nslat_gap = 2;\n\n// Create the chair module\nmodule decorative_chair() {\n    // Chair legs - four posts\n    module leg(x, z) {\n        translate([x, 0, z])\n            cube([leg_thickness, leg_thickness, seat_height], center=true);\n    }\n    \n    // Seat frame\n    module seat_frame() {\n        // Front frame\n        translate([0, chair_depth/2 - leg_thickness/2, seat_height/2])\n            cube([chair_width - leg_thickness*2, leg_thickness, seat_height], center=true);\n        \n        // Back frame\n        translate([0, -chair_depth/2 + leg_thickness/2, seat_height/2])\n            cube([chair_width - leg_thickness*2, leg_thickness, seat_height], center=true);\n        \n        // Left frame\n        translate([-chair_width/2 + leg_thickness/2, 0, seat_height/2])\n            cube([leg_thickness, chair_depth - leg_thickness*2, seat_height], center=true);\n        \n        // Right frame\n        translate([chair_width/2 - leg_thickness/2, 0, seat_height/2])\n            cube([leg_thickness, chair_depth - leg_thickness*2, seat_height], center=true);\n    }\n    \n    // Seat slats\n    module seat_slats() {\n        slat_count = floor((chair_width - leg_thickness*2) / (slat_width + slat_gap));\n        for(i = [0:slat_count-1]) {\n            translate([-chair_width/2 + leg_thickness + slat_width/2 + i*(slat_width + slat_gap), 0, seat_height])\n                cube([slat_width, chair_depth - leg_thickness*2, back_thickness], center=true);\n        }\n    }\n    \n    // Back support posts\n    module back_post(x) {\n        translate([x, -chair_depth/2 + leg_thickness/2, seat_height + chair_height/2 - seat_height/2])\n            cube([leg_thickness, leg_thickness, chair_height - seat_height], center=true);\n    }\n    \n    // Back slats with decorative cutouts\n    module back_slats() {\n        slat_count = floor((chair_height - seat_height - leg_thickness*2) / (slat_width + slat_gap));\n        for(i = [0:slat_count-1]) {\n            y_pos = seat_height + slat_width/2 + i*(slat_width + slat_gap);\n            \n            // Main slat\n            translate([0, -chair_depth/2 + leg_thickness + back_thickness/2, y_pos])\n                cube([chair_width - leg_thickness*2, back_thickness, slat_width], center=true);\n            \n            // Decorative circle cutout\n            translate([0, -chair_depth/2 + leg_thickness + back_thickness + 1, y_pos])\n                rotate([90, 0, 0])\n                    cylinder(h=back_thickness+1, r=slat_width/3, center=true, $fn=16);\n        }\n    }\n    \n    // Decorative stretcher bars\n    module stretcher_bar() {\n        // Front stretcher\n        translate([0, chair_depth/2 - leg_thickness*1.5, seat_height/2])\n            cube([chair_width - leg_thickness*2, leg_thickness, leg_thickness], center=true);\n        \n        // Side stretchers\n        translate([-chair_width/2 + leg_thickness*1.5, 0, seat_height/2])\n            rotate([0, 0, 90])\n                cube([chair_depth - leg_thickness*2, leg_thickness, leg_thickness], center=true);\n        \n        translate([chair_width/2 - leg_thickness*1.5, 0, seat_height/2])\n            rotate([0, 0, 90])\n                cube([chair_depth - leg_thickness*2, leg_thickness, leg_thickness], center=true);\n    }\n    \n    // Assemble the chair\n    union() {\n        // Four legs\n        leg(-chair_width/2 + leg_thickness/2, leg_thickness/2);\n        leg(chair_width/2 - leg_thickness/2, leg_thickness/2);\n        leg(-chair_width/2 + leg_thickness/2, chair_depth/2 - leg_thickness/2);\n        leg(chair_width/2 - leg_thickness/2, chair_depth/2 - leg_thickness/2);\n        \n        // Seat frame and slats\n        seat_frame();\n        seat_slats();\n        \n        // Back support\n        back_post(-chair_width/2 + leg_thickness*1.5);\n        back_post(chair_width/2 - leg_thickness*1.5);\n        \n        // Back slats with decoration\n        back_slats();\n        \n        // Stretcher bars for stability\n        stretcher_bar();\n    }\n}\n\n// Create the woodcut chair\ntranslate([0, 0, chair_height/2])\n    decorative_chair();",
    "renders": true
  },
  {
    "decorative_art": "linocut",
    "openscad_code": "// Linocut-Style Decorative Side Table\n// Overall dimensions: 100mm x 100mm x 120mm (L x W x H)\n// Wall thickness: 2mm throughout for 3D printing\n\n// Main table module\nmodule linocut_table() {\n    \n    // Table top with decorative edge pattern\n    difference() {\n        // Main table top\n        translate([0, 0, 110]) cube([100, 100, 8], center=true);\n        \n        // Rounded corners on top\n        for(x = [-45, 45]) {\n            for(y = [-45, 45]) {\n                translate([x, y, 109]) \n                    cylinder(h=10, r=8, $fn=16);\n            }\n        }\n        \n        // Decorative groove pattern on top surface\n        for(i = [-40:20:40]) {\n            translate([i, 0, 114]) cube([2, 90, 1], center=true);\n            translate([0, i, 114]) cube([90, 2, 1], center=true);\n        }\n    }\n    \n    // Table legs with fluted design\n    module leg(x_pos, y_pos) {\n        difference() {\n            // Main leg post\n            translate([x_pos, y_pos, 55]) \n                cube([12, 12, 110], center=true);\n            \n            // Fluted grooves on legs\n            for(i = [-4:2:4]) {\n                translate([x_pos + i, y_pos, 55]) \n                    cube([1, 12, 110], center=true);\n                translate([x_pos, y_pos + i, 55]) \n                    cube([12, 1, 110], center=true);\n            }\n            \n            // Tapered bottom\n            translate([x_pos, y_pos, 0]) \n                cylinder(h=5, r1=6, r2=5, $fn=8);\n        }\n    }\n    \n    // Four legs\n    leg(-42, -42);\n    leg(42, -42);\n    leg(-42, 42);\n    leg(42, 42);\n    \n    // Lower shelf with decorative cutouts\n    translate([0, 0, 40]) {\n        difference() {\n            // Shelf platform\n            cube([80, 80, 4], center=true);\n            \n            // Rounded corners\n            for(x = [-38, 38]) {\n                for(y = [-38, 38]) {\n                    translate([x, y, 0]) \n                        cylinder(h=5, r=6, $fn=16);\n                }\n            }\n            \n            // Decorative quatrefoil cutouts\n            for(x = [-25, 25]) {\n                for(y = [-25, 25]) {\n                    translate([x, y, 2]) {\n                        rotate([0, 0, 45]) \n                            cube([12, 12, 5], center=true);\n                        rotate([0, 0, 0]) \n                            cube([12, 12, 5], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Side stretchers with geometric pattern\n    module stretcher(x1, y1, x2, y2, z) {\n        length = sqrt(pow(x2-x1, 2) + pow(y2-y1, 2));\n        angle = atan2(y2-y1, x2-x1);\n        \n        translate([(x1+x2)/2, (y1+y2)/2, z]) {\n            rotate([0, 0, angle]) {\n                difference() {\n                    cube([length, 6, 6], center=true);\n                    \n                    // Geometric cutouts\n                    for(i = [-length/2+10:10:length/2-10]) {\n                        translate([i, 0, 0]) \n                            cube([4, 8, 8], center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Horizontal stretchers between legs\n    stretcher(-42, -42, 42, -42, 75);\n    stretcher(42, -42, 42, 42, 75);\n    stretcher(42, 42, -42, 42, 75);\n    stretcher(-42, 42, -42, -42, 75);\n    \n    // Decorative apron with scrollwork\n    module apron(x, y, rotation) {\n        translate([x, y, 100]) {\n            rotate([0, 0, rotation]) {\n                difference() {\n                    // Main apron panel\n                    cube([80, 6, 12], center=true);\n                    \n                    // Scroll cutouts\n                    for(i = [-30:15:30]) {\n                        translate([i, 0, 2]) {\n                            rotate([0, 90, 0]) \n                                cylinder(h=6, r=4, center=true);\n                            translate([-4, 0, 0]) \n                                sphere(r=3);\n                            translate([4, 0, 0]) \n                                sphere(r=3);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Aprons on all four sides\n    apron(0, -47, 0);\n    apron(47, 0, 90);\n    apron(0, 47, 0);\n    apron(-47, 0, 90);\n}\n\n// Render the table\nlinocut_table();",
    "renders": true
  },
  {
    "decorative_art": "serigraphy",
    "openscad_code": "// Serigraphy furniture piece - decorative screen with silkscreen-style patterns\n// 3D printable at ~120mm height with 2mm minimum walls\n\nmodule frame_bar(length, width, height) {\n    cube([length, width, height], center=true);\n}\n\nmodule decorative_panel(width, height, depth) {\n    difference() {\n        // Main panel body\n        cube([width, depth, height], center=true);\n        \n        // Silkscreen pattern holes - stylized floral motif\n        for (y = [-height/2 + 8 : 12 : height/2 - 8]) {\n            for (x = [-width/2 + 8 : 12 : width/2 - 8]) {\n                translate([x, 0, y]) {\n                    rotate([90, 0, 0]) \n                    cylinder(h=depth+1, r1=3, r2=1.5, center=true);\n                }\n            }\n        }\n        \n        // Border detail grooves\n        translate([0, 0, height/2 - 4])\n        cube([width-8, depth+1, 2], center=true);\n        translate([0, 0, -height/2 + 4])\n        cube([width-8, depth+1, 2], center=true);\n    }\n}\n\nmodule support_base() {\n    difference() {\n        // Main base platform\n        cube([80, 15, 8], center=true);\n        \n        // Chamfer edges\n        translate([0, 0, 4])\n        cube([76, 11, 8], center=true);\n    }\n}\n\nmodule screen_assembly() {\n    // Bottom base\n    support_base();\n    \n    // Left frame post\n    translate([-35, 0, 4])\n    frame_bar(4, 8, 110);\n    \n    // Right frame post\n    translate([35, 0, 4])\n    frame_bar(4, 8, 110);\n    \n    // Top cross bar\n    translate([0, 0, 59])\n    rotate([90, 0, 0])\n    frame_bar(74, 8, 4);\n    \n    // Bottom cross bar\n    translate([0, 0, -51])\n    rotate([90, 0, 0])\n    frame_bar(74, 8, 4);\n    \n    // Central decorative panel\n    translate([0, 0, 4])\n    decorative_panel(66, 100, 3);\n    \n    // Decorative corner brackets\n    for (x = [-31, 31]) {\n        for (z = [49, -41]) {\n            translate([x, 0, z])\n            difference() {\n                cube([6, 8, 6], center=true);\n                translate([2, 0, 2])\n                cube([2, 10, 2], center=true);\n            }\n        }\n    }\n}\n\n// Main assembly\nscreen_assembly();",
    "renders": true
  },
  {
    "decorative_art": "vellum",
    "openscad_code": "// Vellum-inspired decorative side table (realistic style, medium complexity)\n// Overall size: 120mm diameter x 45mm height, 3D printable\n\n// Parameters\nthickness = 2;\ntop_d = 120;\nleg_h = 40;\nleg_w = 15;\nring_d = 90;\nnum_legs = 3;\n\n// Main tabletop with vellum texture pattern\nmodule tabletop() {\n    difference() {\n        // Solid top\n        cylinder(h = thickness * 2, d = top_d, $fn = 64);\n        \n        // Vellum texture: small hexagonal perforations\n        for (r = [0:2:top_d/2 - 10]) {\n            for (a = [0:30:359]) {\n                translate([r * cos(a), r * sin(a), -0.1])\n                    cylinder(h = thickness * 2 + 0.2, d = 3, $fn = 6);\n            }\n        }\n    }\n}\n\n// Decorative ring with vellum edge detail\nmodule decorative_ring() {\n    difference() {\n        // Outer ring\n        cylinder(h = thickness * 1.5, d = ring_d, $fn = 64);\n        \n        // Inner cutout\n        translate([0, 0, -0.1])\n            cylinder(h = thickness * 1.7, d = ring_d - 8, $fn = 64);\n    }\n    \n    // Vellum-inspired edge pattern\n    for (a = [0:20:359]) {\n        rotate([0, 0, a])\n            translate([ring_d/2 - 2, 0, 0])\n                cube([4, 1, thickness * 1.5]);\n    }\n}\n\n// Curved leg with vellum joint detail\nmodule leg() {\n    // Main leg body\n    linear_extrude(height = leg_h, twist = 5, convexity = 10)\n        offset(delta = -2)\n            offset(delta = 2)\n                circle(d = leg_w, $fn = 32);\n    \n    // Vellum joint collar at top\n    translate([0, 0, leg_h - 3])\n        cylinder(h = 3, d1 = leg_w + 6, d2 = leg_w + 3, $fn = 32);\n    \n    // Vellum decorative cutouts\n    for (h = [10:10:leg_h - 10]) {\n        translate([0, 0, h])\n            rotate([0, 0, 45])\n                cube([leg_w - 4, 3, thickness], center = true);\n    }\n}\n\n// Base support structure\nmodule base_support() {\n    // Triangular base plate\n    for (a = [0:120:359]) {\n        rotate([0, 0, a])\n            translate([ring_d/2 - 10, 0, 0])\n                cube([20, thickness * 2, 3]);\n    }\n    \n    // Center hub\n    cylinder(h = 3, d = 20, $fn = 32);\n}\n\n// Assembly\n// Base support first\nbase_support();\n\n// Legs in tripod arrangement\nfor (a = [0:120:359]) {\n    rotate([0, 0, a])\n        translate([ring_d/2 - leg_w/2, 0, 3])\n            leg();\n}\n\n// Decorative ring between legs and top\ntranslate([0, 0, leg_h + 3])\n    decorative_ring();\n\n// Main tabletop\ntranslate([0, 0, leg_h + 3 + thickness * 1.5])\n    tabletop();",
    "renders": true
  },
  {
    "decorative_art": "papyrus",
    "openscad_code": "// Papyrus-inspired decorative wall shelf\n// Realistic style, medium complexity, 3D printable\n\n// Overall dimensions\nwidth = 120;\nheight = 80;\ndepth = 25;\nwall_thickness = 2;\n\n// Module for rolled papyrus scroll end\nmodule scroll_end(radius, length) {\n    difference() {\n        // Main scroll cylinder\n        cylinder(h=length, r=radius, $fn=32);\n        \n        // Hollow center\n        translate([0, 0, -1])\n            cylinder(h=length + 2, r=radius - wall_thickness, $fn=32);\n        \n        // End caps detail\n        translate([0, 0, 0])\n            cylinder(h=wall_thickness, r=radius + 1, $fn=32);\n        translate([0, 0, length])\n            cylinder(h=wall_thickness, r=radius + 1, $fn=32);\n    }\n}\n\n// Module for papyrus sheet with rolled ends\nmodule papyrus_sheet() {\n    // Main sheet body with slight curve\n    difference() {\n        // Outer curved sheet\n        translate([0, 0, depth/2])\n            scale([1, 0.1, 1])\n                sphere(d=width, $fn=64);\n        \n        // Inner hollow\n        translate([0, -wall_thickness, depth/2])\n            scale([1, 0.1, 1])\n                sphere(d=width - 2*wall_thickness, $fn=64);\n        \n        // Trim to rectangular shape\n        translate([0, -wall_thickness*2, 0])\n            cube([width + 1, wall_thickness*4, depth + 1], center=true);\n    }\n    \n    // Left scroll end\n    translate([-width/2 + 8, 0, depth/2])\n        rotate([0, 90, 0])\n            scroll_end(8, 15);\n    \n    // Right scroll end\n    translate([width/2 - 8, 0, depth/2])\n        rotate([0, 90, 0])\n            scroll_end(8, 15);\n}\n\n// Module for hieroglyphic pattern detail\nmodule hieroglyph_pattern() {\n    // Base pattern strip\n    color(\"gold\")\n    translate([0, wall_thickness, depth - 0.5])\n        cube([width - 20, wall_thickness, 1], center=true);\n    \n    // Simple hieroglyph symbols (Ankh symbols)\n    for(i = [-2:2]) {\n        translate([i * 20, wall_thickness + 0.5, depth])\n            union() {\n                // Ankh loop\n                cylinder(h=1, r=2, center=true);\n                cube([1, 4, 1], center=true);\n                cube([4, 1, 1], center=true);\n            }\n    }\n}\n\n// Module for mounting bracket\nmodule mounting_bracket() {\n    // Back mounting plate\n    translate([0, 0, -wall_thickness/2])\n        cube([width, height/4, wall_thickness], center=true);\n    \n    // Keyhole mounting slots\n    for(x = [-width/3, 0, width/3]) {\n        translate([x, 0, -wall_thickness/2])\n            union() {\n                // Upper circle\n                cylinder(h=wall_thickness + 1, r=3, $fn=32);\n                // Lower slot\n                translate([0, -6, 0])\n                    cube([6, 8, wall_thickness + 1], center=true);\n            }\n    }\n}\n\n// Main assembly\nunion() {\n    // Papyrus shelf body\n    papyrus_sheet();\n    \n    // Decorative pattern\n    hieroglyph_pattern();\n    \n    // Structural support ribs underneath\n    for(i = [-1, 0, 1]) {\n        translate([i * 40, 0, 0])\n            cube([20, wall_thickness*3, depth], center=true);\n    }\n    \n    // Mounting hardware\n    mounting_bracket();\n    \n    // Front edge detail\n    translate([0, 0, depth - 1])\n        cube([width - 10, wall_thickness*2, 2], center=true);\n}\n\n// Add small feet for stability\nfor(x = [-width/2 + 10, width/2 - 10]) {\n    translate([x, 0, 0])\n        cylinder(h=2, r=3, $fn=16);\n}",
    "renders": true
  },
  {
    "decorative_art": "parchment",
    "openscad_code": "// Parchment Side Table - Realistic Style, Medium Complexity\n// Dimensions: 120mm height, 100mm width, 70mm depth\n\n// Parameters\ntable_height = 120;\ntable_width = 100;\ntable_depth = 70;\nwall_thickness = 2;\nparchment_thickness = 1.5;\n\n// Main module\nmodule parchment_table() {\n    // Table top - rolled parchment appearance\n    difference() {\n        union() {\n            // Main top surface\n            translate([0, 0, table_height-5])\n                cube([table_width, table_depth, wall_thickness], center=true);\n            \n            // Rolled edges front and back\n            for(y = [-table_depth/2+2, table_depth/2-2]) {\n                translate([0, y, table_height-3.5])\n                    rotate([90, 0, 0])\n                        cylinder(h=table_width-4, r=1.5, center=true);\n            }\n        }\n        \n        // Carved parchment texture grooves\n        for(x = [-table_width/2+10:table_width/10:table_width/2-10]) {\n            translate([x, 0, table_height-4])\n                cube([1, table_depth-4, 3], center=true);\n        }\n    }\n    \n    // Legs - rolled parchment scrolls at corners\n    module leg(x_pos, y_pos) {\n        translate([x_pos, y_pos, 0])\n            rotate([0, 0, 45])\n                difference() {\n                    // Main scroll body\n                    cylinder(h=table_height-5, r=4, center=false);\n                    \n                    // Hollow center\n                    translate([0, 0, wall_thickness])\n                        cylinder(h=table_height-10, r=2, center=false);\n                    \n                    // Decorative rolled top\n                    translate([0, 0, table_height-5])\n                        rotate([90, 0, 0])\n                            cylinder(h=8, r=5, center=true);\n                }\n    }\n    \n    // Place legs at corners\n    leg(table_width/2-5, table_depth/2-5);\n    leg(-table_width/2+5, table_depth/2-5);\n    leg(table_width/2-5, -table_depth/2+5);\n    leg(-table_width/2+5, -table_depth/2+5);\n    \n    // Lower shelf - partially rolled parchment\n    difference() {\n        union() {\n            // Main shelf\n            translate([0, 0, table_height/3])\n                cube([table_width-20, table_depth-10, wall_thickness], center=true);\n            \n            // Rolled front edge\n            translate([0, table_depth/2-7, table_height/3+1.5])\n                rotate([90, 0, 0])\n                    cylinder(h=table_width-24, r=1.5, center=true);\n        }\n        \n        // Shelf cutouts for legs\n        for(x = [-table_width/2+15, table_width/2-15]) {\n            for(y = [-table_depth/2+10, table_depth/2-10]) {\n                translate([x, y, table_height/3])\n                    cylinder(h=wall_thickness+1, r=5, center=true);\n            }\n        }\n    }\n    \n    // Decorative parchment curls on sides\n    module side_curl(x_pos, angle) {\n        translate([x_pos, 0, table_height-10])\n            rotate([0, angle, 0])\n                for(i = [0:15:90]) {\n                    rotate([0, 0, i])\n                        translate([0, 0, 0])\n                            cube([15, parchment_thickness, 2], center=true);\n                }\n    }\n    \n    side_curl(table_width/2, 0);\n    side_curl(-table_width/2, 180);\n}\n\n// Render the table\nparchment_table();",
    "renders": true
  },
  {
    "decorative_art": "codex",
    "openscad_code": "// Codex Furniture Piece - Realistic Style\n// Dimensions: 100mm x 70mm x 85mm\n\n$fn = 32;\n\n// Main module\nmodule codex_furniture() {\n    // Base structure\n    difference() {\n        // Main body\n        translate([0, 0, 40]) {\n            cube([100, 70, 10], center = true);\n        }\n        \n        // Recessed center\n        translate([0, 0, 45]) {\n            cube([80, 50, 2], center = true);\n        }\n    }\n    \n    // Four legs\n    for(x = [-40, 40]) {\n        for(y = [-25, 25]) {\n            translate([x, y, 0]) {\n                cylinder(h = 40, r = 5);\n            }\n        }\n    }\n    \n    // Back panel with codex design\n    translate([0, -35, 42.5]) {\n        cube([90, 5, 85], center = true);\n        \n        // Codex pattern\n        translate([0, 3, 20]) {\n            difference() {\n                // Main codex circle\n                cylinder(h = 3, r = 30, center = true);\n                \n                // Inner circle\n                translate([0, 0, 2]) {\n                    cylinder(h = 4, r = 20, center = true);\n                }\n                \n                // Symbolic runes\n                for(i = [0:7]) {\n                    rotate([0, 0, i * 45]) {\n                        translate([25, 0, 1]) {\n                            cube([10, 2, 3], center = true);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Side panels\n    for(side = [-1, 1]) {\n        translate([side * 50, 0, 42.5]) {\n            cube([5, 60, 85], center = true);\n            \n            // Decorative grooves\n            for(i = [-30:15:30]) {\n                translate([-side * 2.5, i, 0]) {\n                    cube([5, 2, 80], center = true);\n                }\n            }\n        }\n    }\n    \n    // Front drawer\n    translate([0, 30, 30]) {\n        difference() {\n            // Drawer box\n            cube([80, 40, 20], center = true);\n            \n            // Inner space\n            translate([0, -5, 5]) {\n                cube([74, 30, 18], center = true);\n            }\n            \n            // Handle hole\n            translate([0, 18, -8]) {\n                rotate([90, 0, 0]) {\n                    cylinder(h = 20, r = 3);\n                }\n            }\n        }\n        \n        // Drawer handle\n        translate([0, 22, 20]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 10, r = 5);\n            }\n            translate([0, 5, 0]) {\n                sphere(r = 5);\n            }\n        }\n    }\n    \n    // Top shelf supports\n    for(x = [-35, 35]) {\n        translate([x, 0, 70]) {\n            cube([10, 60, 5], center = true);\n        }\n    }\n    \n    // Top shelf\n    translate([0, 0, 77.5]) {\n        cube([90, 60, 5], center = true);\n        \n        // Front lip\n        translate([0, 30, -2.5]) {\n            cube([90, 5, 5], center = true);\n        }\n    }\n    \n    // Decorative corner brackets\n    for(x = [-45, 45]) {\n        for(y = [-30, 30]) {\n            translate([x, y, 5]) {\n                difference() {\n                    cylinder(h = 3, r = 8);\n                    translate([0, 0, -1]) {\n                        cylinder(h = 5, r = 5);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Back support struts\n    for(i = [-30:20:30]) {\n        translate([i, -35, 20]) {\n            rotate([0, 0, 45]) {\n                cube([3, 25, 3], center = true);\n            }\n        }\n    }\n}\n\n// Render the model\ncodex_furniture();",
    "renders": true
  },
  {
    "decorative_art": "miniature",
    "openscad_code": "// Miniature Chippendale-style side chair (realistic, medium complexity)\n// Overall footprint ~55 mm wide x 45 mm deep x 90 mm tall\nwall = 2;               // 3D-print safe wall thickness\nscale_factor = 1;       // Adjust to taste, 1 = real-world miniature size\n\nmodule leg() {\n    // Single cabriole leg with pad foot\n    // Thickest at knee, tapering above and below\n    translate([0,0,0])\n    union() {\n        // Pad foot\n        cylinder(h=4*scale_factor, r1=6*scale_factor, r2=5*scale_factor, $fn=24);\n        // Cabriole curve approximated with stacked cylinders\n        for(i=[0:1:9]) {\n            h = 2*scale_factor;\n            z = 4*scale_factor + i*h;\n            r = 5*scale_factor - i*0.25*scale_factor;           // taper upward\n            if(i<5) r = 5*scale_factor + i*0.3*scale_factor;    // flare at knee\n            translate([0,0,z])\n            cylinder(h=h, r1=r, r2=r+0.3*scale_factor, $fn=24);\n        }\n    }\n}\n\nmodule back_splat() {\n    // Pierced central splat with interlaced lattice\n    difference() {\n        // Main splat shape\n        translate([0,0,10*scale_factor])\n        cube([4*scale_factor, 2*wall, 35*scale_factor], center=true);\n        \n        // Decorative cut-outs\n        for(y=[-10:10:10])\n        translate([0,0,20*scale_factor+y*scale_factor])\n        rotate([0,90,0])\n        cylinder(h=5*scale_factor, r=2*scale_factor, $fn=20);\n        \n        // Diamond lattice\n        for(z=[15:5:35])\n        for(x=[-1:1])\n        translate([x*1.5*scale_factor,0,z*scale_factor])\n        cube([2*scale_factor, 2*wall+1, 2*scale_factor], center=true);\n    }\n}\n\nmodule stretcher() {\n    // H-shaped stretcher between front & rear legs\n    // Front-back rungs\n    for(x=[-20:40:20])\n    translate([x*scale_factor, 15*scale_factor, 8*scale_factor])\n    rotate([90,0,0])\n    cylinder(h=30*scale_factor, r=wall, $fn=16);\n    \n    // Side rung\n    translate([0, 15*scale_factor, 8*scale_factor])\n    rotate([0,90,0])\n    cylinder(h=40*scale_factor, r=wall, $fn=16);\n}\n\n// Assembly\nunion() {\n    // Seat frame\n    difference() {\n        // Overall seat block\n        translate([0,0,10*scale_factor])\n        cube([45*scale_factor, 40*scale_factor, 4*scale_factor], center=true);\n        \n        // Recess for upholstery\n        translate([0,0,12*scale_factor])\n        cube([41*scale_factor, 36*scale_factor, 5*scale_factor], center=true);\n    }\n    \n    // Four legs\n    for(x=[-20:40:40])\n    for(y=[-15:30:30])\n    translate([x*scale_factor, y*scale_factor, 10*scale_factor])\n    leg();\n    \n    // Back posts\n    for(x=[-18:36:36])\n    translate([x*scale_factor, -15*scale_factor, 10*scale_factor])\n    union() {\n        cylinder(h=40*scale_factor, r=wall, $fn=16); // post\n        translate([0,0,40*scale_factor])\n        rotate([0,x>0?-10:10,0])\n        cylinder(h=35*scale_factor, r=wall, $fn=16); // raking stile\n    }\n    \n    // Top back rail\n    translate([0,-15*scale_factor,50*scale_factor])\n    rotate([90,0,0])\n    cylinder(h=36*scale_factor, r=wall, $fn=16);\n    \n    // Central back splat\n    translate([0,-14*scale_factor,0])\n    back_splat();\n    \n    // Stretchers\n    stretcher();\n}",
    "renders": true
  },
  {
    "decorative_art": "portrait",
    "openscad_code": "// Portrait Frame - Realistic Style Medium Complexity\n// A decorative picture frame with classical ornamentation\n\n// Frame dimensions\nframe_width = 120;\nframe_height = 150;\nframe_depth = 15;\nframe_thickness = 8;\n\n// Inner picture opening\npicture_width = 90;\npicture_height = 120;\n\n// Ornament dimensions\nornament_width = 5;\nornament_height = 5;\n\n// Back stand\nstand_width = 40;\nstand_height = 30;\nstand_thickness = 3;\n\nmodule frame_outline() {\n    // Main frame body\n    difference() {\n        // Outer frame\n        cube([frame_width, frame_height, frame_depth], center=true);\n        \n        // Picture opening\n        translate([0, 0, frame_depth/2 - 1])\n            cube([picture_width, picture_height, frame_depth + 2], center=true);\n    }\n}\n\nmodule frame_molding() {\n    // Decorative molding on front face\n    for (i = [-1, 1]) {\n        // Top and bottom moldings\n        translate([0, i * (frame_height/2 - frame_thickness/2), frame_depth/2 - frame_thickness/2])\n            cube([frame_width - frame_thickness*2, frame_thickness, frame_thickness], center=true);\n        \n        // Left and right moldings\n        translate([i * (frame_width/2 - frame_thickness/2), 0, frame_depth/2 - frame_thickness/2])\n            cube([frame_thickness, frame_height - frame_thickness*2, frame_thickness], center=true);\n    }\n}\n\nmodule corner_ornaments() {\n    // Decorative corner pieces\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([\n                x * (frame_width/2 - frame_thickness),\n                y * (frame_height/2 - frame_thickness),\n                frame_depth/2 - ornament_height/2\n            ]) {\n                // Corner rosettes\n                difference() {\n                    cylinder(h=ornament_height, r=ornament_width, $fn=32);\n                    cylinder(h=ornament_height+1, r=ornament_width-2, $fn=32);\n                }\n            }\n        }\n    }\n}\n\nmodule side_decorations() {\n    // Side decorative elements\n    count = 6;\n    spacing = (frame_height - frame_thickness*4) / (count - 1);\n    \n    for (y = [-1, 1]) {\n        for (i = [0:count-1]) {\n            translate([\n                y * (frame_width/2 - frame_thickness/2),\n                -frame_height/2 + frame_thickness*2 + i * spacing,\n                frame_depth/2 - 2\n            ]) {\n                sphere(r=2, $fn=16);\n            }\n        }\n    }\n}\n\nmodule back_stand() {\n    // Folding stand for portrait display\n    translate([0, -frame_height/2 + stand_height/2, -frame_depth/2 - stand_thickness/2]) {\n        cube([stand_width, stand_height, stand_thickness], center=true);\n    }\n    \n    // Support braces\n    for (x = [-1, 1]) {\n        translate([\n            x * stand_width/4,\n            -frame_height/2 + stand_height/4,\n            -frame_depth/2 - stand_thickness - 3\n        ]) {\n            rotate([45, 0, 0])\n                cube([stand_thickness, stand_height/2, stand_thickness], center=true);\n        }\n    }\n}\n\nmodule picture_recess() {\n    // Recess for picture\n    translate([0, 0, -frame_depth/2 + 1])\n        cube([picture_width - 2, picture_height - 2, 2], center=true);\n}\n\n// Assembly\nunion() {\n    // Main frame\n    frame_outline();\n    \n    // Front decorations\n    frame_molding();\n    corner_ornaments();\n    side_decorations();\n    \n    // Back features\n    back_stand();\n    picture_recess();\n}",
    "renders": true
  },
  {
    "decorative_art": "landscape",
    "openscad_code": "// Landscape Bench - miniature garden seating with tree silhouette backrest\n// Realistic style, medium complexity, 3D-printable without supports\n\nmodule bench() {\n    // Overall dimensions\n    seat_width = 80;      // mm\n    seat_depth = 35;      // mm\n    seat_height = 20;     // mm (top surface)\n    leg_height = 12;      // mm\n    back_height = 35;     // mm\n    \n    // Wall thickness for printing\n    wall = 2;\n    \n    // Seat frame - hollow box with rounded edges\n    difference() {\n        // Outer seat\n        translate([0, 0, leg_height + seat_height/2])\n            cube([seat_width, seat_depth, seat_height], center=true);\n        \n        // Inner cavity\n        translate([0, 0, leg_height + seat_height/2])\n            cube([seat_width - 2*wall, seat_depth - 2*wall, seat_height - wall], center=true);\n    }\n    \n    // Add slats on top for realistic look\n    for (i = [-3:1:3]) {\n        translate([i * 9, 0, leg_height + seat_height])\n            cube([6, seat_depth - 4, 1.5], center=true);\n    }\n    \n    // Legs - four hollow posts\n    module leg(x, y) {\n        difference() {\n            // Outer leg\n            translate([x, y, leg_height/2])\n                cube([6, 6, leg_height], center=true);\n            // Inner cavity\n            translate([x, y, leg_height/2])\n                cube([6 - 2*wall, 6 - 2*wall, leg_height - wall], center=true);\n        }\n    }\n    \n    // Position legs at corners\n    leg(seat_width/2 - 4, seat_depth/2 - 4);\n    leg(-seat_width/2 + 4, seat_depth/2 - 4);\n    leg(seat_width/2 - 4, -seat_depth/2 + 4);\n    leg(-seat_width/2 + 4, -seat_depth/2 + 4);\n    \n    // Tree silhouette backrest\n    translate([0, -seat_depth/2 - 2, leg_height + seat_height])\n        rotate([0, 10, 0])  // Slight angle for comfort\n        tree_back();\n}\n\nmodule tree_back() {\n    trunk_width = 5;\n    trunk_height = 30;\n    \n    // Main trunk\n    difference() {\n        translate([0, 0, trunk_height/2])\n            cube([trunk_width, 3, trunk_height], center=true);\n        translate([0, 0, trunk_height/2])\n            cube([trunk_width - 2*wall, 3 - wall, trunk_height - wall], center=true);\n    }\n    \n    // Branches - simple geometric representation\n    for (angle = [0:30:150]) {\n        rotate([0, 0, angle - 75])\n        translate([0, 0, trunk_height - 5])\n        branch();\n    }\n}\n\nmodule branch() {\n    length = 20;\n    thickness = 2;\n    \n    // Main branch arm\n    translate([length/2, 0, 0])\n        rotate([0, -30, 0])\n        difference() {\n            cube([length, thickness, thickness], center=true);\n            cube([length - wall, thickness - wall, thickness - wall], center=true);\n        }\n    \n    // Sub-branches (leaves/needles)\n    for (i = [0:4]) {\n        translate([i * 4 + 3, 0, 0])\n            rotate([0, 0, 90])\n            scale([0.7, 0.7, 0.7])\n            difference() {\n                cube([6, 1.5, 1.5], center=true);\n                cube([6 - wall, 1.5 - wall, 1.5 - wall], center=true);\n            }\n    }\n}\n\n// Ground plane with grass texture\nmodule ground() {\n    translate([0, 0, -1])\n        cube([100, 60, 2], center=true);\n    \n    // Simple grass blades\n    for (x = [-40:5:40])\n    for (y = [-25:5:25]) {\n        translate([x + rand(), y + rand(), 1])\n            cylinder(h = 1 + rand()*2, r = 0.4, $fn = 6);\n    }\n}\n\nfunction rand() = (rands(-1, 1, 1)[0]);\n\n// Render the complete scene\nunion() {\n    translate([0, 0, 0])\n        ground();\n    \n    translate([0, 0, 0])\n        bench();\n}",
    "renders": true
  },
  {
    "decorative_art": "stilllife",
    "openscad_code": "// Still-life Wooden Sideboard with Vase and Bowl\n// Overall footprint: 100 x 50 x 70 mm\n// Wall thickness: 2 mm everywhere\n\n$fn = 32;\n\nmodule sideboard() {\n    // Main carcass (hollow box)\n    difference() {\n        // Outer shell\n        cube([100, 50, 70], center = true);\n        \n        // Inner cavity\n        translate([0, 0, 2])\n            cube([96, 46, 66], center = true);\n    }\n    \n    // Bottom shelf\n    translate([0, 0, -15])\n        cube([96, 46, 2], center = true);\n    \n    // Top shelf\n    translate([0, 0, 15])\n        cube([96, 46, 2], center = true);\n    \n    // Back panel\n    translate([0, 24, 0])\n        cube([100, 2, 70], center = true);\n    \n    // Door frames\n    for (x = [-25, 25]) {\n        translate([x, -26, 0])\n            difference() {\n                cube([48, 4, 66]);\n                translate([2, -1, 2])\n                    cube([44, 6, 62]);\n            }\n    }\n    \n    // Door handles\n    for (x = [-40, 40]) {\n        translate([x, -28, 0])\n            rotate([90, 0, 0])\n                cylinder(h = 10, r = 2);\n    }\n    \n    // Legs\n    for (x = [-45, 45])\n    for (y = [-20, 20]) {\n        translate([x, y, -37])\n            cylinder(h = 4, r = 3);\n    }\n}\n\nmodule vase() {\n    // Base\n    translate([0, 0, 37])\n        cylinder(h = 3, r1 = 12, r2 = 12);\n    \n    // Stem\n    translate([0, 0, 40])\n        cylinder(h = 20, r1 = 6, r2 = 8);\n    \n    // Body\n    translate([0, 0, 60])\n        cylinder(h = 25, r1 = 15, r2 = 10);\n    \n    // Neck\n    translate([0, 0, 85])\n        cylinder(h = 8, r1 = 6, r2 = 4);\n}\n\nmodule bowl() {\n    // Bowl base\n    translate([-30, 0, 38])\n        difference() {\n            sphere(d = 20);\n            translate([0, 0, -10])\n                sphere(d = 16);\n        }\n}\n\nmodule fruit() {\n    // Apples\n    for (i = [0:2]) {\n        angle = i * 120;\n        r = 6;\n        translate([-30 + r * cos(angle), r * sin(angle), 48])\n            sphere(d = 8);\n    }\n}\n\n// Assemble still-life\nunion() {\n    sideboard();\n    vase();\n    bowl();\n    fruit();\n}",
    "renders": true
  },
  {
    "decorative_art": "mythology",
    "openscad_code": "// Greek Mythology Chair - Oracle's Throne of Apollo\n// Medium complexity realistic style furniture with mythological elements\n\n$fn = 64;  // Smooth curves\n\nmodule leg_carving(height) {\n    // Carved leg with spiral pattern\n    difference() {\n        cylinder(h=height, r=5, center=false);\n        for(i=[0:30:330]) {\n            rotate([0,0,i]) translate([3,0,0]) cylinder(h=height+1, r=0.5, center=false);\n        }\n    }\n}\n\nmodule laurel_wreath() {\n    // Laurel wreath decoration\n    union() {\n        // Circular base\n        rotate_extrude() translate([25,0,0]) circle(r=2);\n        \n        // Laurel leaves\n        for(i=[0:20:359]) {\n            rotate([0,0,i]) translate([25,0,0]) rotate([90,0,0]) \n            scale([0.8,2,0.3]) sphere(r=3);\n        }\n    }\n}\n\nmodule back_panel() {\n    // Main back panel with Apollo sun symbol\n    difference() {\n        // Panel base\n        translate([0,0,40]) cube([40,2,40], center=true);\n        \n        // Sun rays - negative space\n        for(i=[0:30:330]) {\n            rotate([0,0,i]) translate([15,1,60]) cube([2,2,8], center=true);\n        }\n        \n        // Central sun disk\n        translate([0,2,60]) cylinder(h=2, r=8, center=true);\n    }\n    \n    // Laurel wreath above\n    translate([0,0,75]) laurel_wreath();\n}\n\nmodule seat_cushion() {\n    // Cushioned seat with mythological pattern\n    difference() {\n        // Main cushion\n        translate([0,0,20]) scale([1,1,0.3]) sphere(r=20);\n        \n        // Greek key pattern around edge\n        for(i=[0:90:270]) {\n            rotate([0,0,i]) translate([15,0,6]) cube([5,1,2], center=true);\n            rotate([0,0,i]) translate([15,0,3]) cube([1,5,2], center=true);\n        }\n    }\n}\n\nmodule support_bar() {\n    // Structural support between legs\n    translate([0,0,10]) cube([35,2,2], center=true);\n}\n\n// Main chair assembly\nunion() {\n    // Seat\n    seat_cushion();\n    \n    // Backrest\n    back_panel();\n    \n    // Legs\n    translate([-15,-15,0]) leg_carving(20);\n    translate([15,-15,0]) leg_carving(20);\n    translate([-15,15,0]) leg_carving(20);\n    translate([15,15,0]) leg_carving(20);\n    \n    // Support bars\n    translate([0,-15,10]) support_bar();\n    translate([0,15,10]) support_bar();\n    \n    // Armrests with carved details\n    translate([-20,0,30]) {\n        cube([5,2,15], center=true);\n        translate([0,0,7.5]) scale([0.8,0.8,0.8]) sphere(r=3);\n    }\n    \n    translate([20,0,30]) {\n        cube([5,2,15], center=true);\n        translate([0,0,7.5]) scale([0.8,0.8,0.8]) sphere(r=3);\n    }\n}\n\n// Base platform\ntranslate([0,0,-2]) cube([50,50,2], center=true);",
    "renders": true
  },
  {
    "decorative_art": "allegory",
    "openscad_code": "// Allegorical Throne Chair - Wisdom & Justice\n// Overall dimensions: 80mm W x 85mm D x 120mm H\n\n$fn = 32;\n\nmodule throne() {\n    // Base foundation\n    difference() {\n        cube([80, 85, 8], center=true);\n        translate([0, 0, -1]) cube([76, 81, 10], center=true);\n    }\n    \n    // Front legs - Owl symbols (wisdom)\n    for(x = [-28, 28]) {\n        translate([x, 35, 0]) {\n            // Leg post\n            cylinder(h=60, r1=4, r2=3);\n            // Owl head detail\n            translate([0, 0, 62]) {\n                sphere(5);\n                // Eyes\n                for(ex = [-2, 2]) {\n                    translate([ex, 1, 1]) sphere(1.5);\n                }\n                // Beak\n                translate([0, -1.5, -0.5]) cube([1, 2, 1], center=true);\n            }\n        }\n    }\n    \n    // Rear legs - Scales symbols (justice)\n    for(x = [-28, 28]) {\n        translate([x, -35, 0]) {\n            cylinder(h=110, r=4);\n            // Scale beam detail\n            translate([0, 0, 112]) {\n                rotate([90, 0, 0]) cylinder(h=15, r=2);\n                // Scale pans\n                translate([0, 7, 0]) sphere(3);\n                translate([0, -7, 0]) sphere(3);\n            }\n        }\n    }\n    \n    // Seat platform\n    translate([0, 0, 60]) {\n        difference() {\n            cube([70, 75, 6], center=true);\n            translate([0, 0, -1]) cube([66, 71, 8], center=true);\n        }\n        // Seat pattern - book spines (knowledge)\n        for(i = [-30:5:30]) {\n            translate([i, 0, 3]) cube([3, 71, 2]);\n        }\n    }\n    \n    // Backrest frame\n    translate([0, -35, 90]) {\n        // Outer frame\n        difference() {\n            cube([70, 8, 50], center=true);\n            translate([0, 0, -1]) cube([66, 12, 52], center=true);\n        }\n        \n        // Central sun symbol (enlightenment)\n        translate([0, 0, 25]) {\n            cylinder(h=10, r=20);\n            // Sun rays\n            for(a = [0:30:359]) {\n                rotate([0, 0, a]) {\n                    translate([15, 0, 5]) cube([10, 2, 2]);\n                }\n            }\n        }\n        \n        // Side scrollwork\n        for(side = [-1, 1]) {\n            translate([side * 25, 0, 10]) {\n                rotate([0, 90, 0]) {\n                    // Vine scroll\n                    for(i = [0:5:25]) {\n                        translate([0, i, 0]) {\n                            rotate([0, i*2, 0]) cylinder(h=5, r=2);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // Armrests - Lion heads (strength)\n    for(x = [-35, 35]) {\n        translate([x, 20, 75]) {\n            // Armrest support\n            cube([8, 25, 4], center=true);\n            // Lion head\n            translate([0, 12, 2]) {\n                sphere(6);\n                // Mane detail\n                for(a = [0:45:359]) {\n                    rotate([0, 0, a]) {\n                        translate([4, 0, 0]) cylinder(h=3, r=1);\n                    }\n                }\n            }\n        }\n    }\n}\n\nthrone();",
    "renders": true
  },
  {
    "decorative_art": "history",
    "openscad_code": "// Tudor-style wooden chest with iron banding and decorative studs\n// Overall dimensions: 100mm wide x 60mm deep x 70mm tall\n\n$fn = 32;  // Smooth curves for 3D printing\nwall = 2;  // 2mm wall thickness for printing\n\n// Main chest body module\nmodule chest_body() {\n    difference() {\n        // Outer shell\n        cube([100, 60, 70], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n            cube([96, 56, 66], center=true);\n    }\n}\n\n// Decorative panel on front\nmodule front_panel() {\n    translate([0, 30-wall/2, 0])\n        difference() {\n            // Raised panel\n            cube([80, wall, 50], center=true);\n            \n            // Carved groove pattern\n            for (x = [-30, -10, 10, 30]) {\n                translate([x, 0, 0])\n                    cube([2, wall+0.1, 46], center=true);\n            }\n        }\n}\n\n// Iron band wrapping around chest\nmodule iron_band(height) {\n    color(\"DarkSlateGray\")\n    difference() {\n        // Band body\n        cube([104, 64, 6], center=true);\n        \n        // Remove center to create band\n        cube([100-wall*2, 60-wall*2, 8], center=true);\n    }\n}\n\n// Decorative iron studs\nmodule studs() {\n    color(\"DarkSlateGray\")\n    for (x = [-40, -20, 0, 20, 40])\n    for (y = [-20, 0, 20]) {\n        translate([x, y+30, 0])\n            cylinder(h=wall+1, r=2, center=true);\n    }\n}\n\n// Chest lid with curved top\nmodule chest_lid() {\n    translate([0, 0, 70/2+2])\n    union() {\n        // Main lid\n        difference() {\n            // Curved top\n            scale([1, 1, 0.3])\n                sphere(d=100);\n            \n            // Flatten bottom\n            translate([0, 0, -15])\n                cube([200, 200, 30], center=true);\n            \n            // Hollow interior\n            scale([1, 1, 1/0.3])\n                translate([0, 0, -5])\n                    sphere(d=96);\n        }\n        \n        // Lid rim\n        translate([0, 0, -5])\n            difference() {\n                cube([100+wall*2, 60+wall*2, wall], center=true);\n                cube([100, 60, wall+2], center=true);\n            }\n    }\n}\n\n// Decorative front latch\nmodule front_latch() {\n    translate([0, 30+wall/2, 10])\n    union() {\n        // Hasp plate\n        cube([20, wall, 15], center=true);\n        \n        // Hinge loop\n        translate([0, wall/2+1, 7])\n            rotate([90, 0, 0])\n                cylinder(h=wall*2, r=3, center=true);\n    }\n}\n\n// Back hinges\nmodule back_hinges() {\n    for (x = [-35, 35]) {\n        translate([x, -30-wall/2, 60]) {\n            // Lower hinge on body\n            cube([6, wall, 15], center=true);\n            \n            // Upper hinge on lid\n            translate([0, 0, 10])\n                cube([6, wall, 15], center=true);\n        }\n    }\n}\n\n// Wooden feet blocks\nmodule feet() {\n    for (x = [-40, 40])\n    for (y = [-20, 20]) {\n        translate([x, y, -70/2-5])\n            cube([15, 15, 10], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Wooden parts in brown\n    color(\"Sienna\") {\n        chest_body();\n        chest_lid();\n        front_panel();\n        feet();\n    }\n    \n    // Iron hardware\n    iron_band(-70/2+10);\n    iron_band(0);\n    iron_band(70/2-10);\n    studs();\n    front_latch();\n    back_hinges();\n}",
    "renders": true
  },
  {
    "decorative_art": "religious",
    "openscad_code": "// Religious Furniture: Small Christian Prayer Kneeler with Cross Detail\n// Overall size: 100mm(W) x 70mm(D) x 80mm(H)\n// Wall thickness: 2mm throughout for 3D printing\n\n// Main parameters\nkneeler_width = 100;\nkneeler_depth = 70;\nkneeler_height = 80;\nwall_thick = 2;\n\n// Helper module for rounded edges\nmodule rounded_cube(size, radius) {\n    hull() {\n        for(dx=[0,size.x])\n            for(dy=[0,size.y])\n                for(dz=[0,size.z])\n                    translate([dx,dy,dz])\n                        sphere(r=radius, $fn=16);\n    }\n}\n\n// Base frame structure\nmodule base_frame() {\n    union() {\n        // Left side panel\n        translate([wall_thick,0,0])\n            cube([wall_thick, kneeler_depth, kneeler_height-wall_thick]);\n        \n        // Right side panel\n        translate([kneeler_width-2*wall_thick,0,0])\n            cube([wall_thick, kneeler_depth, kneeler_height-wall_thick]);\n        \n        // Front support bar\n        translate([wall_thick,0,wall_thick])\n            cube([kneeler_width-2*wall_thick, wall_thick, kneeler_height-2*wall_thick]);\n        \n        // Rear support bar\n        translate([wall_thick,kneeler_depth-wall_thick,wall_thick])\n            cube([kneeler_width-2*wall_thick, wall_thick, kneeler_height-2*wall_thick]);\n    }\n}\n\n// Kneeling pad with cushion detail\nmodule kneeling_pad() {\n    // Main pad\n    translate([wall_thick*2, wall_thick*2, kneeler_height-wall_thick*4])\n        rounded_cube([kneeler_width-wall_thick*4, kneeler_depth-wall_thick*4, wall_thick*3], 3);\n    \n    // Cushion seam lines\n    for(i=[1:3]) {\n        translate([wall_thick*2+10*i, wall_thick*2+3, kneeler_height-wall_thick*3])\n            cube([0.5, kneeler_depth-wall_thick*4-6, 0.5]);\n    }\n}\n\n// Book rest with 15-degree angle\nmodule book_rest() {\n    // Sloped surface\n    translate([wall_thick*2, kneeler_depth/3, kneeler_height*0.6])\n        rotate([75,0,0])\n            cube([kneeler_width-wall_thick*4, kneeler_depth/2, wall_thick*2]);\n    \n    // Bottom support lip\n    translate([wall_thick*2, kneeler_depth/3+wall_thick, kneeler_height*0.6-wall_thick*2])\n        rotate([75,0,0])\n            cube([kneeler_width-wall_thick*4, wall_thick*2, wall_thick*2]);\n}\n\n// Cross detail for back\nmodule cross_detail() {\n    // Vertical beam\n    translate([kneeler_width/2-wall_thick/2, kneeler_depth-wall_thick*2, kneeler_height-wall_thick*6])\n        cube([wall_thick, wall_thick*2, 25]);\n    \n    // Horizontal beam\n    translate([kneeler_width/2-7.5, kneeler_depth-wall_thick*2, kneeler_height-wall_thick*3])\n        cube([15, wall_thick*2, wall_thick]);\n    \n    // Decorative ends\n    sphere(r=wall_thick);\n    translate([0,0,25]) sphere(r=wall_thick);\n    translate([-7.5,0,0]) sphere(r=wall_thick);\n    translate([7.5,0,0]) sphere(r=wall_thick);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    base_frame();\n    kneeling_pad();\n    book_rest();\n    \n    // Cross detail\n    cross_detail();\n    \n    // Corner reinforcements\n    for(x=[wall_thick, kneeler_width-2*wall_thick]) {\n        for(y=[wall_thick, kneeler_depth-wall_thick]) {\n            translate([x,y,wall_thick])\n                cylinder(h=kneeler_height-2*wall_thick, r=wall_thick, $fn=8);\n        }\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "genre",
    "openscad_code": "// Rococo Style Miniature Console Table\n// Realistic style, medium complexity, 3D printable\n\n$fn = 36;\n\n// Main dimensions\ntable_width = 80;\ntable_depth = 40;\ntable_height = 60;\nleg_height = 45;\ntop_thickness = 4;\n\nmodule table_top() {\n    // Main top with rounded edges\n    translate([0, 0, table_height - top_thickness/2])\n    difference() {\n        minkowski() {\n            cube([table_width, table_depth, top_thickness], center=true);\n            cylinder(h=0.1, r=2);\n        }\n        // Decorative edge groove\n        translate([0, 0, top_thickness/2 - 1])\n        cube([table_width - 8, table_depth - 8, 2], center=true);\n    }\n    \n    // Ornate apron with curves\n    translate([0, 0, table_height - top_thickness - 4])\n    difference() {\n        for(side = [-1, 1]) {\n            translate([0, side * table_depth/4, 0])\n            cube([table_width - 8, table_depth/2, 8], center=true);\n        }\n        // Decorative cutouts\n        for(i = [-1, 0, 1]) {\n            translate([i * 20, 0, 2])\n            cylinder(h=10, r=3);\n        }\n    }\n}\n\nmodule cabriole_leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, leg_height/2])\n    union() {\n        // Main leg shape - tapered cylinder\n        cylinder(h1=leg_height, r1=4, r2=2.5);\n        \n        // Knee scroll detail\n        translate([0, 0, leg_height - 6])\n        rotate([0, 0, 45])\n        scale([1.5, 1, 1])\n        sphere(r=3);\n        \n        // Ankle detail\n        translate([0, 0, 3])\n        rotate([0, 0, -30])\n        scale([1.2, 0.8, 1])\n        sphere(r=2.5);\n        \n        // Foot pad\n        translate([0, 0, 0])\n        scale([1.2, 1.2, 0.5])\n        cylinder(h=2, r=3);\n    }\n}\n\nmodule stretcher() {\n    // X-stretcher between legs\n    translate([0, 0, 15])\n    union() {\n        rotate([0, 0, 45])\n        cube([table_width - 16, 3, 3], center=true);\n        rotate([0, 0, -45])\n        cube([table_width - 16, 3, 3], center=true);\n        \n        // Central rosette\n        translate([0, 0, 1.5])\n        cylinder(h=3, r=6);\n        translate([0, 0, 4])\n        sphere(r=2);\n    }\n}\n\nmodule back_panel() {\n    // Decorative back with shell motif\n    translate([0, -table_depth/2 + 2, table_height - 20])\n    union() {\n        // Main back panel\n        cube([table_width - 12, 4, 16], center=true);\n        \n        // Shell carving\n        translate([0, 2.1, 8])\n        scale([1.2, 1, 1])\n        sphere(r=5);\n        \n        // Scroll details\n        for(side = [-1, 1]) {\n            translate([side * 25, 2.1, 12])\n            rotate([0, 90, 0])\n            scale([1, 1, 0.5])\n            cylinder(h=8, r=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    table_top();\n    \n    // Four cabriole legs\n    cabriole_leg(table_width/2 - 6, table_depth/2 - 6);\n    cabriole_leg(-table_width/2 + 6, table_depth/2 - 6);\n    cabriole_leg(table_width/2 - 6, -table_depth/2 + 6);\n    cabriole_leg(-table_width/2 + 6, -table_depth/2 + 6);\n    \n    stretcher();\n    back_panel();\n}",
    "renders": true
  },
  {
    "decorative_art": "seascape",
    "openscad_code": "// Seascape Coffee Table: A low rectangular table with wave-patterned top and coral-like legs\n// Overall dimensions: 120mm x 70mm x 45mm, wall thickness 2mm\n\n// Parameters\ntable_length = 120;\ntable_width = 70;\ntable_height = 45;\nwall_thickness = 2;\nleg_radius = 12;\n\n// Main table top with ocean wave pattern\nmodule table_top() {\n    difference() {\n        // Table surface\n        translate([0, 0, table_height - wall_thickness]) {\n            cube([table_length, table_width, wall_thickness], center=true);\n        }\n        \n        // Wave cutouts in top surface\n        for(i = [0:3]) {\n            translate([i * 30 - 45, 0, table_height - wall_thickness - 0.1]) {\n                scale([1, 0.8, 1]) {\n                    cylinder(h=wall_thickness + 0.2, r=15, center=true);\n                }\n            }\n        }\n        \n        // Drainage holes\n        for(x = [-40, 0, 40]) {\n            for(y = [-20, 0, 20]) {\n                translate([x, y, table_height - wall_thickness - 0.1]) {\n                    cylinder(h=wall_thickness + 0.2, r=3, $fn=8);\n                }\n            }\n        }\n    }\n}\n\n// Table frame structure\nmodule table_frame() {\n    // Side rails\n    for(side = [0, 1]) {\n        rotate([0, 0, side * 90]) {\n            translate([0, table_width/2 - wall_thickness/2, table_height/2 - wall_thickness]) {\n                cube([table_length - 20, wall_thickness, table_height - wall_thickness], center=true);\n            }\n        }\n    }\n    \n    // End rails\n    for(end = [0, 1]) {\n        translate([table_length/2 - 10 - end * (table_length - 20), 0, table_height/2 - wall_thickness]) {\n            cube([wall_thickness, table_width - 20, table_height - wall_thickness], center=true);\n        }\n    }\n}\n\n// Coral-inspired leg structure\nmodule coral_leg(x_pos, y_pos) {\n    // Main leg cylinder\n    translate([x_pos, y_pos, table_height/2 - leg_radius]) {\n        cylinder(h=table_height - leg_radius*2, r=leg_radius, center=true, $fn=16);\n    }\n    \n    // Coral branches\n    for(i = [0:3]) {\n        rotate([0, 0, i * 90 + 45]) {\n            translate([x_pos + cos(i * 90 + 45) * 8, y_pos + sin(i * 90 + 45) * 8, table_height/2]) {\n                cylinder(h=leg_radius * 1.5, r=leg_radius/3, center=true, $fn=8);\n            }\n        }\n    }\n    \n    // Base pad\n    translate([x_pos, y_pos, leg_radius/2]) {\n        cylinder(h=leg_radius, r=leg_radius + 2, center=true, $fn=16);\n    }\n}\n\n// Shell decorative elements\nmodule shell(x, y, z) {\n    translate([x, y, z]) {\n        scale([0.5, 0.5, 0.3]) {\n            // Shell spiral\n            for(i = [0:15]) {\n                rotate([0, 0, i * 30]) {\n                    translate([i * 0.8, 0, 0]) {\n                        sphere(r=3 - i * 0.15, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Assemble the table\nunion() {\n    // Main table components\n    table_top();\n    table_frame();\n    \n    // Four coral legs\n    coral_leg(table_length/2 - 20, table_width/2 - 20);\n    coral_leg(-table_length/2 + 20, table_width/2 - 20);\n    coral_leg(table_length/2 - 20, -table_width/2 + 20);\n    coral_leg(-table_length/2 + 20, -table_width/2 + 20);\n    \n    // Decorative shells on corners\n    shell(table_length/2 - 10, table_width/2 - 10, table_height);\n    shell(-table_length/2 + 10, table_width/2 - 10, table_height);\n    shell(table_length/2 - 10, -table_width/2 + 10, table_height);\n    shell(-table_length/2 + 10, -table_width/2 + 10, table_height);\n}",
    "renders": true
  },
  {
    "decorative_art": "pastoral",
    "openscad_code": "// Pastoral Milk Stool – realistic style, medium complexity\n// Overall height 110 mm, seat Ø 200 mm, printable without support\n\nwall = 2;       // uniform wall thickness for 3-D printing\nleg_d = 18;     // leg diameter\nleg_h = 95;     // leg height below seat\nseat_d = 200;   // seat diameter\nseat_h = 8;     // seat thickness\nring_d = 120;   // stretcher ring diameter\nring_h = 6;     // stretcher height\nring_pos = 50;  // vertical position of stretcher\n\nmodule leg() {\n    // one leg with gentle taper for realistic look\n    cylinder(h = leg_h, d1 = leg_d, d2 = leg_d * 0.8, $fn = 32);\n}\n\nmodule seat() {\n    // round seat with shallow depression on top\n    difference() {\n        cylinder(h = seat_h, d = seat_d, $fn = 64);\n        translate([0, 0, -0.1])\n            cylinder(h = seat_h + 0.2, d = seat_d - 2 * wall, $fn = 64);\n    }\n    // decorative concentric grooves\n    for (r = [seat_d/2 - 10, seat_d/2 - 20, seat_d/2 - 30]) {\n        difference() {\n            translate([0, 0, seat_h - 1.5])\n                cylinder(h = 1.5, d = r * 2 + wall, $fn = 64);\n            translate([0, 0, seat_h - 1.5])\n                cylinder(h = 1.5 + 0.1, d = r * 2, $fn = 64);\n        }\n    }\n}\n\nmodule stretcher_ring() {\n    // circular stretcher connecting all legs\n    difference() {\n        cylinder(h = ring_h, d = ring_d + wall * 2, $fn = 64);\n        translate([0, 0, -0.1])\n            cylinder(h = ring_h + 0.2, d = ring_d, $fn = 64);\n    }\n}\n\nmodule stool() {\n    union() {\n        // seat\n        translate([0, 0, leg_h])\n            seat();\n\n        // legs – threefold symmetry for pastoral look\n        for (a = [0, 120, 240]) {\n            rotate([0, 0, a])\n                translate([seat_d/2 * 0.65, 0, 0])\n                    leg();\n        }\n\n        // stretcher ring\n        translate([0, 0, ring_pos])\n            stretcher_ring();\n    }\n}\n\n// render the stool centered on build plate\nstool();",
    "renders": true
  },
  {
    "decorative_art": "top",
    "openscad_code": "// Spinning-top style decorative furniture piece\n// Overall height ~110 mm, suitable for table display\n\n// Main parameters\n$fn = 30;\nwall = 2;\n\nmodule top_body() {\n    // Central stem with realistic proportions\n    difference() {\n        cylinder(h = 40, d1 = 28, d2 = 22, center = true); // Tapered stem\n        translate([0, 0, -20])\n            cylinder(h = 42, d = 24, center = false); // Hollow core\n    }\n}\n\nmodule handle() {\n    // Traditional furniture-style knob\n    union() {\n        // Flared base\n        translate([0, 0, 22])\n            cylinder(h = 4, d1 = 24, d2 = 28);\n        // Grip ball\n        translate([0, 0, 26])\n            sphere(d = 20);\n        // Decorative ring detail\n        translate([0, 0, 23])\n            cylinder(h = 1.5, d = 26);\n    }\n}\n\nmodule spinning_disc() {\n    // Large spinning disc - furniture accent piece\n    difference() {\n        union() {\n            // Main disc\n            cylinder(h = 5, d = 80, center = true);\n            // Raised decorative band\n            translate([0, 0, -2.5])\n                cylinder(h = 3, d = 70);\n        }\n        // Center hole for stem\n        translate([0, 0, -3])\n            cylinder(h = 6, d = 24);\n    }\n}\n\nmodule support_base() {\n    // Stable furniture-style base\n    difference() {\n        union() {\n            // Wide base for stability\n            cylinder(h = 8, d = 85);\n            // Decorative step detail\n            translate([0, 0, 8])\n                cylinder(h = 4, d = 75);\n            // Final taper\n            translate([0, 0, 12])\n                cylinder(h = 4, d = 65);\n        }\n        // Stem mounting hole\n        translate([0, 0, -1])\n            cylinder(h = 14, d = 22);\n    }\n}\n\nmodule decorative_inlay() {\n    // Furniture-style inlay pattern around disc\n    for(i = [0:30:359]) {\n        rotate([0, 0, i])\n            translate([35, 0, 2.5])\n                cube([10, 2, 2], center = true);\n    }\n}\n\nmodule joint_detail() {\n    // Traditional furniture joint detail\n    translate([0, 0, -20])\n    difference() {\n        // Decorative collar\n        cylinder(h = 6, d = 30);\n        // Groove detail\n        translate([0, 0, 2])\n            cylinder(h = 2, d = 26);\n    }\n}\n\n// Assemble the top\nunion() {\n    support_base();\n    \n    translate([0, 0, 12])\n    union() {\n        spinning_disc();\n        decorative_inlay();\n    }\n    \n    translate([0, 0, 14])\n    top_body();\n    \n    translate([0, 0, 14])\n    joint_detail();\n    \n    translate([0, 0, 14])\n    handle();\n}",
    "renders": true
  },
  {
    "decorative_art": "kite",
    "openscad_code": "// Kite-shaped decorative shelf unit\n// Dimensions: 100mm (W) x 200mm (H) x 80mm (D)\n\n// Constants\nwall_thickness = 2;\nshelf_thickness = 3;\nframe_width = 5;\n\n// Main kite frame\nmodule kite_frame() {\n    // Diamond shape frame\n    difference() {\n        // Outer diamond\n        cube([100, 200, frame_width], center=true);\n        \n        // Inner cutout\n        translate([0, 0, 1])\n        scale([0.8, 0.8, 1])\n        cube([100, 200, frame_width+1], center=true);\n    }\n}\n\n// Cross spars for kite structure\nmodule kite_spars() {\n    // Vertical spar\n    translate([0, 0, 0])\n    cube([wall_thickness, 180, wall_thickness], center=true);\n    \n    // Horizontal spar\n    translate([0, 0, 0])\n    cube([90, wall_thickness, wall_thickness], center=true);\n}\n\n// Shelf supports\nmodule shelf_supports() {\n    for(y = [-60, -20, 20, 60]) {\n        translate([0, y, 30])\n        cube([wall_thickness*2, wall_thickness*2, 60], center=true);\n    }\n}\n\n// Shelves\nmodule shelves() {\n    for(y = [-60, -20, 20, 60]) {\n        translate([0, y, 60])\n        cube([80, shelf_thickness*4, 60], center=true);\n    }\n}\n\n// Decorative tail ribbons\nmodule tail_ribbons() {\n    for(i = [0:3]) {\n        translate([0, 90 + i*15, -5 - i*5])\n        rotate([0, 0, 45 + i*15])\n        cube([8, 20, 1], center=true);\n    }\n}\n\n// Kite bow details\nmodule kite_bows() {\n    // Top bow\n    translate([0, 90, 0])\n    cylinder(h=wall_thickness, r1=10, r2=5, center=true);\n    \n    // Bottom bow\n    translate([0, -90, 0])\n    cylinder(h=wall_thickness, r1=5, r2=10, center=true);\n}\n\n// Assembly\nunion() {\n    // Main structure\n    translate([0, 0, 0])\n    kite_frame();\n    \n    translate([0, 0, frame_width/2])\n    kite_spars();\n    \n    // Shelving system\n    translate([0, 0, frame_width/2])\n    shelf_supports();\n    \n    translate([0, 0, frame_width/2])\n    shelves();\n    \n    // Decorative elements\n    translate([0, 0, frame_width/2])\n    tail_ribbons();\n    \n    translate([0, 0, frame_width/2])\n    kite_bows();\n}\n\n// Base stand\ntranslate([0, -110, -40])\ncube([60, 20, 80], center=true);\n\n// Back support\ntranslate([0, -100, 0])\nrotate([90, 0, 0])\ncube([2, 100, 80], center=true);",
    "renders": true
  },
  {
    "decorative_art": "frisbee",
    "openscad_code": "// Frisbee Decorative Tray (Wall-Mounted Display Shelf)\n// Realistic style, medium complexity\n// Wall-mount bracket + frisbee tray hybrid for small items\n\n// Parameters\nfrisbee_diam = 120;\nfrisbee_thick = 8;\nwall_gap = 15;\nwall_thick = 2;\nmount_screw_d = 3.5;\nmount_screw_head_d = 6;\n\n// Main frisbee tray body\nmodule frisbee_tray() {\n    difference() {\n        // Outer rim\n        union() {\n            cylinder(d=frisbee_diam, h=frisbee_thick, $fn=60);\n            \n            // Raised rim lip\n            translate([0,0,frisbee_thick])\n                cylinder(d1=frisbee_diam, d2=frisbee_diam-8, h=4, $fn=60);\n        }\n        \n        // Hollow center cavity\n        translate([0,0,wall_thick])\n            cylinder(d=frisbee_diam-2*wall_thick, h=frisbee_thick+1, $fn=60);\n        \n        // Finger grip recesses (decorative)\n        for (a = [0:120:359]) {\n            rotate([0,0,a])\n                translate([frisbee_diam/2 - 10, 0, frisbee_thick/2])\n                    cube([20, 6, frisbee_thick], center=true);\n        }\n        \n        // Wall mount keyhole\n        translate([0, frisbee_diam/2 - 15, frisbee_thick/2])\n            rotate([90,0,0])\n                cylinder(d=mount_screw_head_d + 1, h=wall_thick + 1, $fn=20);\n        translate([0, frisbee_diam/2 - 15, frisbee_thick/2])\n            rotate([90,0,0])\n                translate([0, 0, (mount_screw_head_d - mount_screw_d)/2])\n                    cube([mount_screw_d + 1, mount_screw_head_d - mount_screw_d + 1, wall_thick + 1], center=true);\n    }\n}\n\n// Decorative flight rings on surface\nmodule flight_rings() {\n    for (r = [frisbee_diam/4, frisbee_diam/3, frisbee_diam/2.5]) {\n        translate([0,0,frisbee_thick - 0.5])\n            difference() {\n                cylinder(d=r + 2, h=0.8, $fn=60);\n                cylinder(d=r, h=0.9, $fn=60);\n            }\n    }\n}\n\n// Structural back support ribs\nmodule back_supports() {\n    for (a = [45, 135, 225, 315]) {\n        rotate([0,0,a])\n            translate([frisbee_diam/3, 0, 0])\n                cube([frisbee_diam/8, wall_thick, frisbee_thick - wall_gap], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    frisbee_tray();\n    flight_rings();\n    translate([0,0,wall_gap])\n        back_supports();\n}",
    "renders": true
  },
  {
    "decorative_art": "jacks",
    "openscad_code": "// Realistic Jacks Decorative Furniture Piece\n// Medium complexity 3D printable model\n\n// Overall dimensions\njack_size = 80;  // mm - fits within 50-150mm requirement\nwall_thickness = 2;  // mm for 3D printing\n\nmodule jack_spoke(length, thickness) {\n    // Create a single spoke with rounded ends\n    difference() {\n        // Main cylindrical spoke\n        cylinder(h = length, d = thickness, $fn = 32);\n        \n        // Rounded ends for smoother appearance\n        translate([0, 0, -0.5]) \n            sphere(d = thickness + 1, $fn = 32);\n        translate([0, 0, length + 0.5]) \n            sphere(d = thickness + 1, $fn = 32);\n    }\n}\n\nmodule jack_joint() {\n    // Central joint sphere with decorative details\n    difference() {\n        // Main joint sphere\n        sphere(d = 12, $fn = 32);\n        \n        // Decorative rings\n        for (i = [1:3]) {\n            rotate([0, 90, 0]) \n                cylinder(h = 14, d = 10 + i * 0.5, center = true, $fn = 32);\n        }\n        \n        // Center hole for structural integrity\n        cylinder(h = 14, d = 6, center = true, $fn = 32);\n    }\n}\n\nmodule decorative_ring(height, radius) {\n    // Decorative ring for structural support\n    difference() {\n        cylinder(h = height, d = radius * 2, $fn = 64);\n        cylinder(h = height + 0.2, d = (radius - wall_thickness) * 2, $fn = 64);\n    }\n}\n\nmodule jack_structure() {\n    // Main jacks structure with 6 spokes\n    union() {\n        // Central joint\n        jack_joint();\n        \n        // Array of 6 spokes in jacks formation\n        for (i = [0:5]) {\n            rotate([0, 0, i * 60]) {\n                rotate([90, 0, 0]) {\n                    translate([0, 0, -6]) \n                        jack_spoke(jack_size/2 - 6, 8);\n                }\n            }\n        }\n        \n        // Additional diagonal spokes for furniture-like stability\n        for (i = [0:2]) {\n            rotate([0, 0, i * 120]) {\n                rotate([35.26, 0, 0]) {  // Magic angle for jacks\n                    translate([0, 0, -6]) \n                        jack_spoke(jack_size/2 - 6, 8);\n                }\n            }\n        }\n    }\n}\n\nmodule base_support() {\n    // Decorative base for furniture stability\n    difference() {\n        // Main base ring\n        cylinder(h = 4, d = jack_size * 1.2, $fn = 64);\n        \n        // Inner ring for material saving\n        cylinder(h = 4.2, d = jack_size * 0.8, $fn = 64);\n        \n        // Decorative pattern holes\n        for (i = [0:11]) {\n            rotate([0, 0, i * 30]) {\n                translate([jack_size * 0.5, 0, -0.5]) \n                    cylinder(h = 5, d = 6, $fn = 32);\n            }\n        }\n    }\n}\n\nmodule furniture_feet() {\n    // 3D printable feet for furniture stability\n    for (i = [0:2]) {\n        rotate([0, 0, i * 120]) {\n            translate([jack_size * 0.4, 0, -2]) {\n                // Foot base\n                difference() {\n                    cylinder(h = 6, d = 12, $fn = 32);\n                    cylinder(h = 6.2, d = 8, $fn = 32);\n                }\n                \n                // Anti-slip ring\n                translate([0, 0, 6]) {\n                    cylinder(h = 1, d = 14, $fn = 32);\n                }\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Decorative base\n    base_support();\n    \n    // Main jacks structure\n    translate([0, 0, 4]) \n        jack_structure();\n    \n    // Support feet\n    translate([0, 0, 4]) \n        furniture_feet();\n    \n    // Additional decorative elements\n    translate([0, 0, jack_size/2 + 4]) {\n        decorative_ring(3, 15);\n    }\n    \n    translate([0, 0, jack_size/2 + 8]) {\n        decorative_ring(2, 12);\n    }\n}",
    "renders": true
  },
  {
    "decorative_art": "marbles",
    "openscad_code": "// Marbles Console Table - Realistic Style\n// Dimensions: 120mm W x 40mm D x 75mm H\n\nmodule marble(d=20) {\n    sphere(d=d, $fn=32);\n}\n\nmodule marble_holder() {\n    // Base plate for marble display\n    translate([0, 0, 2]) cube([100, 30, 2], center=true);\n    \n    // Sides to contain marbles\n    translate([49, 0, 8]) cube([2, 28, 12]);\n    translate([-49, 0, 8]) cube([2, 28, 12]);\n    translate([0, 14, 8]) cube([96, 2, 12]);\n    translate([0, -14, 8]) cube([96, 2, 12]);\n}\n\nmodule table_frame() {\n    // Left leg\n    translate([-45, -15, 0]) {\n        cylinder(h=73, d=6, $fn=20);\n        translate([0, 0, 73]) cylinder(h=4, d1=6, d2=8, $fn=20);\n    }\n    \n    // Right leg\n    translate([45, -15, 0]) {\n        cylinder(h=73, d=6, $fn=20);\n        translate([0, 0, 73]) cylinder(h=4, d1=6, d2=8, $fn=20);\n    }\n    \n    // Center support\n    translate([0, 15, 36]) cube([90, 3, 4], center=true);\n    \n    // Lower stretcher\n    translate([0, 0, 20]) cube([90, 2, 2], center=true);\n}\n\nmodule table_top() {\n    // Main top\n    translate([0, 0, 77]) cube([120, 40, 4], center=true);\n    \n    // Edge detail\n    translate([0, 0, 79]) cube([118, 38, 2], center=true);\n    \n    // Rounded corners\n    for(x=[-58, 58]) for(y=[-18, 18]) {\n        translate([x, y, 79]) cylinder(h=2, d=4, $fn=20);\n    }\n}\n\nmodule decorative_details() {\n    // Front apron pattern\n    for(i=[-40:20:40]) {\n        translate([i, -19, 40]) {\n            cube([8, 2, 25]);\n            translate([0, 0, 27]) sphere(d=4, $fn=16);\n        }\n    }\n    \n    // Side decorative elements\n    for(side=[-1, 1]) {\n        translate([60*side, 0, 55]) {\n            rotate([90, 0, 90]) cylinder(h=20, d=3, $fn=16);\n            translate([0, 0, 10]) sphere(d=4, $fn=16);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Table structure\n    table_frame();\n    table_top();\n    decorative_details();\n    \n    // Marble display area\n    translate([0, 15, 12]) marble_holder();\n    \n    // Marbles\n    for(i=[-30:15:30]) {\n        for(j=[-8:8:8]) {\n            color([0.3, 0.3, 0.3]) translate([i, j+15, 20]) marble(d=12);\n        }\n    }\n    \n    // Additional marbles on top\n    color([0.8, 0.8, 0.8]) translate([-30, 0, 81]) marble(d=15);\n    color([0.2, 0.2, 0.4]) translate([0, 0, 81]) marble(d=15);\n    color([0.4, 0.2, 0.2]) translate([30, 0, 81]) marble(d=15);\n}",
    "renders": true
  }
]